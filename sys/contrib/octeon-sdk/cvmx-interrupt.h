begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to the Mips interrupts.  *  *<hr>$Revision: 42203 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_INTERRUPT_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_INTERRUPT_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * Enumeration of Interrupt numbers  */
typedef|typedef
enum|enum
block|{
comment|/* 0 - 7 represent the 8 MIPS standard interrupt sources */
name|CVMX_IRQ_SW0
init|=
literal|0
block|,
name|CVMX_IRQ_SW1
init|=
literal|1
block|,
name|CVMX_IRQ_CIU0
init|=
literal|2
block|,
name|CVMX_IRQ_CIU1
init|=
literal|3
block|,
name|CVMX_IRQ_4
init|=
literal|4
block|,
name|CVMX_IRQ_5
init|=
literal|5
block|,
name|CVMX_IRQ_6
init|=
literal|6
block|,
name|CVMX_IRQ_7
init|=
literal|7
block|,
comment|/* 8 - 71 represent the sources in CIU_INTX_EN0 */
name|CVMX_IRQ_WORKQ0
init|=
literal|8
block|,
name|CVMX_IRQ_WORKQ1
init|=
literal|9
block|,
name|CVMX_IRQ_WORKQ2
init|=
literal|10
block|,
name|CVMX_IRQ_WORKQ3
init|=
literal|11
block|,
name|CVMX_IRQ_WORKQ4
init|=
literal|12
block|,
name|CVMX_IRQ_WORKQ5
init|=
literal|13
block|,
name|CVMX_IRQ_WORKQ6
init|=
literal|14
block|,
name|CVMX_IRQ_WORKQ7
init|=
literal|15
block|,
name|CVMX_IRQ_WORKQ8
init|=
literal|16
block|,
name|CVMX_IRQ_WORKQ9
init|=
literal|17
block|,
name|CVMX_IRQ_WORKQ10
init|=
literal|18
block|,
name|CVMX_IRQ_WORKQ11
init|=
literal|19
block|,
name|CVMX_IRQ_WORKQ12
init|=
literal|20
block|,
name|CVMX_IRQ_WORKQ13
init|=
literal|21
block|,
name|CVMX_IRQ_WORKQ14
init|=
literal|22
block|,
name|CVMX_IRQ_WORKQ15
init|=
literal|23
block|,
name|CVMX_IRQ_GPIO0
init|=
literal|24
block|,
name|CVMX_IRQ_GPIO1
init|=
literal|25
block|,
name|CVMX_IRQ_GPIO2
init|=
literal|26
block|,
name|CVMX_IRQ_GPIO3
init|=
literal|27
block|,
name|CVMX_IRQ_GPIO4
init|=
literal|28
block|,
name|CVMX_IRQ_GPIO5
init|=
literal|29
block|,
name|CVMX_IRQ_GPIO6
init|=
literal|30
block|,
name|CVMX_IRQ_GPIO7
init|=
literal|31
block|,
name|CVMX_IRQ_GPIO8
init|=
literal|32
block|,
name|CVMX_IRQ_GPIO9
init|=
literal|33
block|,
name|CVMX_IRQ_GPIO10
init|=
literal|34
block|,
name|CVMX_IRQ_GPIO11
init|=
literal|35
block|,
name|CVMX_IRQ_GPIO12
init|=
literal|36
block|,
name|CVMX_IRQ_GPIO13
init|=
literal|37
block|,
name|CVMX_IRQ_GPIO14
init|=
literal|38
block|,
name|CVMX_IRQ_GPIO15
init|=
literal|39
block|,
name|CVMX_IRQ_MBOX0
init|=
literal|40
block|,
name|CVMX_IRQ_MBOX1
init|=
literal|41
block|,
name|CVMX_IRQ_UART0
init|=
literal|42
block|,
name|CVMX_IRQ_UART1
init|=
literal|43
block|,
name|CVMX_IRQ_PCI_INT0
init|=
literal|44
block|,
name|CVMX_IRQ_PCI_INT1
init|=
literal|45
block|,
name|CVMX_IRQ_PCI_INT2
init|=
literal|46
block|,
name|CVMX_IRQ_PCI_INT3
init|=
literal|47
block|,
name|CVMX_IRQ_PCI_MSI0
init|=
literal|48
block|,
name|CVMX_IRQ_PCI_MSI1
init|=
literal|49
block|,
name|CVMX_IRQ_PCI_MSI2
init|=
literal|50
block|,
name|CVMX_IRQ_PCI_MSI3
init|=
literal|51
block|,
name|CVMX_IRQ_RESERVED44
init|=
literal|52
block|,
name|CVMX_IRQ_TWSI
init|=
literal|53
block|,
name|CVMX_IRQ_RML
init|=
literal|54
block|,
name|CVMX_IRQ_TRACE
init|=
literal|55
block|,
name|CVMX_IRQ_GMX_DRP0
init|=
literal|56
block|,
name|CVMX_IRQ_GMX_DRP1
init|=
literal|57
block|,
name|CVMX_IRQ_IPD_DRP
init|=
literal|58
block|,
name|CVMX_IRQ_KEY_ZERO
init|=
literal|59
block|,
name|CVMX_IRQ_TIMER0
init|=
literal|60
block|,
name|CVMX_IRQ_TIMER1
init|=
literal|61
block|,
name|CVMX_IRQ_TIMER2
init|=
literal|62
block|,
name|CVMX_IRQ_TIMER3
init|=
literal|63
block|,
name|CVMX_IRQ_USB
init|=
literal|64
block|,
comment|/* Doesn't apply on CN38XX or CN58XX */
name|CVMX_IRQ_PCM
init|=
literal|65
block|,
name|CVMX_IRQ_MPI
init|=
literal|66
block|,
name|CVMX_IRQ_TWSI2
init|=
literal|67
block|,
comment|/* Added in CN56XX */
name|CVMX_IRQ_POWIQ
init|=
literal|68
block|,
comment|/* Added in CN56XX */
name|CVMX_IRQ_IPDPPTHR
init|=
literal|69
block|,
comment|/* Added in CN56XX */
name|CVMX_IRQ_MII
init|=
literal|70
block|,
comment|/* Added in CN56XX */
name|CVMX_IRQ_BOOTDMA
init|=
literal|71
block|,
comment|/* Added in CN56XX */
comment|/* 72 - 135 represent the sources in CIU_INTX_EN1 */
name|CVMX_IRQ_WDOG0
init|=
literal|72
block|,
name|CVMX_IRQ_WDOG1
init|=
literal|73
block|,
name|CVMX_IRQ_WDOG2
init|=
literal|74
block|,
name|CVMX_IRQ_WDOG3
init|=
literal|75
block|,
name|CVMX_IRQ_WDOG4
init|=
literal|76
block|,
name|CVMX_IRQ_WDOG5
init|=
literal|77
block|,
name|CVMX_IRQ_WDOG6
init|=
literal|78
block|,
name|CVMX_IRQ_WDOG7
init|=
literal|79
block|,
name|CVMX_IRQ_WDOG8
init|=
literal|80
block|,
name|CVMX_IRQ_WDOG9
init|=
literal|81
block|,
name|CVMX_IRQ_WDOG10
init|=
literal|82
block|,
name|CVMX_IRQ_WDOG11
init|=
literal|83
block|,
name|CVMX_IRQ_WDOG12
init|=
literal|84
block|,
name|CVMX_IRQ_WDOG13
init|=
literal|85
block|,
name|CVMX_IRQ_WDOG14
init|=
literal|86
block|,
name|CVMX_IRQ_WDOG15
init|=
literal|87
comment|/* numbers 88 - 135 are reserved */
block|}
name|cvmx_irq_t
typedef|;
comment|/**  * Function prototype for the exception handler  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|cvmx_interrupt_exception_t
function_decl|)
parameter_list|(
name|uint64_t
name|registers
index|[
literal|32
index|]
parameter_list|)
function_decl|;
comment|/**  * Function prototype for interrupt handlers  */
typedef|typedef
name|void
function_decl|(
modifier|*
name|cvmx_interrupt_func_t
function_decl|)
parameter_list|(
name|int
name|irq_number
parameter_list|,
name|uint64_t
name|registers
index|[
literal|32
index|]
parameter_list|,
name|void
modifier|*
name|user_arg
parameter_list|)
function_decl|;
comment|/**  * Register an interrupt handler for the specified interrupt number.  *  * @param irq_number Interrupt number to register for (0-135)  * @param func       Function to call on interrupt.  * @param user_arg   User data to pass to the interrupt handler  */
name|void
name|cvmx_interrupt_register
parameter_list|(
name|cvmx_irq_t
name|irq_number
parameter_list|,
name|cvmx_interrupt_func_t
name|func
parameter_list|,
name|void
modifier|*
name|user_arg
parameter_list|)
function_decl|;
comment|/**  * Set the exception handler for all non interrupt sources.  *  * @param handler New exception handler  * @return Old exception handler  */
name|cvmx_interrupt_exception_t
name|cvmx_interrupt_set_exception
parameter_list|(
name|cvmx_interrupt_exception_t
name|handler
parameter_list|)
function_decl|;
comment|/**  * Masks a given interrupt number.  * EN0 sources are masked on IP2  * EN1 sources are masked on IP3  *  * @param irq_number interrupt number to mask (0-135)  */
specifier|static
specifier|inline
name|void
name|cvmx_interrupt_mask_irq
parameter_list|(
name|int
name|irq_number
parameter_list|)
block|{
if|if
condition|(
name|irq_number
operator|<
literal|8
condition|)
block|{
name|uint32_t
name|mask
decl_stmt|;
asm|asm
specifier|volatile
asm|("mfc0 %0,$12,0" : "=r" (mask));
name|mask
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
literal|8
operator|+
name|irq_number
operator|)
operator|)
expr_stmt|;
asm|asm
specifier|volatile
asm|("mtc0 %0,$12,0" : : "r" (mask));
block|}
elseif|else
if|if
condition|(
name|irq_number
operator|<
literal|8
operator|+
literal|64
condition|)
block|{
name|int
name|ciu_bit
init|=
operator|(
name|irq_number
operator|-
literal|8
operator|)
operator|&
literal|63
decl_stmt|;
name|int
name|ciu_offset
init|=
name|cvmx_get_core_num
argument_list|()
operator|*
literal|2
decl_stmt|;
name|uint64_t
name|mask
init|=
name|cvmx_read_csr
argument_list|(
name|CVMX_CIU_INTX_EN0
argument_list|(
name|ciu_offset
argument_list|)
argument_list|)
decl_stmt|;
name|mask
operator|&=
operator|~
operator|(
literal|1ull
operator|<<
name|ciu_bit
operator|)
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_CIU_INTX_EN0
argument_list|(
name|ciu_offset
argument_list|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ciu_bit
init|=
operator|(
name|irq_number
operator|-
literal|8
operator|)
operator|&
literal|63
decl_stmt|;
name|int
name|ciu_offset
init|=
name|cvmx_get_core_num
argument_list|()
operator|*
literal|2
operator|+
literal|1
decl_stmt|;
name|uint64_t
name|mask
init|=
name|cvmx_read_csr
argument_list|(
name|CVMX_CIU_INTX_EN1
argument_list|(
name|ciu_offset
argument_list|)
argument_list|)
decl_stmt|;
name|mask
operator|&=
operator|~
operator|(
literal|1ull
operator|<<
name|ciu_bit
operator|)
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_CIU_INTX_EN1
argument_list|(
name|ciu_offset
argument_list|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**  * Unmasks a given interrupt number  * EN0 sources are unmasked on IP2  * EN1 sources are unmasked on IP3  *  * @param irq_number interrupt number to unmask (0-135)  */
specifier|static
specifier|inline
name|void
name|cvmx_interrupt_unmask_irq
parameter_list|(
name|int
name|irq_number
parameter_list|)
block|{
if|if
condition|(
name|irq_number
operator|<
literal|8
condition|)
block|{
name|uint32_t
name|mask
decl_stmt|;
asm|asm
specifier|volatile
asm|("mfc0 %0,$12,0" : "=r" (mask));
name|mask
operator||=
operator|(
literal|1
operator|<<
operator|(
literal|8
operator|+
name|irq_number
operator|)
operator|)
expr_stmt|;
asm|asm
specifier|volatile
asm|("mtc0 %0,$12,0" : : "r" (mask));
block|}
elseif|else
if|if
condition|(
name|irq_number
operator|<
literal|8
operator|+
literal|64
condition|)
block|{
name|int
name|ciu_bit
init|=
operator|(
name|irq_number
operator|-
literal|8
operator|)
operator|&
literal|63
decl_stmt|;
name|int
name|ciu_offset
init|=
name|cvmx_get_core_num
argument_list|()
operator|*
literal|2
decl_stmt|;
name|uint64_t
name|mask
init|=
name|cvmx_read_csr
argument_list|(
name|CVMX_CIU_INTX_EN0
argument_list|(
name|ciu_offset
argument_list|)
argument_list|)
decl_stmt|;
name|mask
operator||=
operator|(
literal|1ull
operator|<<
name|ciu_bit
operator|)
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_CIU_INTX_EN0
argument_list|(
name|ciu_offset
argument_list|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|ciu_bit
init|=
operator|(
name|irq_number
operator|-
literal|8
operator|)
operator|&
literal|63
decl_stmt|;
name|int
name|ciu_offset
init|=
name|cvmx_get_core_num
argument_list|()
operator|*
literal|2
operator|+
literal|1
decl_stmt|;
name|uint64_t
name|mask
init|=
name|cvmx_read_csr
argument_list|(
name|CVMX_CIU_INTX_EN1
argument_list|(
name|ciu_offset
argument_list|)
argument_list|)
decl_stmt|;
name|mask
operator||=
operator|(
literal|1ull
operator|<<
name|ciu_bit
operator|)
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_CIU_INTX_EN1
argument_list|(
name|ciu_offset
argument_list|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Disable interrupts by clearing bit 0 of the COP0 status register, ** and return the previous contents of the status register. ** Note: this is only used to track interrupt status. */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_interrupt_disable_save
parameter_list|(
name|void
parameter_list|)
block|{
name|uint32_t
name|flags
decl_stmt|;
asm|asm
specifier|volatile
asm|(         "DI   %[flags]\n"         : [flags]"=r" (flags));
return|return
operator|(
name|flags
operator|)
return|;
block|}
comment|/* Restore the contents of the cop0 status register.  Used with ** cvmx_interrupt_disable_save to allow recursive interrupt disabling */
specifier|static
specifier|inline
name|void
name|cvmx_interrupt_restore
parameter_list|(
name|uint32_t
name|flags
parameter_list|)
block|{
comment|/* If flags value indicates interrupts should be enabled, then enable them */
if|if
condition|(
name|flags
operator|&
literal|1
condition|)
block|{
asm|asm
specifier|volatile
asm|(             "EI     \n"             ::);
block|}
block|}
comment|/**  * Utility function to decode Octeon's RSL_INT_BLOCKS interrupts  * into error messages.  */
specifier|extern
name|void
name|cvmx_interrupt_rsl_decode
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Utility function to enable all RSL error interupts  */
specifier|extern
name|void
name|cvmx_interrupt_rsl_enable
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Utility function to do interrupt safe printf   */
ifdef|#
directive|ifdef
name|CVMX_BUILD_FOR_LINUX_KERNEL
define|#
directive|define
name|cvmx_safe_printf
value|printk
elif|#
directive|elif
name|defined
argument_list|(
name|CVMX_BUILD_FOR_LINUX_USER
argument_list|)
define|#
directive|define
name|cvmx_safe_printf
value|printf
else|#
directive|else
specifier|extern
name|void
name|cvmx_safe_printf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|1
operator|,
function_decl|2
block|)
end_extern

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

