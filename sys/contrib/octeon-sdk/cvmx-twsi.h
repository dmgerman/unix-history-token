begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to the TWSI / I2C bus  *  * Note: Currently on 7 bit device addresses are supported  *  *<hr>$Revision: 49448 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_TWSI_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_TWSI_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Extra TWSI Bus Opcodes */
define|#
directive|define
name|TWSI_SLAVE_ADD
value|0
define|#
directive|define
name|TWSI_DATA
value|1
define|#
directive|define
name|TWSI_CTL
value|2
define|#
directive|define
name|TWSI_CLKCTL_STAT
value|3
comment|/* R=0 selects CLKCTL, R=1 selects STAT */
define|#
directive|define
name|TWSI_STAT
value|3
comment|/* when R = 1 */
define|#
directive|define
name|TWSI_SLAVE_ADD_EXT
value|4
define|#
directive|define
name|TWSI_RST
value|7
comment|/**  * Do a twsi read from a 7 bit device address using an (optional) internal address.  * Up to 8 bytes can be read at a time.  *  * @param twsi_id   which Octeon TWSI bus to use  * @param dev_addr  Device address (7 bit)  * @param internal_addr  *                  Internal address.  Can be 0, 1 or 2 bytes in width  * @param num_bytes Number of data bytes to read  * @param ia_width_bytes  *                  Internal address size in bytes (0, 1, or 2)  * @param data      Pointer argument where the read data is returned.  *  * @return read data returned in 'data' argument  *         Number of bytes read on success  *         -1 on failure  */
name|int
name|cvmx_twsix_read_ia
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint16_t
name|internal_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|,
name|int
name|ia_width_bytes
parameter_list|,
name|uint64_t
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/**  * A convenience wrapper function around cvmx_twsix_read_ia() that  * only supports 8 bit internal addresses.  * Reads up to 7 bytes, and returns both the value read or error  * value in the return value  *  * @param twsi_id   which Octeon TWSI bus to use  * @param dev_addr  Device address (7 bit only)  * @param internal_addr  *                  Internal address (8 bit only)  * @param num_bytes Number of bytes to read (0-7)  *  * @return Value read from TWSI on success  *         -1 on error  */
specifier|static
specifier|inline
name|int64_t
name|cvmx_twsix_read_ia8
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint8_t
name|internal_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|)
block|{
name|uint64_t
name|data
decl_stmt|;
if|if
condition|(
name|num_bytes
operator|<
literal|1
operator|||
name|num_bytes
operator|>
literal|7
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|cvmx_twsix_read_ia
argument_list|(
name|twsi_id
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|,
name|num_bytes
argument_list|,
literal|1
argument_list|,
operator|&
name|data
argument_list|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|data
return|;
block|}
comment|/**  * A convenience wrapper function around cvmx_twsix_read_ia() that  * only supports 16 bit internal addresses.  * Reads up to 7 bytes, and returns both the value read or error  * value in the return value  *  * @param twsi_id   which Octeon TWSI bus to use  * @param dev_addr  Device address (7 bit only)  * @param internal_addr  *                  Internal address (16 bit only)  * @param num_bytes Number of bytes to read (0-7)  *  * @return Value read from TWSI on success  *         -1 on error  */
specifier|static
specifier|inline
name|int64_t
name|cvmx_twsix_read_ia16
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint16_t
name|internal_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|)
block|{
name|uint64_t
name|data
decl_stmt|;
if|if
condition|(
name|num_bytes
operator|<
literal|1
operator|||
name|num_bytes
operator|>
literal|7
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|cvmx_twsix_read_ia
argument_list|(
name|twsi_id
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|,
name|num_bytes
argument_list|,
literal|2
argument_list|,
operator|&
name|data
argument_list|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|data
return|;
block|}
comment|/**  * Read from a TWSI device (7 bit device address only) without generating any  * internal addresses.  * Read from 1-8 bytes and returns them in the data pointer.  *  * @param twsi_id   TWSI interface on Octeon to use  * @param dev_addr  TWSI device address (7 bit only)  * @param num_bytes number of bytes to read  * @param data      Pointer to data read from TWSI device  *  * @return Number of bytes read on success  *         -1 on error  */
name|int
name|cvmx_twsix_read
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|,
name|uint64_t
modifier|*
name|data
parameter_list|)
function_decl|;
comment|/**  * Perform a twsi write operation to a 7 bit device address.  *  * Note that many eeprom devices have page restrictions regarding address boundaries  * that can be crossed in one write operation.  This is device dependent, and this routine  * does nothing in this regard.  * This command does not generate any internal addressess.  *  * @param twsi_id   Octeon TWSI interface to use  * @param dev_addr  TWSI device address  * @param num_bytes Number of bytes to write (between 1 and 8 inclusive)  * @param data      Data to write  *  * @return 0 on success  *         -1 on failure  */
name|int
name|cvmx_twsix_write
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|,
name|uint64_t
name|data
parameter_list|)
function_decl|;
comment|/**  * Write 1-8 bytes to a TWSI device using an internal address.  *  * @param twsi_id   which TWSI interface on Octeon to use  * @param dev_addr  TWSI device address (7 bit only)  * @param internal_addr  *                  TWSI internal address (0, 8, or 16 bits)  * @param num_bytes Number of bytes to write (1-8)  * @param ia_width_bytes  *                  internal address width, in bytes (0, 1, 2)  * @param data      Data to write.  Data is written MSB first on the twsi bus, and only the lower  *                  num_bytes bytes of the argument are valid.  (If a 2 byte write is done, only  *                  the low 2 bytes of the argument is used.  *  * @return Number of bytes read on success,  *         -1 on error  */
name|int
name|cvmx_twsix_write_ia
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint16_t
name|internal_addr
parameter_list|,
name|int
name|num_bytes
parameter_list|,
name|int
name|ia_width_bytes
parameter_list|,
name|uint64_t
name|data
parameter_list|)
function_decl|;
comment|/*********************************************************************** ** Functions below are deprecated, and not recomended for use. ** They have been superceded by more flexible functions that are ** now provided. ************************************************************************/
comment|/**  * Read 8-bit from a device on the TWSI / I2C bus  *  * @param twsi_id  Which TWSI bus to use. CN3XXX, CN58XX, and CN50XX only  *                 support 0. CN56XX and CN57XX support 0-1.  * @param dev_addr I2C device address (7 bit)  * @param internal_addr  *                 Internal device address  *  * @return 8-bit data or< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsix_read8
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint8_t
name|internal_addr
parameter_list|)
block|{
return|return
name|cvmx_twsix_read_ia8
argument_list|(
name|twsi_id
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**  * Read 8-bit from a device on the TWSI / I2C bus  *  * Uses current internal address  *  * @param twsi_id  Which TWSI bus to use. CN3XXX, CN58XX, and CN50XX only  *                 support 0. CN56XX and CN57XX support 0-1.  * @param dev_addr I2C device address (7 bit)  *  * @return 8-bit value or< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsix_read8_cur_addr
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|)
block|{
name|uint64_t
name|data
decl_stmt|;
if|if
condition|(
name|cvmx_twsix_read
argument_list|(
name|twsi_id
argument_list|,
name|dev_addr
argument_list|,
literal|1
argument_list|,
operator|&
name|data
argument_list|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
operator|(
name|data
operator|&
literal|0xff
operator|)
return|;
block|}
comment|/**  * Write 8-bit to a device on the TWSI / I2C bus  *  * @param twsi_id  Which TWSI bus to use. CN3XXX, CN58XX, and CN50XX only  *                 support 0. CN56XX and CN57XX support 0-1.  * @param dev_addr I2C device address (7 bit)  * @param internal_addr  *                 Internal device address  * @param data     Data to be written  *  * @return 0 on success and< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsix_write8
parameter_list|(
name|int
name|twsi_id
parameter_list|,
name|uint8_t
name|dev_addr
parameter_list|,
name|uint8_t
name|internal_addr
parameter_list|,
name|uint8_t
name|data
parameter_list|)
block|{
if|if
condition|(
name|cvmx_twsix_write_ia
argument_list|(
name|twsi_id
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|data
argument_list|)
operator|<
literal|0
condition|)
return|return
operator|-
literal|1
return|;
return|return
literal|0
return|;
block|}
comment|/**  * Read 8-bit from a device on the TWSI / I2C bus zero.  *  * This function is for compatibility with SDK 1.6.0 and  * before which only supported a single TWSI bus.  *  * @param dev_addr I2C device address (7 bit)  * @param internal_addr  *                 Internal device address  *  * @return 8-bit data or< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsi_read8
parameter_list|(
name|uint8_t
name|dev_addr
parameter_list|,
name|uint8_t
name|internal_addr
parameter_list|)
block|{
return|return
name|cvmx_twsix_read8
argument_list|(
literal|0
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|)
return|;
block|}
comment|/**  * Read 8-bit from a device on the TWSI / I2C bus zero.  *  * Uses current internal address  *  * This function is for compatibility with SDK 1.6.0 and  * before which only supported a single TWSI bus.  *  * @param dev_addr I2C device address (7 bit)  *  * @return 8-bit value or< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsi_read8_cur_addr
parameter_list|(
name|uint8_t
name|dev_addr
parameter_list|)
block|{
return|return
name|cvmx_twsix_read8_cur_addr
argument_list|(
literal|0
argument_list|,
name|dev_addr
argument_list|)
return|;
block|}
comment|/**  * Write 8-bit to a device on the TWSI / I2C bus zero.  * This function is for compatibility with SDK 1.6.0 and  * before which only supported a single TWSI bus.  *  * @param dev_addr I2C device address (7 bit)  * @param internal_addr  *                 Internal device address  * @param data     Data to be written  *  * @return 0 on success and< 0 in case of error  */
specifier|static
specifier|inline
name|int
name|cvmx_twsi_write8
parameter_list|(
name|uint8_t
name|dev_addr
parameter_list|,
name|uint8_t
name|internal_addr
parameter_list|,
name|uint8_t
name|data
parameter_list|)
block|{
return|return
name|cvmx_twsix_write8
argument_list|(
literal|0
argument_list|,
name|dev_addr
argument_list|,
name|internal_addr
argument_list|,
name|data
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __CVMX_TWSI_H__ */
end_comment

end_unit

