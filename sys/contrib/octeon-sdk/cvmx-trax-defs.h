begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-trax-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon trax.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_TRAX_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_TRAX_DEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_BIST_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_BIST_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000010ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_BIST_STATUS
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000010ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_CTL
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_CTL(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_CTL
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000000ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_CYCLES_SINCE
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_CYCLES_SINCE(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000018ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_CYCLES_SINCE
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000018ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_CYCLES_SINCE1
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_CYCLES_SINCE1(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000028ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_CYCLES_SINCE1
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000028ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_FILT_ADR_ADR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_FILT_ADR_ADR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000058ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_FILT_ADR_ADR
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000058ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_FILT_ADR_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_FILT_ADR_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000060ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_FILT_ADR_MSK
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000060ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_FILT_CMD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_FILT_CMD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000040ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_FILT_CMD
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000040ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_FILT_DID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_FILT_DID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000050ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_FILT_DID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000050ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_FILT_SID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_FILT_SID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000048ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_FILT_SID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000048ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_INT_STATUS
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_INT_STATUS(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000008ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_INT_STATUS
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000008ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_READ_DAT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_READ_DAT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000020ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_READ_DAT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000020ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_READ_DAT_HI
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_READ_DAT_HI(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000030ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_READ_DAT_HI
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000030ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG0_ADR_ADR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG0_ADR_ADR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000098ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG0_ADR_ADR
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000098ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG0_ADR_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG0_ADR_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000A0ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG0_ADR_MSK
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000A0ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG0_CMD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG0_CMD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000080ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG0_CMD
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000080ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG0_DID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG0_DID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000090ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG0_DID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000090ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG0_SID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG0_SID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A8000088ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG0_SID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A8000088ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG1_ADR_ADR
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG1_ADR_ADR(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000D8ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG1_ADR_ADR
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000D8ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG1_ADR_MSK
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG1_ADR_MSK(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000E0ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG1_ADR_MSK
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000E0ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG1_CMD
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG1_CMD(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000C0ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG1_CMD
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000C0ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG1_DID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG1_DID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000D0ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG1_DID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000D0ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_TRAX_TRIG1_SID
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|==
literal|0
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_TRAX_TRIG1_SID(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800A80000C8ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|3
operator|)
operator|*
literal|0x100000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_TRAX_TRIG1_SID
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00011800A80000C8ull) + ((block_id)& 3) * 0x100000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_tra#_bist_status  *  * TRA_BIST_STATUS = Trace Buffer BiST Status  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_bist_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_bist_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|tcf
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TCF memory                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
name|uint64_t
name|tdf1
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TDF memory 1                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
name|uint64_t
name|reserved_0_0
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tdf1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tcf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_bist_status_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|tcf
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TCF memory                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
name|uint64_t
name|tdf1
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TDF memory 1                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
name|uint64_t
name|tdf0
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TCF memory 0                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
else|#
directive|else
name|uint64_t
name|tdf0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tdf1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tcf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn31xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_bist_status_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|tdf
range|:
literal|1
decl_stmt|;
comment|/**< Bist Results for TCF memory                                                          - 0: GOOD (or bist in progress/never run)                                                          - 1: BAD */
else|#
directive|else
name|uint64_t
name|tdf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_bist_status_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_bist_status
name|cvmx_trax_bist_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_ctl  *  * TRA_CTL = Trace Buffer Control  *  * Description:  *  * Notes:  * It is illegal to change the values of WRAP, TRIG_CTL, IGNORE_O while tracing (i.e. when ENA=1).  * Note that the following fields are present only in chip revisions beginning with pass2: IGNORE_O  */
end_comment

begin_union
union|union
name|cvmx_trax_ctl
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_ctl_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|rdat_md
range|:
literal|1
decl_stmt|;
comment|/**< TRA_READ_DAT mode bit                                                          If set, the TRA_READ_DAT reads will return the lower                                                          64 bits of the TRA entry and the upper bits must be                                                          read through TRA_READ_DAT_HI.  If not set the return                                                          value from TRA_READ_DAT accesses will switch between                                                          the lower bits and the upper bits of the TRA entry. */
name|uint64_t
name|clkalways
range|:
literal|1
decl_stmt|;
comment|/**< Conditional clock enable                                                          If set, the TRA clock is never disabled. */
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
comment|/**< Ignore overflow during wrap mode                                                          If set and wrapping mode is enabled, then tracing                                                          will not stop at the overflow condition.  Each                                                          write during an overflow will overwrite the                                                          oldest, unread entry and the read pointer is                                                          incremented by one entry.  This bit has no effect                                                          if WRAP=0. */
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
comment|/**< MCD0 enable                                                          If set and any PP sends the MCD0 signal, the                                                          tracing is disabled. */
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_threshold                                                          At a fill threshold event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA_INT_STATUS.MCD0_THR == 1). */
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_trigger                                                          At an end trigger event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA_INT_STATUS.MCD0_TRG == 1). */
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
comment|/**< CIU_threshold                                                          When set during a fill threshold event,                                                          TRA_INT_STATUS[CIU_THR] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
comment|/**< CIU_trigger                                                          When set during an end trigger event,                                                          TRA_INT_STATUS[CIU_TRG] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
comment|/**< Full Threshhold                                                          0=none                                                          1=1/2 full                                                          2=3/4 full                                                          3=4/4 full */
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
comment|/**< Timestamp granularity                                                          granularity=8^n cycles, n=0,1,2,3,4,5,6,7 */
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
comment|/**< Trigger Control                                                          Note: trigger events are written to the trace                                                          0=no triggers                                                          1=trigger0=start trigger, trigger1=stop trigger                                                          2=(trigger0 || trigger1)=start trigger                                                          3=(trigger0 || trigger1)=stop trigger */
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
comment|/**< Wrap mode                                                          When WRAP=0, the trace buffer will disable itself                                                          after having logged 1024 entries.  When WRAP=1,                                                          the trace buffer will never disable itself.                                                          In this case, tracing may or may not be                                                          temporarily suspended during the overflow                                                          condition (see IGNORE_O above).                                                          0=do not wrap                                                          1=wrap */
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< Enable Trace                                                          Master enable.  Tracing only happens when ENA=1.                                                          When ENA changes from 0 to 1, the read and write                                                          pointers are reset to 0x00 to begin a new trace.                                                          The MCD0 event may set ENA=0 (see MCD0_ENA                                                          above).  When using triggers, tracing occurs only                                                          between start and stop triggers (including the                                                          triggers themselves).                                                          0=disable                                                          1=enable */
else|#
directive|else
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clkalways
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rdat_md
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_ctl_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
comment|/**< Ignore overflow during wrap mode                                                          If set and wrapping mode is enabled, then tracing                                                          will not stop at the overflow condition.  Each                                                          write during an overflow will overwrite the                                                          oldest, unread entry and the read pointer is                                                          incremented by one entry.  This bit has no effect                                                          if WRAP=0. */
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
comment|/**< MCD0 enable                                                          If set and any PP sends the MCD0 signal, the                                                          tracing is disabled. */
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_threshold                                                          At a fill threshold event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA(0..0)_INT_STATUS.MCD0_THR == 1). */
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_trigger                                                          At an end trigger event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA(0..0)_INT_STATUS.MCD0_TRG == 1). */
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
comment|/**< CIU_threshold                                                          When set during a fill threshold event,                                                          TRA(0..0)_INT_STATUS[CIU_THR] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
comment|/**< CIU_trigger                                                          When set during an end trigger event,                                                          TRA(0..0)_INT_STATUS[CIU_TRG] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
comment|/**< Full Threshhold                                                          0=none                                                          1=1/2 full                                                          2=3/4 full                                                          3=4/4 full */
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
comment|/**< Timestamp granularity                                                          granularity=8^n cycles, n=0,1,2,3,4,5,6,7 */
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
comment|/**< Trigger Control                                                          Note: trigger events are written to the trace                                                          0=no triggers                                                          1=trigger0=start trigger, trigger1=stop trigger                                                          2=(trigger0 || trigger1)=start trigger                                                          3=(trigger0 || trigger1)=stop trigger */
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
comment|/**< Wrap mode                                                          When WRAP=0, the trace buffer will disable itself                                                          after having logged 256 entries.  When WRAP=1,                                                          the trace buffer will never disable itself.                                                          In this case, tracing may or may not be                                                          temporarily suspended during the overflow                                                          condition (see IGNORE_O above).                                                          0=do not wrap                                                          1=wrap */
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< Enable Trace                                                          Master enable.  Tracing only happens when ENA=1.                                                          When ENA changes from 0 to 1, the read and write                                                          pointers are reset to 0x00 to begin a new trace.                                                          The MCD0 event may set ENA=0 (see MCD0_ENA                                                          above).  When using triggers, tracing occurs only                                                          between start and stop triggers (including the                                                          triggers themselves).                                                          0=disable                                                          1=enable */
else|#
directive|else
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_ctl_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_s
name|cn63xx
decl_stmt|;
struct|struct
name|cvmx_trax_ctl_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|clkalways
range|:
literal|1
decl_stmt|;
comment|/**< Conditional clock enable                                                          If set, the TRA clock is never disabled. */
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
comment|/**< Ignore overflow during wrap mode                                                          If set and wrapping mode is enabled, then tracing                                                          will not stop at the overflow condition.  Each                                                          write during an overflow will overwrite the                                                          oldest, unread entry and the read pointer is                                                          incremented by one entry.  This bit has no effect                                                          if WRAP=0. */
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
comment|/**< MCD0 enable                                                          If set and any PP sends the MCD0 signal, the                                                          tracing is disabled. */
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_threshold                                                          At a fill threshold event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA_INT_STATUS.MCD0_THR == 1). */
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
comment|/**< MCD0_trigger                                                          At an end trigger event, sends an MCD0                                                          wire pulse that can cause cores to enter debug                                                          mode, if enabled.  This MCD0 wire pulse will not                                                          occur while (TRA_INT_STATUS.MCD0_TRG == 1). */
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
comment|/**< CIU_threshold                                                          When set during a fill threshold event,                                                          TRA_INT_STATUS[CIU_THR] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
comment|/**< CIU_trigger                                                          When set during an end trigger event,                                                          TRA_INT_STATUS[CIU_TRG] is set, which can cause                                                          core interrupts, if enabled. */
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
comment|/**< Full Threshhold                                                          0=none                                                          1=1/2 full                                                          2=3/4 full                                                          3=4/4 full */
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
comment|/**< Timestamp granularity                                                          granularity=8^n cycles, n=0,1,2,3,4,5,6,7 */
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
comment|/**< Trigger Control                                                          Note: trigger events are written to the trace                                                          0=no triggers                                                          1=trigger0=start trigger, trigger1=stop trigger                                                          2=(trigger0 || trigger1)=start trigger                                                          3=(trigger0 || trigger1)=stop trigger */
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
comment|/**< Wrap mode                                                          When WRAP=0, the trace buffer will disable itself                                                          after having logged 1024 entries.  When WRAP=1,                                                          the trace buffer will never disable itself.                                                          In this case, tracing may or may not be                                                          temporarily suspended during the overflow                                                          condition (see IGNORE_O above).                                                          0=do not wrap                                                          1=wrap */
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< Enable Trace                                                          Master enable.  Tracing only happens when ENA=1.                                                          When ENA changes from 0 to 1, the read and write                                                          pointers are reset to 0x00 to begin a new trace.                                                          The MCD0 event may set ENA=0 (see MCD0_ENA                                                          above).  When using triggers, tracing occurs only                                                          between start and stop triggers (including the                                                          triggers themselves).                                                          0=disable                                                          1=enable */
else|#
directive|else
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wrap
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trig_ctl
range|:
literal|2
decl_stmt|;
name|uint64_t
name|time_grn
range|:
literal|3
decl_stmt|;
name|uint64_t
name|full_thr
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ignore_o
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clkalways
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
name|struct
name|cvmx_trax_ctl_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_ctl_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_ctl_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_ctl
name|cvmx_trax_ctl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_cycles_since  *  * TRA_CYCLES_SINCE = Trace Buffer Cycles Since Last Write, Read/Write pointers  *  * Description:  *  * Notes:  * This CSR is obsolete.  Use TRA_CYCLES_SINCE1 instead.  *  */
end_comment

begin_union
union|union
name|cvmx_trax_cycles_since
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_cycles_since_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|cycles
range|:
literal|48
decl_stmt|;
comment|/**< Cycles since the last entry was written */
name|uint64_t
name|rptr
range|:
literal|8
decl_stmt|;
comment|/**< Read pointer */
name|uint64_t
name|wptr
range|:
literal|8
decl_stmt|;
comment|/**< Write pointer */
else|#
directive|else
name|uint64_t
name|wptr
range|:
literal|8
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|8
decl_stmt|;
name|uint64_t
name|cycles
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_cycles_since
name|cvmx_trax_cycles_since_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_cycles_since1  *  * TRA_CYCLES_SINCE1 = Trace Buffer Cycles Since Last Write, Read/Write pointers  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_cycles_since1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_cycles_since1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|cycles
range|:
literal|40
decl_stmt|;
comment|/**< Cycles since the last entry was written */
name|uint64_t
name|reserved_22_23
range|:
literal|2
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|10
decl_stmt|;
comment|/**< Read pointer */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|wptr
range|:
literal|10
decl_stmt|;
comment|/**< Write pointer */
else|#
directive|else
name|uint64_t
name|wptr
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|rptr
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_22_23
range|:
literal|2
decl_stmt|;
name|uint64_t
name|cycles
range|:
literal|40
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_cycles_since1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_cycles_since1
name|cvmx_trax_cycles_since1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_filt_adr_adr  *  * TRA_FILT_ADR_ADR = Trace Buffer Filter Address Address  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_filt_adr_adr
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_filt_adr_adr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA_FILT_ADR_ADR and                                                          TRA_FILT_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_filt_adr_adr_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA(0..0)_FILT_ADR_ADR and                                                          TRA(0..0)_FILT_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_adr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_filt_adr_adr
name|cvmx_trax_filt_adr_adr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_filt_adr_msk  *  * TRA_FILT_ADR_MSK = Trace Buffer Filter Address Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_filt_adr_msk
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_filt_adr_msk_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA_FILT_ADR_ADR and                                                          TRA_FILT_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA_FILT_CMD[IOBDMA]                                                          is set, TRA_FILT_ADR_MSK must be zero to                                                          guarantee that any IOBDMAs enter the trace. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_filt_adr_msk_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA(0..0)_FILT_ADR_ADR and                                                          TRA(0..0)_FILT_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA(0..0)_FILT_CMD[IOBDMA]                                                          is set, TRA(0..0)_FILT_ADR_MSK must be zero to                                                          guarantee that any IOBDMAs enter the trace. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_adr_msk_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_filt_adr_msk
name|cvmx_trax_filt_adr_msk_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_filt_cmd  *  * TRA_FILT_CMD = Trace Buffer Filter Command Mask  *  * Description:  *  * Notes:  * Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then  * the address compare must be disabled (i.e. TRA_FILT_ADR_MSK set to zero) to guarantee that IOBDMAs  * enter the trace.  */
end_comment

begin_union
union|union
name|cvmx_trax_filt_cmd
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_filt_cmd_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_filt_cmd_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_filt_cmd_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn31xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_trax_filt_cmd_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_trax_filt_cmd_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn52xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn52xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_filt_cmd_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable RPL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
comment|/**< Enable NOP     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_cmd_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_filt_cmd
name|cvmx_trax_filt_cmd_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_filt_did  *  * TRA_FILT_DID = Trace Buffer Filter DestinationId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_filt_did
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_filt_did_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_filt_did_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to PCI and RSL-type                                                          CSR's (RSL CSR's, PCI bus operations, PCI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of CIU and GPIO CSR's */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn31xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_filt_did_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of FAU accesses */
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of DPI accesses                                                          (DPI NCB CSRs) */
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of RAD accesses                                                          (doorbells) */
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of USB0 accesses                                                          (UAHC0 EHCI and OHCI NCB CSRs) */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destination */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of PKO accesses                                                          (doorbells) */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of IPD CSR accesses                                                          (IPD CSRs) */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests to SLI and RSL-type                                                          CSR's (RSL CSR's, PCI/sRIO bus operations, SLI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_did_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_filt_did
name|cvmx_trax_filt_did_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_filt_sid  *  * TRA_FILT_SID = Trace Buffer Filter SourceId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_filt_sid
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_filt_sid_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of write requests from PIP/IPD */
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
comment|/**< Enable tracing from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_s
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_filt_sid_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of write requests from PIP/IPD */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
comment|/**< Enable tracing from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_trax_filt_sid_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of write requests from PIP/IPD */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
comment|/**< Enable tracing from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
struct|struct
name|cvmx_trax_filt_sid_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of write requests from PIP/IPD */
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
comment|/**< Enable tracing from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=5 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
struct|struct
name|cvmx_trax_filt_sid_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable tracing of write requests from PIP/IPD */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
comment|/**< Enable tracing from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_trax_filt_sid_cn63xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_cn63xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_filt_sid_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_filt_sid
name|cvmx_trax_filt_sid_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_int_status  *  * TRA_INT_STATUS = Trace Buffer Interrupt Status  *  * Description:  *  * Notes:  * During a CSR write to this register, the write data is used as a mask to clear the selected status  * bits (status'[3:0] = status[3:0]& ~write_data[3:0]).  */
end_comment

begin_union
union|union
name|cvmx_trax_int_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_int_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
comment|/**< MCD0 full threshold interrupt status                                                          0=trace buffer did not generate MCD0 wire pulse                                                          1=trace buffer did     generate MCD0 wire pulse                                                            and prevents additional MCD0_THR MCD0 wire pulses */
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
comment|/**< MCD0 end trigger interrupt status                                                          0=trace buffer did not generate interrupt                                                          1=trace buffer did     generate interrupt                                                            and prevents additional MCD0_TRG MCD0 wire pulses */
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
comment|/**< CIU full threshold interrupt status                                                          0=trace buffer did not generate interrupt                                                          1=trace buffer did     generate interrupt */
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
comment|/**< CIU end trigger interrupt status                                                          0=trace buffer did not generate interrupt                                                          1=trace buffer did     generate interrupt */
else|#
directive|else
name|uint64_t
name|ciu_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ciu_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_trg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mcd0_thr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_int_status_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_int_status_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_int_status
name|cvmx_trax_int_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_read_dat  *  * TRA_READ_DAT = Trace Buffer Read Data  *  * Description:  *  * Notes:  * This CSR is a memory of 1024 entries.  When the trace was enabled, the read pointer was set to entry  * 0 by hardware.  Each read to this address increments the read pointer.  */
end_comment

begin_union
union|union
name|cvmx_trax_read_dat
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_read_dat_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
comment|/**< Trace buffer data for current entry                                                          if TRA_CTL[16]== 1; returns lower 64 bits of entry                                                          else two access are necessary to get all of 69bits                                                          first access of a pair is the lower 64 bits and                                                          second access is the upper 5 bits. */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_read_dat_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_read_dat
name|cvmx_trax_read_dat_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_read_dat_hi  *  * TRA_READ_DAT_HI = Trace Buffer Read Data- upper 5 bits do not use if TRA_CTL[16]==0  *  * Description:  *  * Notes:  * This CSR is a memory of 1024 entries. Reads to this address do not increment the read pointer.  The  * 5 bits read are the upper 5 bits of the TRA entry last read by the TRA_READ_DAT reg.  */
end_comment

begin_union
union|union
name|cvmx_trax_read_dat_hi
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_read_dat_hi_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
name|uint64_t
name|data
range|:
literal|5
decl_stmt|;
comment|/**< Trace buffer data[68:64] for current entry */
else|#
directive|else
name|uint64_t
name|data
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_read_dat_hi_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_read_dat_hi
name|cvmx_trax_read_dat_hi_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig0_adr_adr  *  * TRA_TRIG0_ADR_ADR = Trace Buffer Filter Address Address  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig0_adr_adr
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_adr_adr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA_TRIG0_ADR_ADR and                                                          TRA_TRIG0_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA(0..0)_TRIG0_ADR_ADR and                                                          TRA(0..0)_TRIG0_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_adr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig0_adr_adr
name|cvmx_trax_trig0_adr_adr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig0_adr_msk  *  * TRA_TRIG0_ADR_MSK = Trace Buffer Filter Address Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig0_adr_msk
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_adr_msk_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA_TRIG0_ADR_ADR and                                                          TRA_TRIG0_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA_TRIG0_CMD[IOBDMA]                                                          is set, TRA_FILT_TRIG0_MSK must be zero to                                                          guarantee that any IOBDMAs are recognized as                                                          triggers. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA(0..0)_TRIG0_ADR_ADR and                                                          TRA(0..0)_TRIG0_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA(0..0)_TRIG0_CMD[IOBDMA]                                                          is set, TRA(0..0)_FILT_TRIG0_MSK must be zero to                                                          guarantee that any IOBDMAs are recognized as                                                          triggers. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_adr_msk_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig0_adr_msk
name|cvmx_trax_trig0_adr_msk_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig0_cmd  *  * TRA_TRIG0_CMD = Trace Buffer Filter Command Mask  *  * Description:  *  * Notes:  * Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then  * the address compare must be disabled (i.e. TRA_TRIG0_ADR_MSK set to zero) to guarantee that IOBDMAs  * are recognized as triggers.  */
end_comment

begin_union
union|union
name|cvmx_trax_trig0_cmd
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_cmd_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig0_cmd_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig0_cmd_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn31xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_cmd_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_trax_trig0_cmd_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn52xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn52xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_cmd_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable RPL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
comment|/**< Enable NOP     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_cmd_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig0_cmd
name|cvmx_trax_trig0_cmd_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig0_did  *  * TRA_TRIG0_DID = Trace Buffer Filter DestinationId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig0_did
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_did_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig0_did_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to PCI and RSL-type                                                          CSR's (RSL CSR's, PCI bus operations, PCI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on CIU and GPIO CSR's */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn31xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_did_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on FAU accesses */
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on DPI accesses                                                          (DPI NCB CSRs) */
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on RAD accesses                                                          (doorbells) */
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on USB0 accesses                                                          (UAHC0 EHCI and OHCI NCB CSRs) */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destination */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on PKO accesses                                                          (doorbells) */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on IPD CSR accesses                                                          (IPD CSRs) */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to SLI and RSL-type                                                          CSR's (RSL CSR's, PCI/sRIO bus operations, SLI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_did_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig0_did
name|cvmx_trax_trig0_did_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig0_sid  *  * TRA_TRIG0_SID = Trace Buffer Filter SourceId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig0_sid
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_sid_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
comment|/**< Enable triggering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_s
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig0_sid_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
comment|/**< Enable triggering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_trax_trig0_sid_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
comment|/**< Enable triggering from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
struct|struct
name|cvmx_trax_trig0_sid_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
comment|/**< Enable triggering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=5 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
struct|struct
name|cvmx_trax_trig0_sid_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
comment|/**< Enable triggering from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_trax_trig0_sid_cn63xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_cn63xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig0_sid_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig0_sid
name|cvmx_trax_trig0_sid_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig1_adr_adr  *  * TRA_TRIG1_ADR_ADR = Trace Buffer Filter Address Address  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig1_adr_adr
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_adr_adr_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA_TRIG1_ADR_ADR and                                                          TRA_TRIG1_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Unmasked Address                                                          The combination of TRA(0..0)_TRIG1_ADR_ADR and                                                          TRA(0..0)_TRIG1_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_adr_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig1_adr_adr
name|cvmx_trax_trig1_adr_adr_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig1_adr_msk  *  * TRA_TRIG1_ADR_MSK = Trace Buffer Filter Address Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig1_adr_msk
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_adr_msk_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA_TRIG1_ADR_ADR and                                                          TRA_TRIG1_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA_TRIG1_CMD[IOBDMA]                                                          is set, TRA_FILT_TRIG1_MSK must be zero to                                                          guarantee that any IOBDMAs are recognized as                                                          triggers. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|38
decl_stmt|;
name|uint64_t
name|reserved_38_63
range|:
literal|26
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
comment|/**< Address Mask                                                          The combination of TRA(0..0)_TRIG1_ADR_ADR and                                                          TRA(0..0)_TRIG1_ADR_MSK is a masked address to                                                          enable tracing of only those commands whose                                                          masked address matches.  When a mask bit is not                                                          set, the corresponding address bits are assumed                                                          to match.  Also, note that IOBDMAs do not have                                                          proper addresses, so when TRA(0..0)_TRIG1_CMD[IOBDMA]                                                          is set, TRA(0..0)_FILT_TRIG1_MSK must be zero to                                                          guarantee that any IOBDMAs are recognized as                                                          triggers. */
else|#
directive|else
name|uint64_t
name|adr
range|:
literal|36
decl_stmt|;
name|uint64_t
name|reserved_36_63
range|:
literal|28
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_adr_msk_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig1_adr_msk
name|cvmx_trax_trig1_adr_msk_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig1_cmd  *  * TRA_TRIG1_CMD = Trace Buffer Filter Command Mask  *  * Description:  *  * Notes:  * Note that the trace buffer does not do proper IOBDMA address compares.  Thus, if IOBDMA is set, then  * the address compare must be disabled (i.e. TRA_TRIG1_ADR_MSK set to zero) to guarantee that IOBDMAs  * are recognized as triggers.  */
end_comment

begin_union
union|union
name|cvmx_trax_trig1_cmd
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_cmd_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_13
range|:
literal|14
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_19
range|:
literal|4
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_35
range|:
literal|4
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig1_cmd_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig1_cmd_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn31xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_cmd_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_trax_trig1_cmd_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn52xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn52xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_cmd_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAA32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable DECR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR64  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR32  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR16  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable INCR8   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
comment|/**< Enable CLR8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET16   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
comment|/**< Enable SET8    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBST8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD64 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD32 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD16 tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBLD8  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable LCKL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable INVL2   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable STGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable LTGL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
comment|/**< Enable WBIL2I  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS64   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
comment|/**< Enable FAS32   tracing                                                          0=disable, 1=enable */
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STTIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
comment|/**< Enable STFIL1  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
comment|/**< Enable STC     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
comment|/**< Enable STP     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
comment|/**< Enable STT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
comment|/**< Enable STF     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
comment|/**< Enable IOBDMA  tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
comment|/**< Enable PSL1    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDD     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable DWB     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable RPL2    tracing                                                          0=disable, 1=enable */
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
comment|/**< Enable PL2     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDI     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
comment|/**< Enable LDT     tracing                                                          0=disable, 1=enable */
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
comment|/**< Enable NOP     tracing                                                          0=disable, 1=enable */
else|#
directive|else
name|uint64_t
name|nop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ldi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rpl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ldd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|psl1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_10_14
range|:
literal|5
decl_stmt|;
name|uint64_t
name|iobdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stf
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stfil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sttil1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fas64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ltgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|stgl2i
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|invl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbil2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wbl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lckl2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobld64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobst64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|set64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|incr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr16
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|decr64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_56_57
range|:
literal|2
decl_stmt|;
name|uint64_t
name|faa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|faa64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_60_61
range|:
literal|2
decl_stmt|;
name|uint64_t
name|saa32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|saa64
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_cmd_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig1_cmd
name|cvmx_trax_trig1_cmd_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig1_did  *  * TRA_TRIG1_DID = Trace Buffer Filter DestinationId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig1_did
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_did_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_11
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_trax_trig1_did_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to PCI and RSL-type                                                          CSR's (RSL CSR's, PCI bus operations, PCI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on CIU and GPIO CSR's */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|19
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn31xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_did_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on FAU accesses */
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on DPI accesses                                                          (DPI NCB CSRs) */
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on RAD accesses                                                          (doorbells) */
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on USB0 accesses                                                          (UAHC0 EHCI and OHCI NCB CSRs) */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to POW                                                          (get work, add work, status/memory/index                                                          loads, NULLRd loads, CSR's) */
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
comment|/**< Illegal destination */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on PKO accesses                                                          (doorbells) */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on IPD CSR accesses                                                          (IPD CSRs) */
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to RNG                                                          (loads/IOBDMA's are legal) */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to ZIP                                                          (doorbell stores are legal) */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to DFA                                                          (CSR's and operations are legal) */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to FPA                                                          (alloc's (loads/IOBDMA's), frees (stores) are legal) */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to KEY memory                                                          (loads/IOBDMA's/stores are legal) */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests to SLI and RSL-type                                                          CSR's (RSL CSR's, PCI/sRIO bus operations, SLI                                                          CSR's) */
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
comment|/**< Illegal destinations */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on MIO accesses                                                          (CIU and GPIO CSR's, boot bus accesses) */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal
range|:
literal|12
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal4
range|:
literal|2
decl_stmt|;
name|uint64_t
name|fau
range|:
literal|1
decl_stmt|;
name|uint64_t
name|illegal5
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_did_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig1_did
name|cvmx_trax_trig1_did_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_tra#_trig1_sid  *  * TRA_TRIG1_SID = Trace Buffer Filter SourceId Mask  *  * Description:  */
end_comment

begin_union
union|union
name|cvmx_trax_trig1_sid
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_sid_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
comment|/**< Enable trigering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|16
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_s
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_trax_trig1_sid_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
comment|/**< Enable trigering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=3 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_trax_trig1_sid_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
comment|/**< Enable trigering from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
struct|struct
name|cvmx_trax_trig1_sid_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
comment|/**< Enable trigering from PP[N] with matching SourceID                                                          0=disable, 1=enable per bit N where 0<=N<=5 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_15
range|:
literal|10
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
struct|struct
name|cvmx_trax_trig1_sid_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from the IOB DWB engine */
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on requests from FPA,TIM,DFA,                                                          PCI,ZIP,POW, and PKO (writes) */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on read requests from PKO */
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
comment|/**< Enable triggering on write requests from PIP/IPD */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
comment|/**< Enable trigering from PP[N] with matching SourceID                                                          0=disable, 1=enableper bit N where  0<=N<=15 */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|pki
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iobreq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_trax_trig1_sid_cn63xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_cn63xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_trax_trig1_sid_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_trax_trig1_sid
name|cvmx_trax_trig1_sid_t
typedef|;
end_typedef

begin_include
include|#
directive|include
file|"cvmx-tra-defs.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

