begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * interface to the serial port UART hardware  *  *<hr>$Revision: 52004 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_UART_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_UART_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|CVMX_UART_NUM_PORTS
value|2
define|#
directive|define
name|CVMX_UART_TX_FIFO_SIZE
value|64
define|#
directive|define
name|CVMX_UART_RX_FIFO_SIZE
value|64
comment|/* CSR typedefs have been moved to cvmx-uart-defs.h */
typedef|typedef
name|void
function_decl|(
modifier|*
name|cvmx_uart_intr_handler_t
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|uint64_t
index|[]
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cvmx_uart_enable_intr
parameter_list|(
name|int
parameter_list|,
name|cvmx_uart_intr_handler_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|cvmx_uart_setup2
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|cvmx_uart_setup
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Defined in libc.  */
name|unsigned
name|__octeon_uart_trylock
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__octeon_uart_unlock
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Get a single byte from serial port.  *  * @param uart_index Uart to read from (0 or 1)  * @return The byte read  */
specifier|static
specifier|inline
name|uint8_t
name|cvmx_uart_read_byte
parameter_list|(
name|int
name|uart_index
parameter_list|)
block|{
name|cvmx_uart_lsr_t
name|lsrval
decl_stmt|;
comment|/* Spin until data is available */
do|do
block|{
name|lsrval
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_UARTX_LSR
argument_list|(
name|uart_index
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|lsrval
operator|.
name|s
operator|.
name|dr
condition|)
do|;
comment|/* Read and return the data */
return|return
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_UARTX_RBR
argument_list|(
name|uart_index
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Get a single byte from serial port with a timeout.  *       * @param uart_index Uart to read from (0 or 1)  * @param timedout Record if a timeout has happened  * @param timeout the timeout count  * @return The byte read  */
specifier|static
specifier|inline
name|uint8_t
name|cvmx_uart_read_byte_with_timeout
parameter_list|(
name|int
name|uart_index
parameter_list|,
name|int
modifier|*
name|timedout
parameter_list|,
specifier|volatile
name|unsigned
name|timeout
parameter_list|)
block|{
name|cvmx_uart_lsr_t
name|lsrval
decl_stmt|;
comment|/* Spin until data is available */
operator|*
name|timedout
operator|=
literal|0
expr_stmt|;
do|do
block|{
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
operator|*
name|timedout
operator|=
literal|1
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|lsrval
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_UARTX_LSR
argument_list|(
name|uart_index
argument_list|)
argument_list|)
expr_stmt|;
name|timeout
operator|--
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|lsrval
operator|.
name|s
operator|.
name|dr
condition|)
do|;
comment|/* Read and return the data */
return|return
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_UARTX_RBR
argument_list|(
name|uart_index
argument_list|)
argument_list|)
return|;
block|}
comment|/**  * Put a single byte to uart port.  *  * @param uart_index Uart to write to (0 or 1)  * @param ch         Byte to write  */
specifier|static
specifier|inline
name|void
name|cvmx_uart_write_byte
parameter_list|(
name|int
name|uart_index
parameter_list|,
name|uint8_t
name|ch
parameter_list|)
block|{
name|cvmx_uart_lsr_t
name|lsrval
decl_stmt|;
comment|/* Spin until there is room */
do|do
block|{
name|lsrval
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_MIO_UARTX_LSR
argument_list|(
name|uart_index
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|lsrval
operator|.
name|s
operator|.
name|thre
operator|==
literal|0
condition|)
do|;
comment|/* Write the byte */
name|cvmx_write_csr
argument_list|(
name|CVMX_MIO_UARTX_THR
argument_list|(
name|uart_index
argument_list|)
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
comment|/**  * Write a string to the uart  *  * @param uart_index Uart to use (0 or 1)  * @param str        String to write  */
specifier|static
specifier|inline
name|void
name|cvmx_uart_write_string
parameter_list|(
name|int
name|uart_index
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
comment|/* Just loop writing one byte at a time */
while|while
condition|(
operator|*
name|str
condition|)
block|{
name|cvmx_uart_write_byte
argument_list|(
name|uart_index
argument_list|,
operator|*
name|str
argument_list|)
expr_stmt|;
name|str
operator|++
expr_stmt|;
block|}
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __CVM_UART_H__ */
end_comment

end_unit

