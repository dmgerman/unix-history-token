begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-rnm-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon rnm.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_RNM_TYPEDEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_RNM_TYPEDEFS_H__
end_define

begin_define
define|#
directive|define
name|CVMX_RNM_BIST_STATUS
value|(CVMX_ADD_IO_SEG(0x0001180040000008ull))
end_define

begin_define
define|#
directive|define
name|CVMX_RNM_CTL_STATUS
value|(CVMX_ADD_IO_SEG(0x0001180040000000ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RNM_EER_DBG
value|CVMX_RNM_EER_DBG_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RNM_EER_DBG_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RNM_EER_DBG not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180040000018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RNM_EER_DBG
value|(CVMX_ADD_IO_SEG(0x0001180040000018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RNM_EER_KEY
value|CVMX_RNM_EER_KEY_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RNM_EER_KEY_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RNM_EER_KEY not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180040000010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RNM_EER_KEY
value|(CVMX_ADD_IO_SEG(0x0001180040000010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RNM_SERIAL_NUM
value|CVMX_RNM_SERIAL_NUM_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RNM_SERIAL_NUM_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RNM_SERIAL_NUM not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180040000020ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RNM_SERIAL_NUM
value|(CVMX_ADD_IO_SEG(0x0001180040000020ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_rnm_bist_status  *  * RNM_BIST_STATUS = RNM's BIST Status Register  *  * The RNM's Memory Bist Status register.  */
end_comment

begin_union
union|union
name|cvmx_rnm_bist_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rnm_bist_status_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|rrc
range|:
literal|1
decl_stmt|;
comment|/**< Status of RRC block bist. */
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
comment|/**< Status of MEM block bist. */
else|#
directive|else
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rrc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rnm_bist_status_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rnm_bist_status
name|cvmx_rnm_bist_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rnm_ctl_status  *  * RNM_CTL_STATUS = RNM's Control/Status Register  *  * The RNM's interrupt enable register.  */
end_comment

begin_union
union|union
name|cvmx_rnm_ctl_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rnm_ctl_status_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|eer_lck
range|:
literal|1
decl_stmt|;
comment|/**< Encryption enable register locked */
name|uint64_t
name|eer_val
range|:
literal|1
decl_stmt|;
comment|/**< Dormant encryption key match */
name|uint64_t
name|ent_sel
range|:
literal|4
decl_stmt|;
comment|/**< ? */
name|uint64_t
name|exp_ent
range|:
literal|1
decl_stmt|;
comment|/**< Exported entropy enable for random number generator */
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset RNG as core reset. */
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset the RNM as core reset except for register                                                          logic. */
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
comment|/**< Enable the output of the RNG. */
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
comment|/**< Entropy enable for random number generator. */
else|#
directive|else
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exp_ent
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ent_sel
range|:
literal|4
decl_stmt|;
name|uint64_t
name|eer_val
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eer_lck
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_rnm_ctl_status_cn30xx
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset RNG as core reset. */
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset the RNM as core reset except for register                                                          logic. */
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
comment|/**< Enable the output of the RNG. */
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
comment|/**< Entropy enable for random number generator. */
else|#
directive|else
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_rnm_ctl_status_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_rnm_ctl_status_cn50xx
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|ent_sel
range|:
literal|4
decl_stmt|;
comment|/**< ? */
name|uint64_t
name|exp_ent
range|:
literal|1
decl_stmt|;
comment|/**< Exported entropy enable for random number generator */
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset RNG as core reset. */
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
comment|/**< Reset the RNM as core reset except for register                                                          logic. */
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
comment|/**< Enable the output of the RNG. */
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
comment|/**< Entropy enable for random number generator. */
else|#
directive|else
name|uint64_t
name|ent_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rnm_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rng_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exp_ent
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ent_sel
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_cn50xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rnm_ctl_status_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rnm_ctl_status
name|cvmx_rnm_ctl_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rnm_eer_dbg  *  * RNM_EER_DBG = RNM's Encryption enable debug register  *  * The RNM's Encryption enable debug register  */
end_comment

begin_union
union|union
name|cvmx_rnm_eer_dbg
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rnm_eer_dbg_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|dat
range|:
literal|64
decl_stmt|;
comment|/**< Dormant encryption debug info. */
else|#
directive|else
name|uint64_t
name|dat
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rnm_eer_dbg_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rnm_eer_dbg_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rnm_eer_dbg
name|cvmx_rnm_eer_dbg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rnm_eer_key  *  * RNM_EER_KEY = RNM's Encryption enable register  *  * The RNM's Encryption enable register  */
end_comment

begin_union
union|union
name|cvmx_rnm_eer_key
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rnm_eer_key_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|key
range|:
literal|64
decl_stmt|;
comment|/**< Dormant encryption key.  If dormant crypto is fuse                                                          enabled, crypto can be enable by writing this                                                          register with the correct key. */
else|#
directive|else
name|uint64_t
name|key
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rnm_eer_key_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rnm_eer_key_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rnm_eer_key
name|cvmx_rnm_eer_key_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rnm_serial_num  *  * RNM_SERIAL_NUM = RNM's fuse serial number register  *  * The RNM's fuse serial number register  *  * Notes:  * Added RNM_SERIAL_NUM in pass 2.0  *  */
end_comment

begin_union
union|union
name|cvmx_rnm_serial_num
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rnm_serial_num_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|dat
range|:
literal|64
decl_stmt|;
comment|/**< Dormant encryption serial number */
else|#
directive|else
name|uint64_t
name|dat
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rnm_serial_num_s
name|cn63xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rnm_serial_num
name|cvmx_rnm_serial_num_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

