begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * This file provides support for the processor local scratch memory.  * Scratch memory is byte addressable - all addresses are byte addresses.  *  *  *<hr>$Revision: 70030 $<hr>  *  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_SCRATCH_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_SCRATCH_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Note: This define must be a long, not a long long in order to compile         without warnings for both 32bit and 64bit. */
define|#
directive|define
name|CVMX_SCRATCH_BASE
value|(-32768l)
comment|/* 0xffffffffffff8000 */
comment|/**  * Reads an 8 bit value from the processor local scratchpad memory.  *  * @param address byte address to read from  *  * @return value read  */
specifier|static
specifier|inline
name|uint8_t
name|cvmx_scratch_read8
parameter_list|(
name|uint64_t
name|address
parameter_list|)
block|{
return|return
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint8_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
return|;
block|}
comment|/**  * Reads a 16 bit value from the processor local scratchpad memory.  *  * @param address byte address to read from  *  * @return value read  */
specifier|static
specifier|inline
name|uint16_t
name|cvmx_scratch_read16
parameter_list|(
name|uint64_t
name|address
parameter_list|)
block|{
return|return
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint16_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
return|;
block|}
comment|/**  * Reads a 32 bit value from the processor local scratchpad memory.  *  * @param address byte address to read from  *  * @return value read  */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_scratch_read32
parameter_list|(
name|uint64_t
name|address
parameter_list|)
block|{
return|return
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint32_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
return|;
block|}
comment|/**  * Reads a 64 bit value from the processor local scratchpad memory.  *  * @param address byte address to read from  *  * @return value read  */
specifier|static
specifier|inline
name|uint64_t
name|cvmx_scratch_read64
parameter_list|(
name|uint64_t
name|address
parameter_list|)
block|{
return|return
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint64_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
return|;
block|}
comment|/**  * Writes an 8 bit value to the processor local scratchpad memory.  *  * @param address byte address to write to  * @param value   value to write  */
specifier|static
specifier|inline
name|void
name|cvmx_scratch_write8
parameter_list|(
name|uint64_t
name|address
parameter_list|,
name|uint64_t
name|value
parameter_list|)
block|{
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint8_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
operator|=
operator|(
name|uint8_t
operator|)
name|value
expr_stmt|;
block|}
comment|/**  * Writes a 32 bit value to the processor local scratchpad memory.  *  * @param address byte address to write to  * @param value   value to write  */
specifier|static
specifier|inline
name|void
name|cvmx_scratch_write16
parameter_list|(
name|uint64_t
name|address
parameter_list|,
name|uint64_t
name|value
parameter_list|)
block|{
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint16_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
operator|=
operator|(
name|uint16_t
operator|)
name|value
expr_stmt|;
block|}
comment|/**  * Writes a 16 bit value to the processor local scratchpad memory.  *  * @param address byte address to write to  * @param value   value to write  */
specifier|static
specifier|inline
name|void
name|cvmx_scratch_write32
parameter_list|(
name|uint64_t
name|address
parameter_list|,
name|uint64_t
name|value
parameter_list|)
block|{
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint32_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
operator|=
operator|(
name|uint32_t
operator|)
name|value
expr_stmt|;
block|}
comment|/**  * Writes a 64 bit value to the processor local scratchpad memory.  *  * @param address byte address to write to  * @param value   value to write  */
specifier|static
specifier|inline
name|void
name|cvmx_scratch_write64
parameter_list|(
name|uint64_t
name|address
parameter_list|,
name|uint64_t
name|value
parameter_list|)
block|{
operator|*
name|CASTPTR
argument_list|(
specifier|volatile
name|uint64_t
argument_list|,
name|CVMX_SCRATCH_BASE
operator|+
name|address
argument_list|)
operator|=
name|value
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_SCRATCH_H__ */
end_comment

end_unit

