begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-pcm-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon pcm.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_PCM_TYPEDEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_PCM_TYPEDEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_CFG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_CFG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PCM_CLKX_CFG
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000010000ull) + ((offset)& 1) * 16384)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_DBG
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_DBG(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010038ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PCM_CLKX_DBG
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000010038ull) + ((offset)& 1) * 16384)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_PCM_CLKX_GEN
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_PCM_CLKX_GEN(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000010008ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|16384
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_PCM_CLKX_GEN
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000010008ull) + ((offset)& 1) * 16384)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_pcm_clk#_cfg  */
end_comment

begin_union
union|union
name|cvmx_pcm_clkx_cfg
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pcm_clkx_cfg_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|fsyncgood
range|:
literal|1
decl_stmt|;
comment|/**< FSYNC status                                                          If 1, the last frame had a correctly positioned                                                                fsync pulse                                                          If 0, none/extra fsync pulse seen on most recent                                                                frame                                                          NOTE: this is intended for startup. the FSYNCEXTRA                                                          and FSYNCMISSING interrupts are intended for                                                          detecting loss of sync during normal operation. */
name|uint64_t
name|reserved_48_62
range|:
literal|15
decl_stmt|;
name|uint64_t
name|fsyncsamp
range|:
literal|16
decl_stmt|;
comment|/**< Number of ECLKs from internal BCLK edge to                                                          sample FSYNC                                                          NOTE: used to sync to the start of a frame and to                                                          check for FSYNC errors. */
name|uint64_t
name|reserved_26_31
range|:
literal|6
decl_stmt|;
name|uint64_t
name|fsynclen
range|:
literal|5
decl_stmt|;
comment|/**< Number of 1/2 BCLKs FSYNC is asserted for                                                          NOTE: only used when GEN==1 */
name|uint64_t
name|fsyncloc
range|:
literal|5
decl_stmt|;
comment|/**< FSYNC location, in 1/2 BCLKS before timeslot 0,                                                          bit 0.                                                          NOTE: also used to detect framing errors and                                                          therefore must have a correct value even if GEN==0 */
name|uint64_t
name|numslots
range|:
literal|10
decl_stmt|;
comment|/**< Number of 8-bit slots in a frame                                                          NOTE: this, along with EXTRABIT and Fbclk                                                          determines FSYNC frequency when GEN == 1                                                          NOTE: also used to detect framing errors and                                                          therefore must have a correct value even if GEN==0 */
name|uint64_t
name|extrabit
range|:
literal|1
decl_stmt|;
comment|/**< If 0, no frame bit                                                          If 1, add one extra bit time for frame bit                                                          NOTE: if GEN == 1, then FSYNC will be delayed one                                                          extra bit time.                                                          NOTE: also used to detect framing errors and                                                          therefore must have a correct value even if GEN==0                                                          NOTE: the extra bit comes from the LSB/MSB of the                                                          first byte of the frame in the transmit memory                                                          region.  LSB vs MSB is determined from the setting                                                          of PCMn_TDM_CFG[LSBFIRST]. */
name|uint64_t
name|bitlen
range|:
literal|2
decl_stmt|;
comment|/**< Number of BCLKs in a bit time.                                                          0 : 1 BCLK                                                          1 : 2 BCLKs                                                          2 : 4 BCLKs                                                          3 : operation undefined */
name|uint64_t
name|bclkpol
range|:
literal|1
decl_stmt|;
comment|/**< If 0, BCLK rise edge is start of bit time                                                          If 1, BCLK fall edge is start of bit time                                                          NOTE: also used to detect framing errors and                                                          therefore must have a correct value even if GEN==0 */
name|uint64_t
name|fsyncpol
range|:
literal|1
decl_stmt|;
comment|/**< If 0, FSYNC idles low, asserts high                                                          If 1, FSYNC idles high, asserts low                                                          NOTE: also used to detect framing errors and                                                          therefore must have a correct value even if GEN==0 */
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
comment|/**< If 0, Clock receiving logic is doing nothing                                                          1, Clock receiving logic is looking for sync */
else|#
directive|else
name|uint64_t
name|ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fsyncpol
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bclkpol
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bitlen
range|:
literal|2
decl_stmt|;
name|uint64_t
name|extrabit
range|:
literal|1
decl_stmt|;
name|uint64_t
name|numslots
range|:
literal|10
decl_stmt|;
name|uint64_t
name|fsyncloc
range|:
literal|5
decl_stmt|;
name|uint64_t
name|fsynclen
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_26_31
range|:
literal|6
decl_stmt|;
name|uint64_t
name|fsyncsamp
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_48_62
range|:
literal|15
decl_stmt|;
name|uint64_t
name|fsyncgood
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pcm_clkx_cfg_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_cfg_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_cfg_s
name|cn50xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pcm_clkx_cfg
name|cvmx_pcm_clkx_cfg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pcm_clk#_dbg  */
end_comment

begin_union
union|union
name|cvmx_pcm_clkx_dbg
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pcm_clkx_dbg_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|debuginfo
range|:
literal|64
decl_stmt|;
comment|/**< Miscellaneous debug information */
else|#
directive|else
name|uint64_t
name|debuginfo
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pcm_clkx_dbg_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_dbg_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_dbg_s
name|cn50xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pcm_clkx_dbg
name|cvmx_pcm_clkx_dbg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_pcm_clk#_gen  */
end_comment

begin_union
union|union
name|cvmx_pcm_clkx_gen
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_pcm_clkx_gen_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|deltasamp
range|:
literal|16
decl_stmt|;
comment|/**< Signed number of ECLKs to move sampled BCLK edge                                                          NOTE: the complete number of ECLKs to move is:                                                                    NUMSAMP + 2 + 1 + DELTASAMP                                                                NUMSAMP to compensate for sampling delay                                                                + 2 to compensate for dual-rank synchronizer                                                                + 1 for uncertainity                                                                + DELTASAMP to CMA/debugging */
name|uint64_t
name|numsamp
range|:
literal|16
decl_stmt|;
comment|/**< Number of ECLK samples to detect BCLK change when                                                          receiving clock. */
name|uint64_t
name|n
range|:
literal|32
decl_stmt|;
comment|/**< Determines BCLK frequency when generating clock                                                          NOTE: Fbclk = Feclk * N / 2^32                                                                N = (Fbclk / Feclk) * 2^32                                                          NOTE: writing N == 0 stops the clock generator, and                                                                causes bclk and fsync to be RECEIVED */
else|#
directive|else
name|uint64_t
name|n
range|:
literal|32
decl_stmt|;
name|uint64_t
name|numsamp
range|:
literal|16
decl_stmt|;
name|uint64_t
name|deltasamp
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_pcm_clkx_gen_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_gen_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_pcm_clkx_gen_s
name|cn50xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_pcm_clkx_gen
name|cvmx_pcm_clkx_gen_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

