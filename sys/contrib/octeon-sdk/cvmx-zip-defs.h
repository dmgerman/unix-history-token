begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-zip-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon zip.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_ZIP_TYPEDEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_ZIP_TYPEDEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BIST_RESULT
value|CVMX_ZIP_CMD_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_BIST_RESULT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000080ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BIST_RESULT
value|(CVMX_ADD_IO_SEG(0x0001180038000080ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BUF
value|CVMX_ZIP_CMD_BUF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_BUF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_BUF not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_BUF
value|(CVMX_ADD_IO_SEG(0x0001180038000008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_CTL
value|CVMX_ZIP_CMD_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CMD_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CMD_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_CMD_CTL
value|(CVMX_ADD_IO_SEG(0x0001180038000000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_CONSTANTS
value|CVMX_ZIP_CONSTANTS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_CONSTANTS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_CONSTANTS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800380000A0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_CONSTANTS
value|(CVMX_ADD_IO_SEG(0x00011800380000A0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_DEBUG0
value|CVMX_ZIP_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000098ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_DEBUG0
value|(CVMX_ADD_IO_SEG(0x0001180038000098ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_ERROR
value|CVMX_ZIP_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_ERROR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000088ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_ERROR
value|(CVMX_ADD_IO_SEG(0x0001180038000088ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_INT_MASK
value|CVMX_ZIP_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_INT_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000090ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_INT_MASK
value|(CVMX_ADD_IO_SEG(0x0001180038000090ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_ZIP_THROTTLE
value|CVMX_ZIP_THROTTLE_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_ZIP_THROTTLE_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_ZIP_THROTTLE not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180038000010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_ZIP_THROTTLE
value|(CVMX_ADD_IO_SEG(0x0001180038000010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_zip_cmd_bist_result  *  * Notes:  * Access to the internal BiST results  * Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).  */
end_comment

begin_union
union|union
name|cvmx_zip_cmd_bist_result
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_cmd_bist_result_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
name|uint64_t
name|zip_core
range|:
literal|39
decl_stmt|;
comment|/**< BiST result of the ZIP_CORE memories */
name|uint64_t
name|zip_ctl
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of the ZIP_CTL  memories */
else|#
directive|else
name|uint64_t
name|zip_ctl
range|:
literal|4
decl_stmt|;
name|uint64_t
name|zip_core
range|:
literal|39
decl_stmt|;
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_zip_cmd_bist_result_cn31xx
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_31_63
range|:
literal|33
decl_stmt|;
name|uint64_t
name|zip_core
range|:
literal|27
decl_stmt|;
comment|/**< BiST result of the ZIP_CORE memories */
name|uint64_t
name|zip_ctl
range|:
literal|4
decl_stmt|;
comment|/**< BiST result of the ZIP_CTL  memories */
else|#
directive|else
name|uint64_t
name|zip_ctl
range|:
literal|4
decl_stmt|;
name|uint64_t
name|zip_core
range|:
literal|27
decl_stmt|;
name|uint64_t
name|reserved_31_63
range|:
literal|33
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_bist_result_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_cmd_bist_result
name|cvmx_zip_cmd_bist_result_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_cmd_buf  *  * Notes:  * Sets the command buffer parameters  * The size of the command buffer segments is measured in uint64s.  The pool specifies (1 of 8 free  * lists to be used when freeing command buffer segments.  The PTR field is overwritten with the next  * pointer each time that the command buffer segment is exhausted.  * When quiescent (i.e. outstanding doorbell count is 0), it is safe to rewrite  * this register to effectively reset the command buffer state machine.  New commands will then be  * read from the newly specified command buffer pointer.  */
end_comment

begin_union
union|union
name|cvmx_zip_cmd_buf
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_cmd_buf_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
comment|/**< Number of DontWriteBacks */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Free list used to free command buffer segments */
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
comment|/**< Number of uint64s per command buffer segment */
name|uint64_t
name|ptr
range|:
literal|33
decl_stmt|;
comment|/**< Initial command buffer pointer[39:7] (128B-aligned) */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|33
decl_stmt|;
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_buf_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_cmd_buf
name|cvmx_zip_cmd_buf_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_cmd_ctl  */
end_comment

begin_union
union|union
name|cvmx_zip_cmd_ctl
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_cmd_ctl_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|forceclk
range|:
literal|1
decl_stmt|;
comment|/**< Force zip_ctl__clock_on_b == 1 when set */
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse for zip core */
else|#
directive|else
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|forceclk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_cmd_ctl_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_cmd_ctl
name|cvmx_zip_cmd_ctl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_constants  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  *  */
end_comment

begin_union
union|union
name|cvmx_zip_constants
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_constants_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
name|uint64_t
name|depth
range|:
literal|16
decl_stmt|;
comment|/**< Maximum search depth for compression */
name|uint64_t
name|onfsize
range|:
literal|12
decl_stmt|;
comment|/**< Output near full threshhold in bytes */
name|uint64_t
name|ctxsize
range|:
literal|12
decl_stmt|;
comment|/**< Context size in bytes */
name|uint64_t
name|reserved_1_7
range|:
literal|7
decl_stmt|;
name|uint64_t
name|disabled
range|:
literal|1
decl_stmt|;
comment|/**< 1=zip unit isdisabled, 0=zip unit not disabled */
else|#
directive|else
name|uint64_t
name|disabled
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_7
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ctxsize
range|:
literal|12
decl_stmt|;
name|uint64_t
name|onfsize
range|:
literal|12
decl_stmt|;
name|uint64_t
name|depth
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_48_63
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_constants_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_constants_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_constants
name|cvmx_zip_constants_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_debug0  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  *  */
end_comment

begin_union
union|union
name|cvmx_zip_debug0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_debug0_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|asserts
range|:
literal|17
decl_stmt|;
comment|/**< FIFO assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|17
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_zip_debug0_cn31xx
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_14_63
range|:
literal|50
decl_stmt|;
name|uint64_t
name|asserts
range|:
literal|14
decl_stmt|;
comment|/**< FIFO assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|14
decl_stmt|;
name|uint64_t
name|reserved_14_63
range|:
literal|50
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_debug0_cn31xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_debug0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_debug0_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_debug0
name|cvmx_zip_debug0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_error  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  *  */
end_comment

begin_union
union|union
name|cvmx_zip_error
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_error_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< A doorbell count has overflowed */
else|#
directive|else
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_error_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_error_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_error
name|cvmx_zip_error_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_int_mask  *  * Notes:  * Note that this CSR is present only in chip revisions beginning with pass2.  * When a mask bit is set, the corresponding interrupt is enabled.  */
end_comment

begin_union
union|union
name|cvmx_zip_int_mask
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_int_mask_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to ZIP_ERROR[0] above */
else|#
directive|else
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_int_mask_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_int_mask_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_int_mask
name|cvmx_zip_int_mask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_zip_throttle  *  * Notes:  * The maximum number of inflight data fetch transactions.  Values> 8 are illegal.  * Writing 0 to this register causes the ZIP module to temporarily suspend NCB  * accesses; it is not recommended for normal operation, but may be useful for  * diagnostics.  */
end_comment

begin_union
union|union
name|cvmx_zip_throttle
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_zip_throttle_s
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|max_infl
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of inflight data fetch transactions on NCB */
else|#
directive|else
name|uint64_t
name|max_infl
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_zip_throttle_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_zip_throttle_s
name|cn63xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_zip_throttle
name|cvmx_zip_throttle_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

