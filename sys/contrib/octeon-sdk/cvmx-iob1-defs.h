begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-iob1-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon iob1.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_IOB1_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_IOB1_DEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB1_BIST_STATUS
value|CVMX_IOB1_BIST_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB1_BIST_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB1_BIST_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00107F8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB1_BIST_STATUS
value|(CVMX_ADD_IO_SEG(0x00011800F00107F8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB1_CTL_STATUS
value|CVMX_IOB1_CTL_STATUS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB1_CTL_STATUS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB1_CTL_STATUS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F0010050ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB1_CTL_STATUS
value|(CVMX_ADD_IO_SEG(0x00011800F0010050ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_IOB1_TO_CMB_CREDITS
value|CVMX_IOB1_TO_CMB_CREDITS_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_IOB1_TO_CMB_CREDITS_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_IOB1_TO_CMB_CREDITS not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00011800F00100B0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_IOB1_TO_CMB_CREDITS
value|(CVMX_ADD_IO_SEG(0x00011800F00100B0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_iob1_bist_status  *  * IOB_BIST_STATUS = BIST Status of IOB Memories  *  * The result of the BIST run on the IOB memories.  */
end_comment

begin_union
union|union
name|cvmx_iob1_bist_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob1_bist_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
comment|/**< xmdfif_bist_status */
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
comment|/**< xmcfif_bist_status */
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
comment|/**< iorfif_bist_status */
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
comment|/**< rsdfif_bist_status */
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
comment|/**< iocfif_bist_status */
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem0_status */
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
comment|/**< icr_pko_bist_mem1_status */
else|#
directive|else
name|uint64_t
name|icrp1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|icrp0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|iocfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rsdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iorfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmcfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|xmdfif
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_9_63
range|:
literal|55
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob1_bist_status_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob1_bist_status_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob1_bist_status
name|cvmx_iob1_bist_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob1_ctl_status  *  * IOB Control Status = IOB Control and Status Register  *  * Provides control for IOB functions.  */
end_comment

begin_union
union|union
name|cvmx_iob1_ctl_status
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob1_ctl_status_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
comment|/**< Delay async FIFO counts to be used when clock ratio                                                          is greater then 3:1. Writes should be followed by an                                                          immediate read. */
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
comment|/**< IBC XMC PUSH EARLY */
name|uint64_t
name|reserved_0_5
range|:
literal|6
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_5
range|:
literal|6
decl_stmt|;
name|uint64_t
name|xmc_per
range|:
literal|4
decl_stmt|;
name|uint64_t
name|fif_dly
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob1_ctl_status_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob1_ctl_status_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob1_ctl_status
name|cvmx_iob1_ctl_status_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_iob1_to_cmb_credits  *  * IOB_TO_CMB_CREDITS = IOB To CMB Credits  *  * Controls the number of reads and writes that may be outstanding to the L2C (via the CMB).  */
end_comment

begin_union
union|union
name|cvmx_iob1_to_cmb_credits
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_iob1_to_cmb_credits_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|pko_rd
range|:
literal|4
decl_stmt|;
comment|/**< Number of PKO reads that can be out to L2C where                                                          0 == 16-credits. */
name|uint64_t
name|reserved_3_5
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
comment|/**< Number of NCB/PKI writes that can be out to L2C                                                          where 0 == 8-credits. */
else|#
directive|else
name|uint64_t
name|ncb_wr
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_3_5
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pko_rd
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_iob1_to_cmb_credits_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_iob1_to_cmb_credits_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_iob1_to_cmb_credits
name|cvmx_iob1_to_cmb_credits_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

