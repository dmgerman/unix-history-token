begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-ciu2-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon ciu2.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_CIU2_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_CIU2_DEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_ACK_IOX_INT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_ACK_IOX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080C0800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_ACK_IOX_INT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080C0800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_ACK_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_ACK_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C0000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_ACK_PPX_IP2
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C0000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_ACK_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_ACK_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C0200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_ACK_PPX_IP3
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C0200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_ACK_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_ACK_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C0400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_ACK_PPX_IP4
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C0400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108097800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108097800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_GPIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_GPIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B7800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_GPIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B7800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_GPIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_GPIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A7800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_GPIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A7800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108094800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108094800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_IO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_IO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B4800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_IO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B4800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_IO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_IO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A4800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_IO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A4800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108098800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108098800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MBOX_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MBOX_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B8800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MBOX_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B8800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MBOX_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MBOX_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A8800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MBOX_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A8800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108095800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108095800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MEM_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MEM_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B5800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MEM_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B5800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MEM_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MEM_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A5800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MEM_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A5800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108093800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108093800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B3800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B3800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_MIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_MIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A3800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_MIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A3800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108096800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108096800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_PKT_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_PKT_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B6800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_PKT_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B6800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_PKT_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_PKT_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A6800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_PKT_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A6800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108092800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108092800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_RML_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_RML_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B2800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_RML_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B2800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_RML_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_RML_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A2800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_RML_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A2800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108091800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108091800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WDOG_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WDOG_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B1800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WDOG_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B1800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WDOG_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WDOG_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A1800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WDOG_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A1800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108090800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108090800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WRKQ_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WRKQ_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080B0800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WRKQ_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080B0800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_IOX_INT_WRKQ_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_IOX_INT_WRKQ_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701080A0800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_IOX_INT_WRKQ_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701080A0800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100097000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100097000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_GPIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_GPIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B7000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_GPIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B7000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_GPIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_GPIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A7000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_GPIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A7000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100094000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100094000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_IO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_IO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B4000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_IO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B4000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_IO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_IO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A4000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_IO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A4000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100098000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100098000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MBOX_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MBOX_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B8000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MBOX_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B8000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MBOX_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MBOX_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A8000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MBOX_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A8000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100095000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100095000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MEM_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MEM_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B5000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MEM_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B5000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MEM_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MEM_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A5000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MEM_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A5000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100093000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100093000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B3000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B3000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_MIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_MIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A3000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_MIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A3000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100096000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100096000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_PKT_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_PKT_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B6000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_PKT_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B6000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_PKT_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_PKT_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A6000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_PKT_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A6000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100092000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100092000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_RML_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_RML_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B2000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_RML_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B2000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_RML_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_RML_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A2000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_RML_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A2000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100091000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100091000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WDOG_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WDOG_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B1000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WDOG_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B1000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WDOG_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WDOG_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A1000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WDOG_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A1000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100090000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100090000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WRKQ_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WRKQ_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B0000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WRKQ_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B0000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP2_WRKQ_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP2_WRKQ_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A0000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP2_WRKQ_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A0000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100097200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100097200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_GPIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_GPIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B7200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_GPIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B7200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_GPIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_GPIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A7200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_GPIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A7200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100094200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100094200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_IO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_IO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B4200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_IO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B4200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_IO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_IO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A4200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_IO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A4200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100098200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100098200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MBOX_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MBOX_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B8200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MBOX_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B8200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MBOX_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MBOX_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A8200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MBOX_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A8200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100095200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100095200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MEM_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MEM_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B5200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MEM_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B5200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MEM_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MEM_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A5200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MEM_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A5200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100093200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100093200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B3200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B3200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_MIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_MIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A3200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_MIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A3200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100096200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100096200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_PKT_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_PKT_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B6200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_PKT_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B6200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_PKT_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_PKT_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A6200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_PKT_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A6200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100092200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100092200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_RML_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_RML_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B2200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_RML_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B2200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_RML_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_RML_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A2200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_RML_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A2200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100091200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100091200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WDOG_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WDOG_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B1200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WDOG_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B1200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WDOG_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WDOG_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A1200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WDOG_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A1200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100090200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100090200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WRKQ_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WRKQ_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B0200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WRKQ_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B0200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP3_WRKQ_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP3_WRKQ_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A0200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP3_WRKQ_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A0200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100097400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100097400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_GPIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_GPIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B7400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_GPIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B7400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_GPIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_GPIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A7400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_GPIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A7400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100094400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100094400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_IO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_IO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B4400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_IO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B4400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_IO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_IO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A4400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_IO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A4400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100098400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100098400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MBOX_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MBOX_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B8400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MBOX_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B8400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MBOX_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MBOX_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A8400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MBOX_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A8400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100095400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100095400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MEM_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MEM_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B5400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MEM_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B5400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MEM_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MEM_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A5400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MEM_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A5400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100093400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100093400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MIO_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MIO_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B3400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MIO_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B3400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_MIO_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_MIO_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A3400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_MIO_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A3400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100096400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100096400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_PKT_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_PKT_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B6400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_PKT_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B6400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_PKT_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_PKT_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A6400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_PKT_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A6400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100092400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100092400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_RML_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_RML_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B2400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_RML_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B2400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_RML_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_RML_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A2400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_RML_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A2400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100091400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100091400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WDOG_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WDOG_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B1400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WDOG_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B1400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WDOG_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WDOG_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A1400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WDOG_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A1400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100090400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100090400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WRKQ_W1C
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WRKQ_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000B0400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WRKQ_W1C
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000B0400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_EN_PPX_IP4_WRKQ_W1S
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_EN_PPX_IP4_WRKQ_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000A0400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_EN_PPX_IP4_WRKQ_W1S
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000A0400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_CIU_READY
value|CVMX_CIU2_INTR_CIU_READY_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_INTR_CIU_READY_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_INTR_CIU_READY not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100102008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_CIU_READY
value|(CVMX_ADD_IO_SEG(0x0001070100102008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_RAM_ECC_CTL
value|CVMX_CIU2_INTR_RAM_ECC_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_INTR_RAM_ECC_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_INTR_RAM_ECC_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100102010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_RAM_ECC_CTL
value|(CVMX_ADD_IO_SEG(0x0001070100102010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_RAM_ECC_ST
value|CVMX_CIU2_INTR_RAM_ECC_ST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_INTR_RAM_ECC_ST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_INTR_RAM_ECC_ST not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100102018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_RAM_ECC_ST
value|(CVMX_ADD_IO_SEG(0x0001070100102018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_SLOWDOWN
value|CVMX_CIU2_INTR_SLOWDOWN_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_INTR_SLOWDOWN_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_INTR_SLOWDOWN not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100102000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_INTR_SLOWDOWN
value|(CVMX_ADD_IO_SEG(0x0001070100102000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_MSIRED_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_MSIRED_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C1000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_MSIRED_PPX_IP2
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C1000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_MSIRED_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_MSIRED_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C1200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_MSIRED_PPX_IP3
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C1200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_MSIRED_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_MSIRED_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C1400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_MSIRED_PPX_IP4
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C1400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_MSI_RCVX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|255
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_MSI_RCVX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C2000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|255
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_MSI_RCVX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C2000ull) + ((offset)& 255) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_MSI_SELX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|255
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_MSI_SELX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010701000C3000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|255
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_MSI_SELX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x00010701000C3000ull) + ((offset)& 255) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108047800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108047800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108044800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108044800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108045800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108045800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108043800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108043800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108046800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108046800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108042800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108042800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108041800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108041800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_IOX_INT_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_IOX_INT_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108040800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_IOX_INT_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108040800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100047000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100047000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100044000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100044000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100045000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100045000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100043000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100043000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100046000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100046000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100042000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100042000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100041000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100041000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP2_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP2_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100040000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP2_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100040000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100047200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100047200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100044200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100044200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100045200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100045200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100043200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100043200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100046200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100046200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100042200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100042200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100041200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100041200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP3_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP3_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100040200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP3_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100040200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100047400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100047400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100044400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100044400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100045400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100045400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100043400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100043400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100046400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100046400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100042400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100042400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100041400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100041400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_RAW_PPX_IP4_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_RAW_PPX_IP4_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100040400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_RAW_PPX_IP4_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100040400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108087800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108087800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108084800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108084800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108088800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108088800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108085800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108085800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108083800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108083800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108086800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108086800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108082800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108082800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108081800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108081800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_IOX_INT_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_IOX_INT_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070108080800ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|1
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_IOX_INT_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070108080800ull) + ((block_id)& 1) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100087000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100087000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100084000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100084000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100088000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100088000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100085000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100085000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100083000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100083000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100086000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100086000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100082000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100082000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100081000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100081000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP2_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP2_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100080000ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP2_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100080000ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100087200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100087200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100084200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100084200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100088200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100088200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100085200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100085200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100083200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100083200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100086200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100086200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100082200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100082200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100081200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100081200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP3_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP3_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100080200ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP3_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100080200ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_GPIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_GPIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100087400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_GPIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100087400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_IO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_IO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100084400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_IO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100084400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_MBOX
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_MBOX(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100088400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_MBOX
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100088400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_MEM
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_MEM(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100085400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_MEM
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100085400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_MIO
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_MIO(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100083400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_MIO
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100083400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_PKT
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_PKT(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100086400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_PKT
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100086400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_RML
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_RML(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100082400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_RML
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100082400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_WDOG
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_WDOG(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100081400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_WDOG
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100081400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SRC_PPX_IP4_WRKQ
parameter_list|(
name|unsigned
name|long
name|block_id
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|block_id
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SRC_PPX_IP4_WRKQ(%lu) is invalid on this chip\n"
argument_list|,
name|block_id
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100080400ull
argument_list|)
operator|+
operator|(
operator|(
name|block_id
operator|)
operator|&
literal|31
operator|)
operator|*
literal|0x200000ull
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SRC_PPX_IP4_WRKQ
parameter_list|(
name|block_id
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100080400ull) + ((block_id)& 31) * 0x200000ull)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SUM_IOX_INT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SUM_IOX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100000800ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SUM_IOX_INT
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100000800ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SUM_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SUM_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100000000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SUM_PPX_IP2
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100000000ull) + ((offset)& 31) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SUM_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SUM_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100000200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SUM_PPX_IP3
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100000200ull) + ((offset)& 31) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU2_SUM_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|31
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU2_SUM_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100000400ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU2_SUM_PPX_IP4
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070100000400ull) + ((offset)& 31) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_ciu2_ack_io#_int  */
end_comment

begin_union
union|union
name|cvmx_ciu2_ack_iox_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_ack_iox_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
comment|/**< Read to clear the corresponding interrupt to                                                          PP/IO.  Without this read the interrupt will not                                                          deassert until the next CIU interrupt scan, up to                                                          200 cycles away. */
else|#
directive|else
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_ack_iox_int_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_ack_iox_int_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_ack_iox_int
name|cvmx_ciu2_ack_iox_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_ack_pp#_ip2  *  * CIU2_ACK_PPX_IPx      (Pass 2)  *  */
end_comment

begin_union
union|union
name|cvmx_ciu2_ack_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_ack_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
comment|/**< Read to clear the corresponding interrupt to                                                          PP/IO.  Without this read the interrupt will not                                                          deassert until the next CIU interrupt scan, up to                                                          200 cycles away. */
else|#
directive|else
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_ack_ppx_ip2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_ack_ppx_ip2_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_ack_ppx_ip2
name|cvmx_ciu2_ack_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_ack_pp#_ip3  */
end_comment

begin_union
union|union
name|cvmx_ciu2_ack_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_ack_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
comment|/**< Read to clear the corresponding interrupt to                                                          PP/IO.  Without this read the interrupt will not                                                          deassert until the next CIU interrupt scan, up to                                                          200 cycles away. */
else|#
directive|else
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_ack_ppx_ip3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_ack_ppx_ip3_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_ack_ppx_ip3
name|cvmx_ciu2_ack_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_ack_pp#_ip4  */
end_comment

begin_union
union|union
name|cvmx_ciu2_ack_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_ack_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
comment|/**< Read to clear the corresponding interrupt to                                                          PP/IO.  Without this read the interrupt will not                                                          deassert until the next CIU interrupt scan, up to                                                          200 cycles away. */
else|#
directive|else
name|uint64_t
name|ack
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_ack_ppx_ip4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_ack_ppx_ip4_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_ack_ppx_ip4
name|cvmx_ciu2_ack_ppx_ip4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt-enable */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_gpio
name|cvmx_ciu2_en_iox_int_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_gpio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_gpio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_gpio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_GPIO[GPIO] */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_gpio_w1c
name|cvmx_ciu2_en_iox_int_gpio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_gpio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_gpio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_gpio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enable,write 1 to enable CIU2_EN */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_gpio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_gpio_w1s
name|cvmx_ciu2_en_iox_int_gpio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt-enable */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA interrupt-enable */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit interrupt-enable                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI  interrupt-enable */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt-enable */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_io
name|cvmx_ciu2_en_iox_int_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_io_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_io_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_io_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_io_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_io_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_io_w1c
name|cvmx_ciu2_en_iox_int_io_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_io_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_io_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_io_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_io_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_io_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_io_w1s
name|cvmx_ciu2_en_iox_int_io_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt-enable, use with CIU2_MBOX                                                          to generate CIU2_SRC_xx_yy_MBOX */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mbox
name|cvmx_ciu2_en_iox_int_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mbox_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mbox_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mbox_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mbox_w1c
name|cvmx_ciu2_en_iox_int_mbox_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mbox_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mbox_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mbox_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mbox_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mbox_w1s
name|cvmx_ciu2_en_iox_int_mbox_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt-enable */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mem
name|cvmx_ciu2_en_iox_int_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mem_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mem_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mem_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mem_w1c
name|cvmx_ciu2_en_iox_int_mem_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mem_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mem_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mem_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mem_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mem_w1s
name|cvmx_ciu2_en_iox_int_mem_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt-enable */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt-enable */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt-enable */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt-enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x interrupt-enable */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines interrupt-enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt-enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt-enable */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt-enable */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt-enable */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt-enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt-enable */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mio
name|cvmx_ciu2_en_iox_int_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mio_w1c
name|cvmx_ciu2_en_iox_int_mio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_mio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_mio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_mio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_mio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_mio_w1s
name|cvmx_ciu2_en_iox_int_mio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_pkt
name|cvmx_ciu2_en_iox_int_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_pkt_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_pkt_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_pkt_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_pkt_w1c
name|cvmx_ciu2_en_iox_int_pkt_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_pkt_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_pkt_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_pkt_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_pkt_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_pkt_w1s
name|cvmx_ciu2_en_iox_int_pkt_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_rml
name|cvmx_ciu2_en_iox_int_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_rml_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_rml_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_rml_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_rml_w1c
name|cvmx_ciu2_en_iox_int_rml_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_rml_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_rml_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_rml_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_rml_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_rml_w1s
name|cvmx_ciu2_en_iox_int_rml_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupt-enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wdog
name|cvmx_ciu2_en_iox_int_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wdog_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wdog_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wdog_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< write 1 to clear CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wdog_w1c
name|cvmx_ciu2_en_iox_int_wdog_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wdog_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wdog_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wdog_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WDOG[WDOG] */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wdog_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wdog_w1s
name|cvmx_ciu2_en_iox_int_wdog_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupt-enable */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wrkq
name|cvmx_ciu2_en_iox_int_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wrkq_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wrkq_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          For W1C bits, write 1 to clear the corresponding                                                          CIU2_EN_xx_yy_WRKQ,write 0 to retain previous value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wrkq_w1c
name|cvmx_ciu2_en_iox_int_wrkq_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_io#_int_wrkq_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_iox_int_wrkq_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          1 bit/group. For all W1S bits, write 1 to enable                                                          corresponding CIU2_EN_xx_yy_WRKQ[WORKQ] bit,                                                          writing 0 to retain previous value. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_iox_int_wrkq_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_iox_int_wrkq_w1s
name|cvmx_ciu2_en_iox_int_wrkq_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt-enable */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_gpio
name|cvmx_ciu2_en_ppx_ip2_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_gpio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_GPIO[GPIO] */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c
name|cvmx_ciu2_en_ppx_ip2_gpio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_gpio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enable,write 1 to enable CIU2_EN */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s
name|cvmx_ciu2_en_ppx_ip2_gpio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt-enable */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA interrupt-enable */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit interrupt-enable                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI  interrupt-enable */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt-enable */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_io
name|cvmx_ciu2_en_ppx_ip2_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_io_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_io_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_io_w1c
name|cvmx_ciu2_en_ppx_ip2_io_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_io_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_io_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_io_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_io_w1s
name|cvmx_ciu2_en_ppx_ip2_io_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt-enable, use with CIU2_MBOX                                                          to generate CIU2_SRC_xx_yy_MBOX */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mbox
name|cvmx_ciu2_en_ppx_ip2_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mbox_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c
name|cvmx_ciu2_en_ppx_ip2_mbox_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mbox_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s
name|cvmx_ciu2_en_ppx_ip2_mbox_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt-enable */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mem
name|cvmx_ciu2_en_ppx_ip2_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mem_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mem_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mem_w1c
name|cvmx_ciu2_en_ppx_ip2_mem_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mem_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mem_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mem_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mem_w1s
name|cvmx_ciu2_en_ppx_ip2_mem_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt-enable */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt-enable */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt-enable */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt-enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x interrupt-enable */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines interrupt-enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt-enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt-enable */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt-enable */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt-enable */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt-enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt-enable */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mio
name|cvmx_ciu2_en_ppx_ip2_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mio_w1c
name|cvmx_ciu2_en_ppx_ip2_mio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_mio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_mio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_mio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_mio_w1s
name|cvmx_ciu2_en_ppx_ip2_mio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_pkt
name|cvmx_ciu2_en_ppx_ip2_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_pkt_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c
name|cvmx_ciu2_en_ppx_ip2_pkt_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_pkt_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s
name|cvmx_ciu2_en_ppx_ip2_pkt_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_rml
name|cvmx_ciu2_en_ppx_ip2_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_rml_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_rml_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_rml_w1c
name|cvmx_ciu2_en_ppx_ip2_rml_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_rml_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_rml_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_rml_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_rml_w1s
name|cvmx_ciu2_en_ppx_ip2_rml_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupt-enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wdog
name|cvmx_ciu2_en_ppx_ip2_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wdog_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< write 1 to clear CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c
name|cvmx_ciu2_en_ppx_ip2_wdog_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wdog_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WDOG[WDOG] */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s
name|cvmx_ciu2_en_ppx_ip2_wdog_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupt-enable */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wrkq
name|cvmx_ciu2_en_ppx_ip2_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wrkq_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          For W1C bits, write 1 to clear the corresponding                                                          CIU2_EN_xx_yy_WRKQ,write 0 to retain previous value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip2_wrkq_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          1 bit/group. For all W1S bits, write 1 to enable                                                          corresponding CIU2_EN_xx_yy_WRKQ[WORKQ] bit,                                                          writing 0 to retain previous value. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s
name|cvmx_ciu2_en_ppx_ip2_wrkq_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt-enable */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_gpio
name|cvmx_ciu2_en_ppx_ip3_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_gpio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_GPIO[GPIO] */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c
name|cvmx_ciu2_en_ppx_ip3_gpio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_gpio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enable,write 1 to enable CIU2_EN */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s
name|cvmx_ciu2_en_ppx_ip3_gpio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt-enable */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA interrupt-enable */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit interrupt-enable                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI  interrupt-enable */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt-enable */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_io
name|cvmx_ciu2_en_ppx_ip3_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_io_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_io_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_io_w1c
name|cvmx_ciu2_en_ppx_ip3_io_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_io_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_io_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_io_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_io_w1s
name|cvmx_ciu2_en_ppx_ip3_io_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt-enable, use with CIU2_MBOX                                                          to generate CIU2_SRC_xx_yy_MBOX */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mbox
name|cvmx_ciu2_en_ppx_ip3_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mbox_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c
name|cvmx_ciu2_en_ppx_ip3_mbox_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mbox_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s
name|cvmx_ciu2_en_ppx_ip3_mbox_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt-enable */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mem
name|cvmx_ciu2_en_ppx_ip3_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mem_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mem_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mem_w1c
name|cvmx_ciu2_en_ppx_ip3_mem_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mem_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mem_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mem_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mem_w1s
name|cvmx_ciu2_en_ppx_ip3_mem_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt-enable */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt-enable */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt-enable */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt-enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x interrupt-enable */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines interrupt-enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt-enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt-enable */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt-enable */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt-enable */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt-enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt-enable */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mio
name|cvmx_ciu2_en_ppx_ip3_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mio_w1c
name|cvmx_ciu2_en_ppx_ip3_mio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_mio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_mio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_mio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_mio_w1s
name|cvmx_ciu2_en_ppx_ip3_mio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_pkt
name|cvmx_ciu2_en_ppx_ip3_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_pkt_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c
name|cvmx_ciu2_en_ppx_ip3_pkt_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_pkt_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s
name|cvmx_ciu2_en_ppx_ip3_pkt_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_rml
name|cvmx_ciu2_en_ppx_ip3_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_rml_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_rml_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_rml_w1c
name|cvmx_ciu2_en_ppx_ip3_rml_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_rml_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_rml_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_rml_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_rml_w1s
name|cvmx_ciu2_en_ppx_ip3_rml_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupt-enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wdog
name|cvmx_ciu2_en_ppx_ip3_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wdog_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< write 1 to clear CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c
name|cvmx_ciu2_en_ppx_ip3_wdog_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wdog_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WDOG[WDOG] */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s
name|cvmx_ciu2_en_ppx_ip3_wdog_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupt-enable */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wrkq
name|cvmx_ciu2_en_ppx_ip3_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wrkq_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          For W1C bits, write 1 to clear the corresponding                                                          CIU2_EN_xx_yy_WRKQ,write 0 to retain previous value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip3_wrkq_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          1 bit/group. For all W1S bits, write 1 to enable                                                          corresponding CIU2_EN_xx_yy_WRKQ[WORKQ] bit,                                                          writing 0 to retain previous value. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s
name|cvmx_ciu2_en_ppx_ip3_wrkq_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt-enable */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_gpio
name|cvmx_ciu2_en_ppx_ip4_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_gpio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_GPIO[GPIO] */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c
name|cvmx_ciu2_en_ppx_ip4_gpio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_gpio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enable,write 1 to enable CIU2_EN */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s
name|cvmx_ciu2_en_ppx_ip4_gpio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt-enable */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA interrupt-enable */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit interrupt-enable                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI  interrupt-enable */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt-enable */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_io
name|cvmx_ciu2_en_ppx_ip4_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_io_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_io_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_io_w1c
name|cvmx_ciu2_en_ppx_ip4_io_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_io_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_io_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[MSIRED]                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_io_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_io_w1s
name|cvmx_ciu2_en_ppx_ip4_io_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt-enable, use with CIU2_MBOX                                                          to generate CIU2_SRC_xx_yy_MBOX */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mbox
name|cvmx_ciu2_en_ppx_ip4_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mbox_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c
name|cvmx_ciu2_en_ppx_ip4_mbox_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mbox_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MBOX[MBOX] */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s
name|cvmx_ciu2_en_ppx_ip4_mbox_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt-enable */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mem
name|cvmx_ciu2_en_ppx_ip4_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mem_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mem_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mem_w1c
name|cvmx_ciu2_en_ppx_ip4_mem_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mem_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mem_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mem_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mem_w1s
name|cvmx_ciu2_en_ppx_ip4_mem_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt-enable */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt-enable */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt-enable */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt-enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x interrupt-enable */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines interrupt-enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt-enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt-enable */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt-enable */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt-enable */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt-enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt-enable */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mio
name|cvmx_ciu2_en_ppx_ip4_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mio_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mio_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mio_w1c
name|cvmx_ciu2_en_ppx_ip4_mio_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_mio_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_mio_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[NAND] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[SSQIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_mio_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_mio_w1s
name|cvmx_ciu2_en_ppx_ip4_mio_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x interrupt-enable */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt-enable */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt-enable */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt-enable */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_pkt
name|cvmx_ciu2_en_ppx_ip4_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_pkt_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c
name|cvmx_ciu2_en_ppx_ip4_pkt_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_pkt_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s
name|cvmx_ciu2_en_ppx_ip4_pkt_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA interrupt-enable */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt-enable */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt-enable */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt-enable */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt-enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt-enable */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt-enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt-enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt-enable */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt-enable */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt-enable */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt-enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt-enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt-enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt-enable */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt-enable */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_rml
name|cvmx_ciu2_en_ppx_ip4_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_rml_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_rml_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1c_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1c_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_rml_w1c
name|cvmx_ciu2_en_ppx_ip4_rml_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_rml_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_rml_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI_DMA] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1s_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_rml_w1s_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_rml_w1s
name|cvmx_ciu2_en_ppx_ip4_rml_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupt-enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wdog
name|cvmx_ciu2_en_ppx_ip4_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wdog_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< write 1 to clear CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c
name|cvmx_ciu2_en_ppx_ip4_wdog_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wdog_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WDOG[WDOG] */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s
name|cvmx_ciu2_en_ppx_ip4_wdog_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupt-enable */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wrkq
name|cvmx_ciu2_en_ppx_ip4_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wrkq_w1c  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to clear CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          For W1C bits, write 1 to clear the corresponding                                                          CIU2_EN_xx_yy_WRKQ,write 0 to retain previous value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_en_pp#_ip4_wrkq_w1s  */
end_comment

begin_union
union|union
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< Write 1 to enable CIU2_EN_xx_yy_WRKQ[WORKQ]                                                          1 bit/group. For all W1S bits, write 1 to enable                                                          corresponding CIU2_EN_xx_yy_WRKQ[WORKQ] bit,                                                          writing 0 to retain previous value. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s
name|cvmx_ciu2_en_ppx_ip4_wrkq_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_intr_ciu_ready  */
end_comment

begin_union
union|union
name|cvmx_ciu2_intr_ciu_ready
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_intr_ciu_ready_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ready
range|:
literal|1
decl_stmt|;
comment|/**< Because of the delay of the IRQ updates which may                                                          take about 200 sclk cycles, software should read                                                          this register after servicing interrupts and wait                                                          for response before enabling interrupt watching.                                                          Or, the outdated interrupt will show up again.                                                          The read back data return when all interrupts have                                                          been serviced, and read back data is always zero.                                                          In o68 pass2, CIU_READY gets replaced by CIU2_ACK                                                          This becomes an internal debug feature. */
else|#
directive|else
name|uint64_t
name|ready
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_intr_ciu_ready_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_intr_ciu_ready_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_intr_ciu_ready
name|cvmx_ciu2_intr_ciu_ready_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_intr_ram_ecc_ctl  */
end_comment

begin_union
union|union
name|cvmx_ciu2_intr_ram_ecc_ctl
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_intr_ram_ecc_ctl_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|flip_synd
range|:
literal|2
decl_stmt|;
comment|/**< Testing feature. Flip Syndrom to generate single or                                                          double bit error. FLIP_SYND[0] generate even number                                                          -ed bits error,FLIP_SYND[1] generate odd bits error */
name|uint64_t
name|ecc_ena
range|:
literal|1
decl_stmt|;
comment|/**< ECC Enable: When set will enable the 9bit ECC                                                          check/correct logic for CIU interrupt enable RAM.                                                          With ECC enabled, the ECC code will be generated                                                          and written in the memory and then later on reads,                                                          used to check and correct Single bit error and                                                          detect Double Bit error. */
else|#
directive|else
name|uint64_t
name|ecc_ena
range|:
literal|1
decl_stmt|;
name|uint64_t
name|flip_synd
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_intr_ram_ecc_ctl_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_intr_ram_ecc_ctl_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_intr_ram_ecc_ctl
name|cvmx_ciu2_intr_ram_ecc_ctl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_intr_ram_ecc_st  */
end_comment

begin_union
union|union
name|cvmx_ciu2_intr_ram_ecc_st
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_intr_ram_ecc_st_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
name|uint64_t
name|addr
range|:
literal|7
decl_stmt|;
comment|/**< Latch the address for latest sde/dde occured                                                          The value only 0-98 indicates the different 98 IRQs                                                          Software can read all corresponding corrected value                                                          from CIU2_EN_PPX_IPx_*** or CIU2_EN_IOX_INT_*** and                                                          rewite to the same address to corrected the bit err */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|syndrom
range|:
literal|9
decl_stmt|;
comment|/**< Report the latest error syndrom */
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dbe
range|:
literal|1
decl_stmt|;
comment|/**< Double bit error observed. Write '1' to clear */
name|uint64_t
name|sbe
range|:
literal|1
decl_stmt|;
comment|/**< Single bit error observed. Write '1' to clear */
else|#
directive|else
name|uint64_t
name|sbe
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dbe
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|syndrom
range|:
literal|9
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|addr
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_23_63
range|:
literal|41
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_intr_ram_ecc_st_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_intr_ram_ecc_st_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_intr_ram_ecc_st
name|cvmx_ciu2_intr_ram_ecc_st_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_intr_slowdown  */
end_comment

begin_union
union|union
name|cvmx_ciu2_intr_slowdown
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_intr_slowdown_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|ctl
range|:
literal|3
decl_stmt|;
comment|/**< Slowdown CIU interrupt walker processing time.                                                          IRQ2/3/4 for all 32 PPs are sent to PP (MRC) in                                                          a serial bus to reduce global routing. There is                                                          no backpressure mechanism designed for this scheme.                                                          It will be only a problem when sclk is faster, this                                                          Control will process 1 interrupt in 2^(CTL) sclks                                                          With different setting, clock rate ratio can handle                                                          SLOWDOWN       sclk_freq/aclk_freq ratio                                                           0                      3                                                           1                      6                                                           n                      3*2^(n) */
else|#
directive|else
name|uint64_t
name|ctl
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_intr_slowdown_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_intr_slowdown_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_intr_slowdown
name|cvmx_ciu2_intr_slowdown_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_msi_rcv#  *  * CIU2_MSI_RCV  Received MSI state bits    (Pass 2)  *  */
end_comment

begin_union
union|union
name|cvmx_ciu2_msi_rcvx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_msi_rcvx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|msi_rcv
range|:
literal|1
decl_stmt|;
comment|/**< MSI state bit, set on MSI delivery or by software                                                          "write 1" to set or "write 0" to clear.                                                          This register is used to create the                                                          CIU2_RAW_xx_yy_IO[MSIRED] interrupt.  See also                                                          SLI_MSI_RCV. */
else|#
directive|else
name|uint64_t
name|msi_rcv
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_msi_rcvx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_msi_rcvx_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_msi_rcvx
name|cvmx_ciu2_msi_rcvx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_msi_sel#  *  * CIU2_MSI_SEL  Received MSI SEL enable    (Pass 2)  *  */
end_comment

begin_union
union|union
name|cvmx_ciu2_msi_selx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_msi_selx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|pp_num
range|:
literal|5
decl_stmt|;
comment|/**< Processor number to receive this MSI interrupt */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ip_num
range|:
literal|2
decl_stmt|;
comment|/**< Interrupt priority level to receive this MSI                                                          interrupt (00=IP2, 01=IP3, 10=IP4, 11=rsvd) */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
comment|/**< Enable interrupt delivery.                                                          Must be set for PP_NUM and IP_NUM to have effect. */
else|#
directive|else
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ip_num
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pp_num
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_msi_selx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_msi_selx_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_msi_selx
name|cvmx_ciu2_msi_selx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_msired_pp#_ip2  *  * CIU2_MSIRED_PPX_IPx      (Pass 2)  * Contains reduced MSI interrupt numbers for delivery to software.  * Note MSIRED delivery can only be made to PPs, not to IO; thus there are no CIU2_MSIRED_IO registers.  */
end_comment

begin_union
union|union
name|cvmx_ciu2_msired_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_msired_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
comment|/**< Interrupt pending */
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
comment|/**< New interrupt to be delivered.                                                          Internal state, for diagnostic use only.          |   $PR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
comment|/**< MSI number causing this interrupt.                                                          If multiple MSIs are pending to the same PP and IP,                                                          then this contains the numerically lowest MSI number */
else|#
directive|else
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_msired_ppx_ip2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_msired_ppx_ip2_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_msired_ppx_ip2
name|cvmx_ciu2_msired_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_msired_pp#_ip3  */
end_comment

begin_union
union|union
name|cvmx_ciu2_msired_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_msired_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
comment|/**< Interrupt pending */
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
comment|/**< New interrupt to be delivered.                                                          Internal state, for diagnostic use only.          |   $PR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
comment|/**< MSI number causing this interrupt.                                                          If multiple MSIs are pending to the same PP and IP,                                                          then this contains the numerically lowest MSI number */
else|#
directive|else
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_msired_ppx_ip3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_msired_ppx_ip3_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_msired_ppx_ip3
name|cvmx_ciu2_msired_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_msired_pp#_ip4  */
end_comment

begin_union
union|union
name|cvmx_ciu2_msired_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_msired_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
comment|/**< Interrupt pending */
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
comment|/**< New interrupt to be delivered.                                                          Internal state, for diagnostic use only.          |   $PR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
comment|/**< MSI number causing this interrupt.                                                          If multiple MSIs are pending to the same PP and IP,                                                          then this contains the numerically lowest MSI number */
else|#
directive|else
name|uint64_t
name|msi_num
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|newint
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_19
range|:
literal|3
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_63
range|:
literal|43
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_msired_ppx_ip4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_msired_ppx_ip4_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_msired_ppx_ip4
name|cvmx_ciu2_msired_ppx_ip4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          For GPIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_gpio
name|cvmx_ciu2_raw_iox_int_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt                                                          See PEMx_INT_SUM (enabled by PEMx_INT_ENB) */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA software enable                                                          See CIU_PCI_INTA */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit, copy of                                                          CIU2_MSIRED_PPx_IPy.INT, all IO interrupts                                                          CIU2_RAW_IOX_INT_IO[MSIRED] always zero.                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          PCI_INTR[3] = INTD                                                          PCI_INTR[2] = INTC                                                          PCI_INTR[1] = INTB                                                          PCI_INTR[0] = INTA                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          For IO, all 98 RAW readout will be different */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_io
name|cvmx_ciu2_raw_iox_int_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt                                                          See LMC*_INT                                                          For MEM, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_mem
name|cvmx_ciu2_raw_iox_int_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt                                                          See UCTL*_INT_REG */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt                                                          See MIO_TWSx_INT */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts                                                          Set any time the corresponding CIU timer expires */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt                                                          See SSO_IQ_INT */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT*                                                          For MIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_mio
name|cvmx_ciu2_raw_iox_int_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt pulse */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_pkt
name|cvmx_ciu2_raw_iox_int_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_rml
name|cvmx_ciu2_raw_iox_int_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts                                                          For WDOG, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_wdog
name|cvmx_ciu2_raw_iox_int_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_io#_int_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_iox_int_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_iox_int_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO.                                                           For WRKQ, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_iox_int_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_iox_int_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_iox_int_wrkq
name|cvmx_ciu2_raw_iox_int_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          For GPIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_gpio
name|cvmx_ciu2_raw_ppx_ip2_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt                                                          See PEMx_INT_SUM (enabled by PEMx_INT_ENB) */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA software enable                                                          See CIU_PCI_INTA */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit, copy of                                                          CIU2_MSIRED_PPx_IPy.INT, all IO interrupts                                                          CIU2_RAW_IOX_INT_IO[MSIRED] always zero.                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          PCI_INTR[3] = INTD                                                          PCI_INTR[2] = INTC                                                          PCI_INTR[1] = INTB                                                          PCI_INTR[0] = INTA                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          For IO, all 98 RAW readout will be different */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_io
name|cvmx_ciu2_raw_ppx_ip2_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt                                                          See LMC*_INT                                                          For MEM, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_mem
name|cvmx_ciu2_raw_ppx_ip2_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt                                                          See UCTL*_INT_REG */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt                                                          See MIO_TWSx_INT */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts                                                          Set any time the corresponding CIU timer expires */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt                                                          See SSO_IQ_INT */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT*                                                          For MIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_mio
name|cvmx_ciu2_raw_ppx_ip2_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt pulse */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_pkt
name|cvmx_ciu2_raw_ppx_ip2_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_rml
name|cvmx_ciu2_raw_ppx_ip2_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts                                                          For WDOG, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_wdog
name|cvmx_ciu2_raw_ppx_ip2_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip2_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip2_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip2_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO.                                                           For WRKQ, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip2_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip2_wrkq
name|cvmx_ciu2_raw_ppx_ip2_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          For GPIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_gpio
name|cvmx_ciu2_raw_ppx_ip3_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt                                                          See PEMx_INT_SUM (enabled by PEMx_INT_ENB) */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA software enable                                                          See CIU_PCI_INTA */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit, copy of                                                          CIU2_MSIRED_PPx_IPy.INT, all IO interrupts                                                          CIU2_RAW_IOX_INT_IO[MSIRED] always zero.                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          PCI_INTR[3] = INTD                                                          PCI_INTR[2] = INTC                                                          PCI_INTR[1] = INTB                                                          PCI_INTR[0] = INTA                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          For IO, all 98 RAW readout will be different */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_io
name|cvmx_ciu2_raw_ppx_ip3_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt                                                          See LMC*_INT                                                          For MEM, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_mem
name|cvmx_ciu2_raw_ppx_ip3_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt                                                          See UCTL*_INT_REG */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt                                                          See MIO_TWSx_INT */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts                                                          Set any time the corresponding CIU timer expires */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt                                                          See SSO_IQ_INT */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT*                                                          For MIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_mio
name|cvmx_ciu2_raw_ppx_ip3_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt pulse */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_pkt
name|cvmx_ciu2_raw_ppx_ip3_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_rml
name|cvmx_ciu2_raw_ppx_ip3_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts                                                          For WDOG, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_wdog
name|cvmx_ciu2_raw_ppx_ip3_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip3_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip3_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip3_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO.                                                           For WRKQ, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip3_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip3_wrkq
name|cvmx_ciu2_raw_ppx_ip3_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          For GPIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_gpio
name|cvmx_ciu2_raw_ppx_ip4_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt                                                          See PEMx_INT_SUM (enabled by PEMx_INT_ENB) */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA software enable                                                          See CIU_PCI_INTA */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit, copy of                                                          CIU2_MSIRED_PPx_IPy.INT, all IO interrupts                                                          CIU2_RAW_IOX_INT_IO[MSIRED] always zero.                                                          This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          PCI_INTR[3] = INTD                                                          PCI_INTR[2] = INTC                                                          PCI_INTR[1] = INTB                                                          PCI_INTR[0] = INTA                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          For IO, all 98 RAW readout will be different */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_io
name|cvmx_ciu2_raw_ppx_ip4_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt                                                          See LMC*_INT                                                          For MEM, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_mem
name|cvmx_ciu2_raw_ppx_ip4_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt                                                          See UCTL*_INT_REG */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt                                                          See MIO_TWSx_INT */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts                                                          Set any time the corresponding CIU timer expires */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt                                                          See SSO_IQ_INT */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT*                                                          For MIO, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_mio
name|cvmx_ciu2_raw_ppx_ip4_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupt pulse */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts                                                          See MIX*_ISR */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 packet drop interrupt pulse                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX 0-4 interrupt                                                          See GMX*_RX*_INT_REG, GMX*_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX*_INT_REG                                                          For PKT, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_pkt
name|cvmx_ciu2_raw_ppx_ip4_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_INT_ECCERR, TIM_INT0 */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_INT_REG */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt                                                          See SSO_ERR */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM                                                          For RML, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_rml
name|cvmx_ciu2_raw_ppx_ip4_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts                                                          For WDOG, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_wdog
name|cvmx_ciu2_raw_ppx_ip4_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_raw_pp#_ip4_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_raw_ppx_ip4_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_raw_ppx_ip4_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO.                                                           For WRKQ, all 98 RAW readout will be same value */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_raw_ppx_ip4_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_raw_ppx_ip4_wrkq
name|cvmx_ciu2_raw_ppx_ip4_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts source */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_gpio
name|cvmx_ciu2_src_iox_int_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt source                                                          CIU2_RAW_IO[PEM]& CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA source                                                          CIU2_RAW_IO[PCI_INTA]& CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit source                                                          CIU2_RAW_IO[MSIRED]& CIU2_EN_xx_yy_IO[MSIRED]                                                           This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI source                                                          CIU2_RAW_IO[PCI_MSI]& CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt source                                                          CIU2_RAW_IO[PCI_INTR]&CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_io
name|cvmx_ciu2_src_iox_int_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt Source (RAW& ENABLE)                                                          For CIU2_SRC_PPX_IPx_MBOX:                                                          Four mailbox interrupts for entries 0-31                                                          RAW& ENABLE                                                           [3]  is the or of<31:24> of CIU2_MBOX                                                           [2]  is the or of<23:16> of CIU2_MBOX                                                           [1]  is the or of<15:8> of CIU2_MBOX                                                           [0]  is the or of<7:0> of CIU2_MBOX                                                           CIU2_MBOX value can be read out via CSR address                                                           CIU_MBOX_SET/CLR                                                          For CIU2_SRC_IOX_INT_MBOX:                                                            always zero */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_mbox
name|cvmx_ciu2_src_iox_int_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt source                                                          CIU2_RAW_MEM[LMC]& CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_mem
name|cvmx_ciu2_src_iox_int_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt source                                                          CIU2_RAW_MIO[RST]& CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt source                                                          CIU2_RAW_MIO[PTP]& CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt source                                                          CIU2_RAW_MIO[USB_HCI]& CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt source                                                          CIU2_RAW_MIO[USB_UCTL]&CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts source                                                          CIU2_RAW_MIO[UART]& CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt source                                                          CIU2_RAW_MIO[TWSI]& CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt source                                                          CIU2_RAW_MIO[BOOTDMA]& CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt source                                                          CIU2_RAW_MIO[MIO]& CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt source                                                          CIU2_RAW_MIO[NAND]& CIU2_EN_xx_yy_MIO[NANAD] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts source                                                          CIU2_RAW_MIO[TIMER]& CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt source                                                          CIU2_RAW_MIO[IPD_DRP]& CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt source                                                          CIU2_RAW_MIO[SSOIQ]& CIU2_EN_xx_yy_MIO[SSOIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port cnt threshold interrupt source                                                          CIU2_RAW_MIO[IPDPPTHR]&CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_mio
name|cvmx_ciu2_src_iox_int_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupts source                                                          CIU2_RAW_PKT[ILK_DRP]& CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_pkt
name|cvmx_ciu2_src_iox_int_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_rml
name|cvmx_ciu2_src_iox_int_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts source                                                          CIU2_RAW_WDOG& CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_wdog
name|cvmx_ciu2_src_iox_int_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_io#_int_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_iox_int_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_iox_int_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue intr source,                                                          CIU2_RAW_WRKQ& CIU2_EN_xx_yy_WRKQ */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_iox_int_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_iox_int_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_iox_int_wrkq
name|cvmx_ciu2_src_iox_int_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts source */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_gpio
name|cvmx_ciu2_src_ppx_ip2_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt source                                                          CIU2_RAW_IO[PEM]& CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA source                                                          CIU2_RAW_IO[PCI_INTA]& CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit source                                                          CIU2_RAW_IO[MSIRED]& CIU2_EN_xx_yy_IO[MSIRED]                                                           This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI source                                                          CIU2_RAW_IO[PCI_MSI]& CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt source                                                          CIU2_RAW_IO[PCI_INTR]&CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_io
name|cvmx_ciu2_src_ppx_ip2_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt Source (RAW& ENABLE)                                                          For CIU2_SRC_PPX_IPx_MBOX:                                                          Four mailbox interrupts for entries 0-31                                                          RAW& ENABLE                                                           [3]  is the or of<31:24> of CIU2_MBOX                                                           [2]  is the or of<23:16> of CIU2_MBOX                                                           [1]  is the or of<15:8> of CIU2_MBOX                                                           [0]  is the or of<7:0> of CIU2_MBOX                                                           CIU2_MBOX value can be read out via CSR address                                                           CIU_MBOX_SET/CLR                                                          For CIU2_SRC_IOX_INT_MBOX:                                                            always zero */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_mbox
name|cvmx_ciu2_src_ppx_ip2_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt source                                                          CIU2_RAW_MEM[LMC]& CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_mem
name|cvmx_ciu2_src_ppx_ip2_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt source                                                          CIU2_RAW_MIO[RST]& CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt source                                                          CIU2_RAW_MIO[PTP]& CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt source                                                          CIU2_RAW_MIO[USB_HCI]& CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt source                                                          CIU2_RAW_MIO[USB_UCTL]&CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts source                                                          CIU2_RAW_MIO[UART]& CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt source                                                          CIU2_RAW_MIO[TWSI]& CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt source                                                          CIU2_RAW_MIO[BOOTDMA]& CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt source                                                          CIU2_RAW_MIO[MIO]& CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt source                                                          CIU2_RAW_MIO[NAND]& CIU2_EN_xx_yy_MIO[NANAD] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts source                                                          CIU2_RAW_MIO[TIMER]& CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt source                                                          CIU2_RAW_MIO[IPD_DRP]& CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt source                                                          CIU2_RAW_MIO[SSOIQ]& CIU2_EN_xx_yy_MIO[SSOIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port cnt threshold interrupt source                                                          CIU2_RAW_MIO[IPDPPTHR]&CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_mio
name|cvmx_ciu2_src_ppx_ip2_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupts source                                                          CIU2_RAW_PKT[ILK_DRP]& CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_pkt
name|cvmx_ciu2_src_ppx_ip2_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_rml
name|cvmx_ciu2_src_ppx_ip2_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts source                                                          CIU2_RAW_WDOG& CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_wdog
name|cvmx_ciu2_src_ppx_ip2_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip2_wrkq  *  * All SRC values is generated by AND Raw value (CIU2_RAW_XXX) with CIU2_EN_PPX_IPx_XXX  *  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip2_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip2_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue intr source,                                                          CIU2_RAW_WRKQ& CIU2_EN_xx_yy_WRKQ */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip2_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip2_wrkq
name|cvmx_ciu2_src_ppx_ip2_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts source */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_gpio
name|cvmx_ciu2_src_ppx_ip3_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt source                                                          CIU2_RAW_IO[PEM]& CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA source                                                          CIU2_RAW_IO[PCI_INTA]& CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit source                                                          CIU2_RAW_IO[MSIRED]& CIU2_EN_xx_yy_IO[MSIRED]                                                           This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI source                                                          CIU2_RAW_IO[PCI_MSI]& CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt source                                                          CIU2_RAW_IO[PCI_INTR]&CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_io
name|cvmx_ciu2_src_ppx_ip3_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt Source (RAW& ENABLE)                                                          For CIU2_SRC_PPX_IPx_MBOX:                                                          Four mailbox interrupts for entries 0-31                                                          RAW& ENABLE                                                           [3]  is the or of<31:24> of CIU2_MBOX                                                           [2]  is the or of<23:16> of CIU2_MBOX                                                           [1]  is the or of<15:8> of CIU2_MBOX                                                           [0]  is the or of<7:0> of CIU2_MBOX                                                           CIU2_MBOX value can be read out via CSR address                                                           CIU_MBOX_SET/CLR                                                          For CIU2_SRC_IOX_INT_MBOX:                                                            always zero */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_mbox
name|cvmx_ciu2_src_ppx_ip3_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt source                                                          CIU2_RAW_MEM[LMC]& CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_mem
name|cvmx_ciu2_src_ppx_ip3_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt source                                                          CIU2_RAW_MIO[RST]& CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt source                                                          CIU2_RAW_MIO[PTP]& CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt source                                                          CIU2_RAW_MIO[USB_HCI]& CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt source                                                          CIU2_RAW_MIO[USB_UCTL]&CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts source                                                          CIU2_RAW_MIO[UART]& CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt source                                                          CIU2_RAW_MIO[TWSI]& CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt source                                                          CIU2_RAW_MIO[BOOTDMA]& CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt source                                                          CIU2_RAW_MIO[MIO]& CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt source                                                          CIU2_RAW_MIO[NAND]& CIU2_EN_xx_yy_MIO[NANAD] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts source                                                          CIU2_RAW_MIO[TIMER]& CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt source                                                          CIU2_RAW_MIO[IPD_DRP]& CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt source                                                          CIU2_RAW_MIO[SSOIQ]& CIU2_EN_xx_yy_MIO[SSOIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port cnt threshold interrupt source                                                          CIU2_RAW_MIO[IPDPPTHR]&CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_mio
name|cvmx_ciu2_src_ppx_ip3_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupts source                                                          CIU2_RAW_PKT[ILK_DRP]& CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_pkt
name|cvmx_ciu2_src_ppx_ip3_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_rml
name|cvmx_ciu2_src_ppx_ip3_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts source                                                          CIU2_RAW_WDOG& CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_wdog
name|cvmx_ciu2_src_ppx_ip3_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip3_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip3_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip3_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue intr source,                                                          CIU2_RAW_WRKQ& CIU2_EN_xx_yy_WRKQ */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip3_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip3_wrkq
name|cvmx_ciu2_src_ppx_ip3_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_gpio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_gpio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_gpio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts source */
else|#
directive|else
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_gpio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_gpio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_gpio
name|cvmx_ciu2_src_ppx_ip4_gpio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_io  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_io
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_io_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
comment|/**< PEMx interrupt source                                                          CIU2_RAW_IO[PEM]& CIU2_EN_xx_yy_IO[PEM] */
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
comment|/**< PCI_INTA source                                                          CIU2_RAW_IO[PCI_INTA]& CIU2_EN_xx_yy_IO[PCI_INTA] */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
comment|/**< MSI summary bit source                                                          CIU2_RAW_IO[MSIRED]& CIU2_EN_xx_yy_IO[MSIRED]                                                           This bit may not be functional in pass 1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI source                                                          CIU2_RAW_IO[PCI_MSI]& CIU2_EN_xx_yy_IO[PCI_MSI] */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D interrupt source                                                          CIU2_RAW_IO[PCI_INTR]&CIU2_EN_xx_yy_IO[PCI_INTR] */
else|#
directive|else
name|uint64_t
name|pci_intr
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|msired
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pci_inta
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_18_31
range|:
literal|14
decl_stmt|;
name|uint64_t
name|pem
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_63
range|:
literal|30
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_io_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_io_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_io
name|cvmx_ciu2_src_ppx_ip4_io_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_mbox  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_mbox
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_mbox_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< Mailbox interrupt Source (RAW& ENABLE)                                                          For CIU2_SRC_PPX_IPx_MBOX:                                                          Four mailbox interrupts for entries 0-31                                                          RAW& ENABLE                                                           [3]  is the or of<31:24> of CIU2_MBOX                                                           [2]  is the or of<23:16> of CIU2_MBOX                                                           [1]  is the or of<15:8> of CIU2_MBOX                                                           [0]  is the or of<7:0> of CIU2_MBOX                                                           CIU2_MBOX value can be read out via CSR address                                                           CIU_MBOX_SET/CLR                                                          For CIU2_SRC_IOX_INT_MBOX:                                                            always zero */
else|#
directive|else
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mbox_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mbox_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_mbox
name|cvmx_ciu2_src_ppx_ip4_mbox_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_mem  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_mem
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_mem_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
comment|/**< LMC* interrupt source                                                          CIU2_RAW_MEM[LMC]& CIU2_EN_xx_yy_MEM[LMC] */
else|#
directive|else
name|uint64_t
name|lmc
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mem_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mem_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_mem
name|cvmx_ciu2_src_ppx_ip4_mem_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_mio  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_mio
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_mio_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt source                                                          CIU2_RAW_MIO[RST]& CIU2_EN_xx_yy_MIO[RST] */
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt source                                                          CIU2_RAW_MIO[PTP]& CIU2_EN_xx_yy_MIO[PTP] */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
comment|/**< USB HCI Interrupt source                                                          CIU2_RAW_MIO[USB_HCI]& CIU2_EN_xx_yy_MIO[USB_HCI] */
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL* interrupt source                                                          CIU2_RAW_MIO[USB_UCTL]&CIU2_EN_xx_yy_MIO[USB_UCTL] */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts source                                                          CIU2_RAW_MIO[UART]& CIU2_EN_xx_yy_MIO[UART] */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
comment|/**< TWSI x Interrupt source                                                          CIU2_RAW_MIO[TWSI]& CIU2_EN_xx_yy_MIO[TWSI] */
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt source                                                          CIU2_RAW_MIO[BOOTDMA]& CIU2_EN_xx_yy_MIO[BOOTDMA] */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt source                                                          CIU2_RAW_MIO[MIO]& CIU2_EN_xx_yy_MIO[MIO] */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt source                                                          CIU2_RAW_MIO[NAND]& CIU2_EN_xx_yy_MIO[NANAD] */
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts source                                                          CIU2_RAW_MIO[TIMER]& CIU2_EN_xx_yy_MIO[TIMER] */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt source                                                          CIU2_RAW_MIO[IPD_DRP]& CIU2_EN_xx_yy_MIO[IPD_DRP] */
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
comment|/**< SSO IQ interrupt source                                                          CIU2_RAW_MIO[SSOIQ]& CIU2_EN_xx_yy_MIO[SSOIQ] */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port cnt threshold interrupt source                                                          CIU2_RAW_MIO[IPDPPTHR]&CIU2_EN_xx_yy_MIO[IPDPPTHR] */
else|#
directive|else
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ssoiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_12_15
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_31
range|:
literal|13
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb_uctl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_43
range|:
literal|3
decl_stmt|;
name|uint64_t
name|usb_hci
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_62
range|:
literal|14
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mio_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_mio_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_mio
name|cvmx_ciu2_src_ppx_ip4_mio_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_pkt  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_pkt
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_pkt_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
comment|/**< ILK Packet Drop interrupts source                                                          CIU2_RAW_PKT[ILK_DRP]& CIU2_EN_xx_yy_PKT[ILK_DRP] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ilk_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_54_63
range|:
literal|10
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_pkt_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_pkt_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
comment|/**< ILK interface interrupts source                                                          CIU2_RAW_PKT[ILK]& CIU2_EN_xx_yy_PKT[ILK] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface x Interrupts source                                                          CIU2_RAW_PKT[MII]& CIU2_EN_xx_yy_PKT[MII] */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt source                                                          CIU2_RAW_PKT[AGL]& CIU2_EN_xx_yy_PKT[AGL] */
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
comment|/**< GMX packet drop interrupt, RAW& ENABLE                                                          CIU2_RAW_PKT[GMX_DRP]& CIU2_EN_xx_yy_PKT[GMX_DRP] */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
comment|/**< GMX interrupt source                                                          CIU2_RAW_PKT[AGX]& CIU2_EN_xx_yy_PKT[AGX] */
else|#
directive|else
name|uint64_t
name|agx
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_31
range|:
literal|19
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|ilk
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_63
range|:
literal|15
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_pkt
name|cvmx_ciu2_src_ppx_ip4_pkt_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_rml  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_rml
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_rml_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          See DPI DMA instruction completion */
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_35
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_rml_s
name|cn68xx
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_rml_cn68xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
comment|/**< Trace buffer interrupt source                                                          CIU2_RAW_RML[TRACE]& CIU2_EN_xx_yy_RML[TRACE] */
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt source                                                          CIU2_RAW_RML[L2C]& CIU2_EN_xx_yy_RML[L2C] */
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt source                                                          CIU2_RAW_RML[DFA]& CIU2_EN_xx_yy_RML[DFA] */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt source                                                          CIU2_RAW_RML[DPI]& CIU2_EN_xx_yy_RML[DPI] */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt source                                                          CIU2_RAW_RML[SLI]& CIU2_EN_xx_yy_RML[SLI] */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt source                                                          CIU2_RAW_RML[KEY]& CIU2_EN_xx_yy_RML[KEY] */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt source                                                          CIU2_RAW_RML[RAD]& CIU2_EN_xx_yy_RML[RAD] */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt source                                                          CIU2_RAW_RML[TIM]& CIU2_EN_xx_yy_RML[TIM] */
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt source                                                          CIU2_RAW_RML[ZIP]& CIU2_EN_xx_yy_RML[ZIP] */
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
comment|/**< SSO err interrupt source                                                          CIU2_RAW_RML[SSO]& CIU2_EN_xx_yy_RML[SSO] */
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt source                                                          CIU2_RAW_RML[PKO]& CIU2_EN_xx_yy_RML[PKO] */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt source                                                          CIU2_RAW_RML[PIP]& CIU2_EN_xx_yy_RML[PIP] */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt source                                                          CIU2_RAW_RML[IPD]& CIU2_EN_xx_yy_RML[IPD] */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt source                                                          CIU2_RAW_RML[FPA]& CIU2_EN_xx_yy_RML[FPA] */
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt source                                                          CIU2_RAW_RML[IOB]& CIU2_EN_xx_yy_RML[IOB] */
else|#
directive|else
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_3
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_15
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sso
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_23
range|:
literal|7
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_25_27
range|:
literal|3
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_47
range|:
literal|7
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_51
range|:
literal|3
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xxp1
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_rml
name|cvmx_ciu2_src_ppx_ip4_rml_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_wdog  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_wdog
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_wdog_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
comment|/**< 32 watchdog interrupts source                                                          CIU2_RAW_WDOG& CIU2_EN_xx_yy_WDOG */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_wdog_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_wdog_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_wdog
name|cvmx_ciu2_src_ppx_ip4_wdog_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_src_pp#_ip4_wrkq  */
end_comment

begin_union
union|union
name|cvmx_ciu2_src_ppx_ip4_wrkq
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_src_ppx_ip4_wrkq_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
comment|/**< 64 work queue intr source,                                                          CIU2_RAW_WRKQ& CIU2_EN_xx_yy_WRKQ */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_wrkq_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_src_ppx_ip4_wrkq_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_src_ppx_ip4_wrkq
name|cvmx_ciu2_src_ppx_ip4_wrkq_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_sum_io#_int  */
end_comment

begin_union
union|union
name|cvmx_ciu2_sum_iox_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_sum_iox_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< MBOX interrupt summary                                                          Direct connect to CIU2_SRC_*_MBOX[MBOX]                                                          See CIU_MBOX_SET/CLR / CIU2_SRC_*_MBOX */
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
comment|/**< GPIO interrupt summary,                                                          Report ORed result of CIU2_SRC_*_GPIO[63:0]                                                          See CIU2_RAW_GPIO / CIU2_SRC_*_GPIO */
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
comment|/**< Packet I/O interrupt summary                                                          Report ORed result of CIU2_SRC_*_PKT[63:0]                                                          See CIU2_RAW_PKT / CIU2_SRC_*_PKT */
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
comment|/**< MEM  interrupt Summary                                                          Report ORed result of CIU2_SRC_*_MEM[63:0]                                                          See CIU2_RAW_MEM / CIU2_SRC_*_MEM */
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
comment|/**< I/O  interrupt summary                                                          Report ORed result of CIU2_SRC_*_IO[63:0]                                                          See CIU2_RAW_IO / CIU2_SRC_*_IO */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO  interrupt summary                                                          Report ORed result of CIU2_SRC_*_MIO[63:0]                                                          See CIU2_RAW_MIO / CIU2_SRC_*_MIO */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          Report ORed result of CIU2_SRC_*_RML[63:0]                                                          See CIU2_RAW_RML / CIU2_SRC_*_RML */
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< WDOG summary bit                                                          Report ORed result of CIU2_SRC_*_WDOG[63:0]                                                          See CIU2_RAW_WDOG / CIU2_SRC_*_WDOG                                                           This read-only bit reads as a one whenever                                                           CIU2_RAW_WDOG bit is set and corresponding                                                           enable bit in CIU2_EN_PPx_IPy_WDOG or                                                           CIU2_EN_IOx_INT_WDOG is set, where x and y are                                                           the same x and y in the CIU2_SUM_PPx_IPy or                                                           CIU2_SUM_IOx_INT registers.                                                           Alternatively, the CIU2_SRC_PPx_IPy_WDOG and                                                           CIU2_SRC_IOx_INT_WDOG registers can be used. */
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          Report ORed result of CIU2_SRC_*_WRKQ[63:0]                                                          See CIU2_RAW_WRKQ / CIU2_SRC_*_WRKQ                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_sum_iox_int_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_sum_iox_int_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_sum_iox_int
name|cvmx_ciu2_sum_iox_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_sum_pp#_ip2  */
end_comment

begin_union
union|union
name|cvmx_ciu2_sum_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_sum_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< MBOX interrupt summary                                                          Direct connect to CIU2_SRC_*_MBOX[MBOX]                                                          See CIU_MBOX_SET/CLR / CIU2_SRC_*_MBOX */
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
comment|/**< GPIO interrupt summary,                                                          Report ORed result of CIU2_SRC_*_GPIO[63:0]                                                          See CIU2_RAW_GPIO / CIU2_SRC_*_GPIO */
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
comment|/**< Packet I/O interrupt summary                                                          Report ORed result of CIU2_SRC_*_PKT[63:0]                                                          See CIU2_RAW_PKT / CIU2_SRC_*_PKT */
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
comment|/**< MEM  interrupt Summary                                                          Report ORed result of CIU2_SRC_*_MEM[63:0]                                                          See CIU2_RAW_MEM / CIU2_SRC_*_MEM */
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
comment|/**< I/O  interrupt summary                                                          Report ORed result of CIU2_SRC_*_IO[63:0]                                                          See CIU2_RAW_IO / CIU2_SRC_*_IO */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO  interrupt summary                                                          Report ORed result of CIU2_SRC_*_MIO[63:0]                                                          See CIU2_RAW_MIO / CIU2_SRC_*_MIO */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          Report ORed result of CIU2_SRC_*_RML[63:0]                                                          See CIU2_RAW_RML / CIU2_SRC_*_RML */
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< WDOG summary bit                                                          Report ORed result of CIU2_SRC_*_WDOG[63:0]                                                          See CIU2_RAW_WDOG / CIU2_SRC_*_WDOG                                                           This read-only bit reads as a one whenever                                                           CIU2_RAW_WDOG bit is set and corresponding                                                           enable bit in CIU2_EN_PPx_IPy_WDOG or                                                           CIU2_EN_IOx_INT_WDOG is set, where x and y are                                                           the same x and y in the CIU2_SUM_PPx_IPy or                                                           CIU2_SUM_IOx_INT registers.                                                           Alternatively, the CIU2_SRC_PPx_IPy_WDOG and                                                           CIU2_SRC_IOx_INT_WDOG registers can be used. */
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          Report ORed result of CIU2_SRC_*_WRKQ[63:0]                                                          See CIU2_RAW_WRKQ / CIU2_SRC_*_WRKQ                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_sum_ppx_ip2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_sum_ppx_ip2_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_sum_ppx_ip2
name|cvmx_ciu2_sum_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_sum_pp#_ip3  */
end_comment

begin_union
union|union
name|cvmx_ciu2_sum_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_sum_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< MBOX interrupt summary                                                          Direct connect to CIU2_SRC_*_MBOX[MBOX]                                                          See CIU_MBOX_SET/CLR / CIU2_SRC_*_MBOX */
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
comment|/**< GPIO interrupt summary,                                                          Report ORed result of CIU2_SRC_*_GPIO[63:0]                                                          See CIU2_RAW_GPIO / CIU2_SRC_*_GPIO */
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
comment|/**< Packet I/O interrupt summary                                                          Report ORed result of CIU2_SRC_*_PKT[63:0]                                                          See CIU2_RAW_PKT / CIU2_SRC_*_PKT */
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
comment|/**< MEM  interrupt Summary                                                          Report ORed result of CIU2_SRC_*_MEM[63:0]                                                          See CIU2_RAW_MEM / CIU2_SRC_*_MEM */
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
comment|/**< I/O  interrupt summary                                                          Report ORed result of CIU2_SRC_*_IO[63:0]                                                          See CIU2_RAW_IO / CIU2_SRC_*_IO */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO  interrupt summary                                                          Report ORed result of CIU2_SRC_*_MIO[63:0]                                                          See CIU2_RAW_MIO / CIU2_SRC_*_MIO */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          Report ORed result of CIU2_SRC_*_RML[63:0]                                                          See CIU2_RAW_RML / CIU2_SRC_*_RML */
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< WDOG summary bit                                                          Report ORed result of CIU2_SRC_*_WDOG[63:0]                                                          See CIU2_RAW_WDOG / CIU2_SRC_*_WDOG                                                           This read-only bit reads as a one whenever                                                           CIU2_RAW_WDOG bit is set and corresponding                                                           enable bit in CIU2_EN_PPx_IPy_WDOG or                                                           CIU2_EN_IOx_INT_WDOG is set, where x and y are                                                           the same x and y in the CIU2_SUM_PPx_IPy or                                                           CIU2_SUM_IOx_INT registers.                                                           Alternatively, the CIU2_SRC_PPx_IPy_WDOG and                                                           CIU2_SRC_IOx_INT_WDOG registers can be used. */
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          Report ORed result of CIU2_SRC_*_WRKQ[63:0]                                                          See CIU2_RAW_WRKQ / CIU2_SRC_*_WRKQ                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_sum_ppx_ip3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_sum_ppx_ip3_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_sum_ppx_ip3
name|cvmx_ciu2_sum_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu2_sum_pp#_ip4  */
end_comment

begin_union
union|union
name|cvmx_ciu2_sum_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu2_sum_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
comment|/**< MBOX interrupt summary                                                          Direct connect to CIU2_SRC_*_MBOX[MBOX]                                                          See CIU_MBOX_SET/CLR / CIU2_SRC_*_MBOX */
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
comment|/**< GPIO interrupt summary,                                                          Report ORed result of CIU2_SRC_*_GPIO[63:0]                                                          See CIU2_RAW_GPIO / CIU2_SRC_*_GPIO */
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
comment|/**< Packet I/O interrupt summary                                                          Report ORed result of CIU2_SRC_*_PKT[63:0]                                                          See CIU2_RAW_PKT / CIU2_SRC_*_PKT */
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
comment|/**< MEM  interrupt Summary                                                          Report ORed result of CIU2_SRC_*_MEM[63:0]                                                          See CIU2_RAW_MEM / CIU2_SRC_*_MEM */
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
comment|/**< I/O  interrupt summary                                                          Report ORed result of CIU2_SRC_*_IO[63:0]                                                          See CIU2_RAW_IO / CIU2_SRC_*_IO */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO  interrupt summary                                                          Report ORed result of CIU2_SRC_*_MIO[63:0]                                                          See CIU2_RAW_MIO / CIU2_SRC_*_MIO */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          Report ORed result of CIU2_SRC_*_RML[63:0]                                                          See CIU2_RAW_RML / CIU2_SRC_*_RML */
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< WDOG summary bit                                                          Report ORed result of CIU2_SRC_*_WDOG[63:0]                                                          See CIU2_RAW_WDOG / CIU2_SRC_*_WDOG                                                           This read-only bit reads as a one whenever                                                           CIU2_RAW_WDOG bit is set and corresponding                                                           enable bit in CIU2_EN_PPx_IPy_WDOG or                                                           CIU2_EN_IOx_INT_WDOG is set, where x and y are                                                           the same x and y in the CIU2_SUM_PPx_IPy or                                                           CIU2_SUM_IOx_INT registers.                                                           Alternatively, the CIU2_SRC_PPx_IPy_WDOG and                                                           CIU2_SRC_IOx_INT_WDOG registers can be used. */
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
comment|/**< 64 work queue interrupts                                                          Report ORed result of CIU2_SRC_*_WRKQ[63:0]                                                          See CIU2_RAW_WRKQ / CIU2_SRC_*_WRKQ                                                          See SSO_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the SSO. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|io
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mem
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pkt
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_59
range|:
literal|52
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu2_sum_ppx_ip4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu2_sum_ppx_ip4_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu2_sum_ppx_ip4
name|cvmx_ciu2_sum_ppx_ip4_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

