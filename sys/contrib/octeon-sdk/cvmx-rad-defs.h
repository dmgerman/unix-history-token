begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-rad-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon rad.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_RAD_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_RAD_DEFS_H__
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG0
value|CVMX_RAD_MEM_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG0
value|(CVMX_ADD_IO_SEG(0x0001180070001000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG1
value|CVMX_RAD_MEM_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG1
value|(CVMX_ADD_IO_SEG(0x0001180070001008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG2
value|CVMX_RAD_MEM_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_MEM_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_MEM_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070001010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_MEM_DEBUG2
value|(CVMX_ADD_IO_SEG(0x0001180070001010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_BIST_RESULT
value|CVMX_RAD_REG_BIST_RESULT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_BIST_RESULT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_BIST_RESULT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000080ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_BIST_RESULT
value|(CVMX_ADD_IO_SEG(0x0001180070000080ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CMD_BUF
value|CVMX_RAD_REG_CMD_BUF_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_CMD_BUF_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_CMD_BUF not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000008ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CMD_BUF
value|(CVMX_ADD_IO_SEG(0x0001180070000008ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CTL
value|CVMX_RAD_REG_CTL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_CTL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_CTL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000000ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_CTL
value|(CVMX_ADD_IO_SEG(0x0001180070000000ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG0
value|CVMX_RAD_REG_DEBUG0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000100ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG0
value|(CVMX_ADD_IO_SEG(0x0001180070000100ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG1
value|CVMX_RAD_REG_DEBUG1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000108ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG1
value|(CVMX_ADD_IO_SEG(0x0001180070000108ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG10
value|CVMX_RAD_REG_DEBUG10_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG10_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG10 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000150ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG10
value|(CVMX_ADD_IO_SEG(0x0001180070000150ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG11
value|CVMX_RAD_REG_DEBUG11_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG11_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG11 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000158ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG11
value|(CVMX_ADD_IO_SEG(0x0001180070000158ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG12
value|CVMX_RAD_REG_DEBUG12_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG12_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG12 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000160ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG12
value|(CVMX_ADD_IO_SEG(0x0001180070000160ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG2
value|CVMX_RAD_REG_DEBUG2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000110ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG2
value|(CVMX_ADD_IO_SEG(0x0001180070000110ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG3
value|CVMX_RAD_REG_DEBUG3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000118ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG3
value|(CVMX_ADD_IO_SEG(0x0001180070000118ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG4
value|CVMX_RAD_REG_DEBUG4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG4 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000120ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG4
value|(CVMX_ADD_IO_SEG(0x0001180070000120ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG5
value|CVMX_RAD_REG_DEBUG5_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG5_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG5 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000128ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG5
value|(CVMX_ADD_IO_SEG(0x0001180070000128ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG6
value|CVMX_RAD_REG_DEBUG6_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG6_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG6 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000130ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG6
value|(CVMX_ADD_IO_SEG(0x0001180070000130ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG7
value|CVMX_RAD_REG_DEBUG7_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG7_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG7 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000138ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG7
value|(CVMX_ADD_IO_SEG(0x0001180070000138ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG8
value|CVMX_RAD_REG_DEBUG8_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG8_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG8 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000140ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG8
value|(CVMX_ADD_IO_SEG(0x0001180070000140ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG9
value|CVMX_RAD_REG_DEBUG9_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_DEBUG9_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_DEBUG9 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000148ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_DEBUG9
value|(CVMX_ADD_IO_SEG(0x0001180070000148ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_ERROR
value|CVMX_RAD_REG_ERROR_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_ERROR_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_ERROR not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000088ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_ERROR
value|(CVMX_ADD_IO_SEG(0x0001180070000088ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_INT_MASK
value|CVMX_RAD_REG_INT_MASK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_INT_MASK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_INT_MASK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000090ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_INT_MASK
value|(CVMX_ADD_IO_SEG(0x0001180070000090ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_POLYNOMIAL
value|CVMX_RAD_REG_POLYNOMIAL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_POLYNOMIAL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_POLYNOMIAL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000010ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_POLYNOMIAL
value|(CVMX_ADD_IO_SEG(0x0001180070000010ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_RAD_REG_READ_IDX
value|CVMX_RAD_REG_READ_IDX_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_RAD_REG_READ_IDX_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_RAD_REG_READ_IDX not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001180070000018ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_RAD_REG_READ_IDX
value|(CVMX_ADD_IO_SEG(0x0001180070000018ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**  * cvmx_rad_mem_debug0  *  * Notes:  * This CSR is a memory of 32 entries, and thus, the RAD_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_rad_mem_debug0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_mem_debug0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|iword
range|:
literal|64
decl_stmt|;
comment|/**< IWord */
else|#
directive|else
name|uint64_t
name|iword
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_mem_debug0
name|cvmx_rad_mem_debug0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_mem_debug1  *  * Notes:  * This CSR is a memory of 256 entries, and thus, the RAD_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_rad_mem_debug1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_mem_debug1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|p_dat
range|:
literal|64
decl_stmt|;
comment|/**< P data */
else|#
directive|else
name|uint64_t
name|p_dat
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_mem_debug1
name|cvmx_rad_mem_debug1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_mem_debug2  *  * Notes:  * This CSR is a memory of 256 entries, and thus, the RAD_REG_READ_IDX CSR must be written before any  * CSR read operations to this address can be performed.  A read of any entry that has not been  * previously written is illegal and will result in unpredictable CSR read data.  */
end_comment

begin_union
union|union
name|cvmx_rad_mem_debug2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_mem_debug2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|q_dat
range|:
literal|64
decl_stmt|;
comment|/**< Q data */
else|#
directive|else
name|uint64_t
name|q_dat
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_mem_debug2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_mem_debug2
name|cvmx_rad_mem_debug2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_bist_result  *  * Notes:  * Access to the internal BiST results  * Each bit is the BiST result of an individual memory (per bit, 0=pass and 1=fail).  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_bist_result
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_bist_result_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|sta
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the STA     memories */
name|uint64_t
name|ncb_oub
range|:
literal|1
decl_stmt|;
comment|/**< BiST result of the NCB_OUB memories */
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of the NCB_INB memories */
name|uint64_t
name|dat
range|:
literal|2
decl_stmt|;
comment|/**< BiST result of the DAT     memories */
else|#
directive|else
name|uint64_t
name|dat
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_inb
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ncb_oub
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sta
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_bist_result_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_bist_result
name|cvmx_rad_reg_bist_result_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_cmd_buf  *  * Notes:  * Sets the command buffer parameters  * The size of the command buffer segments is measured in uint64s.  The pool specifies 1 of 8 free  * lists to be used when freeing command buffer segments.  The PTR field is overwritten with the next  * pointer each time that the command buffer segment is exhausted.  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_cmd_buf
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_cmd_buf_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
comment|/**< Number of DontWriteBacks */
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
comment|/**< Free list used to free command buffer segments */
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
comment|/**< Number of uint64s per command buffer segment */
name|uint64_t
name|ptr
range|:
literal|33
decl_stmt|;
comment|/**< Initial command buffer pointer[39:7] (128B-aligned) */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|33
decl_stmt|;
name|uint64_t
name|size
range|:
literal|13
decl_stmt|;
name|uint64_t
name|pool
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dwb
range|:
literal|9
decl_stmt|;
name|uint64_t
name|reserved_58_63
range|:
literal|6
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_cmd_buf_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_cmd_buf
name|cvmx_rad_reg_cmd_buf_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_ctl  *  * Notes:  * MAX_READ is a throttle to control NCB usage.  Values>8 are illegal.  *  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_ctl
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_ctl_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|max_read
range|:
literal|4
decl_stmt|;
comment|/**< Maximum number of outstanding data read commands */
name|uint64_t
name|store_le
range|:
literal|1
decl_stmt|;
comment|/**< Force STORE0 byte write address to little endian */
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
comment|/**< Reset oneshot pulse (lasts for 4 cycles) */
else|#
directive|else
name|uint64_t
name|reset
range|:
literal|1
decl_stmt|;
name|uint64_t
name|store_le
range|:
literal|1
decl_stmt|;
name|uint64_t
name|max_read
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_ctl_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_ctl
name|cvmx_rad_reg_ctl_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug0  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_57_63
range|:
literal|7
decl_stmt|;
name|uint64_t
name|loop
range|:
literal|25
decl_stmt|;
comment|/**< Loop offset */
name|uint64_t
name|reserved_22_31
range|:
literal|10
decl_stmt|;
name|uint64_t
name|iridx
range|:
literal|6
decl_stmt|;
comment|/**< IWords read index */
name|uint64_t
name|reserved_14_15
range|:
literal|2
decl_stmt|;
name|uint64_t
name|iwidx
range|:
literal|6
decl_stmt|;
comment|/**< IWords write index */
name|uint64_t
name|owordqv
range|:
literal|1
decl_stmt|;
comment|/**< Valid for OWORDQ */
name|uint64_t
name|owordpv
range|:
literal|1
decl_stmt|;
comment|/**< Valid for OWORDP */
name|uint64_t
name|commit
range|:
literal|1
decl_stmt|;
comment|/**< Waiting for write commit */
name|uint64_t
name|state
range|:
literal|5
decl_stmt|;
comment|/**< Main state */
else|#
directive|else
name|uint64_t
name|state
range|:
literal|5
decl_stmt|;
name|uint64_t
name|commit
range|:
literal|1
decl_stmt|;
name|uint64_t
name|owordpv
range|:
literal|1
decl_stmt|;
name|uint64_t
name|owordqv
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iwidx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_14_15
range|:
literal|2
decl_stmt|;
name|uint64_t
name|iridx
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_22_31
range|:
literal|10
decl_stmt|;
name|uint64_t
name|loop
range|:
literal|25
decl_stmt|;
name|uint64_t
name|reserved_57_63
range|:
literal|7
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug0
name|cvmx_rad_reg_debug0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug1  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|cword
range|:
literal|64
decl_stmt|;
comment|/**< CWord */
else|#
directive|else
name|uint64_t
name|cword
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug1
name|cvmx_rad_reg_debug1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug10  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug10
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug10_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|flags
range|:
literal|8
decl_stmt|;
comment|/**< OCTL flags */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< OCTL size (bytes) */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< OCTL pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|flags
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug10_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug10
name|cvmx_rad_reg_debug10_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug11  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug11
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug11_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
name|uint64_t
name|q
range|:
literal|1
decl_stmt|;
comment|/**< OCTL q flag */
name|uint64_t
name|p
range|:
literal|1
decl_stmt|;
comment|/**< OCTL p flag */
name|uint64_t
name|wc
range|:
literal|1
decl_stmt|;
comment|/**< OCTL write commit flag */
name|uint64_t
name|eod
range|:
literal|1
decl_stmt|;
comment|/**< OCTL eod flag */
name|uint64_t
name|sod
range|:
literal|1
decl_stmt|;
comment|/**< OCTL sod flag */
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
comment|/**< OCTL index */
else|#
directive|else
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
name|uint64_t
name|sod
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eod
range|:
literal|1
decl_stmt|;
name|uint64_t
name|wc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_13_63
range|:
literal|51
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug11_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug11
name|cvmx_rad_reg_debug11_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug12  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug12
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug12_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|asserts
range|:
literal|15
decl_stmt|;
comment|/**< Various assertion checks */
else|#
directive|else
name|uint64_t
name|asserts
range|:
literal|15
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug12_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug12
name|cvmx_rad_reg_debug12_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug2  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|owordp
range|:
literal|64
decl_stmt|;
comment|/**< OWordP */
else|#
directive|else
name|uint64_t
name|owordp
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug2
name|cvmx_rad_reg_debug2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug3  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|owordq
range|:
literal|64
decl_stmt|;
comment|/**< OWordQ */
else|#
directive|else
name|uint64_t
name|owordq
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug3
name|cvmx_rad_reg_debug3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug4  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rword
range|:
literal|64
decl_stmt|;
comment|/**< RWord */
else|#
directive|else
name|uint64_t
name|rword
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug4_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug4
name|cvmx_rad_reg_debug4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug5  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug5
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug5_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_53_63
range|:
literal|11
decl_stmt|;
name|uint64_t
name|niropc7
range|:
literal|3
decl_stmt|;
comment|/**< NCBI ropc (stage7 grant) */
name|uint64_t
name|nirque7
range|:
literal|2
decl_stmt|;
comment|/**< NCBI rque (stage7 grant) */
name|uint64_t
name|nirval7
range|:
literal|5
decl_stmt|;
comment|/**< NCBI rval (stage7 grant) */
name|uint64_t
name|niropc6
range|:
literal|3
decl_stmt|;
comment|/**< NCBI ropc (stage6 arb) */
name|uint64_t
name|nirque6
range|:
literal|2
decl_stmt|;
comment|/**< NCBI rque (stage6 arb) */
name|uint64_t
name|nirarb6
range|:
literal|1
decl_stmt|;
comment|/**< NCBI rarb (stage6 arb) */
name|uint64_t
name|nirval6
range|:
literal|5
decl_stmt|;
comment|/**< NCBI rval (stage6 arb) */
name|uint64_t
name|niridx1
range|:
literal|4
decl_stmt|;
comment|/**< NCBI ridx1 */
name|uint64_t
name|niwidx1
range|:
literal|4
decl_stmt|;
comment|/**< NCBI widx1 */
name|uint64_t
name|niridx0
range|:
literal|4
decl_stmt|;
comment|/**< NCBI ridx0 */
name|uint64_t
name|niwidx0
range|:
literal|4
decl_stmt|;
comment|/**< NCBI widx0 */
name|uint64_t
name|wccreds
range|:
literal|2
decl_stmt|;
comment|/**< WC credits */
name|uint64_t
name|fpacreds
range|:
literal|2
decl_stmt|;
comment|/**< POW credits */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|powcreds
range|:
literal|2
decl_stmt|;
comment|/**< POW credits */
name|uint64_t
name|n1creds
range|:
literal|4
decl_stmt|;
comment|/**< NCBI1 credits */
name|uint64_t
name|n0creds
range|:
literal|4
decl_stmt|;
comment|/**< NCBI0 credits */
else|#
directive|else
name|uint64_t
name|n0creds
range|:
literal|4
decl_stmt|;
name|uint64_t
name|n1creds
range|:
literal|4
decl_stmt|;
name|uint64_t
name|powcreds
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|fpacreds
range|:
literal|2
decl_stmt|;
name|uint64_t
name|wccreds
range|:
literal|2
decl_stmt|;
name|uint64_t
name|niwidx0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|niridx0
range|:
literal|4
decl_stmt|;
name|uint64_t
name|niwidx1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|niridx1
range|:
literal|4
decl_stmt|;
name|uint64_t
name|nirval6
range|:
literal|5
decl_stmt|;
name|uint64_t
name|nirarb6
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nirque6
range|:
literal|2
decl_stmt|;
name|uint64_t
name|niropc6
range|:
literal|3
decl_stmt|;
name|uint64_t
name|nirval7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|nirque7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|niropc7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_53_63
range|:
literal|11
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug5_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug5
name|cvmx_rad_reg_debug5_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug6  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug6
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug6_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|cnt
range|:
literal|8
decl_stmt|;
comment|/**< CCTL count[7:0] (bytes) */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< CCTL size (bytes) */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< CCTL pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|cnt
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug6_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug6
name|cvmx_rad_reg_debug6_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug7  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug7
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug7_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|cnt
range|:
literal|15
decl_stmt|;
comment|/**< CCTL count[22:8] (bytes) */
else|#
directive|else
name|uint64_t
name|cnt
range|:
literal|15
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug7_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug7
name|cvmx_rad_reg_debug7_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug8  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug8
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug8_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|flags
range|:
literal|8
decl_stmt|;
comment|/**< ICTL flags */
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
comment|/**< ICTL size (bytes) */
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
comment|/**< ICTL pointer */
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|size
range|:
literal|16
decl_stmt|;
name|uint64_t
name|flags
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug8_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug8
name|cvmx_rad_reg_debug8_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_debug9  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_debug9
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_debug9_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|eod
range|:
literal|1
decl_stmt|;
comment|/**< ICTL eod flag */
name|uint64_t
name|ini
range|:
literal|1
decl_stmt|;
comment|/**< ICTL init flag */
name|uint64_t
name|q
range|:
literal|1
decl_stmt|;
comment|/**< ICTL q enable */
name|uint64_t
name|p
range|:
literal|1
decl_stmt|;
comment|/**< ICTL p enable */
name|uint64_t
name|mul
range|:
literal|8
decl_stmt|;
comment|/**< ICTL multiplier */
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
comment|/**< ICTL index */
else|#
directive|else
name|uint64_t
name|index
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mul
range|:
literal|8
decl_stmt|;
name|uint64_t
name|p
range|:
literal|1
decl_stmt|;
name|uint64_t
name|q
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ini
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eod
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_debug9_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_debug9
name|cvmx_rad_reg_debug9_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_error  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_error
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_error_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< A doorbell count has overflowed */
else|#
directive|else
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_error_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_error_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_error
name|cvmx_rad_reg_error_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_int_mask  *  * Notes:  * When a mask bit is set, the corresponding interrupt is enabled.  *  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_int_mask
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_int_mask_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
comment|/**< Bit mask corresponding to RAD_REG_ERROR[0] above */
else|#
directive|else
name|uint64_t
name|doorbell
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_int_mask_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_int_mask
name|cvmx_rad_reg_int_mask_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_polynomial  *  * Notes:  * The polynomial is x^8 + C7*x^7 + C6*x^6 + C5*x^5 + C4*x^4 + C3*x^3 + C2*x^2 + C1*x^1 + C0.  *  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_polynomial
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_polynomial_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_8_63
range|:
literal|56
decl_stmt|;
name|uint64_t
name|coeffs
range|:
literal|8
decl_stmt|;
comment|/**< coefficients of GF(2^8) irreducible polynomial */
else|#
directive|else
name|uint64_t
name|coeffs
range|:
literal|8
decl_stmt|;
name|uint64_t
name|reserved_8_63
range|:
literal|56
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_polynomial_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_polynomial
name|cvmx_rad_reg_polynomial_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_rad_reg_read_idx  *  * Notes:  * Provides the read index during a CSR read operation to any of the CSRs that are physically stored  * as memories.  The names of these CSRs begin with the prefix "RAD_MEM_".  * IDX[15:0] is the read index.  INC[15:0] is an increment that is added to IDX[15:0] after any CSR read.  * The intended use is to initially write this CSR such that IDX=0 and INC=1.  Then, the entire  * contents of a CSR memory can be read with consecutive CSR read commands.  */
end_comment

begin_union
union|union
name|cvmx_rad_reg_read_idx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_rad_reg_read_idx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|inc
range|:
literal|16
decl_stmt|;
comment|/**< Increment to add to current index for next index */
name|uint64_t
name|index
range|:
literal|16
decl_stmt|;
comment|/**< Index to use for next memory CSR read */
else|#
directive|else
name|uint64_t
name|index
range|:
literal|16
decl_stmt|;
name|uint64_t
name|inc
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_rad_reg_read_idx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_rad_reg_read_idx
name|cvmx_rad_reg_read_idx_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

