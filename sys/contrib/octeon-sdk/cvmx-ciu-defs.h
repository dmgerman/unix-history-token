begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2012  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * cvmx-ciu-defs.h  *  * Configuration and status register (CSR) type definitions for  * Octeon ciu.  *  * This file is auto generated. Do not edit.  *  *<hr>$Revision$<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_CIU_DEFS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_CIU_DEFS_H__
end_define

begin_define
define|#
directive|define
name|CVMX_CIU_BIST
value|(CVMX_ADD_IO_SEG(0x0001070000000730ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_BLOCK_INT
value|CVMX_CIU_BLOCK_INT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_BLOCK_INT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_BLOCK_INT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007C0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_BLOCK_INT
value|(CVMX_ADD_IO_SEG(0x00010700000007C0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_CIU_DINT
value|(CVMX_ADD_IO_SEG(0x0001070000000720ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_IOX_INT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_IOX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000A600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_IOX_INT
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000A600ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_IOX_INT_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_IOX_INT_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000CE00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_IOX_INT_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000CE00ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_IOX_INT_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_IOX_INT_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000AE00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_IOX_INT_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000AE00ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000A000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP2
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000A000ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP2_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP2_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000C800ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP2_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000C800ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP2_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP2_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000A800ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP2_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000A800ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000A200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP3
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000A200ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP3_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP3_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000CA00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP3_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000CA00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP3_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP3_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000AA00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP3_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000AA00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000A400ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP4
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000A400ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP4_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP4_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000CC00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP4_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000CC00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_EN2_PPX_IP4_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_EN2_PPX_IP4_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000AC00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_EN2_PPX_IP4_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x000107000000AC00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_CIU_FUSE
value|(CVMX_ADD_IO_SEG(0x0001070000000728ull))
end_define

begin_define
define|#
directive|define
name|CVMX_CIU_GSTOP
value|(CVMX_ADD_IO_SEG(0x0001070000000710ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_INT33_SUM0
value|CVMX_CIU_INT33_SUM0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INT33_SUM0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INT33_SUM0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000110ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INT33_SUM0
value|(CVMX_ADD_IO_SEG(0x0001070000000110ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN0
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000200ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN0_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000002200ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN0_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN0_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN0_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000006200ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000208ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN1
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000208ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002208ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN1_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000002208ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN1_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
operator|(
name|offset
operator|>=
literal|32
operator|)
operator|&&
operator|(
name|offset
operator|<=
literal|33
operator|)
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN1_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006208ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN1_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000006208ull) + ((offset)& 63) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C80ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_0
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000C80ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002C80ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_0_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000002C80ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_0_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_0_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006C80ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_0_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000006C80ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C88ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_1
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000C88ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1_W1C
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1_W1C(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000002C88ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_1_W1C
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000002C88ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_EN4_1_W1S
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_EN4_1_W1S(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000006C88ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|16
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_EN4_1_W1S
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000006C88ull) + ((offset)& 15) * 16)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_SUM0
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|23
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|19
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|7
operator|)
operator|||
operator|(
name|offset
operator|==
literal|32
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_SUM0(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|63
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_SUM0
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000000ull) + ((offset)& 63) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INTX_SUM4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|11
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|15
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|5
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INTX_SUM4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000C00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INTX_SUM4
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000C00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_INT_DBG_SEL
value|CVMX_CIU_INT_DBG_SEL_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INT_DBG_SEL_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INT_DBG_SEL not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007D0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INT_DBG_SEL
value|(CVMX_ADD_IO_SEG(0x00010700000007D0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_INT_SUM1
value|CVMX_CIU_INT_SUM1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_INT_SUM1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN3XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN5XXX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_INT_SUM1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000108ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_INT_SUM1
value|(CVMX_ADD_IO_SEG(0x0001070000000108ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_MBOX_CLRX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
switch|switch
condition|(
name|cvmx_get_octeon_family
argument_list|()
condition|)
block|{
case|case
name|OCTEON_CN30XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|==
literal|0
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|0
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN52XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CNF71XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN61XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|3
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN31XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN50XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|1
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN38XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN58XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|15
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN56XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|11
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN66XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|9
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN63XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|5
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN68XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|31
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100100600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
break|break;
block|}
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_MBOX_CLRX (offset = %lu) not supported on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000680ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_MBOX_SETX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
switch|switch
condition|(
name|cvmx_get_octeon_family
argument_list|()
condition|)
block|{
case|case
name|OCTEON_CN30XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|==
literal|0
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|0
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN52XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CNF71XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN61XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|3
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN31XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN50XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|1
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN38XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN58XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|15
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN56XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|11
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN66XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|9
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN63XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|5
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN68XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|31
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100100400ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
break|break;
block|}
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_MBOX_SETX (offset = %lu) not supported on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_NMI
value|(CVMX_ADD_IO_SEG(0x0001070000000718ull))
end_define

begin_define
define|#
directive|define
name|CVMX_CIU_PCI_INTA
value|(CVMX_ADD_IO_SEG(0x0001070000000750ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_PP_BIST_STAT
value|CVMX_CIU_PP_BIST_STAT_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PP_BIST_STAT_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_PP_BIST_STAT not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007E0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_PP_BIST_STAT
value|(CVMX_ADD_IO_SEG(0x00010700000007E0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_CIU_PP_DBG
value|(CVMX_ADD_IO_SEG(0x0001070000000708ull))
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_PP_POKEX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
switch|switch
condition|(
name|cvmx_get_octeon_family
argument_list|()
condition|)
block|{
case|case
name|OCTEON_CN30XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|==
literal|0
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|0
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN52XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CNF71XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN61XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|3
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN31XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN50XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|1
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN38XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN58XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|15
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN56XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|11
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN66XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|9
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN63XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|5
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN68XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|31
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100100200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
break|break;
block|}
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_PP_POKEX (offset = %lu) not supported on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000580ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CVMX_CIU_PP_RST
value|(CVMX_ADD_IO_SEG(0x0001070000000700ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM0
value|CVMX_CIU_QLM0_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM0_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM0 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000780ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM0
value|(CVMX_ADD_IO_SEG(0x0001070000000780ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM1
value|CVMX_CIU_QLM1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000788ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM1
value|(CVMX_ADD_IO_SEG(0x0001070000000788ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM2
value|CVMX_CIU_QLM2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000790ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM2
value|(CVMX_ADD_IO_SEG(0x0001070000000790ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM3
value|CVMX_CIU_QLM3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000798ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM3
value|(CVMX_ADD_IO_SEG(0x0001070000000798ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM4
value|CVMX_CIU_QLM4_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM4_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM4 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007A0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM4
value|(CVMX_ADD_IO_SEG(0x00010700000007A0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_DCOK
value|CVMX_CIU_QLM_DCOK_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_DCOK_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_DCOK not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000760ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_DCOK
value|(CVMX_ADD_IO_SEG(0x0001070000000760ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGC
value|CVMX_CIU_QLM_JTGC_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_JTGC_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_JTGC not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000768ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGC
value|(CVMX_ADD_IO_SEG(0x0001070000000768ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGD
value|CVMX_CIU_QLM_JTGD_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_QLM_JTGD_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_QLM_JTGD not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000770ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_QLM_JTGD
value|(CVMX_ADD_IO_SEG(0x0001070000000770ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_BIST
value|(CVMX_ADD_IO_SEG(0x0001070000000738ull))
end_define

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST
value|(CVMX_ADD_IO_SEG(0x0001070000000748ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST1
value|CVMX_CIU_SOFT_PRST1_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_PRST1_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SOFT_PRST1 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000758ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST1
value|(CVMX_ADD_IO_SEG(0x0001070000000758ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST2
value|CVMX_CIU_SOFT_PRST2_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_PRST2_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SOFT_PRST2 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007D8ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST2
value|(CVMX_ADD_IO_SEG(0x00010700000007D8ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST3
value|CVMX_CIU_SOFT_PRST3_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SOFT_PRST3_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SOFT_PRST3 not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x00010700000007E0ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_PRST3
value|(CVMX_ADD_IO_SEG(0x00010700000007E0ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CVMX_CIU_SOFT_RST
value|(CVMX_ADD_IO_SEG(0x0001070000000740ull))
end_define

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM1_IOX_INT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM1_IOX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008600ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM1_IOX_INT
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008600ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM1_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM1_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM1_PPX_IP2
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008000ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM1_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM1_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008200ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM1_PPX_IP3
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008200ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM1_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM1_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008400ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM1_PPX_IP4
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008400ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM2_IOX_INT
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|1
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM2_IOX_INT(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008E00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM2_IOX_INT
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008E00ull) + ((offset)& 1) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM2_PPX_IP2
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM2_PPX_IP2(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008800ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM2_PPX_IP2
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008800ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM2_PPX_IP3
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM2_PPX_IP3(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008A00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM2_PPX_IP3
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008A00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_SUM2_PPX_IP4
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_SUM2_PPX_IP4(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000008C00ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_SUM2_PPX_IP4
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000008C00ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_TIMX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN30XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN31XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN50XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN52XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN56XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN58XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN63XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN68XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|3
operator|)
operator|)
operator|)
operator|||
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|&&
operator|(
operator|(
name|offset
operator|<=
literal|9
operator|)
operator|)
operator|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_TIMX(%lu) is invalid on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000480ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_TIMX
parameter_list|(
name|offset
parameter_list|)
value|(CVMX_ADD_IO_SEG(0x0001070000000480ull) + ((offset)& 15) * 8)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|CVMX_ENABLE_CSR_ADDRESS_CHECKING
end_if

begin_define
define|#
directive|define
name|CVMX_CIU_TIM_MULTI_CAST
value|CVMX_CIU_TIM_MULTI_CAST_FUNC()
end_define

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_TIM_MULTI_CAST_FUNC
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CNF71XX
argument_list|)
operator|)
condition|)
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_TIM_MULTI_CAST not supported on this chip\n"
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x000107000000C200ull
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CVMX_CIU_TIM_MULTI_CAST
value|(CVMX_ADD_IO_SEG(0x000107000000C200ull))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|uint64_t
name|CVMX_CIU_WDOGX
parameter_list|(
name|unsigned
name|long
name|offset
parameter_list|)
block|{
switch|switch
condition|(
name|cvmx_get_octeon_family
argument_list|()
condition|)
block|{
case|case
name|OCTEON_CN30XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|==
literal|0
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|0
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN52XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CNF71XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN61XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|3
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN31XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN50XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|1
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|1
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN38XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
case|case
name|OCTEON_CN58XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|15
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN56XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|11
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN66XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|9
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|15
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN63XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|5
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|7
operator|)
operator|*
literal|8
return|;
break|break;
case|case
name|OCTEON_CN68XX
operator|&
name|OCTEON_FAMILY_MASK
case|:
if|if
condition|(
operator|(
name|offset
operator|<=
literal|31
operator|)
condition|)
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070100100000ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|31
operator|)
operator|*
literal|8
return|;
break|break;
block|}
name|cvmx_warn
argument_list|(
literal|"CVMX_CIU_WDOGX (offset = %lu) not supported on this chip\n"
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|CVMX_ADD_IO_SEG
argument_list|(
literal|0x0001070000000500ull
argument_list|)
operator|+
operator|(
operator|(
name|offset
operator|)
operator|&
literal|3
operator|)
operator|*
literal|8
return|;
block|}
end_function

begin_comment
comment|/**  * cvmx_ciu_bist  */
end_comment

begin_union
union|union
name|cvmx_ciu_bist
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_bist_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|7
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|7
decl_stmt|;
name|uint64_t
name|reserved_7_63
range|:
literal|57
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_bist_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|4
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn38xxp2
decl_stmt|;
struct|struct
name|cvmx_ciu_bist_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|2
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_ciu_bist_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|3
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_bist_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn30xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_bist_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|6
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_bist_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
name|uint64_t
name|bist
range|:
literal|5
decl_stmt|;
comment|/**< BIST Results.                                                          HW sets a bit in BIST for for memory that fails                                                          BIST. */
else|#
directive|else
name|uint64_t
name|bist
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_63
range|:
literal|59
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_bist_cn63xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_bist_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_bist_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_bist
name|cvmx_ciu_bist_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_block_int  *  * CIU_BLOCK_INT = CIU Blocks Interrupt  *  * The interrupt lines from the various chip blocks.  */
end_comment

begin_union
union|union
name|cvmx_ciu_block_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_block_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_43_59
range|:
literal|17
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          See CIU_INT_SUM1[PTP] */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt                                                          See SRIO1_INT_REG */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
comment|/**< See PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
comment|/**< See PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG */
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_43_59
range|:
literal|17
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_block_int_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          See CIU_INT_SUM1[PTP] */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|reserved_31_40
range|:
literal|10
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
comment|/**< See PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
comment|/**< See PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG */
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_40
range|:
literal|10
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_block_int_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          See CIU_INT_SUM1[PTP] */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt                                                          See SRIO1_INT_REG, SRIO1_INT2_REG */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|reserved_23_24
range|:
literal|2
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
comment|/**< See PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_2_2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_23_24
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_34_39
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_block_int_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_block_int_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_43_59
range|:
literal|17
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          See CIU_INT_SUM1[PTP] */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
comment|/**< See PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
comment|/**< See PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG */
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_8_8
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_24_24
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_27
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_29_29
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_31
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_33_39
range|:
literal|7
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_43_59
range|:
literal|17
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_63
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_block_int_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          See CIU_INT_SUM1[PTP] */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|reserved_31_40
range|:
literal|10
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|reserved_27_29
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|reserved_23_24
range|:
literal|2
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
comment|/**< See PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|reserved_6_8
range|:
literal|3
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|reserved_2_2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
else|#
directive|else
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_6_8
range|:
literal|3
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_15_15
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_18_19
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_21_21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|asxpcs0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_23_24
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_27_29
range|:
literal|3
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_31_40
range|:
literal|10
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_43_63
range|:
literal|21
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_block_int
name|cvmx_ciu_block_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_dint  */
end_comment

begin_union
union|union
name|cvmx_ciu_dint
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_dint_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|32
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_dint_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|1
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_dint_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|2
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_dint_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|16
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_dint_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_dint_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_dint_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|4
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_dint_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_dint_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|12
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_dint_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_dint_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_dint_cn38xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_dint_cn52xx
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_dint_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|6
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_dint_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_dint_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|dint
range|:
literal|10
decl_stmt|;
comment|/**< Send DINT pulse to PP vector */
else|#
directive|else
name|uint64_t
name|dint
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_ciu_dint_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_dint_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_dint_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_dint
name|cvmx_ciu_dint_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_io#_int  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_iox_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_iox_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_iox_int_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_iox_int_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_iox_int_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_iox_int
name|cvmx_ciu_en2_iox_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_io#_int_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_iox_int_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_iox_int_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_iox_int_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_iox_int_w1c_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_iox_int_w1c_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_iox_int_w1c
name|cvmx_ciu_en2_iox_int_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_io#_int_w1s  *  * Notes:  * Write-1-to-set version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_iox_int_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_iox_int_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_iox_int_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_iox_int_w1s_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_iox_int_w1s_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_iox_int_w1s
name|cvmx_ciu_en2_iox_int_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip2  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip2
name|cvmx_ciu_en2_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip2_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip2_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_w1c_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_w1c_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip2_w1c
name|cvmx_ciu_en2_ppx_ip2_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip2_w1s  *  * Notes:  * Write-1-to-set version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip2_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip2_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_w1s_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip2_w1s_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip2_w1s
name|cvmx_ciu_en2_ppx_ip2_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip3  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip3
name|cvmx_ciu_en2_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip3_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip3_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_w1c_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_w1c_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip3_w1c
name|cvmx_ciu_en2_ppx_ip3_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip3_w1s  *  * Notes:  * Write-1-to-set version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip3_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip3_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_w1s_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip3_w1s_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip3_w1s
name|cvmx_ciu_en2_ppx_ip3_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip4  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip4
name|cvmx_ciu_en2_ppx_ip4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip4_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip4_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to clear General timer 4-9 interrupt enable */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_w1c_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_w1c_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip4_w1c
name|cvmx_ciu_en2_ppx_ip4_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_en2_pp#_ip4_w1s  *  * Notes:  * Write-1-to-set version of the CIU_EN2_PP(IO)X_IPx(INT) register, read back corresponding  * CIU_EN2_PP(IO)X_IPx(INT) value.  */
end_comment

begin_union
union|union
name|cvmx_ciu_en2_ppx_ip4_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set ENDOR PHY interrupts enable */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EOI rsl interrupt enable */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_en2_ppx_ip4_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< Write 1 to set General timer 4-9 interrupt enables */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_w1s_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_en2_ppx_ip4_w1s_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_en2_ppx_ip4_w1s
name|cvmx_ciu_en2_ppx_ip4_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_fuse  */
end_comment

begin_union
union|union
name|cvmx_ciu_fuse
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_fuse_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|32
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_fuse_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|1
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_fuse_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|2
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_fuse_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|16
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_fuse_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_fuse_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|4
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_fuse_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_fuse_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|12
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_fuse_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_cn38xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_cn52xx
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_fuse_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|6
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_fuse_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_fuse_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|fuse
range|:
literal|10
decl_stmt|;
comment|/**< Physical PP is present */
else|#
directive|else
name|uint64_t
name|fuse
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_ciu_fuse_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_fuse_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_fuse
name|cvmx_ciu_fuse_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_gstop  */
end_comment

begin_union
union|union
name|cvmx_ciu_gstop
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_gstop_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|gstop
range|:
literal|1
decl_stmt|;
comment|/**< GSTOP bit */
else|#
directive|else
name|uint64_t
name|gstop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_gstop_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_gstop_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_gstop
name|cvmx_ciu_gstop_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en0  *  * Notes:  * CIU_INT0_EN0:  PP0/IP2  * CIU_INT1_EN0:  PP0/IP3  * CIU_INT2_EN0:  PP1/IP2  * CIU_INT3_EN0:  PP1/IP3  * CIU_INT4_EN0:  PP2/IP2  * CIU_INT5_EN0:  PP2/IP3  * CIU_INT6_EN0:  PP3/IP2  * CIU_INT7_EN0:  PP3/IP3  * .....  *  * (hole)  * CIU_INT32_EN0: IO 0  * CIU_INT33_EN0: IO 1  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCIe interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en0_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_cn30xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_cn38xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCIe interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCIe/sRIO interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCIe interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en0
name|cvmx_ciu_intx_en0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en0_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_INTx_EN0 register, read back corresponding CIU_INTx_EN0 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en0_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_w1c_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_w1c_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox/PCIe/sRIO interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1c_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en0_w1c
name|cvmx_ciu_intx_en0_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en0_w1s  *  * Notes:  * Write-1-to-set version of the CIU_INTx_EN0 register, read back corresponding CIU_INTx_EN0 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en0_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en0_w1s_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en0_w1s_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox/PCIe/sRIO interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en0_w1s_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox/PCIe interrupt                                                          enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en0_w1s
name|cvmx_ciu_intx_en0_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en1  *  * Notes:  * Enables for CIU_SUM1_PPX_IPx  or CIU_SUM1_IOX_INT  * CIU_INT0_EN1:  PP0/IP2  * CIU_INT1_EN1:  PP0/IP3  * CIU_INT2_EN1:  PP1/IP2  * CIU_INT3_EN1:  PP1/IP3  * CIU_INT4_EN1:  PP2/IP2  * CIU_INT5_EN1:  PP2/IP3  * CIU_INT6_EN1:  PP3/IP2  * CIU_INT7_EN1:  PP3/IP3  * .....  *  * (hole)  * CIU_INT32_EN1: IO0  * CIU_INT33_EN1: IO1  *  * @verbatim  * PPx/IP2 will be raised when...  *  *    n = x*2  *    PPx/IP2 = |([CIU_SUM2_PPx_IP2,CIU_SUM1_PPx_IP2, CIU_INTn_SUM0]& [CIU_EN2_PPx_IP2,CIU_INTn_EN1, CIU_INTn_EN0])  *  * PPx/IP3 will be raised when...  *  *    n = x*2 + 1  *    PPx/IP3 =  |([CIU_SUM2_PPx_IP3,CIU_SUM1_PPx_IP3, CIU_INTn_SUM0]& [CIU_EN2_PPx_IP3,CIU_INTn_EN1, CIU_INTn_EN0])  *  * PCI/INT will be raised when...  *  *    PCI/INT = |([CIU_SUM2_IO0_INT,CIU_SUM1_IO0_INT, CIU_INT32_SUM0]& [CIU_EN2_IO0_INT,CIU_INT32_EN1, CIU_INT32_EN0])  *    PCI/INT = |([CIU_SUM2_IO1_INT,CIU_SUM1_IO1_INT, CIU_INT33_SUM0]& [CIU_EN2_IO1_INT,CIU_INT33_EN1, CIU_INT33_EN0])  * @endverbatim  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_intx_en1_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en1_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn52xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xxp1
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_en1_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en1_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en1_cn38xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en1_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en1
name|cvmx_ciu_intx_en1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en1_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_INTX_EN1 register, read back corresponding CIU_INTX_EN1 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en1_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en1_w1c_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1c_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en1_w1c
name|cvmx_ciu_intx_en1_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en1_w1s  *  * Notes:  * Write-1-to-set version of the CIU_INTX_EN1 register, read back corresponding CIU_INTX_EN1 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en1_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en1_w1s_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en1_w1s_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en1_w1s
name|cvmx_ciu_intx_en1_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_0  *  * Notes:  * CIU_INT0_EN4_0:   PP0  /IP4  * CIU_INT1_EN4_0:   PP1  /IP4  * ...  * CIU_INT3_EN4_0:   PP3  /IP4  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_cn56xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_cn58xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en4_0_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_0
name|cvmx_ciu_intx_en4_0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_0_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_INTx_EN4_0 register, read back corresponding CIU_INTx_EN4_0 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_0_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_w1c_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en4_0_w1c_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clr RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1c_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to clear General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to clear mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_0_w1c
name|cvmx_ciu_intx_en4_0_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_0_w1s  *  * Notes:  * Write-1-to-set version of the CIU_INTX_EN4_0 register, read back corresponding CIU_INTX_EN4_0 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_0_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox/PCI interrupts */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_0_w1s_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_en4_0_w1s_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 0 Interrupt                                                          enable */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe/sRIO MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_0_w1s_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Boot bus DMA engines Interrupt                                                          enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD per-port counter threshold                                                          interrupt enable */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW IQ interrupt enable */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set 2nd TWSI Interrupt enable */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MPI/SPI interrupt enable */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PCM/TDM interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB EHCI or OHCI Interrupt enable */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< Write 1 to set General timer interrupt enables */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD QOS packet drop interrupt                                                          enable */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX packet drop interrupt enable */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set Trace buffer interrupt enable */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RML Interrupt enable */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TWSI Interrupt enable */
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe MSI enables */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set PCIe INTA/B/C/D enables */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set UART interrupt enables */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Write 1s to set mailbox interrupt enables */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set GPIO interrupt enables */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set work queue interrupt enables */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_44
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_0_w1s
name|cvmx_ciu_intx_en4_0_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_1  *  * Notes:  * PPx/IP4 will be raised when...  * PPx/IP4 = |([CIU_SUM1_PPx_IP4, CIU_INTx_SUM4]& [CIU_INTx_EN4_1, CIU_INTx_EN4_0])  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn52xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xxp1
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_1_cn56xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_1_cn58xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_1_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_1
name|cvmx_ciu_intx_en4_1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_1_w1c  *  * Notes:  * Write-1-to-clear version of the CIU_INTX_EN4_1 register, read back corresponding CIU_INTX_EN4_1 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_1_w1c
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_1_w1c_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RGMII/MII/MIX Interface 1                                                          Interrupt enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1c_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to clear EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to clear Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_1_w1c
name|cvmx_ciu_intx_en4_1_w1c_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_en4_1_w1s  *  * Notes:  * Write-1-to-set version of the CIU_INTX_EN4_1 register, read back corresponding CIU_INTX_EN4_1 value.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_en4_1_w1s
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vector */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog summary interrupt enable vectory */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO1 interrupt enable */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_intx_en4_1_w1s_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO3 interrupt enable */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO2 interrupt enable */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFM interrupt enable */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SRIO0 interrupt enable */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set AGL interrupt enable */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX1 interrupt enable */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DFA interrupt enable */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set ZIP interrupt enable */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set NAND Flash Controller interrupt                                                          enable */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RGMII/MII/MIX Interface 1 Interrupt                                                          enable */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_en4_1_w1s_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO RST interrupt enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set LMC0 interrupt enable */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM1 interrupt enable */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PEM0 interrupt enable */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PTP interrupt enable */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI_DMA interrupt enable */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set GMX0 interrupt enable */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set DPI interrupt enable */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set SLI interrupt enable */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set USB UCTL0 interrupt enable */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set KEY interrupt enable */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set RAD interrupt enable */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set TIM interrupt enable */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PKO interrupt enable */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set PIP interrupt enable */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IPD interrupt enable */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set L2C interrupt enable */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set POW err interrupt enable */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set FPA interrupt enable */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set IOB interrupt enable */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set MIO boot interrupt enable */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< Write 1 to set EMMC Flash Controller interrupt                                                          enable */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Write 1s to set Watchdog summary interrupt enable */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_en4_1_w1s
name|cvmx_ciu_intx_en4_1_w1s_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_sum0  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_sum0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt, Set when MPI transaction                                                          finished, see MPI_CFG[INT_ENA] and MPI_STS[BUSY] */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX0/1 packet drop interrupt                                                          Set any time corresponding GMX0/1 drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-7                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-11                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCIe internal interrupts for entries 32-33                                                           which equal CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP or common GPIO                                                          edge-triggered interrupts,depending on mode.                                                          See GPIO_MULTI_CAST for all details.                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_sum0_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          PPs use CIU_INTx_SUM0 where x=0-1.                                                          PCI uses the CIU_INTx_SUM0 where x=32.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          [43] is the or of<63:48>                                                          [42] is the or of<47:32>                                                          [41] is the or of<31:16>                                                          [40] is the or of<15:0> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-31                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_intx_sum0_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          PPs use CIU_INTx_SUM0 where x=0-3.                                                          PCI uses the CIU_INTx_SUM0 where x=32.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          [43] is the or of<63:48>                                                          [42] is the or of<47:32>                                                          [41] is the or of<31:16>                                                          [40] is the or of<15:0> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-31                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_intx_sum0_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt                                                          KEY_ZERO will be set when the external ZERO_KEYS                                                          pin is sampled high.  KEY_ZERO is cleared by SW */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          PPs use CIU_INTx_SUM0 where x=0-31.                                                          PCI uses the CIU_INTx_SUM0 where x=32.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          [43] is the or of<63:48>                                                          [42] is the or of<47:32>                                                          [41] is the or of<31:16>                                                          [40] is the or of<15:0> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-31                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_intx_sum0_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_intx_sum0_cn30xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum0_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_INT_SUM1 bit is set and corresponding                                                          enable bit in CIU_INTx_EN is set, where x                                                          is the same as x in this CIU_INTx_SUM0.                                                          PPs use CIU_INTx_SUM0 where x=0-7.                                                          PCI uses the CIU_INTx_SUM0 where x=32.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3                                                          Note that WDOG_SUM only summarizes the SUM/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          Refer to "Receiving Message-Signalled                                                          Interrupts" in the PCIe chapter of the spec */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the PCIe chapter of the spec */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-7                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_intx_sum0_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum0_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt                                                          KEY_ZERO will be set when the external ZERO_KEYS                                                          pin is sampled high.  KEY_ZERO is cleared by SW */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          PPs use CIU_INTx_SUM0 where x=0-23.                                                          PCI uses the CIU_INTx_SUM0 where x=32.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          Refer to "Receiving Message-Signalled                                                          Interrupts" in the PCIe chapter of the spec */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the PCIe chapter of the spec */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-23                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_sum0_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_intx_sum0_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_sum0_cn38xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum0_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt, Set when MPI transaction                                                          finished, see MPI_CFG[INT_ENA] and MPI_STS[BUSY] */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that SUM2 only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX0/1 packet drop interrupt                                                          Set any time corresponding GMX0/1 drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-7                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-11                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCIe internal interrupts for entries 32-33                                                           which equal CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP or common GPIO                                                          edge-triggered interrupts,depending on mode.                                                          See GPIO_MULTI_CAST for all details.                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_sum0_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_sum0_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum0_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt, Set when MPI transaction                                                          finished, see MPI_CFG[INT_ENA] and MPI_STS[BUSY] */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          Prior to pass 1.2 or                                                           when CIU_TIM_MULTI_CAST[EN]==0, this interrupt is                                                           common for all PP/IRQs, writing '1' to any PP/IRQ                                                           will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                           are set at the same time, but clearing is per                                                           cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                           In pass 1.2 and subsequent passes,                                                           this read-only bit reads as a one whenever any                                                           CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                           and corresponding enable bit in CIU_EN2_PPX_IPx                                                           (CIU_EN2_IOX_INT) is set.                                                           Note that SUM2 only summarizes the SUM2/EN2                                                           result and does not have a corresponding enable                                                           bit, so does not directly contribute to                                                           interrupts.                                                          Prior to pass 1.2, SUM2 did not exist and this                                                           bit reads as zero. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX0/1 packet drop interrupt                                                          Set any time corresponding GMX0/1 drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe/sRIO uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-11                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCIe/sRIO internal interrupts for entries 32-33                                                           which equal CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_sum0_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt, Set when MPI transaction                                                          finished, see MPI_CFG[INT_ENA] and MPI_STS[BUSY] */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that SUM2 only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX0/1 packet drop interrupt                                                          Set any time corresponding GMX0/1 drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-7                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-11                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCIe internal interrupts for entries 32-33                                                           which equal CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP or common GPIO                                                          edge-triggered interrupts,depending on mode.                                                          See GPIO_MULTI_CAST for all details.                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_sum0
name|cvmx_ciu_intx_sum0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int#_sum4  */
end_comment

begin_union
union|union
name|cvmx_ciu_intx_sum4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This bit is set when any bit is set in                                                          CIU_BLOCK_INT. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-5                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP interrupt or                                                          common GPIO interrupt for all PP/IOs,depending                                                          on mode setting. This will apply to all 16 GPIOs.                                                          See GPIO_MULTI_CAST for all details                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_intx_sum4_cn50xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          PPs use CIU_INTx_SUM4 where x=0-1. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          [43] is the or of<63:48>                                                          [42] is the or of<47:32>                                                          [41] is the or of<31:16>                                                          [40] is the or of<15:0> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-31                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_47_47
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_59_63
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|cn50xx
struct|;
struct|struct
name|cvmx_ciu_intx_sum4_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN4_1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_INT_SUM1 bit is set and corresponding                                                          enable bit in CIU_INTx_EN4_1 is set, where x                                                          is the same as x in this CIU_INTx_SUM4.                                                          PPs use CIU_INTx_SUM4 for IP4, where x=PPid.                                                          Note that WDOG_SUM only summarizes the SUM/EN4_1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          Refer to "Receiving Message-Signalled                                                          Interrupts" in the PCIe chapter of the spec */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the PCIe chapter of the spec */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-3                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_intx_sum4_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum4_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< MII Interface Interrupt */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB Interrupt */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt                                                          KEY_ZERO will be set when the external ZERO_KEYS                                                          pin is sampled high.  KEY_ZERO is cleared by SW */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          These registers report WDOG to IP4 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          Refer to "Receiving Message-Signalled                                                          Interrupts" in the PCIe chapter of the spec */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the PCIe chapter of the spec */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-11                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_intx_sum4_cn56xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum4_cn58xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts */
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
comment|/**< Key Zeroization interrupt                                                          KEY_ZERO will be set when the external ZERO_KEYS                                                          pin is sampled high.  KEY_ZERO is cleared by SW */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< L2C has the CMB trace buffer */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< Watchdog summary                                                          These registers report WDOG to IP4 */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCI MSI                                                          [43] is the or of<63:48>                                                          [42] is the or of<47:32>                                                          [41] is the or of<31:16>                                                          [40] is the or of<15:0> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCI INTA/B/C/D */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-31                                                           [33] is the or of<31:16>                                                           [32] is the or of<15:0>                                                          Two PCI internal interrupts for entry 32                                                           CIU_PCI_INTA */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key_zero
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_56_63
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
block|}
name|cn58xx
struct|;
name|struct
name|cvmx_ciu_intx_sum4_cn58xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum4_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that WDOG_SUM only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This bit is set when any bit is set in                                                          CIU_BLOCK_INT. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-5                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP interrupt or                                                          common GPIO interrupt for all PP/IOs,depending                                                          on mode setting. This will apply to all 16 GPIOs.                                                          See GPIO_MULTI_CAST for all details                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_intx_sum4_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_intx_sum4_cn52xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_intx_sum4_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          Prior to pass 1.2 or                                                           when CIU_TIM_MULTI_CAST[EN]==0, this interrupt is                                                           common for all PP/IRQs, writing '1' to any PP/IRQ                                                           will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                           are set at the same time, but clearing is per                                                           cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                           In pass 1.2 and subsequent passes,                                                           this read-only bit reads as a one whenever any                                                           CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                           and corresponding enable bit in CIU_EN2_PPX_IPx                                                           (CIU_EN2_IOX_INT) is set.                                                           Note that WDOG_SUM only summarizes the SUM2/EN2                                                           result and does not have a corresponding enable                                                           bit, so does not directly contribute to                                                           interrupts.                                                          Prior to pass 1.2, SUM2 did not exist and this                                                           bit reads as zero. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This bit is set when any bit is set in                                                          CIU_BLOCK_INT. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe/sRIO uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-5                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_intx_sum4_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that WDOG_SUM only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This bit is set when any bit is set in                                                          CIU_BLOCK_INT. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< Two mailbox interrupts for entries 0-5                                                          [33] is the or of<31:16>                                                          [32] is the or of<15:0> */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP interrupt or                                                          common GPIO interrupt for all PP/IOs,depending                                                          on mode setting. This will apply to all 16 GPIOs.                                                          See GPIO_MULTI_CAST for all details                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_intx_sum4
name|cvmx_ciu_intx_sum4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int33_sum0  */
end_comment

begin_union
union|union
name|cvmx_ciu_int33_sum0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_int33_sum0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that SUM2 only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx bit is set and corresponding                                                          enable bit in CIU_INTx_EN is set, where x                                                          is the same as x in this CIU_INTx_SUM0.                                                          PPs use CIU_INTx_SUM0 where x=0-7.                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< A read-only copy of CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP or common GPIO                                                          edge-triggered interrupts,depending on mode.                                                          See GPIO_MULTI_CAST for all details.                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_int33_sum0_s
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_int33_sum0_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer interrupts                                                          Set any time the corresponding CIU timer expires */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_INT_SUM1 bit is set and corresponding                                                          enable bit in CIU_INTx_EN is set, where x                                                          is the same as x in this CIU_INTx_SUM0.                                                          PPs use CIU_INTx_SUM0 where x=0-11.                                                          PCIe/sRIO uses the CIU_INTx_SUM0 where x=32-33.                                                          Even INTx registers report WDOG to IP2                                                          Odd INTx registers report WDOG to IP3                                                          Note that WDOG_SUM only summarizes the SUM/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< A read-only copy of CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_58
range|:
literal|2
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_int33_sum0_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_int33_sum0_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 0 Interrupt                                                          See MIX0_ISR */
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          Prior to pass 1.2 or                                                           when CIU_TIM_MULTI_CAST[EN]==0, this interrupt is                                                           common for all PP/IRQs, writing '1' to any PP/IRQ                                                           will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                           are set at the same time, but clearing is per                                                           cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                           In pass 1.2 and subsequent passes,                                                           this read-only bit reads as a one whenever any                                                           CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                           and corresponding enable bit in CIU_EN2_PPX_IPx                                                           (CIU_EN2_IOX_INT) is set.                                                           Note that SUM2 only summarizes the SUM2/EN2                                                           result and does not have a corresponding enable                                                           bit, so does not directly contribute to                                                           interrupts.                                                          Prior to pass 1.2, SUM2 did not exist and this                                                           bit reads as zero. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx (CIU_SUM1_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_INTx_EN is set                                                          PPs use CIU_INTx_SUM0 where x=0-19                                                          PCIe/sRIO uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe/sRIO MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< A read-only copy of CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|2
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_57
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_int33_sum0_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
comment|/**< Boot bus DMA engines Interrupt                                                          See MIO_BOOT_DMA_INT*, MIO_NDF_DMA_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
comment|/**< IPD per-port counter threshold interrupt                                                          See IPD_PORT_QOS_INT* */
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
comment|/**< POW IQ interrupt                                                          See POW_IQ_INT */
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
comment|/**< 2nd TWSI Interrupt                                                          See MIO_TWS1_INT */
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
comment|/**< MPI/SPI interrupt */
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
comment|/**< PCM/TDM interrupt */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB EHCI or OHCI Interrupt                                                          See UAHC0_EHCI_USBSTS UAHC0_OHCI0_HCINTERRUPTSTATUS */
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
comment|/**< General timer 0-3 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_SUM2_*[TIMER] field implement all 10 CIU_TIM*                                                          interrupts. */
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
comment|/**< SUM2&EN2 SUMMARY bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM2_PPX_IPx (CIU_SUM2_IOX_INT)  bit is set                                                          and corresponding enable bit in CIU_EN2_PPX_IPx                                                          (CIU_EN2_IOX_INT) is set.                                                          Note that SUM2 only summarizes the SUM2/EN2                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
comment|/**< IPD QOS packet drop interrupt                                                          Set any time PIP/IPD drops a packet */
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
comment|/**< GMX packet drop interrupt                                                          Set any time corresponding GMX drops a packet */
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
comment|/**< Trace buffer interrupt                                                          See TRA_INT_STATUS */
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
comment|/**< RML Interrupt                                                          This interrupt will assert if any bit within                                                          CIU_BLOCK_INT is asserted. */
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
comment|/**< TWSI Interrupt                                                          See MIO_TWS0_INT */
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
comment|/**< SUM1&EN1 summary bit                                                          This read-only bit reads as a one whenever any                                                          CIU_SUM1_PPX_IPx bit is set and corresponding                                                          enable bit in CIU_INTx_EN is set, where x                                                          is the same as x in this CIU_INTx_SUM0.                                                          PPs use CIU_INTx_SUM0 where x=0-7.                                                          PCIe uses the CIU_INTx_SUM0 where x=32-33.                                                          Note that WDOG_SUM only summarizes the SUM1/EN1                                                          result and does not have a corresponding enable                                                          bit, so does not directly contribute to                                                          interrupts. */
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
comment|/**< PCIe MSI                                                          See SLI_MSI_RCVn for bit<40+n> */
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
comment|/**< PCIe INTA/B/C/D                                                          Refer to "Receiving Emulated INTA/INTB/                                                          INTC/INTD" in the SLI chapter of the spec                                                          PCI_INT<3> = INTD                                                          PCI_INT<2> = INTC                                                          PCI_INT<1> = INTB                                                          PCI_INT<0> = INTA */
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
comment|/**< Two UART interrupts                                                          See MIO_UARTn_IIR[IID] for bit<34+n> */
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
comment|/**< A read-only copy of CIU_PCI_INTA[INT] */
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
comment|/**< 16 GPIO interrupts                                                          When GPIO_MULTI_CAST[EN] == 1                                                          Write 1 to clear either the per PP or common GPIO                                                          edge-triggered interrupts,depending on mode.                                                          See GPIO_MULTI_CAST for all details.                                                          When GPIO_MULTI_CAST[EN] == 0                                                          Read Only, retain the same behavior as o63. */
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
comment|/**< 16 work queue interrupts                                                          See POW_WQ_INT[WQ_INT]                                                           1 bit/group. A copy of the R/W1C bit in the POW. */
else|#
directive|else
name|uint64_t
name|workq
range|:
literal|16
decl_stmt|;
name|uint64_t
name|gpio
range|:
literal|16
decl_stmt|;
name|uint64_t
name|mbox
range|:
literal|2
decl_stmt|;
name|uint64_t
name|uart
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pci_int
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pci_msi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|wdog_sum
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rml
range|:
literal|1
decl_stmt|;
name|uint64_t
name|trace
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gmx_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_49_49
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd_drp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sum2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|4
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pcm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|twsi2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|powiq
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipdppthr
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bootdma
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_int33_sum0
name|cvmx_ciu_int33_sum0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int_dbg_sel  */
end_comment

begin_union
union|union
name|cvmx_ciu_int_dbg_sel
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_int_dbg_sel_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
comment|/**< Selects if all or the specific interrupt is                                                          presented on the debug port.                                                          0=erst_n                                                          1=start_bist                                                          2=toggle at sclk/2 freq                                                          3=All PP interrupt bits are ORed together                                                          4=Only the selected virtual  PP/IRQ is selected */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
comment|/**< Which IRQ to select                                                          0=IRQ2                                                          1=IRQ3                                                          2=IRQ4 */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|5
decl_stmt|;
comment|/**< Which PP to select */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_int_dbg_sel_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
comment|/**< Selects if all or the specific interrupt is                                                          presented on the debug port.                                                          0=erst_n                                                          1=start_bist                                                          2=toggle at sclk/2 freq                                                          3=All PP interrupt bits are ORed together                                                          4=Only the selected virtual  PP/IRQ is selected */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
comment|/**< Which IRQ to select                                                          0=IRQ2                                                          1=IRQ3                                                          2=IRQ4 */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
comment|/**< Which PP to select */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_int_dbg_sel_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
comment|/**< Selects if all or the specific interrupt is                                                          presented on the debug port.                                                          0=erst_n                                                          1=start_bist                                                          2=toggle at sclk/2 freq                                                          3=All PP interrupt bits are ORed together                                                          4=Only the selected physical PP/IRQ is selected */
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
comment|/**< Which IRQ to select                                                          0=IRQ2                                                          1=IRQ3                                                          2=IRQ4 */
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|pp
range|:
literal|3
decl_stmt|;
comment|/**< Which PP to select */
else|#
directive|else
name|uint64_t
name|pp
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_3_7
range|:
literal|5
decl_stmt|;
name|uint64_t
name|irq
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_10_15
range|:
literal|6
decl_stmt|;
name|uint64_t
name|sel
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_int_dbg_sel_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_int_dbg_sel_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_int_dbg_sel_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_int_dbg_sel_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_int_dbg_sel
name|cvmx_ciu_int_dbg_sel_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_int_sum1  */
end_comment

begin_union
union|union
name|cvmx_ciu_int_sum1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_int_sum1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt                                                          See SRIO1_INT_REG */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See  EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
comment|/**< 1 watchdog interrupt */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
comment|/**< 2 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
comment|/**< 16 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_int_sum1_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_int_sum1_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_int_sum1_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< 4 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_20_63
range|:
literal|44
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn52xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< Second MII Interrupt */
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
comment|/**< Second USB Interrupt */
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
comment|/**< Third UART interrupt */
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< 4 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_15
range|:
literal|12
decl_stmt|;
name|uint64_t
name|uart2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_19_63
range|:
literal|45
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xxp1
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
comment|/**< 12 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_int_sum1_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_int_sum1_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_int_sum1_cn38xx
name|cn58xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_int_sum1_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See  EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
comment|/**< SRIO1 interrupt                                                          See SRIO1_INT_REG, SRIO1_INT2_REG */
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
comment|/**< 6 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_17
range|:
literal|12
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_45
range|:
literal|9
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_62
range|:
literal|6
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_int_sum1_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_int_sum1_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< 10 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_int_sum1_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_37_46
range|:
literal|10
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See  EMMC interrupt */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_46
range|:
literal|10
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_int_sum1
name|cvmx_ciu_int_sum1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_mbox_clr#  */
end_comment

begin_union
union|union
name|cvmx_ciu_mbox_clrx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_mbox_clrx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|bits
range|:
literal|32
decl_stmt|;
comment|/**< On writes, clr corresponding bit in MBOX register                                                          on reads, return the MBOX register */
else|#
directive|else
name|uint64_t
name|bits
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_clrx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_mbox_clrx
name|cvmx_ciu_mbox_clrx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_mbox_set#  */
end_comment

begin_union
union|union
name|cvmx_ciu_mbox_setx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_mbox_setx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|bits
range|:
literal|32
decl_stmt|;
comment|/**< On writes, set corresponding bit in MBOX register                                                          on reads, return the MBOX register */
else|#
directive|else
name|uint64_t
name|bits
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_mbox_setx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_mbox_setx
name|cvmx_ciu_mbox_setx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_nmi  */
end_comment

begin_union
union|union
name|cvmx_ciu_nmi
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_nmi_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|32
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_nmi_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|1
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_nmi_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|2
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_nmi_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|16
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_nmi_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_nmi_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|4
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_nmi_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_nmi_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|12
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_nmi_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_cn38xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_cn52xx
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_nmi_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|6
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_nmi_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_nmi_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|nmi
range|:
literal|10
decl_stmt|;
comment|/**< Send NMI pulse to PP vector */
else|#
directive|else
name|uint64_t
name|nmi
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_ciu_nmi_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_nmi_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_nmi
name|cvmx_ciu_nmi_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_pci_inta  */
end_comment

begin_union
union|union
name|cvmx_ciu_pci_inta
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_pci_inta_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|intr
range|:
literal|2
decl_stmt|;
comment|/**< PCIe interrupt                                                          These bits are observed in CIU_INTX_SUM0<33:32>                                                          where X=32-33 */
else|#
directive|else
name|uint64_t
name|intr
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pci_inta_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_pci_inta
name|cvmx_ciu_pci_inta_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_pp_bist_stat  */
end_comment

begin_union
union|union
name|cvmx_ciu_pp_bist_stat
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_bist_stat_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|pp_bist
range|:
literal|32
decl_stmt|;
comment|/**< Physical PP BIST status */
else|#
directive|else
name|uint64_t
name|pp_bist
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_pp_bist_stat_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_bist_stat_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_pp_bist_stat
name|cvmx_ciu_pp_bist_stat_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_pp_dbg  */
end_comment

begin_union
union|union
name|cvmx_ciu_pp_dbg
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_dbg_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|32
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_pp_dbg_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|1
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_pp_dbg_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|2
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_pp_dbg_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|16
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|16
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_pp_dbg_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_dbg_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|4
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_pp_dbg_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_dbg_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|12
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|12
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_pp_dbg_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_cn38xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_cn52xx
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_dbg_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|6
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_pp_dbg_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_dbg_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|ppdbg
range|:
literal|10
decl_stmt|;
comment|/**< Debug[DM] value for each PP                                                          whether the PP's are in debug mode or not */
else|#
directive|else
name|uint64_t
name|ppdbg
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_ciu_pp_dbg_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_dbg_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_pp_dbg
name|cvmx_ciu_pp_dbg_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_pp_poke#  *  * Notes:  * Any write to a CIU_PP_POKE register clears any pending interrupt generated  * by the associated watchdog, resets the CIU_WDOG[STATE] field, and set  * CIU_WDOG[CNT] to be (CIU_WDOG[LEN]<< 8).  *  * Reads to this register will return the associated CIU_WDOG register.  */
end_comment

begin_union
union|union
name|cvmx_ciu_pp_pokex
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_pokex_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|poke
range|:
literal|64
decl_stmt|;
comment|/**< Reserved */
else|#
directive|else
name|uint64_t
name|poke
range|:
literal|64
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_pokex_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_pp_pokex
name|cvmx_ciu_pp_pokex_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_pp_rst  *  * Contains the reset control for each PP.  Value of '1' will hold a PP in reset, '0' will release.  * Resets to 0xf when PCI boot is enabled, 0xe otherwise.  */
end_comment

begin_union
union|union
name|cvmx_ciu_pp_rst
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_rst_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|31
decl_stmt|;
comment|/**< PP Rst for PP's 3-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|31
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_pp_rst_cn30xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn30xx
struct|;
struct|struct
name|cvmx_ciu_pp_rst_cn31xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn31xx
struct|;
struct|struct
name|cvmx_ciu_pp_rst_cn38xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|15
decl_stmt|;
comment|/**< PP Rst for PP's 15-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|15
decl_stmt|;
name|uint64_t
name|reserved_16_63
range|:
literal|48
decl_stmt|;
endif|#
directive|endif
block|}
name|cn38xx
struct|;
name|struct
name|cvmx_ciu_pp_rst_cn38xx
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_cn31xx
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_rst_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|3
decl_stmt|;
comment|/**< PP Rst for PP's 11-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_pp_rst_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_rst_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|11
decl_stmt|;
comment|/**< PP Rst for PP's 11-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|11
decl_stmt|;
name|uint64_t
name|reserved_12_63
range|:
literal|52
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_pp_rst_cn56xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_cn38xx
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_cn38xx
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_cn52xx
name|cn61xx
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_rst_cn63xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|5
decl_stmt|;
comment|/**< PP Rst for PP's 5-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_6_63
range|:
literal|58
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xx
struct|;
name|struct
name|cvmx_ciu_pp_rst_cn63xx
name|cn63xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_pp_rst_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|9
decl_stmt|;
comment|/**< PP Rst for PP's 9-1 */
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
comment|/**< PP Rst for PP0                                                          depends on standalone mode */
else|#
directive|else
name|uint64_t
name|rst0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|9
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
name|struct
name|cvmx_ciu_pp_rst_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_pp_rst_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_pp_rst
name|cvmx_ciu_pp_rst_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm0  *  * Notes:  * This register is only reset by cold reset.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm0
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm0_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM0 PCIE Gen2 tx bypass enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM0 PCIE Gen2 tx bypass de-emphasis value */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
comment|/**< QLM0 PCIE Gen2 tx bypass margin (amplitude) value */
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM0 transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM0 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM0 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM0 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_qlm0_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm0_s
name|cn63xx
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm0_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM0 transmitter bypass enable */
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
comment|/**< QLM0 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM0 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM0 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
name|struct
name|cvmx_ciu_qlm0_s
name|cn66xx
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm0_cn68xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLMx lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn68xx
struct|;
name|struct
name|cvmx_ciu_qlm0_cn68xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm0_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm0
name|cvmx_ciu_qlm0_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm1  *  * Notes:  * This register is only reset by cold reset.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM1 PCIE Gen2 tx bypass enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM1 PCIE Gen2 tx bypass de-emphasis value */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
comment|/**< QLM1 PCIE Gen2 tx bypass margin (amplitude) value */
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM1 transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM1 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM1 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM1 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_qlm1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm1_s
name|cn63xx
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm1_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM1 transmitter bypass enable */
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
comment|/**< QLM1 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM1 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM1 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
name|struct
name|cvmx_ciu_qlm1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm1
name|cvmx_ciu_qlm1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm2  *  * Notes:  * This register is only reset by cold reset.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass de-emphasis value */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass margin (amplitude) value */
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM2 transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM2 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM2 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM2 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_qlm2_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM2 transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLM2 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM2 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM2 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_qlm2_cn61xx
name|cn63xx
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm2_cn63xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLM2 transmitter bypass enable */
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
comment|/**< QLM2 transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLM2 transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLM2 lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_20_30
range|:
literal|11
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_63
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
block|}
name|cn63xxp1
struct|;
name|struct
name|cvmx_ciu_qlm2_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm2_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm2_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm2_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm2
name|cvmx_ciu_qlm2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm3  *  * Notes:  * This register is only reset by cold reset.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass de-emphasis value */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass margin (amplitude) value */
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLMx lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_qlm3_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm3_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm3
name|cvmx_ciu_qlm3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm4  *  * Notes:  * This register is only reset by cold reset.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass enable */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass de-emphasis value */
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx PCIE Gen2 tx bypass margin (amplitude) value */
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
comment|/**< QLMx transmitter bypass enable */
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass de-emphasis value */
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
comment|/**< QLMx transmitter bypass margin (amplitude) value */
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
comment|/**< QLMx lane enable mask */
else|#
directive|else
name|uint64_t
name|lane_en
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_7
range|:
literal|4
decl_stmt|;
name|uint64_t
name|txmargin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_13_15
range|:
literal|3
decl_stmt|;
name|uint64_t
name|txdeemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_21_30
range|:
literal|10
decl_stmt|;
name|uint64_t
name|txbypass
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_39
range|:
literal|8
decl_stmt|;
name|uint64_t
name|g2margin
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_47
range|:
literal|3
decl_stmt|;
name|uint64_t
name|g2deemph
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|g2bypass
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_qlm4_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm4_s
name|cn68xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm4
name|cvmx_ciu_qlm4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm_dcok  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm_dcok
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_dcok_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
name|uint64_t
name|qlm_dcok
range|:
literal|4
decl_stmt|;
comment|/**< Re-assert dcok for each QLM. The value in this                                                          field is "anded" with the pll_dcok pin and then                                                          sent to each QLM (0..3). */
else|#
directive|else
name|uint64_t
name|qlm_dcok
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_63
range|:
literal|60
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_qlm_dcok_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
name|uint64_t
name|qlm_dcok
range|:
literal|2
decl_stmt|;
comment|/**< Re-assert dcok for each QLM. The value in this                                                          field is "anded" with the pll_dcok pin and then                                                          sent to each QLM (0..3). */
else|#
directive|else
name|uint64_t
name|qlm_dcok
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_63
range|:
literal|62
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_qlm_dcok_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_dcok_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_dcok_s
name|cn56xxp1
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm_dcok
name|cvmx_ciu_qlm_dcok_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm_jtgc  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm_jtgc
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_jtgc_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
name|uint64_t
name|bypass_ext
range|:
literal|1
decl_stmt|;
comment|/**< BYPASS Field extension to select QLM 4                                                          Selects which QLM JTAG shift chains are bypassed                                                          by the QLM JTAG data register (CIU_QLM_JTGD) (one                                                          bit per QLM) */
name|uint64_t
name|reserved_11_15
range|:
literal|5
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
comment|/**< Clock divider for QLM JTAG operations.  eclk is                                                          divided by 2^(CLK_DIV + 2) */
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|3
decl_stmt|;
comment|/**< Selects which QLM JTAG shift out is shifted into                                                          the QLM JTAG shift register: CIU_QLM_JTGD[SHFT_REG] */
name|uint64_t
name|bypass
range|:
literal|4
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains are bypassed                                                          by the QLM JTAG data register (CIU_QLM_JTGD) (one                                                          bit per QLM) */
else|#
directive|else
name|uint64_t
name|bypass
range|:
literal|4
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_7_7
range|:
literal|1
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_11_15
range|:
literal|5
decl_stmt|;
name|uint64_t
name|bypass_ext
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_17_63
range|:
literal|47
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_qlm_jtgc_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
comment|/**< Clock divider for QLM JTAG operations.  eclk is                                                          divided by 2^(CLK_DIV + 2) */
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|1
decl_stmt|;
comment|/**< Selects which QLM JTAG shift out is shifted into                                                          the QLM JTAG shift register: CIU_QLM_JTGD[SHFT_REG] */
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|bypass
range|:
literal|2
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains are bypassed                                                          by the QLM JTAG data register (CIU_QLM_JTGD) (one                                                          bit per QLM) */
else|#
directive|else
name|uint64_t
name|bypass
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_2_3
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_5_7
range|:
literal|3
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_jtgc_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
comment|/**< Clock divider for QLM JTAG operations.  eclk is                                                          divided by 2^(CLK_DIV + 2) */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|2
decl_stmt|;
comment|/**< Selects which QLM JTAG shift out is shifted into                                                          the QLM JTAG shift register: CIU_QLM_JTGD[SHFT_REG] */
name|uint64_t
name|bypass
range|:
literal|4
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains are bypassed                                                          by the QLM JTAG data register (CIU_QLM_JTGD) (one                                                          bit per QLM) */
else|#
directive|else
name|uint64_t
name|bypass
range|:
literal|4
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn56xx
name|cn56xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_jtgc_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
comment|/**< Clock divider for QLM JTAG operations.  eclk is                                                          divided by 2^(CLK_DIV + 2) */
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|2
decl_stmt|;
comment|/**< Selects which QLM JTAG shift out is shifted into                                                          the QLM JTAG shift register: CIU_QLM_JTGD[SHFT_REG] */
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bypass
range|:
literal|3
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains are bypassed                                                          by the QLM JTAG data register (CIU_QLM_JTGD) (one                                                          bit per QLM) */
else|#
directive|else
name|uint64_t
name|bypass
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_3_3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mux_sel
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_6_7
range|:
literal|2
decl_stmt|;
name|uint64_t
name|clk_div
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_11_63
range|:
literal|53
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgc_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgc_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgc_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm_jtgc
name|cvmx_ciu_qlm_jtgc_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_qlm_jtgd  */
end_comment

begin_union
union|union
name|cvmx_ciu_qlm_jtgd
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_jtgd_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG capture operation (self-clearing when                                                          op completes) */
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG shift operation (self-clearing when                                                          op completes) */
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG update operation (self-clearing when                                                          op completes) */
name|uint64_t
name|reserved_45_60
range|:
literal|16
decl_stmt|;
name|uint64_t
name|select
range|:
literal|5
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains the JTAG                                                          operations are performed on */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
comment|/**< QLM JTAG shift count (encoded in -1 notation) */
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
comment|/**< QLM JTAG shift register */
else|#
directive|else
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|select
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_45_60
range|:
literal|16
decl_stmt|;
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_qlm_jtgd_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG capture operation (self-clearing when                                                          op completes) */
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG shift operation (self-clearing when                                                          op completes) */
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG update operation (self-clearing when                                                          op completes) */
name|uint64_t
name|reserved_42_60
range|:
literal|19
decl_stmt|;
name|uint64_t
name|select
range|:
literal|2
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains the JTAG                                                          operations are performed on */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
comment|/**< QLM JTAG shift count (encoded in -1 notation) */
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
comment|/**< QLM JTAG shift register */
else|#
directive|else
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|select
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_42_60
range|:
literal|19
decl_stmt|;
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_qlm_jtgd_cn52xx
name|cn52xxp1
decl_stmt|;
struct|struct
name|cvmx_ciu_qlm_jtgd_cn56xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG capture operation (self-clearing when                                                          op completes) */
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG shift operation (self-clearing when                                                          op completes) */
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG update operation (self-clearing when                                                          op completes) */
name|uint64_t
name|reserved_44_60
range|:
literal|17
decl_stmt|;
name|uint64_t
name|select
range|:
literal|4
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains the JTAG                                                          operations are performed on */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
comment|/**< QLM JTAG shift count (encoded in -1 notation) */
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
comment|/**< QLM JTAG shift register */
else|#
directive|else
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|select
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_44_60
range|:
literal|17
decl_stmt|;
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xx
struct|;
struct|struct
name|cvmx_ciu_qlm_jtgd_cn56xxp1
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG capture operation (self-clearing when                                                          op completes) */
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG shift operation (self-clearing when                                                          op completes) */
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG update operation (self-clearing when                                                          op completes) */
name|uint64_t
name|reserved_37_60
range|:
literal|24
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
comment|/**< QLM JTAG shift count (encoded in -1 notation) */
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
comment|/**< QLM JTAG shift register */
else|#
directive|else
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_37_60
range|:
literal|24
decl_stmt|;
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn56xxp1
struct|;
struct|struct
name|cvmx_ciu_qlm_jtgd_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG capture operation (self-clearing when                                                          op completes) */
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG shift operation (self-clearing when                                                          op completes) */
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
comment|/**< Perform JTAG update operation (self-clearing when                                                          op completes) */
name|uint64_t
name|reserved_43_60
range|:
literal|18
decl_stmt|;
name|uint64_t
name|select
range|:
literal|3
decl_stmt|;
comment|/**< Selects which QLM JTAG shift chains the JTAG                                                          operations are performed on */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
comment|/**< QLM JTAG shift count (encoded in -1 notation) */
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
comment|/**< QLM JTAG shift register */
else|#
directive|else
name|uint64_t
name|shft_reg
range|:
literal|32
decl_stmt|;
name|uint64_t
name|shft_cnt
range|:
literal|5
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|select
range|:
literal|3
decl_stmt|;
name|uint64_t
name|reserved_43_60
range|:
literal|18
decl_stmt|;
name|uint64_t
name|update
range|:
literal|1
decl_stmt|;
name|uint64_t
name|shift
range|:
literal|1
decl_stmt|;
name|uint64_t
name|capture
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_qlm_jtgd_cn61xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgd_cn61xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgd_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgd_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgd_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_qlm_jtgd_cn61xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_qlm_jtgd
name|cvmx_ciu_qlm_jtgd_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_bist  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_bist
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_bist_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_bist
range|:
literal|1
decl_stmt|;
comment|/**< Reserved */
else|#
directive|else
name|uint64_t
name|soft_bist
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_bist_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_bist
name|cvmx_ciu_soft_bist_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_prst  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_prst
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_prst_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
name|uint64_t
name|host64
range|:
literal|1
decl_stmt|;
comment|/**< PCX Host Mode Device Capability (0=32b/1=64b) */
name|uint64_t
name|npi
range|:
literal|1
decl_stmt|;
comment|/**< When PCI soft reset is asserted, also reset the                                                          NPI and PNI logic */
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
comment|/**< Resets the PCIe logic in all modes, not just                                                          RC mode. The reset value is based on the                                                          corresponding MIO_RST_CTL[PRTMODE] CSR field:                                                           If PRTMODE == 0, then SOFT_PRST resets to 0                                                           If PRTMODE != 0, then SOFT_PRST resets to 1                                                          When OCTEON is configured to drive the PERST*_L                                                          chip pin (ie. MIO_RST_CTL0[RST_DRV] is set), this                                                          controls the PERST*_L chip pin. */
else|#
directive|else
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|npi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|host64
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_3_63
range|:
literal|61
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn50xx
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_prst_cn52xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
comment|/**< Reset the PCI bus.  Only works when Octane is                                                          configured as a HOST. When OCTEON is a PCI host                                                          (i.e. when PCI_HOST_MODE = 1), This controls                                                          PCI_RST_L. Refer to section 10.11.1. */
else|#
directive|else
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|cn52xx
struct|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst_cn52xx
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_prst
name|cvmx_ciu_soft_prst_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_prst1  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_prst1
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_prst1_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
comment|/**< Resets the PCIe logic in all modes, not just                                                          RC mode. The reset value is based on the                                                          corresponding MIO_RST_CTL[PRTMODE] CSR field:                                                           If PRTMODE == 0, then SOFT_PRST resets to 0                                                           If PRTMODE != 0, then SOFT_PRST resets to 1                                                          In o61, this PRST initial value is always '1' as                                                          PEM1 always running on host mode. */
else|#
directive|else
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_prst1_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_prst1
name|cvmx_ciu_soft_prst1_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_prst2  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_prst2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_prst2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
comment|/**< Resets the      sRIO logic in all modes, not just                                                          RC mode. The reset value is based on the                                                          corresponding MIO_RST_CNTL[PRTMODE] CSR field:                                                           If PRTMODE == 0, then SOFT_PRST resets to 0                                                           If PRTMODE != 0, then SOFT_PRST resets to 1 */
else|#
directive|else
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_prst2_s
name|cn66xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_prst2
name|cvmx_ciu_soft_prst2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_prst3  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_prst3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_prst3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
comment|/**< Resets the      sRIO logic in all modes, not just                                                          RC mode. The reset value is based on the                                                          corresponding MIO_RST_CNTL[PRTMODE] CSR field:                                                           If PRTMODE == 0, then SOFT_PRST resets to 0                                                           If PRTMODE != 0, then SOFT_PRST resets to 1 */
else|#
directive|else
name|uint64_t
name|soft_prst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_prst3_s
name|cn66xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_prst3
name|cvmx_ciu_soft_prst3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_soft_rst  */
end_comment

begin_union
union|union
name|cvmx_ciu_soft_rst
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_soft_rst_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|soft_rst
range|:
literal|1
decl_stmt|;
comment|/**< Resets Octeon                                                          When soft reseting Octeon from a remote PCIe                                                          host, always read CIU_SOFT_RST (and wait for                                                          result) before writing SOFT_RST to '1'. */
else|#
directive|else
name|uint64_t
name|soft_rst
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_soft_rst_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_soft_rst
name|cvmx_ciu_soft_rst_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum1_io#_int  *  * Notes:  * SUM1 becomes per IPx in o65/6 and afterwards. Only Field<40> DPI_DMA will have  * different value per PP(IP) for  $CIU_SUM1_PPx_IPy, and<40> DPI_DMA will always  * be zero for  $CIU_SUM1_IOX_INT. All other fields ([63:41] and [39:0]) values  are idential for  * different PPs, same value as $CIU_INT_SUM1.  * Write to any IRQ's PTP fields will clear PTP for all IRQ's PTP field.  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum1_iox_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum1_iox_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum1_iox_int_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_sum1_iox_int_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< 10 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_sum1_iox_int_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum1_iox_int
name|cvmx_ciu_sum1_iox_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum1_pp#_ip2  *  * Notes:  * SUM1 becomes per IPx in o65/6 and afterwards. Only Field<40> DPI_DMA will have  * different value per PP(IP) for  $CIU_SUM1_PPx_IPy, and<40> DPI_DMA will always  * be zero for  $CIU_SUM1_IOX_INT. All other fields ([63:41] and [39:0]) values  are idential for  * different PPs, same value as $CIU_INT_SUM1.  * Write to any IRQ's PTP fields will clear PTP for all IRQ's PTP field.  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum1_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip2_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip2_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< 10 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip2_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum1_ppx_ip2
name|cvmx_ciu_sum1_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum1_pp#_ip3  *  * Notes:  * SUM1 becomes per IPx in o65/6 and afterwards. Only Field<40> DPI_DMA will have  * different value per PP(IP) for  $CIU_SUM1_PPx_IPy, and<40> DPI_DMA will always  * be zero for  $CIU_SUM1_IOX_INT. All other fields ([63:41] and [39:0]) values  are idential for  * different PPs, same value as $CIU_INT_SUM1.  * Write to any IRQ's PTP fields will clear PTP for all IRQ's PTP field.  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum1_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip3_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip3_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< 10 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip3_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum1_ppx_ip3
name|cvmx_ciu_sum1_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum1_pp#_ip4  *  * Notes:  * SUM1 becomes per IPx in o65/6 and afterwards. Only Field<40> DPI_DMA will have  * different value per PP(IP) for  $CIU_SUM1_PPx_IPy, and<40> DPI_DMA will always  * be zero for  $CIU_SUM1_IOX_INT. All other fields ([63:41] and [39:0]) values  are idential for  * different PPs, same value as $CIU_INT_SUM1.  * Write to any IRQ's PTP fields will clear PTP for all IRQ's PTP field.  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum1_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip4_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_17
range|:
literal|14
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_39
range|:
literal|2
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_45
range|:
literal|5
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip4_cn66xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
comment|/**< SRIO3 interrupt                                                          See SRIO3_INT_REG, SRIO3_INT2_REG */
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
comment|/**< SRIO2 interrupt                                                          See SRIO2_INT_REG, SRIO2_INT2_REG */
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
comment|/**< DFM Interrupt                                                          See DFM_FNT_STAT */
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
comment|/**< SRIO0 interrupt                                                          See SRIO0_INT_REG, SRIO0_INT2_REG */
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
comment|/**< AGL interrupt                                                          See AGL_GMX_RX*_INT_REG, AGL_GMX_TX_INT_REG */
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
comment|/**< GMX1 interrupt                                                          See GMX1_RX*_INT_REG, GMX1_TX_INT_REG,                                                          PCS1_INT*_REG, PCSX1_INT_REG */
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
comment|/**< DFA interrupt                                                          See DFA_ERROR */
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
comment|/**< ZIP interrupt                                                          See ZIP_ERROR */
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< NAND Flash Controller interrupt                                                          See NDF_INT */
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
comment|/**< RGMII/MII/MIX Interface 1 Interrupt                                                          See MIX1_ISR */
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
comment|/**< 10 watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|10
decl_stmt|;
name|uint64_t
name|reserved_10_17
range|:
literal|8
decl_stmt|;
name|uint64_t
name|mii1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|zip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dfa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_38_45
range|:
literal|8
decl_stmt|;
name|uint64_t
name|agl
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_51_51
range|:
literal|1
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_55
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dfm
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_57_59
range|:
literal|3
decl_stmt|;
name|uint64_t
name|srio2
range|:
literal|1
decl_stmt|;
name|uint64_t
name|srio3
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_62_62
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cn66xx
struct|;
struct|struct
name|cvmx_ciu_sum1_ppx_ip4_cnf71xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
comment|/**< MIO RST interrupt                                                          See MIO_RST_INT */
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
comment|/**< LMC0 interrupt                                                          See LMC0_INT */
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
comment|/**< PEM1 interrupt                                                          See PEM1_INT_SUM (enabled by PEM1_INT_ENB) */
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
comment|/**< PEM0 interrupt                                                          See PEM0_INT_SUM (enabled by PEM0_INT_ENB) */
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
comment|/**< PTP interrupt                                                          Set when HW decrements MIO_PTP_EVT_CNT to zero */
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
comment|/**< DPI DMA instruction completion  interrupt                                                          TBD, See DPI DMA instruction completion */
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
comment|/**< GMX0 interrupt                                                          See GMX0_RX*_INT_REG, GMX0_TX_INT_REG,                                                          PCS0_INT*_REG, PCSX0_INT_REG */
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
comment|/**< DPI interrupt                                                          See DPI_INT_REG */
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
comment|/**< SLI interrupt                                                          See SLI_INT_SUM (enabled by SLI_INT_ENB_CIU) */
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
comment|/**< USB UCTL0 interrupt                                                          See UCTL0_INT_REG */
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
comment|/**< KEY interrupt                                                          See KEY_INT_SUM */
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
comment|/**< RAD interrupt                                                          See RAD_REG_ERROR */
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
comment|/**< TIM interrupt                                                          See TIM_REG_ERROR */
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
comment|/**< PKO interrupt                                                          See PKO_REG_ERROR */
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
comment|/**< PIP interrupt                                                          See PIP_INT_REG */
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
comment|/**< IPD interrupt                                                          See IPD_INT_SUM */
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
comment|/**< L2C interrupt                                                          See L2C_INT_REG */
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
comment|/**< POW err interrupt                                                          See POW_ECC_ERR */
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
comment|/**< FPA interrupt                                                          See FPA_INT_SUM */
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
comment|/**< IOB interrupt                                                          See IOB_INT_SUM */
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
comment|/**< MIO boot interrupt                                                          See MIO_BOOT_ERR */
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
comment|/**< EMMC Flash Controller interrupt                                                          See EMMC interrupt */
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
comment|/**< Per PP watchdog interrupts */
else|#
directive|else
name|uint64_t
name|wdog
range|:
literal|4
decl_stmt|;
name|uint64_t
name|reserved_4_18
range|:
literal|15
decl_stmt|;
name|uint64_t
name|nand
range|:
literal|1
decl_stmt|;
name|uint64_t
name|mio
range|:
literal|1
decl_stmt|;
name|uint64_t
name|iob
range|:
literal|1
decl_stmt|;
name|uint64_t
name|fpa
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pow
range|:
literal|1
decl_stmt|;
name|uint64_t
name|l2c
range|:
literal|1
decl_stmt|;
name|uint64_t
name|ipd
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pip
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pko
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_28_28
range|:
literal|1
decl_stmt|;
name|uint64_t
name|tim
range|:
literal|1
decl_stmt|;
name|uint64_t
name|rad
range|:
literal|1
decl_stmt|;
name|uint64_t
name|key
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_32_32
range|:
literal|1
decl_stmt|;
name|uint64_t
name|usb
range|:
literal|1
decl_stmt|;
name|uint64_t
name|sli
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dpi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|agx0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_39
range|:
literal|3
decl_stmt|;
name|uint64_t
name|dpi_dma
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_41_46
range|:
literal|6
decl_stmt|;
name|uint64_t
name|ptp
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|pem1
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_50_51
range|:
literal|2
decl_stmt|;
name|uint64_t
name|lmc0
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_53_62
range|:
literal|10
decl_stmt|;
name|uint64_t
name|rst
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
name|cnf71xx
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum1_ppx_ip4
name|cvmx_ciu_sum1_ppx_ip4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum2_io#_int  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum2_iox_int
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum2_iox_int_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts, see ENDOR interrupt status                                                          register ENDOR_RSTCLK_INTR0(1)_STATUS for details */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt, see EOI_INT_STA */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum2_iox_int_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_sum2_iox_int_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_sum2_iox_int_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum2_iox_int
name|cvmx_ciu_sum2_iox_int_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum2_pp#_ip2  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum2_ppx_ip2
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip2_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts, see ENDOR interrupt status                                                          register ENDOR_RSTCLK_INTR0(1)_STATUS for details */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt, see EOI_INT_STA */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip2_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_sum2_ppx_ip2_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_sum2_ppx_ip2_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum2_ppx_ip2
name|cvmx_ciu_sum2_ppx_ip2_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum2_pp#_ip3  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum2_ppx_ip3
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip3_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts, see ENDOR interrupt status                                                          register ENDOR_RSTCLK_INTR0(1)_STATUS for details */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt, see EOI_INT_STA */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip3_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_sum2_ppx_ip3_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_sum2_ppx_ip3_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum2_ppx_ip3
name|cvmx_ciu_sum2_ppx_ip3_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_sum2_pp#_ip4  *  * Notes:  * These SUM2 CSR's did not exist prior to pass 1.2. CIU_TIM4-9 did not exist prior to pass 1.2.  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_sum2_ppx_ip4
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip4_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
comment|/**< ENDOR PHY interrupts, see ENDOR interrupt status                                                          register ENDOR_RSTCLK_INTR0(1)_STATUS for details */
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
comment|/**< EOI rsl interrupt, see EOI_INT_STA */
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_11
range|:
literal|2
decl_stmt|;
name|uint64_t
name|eoi
range|:
literal|1
decl_stmt|;
name|uint64_t
name|endor
range|:
literal|2
decl_stmt|;
name|uint64_t
name|reserved_15_63
range|:
literal|49
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
struct|struct
name|cvmx_ciu_sum2_ppx_ip4_cn61xx
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
comment|/**< General timer 4-9 interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 0, this interrupt is                                                          common for all PP/IRQs, writing '1' to any PP/IRQ                                                          will clear all TIMERx(x=0..9) interrupts.                                                          When CIU_TIM_MULTI_CAST[EN] == 1, TIMERx(x=0..9)                                                          are set at the same time, but clearing are based on                                                          per cnMIPS core. See CIU_TIM_MULTI_CAST for detail.                                                          The combination of this field and the                                                          CIU_INT*_SUM0/4[TIMER] field implement all 10                                                          CIU_TIM* interrupts. */
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
else|#
directive|else
name|uint64_t
name|reserved_0_3
range|:
literal|4
decl_stmt|;
name|uint64_t
name|timer
range|:
literal|6
decl_stmt|;
name|uint64_t
name|reserved_10_63
range|:
literal|54
decl_stmt|;
endif|#
directive|endif
block|}
name|cn61xx
struct|;
name|struct
name|cvmx_ciu_sum2_ppx_ip4_cn61xx
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_sum2_ppx_ip4_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_sum2_ppx_ip4
name|cvmx_ciu_sum2_ppx_ip4_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_tim#  *  * Notes:  * CIU_TIM4-9 did not exist prior to pass 1.2  *  */
end_comment

begin_union
union|union
name|cvmx_ciu_timx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_timx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
name|uint64_t
name|one_shot
range|:
literal|1
decl_stmt|;
comment|/**< One-shot mode */
name|uint64_t
name|len
range|:
literal|36
decl_stmt|;
comment|/**< Timeout length in core clock cycles                                                          Periodic interrupts will occur every LEN+1 core                                                          clock cycles when ONE_SHOT==0                                                          Timer disabled when LEN==0 */
else|#
directive|else
name|uint64_t
name|len
range|:
literal|36
decl_stmt|;
name|uint64_t
name|one_shot
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_37_63
range|:
literal|27
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_timx_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_timx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_timx
name|cvmx_ciu_timx_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_tim_multi_cast  *  * Notes:  * This register does not exist prior to pass 1.2 silicon. Those earlier chip passes operate as if  * EN==0.  */
end_comment

begin_union
union|union
name|cvmx_ciu_tim_multi_cast
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_tim_multi_cast_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
comment|/**< General Timer Interrupt Mutli-Cast mode:                                                          - 0: Timer interrupt is common for all PP/IRQs.                                                          - 1: Timer interrupts are set at the same time for                                                             all PP/IRQs, but interrupt clearings can/need                                                             to be done Individually based on per cnMIPS core.                                                           Timer interrupts for IOs (X=32,33) will always use                                                           common interrupts. Clear any of the I/O interrupts                                                           will clear the common interrupt. */
else|#
directive|else
name|uint64_t
name|en
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_1_63
range|:
literal|63
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_tim_multi_cast_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_tim_multi_cast_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_tim_multi_cast_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_tim_multi_cast
name|cvmx_ciu_tim_multi_cast_t
typedef|;
end_typedef

begin_comment
comment|/**  * cvmx_ciu_wdog#  */
end_comment

begin_union
union|union
name|cvmx_ciu_wdogx
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
name|cvmx_ciu_wdogx_s
block|{
ifdef|#
directive|ifdef
name|__BIG_ENDIAN_BITFIELD
name|uint64_t
name|reserved_46_63
range|:
literal|18
decl_stmt|;
name|uint64_t
name|gstopen
range|:
literal|1
decl_stmt|;
comment|/**< GSTOPEN */
name|uint64_t
name|dstop
range|:
literal|1
decl_stmt|;
comment|/**< DSTOP */
name|uint64_t
name|cnt
range|:
literal|24
decl_stmt|;
comment|/**< Number of 256-cycle intervals until next watchdog                                                          expiration.  Cleared on write to associated                                                          CIU_PP_POKE register. */
name|uint64_t
name|len
range|:
literal|16
decl_stmt|;
comment|/**< Watchdog time expiration length                                                          The 16 bits of LEN represent the most significant                                                          bits of a 24 bit decrementer that decrements                                                          every 256 cycles.                                                          LEN must be set> 0 */
name|uint64_t
name|state
range|:
literal|2
decl_stmt|;
comment|/**< Watchdog state                                                          number of watchdog time expirations since last                                                          PP poke.  Cleared on write to associated                                                          CIU_PP_POKE register. */
name|uint64_t
name|mode
range|:
literal|2
decl_stmt|;
comment|/**< Watchdog mode                                                          0 = Off                                                          1 = Interrupt Only                                                          2 = Interrupt + NMI                                                          3 = Interrupt + NMI + Soft-Reset */
else|#
directive|else
name|uint64_t
name|mode
range|:
literal|2
decl_stmt|;
name|uint64_t
name|state
range|:
literal|2
decl_stmt|;
name|uint64_t
name|len
range|:
literal|16
decl_stmt|;
name|uint64_t
name|cnt
range|:
literal|24
decl_stmt|;
name|uint64_t
name|dstop
range|:
literal|1
decl_stmt|;
name|uint64_t
name|gstopen
range|:
literal|1
decl_stmt|;
name|uint64_t
name|reserved_46_63
range|:
literal|18
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn30xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn31xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn38xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn38xxp2
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn50xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn52xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn52xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn56xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn56xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn58xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn58xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn61xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn63xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn63xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn66xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn68xx
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cn68xxp1
decl_stmt|;
name|struct
name|cvmx_ciu_wdogx_s
name|cnf71xx
decl_stmt|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|cvmx_ciu_wdogx
name|cvmx_ciu_wdogx_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

