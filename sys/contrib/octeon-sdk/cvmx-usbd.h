begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_USBD_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_USBD_H__
end_define

begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * "cvmx-usbd.h" defines a set of low level USB functions to help developers  * create Octeon USB devices for various operating systems. These functions  * provide a generic API to the Octeon USB blocks, hiding the internal hardware  * specific operations.  *  *<hr>$Revision: 32636 $<hr>  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
enum|enum
block|{
name|CVMX_USBD_TRANSFER_CONTROL
init|=
literal|0
block|,
name|CVMX_USBD_TRANSFER_ISOCHRONOUS
init|=
literal|1
block|,
name|CVMX_USBD_TRANSFER_BULK
init|=
literal|2
block|,
name|CVMX_USBD_TRANSFER_INTERRUPT
init|=
literal|3
block|, }
name|cvmx_usbd_transfer_t
typedef|;
typedef|typedef
enum|enum
block|{
name|CVMX_USBD_SPEED_HIGH
init|=
literal|0
block|,
name|CVMX_USBD_SPEED_FULL
init|=
literal|1
block|,
name|CVMX_USBD_SPEED_LOW
init|=
literal|2
block|, }
name|cvmx_usbd_speed_t
typedef|;
typedef|typedef
enum|enum
block|{
name|CVMX_USBD_CALLBACK_SUSPEND
block|,
name|CVMX_USBD_CALLBACK_RESET
block|,
name|CVMX_USBD_CALLBACK_ENUM_COMPLETE
block|,
name|CVMX_USBD_CALLBACK_DEVICE_SETUP
block|,
name|CVMX_USBD_CALLBACK_IN_COMPLETE
block|,
name|CVMX_USBD_CALLBACK_OUT_COMPLETE
block|,
name|__CVMX_USBD_CALLBACK_END
block|}
name|cvmx_usbd_callback_t
typedef|;
typedef|typedef
enum|enum
block|{
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_XO_XI
init|=
literal|1
operator|<<
literal|0
block|,
comment|/**< The USB port uses a 12MHz crystal as clock source                                                             at USB_XO and USB_XI. */
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_XO_GND
init|=
literal|1
operator|<<
literal|1
block|,
comment|/**< The USB port uses 12/24/48MHz 2.5V board clock                                                             source at USB_XO. USB_XI should be tied to GND.*/
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_AUTO
init|=
literal|0
block|,
comment|/**< Automatically determine clock type based on function                                                              in cvmx-helper-board.c. */
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_MHZ_MASK
init|=
literal|3
operator|<<
literal|3
block|,
comment|/**< Mask for clock speed field */
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_12MHZ
init|=
literal|1
operator|<<
literal|3
block|,
comment|/**< Speed of reference clock or crystal */
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_24MHZ
init|=
literal|2
operator|<<
literal|3
block|,
comment|/**< Speed of reference clock */
name|CVMX_USBD_INITIALIZE_FLAGS_CLOCK_48MHZ
init|=
literal|3
operator|<<
literal|3
block|,
comment|/**< Speed of reference clock */
comment|/* Bits 3-4 used to encode the clock frequency */
name|CVMX_USBD_INITIALIZE_FLAGS_DEBUG
init|=
literal|1
operator|<<
literal|16
block|}
name|cvmx_usbd_initialize_flags_t
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|cvmx_usbd_callback_func_t
function_decl|)
parameter_list|(
name|cvmx_usbd_callback_t
name|reason
parameter_list|,
name|int
name|endpoint_num
parameter_list|,
name|int
name|bytes_transferred
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
block|{
name|int
name|init_flags
decl_stmt|;
name|int
name|index
decl_stmt|;
name|cvmx_usbd_callback_func_t
name|callback
index|[
name|__CVMX_USBD_CALLBACK_END
index|]
decl_stmt|;
name|void
modifier|*
name|callback_data
index|[
name|__CVMX_USBD_CALLBACK_END
index|]
decl_stmt|;
struct|struct
block|{
name|int
name|buffer_length
decl_stmt|;
block|}
name|endpoint
index|[
literal|16
index|]
struct|;
block|}
name|cvmx_usbd_state_t
typedef|;
comment|/**  * Initialize a USB port for use. This must be called before any  * other access to the Octeon USB port is made. The port starts  * off in the disabled state.  *  * @param usb    Pointer to an empty cvmx_usbd_state_t structure  *               that will be populated by the initialize call.  *               This structure is then passed to all other USB  *               functions.  * @param usb_port_number  *               Which Octeon USB port to initialize.  * @param flags  Flags to control hardware initialization. See  *               cvmx_usbd_initialize_flags_t for the flag  *               definitions. Some flags are mandatory.  *  * @return Zero or a negative on error.  */
name|int
name|cvmx_usbd_initialize
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|usb_port_number
parameter_list|,
name|cvmx_usbd_initialize_flags_t
name|flags
parameter_list|)
function_decl|;
comment|/**  * Shutdown a USB port after a call to cvmx_usbd_initialize().  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  *  * @return Zero or a negative on error.  */
name|int
name|cvmx_usbd_shutdown
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Enable a USB port. After this call succeeds, the USB port is  * online and servicing requests.  *  * @param usb  USB device state populated by  *               cvmx_usb_initialize().  *  * @return Zero or negative on error.  */
name|int
name|cvmx_usbd_enable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Disable a USB port. After this call the USB port will not  * generate data transfers and will not generate events.  *  * @param usb    USB device state populated by  *               cvmx_usb_initialize().  *  * @return Zero or negative on error.  */
name|int
name|cvmx_usbd_disable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Register a callback function to process USB events  *  * @param usb       USB device state populated by  *                  cvmx_usbd_initialize().  * @param reason    The reason this callback should be called  * @param func      Function to call  * @param user_data User supplied data for the callback  *  * @return Zero on succes, negative on failure  */
name|int
name|cvmx_usbd_register
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|cvmx_usbd_callback_t
name|reason
parameter_list|,
name|cvmx_usbd_callback_func_t
name|func
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
comment|/**  * Poll the USB block for status and call all needed callback  * handlers. This function is meant to be called in the interrupt  * handler for the USB controller. It can also be called  * periodically in a loop for non-interrupt based operation.  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  *  * @return Zero or negative on error.  */
name|int
name|cvmx_usbd_poll
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Get the current USB address  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  *  * @return The USB address  */
name|int
name|cvmx_usbd_get_address
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Set the current USB address  *  * @param usb     USB device state populated by  *                cvmx_usbd_initialize().  * @param address Address to set  */
name|void
name|cvmx_usbd_set_address
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|address
parameter_list|)
function_decl|;
comment|/**  * Get the current USB speed  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  *  * @return The USB speed  */
name|cvmx_usbd_speed_t
name|cvmx_usbd_get_speed
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|)
function_decl|;
comment|/**  * Set the current USB speed  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  * @param speed  The requested speed  */
name|void
name|cvmx_usbd_set_speed
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|cvmx_usbd_speed_t
name|speed
parameter_list|)
function_decl|;
comment|/**  * Enable an endpoint to respond to an OUT transaction  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  * @param endpoint_num  *               Endpoint number to enable  * @param transfer_type  *               Transfer type for the endpoint  * @param max_packet_size  *               Maximum packet size for the endpoint  * @param buffer Buffer to receive the data  * @param buffer_length  *               Length of the buffer in bytes  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_usbd_out_endpoint_enable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|endpoint_num
parameter_list|,
name|cvmx_usbd_transfer_t
name|transfer_type
parameter_list|,
name|int
name|max_packet_size
parameter_list|,
name|uint64_t
name|buffer
parameter_list|,
name|int
name|buffer_length
parameter_list|)
function_decl|;
comment|/**  * Disable an OUT endpoint  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  * @param endpoint_num  *               Endpoint number to disable  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_usbd_out_endpoint_disable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|endpoint_num
parameter_list|)
function_decl|;
comment|/**  * Enable an endpoint to respond to an IN transaction  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  * @param endpoint_num  *               Endpoint number to enable  * @param transfer_type  *               Transfer type for the endpoint  * @param max_packet_size  *               Maximum packet size for the endpoint  * @param buffer Buffer to send  * @param buffer_length  *               Length of the buffer in bytes  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_usbd_in_endpoint_enable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|endpoint_num
parameter_list|,
name|cvmx_usbd_transfer_t
name|transfer_type
parameter_list|,
name|int
name|max_packet_size
parameter_list|,
name|uint64_t
name|buffer
parameter_list|,
name|int
name|buffer_length
parameter_list|)
function_decl|;
comment|/**  * Disable an IN endpoint  *  * @param usb    USB device state populated by  *               cvmx_usbd_initialize().  * @param endpoint_num  *               Endpoint number to disable  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_usbd_in_endpoint_disable
parameter_list|(
name|cvmx_usbd_state_t
modifier|*
name|usb
parameter_list|,
name|int
name|endpoint_num
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_USBD_H__ */
end_comment

end_unit

