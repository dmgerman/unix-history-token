begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Interface to the hardware Input Packet Data unit.  *  *<hr>$Revision: 41586 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_IPD_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_IPD_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CVMX_DONT_INCLUDE_CONFIG
end_ifndef

begin_include
include|#
directive|include
file|"executive-config.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|CVMX_ENABLE_PKO_FUNCTIONS
end_ifdef

begin_include
include|#
directive|include
file|"cvmx-config.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|CVMX_ENABLE_LEN_M8_FIX
define|#
directive|define
name|CVMX_ENABLE_LEN_M8_FIX
value|0
endif|#
directive|endif
comment|/* CSR typedefs have been moved to cvmx-csr-*.h */
typedef|typedef
name|cvmx_ipd_mbuff_first_skip_t
name|cvmx_ipd_mbuff_not_first_skip_t
typedef|;
typedef|typedef
name|cvmx_ipd_first_next_ptr_back_t
name|cvmx_ipd_second_next_ptr_back_t
typedef|;
comment|/**  * Configure IPD  *  * @param mbuff_size Packets buffer size in 8 byte words  * @param first_mbuff_skip  *                   Number of 8 byte words to skip in the first buffer  * @param not_first_mbuff_skip  *                   Number of 8 byte words to skip in each following buffer  * @param first_back Must be same as first_mbuff_skip / 128  * @param second_back  *                   Must be same as not_first_mbuff_skip / 128  * @param wqe_fpa_pool  *                   FPA pool to get work entries from  * @param cache_mode  * @param back_pres_enable_flag  *                   Enable or disable port back pressure  */
specifier|static
specifier|inline
name|void
name|cvmx_ipd_config
parameter_list|(
name|uint64_t
name|mbuff_size
parameter_list|,
name|uint64_t
name|first_mbuff_skip
parameter_list|,
name|uint64_t
name|not_first_mbuff_skip
parameter_list|,
name|uint64_t
name|first_back
parameter_list|,
name|uint64_t
name|second_back
parameter_list|,
name|uint64_t
name|wqe_fpa_pool
parameter_list|,
name|cvmx_ipd_mode_t
name|cache_mode
parameter_list|,
name|uint64_t
name|back_pres_enable_flag
parameter_list|)
block|{
name|cvmx_ipd_mbuff_first_skip_t
name|first_skip
decl_stmt|;
name|cvmx_ipd_mbuff_not_first_skip_t
name|not_first_skip
decl_stmt|;
name|cvmx_ipd_mbuff_size_t
name|size
decl_stmt|;
name|cvmx_ipd_first_next_ptr_back_t
name|first_back_struct
decl_stmt|;
name|cvmx_ipd_second_next_ptr_back_t
name|second_back_struct
decl_stmt|;
name|cvmx_ipd_wqe_fpa_pool_t
name|wqe_pool
decl_stmt|;
name|cvmx_ipd_ctl_status_t
name|ipd_ctl_reg
decl_stmt|;
name|first_skip
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|first_skip
operator|.
name|s
operator|.
name|skip_sz
operator|=
name|first_mbuff_skip
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_1ST_MBUFF_SKIP
argument_list|,
name|first_skip
operator|.
name|u64
argument_list|)
expr_stmt|;
name|not_first_skip
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|not_first_skip
operator|.
name|s
operator|.
name|skip_sz
operator|=
name|not_first_mbuff_skip
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_NOT_1ST_MBUFF_SKIP
argument_list|,
name|not_first_skip
operator|.
name|u64
argument_list|)
expr_stmt|;
name|size
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|size
operator|.
name|s
operator|.
name|mb_size
operator|=
name|mbuff_size
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PACKET_MBUFF_SIZE
argument_list|,
name|size
operator|.
name|u64
argument_list|)
expr_stmt|;
name|first_back_struct
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|first_back_struct
operator|.
name|s
operator|.
name|back
operator|=
name|first_back
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_1st_NEXT_PTR_BACK
argument_list|,
name|first_back_struct
operator|.
name|u64
argument_list|)
expr_stmt|;
name|second_back_struct
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|second_back_struct
operator|.
name|s
operator|.
name|back
operator|=
name|second_back
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_2nd_NEXT_PTR_BACK
argument_list|,
name|second_back_struct
operator|.
name|u64
argument_list|)
expr_stmt|;
name|wqe_pool
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|wqe_pool
operator|.
name|s
operator|.
name|wqe_pool
operator|=
name|wqe_fpa_pool
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_WQE_FPA_QUEUE
argument_list|,
name|wqe_pool
operator|.
name|u64
argument_list|)
expr_stmt|;
name|ipd_ctl_reg
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|)
expr_stmt|;
name|ipd_ctl_reg
operator|.
name|s
operator|.
name|opc_mode
operator|=
name|cache_mode
expr_stmt|;
name|ipd_ctl_reg
operator|.
name|s
operator|.
name|pbp_en
operator|=
name|back_pres_enable_flag
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|,
name|ipd_ctl_reg
operator|.
name|u64
argument_list|)
expr_stmt|;
comment|/* Note: the example RED code that used to be here has been moved to         cvmx_helper_setup_red */
block|}
comment|/**  * Enable IPD  */
specifier|static
specifier|inline
name|void
name|cvmx_ipd_enable
parameter_list|(
name|void
parameter_list|)
block|{
name|cvmx_ipd_ctl_status_t
name|ipd_reg
decl_stmt|;
name|ipd_reg
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ipd_reg
operator|.
name|s
operator|.
name|ipd_en
condition|)
block|{
name|cvmx_dprintf
argument_list|(
literal|"Warning: Enabling IPD when IPD already enabled.\n"
argument_list|)
expr_stmt|;
block|}
name|ipd_reg
operator|.
name|s
operator|.
name|ipd_en
operator|=
name|TRUE
expr_stmt|;
if|#
directive|if
name|CVMX_ENABLE_LEN_M8_FIX
if|if
condition|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX_PASS2
argument_list|)
condition|)
block|{
name|ipd_reg
operator|.
name|s
operator|.
name|len_m8
operator|=
name|TRUE
expr_stmt|;
block|}
endif|#
directive|endif
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|,
name|ipd_reg
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * Disable IPD  */
specifier|static
specifier|inline
name|void
name|cvmx_ipd_disable
parameter_list|(
name|void
parameter_list|)
block|{
name|cvmx_ipd_ctl_status_t
name|ipd_reg
decl_stmt|;
name|ipd_reg
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|)
expr_stmt|;
name|ipd_reg
operator|.
name|s
operator|.
name|ipd_en
operator|=
name|FALSE
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|,
name|ipd_reg
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|CVMX_ENABLE_PKO_FUNCTIONS
comment|/**  * Supportive function for cvmx_fpa_shutdown_pool.  */
specifier|static
specifier|inline
name|void
name|cvmx_ipd_free_ptr
parameter_list|(
name|void
parameter_list|)
block|{
comment|/* Only CN38XXp{1,2} cannot read pointer out of the IPD */
if|if
condition|(
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX_PASS1
argument_list|)
operator|&&
operator|!
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN38XX_PASS2
argument_list|)
condition|)
block|{
name|int
name|no_wptr
init|=
literal|0
decl_stmt|;
name|cvmx_ipd_ptr_count_t
name|ipd_ptr_count
decl_stmt|;
name|ipd_ptr_count
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PTR_COUNT
argument_list|)
expr_stmt|;
comment|/* Handle Work Queue Entry in cn56xx and cn52xx */
if|if
condition|(
name|octeon_has_feature
argument_list|(
name|OCTEON_FEATURE_NO_WPTR
argument_list|)
condition|)
block|{
name|cvmx_ipd_ctl_status_t
name|ipd_ctl_status
decl_stmt|;
name|ipd_ctl_status
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|)
expr_stmt|;
if|if
condition|(
name|ipd_ctl_status
operator|.
name|s
operator|.
name|no_wptr
condition|)
name|no_wptr
operator|=
literal|1
expr_stmt|;
block|}
comment|/* Free the prefetched WQE */
if|if
condition|(
name|ipd_ptr_count
operator|.
name|s
operator|.
name|wqev_cnt
condition|)
block|{
name|cvmx_ipd_wqe_ptr_valid_t
name|ipd_wqe_ptr_valid
decl_stmt|;
name|ipd_wqe_ptr_valid
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_WQE_PTR_VALID
argument_list|)
expr_stmt|;
if|if
condition|(
name|no_wptr
condition|)
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_wqe_ptr_valid
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_wqe_ptr_valid
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_WQE_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* Free all WQE in the fifo */
if|if
condition|(
name|ipd_ptr_count
operator|.
name|s
operator|.
name|wqe_pcnt
condition|)
block|{
name|int
name|i
decl_stmt|;
name|cvmx_ipd_pwp_ptr_fifo_ctl_t
name|ipd_pwp_ptr_fifo_ctl
decl_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ipd_ptr_count
operator|.
name|s
operator|.
name|wqe_pcnt
condition|;
name|i
operator|++
control|)
block|{
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|0
expr_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|raddr
operator|=
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_cnts
operator|+
operator|(
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|wraddr
operator|+
name|i
operator|)
operator|%
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_cnts
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|,
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
if|if
condition|(
name|no_wptr
condition|)
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_WQE_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|,
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/* Free the prefetched packet */
if|if
condition|(
name|ipd_ptr_count
operator|.
name|s
operator|.
name|pktv_cnt
condition|)
block|{
name|cvmx_ipd_pkt_ptr_valid_t
name|ipd_pkt_ptr_valid
decl_stmt|;
name|ipd_pkt_ptr_valid
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PKT_PTR_VALID
argument_list|)
expr_stmt|;
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
name|ipd_pkt_ptr_valid
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* Free the per port prefetched packets */
if|if
condition|(
literal|1
condition|)
block|{
name|int
name|i
decl_stmt|;
name|cvmx_ipd_prc_port_ptr_fifo_ctl_t
name|ipd_prc_port_ptr_fifo_ctl
decl_stmt|;
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_pkt
condition|;
name|i
operator|++
control|)
block|{
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|0
expr_stmt|;
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|raddr
operator|=
name|i
operator|%
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_pkt
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL
argument_list|,
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PRC_PORT_PTR_FIFO_CTL
argument_list|,
name|ipd_prc_port_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/* Free all packets in the holding fifo */
if|if
condition|(
name|ipd_ptr_count
operator|.
name|s
operator|.
name|pfif_cnt
condition|)
block|{
name|int
name|i
decl_stmt|;
name|cvmx_ipd_prc_hold_ptr_fifo_ctl_t
name|ipd_prc_hold_ptr_fifo_ctl
decl_stmt|;
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ipd_ptr_count
operator|.
name|s
operator|.
name|pfif_cnt
condition|;
name|i
operator|++
control|)
block|{
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|0
expr_stmt|;
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|raddr
operator|=
operator|(
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|praddr
operator|+
name|i
operator|)
operator|%
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_pkt
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL
argument_list|,
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PRC_HOLD_PTR_FIFO_CTL
argument_list|,
name|ipd_prc_hold_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/* Free all packets in the fifo */
if|if
condition|(
name|ipd_ptr_count
operator|.
name|s
operator|.
name|pkt_pcnt
condition|)
block|{
name|int
name|i
decl_stmt|;
name|cvmx_ipd_pwp_ptr_fifo_ctl_t
name|ipd_pwp_ptr_fifo_ctl
decl_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ipd_ptr_count
operator|.
name|s
operator|.
name|pkt_pcnt
condition|;
name|i
operator|++
control|)
block|{
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|0
expr_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|raddr
operator|=
operator|(
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|praddr
operator|+
name|i
operator|)
operator|%
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|max_cnts
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|,
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|)
expr_stmt|;
name|cvmx_fpa_free
argument_list|(
name|cvmx_phys_to_ptr
argument_list|(
operator|(
name|uint64_t
operator|)
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|ptr
operator|<<
literal|7
argument_list|)
argument_list|,
name|CVMX_FPA_PACKET_POOL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|s
operator|.
name|cena
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_PWP_PTR_FIFO_CTL
argument_list|,
name|ipd_pwp_ptr_fifo_ctl
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/* Reset the IPD to get all buffers out of it */
block|{
name|cvmx_ipd_ctl_status_t
name|ipd_ctl_status
decl_stmt|;
name|ipd_ctl_status
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|)
expr_stmt|;
name|ipd_ctl_status
operator|.
name|s
operator|.
name|reset
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_IPD_CTL_STATUS
argument_list|,
name|ipd_ctl_status
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/* Reset the PIP */
block|{
name|cvmx_pip_sft_rst_t
name|pip_sft_rst
decl_stmt|;
name|pip_sft_rst
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_PIP_SFT_RST
argument_list|)
expr_stmt|;
name|pip_sft_rst
operator|.
name|s
operator|.
name|rst
operator|=
literal|1
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_PIP_SFT_RST
argument_list|,
name|pip_sft_rst
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
block|}
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  __CVMX_IPD_H__ */
end_comment

end_unit

