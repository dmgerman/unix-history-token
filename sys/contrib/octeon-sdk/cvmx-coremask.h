begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Module to support operations on bitmap of cores. Coremask can be used to  * select a specific core, a group of cores, or all available cores, for  * initialization and differentiation of roles within a single shared binary  * executable image.  *  *<hr>$Revision: 70030 $<hr>  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_COREMASK_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_COREMASK_H__
end_define

begin_include
include|#
directive|include
file|"cvmx-asm.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|uint64_t
name|cvmx_coremask_holder_t
typedef|;
comment|/* basic type to hold the 						   coremask bits */
define|#
directive|define
name|CVMX_COREMASK_HLDRSZ
value|((int)(sizeof(cvmx_coremask_holder_t) * 8))
comment|/* bits per holder */
define|#
directive|define
name|CVMX_COREMASK_BMPSZ
value|((int)(CVMX_MAX_CORES / CVMX_COREMASK_HLDRSZ + 1))
comment|/* bit map size */
comment|/*  * The macro pair implement a way to iterate active cores in the mask.  * @param fec_pcm points to the coremask.  * @param fec_ppid is the active core's id.  */
define|#
directive|define
name|CVMX_COREMASK_FOR_EACH_CORE_BEGIN
parameter_list|(
name|fec_pcm
parameter_list|,
name|fec_ppid
parameter_list|)
define|\
value|do {								\     	int fec_i, fec_j;						\     				 					\ 	for (fec_i = 0; fec_i< CVMX_COREMASK_BMPSZ; fec_i++)		\ 	{								\ 	    for (fec_j = 0; fec_j< CVMX_COREMASK_HLDRSZ; fec_j++)	\ 	    { 								\ 		if (((cvmx_coremask_holder_t)1<< fec_j)& 		\ 		    (fec_pcm)->coremask_bitmap[fec_i])			\ 		{							\ 	            fec_ppid = fec_i * CVMX_COREMASK_HLDRSZ + fec_j;
define|#
directive|define
name|CVMX_COREMASK_FOR_EACH_CORE_END
define|\
value|}							\ 	    }								\ 	}								\    } while (0)
struct|struct
name|cvmx_coremask
block|{
comment|/*      * Big-endian. Array elems of larger indices represent cores of      * bigger ids. So do MSBs within a cvmx_coremask_holder_t. Ditto      * MSbs within a byte.      */
name|cvmx_coremask_holder_t
name|coremask_bitmap
index|[
name|CVMX_COREMASK_BMPSZ
index|]
decl_stmt|;
block|}
struct|;
comment|/*  * Is ``core'' set in the coremask?  *  * @param pcm is the pointer to the coremask.  * @param core  * @return 1 if core is set and 0 if not.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_is_set_core
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|,
name|int
name|core
parameter_list|)
block|{
name|int
name|n
decl_stmt|,
name|i
decl_stmt|;
name|n
operator|=
name|core
operator|%
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
name|i
operator|=
name|core
operator|/
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator|&
operator|(
literal|1ull
operator|<<
name|n
operator|)
operator|)
operator|!=
literal|0
argument_list|)
return|;
block|}
comment|/*  * Set ``core'' in the coremask.  *  * @param pcm is the pointer to the coremask.  * @param core  * @return 0.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_set_core
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|,
name|int
name|core
parameter_list|)
block|{
name|int
name|n
decl_stmt|,
name|i
decl_stmt|;
name|n
operator|=
name|core
operator|%
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
name|i
operator|=
name|core
operator|/
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator||=
operator|(
literal|1ull
operator|<<
name|n
operator|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*  * Clear ``core'' from the coremask.  *  * @param pcm is the pointer to the coremask.  * @param core  * @return 0.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_clear_core
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|,
name|int
name|core
parameter_list|)
block|{
name|int
name|n
decl_stmt|,
name|i
decl_stmt|;
name|n
operator|=
name|core
operator|%
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
name|i
operator|=
name|core
operator|/
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator|&=
operator|~
operator|(
literal|1ull
operator|<<
name|n
operator|)
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*  * Clear the coremask.  *  * @param pcm is the pointer to the coremask.  * @return 0.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_clear_all
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|)
block|{
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|CVMX_COREMASK_BMPSZ
condition|;
name|i
operator|++
control|)
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/*  * Is the current core the first in the coremask?  *  * @param pcm is the pointer to the coremask.  * @return 1 for yes and 0 for no.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_first_core_bmp
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|)
block|{
name|int
name|n
decl_stmt|,
name|i
decl_stmt|;
name|n
operator|=
operator|(
name|int
operator|)
name|cvmx_get_core_num
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|CVMX_COREMASK_BMPSZ
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
condition|)
block|{
if|if
condition|(
name|n
operator|==
literal|0
operator|&&
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator|&
literal|1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|n
operator|>=
name|CVMX_COREMASK_HLDRSZ
condition|)
return|return
literal|0
return|;
return|return
operator|(
operator|(
operator|(
operator|(
literal|1ull
operator|<<
name|n
operator|)
operator|-
literal|1
operator|)
operator|&
name|pcm
operator|->
name|coremask_bitmap
index|[
name|i
index|]
operator|)
operator|==
literal|0
operator|)
return|;
block|}
else|else
name|n
operator|-=
name|CVMX_COREMASK_HLDRSZ
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
comment|/*  * Is the current core a member of the coremask?  *  * @param pcm is the pointer to the coremask.  * @return 1 for yes and 0 for no.  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_is_member_bmp
parameter_list|(
name|struct
name|cvmx_coremask
modifier|*
name|pcm
parameter_list|)
block|{
return|return
name|cvmx_coremask_is_set_core
argument_list|(
name|pcm
argument_list|,
operator|(
name|int
operator|)
name|cvmx_get_core_num
argument_list|()
argument_list|)
return|;
block|}
comment|/*  * coremask is simply unsigned int (32 bits).  *  * NOTE: supports up to 32 cores maximum.  *  * union of coremasks is simply bitwise-or.  * intersection of coremasks is simply bitwise-and.  *  */
define|#
directive|define
name|CVMX_COREMASK_MAX
value|0xFFFFFFFFu
comment|/* maximum supported mask */
comment|/**  * Compute coremask for a specific core.  *  * @param  core_id  The core ID  *  * @return  coremask for a specific core  *  */
specifier|static
specifier|inline
name|unsigned
name|int
name|cvmx_coremask_core
parameter_list|(
name|unsigned
name|int
name|core_id
parameter_list|)
block|{
return|return
operator|(
literal|1u
operator|<<
name|core_id
operator|)
return|;
block|}
comment|/**  * Compute coremask for num_cores cores starting with core 0.  *  * @param  num_cores  number of cores  *  * @return  coremask for num_cores cores  *  */
specifier|static
specifier|inline
name|unsigned
name|int
name|cvmx_coremask_numcores
parameter_list|(
name|unsigned
name|int
name|num_cores
parameter_list|)
block|{
return|return
operator|(
name|CVMX_COREMASK_MAX
operator|>>
operator|(
name|CVMX_MAX_CORES
operator|-
name|num_cores
operator|)
operator|)
return|;
block|}
comment|/**  * Compute coremask for a range of cores from core low to core high.  *  * @param  low   first core in the range  * @param  high  last core in the range  *  * @return  coremask for the range of cores  *  */
specifier|static
specifier|inline
name|unsigned
name|int
name|cvmx_coremask_range
parameter_list|(
name|unsigned
name|int
name|low
parameter_list|,
name|unsigned
name|int
name|high
parameter_list|)
block|{
return|return
operator|(
operator|(
name|CVMX_COREMASK_MAX
operator|>>
operator|(
name|CVMX_MAX_CORES
operator|-
literal|1
operator|-
name|high
operator|+
name|low
operator|)
operator|)
operator|<<
name|low
operator|)
return|;
block|}
comment|/**  * Test to see if current core is a member of coremask.  *  * @param  coremask  the coremask to test against  *  * @return  1 if current core is a member of coremask, 0 otherwise  *  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_is_member
parameter_list|(
name|unsigned
name|int
name|coremask
parameter_list|)
block|{
return|return
operator|(
operator|(
name|cvmx_coremask_core
argument_list|(
name|cvmx_get_core_num
argument_list|()
argument_list|)
operator|&
name|coremask
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
comment|/**  * Test to see if current core is first core in coremask.  *  * @param  coremask  the coremask to test against  *  * @return  1 if current core is first core in the coremask, 0 otherwise  *  */
specifier|static
specifier|inline
name|int
name|cvmx_coremask_first_core
parameter_list|(
name|unsigned
name|int
name|coremask
parameter_list|)
block|{
return|return
name|cvmx_coremask_is_member
argument_list|(
name|coremask
argument_list|)
operator|&&
operator|(
operator|(
name|cvmx_get_core_num
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
operator|(
name|cvmx_coremask_numcores
argument_list|(
name|cvmx_get_core_num
argument_list|()
argument_list|)
operator|&
name|coremask
operator|)
operator|==
literal|0
operator|)
operator|)
return|;
block|}
comment|/**  * Wait (stall) until all cores in the given coremask has reached this point  * in the program execution before proceeding.  *  * @param  coremask  the group of cores performing the barrier sync  *  */
specifier|extern
name|void
name|cvmx_coremask_barrier_sync
parameter_list|(
name|unsigned
name|int
name|coremask
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_COREMASK_H__ */
end_comment

end_unit

