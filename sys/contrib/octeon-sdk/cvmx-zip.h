begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Networks (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Networks nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM  NETWORKS MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Header file for the zip (deflate) block  *  *<hr>$Revision: 49448 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_ZIP_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_ZIP_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
decl_stmt|;
struct|struct
block|{
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|unused
range|:
literal|5
decl_stmt|;
name|uint64_t
name|full_block_write
range|:
literal|1
decl_stmt|;
name|uint64_t
name|no_l2_alloc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|length
range|:
literal|16
decl_stmt|;
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
else|#
directive|else
name|uint64_t
name|ptr
range|:
literal|40
decl_stmt|;
name|uint64_t
name|length
range|:
literal|16
decl_stmt|;
name|uint64_t
name|little_endian
range|:
literal|1
decl_stmt|;
name|uint64_t
name|no_l2_alloc
range|:
literal|1
decl_stmt|;
name|uint64_t
name|full_block_write
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused
range|:
literal|5
decl_stmt|;
endif|#
directive|endif
block|}
name|s
struct|;
block|}
name|cvmx_zip_ptr_t
typedef|;
define|#
directive|define
name|CVMX_ZIP_PTR_MAX_LEN
value|((1<< 16) - 1)
typedef|typedef
enum|enum
block|{
name|CVMX_ZIP_COMPLETION_NOTDONE
init|=
literal|0
block|,
name|CVMX_ZIP_COMPLETION_SUCCESS
init|=
literal|1
block|,
name|CVMX_ZIP_COMPLETION_OTRUNC
init|=
literal|2
block|,
name|CVMX_ZIP_COMPLETION_STOP
init|=
literal|3
block|,
name|CVMX_ZIP_COMPLETION_ITRUNC
init|=
literal|4
block|,
name|CVMX_ZIP_COMPLETION_RBLOCK
init|=
literal|5
block|,
name|CVMX_ZIP_COMPLETION_NLEN
init|=
literal|6
block|,
name|CVMX_ZIP_COMPLETION_BADCODE
init|=
literal|7
block|,
name|CVMX_ZIP_COMPLETION_BADCODE2
init|=
literal|8
block|,
name|CVMX_ZIP_COMPLETION_ZERO_LEN
init|=
literal|9
block|,
name|CVMX_ZIP_COMPLETION_PARITY
init|=
literal|10
block|,
name|CVMX_ZIP_COMPLETION_FATAL
init|=
literal|11
block|}
name|cvmx_zip_completion_code_t
typedef|;
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
index|[
literal|3
index|]
decl_stmt|;
struct|struct
block|{
comment|// WORD 0
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|crc32
range|:
literal|32
decl_stmt|;
name|uint64_t
name|adler
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint64_t
name|adler
range|:
literal|32
decl_stmt|;
name|uint64_t
name|crc32
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
comment|// WORD 1
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|totalbyteswritten
range|:
literal|32
decl_stmt|;
name|uint64_t
name|totalbytesread
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint64_t
name|totalbytesread
range|:
literal|32
decl_stmt|;
name|uint64_t
name|totalbyteswritten
range|:
literal|32
decl_stmt|;
endif|#
directive|endif
comment|// WORD 2
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|totalbitsprocessed
range|:
literal|32
decl_stmt|;
comment|// decompression only
name|uint64_t
name|unused20
range|:
literal|5
decl_stmt|;
name|uint64_t
name|exnum
range|:
literal|3
decl_stmt|;
comment|// compression only
name|uint64_t
name|unused21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exbits
range|:
literal|7
decl_stmt|;
comment|// compression only
name|uint64_t
name|unused22
range|:
literal|7
decl_stmt|;
name|uint64_t
name|eof
range|:
literal|1
decl_stmt|;
comment|// decompression only
name|cvmx_zip_completion_code_t
name|completioncode
range|:
literal|8
decl_stmt|;
comment|// If polling, SW should set this to zero and wait for non-zero
else|#
directive|else
name|cvmx_zip_completion_code_t
name|completioncode
range|:
literal|8
decl_stmt|;
comment|// If polling, SW should set this to zero and wait for non-zero
name|uint64_t
name|eof
range|:
literal|1
decl_stmt|;
comment|// decompression only
name|uint64_t
name|unused22
range|:
literal|7
decl_stmt|;
name|uint64_t
name|exbits
range|:
literal|7
decl_stmt|;
comment|// compression only
name|uint64_t
name|unused21
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exnum
range|:
literal|3
decl_stmt|;
comment|// compression only
name|uint64_t
name|unused20
range|:
literal|5
decl_stmt|;
name|uint64_t
name|totalbitsprocessed
range|:
literal|32
decl_stmt|;
comment|// decompression only
endif|#
directive|endif
block|}
name|s
struct|;
block|}
name|cvmx_zip_result_t
typedef|;
typedef|typedef
union|union
block|{
name|uint64_t
name|u64
index|[
literal|8
index|]
decl_stmt|;
struct|struct
block|{
comment|// WORD 0
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|unused00
range|:
literal|8
decl_stmt|;
name|uint64_t
name|totaloutputlength
range|:
literal|24
decl_stmt|;
name|uint64_t
name|unused01
range|:
literal|5
decl_stmt|;
name|uint64_t
name|exnum
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused02
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exbits
range|:
literal|7
decl_stmt|;
name|uint64_t
name|unused03
range|:
literal|6
decl_stmt|;
name|uint64_t
name|speed
range|:
literal|1
decl_stmt|;
name|uint64_t
name|forcefixed
range|:
literal|1
decl_stmt|;
name|uint64_t
name|forcedynamic
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eof
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bof
range|:
literal|1
decl_stmt|;
name|uint64_t
name|compress
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused04
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dscatter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dgather
range|:
literal|1
decl_stmt|;
name|uint64_t
name|hgather
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|uint64_t
name|hgather
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dgather
range|:
literal|1
decl_stmt|;
name|uint64_t
name|dscatter
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused04
range|:
literal|1
decl_stmt|;
name|uint64_t
name|compress
range|:
literal|1
decl_stmt|;
name|uint64_t
name|bof
range|:
literal|1
decl_stmt|;
name|uint64_t
name|eof
range|:
literal|1
decl_stmt|;
name|uint64_t
name|forcedynamic
range|:
literal|1
decl_stmt|;
name|uint64_t
name|forcefixed
range|:
literal|1
decl_stmt|;
name|uint64_t
name|speed
range|:
literal|1
decl_stmt|;
name|uint64_t
name|unused03
range|:
literal|6
decl_stmt|;
name|uint64_t
name|exbits
range|:
literal|7
decl_stmt|;
name|uint64_t
name|unused02
range|:
literal|1
decl_stmt|;
name|uint64_t
name|exnum
range|:
literal|3
decl_stmt|;
name|uint64_t
name|unused01
range|:
literal|5
decl_stmt|;
name|uint64_t
name|totaloutputlength
range|:
literal|24
decl_stmt|;
name|uint64_t
name|unused00
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
comment|// WORD 1
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|uint64_t
name|historylength
range|:
literal|16
decl_stmt|;
name|uint64_t
name|unused10
range|:
literal|16
decl_stmt|;
name|uint64_t
name|adler32
range|:
literal|32
decl_stmt|;
else|#
directive|else
name|uint64_t
name|adler32
range|:
literal|32
decl_stmt|;
name|uint64_t
name|unused10
range|:
literal|16
decl_stmt|;
name|uint64_t
name|historylength
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
comment|// WORD 2
name|cvmx_zip_ptr_t
name|ctx_ptr
decl_stmt|;
comment|// WORD 3
name|cvmx_zip_ptr_t
name|hist_ptr
decl_stmt|;
comment|// WORD 4
name|cvmx_zip_ptr_t
name|in_ptr
decl_stmt|;
comment|// WORD 5
name|cvmx_zip_ptr_t
name|out_ptr
decl_stmt|;
comment|// WORD 6
name|cvmx_zip_ptr_t
name|result_ptr
decl_stmt|;
comment|// WORD 7
name|cvmx_zip_ptr_t
name|wq_ptr
decl_stmt|;
block|}
name|s
struct|;
block|}
name|cvmx_zip_command_t
typedef|;
comment|/**  * Initialize the ZIP block  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_zip_initialize
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Shutdown the ZIP block. ZIP must be idle when  * this function is called.  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_zip_shutdown
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/**  * Submit a command to the ZIP block  *  * @param command Zip command to submit  *  * @return Zero on success, negative on failure  */
name|int
name|cvmx_zip_submit
parameter_list|(
name|cvmx_zip_command_t
modifier|*
name|command
parameter_list|)
function_decl|;
comment|/* CSR typedefs have been moved to cvmx-zip-defs.h */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_ZIP_H__ */
end_comment

end_unit

