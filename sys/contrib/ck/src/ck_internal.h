begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011-2015 Samy Al Bahra.  * Copyright 2011 David Joseph.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Several of these are from: http://graphics.stanford.edu/~seander/bithacks.html  */
end_comment

begin_define
define|#
directive|define
name|CK_INTERNAL_LOG_0
value|(0xAAAAAAAA)
end_define

begin_define
define|#
directive|define
name|CK_INTERNAL_LOG_1
value|(0xCCCCCCCC)
end_define

begin_define
define|#
directive|define
name|CK_INTERNAL_LOG_2
value|(0xF0F0F0F0)
end_define

begin_define
define|#
directive|define
name|CK_INTERNAL_LOG_3
value|(0xFF00FF00)
end_define

begin_define
define|#
directive|define
name|CK_INTERNAL_LOG_4
value|(0xFFFF0000)
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|uint32_t
name|ck_internal_log
parameter_list|(
name|uint32_t
name|v
parameter_list|)
block|{
name|uint32_t
name|r
init|=
operator|(
name|v
operator|&
name|CK_INTERNAL_LOG_0
operator|)
operator|!=
literal|0
decl_stmt|;
name|r
operator||=
operator|(
operator|(
name|v
operator|&
name|CK_INTERNAL_LOG_4
operator|)
operator|!=
literal|0
operator|)
operator|<<
literal|4
expr_stmt|;
name|r
operator||=
operator|(
operator|(
name|v
operator|&
name|CK_INTERNAL_LOG_3
operator|)
operator|!=
literal|0
operator|)
operator|<<
literal|3
expr_stmt|;
name|r
operator||=
operator|(
operator|(
name|v
operator|&
name|CK_INTERNAL_LOG_2
operator|)
operator|!=
literal|0
operator|)
operator|<<
literal|2
expr_stmt|;
name|r
operator||=
operator|(
operator|(
name|v
operator|&
name|CK_INTERNAL_LOG_1
operator|)
operator|!=
literal|0
operator|)
operator|<<
literal|1
expr_stmt|;
return|return
operator|(
name|r
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint32_t
name|ck_internal_power_2
parameter_list|(
name|uint32_t
name|v
parameter_list|)
block|{
operator|--
name|v
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|1
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|2
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|4
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|8
expr_stmt|;
name|v
operator||=
name|v
operator|>>
literal|16
expr_stmt|;
return|return
operator|(
operator|++
name|v
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|long
name|ck_internal_max
parameter_list|(
name|unsigned
name|long
name|x
parameter_list|,
name|unsigned
name|long
name|y
parameter_list|)
block|{
return|return
name|x
operator|^
operator|(
operator|(
name|x
operator|^
name|y
operator|)
operator|&
operator|-
operator|(
name|x
operator|<
name|y
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint64_t
name|ck_internal_max_64
parameter_list|(
name|uint64_t
name|x
parameter_list|,
name|uint64_t
name|y
parameter_list|)
block|{
return|return
name|x
operator|^
operator|(
operator|(
name|x
operator|^
name|y
operator|)
operator|&
operator|-
operator|(
name|x
operator|<
name|y
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint32_t
name|ck_internal_max_32
parameter_list|(
name|uint32_t
name|x
parameter_list|,
name|uint32_t
name|y
parameter_list|)
block|{
return|return
name|x
operator|^
operator|(
operator|(
name|x
operator|^
name|y
operator|)
operator|&
operator|-
operator|(
name|x
operator|<
name|y
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|long
name|ck_internal_bsf
parameter_list|(
name|unsigned
name|long
name|v
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
return|return
name|__builtin_ffs
argument_list|(
name|v
argument_list|)
return|;
else|#
directive|else
name|unsigned
name|int
name|i
decl_stmt|;
specifier|const
name|unsigned
name|int
name|s
init|=
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
operator|*
literal|8
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v
operator|&
operator|(
literal|1UL
operator|<<
operator|(
name|s
operator|-
name|i
operator|)
operator|)
condition|)
return|return
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
operator|*
literal|8
operator|-
name|i
return|;
block|}
return|return
literal|1
return|;
endif|#
directive|endif
comment|/* !__GNUC__ */
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint64_t
name|ck_internal_bsf_64
parameter_list|(
name|uint64_t
name|v
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
return|return
name|__builtin_ffs
argument_list|(
name|v
argument_list|)
return|;
else|#
directive|else
name|unsigned
name|int
name|i
decl_stmt|;
specifier|const
name|unsigned
name|int
name|s
init|=
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
operator|*
literal|8
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|s
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|v
operator|&
operator|(
literal|1ULL
operator|<<
operator|(
literal|63U
operator|-
name|i
operator|)
operator|)
condition|)
return|return
name|i
return|;
block|}
endif|#
directive|endif
comment|/* !__GNUC__ */
return|return
literal|1
return|;
block|}
end_function

end_unit

