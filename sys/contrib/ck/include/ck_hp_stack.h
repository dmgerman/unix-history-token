begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HP_STACK_H
end_ifndef

begin_define
define|#
directive|define
name|CK_HP_STACK_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_hp.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stack.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_define
define|#
directive|define
name|CK_HP_STACK_SLOTS_COUNT
value|1
end_define

begin_define
define|#
directive|define
name|CK_HP_STACK_SLOTS_SIZE
value|sizeof(void *)
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_stack_push_mpmc
parameter_list|(
name|struct
name|ck_stack
modifier|*
name|target
parameter_list|,
name|struct
name|ck_stack_entry
modifier|*
name|entry
parameter_list|)
block|{
name|ck_stack_push_upmc
argument_list|(
name|target
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_hp_stack_trypush_mpmc
parameter_list|(
name|struct
name|ck_stack
modifier|*
name|target
parameter_list|,
name|struct
name|ck_stack_entry
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|ck_stack_trypush_upmc
argument_list|(
name|target
argument_list|,
name|entry
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|CK_CC_INLINE
specifier|static
expr|struct
name|ck_stack_entry
operator|*
name|ck_hp_stack_pop_mpmc
argument_list|(
argument|ck_hp_record_t *record
argument_list|,
argument|struct ck_stack *target
argument_list|)
block|{ 	struct
name|ck_stack_entry
operator|*
name|entry
block|,
operator|*
name|update
block|;
do|do
block|{
name|entry
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_while
while|while
condition|(
name|entry
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
condition|)
empty_stmt|;
end_while

begin_while
while|while
condition|(
name|ck_pr_cas_ptr_value
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|,
name|entry
argument_list|,
name|entry
operator|->
name|next
argument_list|,
operator|&
name|entry
argument_list|)
operator|==
name|false
condition|)
block|{
if|if
condition|(
name|entry
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|update
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
expr_stmt|;
while|while
condition|(
name|entry
operator|!=
name|update
condition|)
block|{
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|update
argument_list|)
expr_stmt|;
name|entry
operator|=
name|update
expr_stmt|;
name|update
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|update
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
block|}
block|}
end_while

begin_return
return|return
name|entry
return|;
end_return

begin_function
unit|}  CK_CC_INLINE
specifier|static
name|bool
name|ck_hp_stack_trypop_mpmc
parameter_list|(
name|ck_hp_record_t
modifier|*
name|record
parameter_list|,
name|struct
name|ck_stack
modifier|*
name|target
parameter_list|,
name|struct
name|ck_stack_entry
modifier|*
modifier|*
name|r
parameter_list|)
block|{
name|struct
name|ck_stack_entry
modifier|*
name|entry
decl_stmt|;
name|entry
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
name|NULL
condition|)
return|return
name|false
return|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|entry
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|)
condition|)
goto|goto
name|leave
goto|;
if|if
condition|(
name|ck_pr_cas_ptr_value
argument_list|(
operator|&
name|target
operator|->
name|head
argument_list|,
name|entry
argument_list|,
name|entry
operator|->
name|next
argument_list|,
operator|&
name|entry
argument_list|)
operator|==
name|false
condition|)
goto|goto
name|leave
goto|;
operator|*
name|r
operator|=
name|entry
expr_stmt|;
return|return
name|true
return|;
name|leave
label|:
name|ck_hp_set
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_HP_STACK_H */
end_comment

end_unit

