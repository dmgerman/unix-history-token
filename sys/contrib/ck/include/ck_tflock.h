begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2014 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_TFLOCK_TICKET_H
end_ifndef

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_H
end_define

begin_comment
comment|/*  * This is an implementation of task-fair locks derived from the work  * described in:  *	John M. Mellor-Crummey and Michael L. Scott. 1991.  *	Scalable reader-writer synchronization for shared-memory  *	multiprocessors. SIGPLAN Not. 26, 7 (April 1991), 106-113.  */
end_comment

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_struct
struct|struct
name|ck_tflock_ticket
block|{
name|uint32_t
name|request
decl_stmt|;
name|uint32_t
name|completion
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_tflock_ticket
name|ck_tflock_ticket_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_INITIALIZER
value|{ 0, 0 }
end_define

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_RC_INCR
value|0x10000U
end_define

begin_comment
comment|/* Read-side increment. */
end_comment

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_WC_INCR
value|0x1U
end_define

begin_comment
comment|/* Write-side increment. */
end_comment

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_W_MASK
value|0xffffU
end_define

begin_comment
comment|/* Write-side mask. */
end_comment

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_WC_TOPMSK
value|0x8000U
end_define

begin_comment
comment|/* Write clear mask for overflow. */
end_comment

begin_define
define|#
directive|define
name|CK_TFLOCK_TICKET_RC_TOPMSK
value|0x80000000U
end_define

begin_comment
comment|/* Read clear mask for overflow. */
end_comment

begin_function
name|CK_CC_INLINE
specifier|static
name|uint32_t
name|ck_tflock_ticket_fca_32
parameter_list|(
name|uint32_t
modifier|*
name|target
parameter_list|,
name|uint32_t
name|mask
parameter_list|,
name|uint32_t
name|delta
parameter_list|)
block|{
name|uint32_t
name|snapshot
init|=
name|ck_pr_load_32
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|uint32_t
name|goal
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|goal
operator|=
operator|(
name|snapshot
operator|&
operator|~
name|mask
operator|)
operator|+
name|delta
expr_stmt|;
if|if
condition|(
name|ck_pr_cas_32_value
argument_list|(
name|target
argument_list|,
name|snapshot
argument_list|,
name|goal
argument_list|,
operator|&
name|snapshot
argument_list|)
operator|==
name|true
condition|)
break|break;
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
return|return
name|snapshot
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_tflock_ticket_init
parameter_list|(
name|struct
name|ck_tflock_ticket
modifier|*
name|pf
parameter_list|)
block|{
name|pf
operator|->
name|request
operator|=
name|pf
operator|->
name|completion
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_tflock_ticket_write_lock
parameter_list|(
name|struct
name|ck_tflock_ticket
modifier|*
name|lock
parameter_list|)
block|{
name|uint32_t
name|previous
decl_stmt|;
name|previous
operator|=
name|ck_tflock_ticket_fca_32
argument_list|(
operator|&
name|lock
operator|->
name|request
argument_list|,
name|CK_TFLOCK_TICKET_WC_TOPMSK
argument_list|,
name|CK_TFLOCK_TICKET_WC_INCR
argument_list|)
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
while|while
condition|(
name|ck_pr_load_32
argument_list|(
operator|&
name|lock
operator|->
name|completion
argument_list|)
operator|!=
name|previous
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_tflock_ticket_write_unlock
parameter_list|(
name|struct
name|ck_tflock_ticket
modifier|*
name|lock
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_tflock_ticket_fca_32
argument_list|(
operator|&
name|lock
operator|->
name|completion
argument_list|,
name|CK_TFLOCK_TICKET_WC_TOPMSK
argument_list|,
name|CK_TFLOCK_TICKET_WC_INCR
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_tflock_ticket_read_lock
parameter_list|(
name|struct
name|ck_tflock_ticket
modifier|*
name|lock
parameter_list|)
block|{
name|uint32_t
name|previous
decl_stmt|;
name|previous
operator|=
name|ck_tflock_ticket_fca_32
argument_list|(
operator|&
name|lock
operator|->
name|request
argument_list|,
name|CK_TFLOCK_TICKET_RC_TOPMSK
argument_list|,
name|CK_TFLOCK_TICKET_RC_INCR
argument_list|)
operator|&
name|CK_TFLOCK_TICKET_W_MASK
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
name|ck_pr_load_32
argument_list|(
operator|&
name|lock
operator|->
name|completion
argument_list|)
operator|&
name|CK_TFLOCK_TICKET_W_MASK
operator|)
operator|!=
name|previous
condition|)
block|{
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_tflock_ticket_read_unlock
parameter_list|(
name|struct
name|ck_tflock_ticket
modifier|*
name|lock
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_tflock_ticket_fca_32
argument_list|(
operator|&
name|lock
operator|->
name|completion
argument_list|,
name|CK_TFLOCK_TICKET_RC_TOPMSK
argument_list|,
name|CK_TFLOCK_TICKET_RC_INCR
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_TFLOCK_TICKET_H */
end_comment

end_unit

