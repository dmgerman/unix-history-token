begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SPINLOCK_TICKET_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_H
end_define

begin_include
include|#
directive|include
file|<ck_backoff.h>
end_include

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_elide.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_SPINLOCK_TICKET
end_ifndef

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_TICKET
end_define

begin_comment
comment|/*  * If 16-bit or 32-bit increment is supported, implement support for  * trylock functionality on availability of 32-bit or 64-bit fetch-and-add  * and compare-and-swap. This code path is only applied to x86*.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CK_MD_TSO
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|__x86__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|)
end_if

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CK_F_PR_FAA_32
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_F_PR_INC_16
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_F_PR_CAS_32
argument_list|)
end_if

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_TYPE
value|uint32_t
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_TYPE_BASE
value|uint16_t
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INC
parameter_list|(
name|x
parameter_list|)
value|ck_pr_inc_16(x)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_CAS
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|ck_pr_cas_32(x, y, z)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_FAA
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|ck_pr_faa_32(x, y)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_LOAD
parameter_list|(
name|x
parameter_list|)
value|ck_pr_load_32(x)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INCREMENT
value|(0x00010000UL)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_MASK
value|(0xFFFFUL)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_SHIFT
value|(16)
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|CK_F_PR_FAA_64
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_F_PR_INC_32
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_F_PR_CAS_64
argument_list|)
end_elif

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_TYPE
value|uint64_t
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_TYPE_BASE
value|uint32_t
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INC
parameter_list|(
name|x
parameter_list|)
value|ck_pr_inc_32(x)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_CAS
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|,
name|z
parameter_list|)
value|ck_pr_cas_64(x, y, z)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_FAA
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|ck_pr_faa_64(x, y)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_LOAD
parameter_list|(
name|x
parameter_list|)
value|ck_pr_load_64(x)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INCREMENT
value|(0x0000000100000000ULL)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_MASK
value|(0xFFFFFFFFULL)
end_define

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_SHIFT
value|(32)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_MD_TSO */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CK_SPINLOCK_TICKET_TYPE
argument_list|)
end_if

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_TICKET_TRYLOCK
end_define

begin_struct
struct|struct
name|ck_spinlock_ticket
block|{
name|CK_SPINLOCK_TICKET_TYPE
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_ticket
name|ck_spinlock_ticket_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INITIALIZER
value|{ .value = 0 }
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_init
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|ticket
operator|->
name|value
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_ticket_locked
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|CK_SPINLOCK_TICKET_TYPE
name|request
decl_stmt|,
name|position
decl_stmt|;
name|request
operator|=
name|CK_SPINLOCK_TICKET_LOAD
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|)
expr_stmt|;
name|position
operator|=
name|request
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|request
operator|>>=
name|CK_SPINLOCK_TICKET_SHIFT
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|request
operator|!=
name|position
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_lock
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|CK_SPINLOCK_TICKET_TYPE
name|request
decl_stmt|,
name|position
decl_stmt|;
comment|/* Get our ticket number and set next ticket number. */
name|request
operator|=
name|CK_SPINLOCK_TICKET_FAA
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|,
name|CK_SPINLOCK_TICKET_INCREMENT
argument_list|)
expr_stmt|;
name|position
operator|=
name|request
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|request
operator|>>=
name|CK_SPINLOCK_TICKET_SHIFT
expr_stmt|;
while|while
condition|(
name|request
operator|!=
name|position
condition|)
block|{
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|position
operator|=
name|CK_SPINLOCK_TICKET_LOAD
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|)
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_lock_pb
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|,
name|unsigned
name|int
name|c
parameter_list|)
block|{
name|CK_SPINLOCK_TICKET_TYPE
name|request
decl_stmt|,
name|position
decl_stmt|;
name|ck_backoff_t
name|backoff
decl_stmt|;
comment|/* Get our ticket number and set next ticket number. */
name|request
operator|=
name|CK_SPINLOCK_TICKET_FAA
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|,
name|CK_SPINLOCK_TICKET_INCREMENT
argument_list|)
expr_stmt|;
name|position
operator|=
name|request
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|request
operator|>>=
name|CK_SPINLOCK_TICKET_SHIFT
expr_stmt|;
while|while
condition|(
name|request
operator|!=
name|position
condition|)
block|{
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|position
operator|=
name|CK_SPINLOCK_TICKET_LOAD
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|)
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|backoff
operator|=
operator|(
name|request
operator|-
name|position
operator|)
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|backoff
operator|<<=
name|c
expr_stmt|;
name|ck_backoff_eb
argument_list|(
operator|&
name|backoff
argument_list|)
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_ticket_trylock
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|CK_SPINLOCK_TICKET_TYPE
name|snapshot
decl_stmt|,
name|request
decl_stmt|,
name|position
decl_stmt|;
name|snapshot
operator|=
name|CK_SPINLOCK_TICKET_LOAD
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|)
expr_stmt|;
name|position
operator|=
name|snapshot
operator|&
name|CK_SPINLOCK_TICKET_MASK
expr_stmt|;
name|request
operator|=
name|snapshot
operator|>>
name|CK_SPINLOCK_TICKET_SHIFT
expr_stmt|;
if|if
condition|(
name|position
operator|!=
name|request
condition|)
return|return
name|false
return|;
if|if
condition|(
name|CK_SPINLOCK_TICKET_CAS
argument_list|(
operator|&
name|ticket
operator|->
name|value
argument_list|,
name|snapshot
argument_list|,
name|snapshot
operator|+
name|CK_SPINLOCK_TICKET_INCREMENT
argument_list|)
operator|==
name|false
condition|)
block|{
return|return
name|false
return|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_unlock
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|CK_SPINLOCK_TICKET_INC
argument_list|(
operator|(
name|CK_SPINLOCK_TICKET_TYPE_BASE
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
operator|&
name|ticket
operator|->
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_TYPE
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_TYPE_BASE
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_INC
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_FAA
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_LOAD
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_INCREMENT
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_MASK
end_undef

begin_undef
undef|#
directive|undef
name|CK_SPINLOCK_TICKET_SHIFT
end_undef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/*  * MESI benefits from cacheline padding between next and current. This avoids  * invalidation of current from the cache due to incoming lock requests.  */
end_comment

begin_struct
struct|struct
name|ck_spinlock_ticket
block|{
name|unsigned
name|int
name|next
decl_stmt|;
name|unsigned
name|int
name|position
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_ticket
name|ck_spinlock_ticket_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_SPINLOCK_TICKET_INITIALIZER
value|{.next = 0, .position = 0}
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_init
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|ticket
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|ticket
operator|->
name|position
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_ticket_locked
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ticket
operator|->
name|position
argument_list|)
operator|!=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ticket
operator|->
name|next
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_lock
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|unsigned
name|int
name|request
decl_stmt|;
comment|/* Get our ticket number and set next ticket number. */
name|request
operator|=
name|ck_pr_faa_uint
argument_list|(
operator|&
name|ticket
operator|->
name|next
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/* 	 * Busy-wait until our ticket number is current. 	 * We can get away without a fence here assuming 	 * our position counter does not overflow. 	 */
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|ticket
operator|->
name|position
argument_list|)
operator|!=
name|request
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_lock_pb
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|,
name|unsigned
name|int
name|c
parameter_list|)
block|{
name|ck_backoff_t
name|backoff
decl_stmt|;
name|unsigned
name|int
name|request
decl_stmt|,
name|position
decl_stmt|;
name|request
operator|=
name|ck_pr_faa_uint
argument_list|(
operator|&
name|ticket
operator|->
name|next
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|position
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ticket
operator|->
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|==
name|request
condition|)
break|break;
name|backoff
operator|=
name|request
operator|-
name|position
expr_stmt|;
name|backoff
operator|<<=
name|c
expr_stmt|;
comment|/* 		 * Ideally, back-off from generating cache traffic for at least 		 * the amount of time necessary for the number of pending lock 		 * acquisition and relinquish operations (assuming an empty 		 * critical section). 		 */
name|ck_backoff_eb
argument_list|(
operator|&
name|backoff
argument_list|)
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_ticket_unlock
parameter_list|(
name|struct
name|ck_spinlock_ticket
modifier|*
name|ticket
parameter_list|)
block|{
name|unsigned
name|int
name|update
decl_stmt|;
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
comment|/* 	 * Update current ticket value so next lock request can proceed. 	 * Overflow behavior is assumed to be roll-over, in which case, 	 * it is only an issue if there are 2^32 pending lock requests. 	 */
name|update
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|ticket
operator|->
name|position
argument_list|)
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|ticket
operator|->
name|position
argument_list|,
name|update
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !CK_F_SPINLOCK_TICKET_TRYLOCK */
end_comment

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_spinlock_ticket
argument_list|,
argument|ck_spinlock_ticket_t
argument_list|,
argument|ck_spinlock_ticket_locked
argument_list|,
argument|ck_spinlock_ticket_lock
argument_list|,
argument|ck_spinlock_ticket_locked
argument_list|,
argument|ck_spinlock_ticket_unlock
argument_list|)
end_macro

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_spinlock_ticket
argument_list|,
argument|ck_spinlock_ticket_t
argument_list|,
argument|ck_spinlock_ticket_locked
argument_list|,
argument|ck_spinlock_ticket_trylock
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_SPINLOCK_TICKET */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SPINLOCK_TICKET_H */
end_comment

end_unit

