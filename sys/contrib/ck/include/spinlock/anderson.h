begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SPINLOCK_ANDERSON_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SPINLOCK_ANDERSON_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_limits.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_SPINLOCK_ANDERSON
end_ifndef

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_ANDERSON
end_define

begin_comment
comment|/*  * This is an implementation of Anderson's array-based queuing lock.  */
end_comment

begin_struct
struct|struct
name|ck_spinlock_anderson_thread
block|{
name|unsigned
name|int
name|locked
decl_stmt|;
name|unsigned
name|int
name|position
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_anderson_thread
name|ck_spinlock_anderson_thread_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_spinlock_anderson
block|{
name|struct
name|ck_spinlock_anderson_thread
modifier|*
name|slots
decl_stmt|;
name|unsigned
name|int
name|count
decl_stmt|;
name|unsigned
name|int
name|wrap
decl_stmt|;
name|unsigned
name|int
name|mask
decl_stmt|;
name|char
name|pad
index|[
name|CK_MD_CACHELINE
operator|-
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|3
operator|-
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
expr|]
expr_stmt|;
name|unsigned
name|int
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_anderson
name|ck_spinlock_anderson_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_anderson_init
parameter_list|(
name|struct
name|ck_spinlock_anderson
modifier|*
name|lock
parameter_list|,
name|struct
name|ck_spinlock_anderson_thread
modifier|*
name|slots
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|;
name|slots
index|[
literal|0
index|]
operator|.
name|locked
operator|=
name|false
expr_stmt|;
name|slots
index|[
literal|0
index|]
operator|.
name|position
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|slots
index|[
name|i
index|]
operator|.
name|locked
operator|=
name|true
expr_stmt|;
name|slots
index|[
name|i
index|]
operator|.
name|position
operator|=
name|i
expr_stmt|;
block|}
name|lock
operator|->
name|slots
operator|=
name|slots
expr_stmt|;
name|lock
operator|->
name|count
operator|=
name|count
expr_stmt|;
name|lock
operator|->
name|mask
operator|=
name|count
operator|-
literal|1
expr_stmt|;
name|lock
operator|->
name|next
operator|=
literal|0
expr_stmt|;
comment|/* 	 * If the number of threads is not a power of two then compute 	 * appropriate wrap-around value in the case of next slot counter 	 * overflow. 	 */
if|if
condition|(
name|count
operator|&
operator|(
name|count
operator|-
literal|1
operator|)
condition|)
name|lock
operator|->
name|wrap
operator|=
operator|(
name|UINT_MAX
operator|%
name|count
operator|)
operator|+
literal|1
expr_stmt|;
else|else
name|lock
operator|->
name|wrap
operator|=
literal|0
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_anderson_locked
parameter_list|(
name|struct
name|ck_spinlock_anderson
modifier|*
name|lock
parameter_list|)
block|{
name|unsigned
name|int
name|position
decl_stmt|;
name|bool
name|r
decl_stmt|;
name|position
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|next
argument_list|)
operator|&
name|lock
operator|->
name|mask
expr_stmt|;
name|r
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|slots
index|[
name|position
index|]
operator|.
name|locked
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_anderson_lock
parameter_list|(
name|struct
name|ck_spinlock_anderson
modifier|*
name|lock
parameter_list|,
name|struct
name|ck_spinlock_anderson_thread
modifier|*
modifier|*
name|slot
parameter_list|)
block|{
name|unsigned
name|int
name|position
decl_stmt|,
name|next
decl_stmt|;
name|unsigned
name|int
name|count
init|=
name|lock
operator|->
name|count
decl_stmt|;
comment|/* 	 * If count is not a power of 2, then it is possible for an overflow 	 * to reallocate beginning slots to more than one thread. To avoid this 	 * use a compare-and-swap. 	 */
if|if
condition|(
name|lock
operator|->
name|wrap
operator|!=
literal|0
condition|)
block|{
name|position
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|next
argument_list|)
expr_stmt|;
do|do
block|{
if|if
condition|(
name|position
operator|==
name|UINT_MAX
condition|)
name|next
operator|=
name|lock
operator|->
name|wrap
expr_stmt|;
else|else
name|next
operator|=
name|position
operator|+
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|ck_pr_cas_uint_value
argument_list|(
operator|&
name|lock
operator|->
name|next
argument_list|,
name|position
argument_list|,
name|next
argument_list|,
operator|&
name|position
argument_list|)
operator|==
name|false
condition|)
do|;
name|position
operator|%=
name|count
expr_stmt|;
block|}
else|else
block|{
name|position
operator|=
name|ck_pr_faa_uint
argument_list|(
operator|&
name|lock
operator|->
name|next
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|position
operator|&=
name|lock
operator|->
name|mask
expr_stmt|;
block|}
comment|/* Serialize with respect to previous thread's store. */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
comment|/* 	 * Spin until slot is marked as unlocked. First slot is initialized to 	 * false. 	 */
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|slots
index|[
name|position
index|]
operator|.
name|locked
argument_list|)
operator|==
name|true
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
comment|/* Prepare slot for potential re-use by another thread. */
name|ck_pr_store_uint
argument_list|(
operator|&
name|lock
operator|->
name|slots
index|[
name|position
index|]
operator|.
name|locked
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
operator|*
name|slot
operator|=
name|lock
operator|->
name|slots
operator|+
name|position
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_anderson_unlock
parameter_list|(
name|struct
name|ck_spinlock_anderson
modifier|*
name|lock
parameter_list|,
name|struct
name|ck_spinlock_anderson_thread
modifier|*
name|slot
parameter_list|)
block|{
name|unsigned
name|int
name|position
decl_stmt|;
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
comment|/* Mark next slot as available. */
if|if
condition|(
name|lock
operator|->
name|wrap
operator|==
literal|0
condition|)
name|position
operator|=
operator|(
name|slot
operator|->
name|position
operator|+
literal|1
operator|)
operator|&
name|lock
operator|->
name|mask
expr_stmt|;
else|else
name|position
operator|=
operator|(
name|slot
operator|->
name|position
operator|+
literal|1
operator|)
operator|%
name|lock
operator|->
name|count
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|lock
operator|->
name|slots
index|[
name|position
index|]
operator|.
name|locked
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_SPINLOCK_ANDERSON */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SPINLOCK_ANDERSON_H */
end_comment

end_unit

