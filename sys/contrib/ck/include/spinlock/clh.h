begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SPINLOCK_CLH_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SPINLOCK_CLH_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_limits.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_SPINLOCK_CLH
end_ifndef

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_CLH
end_define

begin_struct
struct|struct
name|ck_spinlock_clh
block|{
name|unsigned
name|int
name|wait
decl_stmt|;
name|struct
name|ck_spinlock_clh
modifier|*
name|previous
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_clh
name|ck_spinlock_clh_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_clh_init
parameter_list|(
name|struct
name|ck_spinlock_clh
modifier|*
modifier|*
name|lock
parameter_list|,
name|struct
name|ck_spinlock_clh
modifier|*
name|unowned
parameter_list|)
block|{
name|unowned
operator|->
name|previous
operator|=
name|NULL
expr_stmt|;
name|unowned
operator|->
name|wait
operator|=
name|false
expr_stmt|;
operator|*
name|lock
operator|=
name|unowned
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_clh_locked
parameter_list|(
name|struct
name|ck_spinlock_clh
modifier|*
modifier|*
name|queue
parameter_list|)
block|{
name|struct
name|ck_spinlock_clh
modifier|*
name|head
decl_stmt|;
name|bool
name|r
decl_stmt|;
name|head
operator|=
name|ck_pr_load_ptr
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|r
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|head
operator|->
name|wait
argument_list|)
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_clh_lock
parameter_list|(
name|struct
name|ck_spinlock_clh
modifier|*
modifier|*
name|queue
parameter_list|,
name|struct
name|ck_spinlock_clh
modifier|*
name|thread
parameter_list|)
block|{
name|struct
name|ck_spinlock_clh
modifier|*
name|previous
decl_stmt|;
comment|/* Indicate to the next thread on queue that they will have to block. */
name|thread
operator|->
name|wait
operator|=
name|true
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
comment|/* 	 * Mark current request as last request. Save reference to previous 	 * request. 	 */
name|previous
operator|=
name|ck_pr_fas_ptr
argument_list|(
name|queue
argument_list|,
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|->
name|previous
operator|=
name|previous
expr_stmt|;
comment|/* Wait until previous thread is done with lock. */
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|previous
operator|->
name|wait
argument_list|)
operator|==
name|true
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_clh_unlock
parameter_list|(
name|struct
name|ck_spinlock_clh
modifier|*
modifier|*
name|thread
parameter_list|)
block|{
name|struct
name|ck_spinlock_clh
modifier|*
name|previous
decl_stmt|;
comment|/* 	 * If there are waiters, they are spinning on the current node wait 	 * flag. The flag is cleared so that the successor may complete an 	 * acquisition. If the caller is pre-empted then the predecessor field 	 * may be updated by a successor's lock operation. In order to avoid 	 * this, save a copy of the predecessor before setting the flag. 	 */
name|previous
operator|=
name|thread
index|[
literal|0
index|]
operator|->
name|previous
expr_stmt|;
comment|/* 	 * We have to pay this cost anyways, use it as a compiler barrier too. 	 */
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
operator|(
operator|*
name|thread
operator|)
operator|->
name|wait
argument_list|,
name|false
argument_list|)
expr_stmt|;
comment|/* 	 * Predecessor is guaranteed not to be spinning on previous request, 	 * so update caller to use previous structure. This allows successor 	 * all the time in the world to successfully read updated wait flag. 	 */
operator|*
name|thread
operator|=
name|previous
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_SPINLOCK_CLH */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SPINLOCK_CLH_H */
end_comment

end_unit

