begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_SPINLOCK_DEC_H
end_ifndef

begin_define
define|#
directive|define
name|CK_SPINLOCK_DEC_H
end_define

begin_include
include|#
directive|include
file|<ck_backoff.h>
end_include

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_elide.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_F_SPINLOCK_DEC
end_ifndef

begin_define
define|#
directive|define
name|CK_F_SPINLOCK_DEC
end_define

begin_comment
comment|/*  * This is similar to the CACAS lock but makes use of an atomic decrement  * operation to check if the lock value was decremented to 0 from 1. The  * idea is that a decrement operation is cheaper than a compare-and-swap.  */
end_comment

begin_struct
struct|struct
name|ck_spinlock_dec
block|{
name|unsigned
name|int
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_spinlock_dec
name|ck_spinlock_dec_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_SPINLOCK_DEC_INITIALIZER
value|{1}
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_dec_init
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|lock
operator|->
name|value
operator|=
literal|1
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_dec_trylock
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|unsigned
name|int
name|value
decl_stmt|;
name|value
operator|=
name|ck_pr_fas_uint
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return
name|value
operator|==
literal|1
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_spinlock_dec_locked
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
name|r
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|)
operator|!=
literal|1
expr_stmt|;
name|ck_pr_fence_acquire
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_dec_lock
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|bool
name|r
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
comment|/* 		 * Only one thread is guaranteed to decrement lock to 0. 		 * Overflow must be protected against. No more than 		 * UINT_MAX lock requests can happen while the lock is held. 		 */
name|ck_pr_dec_uint_zero
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|,
operator|&
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|true
condition|)
break|break;
comment|/* Load value without generating write cycles. */
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|)
operator|!=
literal|1
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_dec_lock_eb
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|ck_backoff_t
name|backoff
init|=
name|CK_BACKOFF_INITIALIZER
decl_stmt|;
name|bool
name|r
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|ck_pr_dec_uint_zero
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|,
operator|&
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|true
condition|)
break|break;
name|ck_backoff_eb
argument_list|(
operator|&
name|backoff
argument_list|)
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_spinlock_dec_unlock
parameter_list|(
name|struct
name|ck_spinlock_dec
modifier|*
name|lock
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
comment|/* 	 * Unconditionally set lock value to 1 so someone can decrement lock 	 * to 0. 	 */
name|ck_pr_store_uint
argument_list|(
operator|&
name|lock
operator|->
name|value
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_macro
name|CK_ELIDE_PROTOTYPE
argument_list|(
argument|ck_spinlock_dec
argument_list|,
argument|ck_spinlock_dec_t
argument_list|,
argument|ck_spinlock_dec_locked
argument_list|,
argument|ck_spinlock_dec_lock
argument_list|,
argument|ck_spinlock_dec_locked
argument_list|,
argument|ck_spinlock_dec_unlock
argument_list|)
end_macro

begin_macro
name|CK_ELIDE_TRYLOCK_PROTOTYPE
argument_list|(
argument|ck_spinlock_dec
argument_list|,
argument|ck_spinlock_dec_t
argument_list|,
argument|ck_spinlock_dec_locked
argument_list|,
argument|ck_spinlock_dec_trylock
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_F_SPINLOCK_DEC */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_SPINLOCK_DEC_H */
end_comment

end_unit

