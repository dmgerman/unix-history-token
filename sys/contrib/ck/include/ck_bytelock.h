begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_BYTELOCK_H
end_ifndef

begin_define
define|#
directive|define
name|CK_BYTELOCK_H
end_define

begin_comment
comment|/*  * The implementations here are derived from the work described in:  *   Dice, D. and Shavit, N. 2010. TLRW: return of the read-write lock.  *   In Proceedings of the 22nd ACM Symposium on Parallelism in Algorithms  *   and Architectures (Thira, Santorini, Greece, June 13 - 15, 2010).  *   SPAA '10. ACM, New York, NY, 284-293.  */
end_comment

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_include
include|#
directive|include
file|<ck_limits.h>
end_include

begin_struct
struct|struct
name|ck_bytelock
block|{
name|unsigned
name|int
name|owner
decl_stmt|;
name|unsigned
name|int
name|n_readers
decl_stmt|;
name|uint8_t
name|readers
index|[
name|CK_MD_CACHELINE
operator|-
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
operator|*
literal|2
expr|]
name|CK_CC_ALIGN
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_bytelock
name|ck_bytelock_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_BYTELOCK_INITIALIZER
value|{ 0, 0, {0} }
end_define

begin_define
define|#
directive|define
name|CK_BYTELOCK_UNSLOTTED
value|UINT_MAX
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bytelock_init
parameter_list|(
name|struct
name|ck_bytelock
modifier|*
name|bytelock
parameter_list|)
block|{
name|unsigned
name|int
name|i
decl_stmt|;
name|bytelock
operator|->
name|owner
operator|=
literal|0
expr_stmt|;
name|bytelock
operator|->
name|n_readers
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
name|bytelock
operator|->
name|readers
condition|;
name|i
operator|++
control|)
name|bytelock
operator|->
name|readers
index|[
name|i
index|]
operator|=
name|false
expr_stmt|;
name|ck_pr_barrier
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|CK_F_PR_LOAD_64
end_ifdef

begin_define
define|#
directive|define
name|CK_BYTELOCK_LENGTH
value|sizeof(uint64_t)
end_define

begin_define
define|#
directive|define
name|CK_BYTELOCK_LOAD
value|ck_pr_load_64
end_define

begin_define
define|#
directive|define
name|CK_BYTELOCK_TYPE
value|uint64_t
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|CK_F_PR_LOAD_32
argument_list|)
end_elif

begin_define
define|#
directive|define
name|CK_BYTELOCK_LENGTH
value|sizeof(uint32_t)
end_define

begin_define
define|#
directive|define
name|CK_BYTELOCK_LOAD
value|ck_pr_load_32
end_define

begin_define
define|#
directive|define
name|CK_BYTELOCK_TYPE
value|uint32_t
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
error|Unsupported platform.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bytelock_write_lock
parameter_list|(
name|struct
name|ck_bytelock
modifier|*
name|bytelock
parameter_list|,
name|unsigned
name|int
name|slot
parameter_list|)
block|{
name|CK_BYTELOCK_TYPE
modifier|*
name|readers
init|=
operator|(
name|void
operator|*
operator|)
name|bytelock
operator|->
name|readers
decl_stmt|;
name|unsigned
name|int
name|i
decl_stmt|;
comment|/* Announce upcoming writer acquisition. */
while|while
condition|(
name|ck_pr_cas_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|,
literal|0
argument_list|,
name|slot
argument_list|)
operator|==
name|false
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
comment|/* If we are slotted, we might be upgrading from a read lock. */
if|if
condition|(
name|slot
operator|<=
sizeof|sizeof
name|bytelock
operator|->
name|readers
condition|)
name|ck_pr_store_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
operator|-
literal|1
index|]
argument_list|,
name|false
argument_list|)
expr_stmt|;
comment|/* 	 * Wait for slotted readers to drain out. This also provides the 	 * lock acquire semantics. 	 */
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|bytelock
operator|->
name|readers
argument_list|)
operator|/
name|CK_BYTELOCK_LENGTH
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|CK_BYTELOCK_LOAD
argument_list|(
operator|&
name|readers
index|[
name|i
index|]
argument_list|)
operator|!=
name|false
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
comment|/* Wait for unslotted readers to drain out. */
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|n_readers
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_undef
undef|#
directive|undef
name|CK_BYTELOCK_LENGTH
end_undef

begin_undef
undef|#
directive|undef
name|CK_BYTELOCK_LOAD
end_undef

begin_undef
undef|#
directive|undef
name|CK_BYTELOCK_TYPE
end_undef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bytelock_write_unlock
parameter_list|(
name|struct
name|ck_bytelock
modifier|*
name|bytelock
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bytelock_read_lock
parameter_list|(
name|struct
name|ck_bytelock
modifier|*
name|bytelock
parameter_list|,
name|unsigned
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|)
operator|==
name|slot
condition|)
block|{
name|ck_pr_store_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
operator|-
literal|1
index|]
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|ck_pr_fence_strict_store
argument_list|()
expr_stmt|;
name|ck_pr_store_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/* Unslotted threads will have to use the readers counter. */
if|if
condition|(
name|slot
operator|>
sizeof|sizeof
name|bytelock
operator|->
name|readers
condition|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|ck_pr_inc_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|n_readers
argument_list|)
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|)
operator|==
literal|0
condition|)
break|break;
name|ck_pr_dec_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|n_readers
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
name|slot
operator|-=
literal|1
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
ifdef|#
directive|ifdef
name|CK_F_PR_FAA_8
name|ck_pr_fas_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
index|]
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|ck_pr_fence_atomic_load
argument_list|()
expr_stmt|;
else|#
directive|else
name|ck_pr_store_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
index|]
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|ck_pr_fence_store_load
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|/* 		 * If there is no owner at this point, our slot has 		 * already been published and it is guaranteed no 		 * write acquisition will succeed until we drain out. 		 */
if|if
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|)
operator|==
literal|0
condition|)
break|break;
name|ck_pr_store_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
index|]
argument_list|,
name|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|ck_pr_load_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|owner
argument_list|)
operator|!=
literal|0
condition|)
name|ck_pr_stall
argument_list|()
expr_stmt|;
block|}
name|ck_pr_fence_lock
argument_list|()
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_bytelock_read_unlock
parameter_list|(
name|struct
name|ck_bytelock
modifier|*
name|bytelock
parameter_list|,
name|unsigned
name|int
name|slot
parameter_list|)
block|{
name|ck_pr_fence_unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|slot
operator|>
sizeof|sizeof
name|bytelock
operator|->
name|readers
condition|)
name|ck_pr_dec_uint
argument_list|(
operator|&
name|bytelock
operator|->
name|n_readers
argument_list|)
expr_stmt|;
else|else
name|ck_pr_store_8
argument_list|(
operator|&
name|bytelock
operator|->
name|readers
index|[
name|slot
operator|-
literal|1
index|]
argument_list|,
name|false
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_BYTELOCK_H */
end_comment

end_unit

