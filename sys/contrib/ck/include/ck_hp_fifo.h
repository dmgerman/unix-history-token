begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * Copyright 2011 David Joseph.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HP_FIFO_H
end_ifndef

begin_define
define|#
directive|define
name|CK_HP_FIFO_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_hp.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_define
define|#
directive|define
name|CK_HP_FIFO_SLOTS_COUNT
value|(2)
end_define

begin_define
define|#
directive|define
name|CK_HP_FIFO_SLOTS_SIZE
value|(sizeof(void *) * CK_HP_FIFO_SLOTS_COUNT)
end_define

begin_comment
comment|/*  * Though it is possible to embed the data structure, measurements need  * to be made for the cost of this. If we were to embed the hazard pointer  * state into the data structure, this means every deferred reclamation  * will also include a cache invalidation when linking into the hazard pointer  * pending queue. This may lead to terrible cache line bouncing.  */
end_comment

begin_struct
struct|struct
name|ck_hp_fifo_entry
block|{
name|void
modifier|*
name|value
decl_stmt|;
name|ck_hp_hazard_t
name|hazard
decl_stmt|;
name|struct
name|ck_hp_fifo_entry
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_hp_fifo_entry
name|ck_hp_fifo_entry_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_hp_fifo
block|{
name|struct
name|ck_hp_fifo_entry
modifier|*
name|head
decl_stmt|;
name|struct
name|ck_hp_fifo_entry
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_hp_fifo
name|ck_hp_fifo_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_fifo_init
parameter_list|(
name|struct
name|ck_hp_fifo
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_hp_fifo_entry
modifier|*
name|stub
parameter_list|)
block|{
name|fifo
operator|->
name|head
operator|=
name|fifo
operator|->
name|tail
operator|=
name|stub
expr_stmt|;
name|stub
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_fifo_deinit
parameter_list|(
name|struct
name|ck_hp_fifo
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_hp_fifo_entry
modifier|*
modifier|*
name|stub
parameter_list|)
block|{
operator|*
name|stub
operator|=
name|fifo
operator|->
name|head
expr_stmt|;
name|fifo
operator|->
name|head
operator|=
name|fifo
operator|->
name|tail
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_fifo_enqueue_mpmc
parameter_list|(
name|ck_hp_record_t
modifier|*
name|record
parameter_list|,
name|struct
name|ck_hp_fifo
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_hp_fifo_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_hp_fifo_entry
modifier|*
name|tail
decl_stmt|,
modifier|*
name|next
decl_stmt|;
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|entry
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|tail
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|tail
argument_list|)
expr_stmt|;
if|if
condition|(
name|tail
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
condition|)
continue|continue;
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|->
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
name|NULL
condition|)
block|{
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|next
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|->
name|next
argument_list|,
name|next
argument_list|,
name|entry
argument_list|)
operator|==
name|true
condition|)
break|break;
block|}
name|ck_pr_fence_atomic
argument_list|()
expr_stmt|;
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_hp_fifo_tryenqueue_mpmc
parameter_list|(
name|ck_hp_record_t
modifier|*
name|record
parameter_list|,
name|struct
name|ck_hp_fifo
modifier|*
name|fifo
parameter_list|,
name|struct
name|ck_hp_fifo_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_hp_fifo_entry
modifier|*
name|tail
decl_stmt|,
modifier|*
name|next
decl_stmt|;
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
name|entry
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|ck_pr_fence_store_atomic
argument_list|()
expr_stmt|;
name|tail
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|tail
argument_list|)
expr_stmt|;
if|if
condition|(
name|tail
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
condition|)
return|return
name|false
return|;
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|tail
operator|->
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
name|NULL
condition|)
block|{
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|next
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
elseif|else
if|if
condition|(
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
operator|->
name|next
argument_list|,
name|next
argument_list|,
name|entry
argument_list|)
operator|==
name|false
condition|)
return|return
name|false
return|;
name|ck_pr_fence_atomic
argument_list|()
expr_stmt|;
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_expr_stmt
name|CK_CC_INLINE
specifier|static
expr|struct
name|ck_hp_fifo_entry
operator|*
name|ck_hp_fifo_dequeue_mpmc
argument_list|(
argument|ck_hp_record_t *record
argument_list|,
argument|struct ck_hp_fifo *fifo
argument_list|,
argument|void *value
argument_list|)
block|{ 	struct
name|ck_hp_fifo_entry
operator|*
name|head
block|,
operator|*
name|tail
block|,
operator|*
name|next
block|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|head
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|head
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
condition|)
continue|continue;
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|head
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|head
operator|==
name|tail
condition|)
block|{
if|if
condition|(
name|next
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|next
argument_list|)
expr_stmt|;
continue|continue;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|,
name|head
argument_list|,
name|next
argument_list|)
operator|==
name|true
condition|)
break|break;
end_elseif

begin_expr_stmt
unit|}  	ck_pr_store_ptr_unsafe
operator|(
name|value
operator|,
name|next
operator|->
name|value
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|head
return|;
end_return

begin_function
unit|}  CK_CC_INLINE
specifier|static
name|struct
name|ck_hp_fifo_entry
modifier|*
name|ck_hp_fifo_trydequeue_mpmc
parameter_list|(
name|ck_hp_record_t
modifier|*
name|record
parameter_list|,
name|struct
name|ck_hp_fifo
modifier|*
name|fifo
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
name|struct
name|ck_hp_fifo_entry
modifier|*
name|head
decl_stmt|,
modifier|*
name|tail
decl_stmt|,
modifier|*
name|next
decl_stmt|;
name|head
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
expr_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
name|tail
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|0
argument_list|,
name|head
argument_list|)
expr_stmt|;
if|if
condition|(
name|head
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
condition|)
return|return
name|NULL
return|;
name|next
operator|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|head
operator|->
name|next
argument_list|)
expr_stmt|;
name|ck_hp_set_fence
argument_list|(
name|record
argument_list|,
literal|1
argument_list|,
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|head
operator|!=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|)
condition|)
return|return
name|NULL
return|;
if|if
condition|(
name|head
operator|==
name|tail
condition|)
block|{
if|if
condition|(
name|next
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|tail
argument_list|,
name|tail
argument_list|,
name|next
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
elseif|else
if|if
condition|(
name|ck_pr_cas_ptr
argument_list|(
operator|&
name|fifo
operator|->
name|head
argument_list|,
name|head
argument_list|,
name|next
argument_list|)
operator|==
name|false
condition|)
return|return
name|NULL
return|;
name|ck_pr_store_ptr_unsafe
argument_list|(
name|value
argument_list|,
name|next
operator|->
name|value
argument_list|)
expr_stmt|;
return|return
name|head
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_HP_FIFO_ISEMPTY
parameter_list|(
name|f
parameter_list|)
value|((f)->head->next == NULL)
end_define

begin_define
define|#
directive|define
name|CK_HP_FIFO_FIRST
parameter_list|(
name|f
parameter_list|)
value|((f)->head->next)
end_define

begin_define
define|#
directive|define
name|CK_HP_FIFO_NEXT
parameter_list|(
name|m
parameter_list|)
value|((m)->next)
end_define

begin_define
define|#
directive|define
name|CK_HP_FIFO_FOREACH
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|)
define|\
value|for ((entry) = CK_HP_FIFO_FIRST(fifo);                	\              (entry) != NULL;                                   \              (entry) = CK_HP_FIFO_NEXT(entry))
end_define

begin_define
define|#
directive|define
name|CK_HP_FIFO_FOREACH_SAFE
parameter_list|(
name|fifo
parameter_list|,
name|entry
parameter_list|,
name|T
parameter_list|)
define|\
value|for ((entry) = CK_HP_FIFO_FIRST(fifo);			\              (entry) != NULL&& ((T) = (entry)->next, 1);	\              (entry) = (T))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_HP_FIFO_H */
end_comment

end_unit

