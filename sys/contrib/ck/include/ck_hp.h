begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2010-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HP_H
end_ifndef

begin_define
define|#
directive|define
name|CK_HP_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stack.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HP_CACHE
end_ifndef

begin_define
define|#
directive|define
name|CK_HP_CACHE
value|512
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|ck_hp_hazard
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|ck_hp_destructor_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|ck_hp
block|{
name|ck_stack_t
name|subscribers
decl_stmt|;
name|unsigned
name|int
name|n_subscribers
decl_stmt|;
name|unsigned
name|int
name|n_free
decl_stmt|;
name|unsigned
name|int
name|threshold
decl_stmt|;
name|unsigned
name|int
name|degree
decl_stmt|;
name|ck_hp_destructor_t
name|destroy
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_hp
name|ck_hp_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_hp_hazard
block|{
name|void
modifier|*
name|pointer
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|ck_stack_entry_t
name|pending_entry
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_hp_hazard
name|ck_hp_hazard_t
typedef|;
end_typedef

begin_enum
enum|enum
block|{
name|CK_HP_USED
init|=
literal|0
block|,
name|CK_HP_FREE
init|=
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ck_hp_record
block|{
name|int
name|state
decl_stmt|;
name|void
modifier|*
modifier|*
name|pointers
decl_stmt|;
name|void
modifier|*
name|cache
index|[
name|CK_HP_CACHE
index|]
decl_stmt|;
name|struct
name|ck_hp
modifier|*
name|global
decl_stmt|;
name|ck_stack_t
name|pending
decl_stmt|;
name|unsigned
name|int
name|n_pending
decl_stmt|;
name|ck_stack_entry_t
name|global_entry
decl_stmt|;
name|unsigned
name|int
name|n_peak
decl_stmt|;
name|uint64_t
name|n_reclamations
decl_stmt|;
block|}
name|CK_CC_CACHELINE
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_hp_record
name|ck_hp_record_t
typedef|;
end_typedef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_set
parameter_list|(
name|struct
name|ck_hp_record
modifier|*
name|record
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|,
name|void
modifier|*
name|pointer
parameter_list|)
block|{
name|ck_pr_store_ptr
argument_list|(
operator|&
name|record
operator|->
name|pointers
index|[
name|i
index|]
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_set_fence
parameter_list|(
name|struct
name|ck_hp_record
modifier|*
name|record
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|,
name|void
modifier|*
name|pointer
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_MD_TSO
name|ck_pr_fas_ptr
argument_list|(
operator|&
name|record
operator|->
name|pointers
index|[
name|i
index|]
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
else|#
directive|else
name|ck_pr_store_ptr
argument_list|(
operator|&
name|record
operator|->
name|pointers
index|[
name|i
index|]
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|ck_pr_fence_memory
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_hp_clear
parameter_list|(
name|struct
name|ck_hp_record
modifier|*
name|record
parameter_list|)
block|{
name|void
modifier|*
modifier|*
name|pointers
init|=
name|record
operator|->
name|pointers
decl_stmt|;
name|unsigned
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|record
operator|->
name|global
operator|->
name|degree
condition|;
name|i
operator|++
control|)
operator|*
name|pointers
operator|++
operator|=
name|NULL
expr_stmt|;
return|return;
block|}
end_function

begin_function_decl
name|void
name|ck_hp_init
parameter_list|(
name|ck_hp_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|ck_hp_destructor_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_set_threshold
parameter_list|(
name|ck_hp_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_register
parameter_list|(
name|ck_hp_t
modifier|*
parameter_list|,
name|ck_hp_record_t
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_unregister
parameter_list|(
name|ck_hp_record_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ck_hp_record_t
modifier|*
name|ck_hp_recycle
parameter_list|(
name|ck_hp_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_reclaim
parameter_list|(
name|ck_hp_record_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_free
parameter_list|(
name|ck_hp_record_t
modifier|*
parameter_list|,
name|ck_hp_hazard_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_retire
parameter_list|(
name|ck_hp_record_t
modifier|*
parameter_list|,
name|ck_hp_hazard_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_hp_purge
parameter_list|(
name|ck_hp_record_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_HP_H */
end_comment

end_unit

