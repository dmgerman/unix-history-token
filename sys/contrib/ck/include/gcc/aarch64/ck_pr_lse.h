begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009-2016 Samy Al Bahra.  * Copyright 2013-2016 Olivier Houchard.  * Copyright 2016 Alexey Kopytov.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_PR_AARCH64_LSE_H
end_ifndef

begin_define
define|#
directive|define
name|CK_PR_AARCH64_LSE_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CK_PR_H
end_ifndef

begin_error
error|#
directive|error
error|Do not include this file directly, use ck_pr.h
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_pr_cas_64_2_value
parameter_list|(
name|uint64_t
name|target
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
name|compare
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
name|set
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
name|value
index|[
literal|2
index|]
parameter_list|)
block|{
name|uint64_t
name|tmp1
decl_stmt|;
name|uint64_t
name|tmp2
decl_stmt|;
specifier|register
name|uint64_t
name|x0
name|__asm__
argument_list|(
literal|"x0"
argument_list|)
init|=
name|compare
index|[
literal|0
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x1
name|__asm__
argument_list|(
literal|"x1"
argument_list|)
init|=
name|compare
index|[
literal|1
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x2
name|__asm__
argument_list|(
literal|"x2"
argument_list|)
init|=
name|set
index|[
literal|0
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x3
name|__asm__
argument_list|(
literal|"x3"
argument_list|)
init|=
name|set
index|[
literal|1
index|]
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("casp %0, %1, %4, %5, [%6];"                              "eor %2, %0, %7;"                              "eor %3, %1, %8;"                              "orr %2, %2, %3;"                              : "+&r" (x0), "+&r" (x1), "=&r" (tmp1), "=&r" (tmp2)                              : "r" (x2), "r" (x3), "r" (target), "r" (compare[0]), "r" (compare[1])                              : "memory");
name|value
index|[
literal|0
index|]
operator|=
name|x0
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
name|x1
expr_stmt|;
return|return
operator|(
operator|!
operator|!
name|tmp1
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_pr_cas_ptr_2_value
parameter_list|(
name|void
modifier|*
name|target
parameter_list|,
name|void
modifier|*
name|compare
parameter_list|,
name|void
modifier|*
name|set
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
block|{
return|return
operator|(
name|ck_pr_cas_64_2_value
argument_list|(
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|target
argument_list|)
argument_list|,
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|compare
argument_list|)
argument_list|,
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|set
argument_list|)
argument_list|,
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|value
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_pr_cas_64_2
parameter_list|(
name|uint64_t
name|target
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
name|compare
index|[
literal|2
index|]
parameter_list|,
name|uint64_t
name|set
index|[
literal|2
index|]
parameter_list|)
block|{
specifier|register
name|uint64_t
name|x0
name|__asm__
argument_list|(
literal|"x0"
argument_list|)
init|=
name|compare
index|[
literal|0
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x1
name|__asm__
argument_list|(
literal|"x1"
argument_list|)
init|=
name|compare
index|[
literal|1
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x2
name|__asm__
argument_list|(
literal|"x2"
argument_list|)
init|=
name|set
index|[
literal|0
index|]
decl_stmt|;
specifier|register
name|uint64_t
name|x3
name|__asm__
argument_list|(
literal|"x3"
argument_list|)
init|=
name|set
index|[
literal|1
index|]
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|("casp %0, %1, %2, %3, [%4];"                              "eor %0, %0, %5;"                              "eor %1, %1, %6;"                              "orr %0, %0, %1;"                              : "+&r" (x0), "+&r" (x1)                              : "r" (x2), "r" (x3), "r" (target), "r" (compare[0]), "r" (compare[1])                              : "memory");
return|return
operator|(
operator|!
operator|!
name|x0
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_pr_cas_ptr_2
parameter_list|(
name|void
modifier|*
name|target
parameter_list|,
name|void
modifier|*
name|compare
parameter_list|,
name|void
modifier|*
name|set
parameter_list|)
block|{
return|return
operator|(
name|ck_pr_cas_64_2
argument_list|(
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|target
argument_list|)
argument_list|,
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|compare
argument_list|)
argument_list|,
name|CK_CPP_CAST
argument_list|(
name|uint64_t
operator|*
argument_list|,
name|set
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_PR_CAS
parameter_list|(
name|N
parameter_list|,
name|M
parameter_list|,
name|T
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|)
define|\
value|CK_CC_INLINE static bool					\         ck_pr_cas_##N##_value(M *target, T compare, T set, M *value)	\         {								\                   *(T *)value = compare;				\                 __asm__ __volatile__(					\                                      "cas" W " %" R "0, %" R "2, [%1];"	\                     : "+&r" (*(T *)value)				\                     : "r"   (target),					\                     "r"   (set)						\                     : "memory");					\                 return (*(T *)value == compare);                        \         }								\         CK_CC_INLINE static bool					\         ck_pr_cas_##N(M *target, T compare, T set)			\         {								\                 T previous = compare;					\                 __asm__ __volatile__(					\                                      "cas" W " %" R "0, %" R "2, [%1];"	\                     : "+&r" (previous)					\                     : "r"   (target),					\                     "r"   (set)						\                     : "memory");					\                 return (previous == compare);   			\         }
end_define

begin_macro
name|CK_PR_CAS
argument_list|(
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|void *
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_define
define|#
directive|define
name|CK_PR_CAS_S
parameter_list|(
name|N
parameter_list|,
name|M
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|)
value|CK_PR_CAS(N, M, M, W, R)
end_define

begin_macro
name|CK_PR_CAS_S
argument_list|(
literal|64
argument_list|,
argument|uint64_t
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_ifndef
ifndef|#
directive|ifndef
name|CK_PR_DISABLE_DOUBLE
end_ifndef

begin_macro
name|CK_PR_CAS_S
argument_list|(
argument|double
argument_list|,
argument|double
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|CK_PR_CAS_S
argument_list|(
literal|32
argument_list|,
argument|uint32_t
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
argument|uint
argument_list|,
argument|unsigned int
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
literal|16
argument_list|,
argument|uint16_t
argument_list|,
literal|"h"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
literal|8
argument_list|,
argument|uint8_t
argument_list|,
literal|"b"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
argument|short
argument_list|,
argument|short
argument_list|,
literal|"h"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_CAS_S
argument_list|(
argument|char
argument_list|,
argument|char
argument_list|,
literal|"b"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|CK_PR_CAS_S
end_undef

begin_undef
undef|#
directive|undef
name|CK_PR_CAS
end_undef

begin_define
define|#
directive|define
name|CK_PR_FAS
parameter_list|(
name|N
parameter_list|,
name|M
parameter_list|,
name|T
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|)
define|\
value|CK_CC_INLINE static T						\         ck_pr_fas_##N(M *target, T v)					\         {								\                 T previous;						\                 __asm__ __volatile__(					\                                      "swp" W " %" R "2, %" R "0, [%1];"	\                                         : "=&r" (previous)		\                                         : "r"   (target),		\                                           "r"   (v)			\                                         : "memory");			\                 return (previous);					\         }
end_define

begin_macro
name|CK_PR_FAS
argument_list|(
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
literal|32
argument_list|,
argument|uint32_t
argument_list|,
argument|uint32_t
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|void *
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
argument|int
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
argument|uint
argument_list|,
argument|unsigned int
argument_list|,
argument|unsigned int
argument_list|,
literal|""
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
literal|16
argument_list|,
argument|uint16_t
argument_list|,
argument|uint16_t
argument_list|,
literal|"h"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
literal|8
argument_list|,
argument|uint8_t
argument_list|,
argument|uint8_t
argument_list|,
literal|"b"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
argument|short
argument_list|,
argument|short
argument_list|,
argument|short
argument_list|,
literal|"h"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAS
argument_list|(
argument|char
argument_list|,
argument|char
argument_list|,
argument|char
argument_list|,
literal|"b"
argument_list|,
literal|"w"
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|CK_PR_FAS
end_undef

begin_define
define|#
directive|define
name|CK_PR_UNARY
parameter_list|(
name|O
parameter_list|,
name|N
parameter_list|,
name|M
parameter_list|,
name|T
parameter_list|,
name|I
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|,
name|S
parameter_list|)
define|\
value|CK_CC_INLINE static void				\         ck_pr_##O##_##N(M *target)				\         {							\                 __asm__ __volatile__(I ";"			\                                      "st" S W " " R "0, [%0];"	\                                         :			\                                         : "r"   (target)	\                                         : "x0", "memory");	\                 return;						\         }
end_define

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|inc
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|void *
argument_list|,
literal|"mov x0, 1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"add"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|dec
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|void *
argument_list|,
literal|"mov x0, -1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"add"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|not
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|void *
argument_list|,
literal|"mov x0, -1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"eor"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|inc
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"mov x0, 1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"add"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|dec
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"mov x0, -1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"add"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY
argument_list|(
argument|not
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"mov x0, -1"
argument_list|,
literal|""
argument_list|,
literal|"x"
argument_list|,
literal|"eor"
argument_list|)
end_macro

begin_define
define|#
directive|define
name|CK_PR_UNARY_S
parameter_list|(
name|S
parameter_list|,
name|T
parameter_list|,
name|W
parameter_list|)
define|\
value|CK_PR_UNARY(inc, S, T, T, "mov w0, 1", W, "w", "add")	\         CK_PR_UNARY(dec, S, T, T, "mov w0, -1", W, "w", "add")	\         CK_PR_UNARY(not, S, T, T, "mov w0, -1", W, "w", "eor")	\  CK_PR_UNARY_S(32, uint32_t, "")
end_define

begin_macro
name|CK_PR_UNARY_S
argument_list|(
argument|uint
argument_list|,
argument|unsigned int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY_S
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY_S
argument_list|(
literal|16
argument_list|,
argument|uint16_t
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY_S
argument_list|(
literal|8
argument_list|,
argument|uint8_t
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY_S
argument_list|(
argument|short
argument_list|,
argument|short
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_UNARY_S
argument_list|(
argument|char
argument_list|,
argument|char
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|CK_PR_UNARY_S
end_undef

begin_undef
undef|#
directive|undef
name|CK_PR_UNARY
end_undef

begin_define
define|#
directive|define
name|CK_PR_BINARY
parameter_list|(
name|O
parameter_list|,
name|N
parameter_list|,
name|M
parameter_list|,
name|T
parameter_list|,
name|S
parameter_list|,
name|W
parameter_list|,
name|R
parameter_list|,
name|I
parameter_list|)
define|\
value|CK_CC_INLINE static void				\         ck_pr_##O##_##N(M *target, T delta)			\         {							\                 __asm__ __volatile__(I ";"			\                                      "st" S W " %" R "0, [%1];"	\                                         : "+&r" (delta)		\                                         : "r"   (target)	\                                         : "memory");		\                 return;						\         }
end_define

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|and
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|uintptr_t
argument_list|,
literal|"clr"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"mvn %0, %0"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|add
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|uintptr_t
argument_list|,
literal|"add"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|or
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|uintptr_t
argument_list|,
literal|"set"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|sub
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|uintptr_t
argument_list|,
literal|"add"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"neg %0, %0"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|xor
argument_list|,
argument|ptr
argument_list|,
argument|void
argument_list|,
argument|uintptr_t
argument_list|,
literal|"eor"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|and
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"clr"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"mvn %0, %0"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|add
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"add"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|or
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"set"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|sub
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"add"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"neg %0, %0"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY
argument_list|(
argument|xor
argument_list|,
literal|64
argument_list|,
argument|uint64_t
argument_list|,
argument|uint64_t
argument_list|,
literal|"eor"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
end_macro

begin_define
define|#
directive|define
name|CK_PR_BINARY_S
parameter_list|(
name|S
parameter_list|,
name|T
parameter_list|,
name|W
parameter_list|)
define|\
value|CK_PR_BINARY(and, S, T, T, "clr", W, "w", "mvn %w0, %w0")	\         CK_PR_BINARY(add, S, T, T, "add", W, "w", "")			\         CK_PR_BINARY(or, S, T, T, "set", W, "w", "")			\         CK_PR_BINARY(sub, S, T, T, "add", W, "w", "neg %w0, %w0")	\         CK_PR_BINARY(xor, S, T, T, "eor", W, "w", "")
end_define

begin_macro
name|CK_PR_BINARY_S
argument_list|(
literal|32
argument_list|,
argument|uint32_t
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
argument|uint
argument_list|,
argument|unsigned int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
literal|16
argument_list|,
argument|uint16_t
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
literal|8
argument_list|,
argument|uint8_t
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
argument|short
argument_list|,
argument|short
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_BINARY_S
argument_list|(
argument|char
argument_list|,
argument|char
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|CK_PR_BINARY_S
end_undef

begin_undef
undef|#
directive|undef
name|CK_PR_BINARY
end_undef

begin_function
name|CK_CC_INLINE
specifier|static
name|void
modifier|*
name|ck_pr_faa_ptr
parameter_list|(
name|void
modifier|*
name|target
parameter_list|,
name|uintptr_t
name|delta
parameter_list|)
block|{
name|uintptr_t
name|previous
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|(                              "ldadd %2, %0, [%1];"                                 : "=r" (previous)                                 : "r"   (target),                                   "r"   (delta)                                 : "memory");
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|previous
operator|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint64_t
name|ck_pr_faa_64
parameter_list|(
name|uint64_t
modifier|*
name|target
parameter_list|,
name|uint64_t
name|delta
parameter_list|)
block|{
name|uint64_t
name|previous
decl_stmt|;
asm|__asm__
specifier|__volatile__
asm|(                              "ldadd %2, %0, [%1];"                                 : "=r" (previous)                                 : "r"   (target),                                   "r"   (delta)                                 : "memory");
return|return
operator|(
name|previous
operator|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_PR_FAA
parameter_list|(
name|S
parameter_list|,
name|T
parameter_list|,
name|W
parameter_list|)
define|\
value|CK_CC_INLINE static T						\         ck_pr_faa_##S(T *target, T delta)				\         {								\                 T previous;						\                 __asm__ __volatile__(					\                                      "ldadd" W " %w2, %w0, [%1];"	\                                         : "=r" (previous)		\                                         : "r"   (target),		\                                           "r"   (delta)			\                                         : "memory");			\                 return (previous);					\         }
end_define

begin_macro
name|CK_PR_FAA
argument_list|(
literal|32
argument_list|,
argument|uint32_t
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
argument|uint
argument_list|,
argument|unsigned int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
argument|int
argument_list|,
argument|int
argument_list|,
literal|""
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
literal|16
argument_list|,
argument|uint16_t
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
literal|8
argument_list|,
argument|uint8_t
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
argument|short
argument_list|,
argument|short
argument_list|,
literal|"h"
argument_list|)
end_macro

begin_macro
name|CK_PR_FAA
argument_list|(
argument|char
argument_list|,
argument|char
argument_list|,
literal|"b"
argument_list|)
end_macro

begin_undef
undef|#
directive|undef
name|CK_PR_FAA
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_PR_AARCH64_LSE_H */
end_comment

end_unit

