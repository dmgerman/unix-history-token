begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2013-2015 Samy Al Bahra  * Copyright 2013-2014 AppNexus, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_ARRAY_H
end_ifndef

begin_define
define|#
directive|define
name|CK_ARRAY_H
end_define

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_malloc.h>
end_include

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_struct
struct|struct
name|_ck_array
block|{
name|unsigned
name|int
name|n_committed
decl_stmt|;
name|unsigned
name|int
name|length
decl_stmt|;
name|void
modifier|*
name|values
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ck_array
block|{
name|struct
name|ck_malloc
modifier|*
name|allocator
decl_stmt|;
name|struct
name|_ck_array
modifier|*
name|active
decl_stmt|;
name|unsigned
name|int
name|n_entries
decl_stmt|;
name|struct
name|_ck_array
modifier|*
name|transaction
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_array
name|ck_array_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_array_iterator
block|{
name|struct
name|_ck_array
modifier|*
name|snapshot
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_array_iterator
name|ck_array_iterator_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_ARRAY_MODE_SPMC
value|0U
end_define

begin_define
define|#
directive|define
name|CK_ARRAY_MODE_MPMC
value|(void)
end_define

begin_comment
comment|/* Unsupported. */
end_comment

begin_function_decl
name|bool
name|ck_array_init
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|ck_malloc
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_array_commit
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_array_put
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ck_array_put_unique
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_array_remove
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_array_deinit
parameter_list|(
name|ck_array_t
modifier|*
parameter_list|,
name|bool
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|CK_CC_INLINE
specifier|static
name|unsigned
name|int
name|ck_array_length
parameter_list|(
name|struct
name|ck_array
modifier|*
name|array
parameter_list|)
block|{
name|struct
name|_ck_array
modifier|*
name|a
init|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|array
operator|->
name|active
argument_list|)
decl_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
return|return
name|ck_pr_load_uint
argument_list|(
operator|&
name|a
operator|->
name|n_committed
argument_list|)
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
modifier|*
name|ck_array_buffer
parameter_list|(
name|struct
name|ck_array
modifier|*
name|array
parameter_list|,
name|unsigned
name|int
modifier|*
name|length
parameter_list|)
block|{
name|struct
name|_ck_array
modifier|*
name|a
init|=
name|ck_pr_load_ptr
argument_list|(
operator|&
name|array
operator|->
name|active
argument_list|)
decl_stmt|;
name|ck_pr_fence_load
argument_list|()
expr_stmt|;
operator|*
name|length
operator|=
name|ck_pr_load_uint
argument_list|(
operator|&
name|a
operator|->
name|n_committed
argument_list|)
expr_stmt|;
return|return
name|a
operator|->
name|values
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_array_initialized
parameter_list|(
name|struct
name|ck_array
modifier|*
name|array
parameter_list|)
block|{
return|return
name|ck_pr_load_ptr
argument_list|(
operator|&
name|array
operator|->
name|active
argument_list|)
operator|!=
name|NULL
return|;
block|}
end_function

begin_define
define|#
directive|define
name|CK_ARRAY_FOREACH
parameter_list|(
name|a
parameter_list|,
name|i
parameter_list|,
name|b
parameter_list|)
define|\
value|(i)->snapshot = ck_pr_load_ptr(&(a)->active);	\ 	ck_pr_fence_load();				\ 	for (unsigned int _ck_i = 0;		   	\ 	    _ck_i< (a)->active->n_committed&&		\ 	    ((*b) = (a)->active->values[_ck_i], 1);	\ 	    _ck_i++)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_ARRAY_H */
end_comment

end_unit

