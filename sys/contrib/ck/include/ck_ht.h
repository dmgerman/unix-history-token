begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2012-2015 Samy Al Bahra.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HT_H
end_ifndef

begin_define
define|#
directive|define
name|CK_HT_H
end_define

begin_include
include|#
directive|include
file|<ck_pr.h>
end_include

begin_define
define|#
directive|define
name|CK_F_HT
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CK_F_PR_LOAD_64
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_F_PR_STORE_64
argument_list|)
end_if

begin_define
define|#
directive|define
name|CK_HT_TYPE
value|uint64_t
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_LOAD
value|ck_pr_load_64
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_STORE
value|ck_pr_store_64
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_MAX
value|UINT64_MAX
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CK_HT_TYPE
value|uint32_t
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_LOAD
value|ck_pr_load_32
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_STORE
value|ck_pr_store_32
end_define

begin_define
define|#
directive|define
name|CK_HT_TYPE_MAX
value|UINT32_MAX
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<ck_cc.h>
end_include

begin_include
include|#
directive|include
file|<ck_malloc.h>
end_include

begin_include
include|#
directive|include
file|<ck_md.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdint.h>
end_include

begin_include
include|#
directive|include
file|<ck_stdbool.h>
end_include

begin_include
include|#
directive|include
file|<ck_stddef.h>
end_include

begin_struct
struct|struct
name|ck_ht_hash
block|{
name|uint64_t
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_ht_hash
name|ck_ht_hash_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_HT_MODE_DIRECT
value|1U
end_define

begin_define
define|#
directive|define
name|CK_HT_MODE_BYTESTRING
value|2U
end_define

begin_define
define|#
directive|define
name|CK_HT_WORKLOAD_DELETE
value|4U
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|CK_MD_POINTER_PACK_ENABLE
argument_list|)
operator|&&
name|defined
argument_list|(
name|CK_MD_VMA_BITS
argument_list|)
end_if

begin_define
define|#
directive|define
name|CK_HT_PP
end_define

begin_define
define|#
directive|define
name|CK_HT_KEY_LENGTH
value|((sizeof(void *) * 8) - CK_MD_VMA_BITS)
end_define

begin_define
define|#
directive|define
name|CK_HT_KEY_MASK
value|((1U<< CK_HT_KEY_LENGTH) - 1)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CK_HT_KEY_LENGTH
value|65535U
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|ck_ht_entry
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
name|uintptr_t
name|key
decl_stmt|;
name|uintptr_t
name|value
name|CK_CC_PACKED
decl_stmt|;
block|}
name|CK_CC_ALIGN
argument_list|(
literal|16
argument_list|)
struct|;
end_struct

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|uintptr_t
name|key
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintptr_t
name|value
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CK_HT_TYPE
name|key_length
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CK_HT_TYPE
name|hash
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|} CK_CC_ALIGN
operator|(
literal|32
operator|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|struct
name|ck_ht_entry
name|ck_ht_entry_t
typedef|;
end_typedef

begin_comment
comment|/*  * The user is free to define their own stub values.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HT_KEY_EMPTY
end_ifndef

begin_define
define|#
directive|define
name|CK_HT_KEY_EMPTY
value|((uintptr_t)0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CK_HT_KEY_TOMBSTONE
end_ifndef

begin_define
define|#
directive|define
name|CK_HT_KEY_TOMBSTONE
value|(~CK_HT_KEY_EMPTY)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Hash callback function. First argument is updated to contain a hash value,  * second argument is the key, third argument is key length and final argument  * is the hash table seed value.  */
end_comment

begin_typedef
typedef|typedef
name|void
name|ck_ht_hash_cb_t
parameter_list|(
name|ck_ht_hash_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_typedef

begin_struct_decl
struct_decl|struct
name|ck_ht_map
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ck_ht
block|{
name|struct
name|ck_malloc
modifier|*
name|m
decl_stmt|;
name|struct
name|ck_ht_map
modifier|*
name|map
decl_stmt|;
name|unsigned
name|int
name|mode
decl_stmt|;
name|uint64_t
name|seed
decl_stmt|;
name|ck_ht_hash_cb_t
modifier|*
name|h
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_ht
name|ck_ht_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ck_ht_stat
block|{
name|uint64_t
name|probe_maximum
decl_stmt|;
name|uint64_t
name|n_entries
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ck_ht_iterator
block|{
name|struct
name|ck_ht_entry
modifier|*
name|current
decl_stmt|;
name|uint64_t
name|offset
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|ck_ht_iterator
name|ck_ht_iterator_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|CK_HT_ITERATOR_INITIALIZER
value|{ NULL, 0 }
end_define

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ht_iterator_init
parameter_list|(
name|struct
name|ck_ht_iterator
modifier|*
name|iterator
parameter_list|)
block|{
name|iterator
operator|->
name|current
operator|=
name|NULL
expr_stmt|;
name|iterator
operator|->
name|offset
operator|=
literal|0
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|bool
name|ck_ht_entry_empty
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|->
name|key
operator|==
name|CK_HT_KEY_EMPTY
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ht_entry_key_set_direct
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|,
name|uintptr_t
name|key
parameter_list|)
block|{
name|entry
operator|->
name|key
operator|=
name|key
expr_stmt|;
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ht_entry_key_set
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|,
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|uint16_t
name|key_length
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
name|entry
operator|->
name|key
operator|=
operator|(
name|uintptr_t
operator|)
name|key
operator||
operator|(
operator|(
name|uintptr_t
operator|)
name|key_length
operator|<<
name|CK_MD_VMA_BITS
operator|)
expr_stmt|;
else|#
directive|else
name|entry
operator|->
name|key
operator|=
operator|(
name|uintptr_t
operator|)
name|key
expr_stmt|;
name|entry
operator|->
name|key_length
operator|=
name|key_length
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
modifier|*
name|ck_ht_entry_key
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|entry
operator|->
name|key
operator|&
operator|(
operator|(
operator|(
name|uintptr_t
operator|)
literal|1
operator|<<
name|CK_MD_VMA_BITS
operator|)
operator|-
literal|1
operator|)
operator|)
return|;
else|#
directive|else
return|return
operator|(
name|void
operator|*
operator|)
name|entry
operator|->
name|key
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uint16_t
name|ck_ht_entry_key_length
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
return|return
name|entry
operator|->
name|key
operator|>>
name|CK_MD_VMA_BITS
return|;
else|#
directive|else
return|return
name|entry
operator|->
name|key_length
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
modifier|*
name|ck_ht_entry_value
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|entry
operator|->
name|value
operator|&
operator|(
operator|(
operator|(
name|uintptr_t
operator|)
literal|1
operator|<<
name|CK_MD_VMA_BITS
operator|)
operator|-
literal|1
operator|)
operator|)
return|;
else|#
directive|else
return|return
operator|(
name|void
operator|*
operator|)
name|entry
operator|->
name|value
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ht_entry_set
parameter_list|(
name|struct
name|ck_ht_entry
modifier|*
name|entry
parameter_list|,
name|ck_ht_hash_t
name|h
parameter_list|,
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|uint16_t
name|key_length
parameter_list|,
specifier|const
name|void
modifier|*
name|value
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|CK_HT_PP
name|entry
operator|->
name|key
operator|=
operator|(
name|uintptr_t
operator|)
name|key
operator||
operator|(
operator|(
name|uintptr_t
operator|)
name|key_length
operator|<<
name|CK_MD_VMA_BITS
operator|)
expr_stmt|;
name|entry
operator|->
name|value
operator|=
operator|(
name|uintptr_t
operator|)
name|value
operator||
operator|(
call|(
name|uintptr_t
call|)
argument_list|(
name|h
operator|.
name|value
operator|>>
literal|32
argument_list|)
operator|<<
name|CK_MD_VMA_BITS
operator|)
expr_stmt|;
else|#
directive|else
name|entry
operator|->
name|key
operator|=
operator|(
name|uintptr_t
operator|)
name|key
expr_stmt|;
name|entry
operator|->
name|value
operator|=
operator|(
name|uintptr_t
operator|)
name|value
expr_stmt|;
name|entry
operator|->
name|key_length
operator|=
name|key_length
expr_stmt|;
name|entry
operator|->
name|hash
operator|=
name|h
operator|.
name|value
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|void
name|ck_ht_entry_set_direct
parameter_list|(
name|struct
name|ck_ht_entry
modifier|*
name|entry
parameter_list|,
name|ck_ht_hash_t
name|h
parameter_list|,
name|uintptr_t
name|key
parameter_list|,
name|uintptr_t
name|value
parameter_list|)
block|{
name|entry
operator|->
name|key
operator|=
name|key
expr_stmt|;
name|entry
operator|->
name|value
operator|=
name|value
expr_stmt|;
ifndef|#
directive|ifndef
name|CK_HT_PP
name|entry
operator|->
name|hash
operator|=
name|h
operator|.
name|value
expr_stmt|;
else|#
directive|else
operator|(
name|void
operator|)
name|h
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uintptr_t
name|ck_ht_entry_key_direct
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|->
name|key
return|;
block|}
end_function

begin_function
name|CK_CC_INLINE
specifier|static
name|uintptr_t
name|ck_ht_entry_value_direct
parameter_list|(
name|ck_ht_entry_t
modifier|*
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|->
name|value
return|;
block|}
end_function

begin_comment
comment|/*  * Iteration must occur without any concurrent mutations on  * the hash table.  */
end_comment

begin_function_decl
name|bool
name|ck_ht_next
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|ck_ht_iterator_t
modifier|*
parameter_list|,
name|ck_ht_entry_t
modifier|*
modifier|*
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_ht_stat
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|struct
name|ck_ht_stat
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_ht_hash
parameter_list|(
name|ck_ht_hash_t
modifier|*
parameter_list|,
name|ck_ht_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_ht_hash_direct
parameter_list|(
name|ck_ht_hash_t
modifier|*
parameter_list|,
name|ck_ht_t
modifier|*
parameter_list|,
name|uintptr_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_init
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|ck_ht_hash_cb_t
modifier|*
parameter_list|,
name|struct
name|ck_malloc
modifier|*
parameter_list|,
name|CK_HT_TYPE
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ck_ht_destroy
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_set_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|ck_ht_hash_t
parameter_list|,
name|ck_ht_entry_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_put_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|ck_ht_hash_t
parameter_list|,
name|ck_ht_entry_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_get_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|ck_ht_hash_t
parameter_list|,
name|ck_ht_entry_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_gc
parameter_list|(
name|struct
name|ck_ht
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_grow_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|CK_HT_TYPE
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_remove_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|ck_ht_hash_t
parameter_list|,
name|ck_ht_entry_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_reset_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ck_ht_reset_size_spmc
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|,
name|CK_HT_TYPE
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|CK_HT_TYPE
name|ck_ht_count
parameter_list|(
name|ck_ht_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CK_HT_H */
end_comment

end_unit

