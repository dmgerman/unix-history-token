begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_SDT_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_SDT_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_KERNEL
define|#
directive|define
name|DTRACE_PROBE
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|)
value|{					\ 	extern void __dtrace_##provider##___##name(void);		\ 	__dtrace_##provider##___##name();				\ }
define|#
directive|define
name|DTRACE_PROBE1
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|,
name|arg1
parameter_list|)
value|{				\ 	extern void __dtrace_##provider##___##name(unsigned long);	\ 	__dtrace_##provider##___##name((unsigned long)arg1);		\ }
define|#
directive|define
name|DTRACE_PROBE2
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|,
name|arg1
parameter_list|,
name|arg2
parameter_list|)
value|{			\ 	extern void __dtrace_##provider##___##name(unsigned long,	\ 	    unsigned long);						\ 	__dtrace_##provider##___##name((unsigned long)arg1,		\ 	    (unsigned long)arg2);					\ }
define|#
directive|define
name|DTRACE_PROBE3
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|,
name|arg1
parameter_list|,
name|arg2
parameter_list|,
name|arg3
parameter_list|)
value|{		\ 	extern void __dtrace_##provider##___##name(unsigned long,	\ 	    unsigned long, unsigned long);				\ 	__dtrace_##provider##___##name((unsigned long)arg1,		\ 	    (unsigned long)arg2, (unsigned long)arg3);			\ }
define|#
directive|define
name|DTRACE_PROBE4
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|,
name|arg1
parameter_list|,
name|arg2
parameter_list|,
name|arg3
parameter_list|,
name|arg4
parameter_list|)
value|{		\ 	extern void __dtrace_##provider##___##name(unsigned long,	\ 	    unsigned long, unsigned long, unsigned long);		\ 	__dtrace_##provider##___##name((unsigned long)arg1,		\ 	    (unsigned long)arg2, (unsigned long)arg3,			\ 	    (unsigned long)arg4);					\ }
define|#
directive|define
name|DTRACE_PROBE5
parameter_list|(
name|provider
parameter_list|,
name|name
parameter_list|,
name|arg1
parameter_list|,
name|arg2
parameter_list|,
name|arg3
parameter_list|,
name|arg4
parameter_list|,
name|arg5
parameter_list|)
value|{	\ 	extern void __dtrace_##provider##___##name(unsigned long,	\ 	    unsigned long, unsigned long, unsigned long, unsigned long);\ 	__dtrace_##provider##___##name((unsigned long)arg1,		\ 	    (unsigned long)arg2, (unsigned long)arg3,			\ 	    (unsigned long)arg4, (unsigned long)arg5);			\ }
else|#
directive|else
comment|/* _KERNEL */
define|#
directive|define
name|DTRACE_PROBE
parameter_list|(
name|name
parameter_list|)
value|{					\ 	extern void __dtrace_probe_##name(void);			\ 	__dtrace_probe_##name();					\ }
define|#
directive|define
name|DTRACE_PROBE1
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|)
value|{				\ 	extern void __dtrace_probe_##name(uintptr_t);			\ 	__dtrace_probe_##name((uintptr_t)(arg1));			\ }
define|#
directive|define
name|DTRACE_PROBE2
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|)
value|{			\ 	extern void __dtrace_probe_##name(uintptr_t, uintptr_t);	\ 	__dtrace_probe_##name((uintptr_t)(arg1), (uintptr_t)(arg2));	\ }
define|#
directive|define
name|DTRACE_PROBE3
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|,
name|type3
parameter_list|,
name|arg3
parameter_list|)
value|{	\ 	extern void __dtrace_probe_##name(uintptr_t, uintptr_t, uintptr_t); \ 	__dtrace_probe_##name((uintptr_t)(arg1), (uintptr_t)(arg2),	\ 	    (uintptr_t)(arg3));						\ }
define|#
directive|define
name|DTRACE_PROBE4
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|, 			\
name|type3
parameter_list|,
name|arg3
parameter_list|,
name|type4
parameter_list|,
name|arg4
parameter_list|)
value|{						\ 	extern void __dtrace_probe_##name(uintptr_t, uintptr_t,		\ 	    uintptr_t, uintptr_t);					\ 	__dtrace_probe_##name((uintptr_t)(arg1), (uintptr_t)(arg2),	\ 	    (uintptr_t)(arg3), (uintptr_t)(arg4));			\ }
define|#
directive|define
name|DTRACE_SCHED
parameter_list|(
name|name
parameter_list|)
define|\
value|DTRACE_PROBE(__sched_##name);
define|#
directive|define
name|DTRACE_SCHED1
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|)
define|\
value|DTRACE_PROBE1(__sched_##name, type1, arg1);
define|#
directive|define
name|DTRACE_SCHED2
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|)
define|\
value|DTRACE_PROBE2(__sched_##name, type1, arg1, type2, arg2);
define|#
directive|define
name|DTRACE_SCHED3
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|,
name|type3
parameter_list|,
name|arg3
parameter_list|)
define|\
value|DTRACE_PROBE3(__sched_##name, type1, arg1, type2, arg2, type3, arg3);
define|#
directive|define
name|DTRACE_SCHED4
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|, 			\
name|type3
parameter_list|,
name|arg3
parameter_list|,
name|type4
parameter_list|,
name|arg4
parameter_list|)
define|\
value|DTRACE_PROBE4(__sched_##name, type1, arg1, type2, arg2, 	\ 	    type3, arg3, type4, arg4);
define|#
directive|define
name|DTRACE_PROC
parameter_list|(
name|name
parameter_list|)
define|\
value|DTRACE_PROBE(__proc_##name);
define|#
directive|define
name|DTRACE_PROC1
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|)
define|\
value|DTRACE_PROBE1(__proc_##name, type1, arg1);
define|#
directive|define
name|DTRACE_PROC2
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|)
define|\
value|DTRACE_PROBE2(__proc_##name, type1, arg1, type2, arg2);
define|#
directive|define
name|DTRACE_PROC3
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|,
name|type3
parameter_list|,
name|arg3
parameter_list|)
define|\
value|DTRACE_PROBE3(__proc_##name, type1, arg1, type2, arg2, type3, arg3);
define|#
directive|define
name|DTRACE_PROC4
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|, 			\
name|type3
parameter_list|,
name|arg3
parameter_list|,
name|type4
parameter_list|,
name|arg4
parameter_list|)
define|\
value|DTRACE_PROBE4(__proc_##name, type1, arg1, type2, arg2, 		\ 	    type3, arg3, type4, arg4);
define|#
directive|define
name|DTRACE_IO
parameter_list|(
name|name
parameter_list|)
define|\
value|DTRACE_PROBE(__io_##name);
define|#
directive|define
name|DTRACE_IO1
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|)
define|\
value|DTRACE_PROBE1(__io_##name, type1, arg1);
define|#
directive|define
name|DTRACE_IO2
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|)
define|\
value|DTRACE_PROBE2(__io_##name, type1, arg1, type2, arg2);
define|#
directive|define
name|DTRACE_IO3
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|,
name|type3
parameter_list|,
name|arg3
parameter_list|)
define|\
value|DTRACE_PROBE3(__io_##name, type1, arg1, type2, arg2, type3, arg3);
define|#
directive|define
name|DTRACE_IO4
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|, 			\
name|type3
parameter_list|,
name|arg3
parameter_list|,
name|type4
parameter_list|,
name|arg4
parameter_list|)
define|\
value|DTRACE_PROBE4(__io_##name, type1, arg1, type2, arg2, 		\ 	    type3, arg3, type4, arg4);
define|#
directive|define
name|DTRACE_SYSEVENT2
parameter_list|(
name|name
parameter_list|,
name|type1
parameter_list|,
name|arg1
parameter_list|,
name|type2
parameter_list|,
name|arg2
parameter_list|)
define|\
value|DTRACE_PROBE2(__sysevent_##name, type1, arg1, type2, arg2);
endif|#
directive|endif
comment|/* _KERNEL */
specifier|extern
specifier|const
name|char
modifier|*
name|sdt_prefix
decl_stmt|;
typedef|typedef
struct|struct
name|sdt_probedesc
block|{
name|char
modifier|*
name|sdpd_name
decl_stmt|;
comment|/* name of this probe */
name|unsigned
name|long
name|sdpd_offset
decl_stmt|;
comment|/* offset of call in text */
name|struct
name|sdt_probedesc
modifier|*
name|sdpd_next
decl_stmt|;
comment|/* next static probe */
block|}
name|sdt_probedesc_t
typedef|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_SDT_H */
end_comment

end_unit

