begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License, Version 1.0 only  * (the "License").  You may not use this file except in compliance  * with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2005 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_VMEM_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_VMEM_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Per-allocation flags  */
define|#
directive|define
name|VM_SLEEP
value|0x00000000
comment|/* same as KM_SLEEP */
define|#
directive|define
name|VM_NOSLEEP
value|0x00000001
comment|/* same as KM_NOSLEEP */
define|#
directive|define
name|VM_PANIC
value|0x00000002
comment|/* same as KM_PANIC */
define|#
directive|define
name|VM_PUSHPAGE
value|0x00000004
comment|/* same as KM_PUSHPAGE */
define|#
directive|define
name|VM_KMFLAGS
value|0x000000ff
comment|/* flags that must match KM_* flags */
define|#
directive|define
name|VM_BESTFIT
value|0x00000100
define|#
directive|define
name|VM_FIRSTFIT
value|0x00000200
define|#
directive|define
name|VM_NEXTFIT
value|0x00000400
comment|/*  * The following flags are restricted for use only within the kernel.  * VM_MEMLOAD is for use by the HAT to avoid infinite recursion.  * VM_NORELOC is used by the kernel when static VA->PA mappings are required.  */
define|#
directive|define
name|VM_MEMLOAD
value|0x00000800
define|#
directive|define
name|VM_NORELOC
value|0x00001000
comment|/*  * VM_ABORT requests that vmem_alloc() *ignore* the VM_SLEEP/VM_NOSLEEP flags  * and forgo reaping if the allocation or attempted import, fails.  This  * flag is a segkmem-specific flag, and should not be used by anyone else.  */
define|#
directive|define
name|VM_ABORT
value|0x00002000
define|#
directive|define
name|VM_FLAGS
value|0x0000FFFF
comment|/*  * Arena creation flags  */
define|#
directive|define
name|VMC_POPULATOR
value|0x00010000
define|#
directive|define
name|VMC_NO_QCACHE
value|0x00020000
comment|/* cannot use quantum caches */
define|#
directive|define
name|VMC_IDENTIFIER
value|0x00040000
comment|/* not backed by memory */
comment|/*  * internal use only;	the import function uses the vmem_ximport_t interface  *			and may increase the request size if it so desires  */
define|#
directive|define
name|VMC_XALLOC
value|0x00080000
define|#
directive|define
name|VMC_FLAGS
value|0xFFFF0000
comment|/*  * Public segment types  */
define|#
directive|define
name|VMEM_ALLOC
value|0x01
define|#
directive|define
name|VMEM_FREE
value|0x02
comment|/*  * Implementation-private segment types  */
define|#
directive|define
name|VMEM_SPAN
value|0x10
define|#
directive|define
name|VMEM_ROTOR
value|0x20
define|#
directive|define
name|VMEM_WALKER
value|0x40
comment|/*  * VMEM_REENTRANT indicates to vmem_walk() that the callback routine may  * call back into the arena being walked, so vmem_walk() must drop the  * arena lock before each callback.  The caveat is that since the arena  * isn't locked, its state can change.  Therefore it is up to the callback  * routine to handle cases where the segment isn't of the expected type.  * For example, we use this to walk heap_arena when generating a crash dump;  * see segkmem_dump() for sample usage.  */
define|#
directive|define
name|VMEM_REENTRANT
value|0x80000000
typedef|typedef
name|struct
name|vmem
name|vmem_t
typedef|;
typedef|typedef
name|void
modifier|*
function_decl|(
name|vmem_alloc_t
function_decl|)
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
name|vmem_free_t
function_decl|)
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/*  * Alternate import style; the requested size is passed in a pointer,  * which can be increased by the import function if desired.  */
typedef|typedef
name|void
modifier|*
function_decl|(
name|vmem_ximport_t
function_decl|)
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|_KERNEL
specifier|extern
name|vmem_t
modifier|*
name|vmem_init
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|vmem_alloc_t
modifier|*
parameter_list|,
name|vmem_free_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vmem_update
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|vmem_is_populator
parameter_list|()
function_decl|;
specifier|extern
name|size_t
name|vmem_seg_size
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|vmem_t
modifier|*
name|vmem_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|vmem_alloc_t
modifier|*
parameter_list|,
name|vmem_free_t
modifier|*
parameter_list|,
name|vmem_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|vmem_t
modifier|*
name|vmem_xcreate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|vmem_ximport_t
modifier|*
parameter_list|,
name|vmem_free_t
modifier|*
parameter_list|,
name|vmem_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vmem_destroy
parameter_list|(
name|vmem_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|vmem_alloc
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|vmem_xalloc
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vmem_free
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vmem_xfree
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|vmem_add
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|vmem_contains
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vmem_walk
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|vmem_size
parameter_list|(
name|vmem_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_VMEM_H */
end_comment

end_unit

