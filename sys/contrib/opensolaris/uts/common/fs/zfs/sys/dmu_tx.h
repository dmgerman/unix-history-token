begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DMU_TX_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DMU_TX_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/refcount.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|dmu_buf_impl
struct_decl|;
struct_decl|struct
name|dmu_tx_hold
struct_decl|;
struct_decl|struct
name|dnode_link
struct_decl|;
struct_decl|struct
name|dsl_pool
struct_decl|;
struct_decl|struct
name|dnode
struct_decl|;
struct_decl|struct
name|dsl_dir
struct_decl|;
struct|struct
name|dmu_tx
block|{
comment|/* 	 * No synchronization is needed because a tx can only be handled 	 * by one thread. 	 */
name|list_t
name|tx_holds
decl_stmt|;
comment|/* list of dmu_tx_hold_t */
name|objset_t
modifier|*
name|tx_objset
decl_stmt|;
name|struct
name|dsl_dir
modifier|*
name|tx_dir
decl_stmt|;
name|struct
name|dsl_pool
modifier|*
name|tx_pool
decl_stmt|;
name|uint64_t
name|tx_txg
decl_stmt|;
name|uint64_t
name|tx_lastsnap_txg
decl_stmt|;
name|uint64_t
name|tx_lasttried_txg
decl_stmt|;
name|txg_handle_t
name|tx_txgh
decl_stmt|;
name|void
modifier|*
name|tx_tempreserve_cookie
decl_stmt|;
name|struct
name|dmu_tx_hold
modifier|*
name|tx_needassign_txh
decl_stmt|;
name|uint8_t
name|tx_anyobj
decl_stmt|;
name|int
name|tx_err
decl_stmt|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
name|uint64_t
name|tx_space_towrite
decl_stmt|;
name|uint64_t
name|tx_space_tofree
decl_stmt|;
name|uint64_t
name|tx_space_tooverwrite
decl_stmt|;
name|refcount_t
name|tx_space_written
decl_stmt|;
name|refcount_t
name|tx_space_freed
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
enum|enum
name|dmu_tx_hold_type
block|{
name|THT_NEWOBJECT
block|,
name|THT_WRITE
block|,
name|THT_BONUS
block|,
name|THT_FREE
block|,
name|THT_ZAP
block|,
name|THT_SPACE
block|,
name|THT_NUMTYPES
block|}
enum|;
typedef|typedef
struct|struct
name|dmu_tx_hold
block|{
name|dmu_tx_t
modifier|*
name|txh_tx
decl_stmt|;
name|list_node_t
name|txh_node
decl_stmt|;
name|struct
name|dnode
modifier|*
name|txh_dnode
decl_stmt|;
name|uint64_t
name|txh_space_towrite
decl_stmt|;
name|uint64_t
name|txh_space_tofree
decl_stmt|;
name|uint64_t
name|txh_space_tooverwrite
decl_stmt|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
name|enum
name|dmu_tx_hold_type
name|txh_type
decl_stmt|;
name|uint64_t
name|txh_arg1
decl_stmt|;
name|uint64_t
name|txh_arg2
decl_stmt|;
endif|#
directive|endif
block|}
name|dmu_tx_hold_t
typedef|;
comment|/*  * These routines are defined in dmu.h, and are called by the user.  */
name|dmu_tx_t
modifier|*
name|dmu_tx_create
parameter_list|(
name|objset_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|int
name|dmu_tx_assign
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|txg_how
parameter_list|)
function_decl|;
name|void
name|dmu_tx_commit
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dmu_tx_abort
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|uint64_t
name|dmu_tx_get_txg
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dmu_tx_wait
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
comment|/*  * These routines are defined in dmu_spa.h, and are called by the SPA.  */
specifier|extern
name|dmu_tx_t
modifier|*
name|dmu_tx_create_assigned
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|txg
parameter_list|)
function_decl|;
comment|/*  * These routines are only called by the DMU.  */
name|dmu_tx_t
modifier|*
name|dmu_tx_create_dd
parameter_list|(
name|dsl_dir_t
modifier|*
name|dd
parameter_list|)
function_decl|;
name|int
name|dmu_tx_is_syncing
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dmu_tx_private_ok
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dmu_tx_add_new_object
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|objset_t
modifier|*
name|os
parameter_list|,
name|uint64_t
name|object
parameter_list|)
function_decl|;
name|void
name|dmu_tx_willuse_space
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|int64_t
name|delta
parameter_list|)
function_decl|;
name|void
name|dmu_tx_dirty_buf
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|struct
name|dmu_buf_impl
modifier|*
name|db
parameter_list|)
function_decl|;
name|int
name|dmu_tx_holds
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|object
parameter_list|)
function_decl|;
name|void
name|dmu_tx_hold_space
parameter_list|(
name|dmu_tx_t
modifier|*
name|tx
parameter_list|,
name|uint64_t
name|space
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
define|#
directive|define
name|DMU_TX_DIRTY_BUF
parameter_list|(
name|tx
parameter_list|,
name|db
parameter_list|)
value|dmu_tx_dirty_buf(tx, db)
else|#
directive|else
define|#
directive|define
name|DMU_TX_DIRTY_BUF
parameter_list|(
name|tx
parameter_list|,
name|db
parameter_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DMU_TX_H */
end_comment

end_unit

