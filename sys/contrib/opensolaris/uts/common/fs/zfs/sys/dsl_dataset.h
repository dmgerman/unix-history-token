begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_DSL_DATASET_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_DSL_DATASET_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/txg.h>
end_include

begin_include
include|#
directive|include
file|<sys/zio.h>
end_include

begin_include
include|#
directive|include
file|<sys/bplist.h>
end_include

begin_include
include|#
directive|include
file|<sys/dsl_synctask.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_context.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
struct_decl|struct
name|dsl_dataset
struct_decl|;
struct_decl|struct
name|dsl_dir
struct_decl|;
struct_decl|struct
name|dsl_pool
struct_decl|;
typedef|typedef
name|void
name|dsl_dataset_evict_func_t
parameter_list|(
name|struct
name|dsl_dataset
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|DS_FLAG_INCONSISTENT
value|(1ULL<<0)
comment|/*  * NB: nopromote can not yet be set, but we want support for it in this  * on-disk version, so that we don't need to upgrade for it later.  It  * will be needed when we implement 'zfs split' (where the split off  * clone should not be promoted).  */
define|#
directive|define
name|DS_FLAG_NOPROMOTE
value|(1ULL<<1)
typedef|typedef
struct|struct
name|dsl_dataset_phys
block|{
name|uint64_t
name|ds_dir_obj
decl_stmt|;
name|uint64_t
name|ds_prev_snap_obj
decl_stmt|;
name|uint64_t
name|ds_prev_snap_txg
decl_stmt|;
name|uint64_t
name|ds_next_snap_obj
decl_stmt|;
name|uint64_t
name|ds_snapnames_zapobj
decl_stmt|;
comment|/* zap obj of snaps; ==0 for snaps */
name|uint64_t
name|ds_num_children
decl_stmt|;
comment|/* clone/snap children; ==0 for head */
name|uint64_t
name|ds_creation_time
decl_stmt|;
comment|/* seconds since 1970 */
name|uint64_t
name|ds_creation_txg
decl_stmt|;
name|uint64_t
name|ds_deadlist_obj
decl_stmt|;
name|uint64_t
name|ds_used_bytes
decl_stmt|;
name|uint64_t
name|ds_compressed_bytes
decl_stmt|;
name|uint64_t
name|ds_uncompressed_bytes
decl_stmt|;
name|uint64_t
name|ds_unique_bytes
decl_stmt|;
comment|/* only relevant to snapshots */
comment|/* 	 * The ds_fsid_guid is a 56-bit ID that can change to avoid 	 * collisions.  The ds_guid is a 64-bit ID that will never 	 * change, so there is a small probability that it will collide. 	 */
name|uint64_t
name|ds_fsid_guid
decl_stmt|;
name|uint64_t
name|ds_guid
decl_stmt|;
name|uint64_t
name|ds_flags
decl_stmt|;
name|blkptr_t
name|ds_bp
decl_stmt|;
name|uint64_t
name|ds_pad
index|[
literal|8
index|]
decl_stmt|;
comment|/* pad out to 320 bytes for good measure */
block|}
name|dsl_dataset_phys_t
typedef|;
typedef|typedef
struct|struct
name|dsl_dataset
block|{
comment|/* Immutable: */
name|struct
name|dsl_dir
modifier|*
name|ds_dir
decl_stmt|;
name|dsl_dataset_phys_t
modifier|*
name|ds_phys
decl_stmt|;
name|dmu_buf_t
modifier|*
name|ds_dbuf
decl_stmt|;
name|uint64_t
name|ds_object
decl_stmt|;
comment|/* only used in syncing context: */
name|struct
name|dsl_dataset
modifier|*
name|ds_prev
decl_stmt|;
comment|/* only valid for non-snapshots */
comment|/* has internal locking: */
name|bplist_t
name|ds_deadlist
decl_stmt|;
comment|/* protected by lock on pool's dp_dirty_datasets list */
name|txg_node_t
name|ds_dirty_link
decl_stmt|;
name|list_node_t
name|ds_synced_link
decl_stmt|;
comment|/* 	 * ds_phys->ds_<accounting> is also protected by ds_lock. 	 * Protected by ds_lock: 	 */
name|kmutex_t
name|ds_lock
decl_stmt|;
name|void
modifier|*
name|ds_user_ptr
decl_stmt|;
name|dsl_dataset_evict_func_t
modifier|*
name|ds_user_evict_func
decl_stmt|;
name|uint64_t
name|ds_open_refcount
decl_stmt|;
comment|/* no locking; only for making guesses */
name|uint64_t
name|ds_trysnap_txg
decl_stmt|;
comment|/* Protected by ds_lock; keep at end of struct for better locality */
name|char
name|ds_snapname
index|[
name|MAXNAMELEN
index|]
decl_stmt|;
block|}
name|dsl_dataset_t
typedef|;
define|#
directive|define
name|dsl_dataset_is_snapshot
parameter_list|(
name|ds
parameter_list|)
define|\
value|((ds)->ds_phys->ds_num_children != 0)
name|int
name|dsl_dataset_open_spa
parameter_list|(
name|spa_t
modifier|*
name|spa
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
name|dsp
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_open
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
name|dsp
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_open_obj
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|uint64_t
name|dsobj
parameter_list|,
specifier|const
name|char
modifier|*
name|tail
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|dsl_dataset_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_name
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_close
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|int
name|mode
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_create_sync
parameter_list|(
name|dsl_dir_t
modifier|*
name|pds
parameter_list|,
specifier|const
name|char
modifier|*
name|lastname
parameter_list|,
name|dsl_dataset_t
modifier|*
name|clone_parent
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_destroy
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|dsl_snapshots_destroy
parameter_list|(
name|char
modifier|*
name|fsname
parameter_list|,
name|char
modifier|*
name|snapname
parameter_list|)
function_decl|;
name|dsl_checkfunc_t
name|dsl_dataset_snapshot_check
decl_stmt|;
name|dsl_syncfunc_t
name|dsl_dataset_snapshot_sync
decl_stmt|;
name|int
name|dsl_dataset_rollback
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_rename
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|newname
parameter_list|,
name|boolean_t
name|recursive
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_promote
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
modifier|*
name|dsl_dataset_set_user_ptr
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|dsl_dataset_evict_func_t
name|func
parameter_list|)
function_decl|;
name|void
modifier|*
name|dsl_dataset_get_user_ptr
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|blkptr_t
modifier|*
name|dsl_dataset_get_blkptr
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_set_blkptr
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|spa_t
modifier|*
name|dsl_dataset_get_spa
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_sync
parameter_list|(
name|dsl_dataset_t
modifier|*
name|os
parameter_list|,
name|zio_t
modifier|*
name|zio
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_block_born
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_block_kill
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|blkptr_t
modifier|*
name|bp
parameter_list|,
name|zio_t
modifier|*
name|pio
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dataset_block_freeable
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|uint64_t
name|blk_birth
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_prev_snap_txg
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_dirty
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_stats
parameter_list|(
name|dsl_dataset_t
modifier|*
name|os
parameter_list|,
name|nvlist_t
modifier|*
name|nv
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_fast_stat
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|dmu_objset_stats_t
modifier|*
name|stat
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_space
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|,
name|uint64_t
modifier|*
name|refdbytesp
parameter_list|,
name|uint64_t
modifier|*
name|availbytesp
parameter_list|,
name|uint64_t
modifier|*
name|usedobjsp
parameter_list|,
name|uint64_t
modifier|*
name|availobjsp
parameter_list|)
function_decl|;
name|uint64_t
name|dsl_dataset_fsid_guid
parameter_list|(
name|dsl_dataset_t
modifier|*
name|ds
parameter_list|)
function_decl|;
name|void
name|dsl_dataset_create_root
parameter_list|(
name|struct
name|dsl_pool
modifier|*
name|dp
parameter_list|,
name|uint64_t
modifier|*
name|ddobjp
parameter_list|,
name|dmu_tx_t
modifier|*
name|tx
parameter_list|)
function_decl|;
name|int
name|dsl_dsobj_to_dsname
parameter_list|(
name|char
modifier|*
name|pname
parameter_list|,
name|uint64_t
name|obj
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|ZFS_DEBUG
define|#
directive|define
name|dprintf_ds
parameter_list|(
name|ds
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
value|do { \ 	if (zfs_flags& ZFS_DEBUG_DPRINTF) { \ 	char *__ds_name = kmem_alloc(MAXNAMELEN, KM_SLEEP); \ 	dsl_dataset_name(ds, __ds_name); \ 	dprintf("ds=%s " fmt, __ds_name, __VA_ARGS__); \ 	kmem_free(__ds_name, MAXNAMELEN); \ 	} \ _NOTE(CONSTCOND) } while (0)
else|#
directive|else
define|#
directive|define
name|dprintf_ds
parameter_list|(
name|dd
parameter_list|,
name|fmt
parameter_list|,
modifier|...
parameter_list|)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_DSL_DATASET_H */
end_comment

end_unit

