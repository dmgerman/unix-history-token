begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008 Isilon Inc http://www.isilon.com/  * Authors: Doug Rabson<dfr@rabson.org>  * Developed with Red Inc: Alfred Perlstein<alfred@freebsd.org>  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<sys/_iovec.h>
end_include

begin_define
define|#
directive|define
name|ETYPE_NULL
value|0
end_define

begin_define
define|#
directive|define
name|ETYPE_DES_CBC_CRC
value|1
end_define

begin_define
define|#
directive|define
name|ETYPE_DES_CBC_MD4
value|2
end_define

begin_define
define|#
directive|define
name|ETYPE_DES_CBC_MD5
value|3
end_define

begin_define
define|#
directive|define
name|ETYPE_DES3_CBC_MD5
value|5
end_define

begin_define
define|#
directive|define
name|ETYPE_OLD_DES3_CBC_SHA1
value|7
end_define

begin_define
define|#
directive|define
name|ETYPE_DES3_CBC_SHA1
value|16
end_define

begin_define
define|#
directive|define
name|ETYPE_AES128_CTS_HMAC_SHA1_96
value|17
end_define

begin_define
define|#
directive|define
name|ETYPE_AES256_CTS_HMAC_SHA1_96
value|18
end_define

begin_define
define|#
directive|define
name|ETYPE_ARCFOUR_HMAC_MD5
value|23
end_define

begin_define
define|#
directive|define
name|ETYPE_ARCFOUR_HMAC_MD5_56
value|24
end_define

begin_comment
comment|/*  * Key usages for des3-cbc-sha1 tokens  */
end_comment

begin_define
define|#
directive|define
name|KG_USAGE_SEAL
value|22
end_define

begin_define
define|#
directive|define
name|KG_USAGE_SIGN
value|23
end_define

begin_define
define|#
directive|define
name|KG_USAGE_SEQ
value|24
end_define

begin_comment
comment|/*  * Key usages for RFC4121 tokens  */
end_comment

begin_define
define|#
directive|define
name|KG_USAGE_ACCEPTOR_SEAL
value|22
end_define

begin_define
define|#
directive|define
name|KG_USAGE_ACCEPTOR_SIGN
value|23
end_define

begin_define
define|#
directive|define
name|KG_USAGE_INITIATOR_SEAL
value|24
end_define

begin_define
define|#
directive|define
name|KG_USAGE_INITIATOR_SIGN
value|25
end_define

begin_struct_decl
struct_decl|struct
name|krb5_key_state
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|void
name|init_func
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|destroy_func
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|set_key_func
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|random_to_key_func
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
specifier|const
name|void
modifier|*
name|in
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|encrypt_func
parameter_list|(
specifier|const
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
name|struct
name|mbuf
modifier|*
name|inout
parameter_list|,
name|size_t
name|skip
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|ivec
parameter_list|,
name|size_t
name|ivlen
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|checksum_func
parameter_list|(
specifier|const
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
name|int
name|usage
parameter_list|,
name|struct
name|mbuf
modifier|*
name|inout
parameter_list|,
name|size_t
name|skip
parameter_list|,
name|size_t
name|inlen
parameter_list|,
name|size_t
name|outlen
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|krb5_encryption_class
block|{
specifier|const
name|char
modifier|*
name|ec_name
decl_stmt|;
name|int
name|ec_type
decl_stmt|;
name|int
name|ec_flags
decl_stmt|;
define|#
directive|define
name|EC_DERIVED_KEYS
value|1
name|size_t
name|ec_blocklen
decl_stmt|;
name|size_t
name|ec_msgblocklen
decl_stmt|;
name|size_t
name|ec_checksumlen
decl_stmt|;
name|size_t
name|ec_keybits
decl_stmt|;
comment|/* key length in bits */
name|size_t
name|ec_keylen
decl_stmt|;
comment|/* size of key in memory */
name|init_func
modifier|*
name|ec_init
decl_stmt|;
name|destroy_func
modifier|*
name|ec_destroy
decl_stmt|;
name|set_key_func
modifier|*
name|ec_set_key
decl_stmt|;
name|random_to_key_func
modifier|*
name|ec_random_to_key
decl_stmt|;
name|encrypt_func
modifier|*
name|ec_encrypt
decl_stmt|;
name|encrypt_func
modifier|*
name|ec_decrypt
decl_stmt|;
name|checksum_func
modifier|*
name|ec_checksum
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|krb5_key_state
block|{
specifier|const
name|struct
name|krb5_encryption_class
modifier|*
name|ks_class
decl_stmt|;
specifier|volatile
name|u_int
name|ks_refs
decl_stmt|;
name|void
modifier|*
name|ks_key
decl_stmt|;
name|void
modifier|*
name|ks_priv
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_des_encryption_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_des3_encryption_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_aes128_encryption_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_aes256_encryption_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_arcfour_encryption_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|krb5_encryption_class
name|krb5_arcfour_56_encryption_class
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|__inline
name|void
name|krb5_set_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
specifier|const
name|void
modifier|*
name|keydata
parameter_list|)
block|{
name|ks
operator|->
name|ks_class
operator|->
name|ec_set_key
argument_list|(
name|ks
argument_list|,
name|keydata
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|krb5_random_to_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
specifier|const
name|void
modifier|*
name|keydata
parameter_list|)
block|{
name|ks
operator|->
name|ks_class
operator|->
name|ec_random_to_key
argument_list|(
name|ks
argument_list|,
name|keydata
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|krb5_encrypt
parameter_list|(
specifier|const
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
name|struct
name|mbuf
modifier|*
name|inout
parameter_list|,
name|size_t
name|skip
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|ivec
parameter_list|,
name|size_t
name|ivlen
parameter_list|)
block|{
name|ks
operator|->
name|ks_class
operator|->
name|ec_encrypt
argument_list|(
name|ks
argument_list|,
name|inout
argument_list|,
name|skip
argument_list|,
name|len
argument_list|,
name|ivec
argument_list|,
name|ivlen
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|krb5_decrypt
parameter_list|(
specifier|const
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
name|struct
name|mbuf
modifier|*
name|inout
parameter_list|,
name|size_t
name|skip
parameter_list|,
name|size_t
name|len
parameter_list|,
name|void
modifier|*
name|ivec
parameter_list|,
name|size_t
name|ivlen
parameter_list|)
block|{
name|ks
operator|->
name|ks_class
operator|->
name|ec_decrypt
argument_list|(
name|ks
argument_list|,
name|inout
argument_list|,
name|skip
argument_list|,
name|len
argument_list|,
name|ivec
argument_list|,
name|ivlen
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|krb5_checksum
parameter_list|(
specifier|const
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|,
name|int
name|usage
parameter_list|,
name|struct
name|mbuf
modifier|*
name|inout
parameter_list|,
name|size_t
name|skip
parameter_list|,
name|size_t
name|inlen
parameter_list|,
name|size_t
name|outlen
parameter_list|)
block|{
name|ks
operator|->
name|ks_class
operator|->
name|ec_checksum
argument_list|(
name|ks
argument_list|,
name|usage
argument_list|,
name|inout
argument_list|,
name|skip
argument_list|,
name|inlen
argument_list|,
name|outlen
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
specifier|extern
name|struct
name|krb5_encryption_class
modifier|*
name|krb5_find_encryption_class
parameter_list|(
name|int
name|etype
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|krb5_key_state
modifier|*
name|krb5_create_key
parameter_list|(
specifier|const
name|struct
name|krb5_encryption_class
modifier|*
name|ec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|krb5_free_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|ks
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|krb5_key_state
modifier|*
name|krb5_derive_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|inkey
parameter_list|,
name|void
modifier|*
name|constant
parameter_list|,
name|size_t
name|constantlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|krb5_key_state
modifier|*
name|krb5_get_encryption_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|basekey
parameter_list|,
name|int
name|usage
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|krb5_key_state
modifier|*
name|krb5_get_integrity_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|basekey
parameter_list|,
name|int
name|usage
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|krb5_key_state
modifier|*
name|krb5_get_checksum_key
parameter_list|(
name|struct
name|krb5_key_state
modifier|*
name|basekey
parameter_list|,
name|int
name|usage
parameter_list|)
function_decl|;
end_function_decl

end_unit

