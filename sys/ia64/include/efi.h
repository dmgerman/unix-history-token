begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2000 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_EFI_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_EFI_H_
end_define

begin_typedef
typedef|typedef
name|u_int8_t
name|BOOLEAN
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int64_t
name|INTN
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int64_t
name|UINTN
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int8_t
name|INT8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int8_t
name|UINT8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int16_t
name|INT16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int16_t
name|UINT16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int32_t
name|INT32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int32_t
name|UINT32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int64_t
name|INT64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_int64_t
name|UINT64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT8
name|CHAR8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT16
name|CHAR16
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_GUID
block|{
name|UINT32
name|Data1
decl_stmt|;
name|UINT16
name|Data2
decl_stmt|;
name|UINT16
name|Data3
decl_stmt|;
name|UINT8
name|Data4
index|[
literal|8
index|]
decl_stmt|;
block|}
name|EFI_GUID
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|INTN
name|EFI_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|EFI_HANDLE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|EFI_EVENT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT64
name|EFI_LBA
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINTN
name|EFI_TPL
typedef|;
end_typedef

begin_comment
comment|/*  * EFI_STATUS Error Codes.  */
end_comment

begin_define
define|#
directive|define
name|EFI_SUCCESS
value|0
end_define

begin_define
define|#
directive|define
name|EFI_LOAD_ERROR
value|1
end_define

begin_define
define|#
directive|define
name|EFI_INVALID_PARAMETER
value|2
end_define

begin_define
define|#
directive|define
name|EFI_UNSUPPORTED
value|3
end_define

begin_define
define|#
directive|define
name|EFI_BAD_BUFFER_SIZE
value|4
end_define

begin_define
define|#
directive|define
name|EFI_BUFFER_TOO_SMALL
value|5
end_define

begin_define
define|#
directive|define
name|EFI_NOT_READY
value|6
end_define

begin_define
define|#
directive|define
name|EFI_DEVICE_ERROR
value|7
end_define

begin_define
define|#
directive|define
name|EFI_WRITE_PROTECTED
value|8
end_define

begin_define
define|#
directive|define
name|EFI_OUT_OF_RESOURCES
value|9
end_define

begin_define
define|#
directive|define
name|EFI_VOLUME_CORRUPTED
value|10
end_define

begin_define
define|#
directive|define
name|EFI_VOLUME_FULL
value|11
end_define

begin_define
define|#
directive|define
name|EFI_NO_MEDIA
value|12
end_define

begin_define
define|#
directive|define
name|EFI_MEDIA_CHANGED
value|13
end_define

begin_define
define|#
directive|define
name|EFI_NOT_FOUND
value|14
end_define

begin_define
define|#
directive|define
name|EFI_ACCESS_DENIED
value|15
end_define

begin_define
define|#
directive|define
name|EFI_NO_RESPONSE
value|16
end_define

begin_define
define|#
directive|define
name|EFI_NO_MAPPING
value|17
end_define

begin_define
define|#
directive|define
name|EFI_TIMEOUT
value|18
end_define

begin_define
define|#
directive|define
name|EFI_NOT_STARTED
value|19
end_define

begin_define
define|#
directive|define
name|EFI_ALREADY_STARTED
value|20
end_define

begin_define
define|#
directive|define
name|EFI_ABORTED
value|21
end_define

begin_define
define|#
directive|define
name|EFI_ICMP_ERROR
value|22
end_define

begin_define
define|#
directive|define
name|EFI_TFTP_ERROR
value|23
end_define

begin_define
define|#
directive|define
name|EFI_PROTOCOL_ERROR
value|24
end_define

begin_comment
comment|/*  * EFI_STATUS Warning Codes.  */
end_comment

begin_define
define|#
directive|define
name|EFI_WARN_UNKNOWN_GLYPH
value|1
end_define

begin_define
define|#
directive|define
name|EFI_WARN_DELETE_FAILURE
value|2
end_define

begin_define
define|#
directive|define
name|EFI_WARN_WRITE_FAILURE
value|3
end_define

begin_define
define|#
directive|define
name|EFI_WARN_BUFFER_TOO_SMALL
value|4
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_MAC_ADDRESS
block|{
name|CHAR8
name|Address
index|[
literal|32
index|]
decl_stmt|;
block|}
name|EFI_MAC_ADDRESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_IPv4_ADDRESS
block|{
name|CHAR8
name|Address
index|[
literal|4
index|]
decl_stmt|;
block|}
name|EFI_IPv4_ADDRESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_IPv6_ADDRESS
block|{
name|CHAR8
name|Address
index|[
literal|16
index|]
decl_stmt|;
block|}
name|EFI_IPv6_ADDRESS
operator|,
name|EFI_IP_ADDRESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_TIME
block|{
name|UINT16
name|Year
decl_stmt|;
comment|/* 1998 - 20xx */
name|UINT8
name|Month
decl_stmt|;
comment|/* 1 - 12 */
name|UINT8
name|Day
decl_stmt|;
comment|/* 1 - 31 */
name|UINT8
name|Hour
decl_stmt|;
comment|/* 0 - 23 */
name|UINT8
name|Minute
decl_stmt|;
comment|/* 0 - 59 */
name|UINT8
name|Second
decl_stmt|;
comment|/* 0 - 59 */
name|UINT8
name|Pad1
decl_stmt|;
name|UINT32
name|Nanosecond
decl_stmt|;
comment|/* 0 - 999,999,999 */
name|INT16
name|TimeZone
decl_stmt|;
comment|/* -1440 - 1440 or 2047 */
name|UINT8
name|Daylight
decl_stmt|;
name|UINT8
name|Pad2
decl_stmt|;
block|}
name|EFI_TIME
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_EFI_TIME_CAPABILITIES
block|{
name|UINT32
name|Resolution
decl_stmt|;
name|UINT32
name|Accuracy
decl_stmt|;
name|BOOLEAN
name|SetsToZero
decl_stmt|;
block|}
name|EFI_TIME_CAPABILITIES
typedef|;
end_typedef

begin_comment
comment|/*  * Reset types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_RESET_TYPE
block|{
name|EfiResetCold
block|,
name|EfiResetWarm
block|}
name|EFI_RESET_TYPE
typedef|;
end_typedef

begin_comment
comment|/*  * Allocate Types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_ALLOCATE_TYPE
block|{
name|AllocateAnyPages
block|,
name|AllocateMaxAddress
block|,
name|AllocateAddress
block|,
name|MaxAllocateType
block|}
name|EFI_ALLOCATE_TYPE
typedef|;
end_typedef

begin_comment
comment|/*  * Memory types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_MEMORY_TYPE
block|{
name|EfiReservedMemoryType
block|,
name|EfiLoaderCode
block|,
name|EfiLoaderData
block|,
name|EfiBootServicesCode
block|,
name|EfiBootServicesData
block|,
name|EfiRuntimeServicesCode
block|,
name|EfiRuntimeServicesData
block|,
name|EfiConventionalMemory
block|,
name|EfiUnusableMemory
block|,
name|EfiAcpiReclaimMemory
block|,
name|EfiAcpiMemoryNvs
block|,
name|EfiMemoryMappedIo
block|,
name|EfiMemoryMappedIoPortSpace
block|,
name|EfiPalCode
block|,
name|EfiMaxMemoryType
block|}
name|EFI_MEMORY_TYPE
typedef|;
end_typedef

begin_comment
comment|/*  * Physical Address.  */
end_comment

begin_typedef
typedef|typedef
name|UINT64
name|EFI_PHYSICAL_ADDRESS
typedef|;
end_typedef

begin_comment
comment|/*  * Virtual Address.  */
end_comment

begin_typedef
typedef|typedef
name|UINT64
name|EFI_VIRTUAL_ADDRESS
typedef|;
end_typedef

begin_comment
comment|/*  * Memory Descriptor.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_EFI_MEMORY_DESCRIPTOR
block|{
name|UINT32
name|Type
decl_stmt|;
name|EFI_PHYSICAL_ADDRESS
name|PhysicalStart
decl_stmt|;
name|EFI_VIRTUAL_ADDRESS
name|VirtualStart
decl_stmt|;
name|UINT64
name|NumberOfPages
decl_stmt|;
name|UINT64
name|Attribute
decl_stmt|;
block|}
name|EFI_MEMORY_DESCRIPTOR
typedef|;
end_typedef

begin_define
define|#
directive|define
name|EFI_MEMORY_DESCRIPTOR_VERSION
value|1
end_define

begin_comment
comment|/*  * Memory Attribute Definitions.  */
end_comment

begin_define
define|#
directive|define
name|EFI_MEMORY_UC
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_WC
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_WT
value|0x0000000000000004
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_WB
value|0x0000000000000008
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_UCE
value|0x0000000000000010
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_WP
value|0x0000000000001000
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_RP
value|0x0000000000002000
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_XP
value|0x0000000000004000
end_define

begin_define
define|#
directive|define
name|EFI_MEMORY_RUNTIME
value|0x8000000000000000
end_define

begin_comment
comment|/*  * Variable Attributes.  */
end_comment

begin_define
define|#
directive|define
name|EFI_VARIABLE_NON_VOLATILE
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|EFI_VARIABLE_BOOTSERVICE_ACCESS
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|EFI_VARIABLE_RUNTIME_ACCESS
value|0x0000000000000004
end_define

begin_comment
comment|/*  * Task Priority Levels.  */
end_comment

begin_define
define|#
directive|define
name|TPL_APPLICATION
value|4
end_define

begin_define
define|#
directive|define
name|TPL_CALLBACK
value|8
end_define

begin_define
define|#
directive|define
name|TPL_NOTIFY
value|16
end_define

begin_define
define|#
directive|define
name|TPL_HIGH_LEVEL
value|31
end_define

begin_comment
comment|/*  * Event Types.  */
end_comment

begin_define
define|#
directive|define
name|EVT_TIMER
value|0x80000000
end_define

begin_define
define|#
directive|define
name|EVT_RUNTIME
value|0x40000000
end_define

begin_define
define|#
directive|define
name|EVT_RUNTIME_CONTEXT
value|0x20000000
end_define

begin_define
define|#
directive|define
name|EVT_NOTIFY_WAIT
value|0x00000100
end_define

begin_define
define|#
directive|define
name|EVT_NOTIFY_SIGNAL
value|0x00000200
end_define

begin_define
define|#
directive|define
name|EVT_SIGNAL_EXIT_BOOT_SERVICES
value|0x00000201
end_define

begin_define
define|#
directive|define
name|EVT_SIGNAL_VIRTUAL_ADDRESS_CHANGE
value|0x60000202
end_define

begin_comment
comment|/*  * Event Notification Function.  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|EFI_EVENT_NOTIFY
function_decl|)
parameter_list|(
name|EFI_EVENT
name|Event
parameter_list|,
name|void
modifier|*
name|Context
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Timer Delay  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_TIMER_DELAY
block|{
name|TimerCancel
block|,
name|TimerPeriodic
block|,
name|TimerRelative
block|}
name|EFI_TIMER_DELAY
typedef|;
end_typedef

begin_comment
comment|/*  * Interface Types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_INTERFACE_TYPE
block|{
name|EFI_NATIVE_INTERFACE
block|,
name|EFI_PCODE_INTERFACE
block|}
name|EFI_INTERFACE_TYPE
typedef|;
end_typedef

begin_comment
comment|/*  * Search Type.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_EFI_LOCATE_SEARCH_TYPE
block|{
name|AllHandles
block|,
name|ByRegisterNotify
block|,
name|ByProtocol
block|}
name|EFI_LOCATE_SEARCH_TYPE
typedef|;
end_typedef

begin_comment
comment|/*  * Device Path.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_EFI_DEVICE_PATH
block|{
name|UINT8
name|Type
decl_stmt|;
name|UINT8
name|SubType
decl_stmt|;
name|UINT8
name|Length
index|[
literal|2
index|]
decl_stmt|;
block|}
name|EFI_DEVICE_PATH
typedef|;
end_typedef

begin_comment
comment|/*  * SIMPLE_INPUT Protocol  */
end_comment

begin_define
define|#
directive|define
name|SIMPLE_INPUT_PROTOCOL
define|\
value|{ 0x387477c1,0x69c7,0x11d2,0x8e,0x39,0x00,0xa0,0xc9,0x69,0x72,0x3b }
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_INPUT_KEY
block|{
name|UINT16
name|ScanCode
decl_stmt|;
name|CHAR16
name|UnicodeChar
decl_stmt|;
block|}
name|EFI_INPUT_KEY
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_SIMPLE_INPUT_INTERFACE
name|SIMPLE_INPUT_INTERFACE
typedef|;
end_typedef

begin_struct
struct|struct
name|_SIMPLE_INPUT_INTERFACE
block|{
name|EFI_STATUS
function_decl|(
modifier|*
name|Reset
function_decl|)
parameter_list|(
name|SIMPLE_INPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ReadKey
function_decl|)
parameter_list|(
name|SIMPLE_INPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|EFI_INPUT_KEY
modifier|*
name|Key
parameter_list|)
function_decl|;
name|EFI_EVENT
name|WaitForKey
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * SIMPLE_TEXT_OUTPUT Protocol.  */
end_comment

begin_define
define|#
directive|define
name|SIMPLE_TEXT_OUTPUT_PROTOCOL
define|\
value|{ 0x387477c2,0x69c7,0x11d2,0x8e,0x39,0x00,0xa0,0xc9,0x69,0x72,0x3b }
end_define

begin_typedef
typedef|typedef
struct|struct
name|_SIMPLE_TEXT_OUTPUT_MODE
block|{
name|INT32
name|MaxMode
decl_stmt|;
comment|/* current settings */
name|INT32
name|Mode
decl_stmt|;
name|INT32
name|Attribute
decl_stmt|;
name|INT32
name|CursorColumn
decl_stmt|;
name|INT32
name|CursorRow
decl_stmt|;
name|BOOLEAN
name|CursorVisible
decl_stmt|;
block|}
name|SIMPLE_TEXT_OUTPUT_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_SIMPLE_TEXT_OUTPUT_INTERFACE
name|SIMPLE_TEXT_OUTPUT_INTERFACE
typedef|;
end_typedef

begin_struct
struct|struct
name|_SIMPLE_TEXT_OUTPUT_INTERFACE
block|{
name|EFI_STATUS
function_decl|(
modifier|*
name|Reset
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|OutputString
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|CHAR16
modifier|*
name|String
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|TestString
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|CHAR16
modifier|*
name|String
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|QueryMode
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|ModeNumber
parameter_list|,
name|UINTN
modifier|*
name|Columns
parameter_list|,
name|UINTN
modifier|*
name|Rows
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetMode
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|ModeNumber
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetAttribute
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|Attribute
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ClearScreen
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetCursorPosition
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|Column
parameter_list|,
name|UINTN
name|Row
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|EnableCursor
function_decl|)
parameter_list|(
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|Visible
parameter_list|)
function_decl|;
name|SIMPLE_TEXT_OUTPUT_MODE
name|Mode
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Standard EFI table header.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_EFI_TABLE_HEADER
block|{
name|u_int64_t
name|Signature
decl_stmt|;
name|u_int32_t
name|Revision
decl_stmt|;
name|u_int32_t
name|HeaderSize
decl_stmt|;
name|u_int32_t
name|CRC32
decl_stmt|;
name|u_int32_t
name|Reserved
decl_stmt|;
block|}
name|EFI_TABLE_HEADER
typedef|;
end_typedef

begin_comment
comment|/*  * EFI Runtime Services Table.  */
end_comment

begin_define
define|#
directive|define
name|EFI_RUNTIME_SERVICES_SIGNATURE
value|0x56524553544e5552
end_define

begin_define
define|#
directive|define
name|EFI_RUNTIME_SERVICES_REVISION
value|((1<<16) | 99)
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_RUNTIME_SERVICES
block|{
name|EFI_TABLE_HEADER
name|Hdr
decl_stmt|;
comment|/* 	 * Time Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|GetTime
function_decl|)
parameter_list|(
name|EFI_TIME
modifier|*
name|Time
parameter_list|,
name|EFI_TIME_CAPABILITIES
modifier|*
name|Capabilities
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetTime
function_decl|)
parameter_list|(
name|EFI_TIME
modifier|*
name|Time
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|GetWakeupTime
function_decl|)
parameter_list|(
name|BOOLEAN
modifier|*
name|Enabled
parameter_list|,
name|BOOLEAN
modifier|*
name|Pending
parameter_list|,
name|EFI_TIME
modifier|*
name|Time
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetWakeupTime
function_decl|)
parameter_list|(
name|BOOLEAN
name|Enable
parameter_list|,
name|EFI_TIME
modifier|*
name|Time
parameter_list|)
function_decl|;
comment|/* 	 * Virtual Memory Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|SetVirtualAddressMap
function_decl|)
parameter_list|(
name|UINTN
name|MemoryMapSize
parameter_list|,
name|UINTN
name|DescriptorSize
parameter_list|,
name|UINT32
name|DescriptorVersion
parameter_list|,
name|EFI_MEMORY_DESCRIPTOR
modifier|*
name|VirtualMap
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ConvertPointer
function_decl|)
parameter_list|(
name|UINTN
name|DebugDisposition
parameter_list|,
name|void
modifier|*
modifier|*
name|Address
parameter_list|)
function_decl|;
comment|/* 	 * Variable Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|GetVariable
function_decl|)
parameter_list|(
name|CHAR16
modifier|*
name|VariableName
parameter_list|,
name|EFI_GUID
modifier|*
name|VendorGuid
parameter_list|,
name|UINT32
modifier|*
name|Attributes
parameter_list|,
name|UINTN
modifier|*
name|DataSize
parameter_list|,
name|void
modifier|*
name|Data
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|GetNextVariableName
function_decl|)
parameter_list|(
name|UINTN
modifier|*
name|VariableNameSize
parameter_list|,
name|CHAR16
modifier|*
name|VariableName
parameter_list|,
name|EFI_GUID
modifier|*
name|VendorGuid
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetVariable
function_decl|)
parameter_list|(
name|CHAR16
modifier|*
name|VariableName
parameter_list|,
name|EFI_GUID
modifier|*
name|VendorGuid
parameter_list|,
name|UINT32
name|Attributes
parameter_list|,
name|UINTN
name|DataSize
parameter_list|,
name|void
modifier|*
name|Data
parameter_list|)
function_decl|;
comment|/* 	 * Miscellaneous Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|GetNextHighMonotonicCount
function_decl|)
parameter_list|(
name|UINT32
modifier|*
name|HighCount
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ResetSystem
function_decl|)
parameter_list|(
name|EFI_RESET_TYPE
name|ResetType
parameter_list|,
name|EFI_STATUS
name|ResetStatus
parameter_list|,
name|UINTN
name|DataSize
parameter_list|,
name|CHAR16
modifier|*
name|ResetData
parameter_list|)
function_decl|;
block|}
name|EFI_RUNTIME_SERVICES
typedef|;
end_typedef

begin_comment
comment|/*  * Boot Services Table.  */
end_comment

begin_define
define|#
directive|define
name|EFI_BOOT_SERVICES_SIGNATURE
value|0x56524553544f4f42
end_define

begin_define
define|#
directive|define
name|EFI_BOOT_SERVICES_REVISION
value|((0<<16) | 91)
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_BOOT_SERVICES
block|{
name|EFI_TABLE_HEADER
name|Hdr
decl_stmt|;
comment|/* 	 * Task Priority Services. 	 */
name|EFI_TPL
function_decl|(
modifier|*
name|RaiseTPL
function_decl|)
parameter_list|(
name|EFI_TPL
name|NewTpl
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|RestoreTPL
function_decl|)
parameter_list|(
name|EFI_TPL
name|OldTpl
parameter_list|)
function_decl|;
comment|/* 	 * Memory Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|AllocatePages
function_decl|)
parameter_list|(
name|EFI_ALLOCATE_TYPE
name|Type
parameter_list|,
name|EFI_MEMORY_TYPE
name|MemoryType
parameter_list|,
name|UINTN
name|Pages
parameter_list|,
name|EFI_PHYSICAL_ADDRESS
modifier|*
name|Memory
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|FreePages
function_decl|)
parameter_list|(
name|EFI_PHYSICAL_ADDRESS
name|Memory
parameter_list|,
name|UINTN
name|Pages
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|GetMemoryMap
function_decl|)
parameter_list|(
name|UINTN
modifier|*
name|MemoryMapSize
parameter_list|,
name|EFI_MEMORY_DESCRIPTOR
modifier|*
name|MemoryMap
parameter_list|,
name|UINTN
modifier|*
name|MapKey
parameter_list|,
name|UINTN
modifier|*
name|DescriptorSize
parameter_list|,
name|UINT32
modifier|*
name|DescriptorVersion
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|AllocatePool
function_decl|)
parameter_list|(
name|EFI_MEMORY_TYPE
modifier|*
name|PoolType
parameter_list|,
name|UINTN
name|Size
parameter_list|,
name|void
modifier|*
modifier|*
name|Buffer
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|FreePool
function_decl|)
parameter_list|(
name|void
modifier|*
name|Buffer
parameter_list|)
function_decl|;
comment|/* 	 * Event& Timer Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|CreateEvent
function_decl|)
parameter_list|(
name|UINT32
name|Type
parameter_list|,
name|EFI_TPL
name|NotifyTpl
parameter_list|,
name|EFI_EVENT_NOTIFY
name|NotifyFunction
parameter_list|,
name|void
modifier|*
name|NotifyContext
parameter_list|,
name|EFI_EVENT
modifier|*
name|Event
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetTimer
function_decl|)
parameter_list|(
name|EFI_EVENT
name|Event
parameter_list|,
name|EFI_TIMER_DELAY
name|Type
parameter_list|,
name|UINT64
name|TriggerTime
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|WaitForEvent
function_decl|)
parameter_list|(
name|UINTN
name|NumberOfEvents
parameter_list|,
name|EFI_EVENT
modifier|*
name|Event
parameter_list|,
name|UINTN
modifier|*
name|Index
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SignalEvent
function_decl|)
parameter_list|(
name|EFI_EVENT
name|Event
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|CloseEvent
function_decl|)
parameter_list|(
name|EFI_EVENT
name|Event
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|CheckEvent
function_decl|)
parameter_list|(
name|EFI_EVENT
name|Event
parameter_list|)
function_decl|;
comment|/* 	 * Protocol Handler Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|InstallProtocolInterface
function_decl|)
parameter_list|(
name|EFI_HANDLE
modifier|*
name|Handle
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|EFI_INTERFACE_TYPE
name|InterfaceType
parameter_list|,
name|void
modifier|*
name|Interface
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ReinstallProtocolInterface
function_decl|)
parameter_list|(
name|EFI_HANDLE
modifier|*
name|Handle
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|void
modifier|*
name|OldInterface
parameter_list|,
name|void
modifier|*
name|NewInterface
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|UninstallProtocolInterface
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|Handle
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|void
modifier|*
name|Interface
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|HandleProtocol
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|Handle
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|void
modifier|*
modifier|*
name|Interface
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|PCHandleProtocol
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|Handle
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|void
modifier|*
modifier|*
name|Interface
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|RegisterProtocolNotify
function_decl|)
parameter_list|(
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|EFI_EVENT
name|Event
parameter_list|,
name|void
modifier|*
modifier|*
name|Registration
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|LocateHandle
function_decl|)
parameter_list|(
name|EFI_LOCATE_SEARCH_TYPE
name|SearchType
parameter_list|,
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|void
modifier|*
name|SearchKey
parameter_list|,
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|EFI_HANDLE
modifier|*
name|Buffer
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|LocateDevicePath
function_decl|)
parameter_list|(
name|EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|EFI_DEVICE_PATH
modifier|*
modifier|*
name|DevicePath
parameter_list|,
name|EFI_HANDLE
name|Device
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|InstallConfigurationTable
function_decl|)
parameter_list|(
name|EFI_GUID
modifier|*
name|Guid
parameter_list|,
name|void
modifier|*
name|Table
parameter_list|)
function_decl|;
comment|/* 	 * Image Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|LoadImage
function_decl|)
parameter_list|(
name|BOOLEAN
name|BootPolicy
parameter_list|,
name|EFI_HANDLE
name|ParentImageHandle
parameter_list|,
name|EFI_DEVICE_PATH
modifier|*
name|FilePath
parameter_list|,
name|void
modifier|*
name|SourceBuffer
parameter_list|,
name|UINTN
name|SourceSize
parameter_list|,
name|EFI_HANDLE
modifier|*
name|ImageHandle
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|StartImage
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|UINTN
modifier|*
name|ExitDataSize
parameter_list|,
name|CHAR16
modifier|*
name|ExitData
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|Exit
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|EFI_STATUS
name|ExitStatus
parameter_list|,
name|UINTN
name|ExitDataSize
parameter_list|,
name|CHAR16
name|ExitData
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|UnloadImage
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|ImageHandle
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|ExitBootServices
function_decl|)
parameter_list|(
name|EFI_HANDLE
name|ImageHandle
parameter_list|,
name|UINTN
name|MapKey
parameter_list|)
function_decl|;
comment|/* 	 * Miscellaneous Services. 	 */
name|EFI_STATUS
function_decl|(
modifier|*
name|GetNextMonotonicCount
function_decl|)
parameter_list|(
name|UINT64
modifier|*
name|Count
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|Stall
function_decl|)
parameter_list|(
name|UINTN
name|Microseconds
parameter_list|)
function_decl|;
name|EFI_STATUS
function_decl|(
modifier|*
name|SetWatchdogTimer
function_decl|)
parameter_list|(
name|UINTN
name|Timeout
parameter_list|,
name|UINT64
name|WatchdogCode
parameter_list|,
name|UINTN
name|DataSize
parameter_list|,
name|CHAR16
modifier|*
name|WatchdogData
parameter_list|)
function_decl|;
block|}
name|EFI_BOOT_SERVICES
typedef|;
end_typedef

begin_comment
comment|/*  * EFI Configuration Table and GUID Declarations.  */
end_comment

begin_define
define|#
directive|define
name|MPS_TABLE_GUID
define|\
value|{0xeb9d2d2f,0x2d88,0x11d3,0x9a,0x16,0x00,0x90,0x27,0x3f,0xc1,0x4d}
end_define

begin_define
define|#
directive|define
name|ACPI_TABLE_GUID
define|\
value|{0xeb9d2d30,0x2d88,0x11d3,0x9a,0x16,0x00,0x90,0x27,0x3f,0xc1,0x4d}
end_define

begin_define
define|#
directive|define
name|ACPI_20_TABLE_GUID
define|\
value|{0x8868e871,0xe4f1,0x11d3,0xbc,0x22,0x00,x080,0xc7,0x3c,0x88,0x81}
end_define

begin_define
define|#
directive|define
name|SMBIOS_TABLE_GUID
define|\
value|{0xeb9d2d31,0x2d88,0x11d3,0x9a,0x16,0x00,0x90,0x27,0x3f,0xc1,0x4d}
end_define

begin_define
define|#
directive|define
name|SAL_TABLE_GUID
define|\
value|{0xeb9d2d32,0x2d88,0x11d3,0x9a,0x16,0x00,0x90,0x27,0x3f,0xc1,0x4d}
end_define

begin_typedef
typedef|typedef
struct|struct
name|_EFI_CONFIGURATION_TABLE
block|{
name|EFI_GUID
name|VendorGuid
decl_stmt|;
name|void
modifier|*
name|VendorTable
decl_stmt|;
block|}
name|EFI_CONFIGURATION_TABLE
typedef|;
end_typedef

begin_comment
comment|/*  * EFI System Table.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_EFI_SYSTEM_TABLE
block|{
name|EFI_TABLE_HEADER
name|Hdr
decl_stmt|;
name|CHAR16
modifier|*
name|FirmwareVendor
decl_stmt|;
name|UINT32
name|FirmwareRevision
decl_stmt|;
name|EFI_HANDLE
name|ConsoleInHandle
decl_stmt|;
name|SIMPLE_INPUT_INTERFACE
modifier|*
name|ConIn
decl_stmt|;
name|EFI_HANDLE
name|ConsoleOutHandle
decl_stmt|;
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|ConOut
decl_stmt|;
name|EFI_HANDLE
name|StandardErrorHandle
decl_stmt|;
name|SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|StdErr
decl_stmt|;
name|EFI_RUNTIME_SERVICES
modifier|*
name|RuntimeServices
decl_stmt|;
name|EFI_BOOT_SERVICES
modifier|*
name|BootServices
decl_stmt|;
name|UINTN
name|NumberOfTableEntries
decl_stmt|;
name|EFI_CONFIGURATION_TABLE
modifier|*
name|ConfiguratioNTable
decl_stmt|;
block|}
name|EFI_SYSTEM_TABLE
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MACHINE_EFI_H_ */
end_comment

end_unit

