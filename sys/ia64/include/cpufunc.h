begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1998 Doug Rabson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_CPUFUNC_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_CPUFUNC_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_function
specifier|static
name|__inline
name|void
name|breakpoint
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile("break 0x80100");
comment|/* XXX use linux value */
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|u_int8_t
name|inb
parameter_list|(
name|u_int
name|port
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int16_t
name|inw
parameter_list|(
name|u_int
name|port
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|inl
parameter_list|(
name|u_int
name|port
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|insb
parameter_list|(
name|u_int
name|port
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int8_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inb
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|insw
parameter_list|(
name|u_int
name|port
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int16_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inw
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|insl
parameter_list|(
name|u_int
name|port
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|u_int32_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
operator|*
name|p
operator|++
operator|=
name|inl
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outb
parameter_list|(
name|u_int
name|port
parameter_list|,
name|u_int8_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outw
parameter_list|(
name|u_int
name|port
parameter_list|,
name|u_int16_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outl
parameter_list|(
name|u_int
name|port
parameter_list|,
name|u_int32_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsb
parameter_list|(
name|u_int
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int8_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outb
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsw
parameter_list|(
name|u_int
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int16_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outw
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|outsl
parameter_list|(
name|u_int
name|port
parameter_list|,
specifier|const
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
specifier|const
name|u_int32_t
modifier|*
name|p
init|=
name|addr
decl_stmt|;
while|while
condition|(
name|count
operator|--
condition|)
name|outl
argument_list|(
name|port
argument_list|,
operator|*
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int8_t
name|readb
parameter_list|(
name|u_int
name|addr
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int16_t
name|readw
parameter_list|(
name|u_int
name|addr
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|u_int32_t
name|readl
parameter_list|(
name|u_int
name|addr
parameter_list|)
block|{
return|return
literal|0
return|;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|writeb
parameter_list|(
name|u_int
name|addr
parameter_list|,
name|u_int8_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|writew
parameter_list|(
name|u_int
name|addr
parameter_list|,
name|u_int16_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|writel
parameter_list|(
name|u_int
name|addr
parameter_list|,
name|u_int32_t
name|data
parameter_list|)
block|{
return|return;
comment|/* TODO: implement this */
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|disable_intr
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile ("rsm psr.i;;");
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|enable_intr
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm __volatile (";; ssm psr.i;; srlz.d");
block|}
end_function

begin_function
specifier|static
name|__inline
name|critical_t
name|critical_enter
parameter_list|(
name|void
parameter_list|)
block|{
name|critical_t
name|psr
decl_stmt|;
asm|__asm __volatile ("mov %0=psr;;" : "=r" (psr));
name|disable_intr
argument_list|()
expr_stmt|;
return|return
operator|(
name|psr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|critical_exit
parameter_list|(
name|critical_t
name|psr
parameter_list|)
block|{
asm|__asm __volatile ("mov psr.l=%0;; srlz.d" :: "r" (psr));
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_CPUFUNC_H_ */
end_comment

end_unit

