begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: bus.h,v 1.12 1997/10/01 08:25:15 fvdl Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 1996, 1997 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the NetBSD  *	Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*-  * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.  * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *      This product includes software developed by Christopher G. Demetriou  *	for the NetBSD Project.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_BUS_H_
end_define

begin_comment
comment|/*  * Platform notes:  * o	We don't use the _MACHINE_BUS_PIO_H_ and _MACHINE_BUS_MEMIO_H_  *	macros to conditionally compile for I/O port, memory mapped I/O  *	or both. It's a micro-optimization that is not worth the pain  *	because there is no I/O port space. I/O ports are emulated by  *	doing memory mapped I/O in a special memory range. The address  *	translation is slightly magic for I/O port accesses, but it does  *	not warrant the overhead.  */
end_comment

begin_include
include|#
directive|include
file|<machine/_bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_comment
comment|/*  * Values for the ia64 bus space tag, not to be used directly by MI code.  */
end_comment

begin_define
define|#
directive|define
name|IA64_BUS_SPACE_IO
value|0
end_define

begin_comment
comment|/* space is i/o space */
end_comment

begin_define
define|#
directive|define
name|IA64_BUS_SPACE_MEM
value|1
end_define

begin_comment
comment|/* space is mem space */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE
value|0xFFFFFFFFFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_UNRESTRICTED
value|(~0)
end_define

begin_comment
comment|/*  * Map a region of device bus space into CPU virtual address space.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
name|__unused
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
name|__unused
parameter_list|,
name|int
name|flags
name|__unused
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
block|{
operator|*
name|bshp
operator|=
name|addr
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Unmap a region of device bus space.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_unmap
parameter_list|(
name|bus_space_tag_t
name|bst
name|__unused
parameter_list|,
name|bus_space_handle_t
name|bsh
name|__unused
parameter_list|,
name|bus_size_t
name|size
name|__unused
parameter_list|)
block|{ }
end_function

begin_comment
comment|/*  * Get a new handle for a subregion of an already-mapped area of bus space.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|bus_space_subregion
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|bus_space_handle_t
modifier|*
name|nbshp
parameter_list|)
block|{
operator|*
name|nbshp
operator|=
name|bsh
operator|+
name|ofs
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Allocate a region of memory that is accessible to devices in bus space.  */
end_comment

begin_function_decl
name|int
name|bus_space_alloc
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_addr_t
name|rstart
parameter_list|,
name|bus_addr_t
name|rend
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|bus_size_t
name|align
parameter_list|,
name|bus_size_t
name|boundary
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_addr_t
modifier|*
name|addrp
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Free a region of bus space accessible memory.  */
end_comment

begin_function_decl
name|void
name|bus_space_free
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Bus read/write barrier method.  */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_READ
value|0x01
end_define

begin_comment
comment|/* force read barrier */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_WRITE
value|0x02
end_define

begin_comment
comment|/* force write barrier */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_barrier
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|ia64_mf_a
argument_list|()
expr_stmt|;
name|ia64_mf
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Read 1 unit of data from bus space described by the tag, handle and ofs  * tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is returned.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint8_t
name|bus_space_read_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|bsp
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint16_t
name|bus_space_read_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|bsp
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|bus_space_read_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|bsp
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|bus_space_read_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|bsp
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Write 1 unit of data to bus space described by the tag, handle and ofs  * tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is passed by value.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint64_t
name|val
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Read count units of data from bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is returned in the buffer passed by reference.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint8_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint16_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint32_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint64_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Write count units of data to bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is read from the buffer passed by reference.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint16_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint64_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Read count units of data from bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is written to the buffer passed by reference and read from successive  * bus space addresses. Access is unordered.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint8_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
name|ofs
operator|+=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint16_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
name|ofs
operator|+=
literal|2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint32_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
name|ofs
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint64_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bufp
operator|++
operator|=
operator|*
name|bsp
expr_stmt|;
name|ofs
operator|+=
literal|8
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Write count units of data from bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is read from the buffer passed by reference and written to successive  * bus space addresses. Access is unordered.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
name|ofs
operator|+=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint16_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
name|ofs
operator|+=
literal|2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
name|ofs
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
specifier|const
name|uint64_t
modifier|*
name|bufp
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
operator|*
name|bufp
operator|++
expr_stmt|;
name|ofs
operator|+=
literal|8
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Write count units of data from bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is passed by value. Writes are unordered.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint8_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint16_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint32_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint64_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Write count units of data from bus space described by the tag, handle and  * ofs tuple. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes. The  * data is passed by value and written to successive bus space addresses.  * Writes are unordered.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint8_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint8_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
name|ofs
operator|+=
literal|1
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint16_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint16_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
name|ofs
operator|+=
literal|2
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint32_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint32_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
name|ofs
operator|+=
literal|4
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|ofs
parameter_list|,
name|uint64_t
name|val
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|uint64_t
name|__volatile
modifier|*
name|bsp
decl_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|bsp
operator|=
operator|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
operator|)
condition|?
name|__PIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
else|:
name|__MEMIO_ADDR
argument_list|(
name|bsh
operator|+
name|ofs
argument_list|)
expr_stmt|;
operator|*
name|bsp
operator|=
name|val
expr_stmt|;
name|ofs
operator|+=
literal|8
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Copy count units of data from bus space described by the tag and the first  * handle and ofs pair to bus space described by the tag and the second handle  * and ofs pair. A unit of data can be 1 byte, 2 bytes, 4 bytes or 8 bytes.  * The data is read from successive bus space addresses and also written to  * successive bus space addresses. Both reads and writes are unordered.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_1
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|ofs1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|ofs2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|dst
decl_stmt|,
name|src
decl_stmt|;
name|uint8_t
name|__volatile
modifier|*
name|dstp
decl_stmt|,
modifier|*
name|srcp
decl_stmt|;
name|src
operator|=
name|bsh1
operator|+
name|ofs1
expr_stmt|;
name|dst
operator|=
name|bsh2
operator|+
name|ofs2
expr_stmt|;
if|if
condition|(
name|dst
operator|>
name|src
condition|)
block|{
name|src
operator|+=
name|count
operator|-
literal|1
expr_stmt|;
name|dst
operator|+=
name|count
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|-=
literal|1
expr_stmt|;
name|dst
operator|-=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|+=
literal|1
expr_stmt|;
name|dst
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_2
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|ofs1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|ofs2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|dst
decl_stmt|,
name|src
decl_stmt|;
name|uint16_t
name|__volatile
modifier|*
name|dstp
decl_stmt|,
modifier|*
name|srcp
decl_stmt|;
name|src
operator|=
name|bsh1
operator|+
name|ofs1
expr_stmt|;
name|dst
operator|=
name|bsh2
operator|+
name|ofs2
expr_stmt|;
if|if
condition|(
name|dst
operator|>
name|src
condition|)
block|{
name|src
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|1
expr_stmt|;
name|dst
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|1
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|-=
literal|2
expr_stmt|;
name|dst
operator|-=
literal|2
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|+=
literal|2
expr_stmt|;
name|dst
operator|+=
literal|2
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_4
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|ofs1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|ofs2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|dst
decl_stmt|,
name|src
decl_stmt|;
name|uint32_t
name|__volatile
modifier|*
name|dstp
decl_stmt|,
modifier|*
name|srcp
decl_stmt|;
name|src
operator|=
name|bsh1
operator|+
name|ofs1
expr_stmt|;
name|dst
operator|=
name|bsh2
operator|+
name|ofs2
expr_stmt|;
if|if
condition|(
name|dst
operator|>
name|src
condition|)
block|{
name|src
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|2
expr_stmt|;
name|dst
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|2
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|-=
literal|4
expr_stmt|;
name|dst
operator|-=
literal|4
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|+=
literal|4
expr_stmt|;
name|dst
operator|+=
literal|4
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_8
parameter_list|(
name|bus_space_tag_t
name|bst
parameter_list|,
name|bus_space_handle_t
name|bsh1
parameter_list|,
name|bus_size_t
name|ofs1
parameter_list|,
name|bus_space_handle_t
name|bsh2
parameter_list|,
name|bus_size_t
name|ofs2
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
name|bus_addr_t
name|dst
decl_stmt|,
name|src
decl_stmt|;
name|uint64_t
name|__volatile
modifier|*
name|dstp
decl_stmt|,
modifier|*
name|srcp
decl_stmt|;
name|src
operator|=
name|bsh1
operator|+
name|ofs1
expr_stmt|;
name|dst
operator|=
name|bsh2
operator|+
name|ofs2
expr_stmt|;
if|if
condition|(
name|dst
operator|>
name|src
condition|)
block|{
name|src
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|3
expr_stmt|;
name|dst
operator|+=
operator|(
name|count
operator|-
literal|1
operator|)
operator|<<
literal|3
expr_stmt|;
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|-=
literal|8
expr_stmt|;
name|dst
operator|-=
literal|8
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|bst
operator|==
name|IA64_BUS_SPACE_IO
condition|)
block|{
name|srcp
operator|=
name|__PIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__PIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|srcp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dstp
operator|=
name|__MEMIO_ADDR
argument_list|(
name|dst
argument_list|)
expr_stmt|;
block|}
operator|*
name|dstp
operator|=
operator|*
name|srcp
expr_stmt|;
name|src
operator|+=
literal|8
expr_stmt|;
name|dst
operator|+=
literal|8
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/*  * Stream accesses are the same as normal accesses on ia64; there are no  * supported bus systems with an endianess different from the host one.  */
end_comment

begin_define
define|#
directive|define
name|bus_space_read_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|bus_space_read_1(t, h, o)
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|bus_space_read_2(t, h, o)
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|bus_space_read_4(t, h, o)
end_define

begin_define
define|#
directive|define
name|bus_space_read_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|)
define|\
value|bus_space_read_8(t, h, o)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_1(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_2(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_4(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_8(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_1(t, h, o, v)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_2(t, h, o, v)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_4(t, h, o, v)
end_define

begin_define
define|#
directive|define
name|bus_space_write_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|)
define|\
value|bus_space_write_8(t, h, o, v)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_1(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_2(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_4(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_8(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_1(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_2(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_4(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_multi_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_multi_8(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_1(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_2(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_4(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_read_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_8(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_1(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_2(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_4(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_write_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_8(t, h, o, a, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_1(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_2(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_4(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_set_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h
parameter_list|,
name|o
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_8(t, h, o, v, c)
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_1
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1(t, h1, o1, h2, o2, c)
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_2
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_2(t, h1, o1, h2, o2, c)
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_4
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_4(t, h1, o1, h2, o2, c)
end_define

begin_define
define|#
directive|define
name|bus_space_copy_region_stream_8
parameter_list|(
name|t
parameter_list|,
name|h1
parameter_list|,
name|o1
parameter_list|,
name|h2
parameter_list|,
name|o2
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_8(t, h1, o1, h2, o2, c)
end_define

begin_include
include|#
directive|include
file|<machine/bus_dma.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MACHINE_BUS_H_ */
end_comment

end_unit

