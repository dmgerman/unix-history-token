begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2000-2003 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DISASM_H_
end_ifndef

begin_define
define|#
directive|define
name|_DISASM_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_DISASM_INT_H_
end_ifndef

begin_define
define|#
directive|define
name|ASM_ADDITIONAL_OPCODES
value|ASM_OP_NUMBER_OF_OPCODES
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Application registers. */
end_comment

begin_define
define|#
directive|define
name|AR_K0
value|0
end_define

begin_define
define|#
directive|define
name|AR_K1
value|1
end_define

begin_define
define|#
directive|define
name|AR_K2
value|2
end_define

begin_define
define|#
directive|define
name|AR_K3
value|3
end_define

begin_define
define|#
directive|define
name|AR_K4
value|4
end_define

begin_define
define|#
directive|define
name|AR_K5
value|5
end_define

begin_define
define|#
directive|define
name|AR_K6
value|6
end_define

begin_define
define|#
directive|define
name|AR_K7
value|7
end_define

begin_define
define|#
directive|define
name|AR_RSC
value|16
end_define

begin_define
define|#
directive|define
name|AR_BSP
value|17
end_define

begin_define
define|#
directive|define
name|AR_BSPSTORE
value|18
end_define

begin_define
define|#
directive|define
name|AR_RNAT
value|19
end_define

begin_define
define|#
directive|define
name|AR_FCR
value|21
end_define

begin_define
define|#
directive|define
name|AR_EFLAG
value|24
end_define

begin_define
define|#
directive|define
name|AR_CSD
value|25
end_define

begin_define
define|#
directive|define
name|AR_SSD
value|26
end_define

begin_define
define|#
directive|define
name|AR_CFLG
value|27
end_define

begin_define
define|#
directive|define
name|AR_FSR
value|28
end_define

begin_define
define|#
directive|define
name|AR_FIR
value|29
end_define

begin_define
define|#
directive|define
name|AR_FDR
value|30
end_define

begin_define
define|#
directive|define
name|AR_CCV
value|32
end_define

begin_define
define|#
directive|define
name|AR_UNAT
value|36
end_define

begin_define
define|#
directive|define
name|AR_FPSR
value|40
end_define

begin_define
define|#
directive|define
name|AR_ITC
value|44
end_define

begin_define
define|#
directive|define
name|AR_PFS
value|64
end_define

begin_define
define|#
directive|define
name|AR_LC
value|65
end_define

begin_define
define|#
directive|define
name|AR_EC
value|66
end_define

begin_comment
comment|/* Control registers. */
end_comment

begin_define
define|#
directive|define
name|CR_DCR
value|0
end_define

begin_define
define|#
directive|define
name|CR_ITM
value|1
end_define

begin_define
define|#
directive|define
name|CR_IVA
value|2
end_define

begin_define
define|#
directive|define
name|CR_PTA
value|8
end_define

begin_define
define|#
directive|define
name|CR_IPSR
value|16
end_define

begin_define
define|#
directive|define
name|CR_ISR
value|17
end_define

begin_define
define|#
directive|define
name|CR_IIP
value|19
end_define

begin_define
define|#
directive|define
name|CR_IFA
value|20
end_define

begin_define
define|#
directive|define
name|CR_ITIR
value|21
end_define

begin_define
define|#
directive|define
name|CR_IIPA
value|22
end_define

begin_define
define|#
directive|define
name|CR_IFS
value|23
end_define

begin_define
define|#
directive|define
name|CR_IIM
value|24
end_define

begin_define
define|#
directive|define
name|CR_IHA
value|25
end_define

begin_define
define|#
directive|define
name|CR_LID
value|64
end_define

begin_define
define|#
directive|define
name|CR_IVR
value|65
end_define

begin_define
define|#
directive|define
name|CR_TPR
value|66
end_define

begin_define
define|#
directive|define
name|CR_EOI
value|67
end_define

begin_define
define|#
directive|define
name|CR_IRR0
value|68
end_define

begin_define
define|#
directive|define
name|CR_IRR1
value|69
end_define

begin_define
define|#
directive|define
name|CR_IRR2
value|70
end_define

begin_define
define|#
directive|define
name|CR_IRR3
value|71
end_define

begin_define
define|#
directive|define
name|CR_ITV
value|72
end_define

begin_define
define|#
directive|define
name|CR_PMV
value|73
end_define

begin_define
define|#
directive|define
name|CR_CMCV
value|74
end_define

begin_define
define|#
directive|define
name|CR_LRR0
value|80
end_define

begin_define
define|#
directive|define
name|CR_LRR1
value|81
end_define

begin_enum
enum|enum
name|asm_cmpltr_class
block|{
name|ASM_CC_NONE
block|,
name|ASM_CC_ACLR
block|,
name|ASM_CC_BSW
block|,
name|ASM_CC_BTYPE
block|,
name|ASM_CC_BWH
block|,
name|ASM_CC_CHK
block|,
name|ASM_CC_CLRRRB
block|,
name|ASM_CC_CREL
block|,
name|ASM_CC_CTYPE
block|,
name|ASM_CC_DEP
block|,
name|ASM_CC_DH
block|,
name|ASM_CC_FC
block|,
name|ASM_CC_FCREL
block|,
name|ASM_CC_FCTYPE
block|,
name|ASM_CC_FCVT
block|,
name|ASM_CC_FLDTYPE
block|,
name|ASM_CC_FMERGE
block|,
name|ASM_CC_FREL
block|,
name|ASM_CC_FSWAP
block|,
name|ASM_CC_GETF
block|,
name|ASM_CC_IH
block|,
name|ASM_CC_INVALA
block|,
name|ASM_CC_IPWH
block|,
name|ASM_CC_ITC
block|,
name|ASM_CC_ITR
block|,
name|ASM_CC_LDHINT
block|,
name|ASM_CC_LDTYPE
block|,
name|ASM_CC_LFETCH
block|,
name|ASM_CC_LFHINT
block|,
name|ASM_CC_LFTYPE
block|,
name|ASM_CC_LR
block|,
name|ASM_CC_MF
block|,
name|ASM_CC_MOV
block|,
name|ASM_CC_MWH
block|,
name|ASM_CC_PAVG
block|,
name|ASM_CC_PC
block|,
name|ASM_CC_PH
block|,
name|ASM_CC_PREL
block|,
name|ASM_CC_PRTYPE
block|,
name|ASM_CC_PTC
block|,
name|ASM_CC_PTR
block|,
name|ASM_CC_PVEC
block|,
name|ASM_CC_SAT
block|,
name|ASM_CC_SEM
block|,
name|ASM_CC_SETF
block|,
name|ASM_CC_SF
block|,
name|ASM_CC_SRLZ
block|,
name|ASM_CC_STHINT
block|,
name|ASM_CC_STTYPE
block|,
name|ASM_CC_SYNC
block|,
name|ASM_CC_RW
block|,
name|ASM_CC_TREL
block|,
name|ASM_CC_TRUNC
block|,
name|ASM_CC_UNIT
block|,
name|ASM_CC_UNPACK
block|,
name|ASM_CC_UNS
block|,
name|ASM_CC_XMA
block|}
enum|;
end_enum

begin_enum
enum|enum
name|asm_cmpltr_type
block|{
name|ASM_CT_NONE
block|,
name|ASM_CT_COND
init|=
name|ASM_CT_NONE
block|,
name|ASM_CT_0
block|,
name|ASM_CT_1
block|,
name|ASM_CT_A
block|,
name|ASM_CT_ACQ
block|,
name|ASM_CT_AND
block|,
name|ASM_CT_B
block|,
name|ASM_CT_BIAS
block|,
name|ASM_CT_C_CLR
block|,
name|ASM_CT_C_CLR_ACQ
block|,
name|ASM_CT_C_NC
block|,
name|ASM_CT_CALL
block|,
name|ASM_CT_CEXIT
block|,
name|ASM_CT_CLOOP
block|,
name|ASM_CT_CLR
block|,
name|ASM_CT_CTOP
block|,
name|ASM_CT_D
block|,
name|ASM_CT_DC_DC
block|,
name|ASM_CT_DC_NT
block|,
name|ASM_CT_DPNT
block|,
name|ASM_CT_DPTK
block|,
name|ASM_CT_E
block|,
name|ASM_CT_EQ
block|,
name|ASM_CT_EXCL
block|,
name|ASM_CT_EXIT
block|,
name|ASM_CT_EXP
block|,
name|ASM_CT_F
block|,
name|ASM_CT_FAULT
block|,
name|ASM_CT_FEW
block|,
name|ASM_CT_FILL
block|,
name|ASM_CT_FX
block|,
name|ASM_CT_FXU
block|,
name|ASM_CT_G
block|,
name|ASM_CT_GA
block|,
name|ASM_CT_GE
block|,
name|ASM_CT_GT
block|,
name|ASM_CT_H
block|,
name|ASM_CT_HU
block|,
name|ASM_CT_I
block|,
name|ASM_CT_IA
block|,
name|ASM_CT_IMP
block|,
name|ASM_CT_L
block|,
name|ASM_CT_LE
block|,
name|ASM_CT_LOOP
block|,
name|ASM_CT_LR
block|,
name|ASM_CT_LT
block|,
name|ASM_CT_LTU
block|,
name|ASM_CT_M
block|,
name|ASM_CT_MANY
block|,
name|ASM_CT_NC
block|,
name|ASM_CT_NE
block|,
name|ASM_CT_NEQ
block|,
name|ASM_CT_NL
block|,
name|ASM_CT_NLE
block|,
name|ASM_CT_NLT
block|,
name|ASM_CT_NM
block|,
name|ASM_CT_NR
block|,
name|ASM_CT_NS
block|,
name|ASM_CT_NT_DC
block|,
name|ASM_CT_NT_NT
block|,
name|ASM_CT_NT_TK
block|,
name|ASM_CT_NT1
block|,
name|ASM_CT_NT2
block|,
name|ASM_CT_NTA
block|,
name|ASM_CT_NZ
block|,
name|ASM_CT_OR
block|,
name|ASM_CT_OR_ANDCM
block|,
name|ASM_CT_ORD
block|,
name|ASM_CT_PR
block|,
name|ASM_CT_R
block|,
name|ASM_CT_RAZ
block|,
name|ASM_CT_REL
block|,
name|ASM_CT_RET
block|,
name|ASM_CT_RW
block|,
name|ASM_CT_S
block|,
name|ASM_CT_S0
block|,
name|ASM_CT_S1
block|,
name|ASM_CT_S2
block|,
name|ASM_CT_S3
block|,
name|ASM_CT_SA
block|,
name|ASM_CT_SE
block|,
name|ASM_CT_SIG
block|,
name|ASM_CT_SPILL
block|,
name|ASM_CT_SPNT
block|,
name|ASM_CT_SPTK
block|,
name|ASM_CT_SSS
block|,
name|ASM_CT_TK_DC
block|,
name|ASM_CT_TK_NT
block|,
name|ASM_CT_TK_TK
block|,
name|ASM_CT_TRUNC
block|,
name|ASM_CT_U
block|,
name|ASM_CT_UNC
block|,
name|ASM_CT_UNORD
block|,
name|ASM_CT_USS
block|,
name|ASM_CT_UUS
block|,
name|ASM_CT_UUU
block|,
name|ASM_CT_W
block|,
name|ASM_CT_WEXIT
block|,
name|ASM_CT_WTOP
block|,
name|ASM_CT_X
block|,
name|ASM_CT_XF
block|,
name|ASM_CT_Z
block|, }
enum|;
end_enum

begin_comment
comment|/* Completer. */
end_comment

begin_struct
struct|struct
name|asm_cmpltr
block|{
name|enum
name|asm_cmpltr_class
name|c_class
decl_stmt|;
name|enum
name|asm_cmpltr_type
name|c_type
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Operand types. */
end_comment

begin_enum
enum|enum
name|asm_oper_type
block|{
name|ASM_OPER_NONE
block|,
name|ASM_OPER_AREG
block|,
comment|/* = ar# */
name|ASM_OPER_BREG
block|,
comment|/* = b# */
name|ASM_OPER_CPUID
block|,
comment|/* = cpuid[r#] */
name|ASM_OPER_CREG
block|,
comment|/* = cr# */
name|ASM_OPER_DBR
block|,
comment|/* = dbr[r#] */
name|ASM_OPER_DISP
block|,
comment|/* IP relative displacement. */
name|ASM_OPER_DTR
block|,
comment|/* = dtr[r#] */
name|ASM_OPER_FREG
block|,
comment|/* = f# */
name|ASM_OPER_GREG
block|,
comment|/* = r# */
name|ASM_OPER_IBR
block|,
comment|/* = ibr[r#] */
name|ASM_OPER_IMM
block|,
comment|/* Immediate */
name|ASM_OPER_IP
block|,
comment|/* = ip */
name|ASM_OPER_ITR
block|,
comment|/* = itr[r#] */
name|ASM_OPER_MEM
block|,
comment|/* = [r#] */
name|ASM_OPER_MSR
block|,
comment|/* = msr[r#] */
name|ASM_OPER_PKR
block|,
comment|/* = pkr[r#] */
name|ASM_OPER_PMC
block|,
comment|/* = pmc[r#] */
name|ASM_OPER_PMD
block|,
comment|/* = pmd[r#] */
name|ASM_OPER_PR
block|,
comment|/* = pr */
name|ASM_OPER_PR_ROT
block|,
comment|/* = pr.rot */
name|ASM_OPER_PREG
block|,
comment|/* = p# */
name|ASM_OPER_PSR
block|,
comment|/* = psr */
name|ASM_OPER_PSR_L
block|,
comment|/* = psr.l */
name|ASM_OPER_PSR_UM
block|,
comment|/* = psr.um */
name|ASM_OPER_RR
comment|/* = rr[r#] */
block|}
enum|;
end_enum

begin_comment
comment|/* Operand */
end_comment

begin_struct
struct|struct
name|asm_oper
block|{
name|enum
name|asm_oper_type
name|o_type
decl_stmt|;
name|uint64_t
name|o_value
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Instruction formats. */
end_comment

begin_enum
enum|enum
name|asm_fmt
block|{
name|ASM_FMT_NONE
block|,
name|ASM_FMT_A
init|=
literal|0x0100
block|,
name|ASM_FMT_A1
block|,
name|ASM_FMT_A2
block|,
name|ASM_FMT_A3
block|,
name|ASM_FMT_A4
block|,
name|ASM_FMT_A5
block|,
name|ASM_FMT_A6
block|,
name|ASM_FMT_A7
block|,
name|ASM_FMT_A8
block|,
name|ASM_FMT_A9
block|,
name|ASM_FMT_A10
block|,
name|ASM_FMT_B
init|=
literal|0x0200
block|,
name|ASM_FMT_B1
block|,
name|ASM_FMT_B2
block|,
name|ASM_FMT_B3
block|,
name|ASM_FMT_B4
block|,
name|ASM_FMT_B5
block|,
name|ASM_FMT_B6
block|,
name|ASM_FMT_B7
block|,
name|ASM_FMT_B8
block|,
name|ASM_FMT_B9
block|,
name|ASM_FMT_F
init|=
literal|0x0300
block|,
name|ASM_FMT_F1
block|,
name|ASM_FMT_F2
block|,
name|ASM_FMT_F3
block|,
name|ASM_FMT_F4
block|,
name|ASM_FMT_F5
block|,
name|ASM_FMT_F6
block|,
name|ASM_FMT_F7
block|,
name|ASM_FMT_F8
block|,
name|ASM_FMT_F9
block|,
name|ASM_FMT_F10
block|,
name|ASM_FMT_F11
block|,
name|ASM_FMT_F12
block|,
name|ASM_FMT_F13
block|,
name|ASM_FMT_F14
block|,
name|ASM_FMT_F15
block|,
name|ASM_FMT_I
init|=
literal|0x0400
block|,
name|ASM_FMT_I1
block|,
name|ASM_FMT_I2
block|,
name|ASM_FMT_I3
block|,
name|ASM_FMT_I4
block|,
name|ASM_FMT_I5
block|,
name|ASM_FMT_I6
block|,
name|ASM_FMT_I7
block|,
name|ASM_FMT_I8
block|,
name|ASM_FMT_I9
block|,
name|ASM_FMT_I10
block|,
name|ASM_FMT_I11
block|,
name|ASM_FMT_I12
block|,
name|ASM_FMT_I13
block|,
name|ASM_FMT_I14
block|,
name|ASM_FMT_I15
block|,
name|ASM_FMT_I16
block|,
name|ASM_FMT_I17
block|,
name|ASM_FMT_I19
block|,
name|ASM_FMT_I20
block|,
name|ASM_FMT_I21
block|,
name|ASM_FMT_I22
block|,
name|ASM_FMT_I23
block|,
name|ASM_FMT_I24
block|,
name|ASM_FMT_I25
block|,
name|ASM_FMT_I26
block|,
name|ASM_FMT_I27
block|,
name|ASM_FMT_I28
block|,
name|ASM_FMT_I29
block|,
name|ASM_FMT_M
init|=
literal|0x0500
block|,
name|ASM_FMT_M1
block|,
name|ASM_FMT_M2
block|,
name|ASM_FMT_M3
block|,
name|ASM_FMT_M4
block|,
name|ASM_FMT_M5
block|,
name|ASM_FMT_M6
block|,
name|ASM_FMT_M7
block|,
name|ASM_FMT_M8
block|,
name|ASM_FMT_M9
block|,
name|ASM_FMT_M10
block|,
name|ASM_FMT_M11
block|,
name|ASM_FMT_M12
block|,
name|ASM_FMT_M13
block|,
name|ASM_FMT_M14
block|,
name|ASM_FMT_M15
block|,
name|ASM_FMT_M16
block|,
name|ASM_FMT_M17
block|,
name|ASM_FMT_M18
block|,
name|ASM_FMT_M19
block|,
name|ASM_FMT_M20
block|,
name|ASM_FMT_M21
block|,
name|ASM_FMT_M22
block|,
name|ASM_FMT_M23
block|,
name|ASM_FMT_M24
block|,
name|ASM_FMT_M25
block|,
name|ASM_FMT_M26
block|,
name|ASM_FMT_M27
block|,
name|ASM_FMT_M28
block|,
name|ASM_FMT_M29
block|,
name|ASM_FMT_M30
block|,
name|ASM_FMT_M31
block|,
name|ASM_FMT_M32
block|,
name|ASM_FMT_M33
block|,
name|ASM_FMT_M34
block|,
name|ASM_FMT_M35
block|,
name|ASM_FMT_M36
block|,
name|ASM_FMT_M37
block|,
name|ASM_FMT_M38
block|,
name|ASM_FMT_M39
block|,
name|ASM_FMT_M40
block|,
name|ASM_FMT_M41
block|,
name|ASM_FMT_M42
block|,
name|ASM_FMT_M43
block|,
name|ASM_FMT_M44
block|,
name|ASM_FMT_M45
block|,
name|ASM_FMT_M46
block|,
name|ASM_FMT_X
init|=
literal|0x0600
block|,
name|ASM_FMT_X1
block|,
name|ASM_FMT_X2
block|,
name|ASM_FMT_X3
block|,
name|ASM_FMT_X4
block|}
enum|;
end_enum

begin_comment
comment|/* Instruction opcodes. */
end_comment

begin_enum
enum|enum
name|asm_op
block|{
name|ASM_OP_NONE
block|,
name|ASM_OP_ADD
block|,
name|ASM_OP_ADDL
block|,
name|ASM_OP_ADDP4
block|,
name|ASM_OP_ADDS
block|,
name|ASM_OP_ALLOC
block|,
name|ASM_OP_AND
block|,
name|ASM_OP_ANDCM
block|,
name|ASM_OP_BR
block|,
name|ASM_OP_BREAK
block|,
name|ASM_OP_BRL
block|,
name|ASM_OP_BRP
block|,
name|ASM_OP_BSW
block|,
name|ASM_OP_CHK
block|,
name|ASM_OP_CLRRRB
block|,
name|ASM_OP_CMP
block|,
name|ASM_OP_CMP4
block|,
name|ASM_OP_CMP8XCHG16
block|,
name|ASM_OP_CMPXCHG1
block|,
name|ASM_OP_CMPXCHG2
block|,
name|ASM_OP_CMPXCHG4
block|,
name|ASM_OP_CMPXCHG8
block|,
name|ASM_OP_COVER
block|,
name|ASM_OP_CZX1
block|,
name|ASM_OP_CZX2
block|,
name|ASM_OP_DEP
block|,
name|ASM_OP_EPC
block|,
name|ASM_OP_EXTR
block|,
name|ASM_OP_FAMAX
block|,
name|ASM_OP_FAMIN
block|,
name|ASM_OP_FAND
block|,
name|ASM_OP_FANDCM
block|,
name|ASM_OP_FC
block|,
name|ASM_OP_FCHKF
block|,
name|ASM_OP_FCLASS
block|,
name|ASM_OP_FCLRF
block|,
name|ASM_OP_FCMP
block|,
name|ASM_OP_FCVT
block|,
name|ASM_OP_FETCHADD4
block|,
name|ASM_OP_FETCHADD8
block|,
name|ASM_OP_FLUSHRS
block|,
name|ASM_OP_FMA
block|,
name|ASM_OP_FMAX
block|,
name|ASM_OP_FMERGE
block|,
name|ASM_OP_FMIN
block|,
name|ASM_OP_FMIX
block|,
name|ASM_OP_FMS
block|,
name|ASM_OP_FNMA
block|,
name|ASM_OP_FOR
block|,
name|ASM_OP_FPACK
block|,
name|ASM_OP_FPAMAX
block|,
name|ASM_OP_FPAMIN
block|,
name|ASM_OP_FPCMP
block|,
name|ASM_OP_FPCVT
block|,
name|ASM_OP_FPMA
block|,
name|ASM_OP_FPMAX
block|,
name|ASM_OP_FPMERGE
block|,
name|ASM_OP_FPMIN
block|,
name|ASM_OP_FPMS
block|,
name|ASM_OP_FPNMA
block|,
name|ASM_OP_FPRCPA
block|,
name|ASM_OP_FPRSQRTA
block|,
name|ASM_OP_FRCPA
block|,
name|ASM_OP_FRSQRTA
block|,
name|ASM_OP_FSELECT
block|,
name|ASM_OP_FSETC
block|,
name|ASM_OP_FSWAP
block|,
name|ASM_OP_FSXT
block|,
name|ASM_OP_FWB
block|,
name|ASM_OP_FXOR
block|,
name|ASM_OP_GETF
block|,
name|ASM_OP_INVALA
block|,
name|ASM_OP_ITC
block|,
name|ASM_OP_ITR
block|,
name|ASM_OP_LD1
block|,
name|ASM_OP_LD16
block|,
name|ASM_OP_LD2
block|,
name|ASM_OP_LD4
block|,
name|ASM_OP_LD8
block|,
name|ASM_OP_LDF
block|,
name|ASM_OP_LDF8
block|,
name|ASM_OP_LDFD
block|,
name|ASM_OP_LDFE
block|,
name|ASM_OP_LDFP8
block|,
name|ASM_OP_LDFPD
block|,
name|ASM_OP_LDFPS
block|,
name|ASM_OP_LDFS
block|,
name|ASM_OP_LFETCH
block|,
name|ASM_OP_LOADRS
block|,
name|ASM_OP_MF
block|,
name|ASM_OP_MIX1
block|,
name|ASM_OP_MIX2
block|,
name|ASM_OP_MIX4
block|,
name|ASM_OP_MOV
block|,
name|ASM_OP_MOVL
block|,
name|ASM_OP_MUX1
block|,
name|ASM_OP_MUX2
block|,
name|ASM_OP_NOP
block|,
name|ASM_OP_OR
block|,
name|ASM_OP_PACK2
block|,
name|ASM_OP_PACK4
block|,
name|ASM_OP_PADD1
block|,
name|ASM_OP_PADD2
block|,
name|ASM_OP_PADD4
block|,
name|ASM_OP_PAVG1
block|,
name|ASM_OP_PAVG2
block|,
name|ASM_OP_PAVGSUB1
block|,
name|ASM_OP_PAVGSUB2
block|,
name|ASM_OP_PCMP1
block|,
name|ASM_OP_PCMP2
block|,
name|ASM_OP_PCMP4
block|,
name|ASM_OP_PMAX1
block|,
name|ASM_OP_PMAX2
block|,
name|ASM_OP_PMIN1
block|,
name|ASM_OP_PMIN2
block|,
name|ASM_OP_PMPY2
block|,
name|ASM_OP_PMPYSHR2
block|,
name|ASM_OP_POPCNT
block|,
name|ASM_OP_PROBE
block|,
name|ASM_OP_PSAD1
block|,
name|ASM_OP_PSHL2
block|,
name|ASM_OP_PSHL4
block|,
name|ASM_OP_PSHLADD2
block|,
name|ASM_OP_PSHR2
block|,
name|ASM_OP_PSHR4
block|,
name|ASM_OP_PSHRADD2
block|,
name|ASM_OP_PSUB1
block|,
name|ASM_OP_PSUB2
block|,
name|ASM_OP_PSUB4
block|,
name|ASM_OP_PTC
block|,
name|ASM_OP_PTR
block|,
name|ASM_OP_RFI
block|,
name|ASM_OP_RSM
block|,
name|ASM_OP_RUM
block|,
name|ASM_OP_SETF
block|,
name|ASM_OP_SHL
block|,
name|ASM_OP_SHLADD
block|,
name|ASM_OP_SHLADDP4
block|,
name|ASM_OP_SHR
block|,
name|ASM_OP_SHRP
block|,
name|ASM_OP_SRLZ
block|,
name|ASM_OP_SSM
block|,
name|ASM_OP_ST1
block|,
name|ASM_OP_ST16
block|,
name|ASM_OP_ST2
block|,
name|ASM_OP_ST4
block|,
name|ASM_OP_ST8
block|,
name|ASM_OP_STF
block|,
name|ASM_OP_STF8
block|,
name|ASM_OP_STFD
block|,
name|ASM_OP_STFE
block|,
name|ASM_OP_STFS
block|,
name|ASM_OP_SUB
block|,
name|ASM_OP_SUM
block|,
name|ASM_OP_SXT1
block|,
name|ASM_OP_SXT2
block|,
name|ASM_OP_SXT4
block|,
name|ASM_OP_SYNC
block|,
name|ASM_OP_TAK
block|,
name|ASM_OP_TBIT
block|,
name|ASM_OP_THASH
block|,
name|ASM_OP_TNAT
block|,
name|ASM_OP_TPA
block|,
name|ASM_OP_TTAG
block|,
name|ASM_OP_UNPACK1
block|,
name|ASM_OP_UNPACK2
block|,
name|ASM_OP_UNPACK4
block|,
name|ASM_OP_XCHG1
block|,
name|ASM_OP_XCHG2
block|,
name|ASM_OP_XCHG4
block|,
name|ASM_OP_XCHG8
block|,
name|ASM_OP_XMA
block|,
name|ASM_OP_XOR
block|,
name|ASM_OP_ZXT1
block|,
name|ASM_OP_ZXT2
block|,
name|ASM_OP_ZXT4
block|,
comment|/* Additional opcodes used only internally. */
name|ASM_ADDITIONAL_OPCODES
block|}
enum|;
end_enum

begin_comment
comment|/* Instruction. */
end_comment

begin_struct
struct|struct
name|asm_inst
block|{
name|uint64_t
name|i_bits
decl_stmt|;
name|struct
name|asm_oper
name|i_oper
index|[
literal|7
index|]
decl_stmt|;
name|struct
name|asm_cmpltr
name|i_cmpltr
index|[
literal|5
index|]
decl_stmt|;
name|enum
name|asm_fmt
name|i_format
decl_stmt|;
name|enum
name|asm_op
name|i_op
decl_stmt|;
name|int
name|i_ncmpltrs
decl_stmt|;
name|int
name|i_srcidx
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|asm_bundle
block|{
specifier|const
name|char
modifier|*
name|b_templ
decl_stmt|;
name|struct
name|asm_inst
name|b_inst
index|[
literal|3
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Functional units. */
end_comment

begin_enum
enum|enum
name|asm_unit
block|{
name|ASM_UNIT_NONE
block|,
name|ASM_UNIT_A
init|=
literal|0x0100
block|,
comment|/* A unit. */
name|ASM_UNIT_B
init|=
literal|0x0200
block|,
comment|/* B unit. */
name|ASM_UNIT_F
init|=
literal|0x0300
block|,
comment|/* F unit. */
name|ASM_UNIT_I
init|=
literal|0x0400
block|,
comment|/* I unit. */
name|ASM_UNIT_M
init|=
literal|0x0500
block|,
comment|/* M unit. */
name|ASM_UNIT_X
init|=
literal|0x0600
comment|/* X unit. */
block|}
enum|;
end_enum

begin_ifdef
ifdef|#
directive|ifdef
name|_DISASM_INT_H_
end_ifdef

begin_function_decl
name|int
name|asm_extract
parameter_list|(
name|enum
name|asm_op
parameter_list|,
name|enum
name|asm_fmt
parameter_list|,
name|uint64_t
parameter_list|,
name|struct
name|asm_bundle
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|asm_decode
parameter_list|(
name|uint64_t
parameter_list|,
name|struct
name|asm_bundle
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|asm_completer
parameter_list|(
specifier|const
name|struct
name|asm_cmpltr
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|asm_mnemonic
parameter_list|(
specifier|const
name|enum
name|asm_op
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|asm_operand
parameter_list|(
specifier|const
name|struct
name|asm_oper
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|asm_print_bundle
parameter_list|(
specifier|const
name|struct
name|asm_bundle
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|asm_print_inst
parameter_list|(
specifier|const
name|struct
name|asm_bundle
modifier|*
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DISASM_H_ */
end_comment

end_unit

