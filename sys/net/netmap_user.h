begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011-2014 Universita` di Pisa. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   1. Redistributions of source code must retain the above copyright  *      notice, this list of conditions and the following disclaimer.  *   2. Redistributions in binary form must reproduce the above copyright  *      notice, this list of conditions and the following disclaimer in the  *      documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  *  * Functions and macros to manipulate netmap structures and packets  * in userspace. See netmap(4) for more information.  *  * The address of the struct netmap_if, say nifp, is computed from the  * value returned from ioctl(.., NIOCREG, ...) and the mmap region:  *	ioctl(fd, NIOCREG,&req);  *	mem = mmap(0, ... );  *	nifp = NETMAP_IF(mem, req.nr_nifp);  *		(so simple, we could just do it manually)  *  * From there:  *	struct netmap_ring *NETMAP_TXRING(nifp, index)  *	struct netmap_ring *NETMAP_RXRING(nifp, index)  *		we can access ring->nr_cur, ring->nr_avail, ring->nr_flags  *  *	ring->slot[i] gives us the i-th slot (we can access  *		directly len, flags, buf_idx)  *  *	char *buf = NETMAP_BUF(ring, x) returns a pointer to  *		the buffer numbered x  *  * All ring indexes (head, cur, tail) should always move forward.  * To compute the next index in a circular ring you can use  *	i = nm_ring_next(ring, i);  *  * To ease porting apps from pcap to netmap we supply a few fuctions  * that can be called to open, close, read and write on netmap in a way  * similar to libpcap. Note that the read/write function depend on  * an ioctl()/select()/poll() being issued to refill rings or push  * packets out.  *  * In order to use these, include #define NETMAP_WITH_LIBS  * in the source file that invokes these functions.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET_NETMAP_USER_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET_NETMAP_USER_H_
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_comment
comment|/* apple needs sockaddr */
end_comment

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_comment
comment|/* IFNAMSIZ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|likely
end_ifndef

begin_define
define|#
directive|define
name|likely
parameter_list|(
name|x
parameter_list|)
value|__builtin_expect(!!(x), 1)
end_define

begin_define
define|#
directive|define
name|unlikely
parameter_list|(
name|x
parameter_list|)
value|__builtin_expect(!!(x), 0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* likely and unlikely */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_comment
comment|/* helper macro */
end_comment

begin_define
define|#
directive|define
name|_NETMAP_OFFSET
parameter_list|(
name|type
parameter_list|,
name|ptr
parameter_list|,
name|offset
parameter_list|)
define|\
value|((type)(void *)((char *)(ptr) + (offset)))
end_define

begin_define
define|#
directive|define
name|NETMAP_IF
parameter_list|(
name|_base
parameter_list|,
name|_ofs
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_if *, _base, _ofs)
end_define

begin_define
define|#
directive|define
name|NETMAP_TXRING
parameter_list|(
name|nifp
parameter_list|,
name|index
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_ring *, \ 	nifp, (nifp)->ring_ofs[index] )
end_define

begin_define
define|#
directive|define
name|NETMAP_RXRING
parameter_list|(
name|nifp
parameter_list|,
name|index
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_ring *,	\ 	nifp, (nifp)->ring_ofs[index + (nifp)->ni_tx_rings + 1] )
end_define

begin_define
define|#
directive|define
name|NETMAP_BUF
parameter_list|(
name|ring
parameter_list|,
name|index
parameter_list|)
define|\
value|((char *)(ring) + (ring)->buf_ofs + ((index)*(ring)->nr_buf_size))
end_define

begin_define
define|#
directive|define
name|NETMAP_BUF_IDX
parameter_list|(
name|ring
parameter_list|,
name|buf
parameter_list|)
define|\
value|( ((char *)(buf) - ((char *)(ring) + (ring)->buf_ofs) ) / \ 		(ring)->nr_buf_size )
end_define

begin_function
specifier|static
specifier|inline
name|uint32_t
name|nm_ring_next
parameter_list|(
name|struct
name|netmap_ring
modifier|*
name|r
parameter_list|,
name|uint32_t
name|i
parameter_list|)
block|{
return|return
operator|(
name|unlikely
argument_list|(
name|i
operator|+
literal|1
operator|==
name|r
operator|->
name|num_slots
argument_list|)
condition|?
literal|0
else|:
name|i
operator|+
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Return 1 if we have pending transmissions in the tx ring.  * When everything is complete ring->head = ring->tail + 1 (modulo ring size)  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|nm_tx_pending
parameter_list|(
name|struct
name|netmap_ring
modifier|*
name|r
parameter_list|)
block|{
return|return
name|nm_ring_next
argument_list|(
name|r
argument_list|,
name|r
operator|->
name|tail
argument_list|)
operator|!=
name|r
operator|->
name|head
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|nm_ring_space
parameter_list|(
name|struct
name|netmap_ring
modifier|*
name|ring
parameter_list|)
block|{
name|int
name|ret
init|=
name|ring
operator|->
name|tail
operator|-
name|ring
operator|->
name|cur
decl_stmt|;
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
name|ret
operator|+=
name|ring
operator|->
name|num_slots
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|NETMAP_WITH_LIBS
end_ifdef

begin_comment
comment|/*  * Support for simple I/O libraries.  * Include other system headers required for compiling this.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_NETMAP_WITH_LIBS
end_ifndef

begin_define
define|#
directive|define
name|HAVE_NETMAP_WITH_LIBS
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/mman.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_comment
comment|/* memset */
end_comment

begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/errno.h>
end_include

begin_comment
comment|/* EINVAL */
end_comment

begin_include
include|#
directive|include
file|<fcntl.h>
end_include

begin_comment
comment|/* O_RDWR */
end_comment

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_comment
comment|/* close() */
end_comment

begin_include
include|#
directive|include
file|<signal.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|ND
end_ifndef

begin_comment
comment|/* debug macros */
end_comment

begin_comment
comment|/* debug support */
end_comment

begin_define
define|#
directive|define
name|ND
parameter_list|(
name|_fmt
parameter_list|,
modifier|...
parameter_list|)
value|do {} while(0)
end_define

begin_define
define|#
directive|define
name|D
parameter_list|(
name|_fmt
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {							\ 		struct timeval t0;				\ 		gettimeofday(&t0, NULL);			\ 		fprintf(stderr, "%03d.%06d %s [%d] " _fmt "\n",	\ 		    (int)(t0.tv_sec % 1000), (int)t0.tv_usec,	\ 		    __FUNCTION__, __LINE__, ##__VA_ARGS__);	\         } while (0)
end_define

begin_comment
comment|/* Rate limited version of "D", lps indicates how many per second */
end_comment

begin_define
define|#
directive|define
name|RD
parameter_list|(
name|lps
parameter_list|,
name|format
parameter_list|,
modifier|...
parameter_list|)
define|\
value|do {                                                        \         static int t0, __cnt;                                   \         struct timeval __xxts;                                  \         gettimeofday(&__xxts, NULL);                            \         if (t0 != __xxts.tv_sec) {                              \             t0 = __xxts.tv_sec;                                 \             __cnt = 0;                                          \         }                                                       \         if (__cnt++< lps) {                                    \             D(format, ##__VA_ARGS__);                           \         }                                                       \     } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|nm_pkthdr
block|{
comment|/* same as pcap_pkthdr */
name|struct
name|timeval
name|ts
decl_stmt|;
name|uint32_t
name|caplen
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nm_stat
block|{
comment|/* same as pcap_stat	*/
name|u_int
name|ps_recv
decl_stmt|;
name|u_int
name|ps_drop
decl_stmt|;
name|u_int
name|ps_ifdrop
decl_stmt|;
ifdef|#
directive|ifdef
name|WIN32
name|u_int
name|bs_capt
decl_stmt|;
endif|#
directive|endif
comment|/* WIN32 */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NM_ERRBUF_SIZE
value|512
end_define

begin_struct
struct|struct
name|nm_desc
block|{
name|struct
name|nm_desc
modifier|*
name|self
decl_stmt|;
comment|/* point to self if netmap. */
name|int
name|fd
decl_stmt|;
name|void
modifier|*
name|mem
decl_stmt|;
name|uint32_t
name|memsize
decl_stmt|;
name|int
name|done_mmap
decl_stmt|;
comment|/* set if mem is the result of mmap */
name|struct
name|netmap_if
modifier|*
specifier|const
name|nifp
decl_stmt|;
name|uint16_t
name|first_tx_ring
decl_stmt|,
name|last_tx_ring
decl_stmt|,
name|cur_tx_ring
decl_stmt|;
name|uint16_t
name|first_rx_ring
decl_stmt|,
name|last_rx_ring
decl_stmt|,
name|cur_rx_ring
decl_stmt|;
name|struct
name|nmreq
name|req
decl_stmt|;
comment|/* also contains the nr_name = ifname */
name|struct
name|nm_pkthdr
name|hdr
decl_stmt|;
comment|/* 	 * The memory contains netmap_if, rings and then buffers. 	 * Given a pointer (e.g. to nm_inject) we can compare with 	 * mem/buf_start/buf_end to tell if it is a buffer or 	 * some other descriptor in our region. 	 * We also store a pointer to some ring as it helps in the 	 * translation from buffer indexes to addresses. 	 */
name|struct
name|netmap_ring
modifier|*
specifier|const
name|some_ring
decl_stmt|;
name|void
modifier|*
specifier|const
name|buf_start
decl_stmt|;
name|void
modifier|*
specifier|const
name|buf_end
decl_stmt|;
comment|/* parameters from pcap_open_live */
name|int
name|snaplen
decl_stmt|;
name|int
name|promisc
decl_stmt|;
name|int
name|to_ms
decl_stmt|;
name|char
modifier|*
name|errbuf
decl_stmt|;
comment|/* save flags so we can restore them on close */
name|uint32_t
name|if_flags
decl_stmt|;
name|uint32_t
name|if_reqcap
decl_stmt|;
name|uint32_t
name|if_curcap
decl_stmt|;
name|struct
name|nm_stat
name|st
decl_stmt|;
name|char
name|msg
index|[
name|NM_ERRBUF_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * when the descriptor is open correctly, d->self == d  * Eventually we should also use some magic number.  */
end_comment

begin_define
define|#
directive|define
name|P2NMD
parameter_list|(
name|p
parameter_list|)
value|((struct nm_desc *)(p))
end_define

begin_define
define|#
directive|define
name|IS_NETMAP_DESC
parameter_list|(
name|d
parameter_list|)
value|((d)&& P2NMD(d)->self == P2NMD(d))
end_define

begin_define
define|#
directive|define
name|NETMAP_FD
parameter_list|(
name|d
parameter_list|)
value|(P2NMD(d)->fd)
end_define

begin_comment
comment|/*  * this is a slightly optimized copy routine which rounds  * to multiple of 64 bytes and is often faster than dealing  * with other odd sizes. We assume there is enough room  * in the source and destination buffers.  *  * XXX only for multiples of 64 bytes, non overlapped.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|nm_pkt_copy
parameter_list|(
specifier|const
name|void
modifier|*
name|_src
parameter_list|,
name|void
modifier|*
name|_dst
parameter_list|,
name|int
name|l
parameter_list|)
block|{
specifier|const
name|uint64_t
modifier|*
name|src
init|=
operator|(
specifier|const
name|uint64_t
operator|*
operator|)
name|_src
decl_stmt|;
name|uint64_t
modifier|*
name|dst
init|=
operator|(
name|uint64_t
operator|*
operator|)
name|_dst
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|l
operator|>=
literal|1024
argument_list|)
condition|)
block|{
name|memcpy
argument_list|(
name|dst
argument_list|,
name|src
argument_list|,
name|l
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
init|;
name|likely
argument_list|(
name|l
operator|>
literal|0
argument_list|)
condition|;
name|l
operator|-=
literal|64
control|)
block|{
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|*
name|src
operator|++
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * The callback, invoked on each received packet. Same as libpcap  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|nm_cb_t
function_decl|)
parameter_list|(
name|u_char
modifier|*
parameter_list|,
specifier|const
name|struct
name|nm_pkthdr
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
name|d
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  *--- the pcap-like API ---  *  * nm_open() opens a file descriptor, binds to a port and maps memory.  *  * ifname	(netmap:foo or vale:foo) is the port name  *		a suffix can indicate the follwing:  *		^		bind the host (sw) ring pair  *		*		bind host and NIC ring pairs (transparent)  *		-NN		bind individual NIC ring pair  *		{NN		bind master side of pipe NN  *		}NN		bind slave side of pipe NN  *  * req		provides the initial values of nmreq before parsing ifname.  *		Remember that the ifname parsing will override the ring  *		number in nm_ringid, and part of nm_flags;  * flags	special functions, normally 0  *		indicates which fields of *arg are significant  * arg		special functions, normally NULL  *		if passed a netmap_desc with mem != NULL,  *		use that memory instead of mmap.  */
end_comment

begin_function_decl
specifier|static
name|struct
name|nm_desc
modifier|*
name|nm_open
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|struct
name|nmreq
modifier|*
name|req
parameter_list|,
name|uint64_t
name|flags
parameter_list|,
specifier|const
name|struct
name|nm_desc
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * nm_open can import some fields from the parent descriptor.  * These flags control which ones.  * Also in flags you can specify NETMAP_NO_TX_POLL and NETMAP_DO_RX_POLL,  * which set the initial value for these flags.  * Note that the 16 low bits of the flags are reserved for data  * that may go into the nmreq.  */
end_comment

begin_enum
enum|enum
block|{
name|NM_OPEN_NO_MMAP
init|=
literal|0x040000
block|,
comment|/* reuse mmap from parent */
name|NM_OPEN_IFNAME
init|=
literal|0x080000
block|,
comment|/* nr_name, nr_ringid, nr_flags */
name|NM_OPEN_ARG1
init|=
literal|0x100000
block|,
name|NM_OPEN_ARG2
init|=
literal|0x200000
block|,
name|NM_OPEN_ARG3
init|=
literal|0x400000
block|,
name|NM_OPEN_RING_CFG
init|=
literal|0x800000
block|,
comment|/* tx|rx rings|slots */
block|}
enum|;
end_enum

begin_comment
comment|/*  * nm_close()	closes and restores the port to its previous state  */
end_comment

begin_function_decl
specifier|static
name|int
name|nm_close
parameter_list|(
name|struct
name|nm_desc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * nm_inject() is the same as pcap_inject()  * nm_dispatch() is the same as pcap_dispatch()  * nm_nextpkt() is the same as pcap_next()  */
end_comment

begin_function_decl
specifier|static
name|int
name|nm_inject
parameter_list|(
name|struct
name|nm_desc
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|nm_dispatch
parameter_list|(
name|struct
name|nm_desc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|nm_cb_t
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|u_char
modifier|*
name|nm_nextpkt
parameter_list|(
name|struct
name|nm_desc
modifier|*
parameter_list|,
name|struct
name|nm_pkthdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Try to open, return descriptor if successful, NULL otherwise.  * An invalid netmap name will return errno = 0;  * You can pass a pointer to a pre-filled nm_desc to add special  * parameters. Flags is used as follows  * NM_OPEN_NO_MMAP	use the memory from arg, only  *			if the nr_arg2 (memory block) matches.  * NM_OPEN_ARG1		use req.nr_arg1 from arg  * NM_OPEN_ARG2		use req.nr_arg2 from arg  * NM_OPEN_RING_CFG	user ring config from arg  */
end_comment

begin_function
specifier|static
name|struct
name|nm_desc
modifier|*
name|nm_open
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|struct
name|nmreq
modifier|*
name|req
parameter_list|,
name|uint64_t
name|new_flags
parameter_list|,
specifier|const
name|struct
name|nm_desc
modifier|*
name|arg
parameter_list|)
block|{
name|struct
name|nm_desc
modifier|*
name|d
init|=
name|NULL
decl_stmt|;
specifier|const
name|struct
name|nm_desc
modifier|*
name|parent
init|=
name|arg
decl_stmt|;
name|u_int
name|namelen
decl_stmt|;
name|uint32_t
name|nr_ringid
init|=
literal|0
decl_stmt|,
name|nr_flags
decl_stmt|;
specifier|const
name|char
modifier|*
name|port
init|=
name|NULL
decl_stmt|;
specifier|const
name|char
modifier|*
name|errmsg
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|strncmp
argument_list|(
name|ifname
argument_list|,
literal|"netmap:"
argument_list|,
literal|7
argument_list|)
operator|&&
name|strncmp
argument_list|(
name|ifname
argument_list|,
literal|"vale"
argument_list|,
literal|4
argument_list|)
condition|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
comment|/* name not recognised, not an error */
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|ifname
index|[
literal|0
index|]
operator|==
literal|'n'
condition|)
name|ifname
operator|+=
literal|7
expr_stmt|;
comment|/* scan for a separator */
for|for
control|(
name|port
operator|=
name|ifname
init|;
operator|*
name|port
operator|&&
operator|!
name|index
argument_list|(
literal|"-*^{}"
argument_list|,
operator|*
name|port
argument_list|)
condition|;
name|port
operator|++
control|)
empty_stmt|;
name|namelen
operator|=
name|port
operator|-
name|ifname
expr_stmt|;
if|if
condition|(
name|namelen
operator|>=
sizeof|sizeof
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|)
condition|)
block|{
name|errmsg
operator|=
literal|"name too long"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
switch|switch
condition|(
operator|*
name|port
condition|)
block|{
default|default:
comment|/* '\0', no suffix */
name|nr_flags
operator|=
name|NR_REG_ALL_NIC
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
comment|/* one NIC */
name|nr_flags
operator|=
name|NR_REG_ONE_NIC
expr_stmt|;
name|nr_ringid
operator|=
name|atoi
argument_list|(
name|port
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
comment|/* NIC and SW, ignore port */
name|nr_flags
operator|=
name|NR_REG_NIC_SW
expr_stmt|;
if|if
condition|(
name|port
index|[
literal|1
index|]
condition|)
block|{
name|errmsg
operator|=
literal|"invalid port for nic+sw"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
break|break;
case|case
literal|'^'
case|:
comment|/* only sw ring */
name|nr_flags
operator|=
name|NR_REG_SW
expr_stmt|;
if|if
condition|(
name|port
index|[
literal|1
index|]
condition|)
block|{
name|errmsg
operator|=
literal|"invalid port for sw ring"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
break|break;
case|case
literal|'{'
case|:
name|nr_flags
operator|=
name|NR_REG_PIPE_MASTER
expr_stmt|;
name|nr_ringid
operator|=
name|atoi
argument_list|(
name|port
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|nr_flags
operator|=
name|NR_REG_PIPE_SLAVE
expr_stmt|;
name|nr_ringid
operator|=
name|atoi
argument_list|(
name|port
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|nr_ringid
operator|>=
name|NETMAP_RING_MASK
condition|)
block|{
name|errmsg
operator|=
literal|"invalid ringid"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
name|d
operator|=
operator|(
expr|struct
name|nm_desc
operator|*
operator|)
name|calloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|d
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|NULL
condition|)
block|{
name|errmsg
operator|=
literal|"nm_desc alloc failure"
expr_stmt|;
name|errno
operator|=
name|ENOMEM
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|d
operator|->
name|self
operator|=
name|d
expr_stmt|;
comment|/* set this early so nm_close() works */
name|d
operator|->
name|fd
operator|=
name|open
argument_list|(
literal|"/dev/netmap"
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|<
literal|0
condition|)
block|{
name|errmsg
operator|=
literal|"cannot open /dev/netmap"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
if|if
condition|(
name|req
condition|)
name|d
operator|->
name|req
operator|=
operator|*
name|req
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_version
operator|=
name|NETMAP_API
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|&=
operator|~
name|NETMAP_RING_MASK
expr_stmt|;
comment|/* these fields are overridden by ifname and flags processing */
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator||=
name|nr_ringid
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_flags
operator|=
name|nr_flags
expr_stmt|;
name|memcpy
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|,
name|ifname
argument_list|,
name|namelen
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_name
index|[
name|namelen
index|]
operator|=
literal|'\0'
expr_stmt|;
comment|/* optionally import info from parent */
if|if
condition|(
name|IS_NETMAP_DESC
argument_list|(
name|parent
argument_list|)
operator|&&
name|new_flags
condition|)
block|{
if|if
condition|(
name|new_flags
operator|&
name|NM_OPEN_ARG1
condition|)
name|D
argument_list|(
literal|"overriding ARG1 %d"
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_arg1
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_arg1
operator|=
name|new_flags
operator|&
name|NM_OPEN_ARG1
condition|?
name|parent
operator|->
name|req
operator|.
name|nr_arg1
else|:
literal|4
expr_stmt|;
if|if
condition|(
name|new_flags
operator|&
name|NM_OPEN_ARG2
condition|)
name|D
argument_list|(
literal|"overriding ARG2 %d"
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_arg2
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_arg2
operator|=
name|new_flags
operator|&
name|NM_OPEN_ARG2
condition|?
name|parent
operator|->
name|req
operator|.
name|nr_arg2
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|new_flags
operator|&
name|NM_OPEN_ARG3
condition|)
name|D
argument_list|(
literal|"overriding ARG3 %d"
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_arg3
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_arg3
operator|=
name|new_flags
operator|&
name|NM_OPEN_ARG3
condition|?
name|parent
operator|->
name|req
operator|.
name|nr_arg3
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|new_flags
operator|&
name|NM_OPEN_RING_CFG
condition|)
block|{
name|D
argument_list|(
literal|"overriding RING_CFG"
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_tx_slots
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_tx_slots
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_rx_slots
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_rx_slots
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_tx_rings
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_rx_rings
expr_stmt|;
block|}
if|if
condition|(
name|new_flags
operator|&
name|NM_OPEN_IFNAME
condition|)
block|{
name|D
argument_list|(
literal|"overriding ifname %s ringid 0x%x flags 0x%x"
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_name
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_ringid
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_flags
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|,
name|parent
operator|->
name|req
operator|.
name|nr_name
argument_list|,
sizeof|sizeof
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_ringid
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_flags
operator|=
name|parent
operator|->
name|req
operator|.
name|nr_flags
expr_stmt|;
block|}
block|}
comment|/* add the *XPOLL flags */
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator||=
name|new_flags
operator|&
operator|(
name|NETMAP_NO_TX_POLL
operator||
name|NETMAP_DO_RX_POLL
operator|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|NIOCREGIF
argument_list|,
operator|&
name|d
operator|->
name|req
argument_list|)
condition|)
block|{
name|errmsg
operator|=
literal|"NIOCREGIF failed"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
if|if
condition|(
name|IS_NETMAP_DESC
argument_list|(
name|parent
argument_list|)
operator|&&
name|parent
operator|->
name|mem
operator|&&
name|parent
operator|->
name|req
operator|.
name|nr_arg2
operator|==
name|d
operator|->
name|req
operator|.
name|nr_arg2
condition|)
block|{
comment|/* do not mmap, inherit from parent */
name|d
operator|->
name|memsize
operator|=
name|parent
operator|->
name|memsize
expr_stmt|;
name|d
operator|->
name|mem
operator|=
name|parent
operator|->
name|mem
expr_stmt|;
block|}
else|else
block|{
comment|/* XXX TODO: check if memsize is too large (or there is overflow) */
name|d
operator|->
name|memsize
operator|=
name|d
operator|->
name|req
operator|.
name|nr_memsize
expr_stmt|;
name|d
operator|->
name|mem
operator|=
name|mmap
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|memsize
argument_list|,
name|PROT_WRITE
operator||
name|PROT_READ
argument_list|,
name|MAP_SHARED
argument_list|,
name|d
operator|->
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mem
operator|==
name|MAP_FAILED
condition|)
block|{
name|errmsg
operator|=
literal|"mmap failed"
expr_stmt|;
goto|goto
name|fail
goto|;
block|}
name|d
operator|->
name|done_mmap
operator|=
literal|1
expr_stmt|;
block|}
block|{
name|struct
name|netmap_if
modifier|*
name|nifp
init|=
name|NETMAP_IF
argument_list|(
name|d
operator|->
name|mem
argument_list|,
name|d
operator|->
name|req
operator|.
name|nr_offset
argument_list|)
decl_stmt|;
name|struct
name|netmap_ring
modifier|*
name|r
init|=
name|NETMAP_RXRING
argument_list|(
name|nifp
argument_list|, )
decl_stmt|;
operator|*
operator|(
expr|struct
name|netmap_if
operator|*
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
operator|&
operator|(
name|d
operator|->
name|nifp
operator|)
operator|=
name|nifp
expr_stmt|;
operator|*
operator|(
expr|struct
name|netmap_ring
operator|*
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
operator|&
name|d
operator|->
name|some_ring
operator|=
name|r
expr_stmt|;
operator|*
operator|(
name|void
operator|*
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
operator|&
name|d
operator|->
name|buf_start
operator|=
name|NETMAP_BUF
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|*
operator|(
name|void
operator|*
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
operator|&
name|d
operator|->
name|buf_end
operator|=
operator|(
name|char
operator|*
operator|)
name|d
operator|->
name|mem
operator|+
name|d
operator|->
name|memsize
expr_stmt|;
block|}
if|if
condition|(
name|nr_flags
operator|==
name|NR_REG_SW
condition|)
block|{
comment|/* host stack */
name|d
operator|->
name|first_tx_ring
operator|=
name|d
operator|->
name|last_tx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
expr_stmt|;
name|d
operator|->
name|first_rx_ring
operator|=
name|d
operator|->
name|last_rx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nr_flags
operator|==
name|NR_REG_ALL_NIC
condition|)
block|{
comment|/* only nic */
name|d
operator|->
name|first_tx_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|first_rx_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|last_tx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
operator|-
literal|1
expr_stmt|;
name|d
operator|->
name|last_rx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nr_flags
operator|==
name|NR_REG_NIC_SW
condition|)
block|{
name|d
operator|->
name|first_tx_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|first_rx_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|last_tx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
expr_stmt|;
name|d
operator|->
name|last_rx_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nr_flags
operator|==
name|NR_REG_ONE_NIC
condition|)
block|{
comment|/* XXX check validity */
name|d
operator|->
name|first_tx_ring
operator|=
name|d
operator|->
name|last_tx_ring
operator|=
name|d
operator|->
name|first_rx_ring
operator|=
name|d
operator|->
name|last_rx_ring
operator|=
name|nr_ringid
expr_stmt|;
block|}
else|else
block|{
comment|/* pipes */
name|d
operator|->
name|first_tx_ring
operator|=
name|d
operator|->
name|last_tx_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|first_rx_ring
operator|=
name|d
operator|->
name|last_rx_ring
operator|=
literal|0
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|DEBUG_NETMAP_USER
block|{
comment|/* debugging code */
name|int
name|i
decl_stmt|;
name|D
argument_list|(
literal|"%s tx %d .. %d %d rx %d .. %d %d"
argument_list|,
name|ifname
argument_list|,
name|d
operator|->
name|first_tx_ring
argument_list|,
name|d
operator|->
name|last_tx_ring
argument_list|,
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
argument_list|,
name|d
operator|->
name|first_rx_ring
argument_list|,
name|d
operator|->
name|last_rx_ring
argument_list|,
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|d
operator|->
name|req
operator|.
name|nr_tx_rings
condition|;
name|i
operator|++
control|)
block|{
name|struct
name|netmap_ring
modifier|*
name|r
init|=
name|NETMAP_TXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|D
argument_list|(
literal|"TX%d %p h %d c %d t %d"
argument_list|,
name|i
argument_list|,
name|r
argument_list|,
name|r
operator|->
name|head
argument_list|,
name|r
operator|->
name|cur
argument_list|,
name|r
operator|->
name|tail
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
condition|;
name|i
operator|++
control|)
block|{
name|struct
name|netmap_ring
modifier|*
name|r
init|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|D
argument_list|(
literal|"RX%d %p h %d c %d t %d"
argument_list|,
name|i
argument_list|,
name|r
argument_list|,
name|r
operator|->
name|head
argument_list|,
name|r
operator|->
name|cur
argument_list|,
name|r
operator|->
name|tail
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|/* debugging */
name|d
operator|->
name|cur_tx_ring
operator|=
name|d
operator|->
name|first_tx_ring
expr_stmt|;
name|d
operator|->
name|cur_rx_ring
operator|=
name|d
operator|->
name|first_rx_ring
expr_stmt|;
return|return
name|d
return|;
name|fail
label|:
name|nm_close
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|errmsg
condition|)
name|D
argument_list|(
literal|"%s %s"
argument_list|,
name|errmsg
argument_list|,
name|ifname
argument_list|)
expr_stmt|;
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|nm_close
parameter_list|(
name|struct
name|nm_desc
modifier|*
name|d
parameter_list|)
block|{
comment|/* 	 * ugly trick to avoid unused warnings 	 */
specifier|static
name|void
modifier|*
name|__xxzt
index|[]
name|__attribute__
argument_list|(
operator|(
name|unused
operator|)
argument_list|)
init|=
block|{
operator|(
name|void
operator|*
operator|)
name|nm_open
block|,
operator|(
name|void
operator|*
operator|)
name|nm_inject
block|,
operator|(
name|void
operator|*
operator|)
name|nm_dispatch
block|,
operator|(
name|void
operator|*
operator|)
name|nm_nextpkt
block|}
decl_stmt|;
if|if
condition|(
name|d
operator|==
name|NULL
operator|||
name|d
operator|->
name|self
operator|!=
name|d
condition|)
return|return
name|EINVAL
return|;
if|if
condition|(
name|d
operator|->
name|done_mmap
operator|&&
name|d
operator|->
name|mem
condition|)
name|munmap
argument_list|(
name|d
operator|->
name|mem
argument_list|,
name|d
operator|->
name|memsize
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|!=
operator|-
literal|1
condition|)
name|close
argument_list|(
name|d
operator|->
name|fd
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|d
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Same prototype as pcap_inject(), only need to cast.  */
end_comment

begin_function
specifier|static
name|int
name|nm_inject
parameter_list|(
name|struct
name|nm_desc
modifier|*
name|d
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|u_int
name|c
decl_stmt|,
name|n
init|=
name|d
operator|->
name|last_tx_ring
operator|-
name|d
operator|->
name|first_tx_ring
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
name|n
condition|;
name|c
operator|++
control|)
block|{
comment|/* compute current ring to use */
name|struct
name|netmap_ring
modifier|*
name|ring
decl_stmt|;
name|uint32_t
name|i
decl_stmt|,
name|idx
decl_stmt|;
name|uint32_t
name|ri
init|=
name|d
operator|->
name|cur_tx_ring
operator|+
name|c
decl_stmt|;
if|if
condition|(
name|ri
operator|>
name|d
operator|->
name|last_tx_ring
condition|)
name|ri
operator|=
name|d
operator|->
name|first_tx_ring
expr_stmt|;
name|ring
operator|=
name|NETMAP_TXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|ri
argument_list|)
expr_stmt|;
if|if
condition|(
name|nm_ring_empty
argument_list|(
name|ring
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|i
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
name|idx
operator|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|buf_idx
expr_stmt|;
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|len
operator|=
name|size
expr_stmt|;
name|nm_pkt_copy
argument_list|(
name|buf
argument_list|,
name|NETMAP_BUF
argument_list|(
name|ring
argument_list|,
name|idx
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|d
operator|->
name|cur_tx_ring
operator|=
name|ri
expr_stmt|;
name|ring
operator|->
name|head
operator|=
name|ring
operator|->
name|cur
operator|=
name|nm_ring_next
argument_list|(
name|ring
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
return|return
literal|0
return|;
comment|/* fail */
block|}
end_function

begin_comment
comment|/*  * Same prototype as pcap_dispatch(), only need to cast.  */
end_comment

begin_function
specifier|static
name|int
name|nm_dispatch
parameter_list|(
name|struct
name|nm_desc
modifier|*
name|d
parameter_list|,
name|int
name|cnt
parameter_list|,
name|nm_cb_t
name|cb
parameter_list|,
name|u_char
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|n
init|=
name|d
operator|->
name|last_rx_ring
operator|-
name|d
operator|->
name|first_rx_ring
operator|+
literal|1
decl_stmt|;
name|int
name|c
decl_stmt|,
name|got
init|=
literal|0
decl_stmt|,
name|ri
init|=
name|d
operator|->
name|cur_rx_ring
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
name|cnt
operator|=
operator|-
literal|1
expr_stmt|;
comment|/* cnt == -1 means infinite, but rings have a finite amount 	 * of buffers and the int is large enough that we never wrap, 	 * so we can omit checking for -1 	 */
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
name|n
operator|&&
name|cnt
operator|!=
name|got
condition|;
name|c
operator|++
control|)
block|{
comment|/* compute current ring to use */
name|struct
name|netmap_ring
modifier|*
name|ring
decl_stmt|;
name|ri
operator|=
name|d
operator|->
name|cur_rx_ring
operator|+
name|c
expr_stmt|;
if|if
condition|(
name|ri
operator|>
name|d
operator|->
name|last_rx_ring
condition|)
name|ri
operator|=
name|d
operator|->
name|first_rx_ring
expr_stmt|;
name|ring
operator|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|ri
argument_list|)
expr_stmt|;
for|for
control|(
init|;
operator|!
name|nm_ring_empty
argument_list|(
name|ring
argument_list|)
operator|&&
name|cnt
operator|!=
name|got
condition|;
name|got
operator|++
control|)
block|{
name|u_int
name|i
init|=
name|ring
operator|->
name|cur
decl_stmt|;
name|u_int
name|idx
init|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|buf_idx
decl_stmt|;
name|u_char
modifier|*
name|buf
init|=
operator|(
name|u_char
operator|*
operator|)
name|NETMAP_BUF
argument_list|(
name|ring
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// __builtin_prefetch(buf);
name|d
operator|->
name|hdr
operator|.
name|len
operator|=
name|d
operator|->
name|hdr
operator|.
name|caplen
operator|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
name|d
operator|->
name|hdr
operator|.
name|ts
operator|=
name|ring
operator|->
name|ts
expr_stmt|;
name|cb
argument_list|(
name|arg
argument_list|,
operator|&
name|d
operator|->
name|hdr
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|ring
operator|->
name|head
operator|=
name|ring
operator|->
name|cur
operator|=
name|nm_ring_next
argument_list|(
name|ring
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|d
operator|->
name|cur_rx_ring
operator|=
name|ri
expr_stmt|;
return|return
name|got
return|;
block|}
end_function

begin_function
specifier|static
name|u_char
modifier|*
name|nm_nextpkt
parameter_list|(
name|struct
name|nm_desc
modifier|*
name|d
parameter_list|,
name|struct
name|nm_pkthdr
modifier|*
name|hdr
parameter_list|)
block|{
name|int
name|ri
init|=
name|d
operator|->
name|cur_rx_ring
decl_stmt|;
do|do
block|{
comment|/* compute current ring to use */
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|ri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|nm_ring_empty
argument_list|(
name|ring
argument_list|)
condition|)
block|{
name|u_int
name|i
init|=
name|ring
operator|->
name|cur
decl_stmt|;
name|u_int
name|idx
init|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|buf_idx
decl_stmt|;
name|u_char
modifier|*
name|buf
init|=
operator|(
name|u_char
operator|*
operator|)
name|NETMAP_BUF
argument_list|(
name|ring
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// __builtin_prefetch(buf);
name|hdr
operator|->
name|ts
operator|=
name|ring
operator|->
name|ts
expr_stmt|;
name|hdr
operator|->
name|len
operator|=
name|hdr
operator|->
name|caplen
operator|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
name|ring
operator|->
name|cur
operator|=
name|nm_ring_next
argument_list|(
name|ring
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|/* we could postpone advancing head if we want 			 * to hold the buffer. This can be supported in 			 * the future. 			 */
name|ring
operator|->
name|head
operator|=
name|ring
operator|->
name|cur
expr_stmt|;
name|d
operator|->
name|cur_rx_ring
operator|=
name|ri
expr_stmt|;
return|return
name|buf
return|;
block|}
name|ri
operator|++
expr_stmt|;
if|if
condition|(
name|ri
operator|>
name|d
operator|->
name|last_rx_ring
condition|)
name|ri
operator|=
name|d
operator|->
name|first_rx_ring
expr_stmt|;
block|}
do|while
condition|(
name|ri
operator|!=
name|d
operator|->
name|cur_rx_ring
condition|)
do|;
return|return
name|NULL
return|;
comment|/* nothing found */
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !HAVE_NETMAP_WITH_LIBS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NETMAP_WITH_LIBS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NET_NETMAP_USER_H_ */
end_comment

end_unit

