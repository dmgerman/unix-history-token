begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2011 Matteo Landi, Luigi Rizzo. All rights reserved.  * Copyright (C) 2013 Universita` di Pisa  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   1. Redistributions of source code must retain the above copyright  *      notice, this list of conditions and the following disclaimer.  *   2. Redistributions in binary form must reproduce the above copyright  *      notice, this list of conditions and the following disclaimer in the  *      documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * $FreeBSD$  *  * This header contains the macros used to manipulate netmap structures  * and packets in userspace. See netmap(4) for more information.  *  * The address of the struct netmap_if, say nifp, is computed from the  * value returned from ioctl(.., NIOCREG, ...) and the mmap region:  *	ioctl(fd, NIOCREG,&req);  *	mem = mmap(0, ... );  *	nifp = NETMAP_IF(mem, req.nr_nifp);  *		(so simple, we could just do it manually)  *  * From there:  *	struct netmap_ring *NETMAP_TXRING(nifp, index)  *	struct netmap_ring *NETMAP_RXRING(nifp, index)  *		we can access ring->nr_cur, ring->nr_avail, ring->nr_flags  *  *	ring->slot[i] gives us the i-th slot (we can access  *		directly plen, flags, bufindex)  *  *	char *buf = NETMAP_BUF(ring, x) returns a pointer to  *		the buffer numbered x  *  * Since rings are circular, we have macros to compute the next index  *	i = NETMAP_RING_NEXT(ring, i);  *  * To ease porting apps from pcap to netmap we supply a few fuctions  * that can be called to open, close and read from netmap in a way  * similar to libpcap.  *  * In order to use these, include #define NETMAP_WITH_LIBS  * in the source file that invokes these functions.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET_NETMAP_USER_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET_NETMAP_USER_H_
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_comment
comment|/* IFNAMSIZ */
end_comment

begin_include
include|#
directive|include
file|<net/netmap.h>
end_include

begin_define
define|#
directive|define
name|_NETMAP_OFFSET
parameter_list|(
name|type
parameter_list|,
name|ptr
parameter_list|,
name|offset
parameter_list|)
define|\
value|((type)(void *)((char *)(ptr) + (offset)))
end_define

begin_define
define|#
directive|define
name|NETMAP_IF
parameter_list|(
name|b
parameter_list|,
name|o
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_if *, b, o)
end_define

begin_define
define|#
directive|define
name|NETMAP_TXRING
parameter_list|(
name|nifp
parameter_list|,
name|index
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_ring *, \ 	nifp, (nifp)->ring_ofs[index] )
end_define

begin_define
define|#
directive|define
name|NETMAP_RXRING
parameter_list|(
name|nifp
parameter_list|,
name|index
parameter_list|)
value|_NETMAP_OFFSET(struct netmap_ring *,	\ 	nifp, (nifp)->ring_ofs[index + (nifp)->ni_tx_rings + 1] )
end_define

begin_define
define|#
directive|define
name|NETMAP_BUF
parameter_list|(
name|ring
parameter_list|,
name|index
parameter_list|)
define|\
value|((char *)(ring) + (ring)->buf_ofs + ((index)*(ring)->nr_buf_size))
end_define

begin_define
define|#
directive|define
name|NETMAP_BUF_IDX
parameter_list|(
name|ring
parameter_list|,
name|buf
parameter_list|)
define|\
value|( ((char *)(buf) - ((char *)(ring) + (ring)->buf_ofs) ) / \ 		(ring)->nr_buf_size )
end_define

begin_define
define|#
directive|define
name|NETMAP_RING_NEXT
parameter_list|(
name|r
parameter_list|,
name|i
parameter_list|)
define|\
value|((i)+1 == (r)->num_slots ? 0 : (i) + 1 )
end_define

begin_define
define|#
directive|define
name|NETMAP_RING_FIRST_RESERVED
parameter_list|(
name|r
parameter_list|)
define|\
value|( (r)->cur< (r)->reserved ?			\ 	  (r)->cur + (r)->num_slots - (r)->reserved :	\ 	  (r)->cur - (r)->reserved )
end_define

begin_comment
comment|/*  * Return 1 if the given tx ring is empty.  */
end_comment

begin_define
define|#
directive|define
name|NETMAP_TX_RING_EMPTY
parameter_list|(
name|r
parameter_list|)
value|((r)->avail>= (r)->num_slots - 1)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|NETMAP_WITH_LIBS
end_ifdef

begin_comment
comment|/*  * Support for simple I/O libraries.  * Include other system headers required for compiling this.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_NETMAP_WITH_LIBS
end_ifndef

begin_define
define|#
directive|define
name|HAVE_NETMAP_WITH_LIBS
end_define

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/mman.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_comment
comment|/* memset */
end_comment

begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/errno.h>
end_include

begin_comment
comment|/* EINVAL */
end_comment

begin_include
include|#
directive|include
file|<fcntl.h>
end_include

begin_comment
comment|/* O_RDWR */
end_comment

begin_include
include|#
directive|include
file|<malloc.h>
end_include

begin_struct
struct|struct
name|nm_hdr_t
block|{
comment|/* same as pcap_pkthdr */
name|struct
name|timeval
name|ts
decl_stmt|;
name|uint32_t
name|caplen
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|nm_desc_t
block|{
name|struct
name|nm_desc_t
modifier|*
name|self
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|void
modifier|*
name|mem
decl_stmt|;
name|int
name|memsize
decl_stmt|;
name|struct
name|netmap_if
modifier|*
name|nifp
decl_stmt|;
name|uint16_t
name|first_ring
decl_stmt|,
name|last_ring
decl_stmt|,
name|cur_ring
decl_stmt|;
name|struct
name|nmreq
name|req
decl_stmt|;
name|struct
name|nm_hdr_t
name|hdr
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * when the descriptor is open correctly, d->self == d  */
end_comment

begin_define
define|#
directive|define
name|P2NMD
parameter_list|(
name|p
parameter_list|)
value|((struct nm_desc_t *)(p))
end_define

begin_define
define|#
directive|define
name|IS_NETMAP_DESC
parameter_list|(
name|d
parameter_list|)
value|(P2NMD(d)->self == P2NMD(d))
end_define

begin_define
define|#
directive|define
name|NETMAP_FD
parameter_list|(
name|d
parameter_list|)
value|(P2NMD(d)->fd)
end_define

begin_comment
comment|/*  * The callback, invoked on each received packet. Same as libpcap  */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|nm_cb_t
function_decl|)
parameter_list|(
name|u_char
modifier|*
parameter_list|,
specifier|const
name|struct
name|nm_hdr_t
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
name|d
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * The open routine accepts an ifname (netmap:foo or vale:foo) and  * optionally a second (string) argument indicating the ring number  * to open. If successful, t opens the fd and maps the memory.  */
end_comment

begin_function_decl
specifier|static
name|struct
name|nm_desc_t
modifier|*
name|nm_open
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|char
modifier|*
name|ring_no
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|ring_flags
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * nm_dispatch() is the same as pcap_dispatch()  * nm_next() is the same as pcap_next()  */
end_comment

begin_function_decl
specifier|static
name|int
name|nm_dispatch
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|nm_cb_t
parameter_list|,
name|u_char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|u_char
modifier|*
name|nm_next
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
parameter_list|,
name|struct
name|nm_hdr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * unmap memory, close file descriptor and free the descriptor.  */
end_comment

begin_function_decl
specifier|static
name|int
name|nm_close
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Try to open, return descriptor if successful, NULL otherwise.  * An invalid netmap name will return errno = 0;  */
end_comment

begin_function
specifier|static
name|struct
name|nm_desc_t
modifier|*
name|nm_open
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|char
modifier|*
name|ring_name
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|ring_flags
parameter_list|)
block|{
name|struct
name|nm_desc_t
modifier|*
name|d
decl_stmt|;
name|u_int
name|n
decl_stmt|;
if|if
condition|(
name|strncmp
argument_list|(
name|ifname
argument_list|,
literal|"netmap:"
argument_list|,
literal|7
argument_list|)
operator|&&
name|strncmp
argument_list|(
name|ifname
argument_list|,
literal|"vale"
argument_list|,
literal|4
argument_list|)
condition|)
block|{
name|errno
operator|=
literal|0
expr_stmt|;
comment|/* name not recognised */
return|return
name|NULL
return|;
block|}
if|if
condition|(
name|ifname
index|[
literal|0
index|]
operator|==
literal|'n'
condition|)
name|ifname
operator|+=
literal|7
expr_stmt|;
name|d
operator|=
operator|(
expr|struct
name|nm_desc_t
operator|*
operator|)
name|calloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|d
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|==
name|NULL
condition|)
block|{
name|errno
operator|=
name|ENOMEM
expr_stmt|;
return|return
name|NULL
return|;
block|}
name|d
operator|->
name|self
operator|=
name|d
expr_stmt|;
comment|/* set this early so nm_close() works */
name|d
operator|->
name|fd
operator|=
name|open
argument_list|(
literal|"/dev/netmap"
argument_list|,
name|O_RDWR
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|<
literal|0
condition|)
goto|goto
name|fail
goto|;
if|if
condition|(
name|flags
operator|&
name|NETMAP_SW_RING
condition|)
block|{
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|=
name|NETMAP_SW_RING
expr_stmt|;
block|}
else|else
block|{
name|u_int
name|r
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|NETMAP_HW_RING
condition|)
comment|/* interpret ring as int */
name|r
operator|=
operator|(
name|uintptr_t
operator|)
name|ring_name
expr_stmt|;
else|else
comment|/* interpret ring as numeric string */
name|r
operator|=
name|ring_name
condition|?
name|atoi
argument_list|(
name|ring_name
argument_list|)
else|:
operator|~
literal|0
expr_stmt|;
name|r
operator|=
operator|(
name|r
operator|<
name|NETMAP_RING_MASK
operator|)
condition|?
operator|(
name|r
operator||
name|NETMAP_HW_RING
operator|)
else|:
literal|0
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|=
name|r
expr_stmt|;
comment|/* set the ring */
block|}
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator||=
operator|(
name|flags
operator|&
operator|~
name|NETMAP_RING_MASK
operator|)
expr_stmt|;
name|d
operator|->
name|req
operator|.
name|nr_version
operator|=
name|NETMAP_API
expr_stmt|;
name|strncpy
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|,
name|ifname
argument_list|,
sizeof|sizeof
argument_list|(
name|d
operator|->
name|req
operator|.
name|nr_name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ioctl
argument_list|(
name|d
operator|->
name|fd
argument_list|,
name|NIOCREGIF
argument_list|,
operator|&
name|d
operator|->
name|req
argument_list|)
condition|)
goto|goto
name|fail
goto|;
name|d
operator|->
name|memsize
operator|=
name|d
operator|->
name|req
operator|.
name|nr_memsize
expr_stmt|;
name|d
operator|->
name|mem
operator|=
name|mmap
argument_list|(
literal|0
argument_list|,
name|d
operator|->
name|memsize
argument_list|,
name|PROT_WRITE
operator||
name|PROT_READ
argument_list|,
name|MAP_SHARED
argument_list|,
name|d
operator|->
name|fd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|mem
operator|==
name|NULL
condition|)
goto|goto
name|fail
goto|;
name|d
operator|->
name|nifp
operator|=
name|NETMAP_IF
argument_list|(
name|d
operator|->
name|mem
argument_list|,
name|d
operator|->
name|req
operator|.
name|nr_offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|&
name|NETMAP_SW_RING
condition|)
block|{
name|d
operator|->
name|first_ring
operator|=
name|d
operator|->
name|last_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|&
name|NETMAP_HW_RING
condition|)
block|{
name|d
operator|->
name|first_ring
operator|=
name|d
operator|->
name|last_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_ringid
operator|&
name|NETMAP_RING_MASK
expr_stmt|;
block|}
else|else
block|{
name|d
operator|->
name|first_ring
operator|=
literal|0
expr_stmt|;
name|d
operator|->
name|last_ring
operator|=
name|d
operator|->
name|req
operator|.
name|nr_rx_rings
operator|-
literal|1
expr_stmt|;
block|}
name|d
operator|->
name|cur_ring
operator|=
name|d
operator|->
name|first_ring
expr_stmt|;
for|for
control|(
name|n
operator|=
name|d
operator|->
name|first_ring
init|;
name|n
operator|<=
name|d
operator|->
name|last_ring
condition|;
name|n
operator|++
control|)
block|{
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|ring
operator|->
name|flags
operator||=
name|ring_flags
expr_stmt|;
block|}
return|return
name|d
return|;
name|fail
label|:
name|nm_close
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|nm_close
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
name|NULL
operator|||
name|d
operator|->
name|self
operator|!=
name|d
condition|)
return|return
name|EINVAL
return|;
if|if
condition|(
name|d
operator|->
name|mem
condition|)
name|munmap
argument_list|(
name|d
operator|->
name|mem
argument_list|,
name|d
operator|->
name|memsize
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|->
name|fd
operator|!=
operator|-
literal|1
condition|)
name|close
argument_list|(
name|d
operator|->
name|fd
argument_list|)
expr_stmt|;
name|bzero
argument_list|(
name|d
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|d
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/*  * Same prototype as pcap_dispatch(), only need to cast.  */
end_comment

begin_function
specifier|inline
comment|/* not really, but disable unused warnings */
specifier|static
name|int
name|nm_dispatch
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
name|d
parameter_list|,
name|int
name|cnt
parameter_list|,
name|nm_cb_t
name|cb
parameter_list|,
name|u_char
modifier|*
name|arg
parameter_list|)
block|{
name|int
name|n
init|=
name|d
operator|->
name|last_ring
operator|-
name|d
operator|->
name|first_ring
operator|+
literal|1
decl_stmt|;
name|int
name|c
decl_stmt|,
name|got
init|=
literal|0
decl_stmt|,
name|ri
init|=
name|d
operator|->
name|cur_ring
decl_stmt|;
if|if
condition|(
name|cnt
operator|==
literal|0
condition|)
name|cnt
operator|=
operator|-
literal|1
expr_stmt|;
comment|/* cnt == -1 means infinite, but rings have a finite amount 	 * of buffers and the int is large enough that we never wrap, 	 * so we can omit checking for -1 	 */
for|for
control|(
name|c
operator|=
literal|0
init|;
name|c
operator|<
name|n
operator|&&
name|cnt
operator|!=
name|got
condition|;
name|c
operator|++
control|)
block|{
comment|/* compute current ring to use */
name|struct
name|netmap_ring
modifier|*
name|ring
decl_stmt|;
name|ri
operator|=
name|d
operator|->
name|cur_ring
operator|+
name|c
expr_stmt|;
if|if
condition|(
name|ri
operator|>
name|d
operator|->
name|last_ring
condition|)
name|ri
operator|=
name|d
operator|->
name|first_ring
expr_stmt|;
name|ring
operator|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|ri
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|ring
operator|->
name|avail
operator|>
literal|0
operator|&&
name|cnt
operator|!=
name|got
condition|;
name|got
operator|++
control|)
block|{
name|u_int
name|i
init|=
name|ring
operator|->
name|cur
decl_stmt|;
name|u_int
name|idx
init|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|buf_idx
decl_stmt|;
name|u_char
modifier|*
name|buf
init|=
operator|(
name|u_char
operator|*
operator|)
name|NETMAP_BUF
argument_list|(
name|ring
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// XXX should check valid buf
comment|// prefetch(buf);
name|d
operator|->
name|hdr
operator|.
name|len
operator|=
name|d
operator|->
name|hdr
operator|.
name|caplen
operator|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
name|d
operator|->
name|hdr
operator|.
name|ts
operator|=
name|ring
operator|->
name|ts
expr_stmt|;
name|cb
argument_list|(
name|arg
argument_list|,
operator|&
name|d
operator|->
name|hdr
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|ring
operator|->
name|cur
operator|=
name|NETMAP_RING_NEXT
argument_list|(
name|ring
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ring
operator|->
name|avail
operator|--
expr_stmt|;
block|}
block|}
name|d
operator|->
name|cur_ring
operator|=
name|ri
expr_stmt|;
return|return
name|got
return|;
block|}
end_function

begin_function
specifier|inline
comment|/* not really, but disable unused warnings */
specifier|static
name|u_char
modifier|*
name|nm_next
parameter_list|(
name|struct
name|nm_desc_t
modifier|*
name|d
parameter_list|,
name|struct
name|nm_hdr_t
modifier|*
name|hdr
parameter_list|)
block|{
name|int
name|ri
init|=
name|d
operator|->
name|cur_ring
decl_stmt|;
do|do
block|{
comment|/* compute current ring to use */
name|struct
name|netmap_ring
modifier|*
name|ring
init|=
name|NETMAP_RXRING
argument_list|(
name|d
operator|->
name|nifp
argument_list|,
name|ri
argument_list|)
decl_stmt|;
if|if
condition|(
name|ring
operator|->
name|avail
operator|>
literal|0
condition|)
block|{
name|u_int
name|i
init|=
name|ring
operator|->
name|cur
decl_stmt|;
name|u_int
name|idx
init|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|buf_idx
decl_stmt|;
name|u_char
modifier|*
name|buf
init|=
operator|(
name|u_char
operator|*
operator|)
name|NETMAP_BUF
argument_list|(
name|ring
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// XXX should check valid buf
comment|// prefetch(buf);
name|hdr
operator|->
name|ts
operator|=
name|ring
operator|->
name|ts
expr_stmt|;
name|hdr
operator|->
name|len
operator|=
name|hdr
operator|->
name|caplen
operator|=
name|ring
operator|->
name|slot
index|[
name|i
index|]
operator|.
name|len
expr_stmt|;
name|ring
operator|->
name|cur
operator|=
name|NETMAP_RING_NEXT
argument_list|(
name|ring
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|ring
operator|->
name|avail
operator|--
expr_stmt|;
name|d
operator|->
name|cur_ring
operator|=
name|ri
expr_stmt|;
return|return
name|buf
return|;
block|}
name|ri
operator|++
expr_stmt|;
if|if
condition|(
name|ri
operator|>
name|d
operator|->
name|last_ring
condition|)
name|ri
operator|=
name|d
operator|->
name|first_ring
expr_stmt|;
block|}
do|while
condition|(
name|ri
operator|!=
name|d
operator|->
name|cur_ring
condition|)
do|;
return|return
name|NULL
return|;
comment|/* nothing found */
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !HAVE_NETMAP_WITH_LIBS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NETMAP_WITH_LIBS */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NET_NETMAP_USER_H_ */
end_comment

end_unit

