begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997 John S. Dyson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *	notice immediately at the beginning of the file, without modification,  *	this list of conditions, and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *	notice, this list of conditions and the following disclaimer in the  *	documentation and/or other materials provided with the distribution.  * 3. Absolutely no warranty of function or purpose is made by the author  *	John S. Dyson.  * 4. This work was done expressly for inclusion into FreeBSD.  Other use  *	is allowed if this notation is included.  * 5. Modifications may be freely made to this file if the above conditions  *	are met.  *  * $Id: vm_zone.h,v 1.8 1997/12/05 19:55:52 bde Exp $  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_SYS_ZONE_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|_SYS_ZONE_H
end_define

begin_define
define|#
directive|define
name|ZONE_INTERRUPT
value|1
end_define

begin_comment
comment|/* Use this if you need to allocate at int time */
end_comment

begin_define
define|#
directive|define
name|ZONE_BOOT
value|16
end_define

begin_comment
comment|/* This is an internal flag used by zbootinit */
end_comment

begin_include
include|#
directive|include
file|<machine/lock.h>
end_include

begin_typedef
typedef|typedef
struct|struct
name|vm_zone
block|{
name|struct
name|simplelock
name|zlock
decl_stmt|;
comment|/* lock for data structure */
name|void
modifier|*
name|zitems
decl_stmt|;
comment|/* linked list of items */
name|int
name|zfreecnt
decl_stmt|;
comment|/* free entries */
name|int
name|zfreemin
decl_stmt|;
comment|/* minimum number of free entries */
name|int
name|znalloc
decl_stmt|;
comment|/* number of allocations */
name|vm_offset_t
name|zkva
decl_stmt|;
comment|/* Base kva of zone */
name|int
name|zpagecount
decl_stmt|;
comment|/* Total # of allocated pages */
name|int
name|zpagemax
decl_stmt|;
comment|/* Max address space */
name|int
name|zmax
decl_stmt|;
comment|/* Max number of entries allocated */
name|int
name|ztotal
decl_stmt|;
comment|/* Total entries allocated now */
name|int
name|zsize
decl_stmt|;
comment|/* size of each entry */
name|int
name|zalloc
decl_stmt|;
comment|/* hint for # of pages to alloc */
name|int
name|zflags
decl_stmt|;
comment|/* flags for zone */
name|int
name|zallocflag
decl_stmt|;
comment|/* flag for allocation */
name|struct
name|vm_object
modifier|*
name|zobj
decl_stmt|;
comment|/* object to hold zone */
name|char
modifier|*
name|zname
decl_stmt|;
comment|/* name for diags */
name|struct
name|vm_zone
modifier|*
name|znext
decl_stmt|;
comment|/* list of zones for sysctl */
block|}
typedef|*
name|vm_zone_t
typedef|;
end_typedef

begin_decl_stmt
name|void
name|zerror
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
name|__dead2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|vm_zone_t
name|zinit
name|__P
argument_list|(
operator|(
name|char
operator|*
name|name
operator|,
name|int
name|size
operator|,
name|int
name|nentries
operator|,
name|int
name|flags
operator|,
name|int
name|zalloc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|zinitna
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|,
expr|struct
name|vm_object
operator|*
name|obj
operator|,
name|char
operator|*
name|name
operator|,
name|int
name|size
operator|,
name|int
name|nentries
operator|,
name|int
name|flags
operator|,
name|int
name|zalloc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
modifier|*
name|zalloc
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|zfree
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|,
name|void
operator|*
name|item
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|zalloci
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|zfreei
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|,
name|void
operator|*
name|item
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|zbootinit
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|,
name|char
operator|*
name|name
operator|,
name|int
name|size
operator|,
name|void
operator|*
name|item
operator|,
name|int
name|nitems
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|_zget
name|__P
argument_list|(
operator|(
name|vm_zone_t
name|z
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ZONE_ERROR_INVALID
value|0
end_define

begin_define
define|#
directive|define
name|ZONE_ERROR_NOTFREE
value|1
end_define

begin_define
define|#
directive|define
name|ZONE_ERROR_ALREADYFREE
value|2
end_define

begin_define
define|#
directive|define
name|ZONE_ROUNDING
value|32
end_define

begin_define
define|#
directive|define
name|ZENTRY_FREE
value|0x12342378
end_define

begin_comment
comment|/*  * void *zalloc(vm_zone_t zone) --  *	Returns an item from a specified zone.  *  * void zfree(vm_zone_t zone, void *item) --  *  Frees an item back to a specified zone.  */
end_comment

begin_function
specifier|static
name|__inline__
name|void
modifier|*
name|_zalloc
parameter_list|(
name|vm_zone_t
name|z
parameter_list|)
block|{
name|void
modifier|*
name|item
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DIAGNOSTIC
argument_list|)
if|if
condition|(
name|z
operator|==
literal|0
condition|)
name|zerror
argument_list|(
name|ZONE_ERROR_INVALID
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|z
operator|->
name|zfreecnt
operator|<=
name|z
operator|->
name|zfreemin
condition|)
return|return
name|_zget
argument_list|(
name|z
argument_list|)
return|;
name|item
operator|=
name|z
operator|->
name|zitems
expr_stmt|;
name|z
operator|->
name|zitems
operator|=
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|0
index|]
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DIAGNOSTIC
argument_list|)
if|if
condition|(
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|1
index|]
operator|!=
operator|(
name|void
operator|*
operator|)
name|ZENTRY_FREE
condition|)
name|zerror
argument_list|(
name|ZONE_ERROR_NOTFREE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
name|z
operator|->
name|zfreecnt
operator|--
expr_stmt|;
name|z
operator|->
name|znalloc
operator|++
expr_stmt|;
return|return
name|item
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|_zfree
parameter_list|(
name|vm_zone_t
name|z
parameter_list|,
name|void
modifier|*
name|item
parameter_list|)
block|{
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|0
index|]
operator|=
name|z
operator|->
name|zitems
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|DIAGNOSTIC
argument_list|)
if|if
condition|(
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|1
index|]
operator|==
operator|(
name|void
operator|*
operator|)
name|ZENTRY_FREE
condition|)
name|zerror
argument_list|(
name|ZONE_ERROR_ALREADYFREE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|item
operator|)
index|[
literal|1
index|]
operator|=
operator|(
name|void
operator|*
operator|)
name|ZENTRY_FREE
expr_stmt|;
endif|#
directive|endif
name|z
operator|->
name|zitems
operator|=
name|item
expr_stmt|;
name|z
operator|->
name|zfreecnt
operator|++
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
modifier|*
name|zalloc
parameter_list|(
name|vm_zone_t
name|z
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SMP
argument_list|)
return|return
name|zalloci
argument_list|(
name|z
argument_list|)
return|;
else|#
directive|else
return|return
name|_zalloc
argument_list|(
name|z
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|zfree
parameter_list|(
name|vm_zone_t
name|z
parameter_list|,
name|void
modifier|*
name|item
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|SMP
argument_list|)
name|zfreei
argument_list|(
name|z
argument_list|,
name|item
argument_list|)
expr_stmt|;
else|#
directive|else
name|_zfree
argument_list|(
name|z
argument_list|,
name|item
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

