begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990 University of Utah.  * Copyright (c) 1991, 1993  *	The Regents of the University of California.  All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * the Systems Programming Group of the University of Utah Computer  * Science Department.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)vm_pager.h	8.4 (Berkeley) 1/12/94  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Pager routine interface definition.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VM_PAGER_
end_ifndef

begin_define
define|#
directive|define
name|_VM_PAGER_
end_define

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|pagerlst
argument_list|,
name|vm_object
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|pgo_init_t
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|vm_object_t
name|pgo_alloc_t
parameter_list|(
name|void
modifier|*
parameter_list|,
name|vm_ooffset_t
parameter_list|,
name|vm_prot_t
parameter_list|,
name|vm_ooffset_t
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pgo_dealloc_t
parameter_list|(
name|vm_object_t
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|pgo_getpages_t
parameter_list|(
name|vm_object_t
parameter_list|,
name|vm_page_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pgo_putpages_t
parameter_list|(
name|vm_object_t
parameter_list|,
name|vm_page_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|boolean_t
name|pgo_haspage_t
parameter_list|(
name|vm_object_t
parameter_list|,
name|vm_pindex_t
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pgo_pageunswapped_t
parameter_list|(
name|vm_page_t
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|pagerops
block|{
name|pgo_init_t
modifier|*
name|pgo_init
decl_stmt|;
comment|/* Initialize pager. */
name|pgo_alloc_t
modifier|*
name|pgo_alloc
decl_stmt|;
comment|/* Allocate pager. */
name|pgo_dealloc_t
modifier|*
name|pgo_dealloc
decl_stmt|;
comment|/* Disassociate. */
name|pgo_getpages_t
modifier|*
name|pgo_getpages
decl_stmt|;
comment|/* Get (read) page. */
name|pgo_putpages_t
modifier|*
name|pgo_putpages
decl_stmt|;
comment|/* Put (write) page. */
name|pgo_haspage_t
modifier|*
name|pgo_haspage
decl_stmt|;
comment|/* Does pager have page? */
name|pgo_pageunswapped_t
modifier|*
name|pgo_pageunswapped
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
name|defaultpagerops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
name|swappagerops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
name|vnodepagerops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
name|devicepagerops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
name|physpagerops
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * get/put return values  * OK	 operation was successful  * BAD	 specified data was out of the accepted range  * FAIL	 specified data was in range, but doesn't exist  * PEND	 operations was initiated but not completed  * ERROR error while accessing data that is in range and exists  * AGAIN temporary resource shortage prevented operation from happening  */
end_comment

begin_define
define|#
directive|define
name|VM_PAGER_OK
value|0
end_define

begin_define
define|#
directive|define
name|VM_PAGER_BAD
value|1
end_define

begin_define
define|#
directive|define
name|VM_PAGER_FAIL
value|2
end_define

begin_define
define|#
directive|define
name|VM_PAGER_PEND
value|3
end_define

begin_define
define|#
directive|define
name|VM_PAGER_ERROR
value|4
end_define

begin_define
define|#
directive|define
name|VM_PAGER_AGAIN
value|5
end_define

begin_define
define|#
directive|define
name|VM_PAGER_PUT_SYNC
value|0x0001
end_define

begin_define
define|#
directive|define
name|VM_PAGER_PUT_INVAL
value|0x0002
end_define

begin_define
define|#
directive|define
name|VM_PAGER_IGNORE_CLEANCHK
value|0x0004
end_define

begin_define
define|#
directive|define
name|VM_PAGER_CLUSTER_OK
value|0x0008
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|MALLOC_DECLARE
end_ifdef

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_VMPGDATA
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|vm_map_t
name|pager_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|pagerops
modifier|*
name|pagertab
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|mtx
name|pbuf_mtx
decl_stmt|;
end_decl_stmt

begin_function_decl
name|vm_object_t
name|vm_pager_allocate
parameter_list|(
name|objtype_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|vm_ooffset_t
parameter_list|,
name|vm_prot_t
parameter_list|,
name|vm_ooffset_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_pager_bufferinit
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_pager_deallocate
parameter_list|(
name|vm_object_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|int
name|vm_pager_get_pages
parameter_list|(
name|vm_object_t
parameter_list|,
name|vm_page_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|__inline
name|boolean_t
name|vm_pager_has_page
parameter_list|(
name|vm_object_t
parameter_list|,
name|vm_pindex_t
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vm_pager_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vm_object_t
name|vm_pager_object_lookup
parameter_list|(
name|struct
name|pagerlst
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  *	vm_page_get_pages:  *  *	Retrieve pages from the VM system in order to map them into an object  *	( or into VM space somewhere ).  If the pagein was successful, we  *	must fully validate it.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|vm_pager_get_pages
parameter_list|(
name|vm_object_t
name|object
parameter_list|,
name|vm_page_t
modifier|*
name|m
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|reqpage
parameter_list|)
block|{
name|int
name|r
decl_stmt|;
name|VM_OBJECT_LOCK_ASSERT
argument_list|(
name|object
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
operator|*
name|pagertab
index|[
name|object
operator|->
name|type
index|]
operator|->
name|pgo_getpages
operator|)
operator|(
name|object
operator|,
name|m
operator|,
name|count
operator|,
name|reqpage
operator|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
name|VM_PAGER_OK
operator|&&
name|m
index|[
name|reqpage
index|]
operator|->
name|valid
operator|!=
name|VM_PAGE_BITS_ALL
condition|)
block|{
name|vm_page_zero_invalid
argument_list|(
name|m
index|[
name|reqpage
index|]
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|r
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|vm_pager_put_pages
parameter_list|(
name|vm_object_t
name|object
parameter_list|,
name|vm_page_t
modifier|*
name|m
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
modifier|*
name|rtvals
parameter_list|)
block|{
name|VM_OBJECT_LOCK_ASSERT
argument_list|(
name|object
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
operator|(
operator|*
name|pagertab
index|[
name|object
operator|->
name|type
index|]
operator|->
name|pgo_putpages
operator|)
operator|(
name|object
operator|,
name|m
operator|,
name|count
operator|,
name|flags
operator|,
name|rtvals
operator|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  *	vm_pager_haspage  *  *	Check to see if an object's pager has the requested page.  The  *	object's pager will also set before and after to give the caller  *	some idea of the number of pages before and after the requested  *	page can be I/O'd efficiently.  *  *	The object must be locked.  */
end_comment

begin_function
specifier|static
name|__inline
name|boolean_t
name|vm_pager_has_page
parameter_list|(
name|vm_object_t
name|object
parameter_list|,
name|vm_pindex_t
name|offset
parameter_list|,
name|int
modifier|*
name|before
parameter_list|,
name|int
modifier|*
name|after
parameter_list|)
block|{
name|boolean_t
name|ret
decl_stmt|;
name|VM_OBJECT_LOCK_ASSERT
argument_list|(
name|object
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
operator|*
name|pagertab
index|[
name|object
operator|->
name|type
index|]
operator|->
name|pgo_haspage
operator|)
operator|(
name|object
operator|,
name|offset
operator|,
name|before
operator|,
name|after
operator|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_comment
comment|/*   *      vm_pager_page_unswapped  *   *	Destroy swap associated with the page.  *   *	The object containing the page must be locked.  *      This function may not block.  *  *	XXX: A much better name would be "vm_pager_page_dirtied()"  *	XXX: It is not obvious if this could be profitably used by any  *	XXX: pagers besides the swap_pager or if it should even be a  *	XXX: generic pager_op in the first place.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|vm_pager_page_unswapped
parameter_list|(
name|vm_page_t
name|m
parameter_list|)
block|{
name|VM_OBJECT_LOCK_ASSERT
argument_list|(
name|m
operator|->
name|object
argument_list|,
name|MA_OWNED
argument_list|)
expr_stmt|;
if|if
condition|(
name|pagertab
index|[
name|m
operator|->
name|object
operator|->
name|type
index|]
operator|->
name|pgo_pageunswapped
condition|)
operator|(
operator|*
name|pagertab
index|[
name|m
operator|->
name|object
operator|->
name|type
index|]
operator|->
name|pgo_pageunswapped
operator|)
operator|(
name|m
operator|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _VM_PAGER_ */
end_comment

end_unit

