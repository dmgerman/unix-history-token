begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009 Sam Leffler, Errno Consulting  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET80211_IEEE80211_SUPERG_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET80211_IEEE80211_SUPERG_H_
end_define

begin_comment
comment|/*  * Atheros' 802.11 SuperG protocol support.  */
end_comment

begin_comment
comment|/*  * Atheros advanced capability information element.  */
end_comment

begin_struct
struct|struct
name|ieee80211_ath_ie
block|{
name|uint8_t
name|ath_id
decl_stmt|;
comment|/* IEEE80211_ELEMID_VENDOR */
name|uint8_t
name|ath_len
decl_stmt|;
comment|/* length in bytes */
name|uint8_t
name|ath_oui
index|[
literal|3
index|]
decl_stmt|;
comment|/* ATH_OUI */
name|uint8_t
name|ath_oui_type
decl_stmt|;
comment|/* ATH_OUI_TYPE */
name|uint8_t
name|ath_oui_subtype
decl_stmt|;
comment|/* ATH_OUI_SUBTYPE */
name|uint8_t
name|ath_version
decl_stmt|;
comment|/* spec revision */
name|uint8_t
name|ath_capability
decl_stmt|;
comment|/* capability info */
define|#
directive|define
name|ATHEROS_CAP_TURBO_PRIME
value|0x01
comment|/* dynamic turbo--aka Turbo' */
define|#
directive|define
name|ATHEROS_CAP_COMPRESSION
value|0x02
comment|/* data compression */
define|#
directive|define
name|ATHEROS_CAP_FAST_FRAME
value|0x04
comment|/* fast (jumbo) frames */
define|#
directive|define
name|ATHEROS_CAP_XR
value|0x08
comment|/* Xtended Range support */
define|#
directive|define
name|ATHEROS_CAP_AR
value|0x10
comment|/* Advanded Radar support */
define|#
directive|define
name|ATHEROS_CAP_BURST
value|0x20
comment|/* Bursting - not negotiated */
define|#
directive|define
name|ATHEROS_CAP_WME
value|0x40
comment|/* CWMin tuning */
define|#
directive|define
name|ATHEROS_CAP_BOOST
value|0x80
comment|/* use turbo/!turbo mode */
name|uint8_t
name|ath_defkeyix
index|[
literal|2
index|]
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_define
define|#
directive|define
name|ATH_OUI_VERSION
value|0x00
end_define

begin_define
define|#
directive|define
name|ATH_OUI_SUBTYPE
value|0x01
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_struct
struct|struct
name|ieee80211_stageq
block|{
name|struct
name|mbuf
modifier|*
name|head
decl_stmt|;
comment|/* frames linked w/ m_nextpkt */
name|struct
name|mbuf
modifier|*
name|tail
decl_stmt|;
comment|/* last frame in queue */
name|int
name|depth
decl_stmt|;
comment|/* # items on head */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee80211_superg
block|{
comment|/* fast-frames staging q */
name|struct
name|ieee80211_stageq
name|ff_stageq
index|[
name|WME_NUM_AC
index|]
decl_stmt|;
name|int
name|ff_stageqdepth
decl_stmt|;
comment|/* cumulative depth */
block|}
struct|;
end_struct

begin_function_decl
name|void
name|ieee80211_superg_attach
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_superg_detach
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_superg_vattach
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_superg_vdetach
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|ieee80211_add_ath
parameter_list|(
name|uint8_t
modifier|*
parameter_list|,
name|uint8_t
parameter_list|,
name|ieee80211_keyix
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|ieee80211_add_athcaps
parameter_list|(
name|uint8_t
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_parse_ath
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_parse_athparams
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_frame
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ff_node_init
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ff_node_cleanup
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_ff_check
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ff_age
parameter_list|(
name|struct
name|ieee80211com
modifier|*
parameter_list|,
name|struct
name|ieee80211_stageq
modifier|*
parameter_list|,
name|int
name|quanta
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ff_flush
parameter_list|(
name|struct
name|ieee80211com
modifier|*
name|ic
parameter_list|,
name|int
name|ac
parameter_list|)
block|{
name|struct
name|ieee80211_superg
modifier|*
name|sg
init|=
name|ic
operator|->
name|ic_superg
decl_stmt|;
if|if
condition|(
name|sg
operator|!=
name|NULL
operator|&&
name|sg
operator|->
name|ff_stageq
index|[
name|ac
index|]
operator|.
name|depth
condition|)
name|ieee80211_ff_age
argument_list|(
name|ic
argument_list|,
operator|&
name|sg
operator|->
name|ff_stageq
index|[
name|ac
index|]
argument_list|,
literal|0x7fffffff
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ff_age_all
parameter_list|(
name|struct
name|ieee80211com
modifier|*
name|ic
parameter_list|,
name|int
name|quanta
parameter_list|)
block|{
name|struct
name|ieee80211_superg
modifier|*
name|sg
init|=
name|ic
operator|->
name|ic_superg
decl_stmt|;
if|if
condition|(
name|sg
operator|!=
name|NULL
operator|&&
name|sg
operator|->
name|ff_stageqdepth
condition|)
block|{
if|if
condition|(
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_VO
index|]
operator|.
name|depth
condition|)
name|ieee80211_ff_age
argument_list|(
name|ic
argument_list|,
operator|&
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_VO
index|]
argument_list|,
name|quanta
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_VI
index|]
operator|.
name|depth
condition|)
name|ieee80211_ff_age
argument_list|(
name|ic
argument_list|,
operator|&
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_VI
index|]
argument_list|,
name|quanta
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_BE
index|]
operator|.
name|depth
condition|)
name|ieee80211_ff_age
argument_list|(
name|ic
argument_list|,
operator|&
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_BE
index|]
argument_list|,
name|quanta
argument_list|)
expr_stmt|;
if|if
condition|(
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_BK
index|]
operator|.
name|depth
condition|)
name|ieee80211_ff_age
argument_list|(
name|ic
argument_list|,
operator|&
name|sg
operator|->
name|ff_stageq
index|[
name|WME_AC_BK
index|]
argument_list|,
name|quanta
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_ff_encap
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|ieee80211_key
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_ff_decap
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|mbuf
operator|*
name|ieee80211_decap_fastframe
argument_list|(
argument|struct ieee80211vap *vap
argument_list|,
argument|struct ieee80211_node *ni
argument_list|,
argument|struct mbuf *m
argument_list|)
block|{
return|return
name|IEEE80211_ATH_CAP
argument_list|(
name|vap
argument_list|,
name|ni
argument_list|,
name|IEEE80211_NODE_FF
argument_list|)
operator|?
name|ieee80211_ff_decap
argument_list|(
name|ni
argument_list|,
name|m
argument_list|)
operator|:
name|m
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NET80211_IEEE80211_SUPERG_H_ */
end_comment

end_unit

