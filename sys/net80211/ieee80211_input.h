begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007-2009 Sam Leffler, Errno Consulting  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET80211_IEEE80211_INPUT_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET80211_IEEE80211_INPUT_H_
end_define

begin_comment
comment|/* Verify the existence and length of __elem or get out. */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_ELEMENT
parameter_list|(
name|__elem
parameter_list|,
name|__maxlen
parameter_list|,
name|_action
parameter_list|)
value|do {	\ 	if ((__elem) == NULL) {						\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "%s", "no " #__elem );			\ 		vap->iv_stats.is_rx_elem_missing++;			\ 		_action;						\ 	} else if ((__elem)[1]> (__maxlen)) {				\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "bad " #__elem " len %d", (__elem)[1]);	\ 		vap->iv_stats.is_rx_elem_toobig++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_LENGTH
parameter_list|(
name|_len
parameter_list|,
name|_minlen
parameter_list|,
name|_action
parameter_list|)
value|do {		\ 	if ((_len)< (_minlen)) {					\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "ie too short, got %d, expected %d",	\ 		    (_len), (_minlen));					\ 		vap->iv_stats.is_rx_elem_toosmall++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|IEEE80211_DEBUG
end_ifdef

begin_function_decl
name|void
name|ieee80211_ssid_mismatch
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|tag
parameter_list|,
name|uint8_t
name|mac
index|[
name|IEEE80211_ADDR_LEN
index|]
parameter_list|,
name|uint8_t
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_SSID
parameter_list|(
name|_ni
parameter_list|,
name|_ssid
parameter_list|,
name|_action
parameter_list|)
value|do {			\ 	if ((_ssid)[1] != 0&&						\ 	    ((_ssid)[1] != (_ni)->ni_esslen ||				\ 	    memcmp((_ssid) + 2, (_ni)->ni_essid, (_ssid)[1]) != 0)) {	\ 		if (ieee80211_msg_input(vap))				\ 			ieee80211_ssid_mismatch(vap, 			\ 			    ieee80211_mgt_subtype_name(subtype),	\ 				wh->i_addr2, _ssid);			\ 		vap->iv_stats.is_rx_ssidmismatch++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !IEEE80211_DEBUG */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_SSID
parameter_list|(
name|_ni
parameter_list|,
name|_ssid
parameter_list|,
name|_action
parameter_list|)
value|do {			\ 	if ((_ssid)[1] != 0&&						\ 	    ((_ssid)[1] != (_ni)->ni_esslen ||				\ 	    memcmp((_ssid) + 2, (_ni)->ni_essid, (_ssid)[1]) != 0)) {	\ 		vap->iv_stats.is_rx_ssidmismatch++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !IEEE80211_DEBUG */
end_comment

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_comment
comment|/* For le16toh() / le32dec() */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|iswpaoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WPA_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WPA_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeparam
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|5
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
operator|&&
name|frm
index|[
literal|6
index|]
operator|==
name|WME_PARAM_OUI_SUBTYPE
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeinfo
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|5
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
operator|&&
name|frm
index|[
literal|6
index|]
operator|==
name|WME_INFO_OUI_SUBTYPE
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|isatherosoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|ATH_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|ATH_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|istdmaoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|TDMA_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|TDMA_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|ishtcapoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|BCM_OUI_HTCAP
operator|<<
literal|24
operator|)
operator||
name|BCM_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|ishtinfooui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|le32dec
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|BCM_OUI_HTINFO
operator|<<
literal|24
operator|)
operator||
name|BCM_OUI
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Check the current frame sequence number against the current TID  * state and return whether it's in sequence or should be dropped.  *  * Since out of order packet and duplicate packet eliminations should  * be done by the AMPDU RX code, this routine blindly accepts all  * frames from a HT station w/ a TID that is currently doing AMPDU-RX.  * HT stations without WME or where the TID is not doing AMPDU-RX  * are checked like non-HT stations.  *  * The routine only eliminates packets whose sequence/fragment  * match or are less than the last seen sequence/fragment number  * AND are retransmits It doesn't try to eliminate out of order packets.  *  * Since all frames after sequence number 4095 will be less than 4095  * (as the seqnum wraps), handle that special case so packets aren't  * incorrectly dropped - ie, if the next packet is sequence number 0  * but a retransmit since the initial packet didn't make it.  *  * XXX TODO: handle sequence number space wrapping with dropped frames;  * especially in high interference conditions under high traffic load  * The RX AMPDU reorder code also needs it.  *  * XXX TODO: update for 802.11-2012 9.3.2.10 Duplicate Detection and Recovery.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|ieee80211_check_rxseq
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
name|struct
name|ieee80211_frame
modifier|*
name|wh
parameter_list|,
name|uint8_t
modifier|*
name|bssid
parameter_list|)
block|{
define|#
directive|define
name|SEQ_LEQ
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((int)((a)-(b))<= 0)
define|#
directive|define
name|SEQ_EQ
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((int)((a)-(b)) == 0)
define|#
directive|define
name|SEQNO
parameter_list|(
name|a
parameter_list|)
value|((a)>> IEEE80211_SEQ_SEQ_SHIFT)
define|#
directive|define
name|FRAGNO
parameter_list|(
name|a
parameter_list|)
value|((a)& IEEE80211_SEQ_FRAG_MASK)
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
name|uint16_t
name|rxseq
decl_stmt|;
name|uint8_t
name|type
decl_stmt|,
name|subtype
decl_stmt|;
name|uint8_t
name|tid
decl_stmt|;
name|struct
name|ieee80211_rx_ampdu
modifier|*
name|rap
decl_stmt|;
name|rxseq
operator|=
name|le16toh
argument_list|(
operator|*
operator|(
name|uint16_t
operator|*
operator|)
name|wh
operator|->
name|i_seq
argument_list|)
expr_stmt|;
name|type
operator|=
name|wh
operator|->
name|i_fc
index|[
literal|0
index|]
operator|&
name|IEEE80211_FC0_TYPE_MASK
expr_stmt|;
name|subtype
operator|=
name|wh
operator|->
name|i_fc
index|[
literal|0
index|]
operator|&
name|IEEE80211_FC0_SUBTYPE_MASK
expr_stmt|;
comment|/* 	 * Types with no sequence number (or QoS (+)Null frames) 	 * are always treated valid. 	 */
if|if
condition|(
operator|!
name|IEEE80211_HAS_SEQ
argument_list|(
name|type
argument_list|,
name|subtype
argument_list|)
condition|)
return|return
literal|1
return|;
comment|/* 	 * Always allow multicast frames for now - QoS (any TID) 	 * or not. 	 */
if|if
condition|(
name|IEEE80211_IS_MULTICAST
argument_list|(
name|wh
operator|->
name|i_addr1
argument_list|)
condition|)
return|return
literal|1
return|;
name|tid
operator|=
name|ieee80211_gettid
argument_list|(
name|wh
argument_list|)
expr_stmt|;
comment|/* 	 * Only do the HT AMPDU check for WME stations; non-WME HT stations 	 * shouldn't exist outside of debugging. We should at least 	 * handle that. 	 */
if|if
condition|(
name|tid
operator|<
name|WME_NUM_TID
condition|)
block|{
name|rap
operator|=
operator|&
name|ni
operator|->
name|ni_rx_ampdu
index|[
name|tid
index|]
expr_stmt|;
comment|/* HT nodes currently doing RX AMPDU are always valid */
if|if
condition|(
operator|(
name|ni
operator|->
name|ni_flags
operator|&
name|IEEE80211_NODE_HT
operator|)
operator|&&
operator|(
name|rap
operator|->
name|rxa_flags
operator|&
name|IEEE80211_AGGR_RUNNING
operator|)
condition|)
goto|goto
name|ok
goto|;
block|}
comment|/*	 	 * Otherwise, retries for packets below or equal to the last 	 * seen sequence number should be dropped. 	 */
comment|/* 	 * Treat frame seqnum 4095 as special due to boundary 	 * wrapping conditions. 	 */
if|if
condition|(
name|SEQNO
argument_list|(
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
argument_list|)
operator|==
literal|4095
condition|)
block|{
comment|/* 		 * Drop retransmits on seqnum 4095/current fragment for itself. 		 */
if|if
condition|(
name|SEQ_EQ
argument_list|(
name|rxseq
argument_list|,
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
argument_list|)
operator|&&
operator|(
name|wh
operator|->
name|i_fc
index|[
literal|1
index|]
operator|&
name|IEEE80211_FC1_RETRY
operator|)
condition|)
goto|goto
name|fail
goto|;
comment|/* 		 * Treat any subsequent frame as fine if the last seen frame 		 * is 4095 and it's not a retransmit for the same sequence 		 * number. However, this doesn't capture incorrectly ordered 	 	 * fragments w/ sequence number 4095. It shouldn't be seen 		 * in practice, but see the comment above for further info. 		 */
goto|goto
name|ok
goto|;
block|}
comment|/* 	 * At this point we assume that retransmitted seq/frag numbers below 	 * the current can simply be eliminated. 	 */
if|if
condition|(
operator|(
name|wh
operator|->
name|i_fc
index|[
literal|1
index|]
operator|&
name|IEEE80211_FC1_RETRY
operator|)
operator|&&
name|SEQ_LEQ
argument_list|(
name|rxseq
argument_list|,
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
argument_list|)
condition|)
goto|goto
name|fail
goto|;
name|ok
label|:
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
operator|=
name|rxseq
expr_stmt|;
return|return
literal|1
return|;
name|fail
label|:
comment|/* duplicate, discard */
name|IEEE80211_DISCARD_MAC
argument_list|(
name|vap
argument_list|,
name|IEEE80211_MSG_INPUT
argument_list|,
name|bssid
argument_list|,
literal|"duplicate"
argument_list|,
literal|"seqno<%u,%u> fragno<%u,%u> tid %u"
argument_list|,
name|SEQNO
argument_list|(
name|rxseq
argument_list|)
argument_list|,
name|SEQNO
argument_list|(
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
argument_list|)
argument_list|,
name|FRAGNO
argument_list|(
name|rxseq
argument_list|)
argument_list|,
name|FRAGNO
argument_list|(
name|ni
operator|->
name|ni_rxseqs
index|[
name|tid
index|]
argument_list|)
argument_list|,
name|tid
argument_list|)
expr_stmt|;
name|vap
operator|->
name|iv_stats
operator|.
name|is_rx_dup
operator|++
expr_stmt|;
name|IEEE80211_NODE_STAT
argument_list|(
name|ni
argument_list|,
name|rx_dup
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
undef|#
directive|undef
name|SEQ_LEQ
undef|#
directive|undef
name|SEQ_EQ
undef|#
directive|undef
name|SEQNO
undef|#
directive|undef
name|FRAGNO
block|}
end_function

begin_function_decl
name|void
name|ieee80211_deliver_data
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_defrag
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_realign
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_decap
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_decap1
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_setup_rates
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|rates
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|xrates
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_send_error
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
specifier|const
name|uint8_t
name|mac
index|[
name|IEEE80211_ADDR_LEN
index|]
parameter_list|,
name|int
name|subtype
parameter_list|,
name|int
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_alloc_challenge
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_parse_beacon
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|struct
name|ieee80211_channel
modifier|*
parameter_list|,
name|struct
name|ieee80211_scanparams
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_parse_action
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NET80211_IEEE80211_INPUT_H_ */
end_comment

end_unit

