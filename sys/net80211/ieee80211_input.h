begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2007-2008 Sam Leffler, Errno Consulting  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NET80211_IEEE80211_INPUT_H_
end_ifndef

begin_define
define|#
directive|define
name|_NET80211_IEEE80211_INPUT_H_
end_define

begin_comment
comment|/* Verify the existence and length of __elem or get out. */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_ELEMENT
parameter_list|(
name|__elem
parameter_list|,
name|__maxlen
parameter_list|,
name|_action
parameter_list|)
value|do {	\ 	if ((__elem) == NULL) {						\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "%s", "no " #__elem );			\ 		vap->iv_stats.is_rx_elem_missing++;			\ 		_action;						\ 	} else if ((__elem)[1]> (__maxlen)) {				\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "bad " #__elem " len %d", (__elem)[1]);	\ 		vap->iv_stats.is_rx_elem_toobig++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_LENGTH
parameter_list|(
name|_len
parameter_list|,
name|_minlen
parameter_list|,
name|_action
parameter_list|)
value|do {		\ 	if ((_len)< (_minlen)) {					\ 		IEEE80211_DISCARD(vap, IEEE80211_MSG_ELEMID,		\ 		    wh, NULL, "ie too short, got %d, expected %d",	\ 		    (_len), (_minlen));					\ 		vap->iv_stats.is_rx_elem_toosmall++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|IEEE80211_DEBUG
end_ifdef

begin_function_decl
name|void
name|ieee80211_ssid_mismatch
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|tag
parameter_list|,
name|uint8_t
name|mac
index|[
name|IEEE80211_ADDR_LEN
index|]
parameter_list|,
name|uint8_t
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_SSID
parameter_list|(
name|_ni
parameter_list|,
name|_ssid
parameter_list|,
name|_action
parameter_list|)
value|do {			\ 	if ((_ssid)[1] != 0&&						\ 	    ((_ssid)[1] != (_ni)->ni_esslen ||				\ 	    memcmp((_ssid) + 2, (_ni)->ni_essid, (_ssid)[1]) != 0)) {	\ 		if (ieee80211_msg_input(vap))				\ 			ieee80211_ssid_mismatch(vap, 			\ 			    ieee80211_mgt_subtype_name[subtype>>	\ 				IEEE80211_FC0_SUBTYPE_SHIFT],		\ 				wh->i_addr2, _ssid);			\ 		vap->iv_stats.is_rx_ssidmismatch++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !IEEE80211_DEBUG */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_VERIFY_SSID
parameter_list|(
name|_ni
parameter_list|,
name|_ssid
parameter_list|,
name|_action
parameter_list|)
value|do {			\ 	if ((_ssid)[1] != 0&&						\ 	    ((_ssid)[1] != (_ni)->ni_esslen ||				\ 	    memcmp((_ssid) + 2, (_ni)->ni_essid, (_ssid)[1]) != 0)) {	\ 		vap->iv_stats.is_rx_ssidmismatch++;			\ 		_action;						\ 	}								\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !IEEE80211_DEBUG */
end_comment

begin_comment
comment|/* unalligned little endian access */
end_comment

begin_define
define|#
directive|define
name|LE_READ_2
parameter_list|(
name|p
parameter_list|)
define|\
value|((uint16_t)					\ 	 ((((const uint8_t *)(p))[0]      ) |		\ 	  (((const uint8_t *)(p))[1]<<  8)))
end_define

begin_define
define|#
directive|define
name|LE_READ_4
parameter_list|(
name|p
parameter_list|)
define|\
value|((uint32_t)					\ 	 ((((const uint8_t *)(p))[0]      ) |		\ 	  (((const uint8_t *)(p))[1]<<  8) |		\ 	  (((const uint8_t *)(p))[2]<< 16) |		\ 	  (((const uint8_t *)(p))[3]<< 24)))
end_define

begin_function
specifier|static
name|__inline
name|int
name|iswpaoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WPA_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WPA_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeparam
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|5
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
operator|&&
name|frm
index|[
literal|6
index|]
operator|==
name|WME_PARAM_OUI_SUBTYPE
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|iswmeinfo
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|5
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|WME_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|WME_OUI
operator|)
operator|&&
name|frm
index|[
literal|6
index|]
operator|==
name|WME_INFO_OUI_SUBTYPE
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|isatherosoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|ATH_OUI_TYPE
operator|<<
literal|24
operator|)
operator||
name|ATH_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|ishtcapoui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|BCM_OUI_HTCAP
operator|<<
literal|24
operator|)
operator||
name|BCM_OUI
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|ishtinfooui
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|frm
parameter_list|)
block|{
return|return
name|frm
index|[
literal|1
index|]
operator|>
literal|3
operator|&&
name|LE_READ_4
argument_list|(
name|frm
operator|+
literal|2
argument_list|)
operator|==
operator|(
operator|(
name|BCM_OUI_HTINFO
operator|<<
literal|24
operator|)
operator||
name|BCM_OUI
operator|)
return|;
block|}
end_function

begin_function_decl
name|void
name|ieee80211_deliver_data
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_defrag
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_decap
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_decap1
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|ieee80211_decap_fastframe
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_setup_rates
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|rates
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|xrates
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_send_error
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
specifier|const
name|uint8_t
name|mac
index|[
name|IEEE80211_ADDR_LEN
index|]
parameter_list|,
name|int
name|subtype
parameter_list|,
name|int
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_alloc_challenge
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_parse_ath
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_parse_beacon
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|,
name|struct
name|ieee80211_scanparams
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ieee80211_parse_action
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NET80211_IEEE80211_INPUT_H_ */
end_comment

end_unit

