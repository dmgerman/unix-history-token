begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 Rui Paulo<rpaulo@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_enum
enum|enum
name|ieee80211_ratealgs
block|{
name|IEEE80211_RATECTL_AMRR
init|=
literal|0
block|,
name|IEEE80211_RATECTL_RSSADAPT
init|=
literal|1
block|,
name|IEEE80211_RATECTL_ONOE
init|=
literal|2
block|,
name|IEEE80211_RATECTL_SAMPLE
init|=
literal|3
block|,
name|IEEE80211_RATECTL_NONE
init|=
literal|4
block|,
name|IEEE80211_RATECTL_MAX
block|}
enum|;
end_enum

begin_comment
comment|/* used fields for tx_complete() events */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_STATUS_PKTLEN
value|0x00000001
end_define

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_STATUS_FINAL_RATE
value|0x00000002
end_define

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_STATUS_SHORT_RETRY
value|0x00000004
end_define

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_STATUS_LONG_RETRY
value|0x00000008
end_define

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_STATUS_RSSI
value|0x00000010
end_define

begin_comment
comment|/* failure reason */
end_comment

begin_enum
enum|enum
name|ieee80211_ratectl_tx_fail_reason
block|{
name|IEEE80211_RATECTL_TX_SUCCESS
init|=
literal|0
block|,
name|IEEE80211_RATECTL_TX_FAIL_SHORT
init|=
literal|1
block|,
comment|/* too many RTS retries */
name|IEEE80211_RATECTL_TX_FAIL_LONG
init|=
literal|2
block|,
comment|/* too many retries */
name|IEEE80211_RATECTL_TX_FAIL_EXPIRED
init|=
literal|3
block|,
comment|/* lifetime expired */
name|IEEE80211_RATECTL_TX_FAIL_UNSPECIFIED
init|=
literal|4
block|,
comment|/* another reason */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_TX_FAIL_MAX
define|\
value|(IEEE80211_RATECTL_TX_FAIL_UNSPECIFIED + 1)
end_define

begin_struct
struct|struct
name|ieee80211_ratectl_tx_status
block|{
name|uint32_t
name|flags
decl_stmt|;
comment|/* mark used fields */
name|enum
name|ieee80211_ratectl_tx_fail_reason
name|status
decl_stmt|;
comment|/* Tx status */
name|int
name|pktlen
decl_stmt|;
comment|/* frame length */
name|int
name|final_rate
decl_stmt|;
comment|/* transmission rate */
name|uint_fast8_t
name|short_retries
decl_stmt|;
comment|/* RTS/CTS retries */
name|uint_fast8_t
name|long_retries
decl_stmt|;
comment|/* ACK retries */
name|int8_t
name|rssi
decl_stmt|;
comment|/* ACK RSSI */
name|uint8_t
name|spare
index|[
literal|15
index|]
decl_stmt|;
comment|/* for future use */
block|}
struct|;
end_struct

begin_comment
comment|/* used fields for tx_update() events */
end_comment

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_TX_STATS_NODE
value|0x00000001
end_define

begin_define
define|#
directive|define
name|IEEE80211_RATECTL_TX_STATS_RETRIES
value|0x00000002
end_define

begin_struct
struct|struct
name|ieee80211_ratectl_tx_stats
block|{
name|uint32_t
name|flags
decl_stmt|;
comment|/* mark used fields */
name|struct
name|ieee80211_node
modifier|*
name|ni
decl_stmt|;
comment|/* receiver */
name|int
name|nframes
decl_stmt|;
comment|/* transmitted frames */
name|int
name|nsuccess
decl_stmt|;
comment|/* ACKed frames */
name|int
name|nretries
decl_stmt|;
comment|/* number of retries */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee80211_ratectl
block|{
specifier|const
name|char
modifier|*
name|ir_name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ir_attach
function_decl|)
parameter_list|(
specifier|const
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_detach
function_decl|)
parameter_list|(
specifier|const
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_init
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_deinit
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_node_init
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_node_deinit
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ir_rate
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_tx_complete
function_decl|)
parameter_list|(
specifier|const
name|struct
name|ieee80211_node
modifier|*
parameter_list|,
specifier|const
name|struct
name|ieee80211_ratectl_tx_status
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_tx_update
function_decl|)
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|struct
name|ieee80211_ratectl_tx_stats
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_setinterval
function_decl|)
parameter_list|(
specifier|const
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ir_node_stats
function_decl|)
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
name|struct
name|sbuf
modifier|*
name|s
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|ieee80211_ratectl_register
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|ieee80211_ratectl
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ratectl_unregister
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ratectl_init
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ieee80211_ratectl_set
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_80211_RATECTL
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_deinit
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
name|vap
parameter_list|)
block|{
name|vap
operator|->
name|iv_rate
operator|->
name|ir_deinit
argument_list|(
name|vap
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_node_init
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|)
block|{
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_node_init
argument_list|(
name|ni
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_node_deinit
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|)
block|{
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_node_deinit
argument_list|(
name|ni
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|int
name|__inline
name|ieee80211_ratectl_rate
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|uint32_t
name|iarg
parameter_list|)
block|{
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
return|return
name|vap
operator|->
name|iv_rate
operator|->
name|ir_rate
argument_list|(
name|ni
argument_list|,
name|arg
argument_list|,
name|iarg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_tx_complete
parameter_list|(
specifier|const
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
specifier|const
name|struct
name|ieee80211_ratectl_tx_status
modifier|*
name|status
parameter_list|)
block|{
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_tx_complete
argument_list|(
name|ni
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_tx_update
parameter_list|(
name|struct
name|ieee80211vap
modifier|*
name|vap
parameter_list|,
name|struct
name|ieee80211_ratectl_tx_stats
modifier|*
name|stats
parameter_list|)
block|{
if|if
condition|(
name|vap
operator|->
name|iv_rate
operator|->
name|ir_tx_update
operator|==
name|NULL
condition|)
return|return;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_tx_update
argument_list|(
name|vap
argument_list|,
name|stats
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_setinterval
parameter_list|(
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
parameter_list|,
name|int
name|msecs
parameter_list|)
block|{
if|if
condition|(
name|vap
operator|->
name|iv_rate
operator|->
name|ir_setinterval
operator|==
name|NULL
condition|)
return|return;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_setinterval
argument_list|(
name|vap
argument_list|,
name|msecs
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|ieee80211_ratectl_node_stats
parameter_list|(
name|struct
name|ieee80211_node
modifier|*
name|ni
parameter_list|,
name|struct
name|sbuf
modifier|*
name|s
parameter_list|)
block|{
specifier|const
name|struct
name|ieee80211vap
modifier|*
name|vap
init|=
name|ni
operator|->
name|ni_vap
decl_stmt|;
if|if
condition|(
name|vap
operator|->
name|iv_rate
operator|->
name|ir_node_stats
operator|==
name|NULL
condition|)
return|return;
name|vap
operator|->
name|iv_rate
operator|->
name|ir_node_stats
argument_list|(
name|ni
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

