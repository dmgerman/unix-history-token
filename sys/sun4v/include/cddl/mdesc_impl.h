begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MDESC_IMPL_H_
end_ifndef

begin_define
define|#
directive|define
name|_MDESC_IMPL_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|LIBMD_MAGIC
value|0x4d61636844657363ULL
comment|/* MachDesc */
ifndef|#
directive|ifndef
name|_ASM
comment|/* 	 * Internal definitions 	 */
comment|/*  * Each MD has the following header to  * provide information about each section of the MD.  *  * There are 3 sections:  * The description list, the name table and the data block.  *  * All values are stored in network byte order.  *  * Elements in the first (description list) section are defined by their  * index location within the node block. An index is simply the byte offset  * within the block / element size (16bytes). All elements are refered to  * by their index, to avoid bugs related to alignment etc.  *  * The name_len field holds the storage length of an ASCII name, NOT the strlen.  * The header fields are written in network  * byte order.  */
struct|struct
name|md_header_s
block|{
name|uint32_t
name|transport_version
decl_stmt|;
name|uint32_t
name|node_blk_sz
decl_stmt|;
comment|/* size in bytes of the node block */
name|uint32_t
name|name_blk_sz
decl_stmt|;
comment|/* size in bytes of the name block */
name|uint32_t
name|data_blk_sz
decl_stmt|;
comment|/* size in bytes of the data block */
block|}
struct|;
typedef|typedef
name|struct
name|md_header_s
name|md_header_t
typedef|;
if|#
directive|if
name|defined
argument_list|(
name|_BIG_ENDIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|lint
argument_list|)
define|#
directive|define
name|mdtoh8
parameter_list|(
name|x
parameter_list|)
value|((uint8_t)(x))
define|#
directive|define
name|mdtoh16
parameter_list|(
name|x
parameter_list|)
value|((uint16_t)(x))
define|#
directive|define
name|mdtoh32
parameter_list|(
name|x
parameter_list|)
value|((uint32_t)(x))
define|#
directive|define
name|mdtoh64
parameter_list|(
name|x
parameter_list|)
value|((uint64_t)(x))
define|#
directive|define
name|htomd8
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htomd16
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htomd32
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|htomd64
parameter_list|(
name|x
parameter_list|)
value|(x)
else|#
directive|else
define|#
directive|define
name|mdtoh8
parameter_list|(
name|x
parameter_list|)
value|((uint8_t)(x))
specifier|extern
name|uint16_t
name|mdtoh16
parameter_list|(
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|mdtoh32
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|mdtoh64
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
define|#
directive|define
name|htomd8
parameter_list|(
name|x
parameter_list|)
value|((uint8_t)(x))
specifier|extern
name|uint16_t
name|htomd16
parameter_list|(
name|uint16_t
parameter_list|)
function_decl|;
specifier|extern
name|uint32_t
name|htomd32
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|htomd64
parameter_list|(
name|uint64_t
parameter_list|)
function_decl|;
endif|#
directive|endif
struct|struct
name|MD_ELEMENT
block|{
name|uint8_t
name|tag
decl_stmt|;
name|uint8_t
name|name_len
decl_stmt|;
name|uint16_t
name|_reserved
decl_stmt|;
name|uint32_t
name|name_offset
decl_stmt|;
comment|/* mde_str_cookie_t */
union|union
block|{
struct|struct
block|{
name|uint32_t
name|len
decl_stmt|;
name|uint32_t
name|offset
decl_stmt|;
block|}
name|prop_data
struct|;
comment|/* for PROP_DATA and PROP_STR */
name|uint64_t
name|prop_val
decl_stmt|;
comment|/* for PROP_VAL */
name|uint64_t
name|prop_idx
decl_stmt|;
comment|/* for PROP_ARC and NODE */
block|}
name|d
union|;
block|}
struct|;
typedef|typedef
name|struct
name|MD_ELEMENT
name|md_element_t
typedef|;
struct|struct
name|MACHINE_DESCRIPTION
block|{
name|caddr_t
name|caddr
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|allocp
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|freep
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|md_header_t
modifier|*
name|headerp
decl_stmt|;
name|md_element_t
modifier|*
name|mdep
decl_stmt|;
name|char
modifier|*
name|namep
decl_stmt|;
name|uint8_t
modifier|*
name|datap
decl_stmt|;
name|int
name|node_blk_size
decl_stmt|;
name|int
name|name_blk_size
decl_stmt|;
name|int
name|data_blk_size
decl_stmt|;
name|int
name|element_count
decl_stmt|;
name|int
name|node_count
decl_stmt|;
name|mde_cookie_t
name|root_node
decl_stmt|;
name|int
name|size
decl_stmt|;
name|uint64_t
name|gen
decl_stmt|;
name|uint64_t
name|md_magic
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|MACHINE_DESCRIPTION
name|md_impl_t
typedef|;
define|#
directive|define
name|MDE_TAG
parameter_list|(
name|_p
parameter_list|)
value|mdtoh8((_p)->tag)
define|#
directive|define
name|MDE_NAME
parameter_list|(
name|_p
parameter_list|)
value|mdtoh32((_p)->name_offset)
define|#
directive|define
name|MDE_NAME_LEN
parameter_list|(
name|_p
parameter_list|)
value|mdtoh32((_p)->name_len)
define|#
directive|define
name|MDE_PROP_DATA_OFFSET
parameter_list|(
name|_p
parameter_list|)
value|mdtoh32((_p)->d.prop_data.offset)
define|#
directive|define
name|MDE_PROP_DATA_LEN
parameter_list|(
name|_p
parameter_list|)
value|mdtoh32((_p)->d.prop_data.len)
define|#
directive|define
name|MDE_PROP_VALUE
parameter_list|(
name|_p
parameter_list|)
value|mdtoh64((_p)->d.prop_val)
define|#
directive|define
name|MDE_PROP_INDEX
parameter_list|(
name|_p
parameter_list|)
value|mdtoh64((_p)->d.prop_idx)
specifier|extern
name|mde_str_cookie_t
name|md_ident_name_str
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|mde_cookie_t
name|md_find_node_prop
parameter_list|(
name|md_impl_t
modifier|*
parameter_list|,
name|mde_cookie_t
parameter_list|,
name|mde_str_cookie_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* _ASM */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MDESC_IMPL_H_ */
end_comment

end_unit

