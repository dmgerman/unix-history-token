begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1996, 1997, 1998, 2001 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jason R. Thorpe of the Numerical Aerospace Simulation Facility,  * NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the NetBSD  *	Foundation, Inc. and its contributors.  * 4. Neither the name of The NetBSD Foundation nor the names of its  *    contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*  * Copyright (c) 1997-1999 Eduardo E. Horvath. All rights reserved.  * Copyright (c) 1996 Charles M. Hannum.  All rights reserved.  * Copyright (c) 1996 Christopher G. Demetriou.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *      This product includes software developed by Christopher G. Demetriou  *	for the NetBSD Project.  * 4. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * 	from: NetBSD: bus.h,v 1.28 2001/07/19 15:32:19 thorpej Exp  *	and  *	from: FreeBSD: src/sys/alpha/include/bus.h,v 1.9 2001/01/09  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MACHINE_BUS_H_
end_ifndef

begin_define
define|#
directive|define
name|_MACHINE_BUS_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|BUS_SPACE_DEBUG
end_ifdef

begin_include
include|#
directive|include
file|<sys/ktr.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<machine/_bus.h>
end_include

begin_include
include|#
directive|include
file|<machine/cpufunc.h>
end_include

begin_include
include|#
directive|include
file|<machine/upa.h>
end_include

begin_comment
comment|/*  * UPA and SBUS spaces are non-cached and big endian  * (except for RAM and PROM)  *  * PCI spaces are non-cached and little endian  */
end_comment

begin_define
define|#
directive|define
name|UPA_BUS_SPACE
value|0
end_define

begin_define
define|#
directive|define
name|SBUS_BUS_SPACE
value|1
end_define

begin_define
define|#
directive|define
name|PCI_CONFIG_BUS_SPACE
value|2
end_define

begin_define
define|#
directive|define
name|PCI_IO_BUS_SPACE
value|3
end_define

begin_define
define|#
directive|define
name|PCI_MEMORY_BUS_SPACE
value|4
end_define

begin_define
define|#
directive|define
name|LAST_BUS_SPACE
value|5
end_define

begin_decl_stmt
specifier|extern
name|int
name|bus_type_asi
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bus_stream_asi
index|[]
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|__BUS_SPACE_HAS_STREAM_METHODS
value|1
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXSIZE
value|0xFFFFFFFFFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_24BIT
value|0xFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR_32BIT
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAXADDR
value|0xFFFFFFFF
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_UNRESTRICTED
value|(~0)
end_define

begin_comment
comment|/*  * Access methods for bus resources and address space.  */
end_comment

begin_struct
struct|struct
name|bus_space_tag
block|{
name|void
modifier|*
name|bst_cookie
decl_stmt|;
name|bus_space_tag_t
name|bst_parent
decl_stmt|;
name|int
name|bst_type
decl_stmt|;
name|void
function_decl|(
modifier|*
name|bst_bus_barrier
function_decl|)
parameter_list|(
name|bus_space_tag_t
parameter_list|,
name|bus_space_handle_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Bus space function prototypes.  */
end_comment

begin_function_decl
specifier|static
name|void
name|bus_space_barrier
parameter_list|(
name|bus_space_tag_t
parameter_list|,
name|bus_space_handle_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|bus_space_subregion
parameter_list|(
name|bus_space_tag_t
parameter_list|,
name|bus_space_handle_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_size_t
parameter_list|,
name|bus_space_handle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Map a region of device bus space into CPU virtual address space.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|bus_space_map
parameter_list|(
name|bus_space_tag_t
name|t
name|__unused
parameter_list|,
name|bus_addr_t
name|addr
parameter_list|,
name|bus_size_t
name|size
name|__unused
parameter_list|,
name|int
name|flags
name|__unused
parameter_list|,
name|bus_space_handle_t
modifier|*
name|bshp
parameter_list|)
block|{
operator|*
name|bshp
operator|=
name|addr
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Unmap a region of device bus space.  */
end_comment

begin_function_decl
specifier|static
name|__inline
name|void
name|bus_space_unmap
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|bsh
parameter_list|,
name|bus_size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|bus_space_unmap
parameter_list|(
name|bus_space_tag_t
name|t
name|__unused
parameter_list|,
name|bus_space_handle_t
name|bsh
name|__unused
parameter_list|,
name|bus_size_t
name|size
name|__unused
parameter_list|)
block|{ }
end_function

begin_comment
comment|/* This macro finds the first "upstream" implementation of method `f' */
end_comment

begin_define
define|#
directive|define
name|_BS_CALL
parameter_list|(
name|t
parameter_list|,
name|f
parameter_list|)
define|\
value|while (t->f == NULL)						\ 		t = t->bst_parent;						\ 	return (*(t)->f)
end_define

begin_function
specifier|static
name|__inline
name|void
name|bus_space_barrier
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|bus_size_t
name|s
parameter_list|,
name|int
name|f
parameter_list|)
block|{
name|_BS_CALL
argument_list|(
name|t
argument_list|,
name|bst_bus_barrier
argument_list|)
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|s
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|bus_space_subregion
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|bus_size_t
name|s
parameter_list|,
name|bus_space_handle_t
modifier|*
name|hp
parameter_list|)
block|{
operator|*
name|hp
operator|=
name|h
operator|+
name|o
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/* flags for bus space map functions */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_CACHEABLE
value|0x0001
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_LINEAR
value|0x0002
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_READONLY
value|0x0004
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_PREFETCHABLE
value|0x0008
end_define

begin_comment
comment|/* placeholders for bus functions... */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS1
value|0x0100
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS2
value|0x0200
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS3
value|0x0400
end_define

begin_define
define|#
directive|define
name|BUS_SPACE_MAP_BUS4
value|0x0800
end_define

begin_comment
comment|/* flags for bus_space_barrier() */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_READ
value|0x01
end_define

begin_comment
comment|/* force read barrier */
end_comment

begin_define
define|#
directive|define
name|BUS_SPACE_BARRIER_WRITE
value|0x02
end_define

begin_comment
comment|/* force write barrier */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|BUS_SPACE_DEBUG
end_ifdef

begin_define
define|#
directive|define
name|KTR_BUS
value|KTR_CT2
end_define

begin_define
define|#
directive|define
name|BUS_HANDLE_MIN
value|UPA_MEMSTART
end_define

begin_define
define|#
directive|define
name|__BUS_DEBUG_ACCESS
parameter_list|(
name|h
parameter_list|,
name|o
parameter_list|,
name|desc
parameter_list|,
name|sz
parameter_list|)
value|do {				\ 	CTR4(KTR_BUS, "bus space: %s %d: handle %#lx, offset %#lx",	\ 	    (desc), (sz), (h), (o));					\ 	if ((h) + (o)< BUS_HANDLE_MIN)					\ 		panic("bus space access at %#lx out of range",		\ 		    (h) + (o));						\ } while (0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__BUS_DEBUG_ACCESS
parameter_list|(
name|h
parameter_list|,
name|o
parameter_list|,
name|desc
parameter_list|,
name|sz
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|uint8_t
name|bus_space_read_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduba_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint16_t
name|bus_space_read_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduha_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|bus_space_read_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduwa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|bus_space_read_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
operator|(
name|ldxa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stba_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stha_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|stwa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|stxa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_type_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int8_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
operator|*
name|a
operator|=
name|bus_space_read_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int16_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
operator|*
name|a
operator|=
name|bus_space_read_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int32_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
operator|*
name|a
operator|=
name|bus_space_read_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int64_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
operator|*
name|a
operator|=
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int64_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int8_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int16_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int32_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int64_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|++
operator|,
name|o2
operator|++
control|)
name|bus_space_write_1
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_1
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|2
operator|,
name|o2
operator|+=
literal|2
control|)
name|bus_space_write_2
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_2
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|4
operator|,
name|o2
operator|+=
literal|4
control|)
name|bus_space_write_4
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_4
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|8
operator|,
name|o2
operator|+=
literal|8
control|)
name|bus_space_write_8
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint8_t
name|bus_space_read_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read stream"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduba_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint16_t
name|bus_space_read_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read stream"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduha_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|bus_space_read_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read stream"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
operator|(
name|lduwa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|bus_space_read_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"read stream"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
operator|(
name|ldxa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_multi_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
operator|*
name|a
operator|++
operator|=
name|bus_space_read_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write stream"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|stba_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write stream"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|stha_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write stream"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|stwa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
name|v
parameter_list|)
block|{
name|__BUS_DEBUG_ACCESS
argument_list|(
name|h
argument_list|,
name|o
argument_list|,
literal|"write stream"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|stxa_nc
argument_list|(
call|(
name|caddr_t
call|)
argument_list|(
name|h
operator|+
name|o
argument_list|)
argument_list|,
name|bus_stream_asi
index|[
name|t
operator|->
name|bst_type
index|]
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|uint16_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|uint32_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_multi_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|uint64_t
modifier|*
name|a
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint8_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint16_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint32_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_multi_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|uint64_t
name|v
parameter_list|,
name|size_t
name|c
parameter_list|)
block|{
while|while
condition|(
name|c
operator|--
operator|>
literal|0
condition|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int8_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int16_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int32_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_read_region_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
name|u_int64_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
operator|*
name|a
operator|=
name|bus_space_read_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int16_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int32_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_write_region_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int64_t
modifier|*
name|a
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|a
operator|++
operator|,
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
operator|*
name|a
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int8_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int16_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int32_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_set_region_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h
parameter_list|,
name|bus_size_t
name|o
parameter_list|,
specifier|const
name|u_int64_t
name|v
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h
argument_list|,
name|o
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_stream_1
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|++
operator|,
name|o2
operator|++
control|)
name|bus_space_write_stream_1
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_1
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_stream_2
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|2
operator|,
name|o2
operator|+=
literal|2
control|)
name|bus_space_write_stream_2
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_2
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_stream_4
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|4
operator|,
name|o2
operator|+=
literal|4
control|)
name|bus_space_write_stream_4
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_stream_4
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bus_space_copy_region_stream_8
parameter_list|(
name|bus_space_tag_t
name|t
parameter_list|,
name|bus_space_handle_t
name|h1
parameter_list|,
name|bus_size_t
name|o1
parameter_list|,
name|bus_space_handle_t
name|h2
parameter_list|,
name|bus_size_t
name|o2
parameter_list|,
name|bus_size_t
name|c
parameter_list|)
block|{
for|for
control|(
init|;
name|c
condition|;
name|c
operator|--
operator|,
name|o1
operator|+=
literal|8
operator|,
name|o2
operator|+=
literal|8
control|)
name|bus_space_write_stream_8
argument_list|(
name|t
argument_list|,
name|h1
argument_list|,
name|o1
argument_list|,
name|bus_space_read_8
argument_list|(
name|t
argument_list|,
name|h2
argument_list|,
name|o2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Back-compat functions for old ISA drivers */
end_comment

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|isa_io_bt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_handle_t
name|isa_io_hdl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_tag_t
name|isa_mem_bt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bus_space_handle_t
name|isa_mem_hdl
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|inb
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_1(isa_io_bt, isa_io_hdl, o)
end_define

begin_define
define|#
directive|define
name|inw
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_2(isa_io_bt, isa_io_hdl, o)
end_define

begin_define
define|#
directive|define
name|inl
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_4(isa_io_bt, isa_io_hdl, o)
end_define

begin_define
define|#
directive|define
name|outb
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_1(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|outw
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_2(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|outl
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_4(isa_io_bt, isa_io_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|readb
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_1(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|readw
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_2(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|readl
parameter_list|(
name|o
parameter_list|)
value|bus_space_read_4(isa_mem_bt, isa_mem_hdl, o)
end_define

begin_define
define|#
directive|define
name|writeb
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_1(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|writew
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_2(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|writel
parameter_list|(
name|o
parameter_list|,
name|v
parameter_list|)
value|bus_space_write_4(isa_mem_bt, isa_mem_hdl, o, v)
end_define

begin_define
define|#
directive|define
name|insb
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_1(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|insw
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_2(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|insl
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_multi_4(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsb
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_1(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsw
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_2(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|outsl
parameter_list|(
name|o
parameter_list|,
name|a
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_multi_4(isa_io_bt, isa_io_hdl, o, (void*)a, c)
end_define

begin_define
define|#
directive|define
name|memcpy_fromio
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_read_region_1(isa_mem_bt, isa_mem_hdl, s, d, c)
end_define

begin_define
define|#
directive|define
name|memcpy_toio
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_write_region_1(isa_mem_bt, isa_mem_hdl, d, s, c)
end_define

begin_define
define|#
directive|define
name|memcpy_io
parameter_list|(
name|d
parameter_list|,
name|s
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_copy_region_1(isa_mem_bt, isa_mem_hdl, s, isa_mem_hdl, d, c)
end_define

begin_define
define|#
directive|define
name|memset_io
parameter_list|(
name|d
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_1(isa_mem_bt, isa_mem_hdl, d, v, c)
end_define

begin_define
define|#
directive|define
name|memsetw_io
parameter_list|(
name|d
parameter_list|,
name|v
parameter_list|,
name|c
parameter_list|)
define|\
value|bus_space_set_region_2(isa_mem_bt, isa_mem_hdl, d, v, c)
end_define

begin_function
specifier|static
name|__inline
name|void
name|memsetw
parameter_list|(
name|void
modifier|*
name|d
parameter_list|,
name|int
name|val
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|u_int16_t
modifier|*
name|sp
init|=
name|d
decl_stmt|;
while|while
condition|(
name|size
operator|--
condition|)
operator|*
name|sp
operator|++
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_include
include|#
directive|include
file|<machine/bus_dma.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_MACHINE_BUS_H_ */
end_comment

end_unit

