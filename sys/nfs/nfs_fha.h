begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008 Isilon Inc http://www.isilon.com/  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NFS_FHA_H
end_ifndef

begin_define
define|#
directive|define
name|_NFS_FHA_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|_KERNEL
end_ifdef

begin_comment
comment|/* Sysctl defaults. */
end_comment

begin_define
define|#
directive|define
name|FHA_DEF_ENABLE
value|1
end_define

begin_define
define|#
directive|define
name|FHA_DEF_READ
value|1
end_define

begin_define
define|#
directive|define
name|FHA_DEF_WRITE
value|1
end_define

begin_define
define|#
directive|define
name|FHA_DEF_BIN_SHIFT
value|22
end_define

begin_comment
comment|/* 4MB */
end_comment

begin_define
define|#
directive|define
name|FHA_DEF_MAX_NFSDS_PER_FH
value|8
end_define

begin_define
define|#
directive|define
name|FHA_DEF_MAX_REQS_PER_NFSD
value|0
end_define

begin_comment
comment|/* Unlimited */
end_comment

begin_define
define|#
directive|define
name|FHA_HASH_SIZE
value|251
end_define

begin_struct
struct|struct
name|fha_ctls
block|{
name|int
name|enable
decl_stmt|;
name|int
name|read
decl_stmt|;
name|int
name|write
decl_stmt|;
name|uint32_t
name|bin_shift
decl_stmt|;
name|uint32_t
name|max_nfsds_per_fh
decl_stmt|;
name|uint32_t
name|max_reqs_per_nfsd
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * These are the entries in the filehandle hash.  They talk about a specific  * file, requests against which are being handled by one or more nfsds.  We  * keep a chain of nfsds against the file. We only have more than one if reads  * are ongoing, and then only if the reads affect disparate regions of the  * file.  *  * In general, we want to assign a new request to an existing nfsd if it is  * going to contend with work happening already on that nfsd, or if the  * operation is a read and the nfsd is already handling a proximate read.  We  * do this to avoid jumping around in the read stream unnecessarily, and to  * avoid contention between threads over single files.  */
end_comment

begin_struct
struct|struct
name|fha_hash_entry
block|{
name|struct
name|mtx
modifier|*
name|mtx
decl_stmt|;
name|LIST_ENTRY
argument_list|(
argument|fha_hash_entry
argument_list|)
name|link
expr_stmt|;
name|u_int64_t
name|fh
decl_stmt|;
name|u_int32_t
name|num_rw
decl_stmt|;
name|u_int32_t
name|num_exclusive
decl_stmt|;
name|u_int8_t
name|num_threads
decl_stmt|;
name|struct
name|svcthread_list
name|threads
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|LIST_HEAD
argument_list|(
name|fha_hash_entry_list
argument_list|,
name|fha_hash_entry
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|fha_hash_slot
block|{
name|struct
name|fha_hash_entry_list
name|list
decl_stmt|;
name|struct
name|mtx
name|mtx
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A structure used for passing around data internally. */
end_comment

begin_struct
struct|struct
name|fha_info
block|{
name|u_int64_t
name|fh
decl_stmt|;
name|off_t
name|offset
decl_stmt|;
name|int
name|locktype
decl_stmt|;
name|int
name|read
decl_stmt|;
name|int
name|write
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fha_callbacks
block|{
name|rpcproc_t
function_decl|(
modifier|*
name|get_procnum
function_decl|)
parameter_list|(
name|rpcproc_t
name|procnum
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|realign
function_decl|)
parameter_list|(
name|struct
name|mbuf
modifier|*
modifier|*
name|mb
parameter_list|,
name|int
name|malloc_flags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_fh
function_decl|)
parameter_list|(
name|uint64_t
modifier|*
name|fh
parameter_list|,
name|int
name|v3
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
name|md
parameter_list|,
name|caddr_t
modifier|*
name|dpos
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_read
function_decl|)
parameter_list|(
name|rpcproc_t
name|procnum
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|is_write
function_decl|)
parameter_list|(
name|rpcproc_t
name|procnum
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_offset
function_decl|)
parameter_list|(
name|struct
name|mbuf
modifier|*
modifier|*
name|md
parameter_list|,
name|caddr_t
modifier|*
name|dpos
parameter_list|,
name|int
name|v3
parameter_list|,
name|struct
name|fha_info
modifier|*
name|info
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|no_offset
function_decl|)
parameter_list|(
name|rpcproc_t
name|procnum
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|set_locktype
function_decl|)
parameter_list|(
name|rpcproc_t
name|procnum
parameter_list|,
name|struct
name|fha_info
modifier|*
name|info
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|fhe_stats_sysctl
function_decl|)
parameter_list|(
name|SYSCTL_HANDLER_ARGS
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|fha_params
block|{
name|struct
name|fha_hash_slot
name|fha_hash
index|[
name|FHA_HASH_SIZE
index|]
decl_stmt|;
name|struct
name|sysctl_ctx_list
name|sysctl_ctx
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|sysctl_tree
decl_stmt|;
name|struct
name|fha_ctls
name|ctls
decl_stmt|;
name|struct
name|fha_callbacks
name|callbacks
decl_stmt|;
name|char
name|server_name
index|[
literal|32
index|]
decl_stmt|;
name|SVCPOOL
modifier|*
modifier|*
name|pool
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|fha_nd_complete
parameter_list|(
name|SVCTHREAD
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|SVCTHREAD
modifier|*
name|fha_assign
parameter_list|(
name|SVCTHREAD
modifier|*
parameter_list|,
name|struct
name|svc_req
modifier|*
parameter_list|,
name|struct
name|fha_params
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fha_init
parameter_list|(
name|struct
name|fha_params
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fha_uninit
parameter_list|(
name|struct
name|fha_params
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fhe_stats_sysctl
parameter_list|(
name|SYSCTL_HANDLER_ARGS
parameter_list|,
name|struct
name|fha_params
modifier|*
name|softc
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KERNEL */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NFS_FHA_H_ */
end_comment

end_unit

