begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990,1991 Regents of The University of Michigan.  * All Rights Reserved.  *  * Permission to use, copy, modify, and distribute this software and  * its documentation for any purpose and without fee is hereby granted,  * provided that the above copyright notice appears in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation, and that the name of The University  * of Michigan not be used in advertising or publicity pertaining to  * distribution of the software without specific, written prior  * permission. This software is supplied as is without expressed or  * implied warranties of any kind.  *  *	Research Systems Unix Group  *	The University of Michigan  *	c/o Mike Clark  *	535 W. William Street  *	Ann Arbor, Michigan  *	+1-313-763-0525  *	netatalk@itd.umich.edu  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETATALK_DDP_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETATALK_DDP_H_
value|1
end_define

begin_comment
comment|/*  *<-1byte(8bits) ->  * +---------------+  * | 0 | hopc  |len|  * +---------------+  * | len (cont)    |  * +---------------+  * |               |  * +- DDP csum    -+  * |               |  * +---------------+  * |               |  * +- Dest NET    -+  * |               |  * +---------------+  * |               |  * +- Src NET     -+  * |               |  * +---------------+  * | Dest NODE     |  * +---------------+  * | Src NODE      |  * +---------------+  * | Dest PORT     |  * +---------------+  * | Src PORT      |  * +---------------+  *  * On Apples, there is also a ddp_type field, after src_port. However,  * under this unix implementation, user level processes need to be able  * to set the ddp_type. In later revisions, the ddp_type may only be  * available in a raw_appletalk interface.  */
end_comment

begin_struct
struct|struct
name|elaphdr
block|{
name|u_char
name|el_dnode
decl_stmt|;
name|u_char
name|el_snode
decl_stmt|;
name|u_char
name|el_type
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SZ_ELAPHDR
value|3
end_define

begin_define
define|#
directive|define
name|ELAP_DDPSHORT
value|0x01
end_define

begin_define
define|#
directive|define
name|ELAP_DDPEXTEND
value|0x02
end_define

begin_comment
comment|/*  * Extended DDP header. Includes sickness for dealing with arbitrary  * bitfields on a little-endian arch.  */
end_comment

begin_struct
struct|struct
name|ddpehdr
block|{
union|union
block|{
struct|struct
block|{
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
name|unsigned
name|dub_pad
range|:
literal|2
decl_stmt|;
name|unsigned
name|dub_hops
range|:
literal|4
decl_stmt|;
name|unsigned
name|dub_len
range|:
literal|10
decl_stmt|;
name|unsigned
name|dub_sum
range|:
literal|16
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|BYTE_ORDER
operator|==
name|LITTLE_ENDIAN
name|unsigned
name|dub_sum
range|:
literal|16
decl_stmt|;
name|unsigned
name|dub_len
range|:
literal|10
decl_stmt|;
name|unsigned
name|dub_hops
range|:
literal|4
decl_stmt|;
name|unsigned
name|dub_pad
range|:
literal|2
decl_stmt|;
endif|#
directive|endif
block|}
name|du_bits
struct|;
name|unsigned
name|du_bytes
decl_stmt|;
block|}
name|deh_u
union|;
define|#
directive|define
name|deh_pad
value|deh_u.du_bits.dub_pad
define|#
directive|define
name|deh_hops
value|deh_u.du_bits.dub_hops
define|#
directive|define
name|deh_len
value|deh_u.du_bits.dub_len
define|#
directive|define
name|deh_sum
value|deh_u.du_bits.dub_sum
define|#
directive|define
name|deh_bytes
value|deh_u.du_bytes
name|u_short
name|deh_dnet
decl_stmt|;
name|u_short
name|deh_snet
decl_stmt|;
name|u_char
name|deh_dnode
decl_stmt|;
name|u_char
name|deh_snode
decl_stmt|;
name|u_char
name|deh_dport
decl_stmt|;
name|u_char
name|deh_sport
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DDP_MAXHOPS
value|15
end_define

begin_struct
struct|struct
name|ddpshdr
block|{
union|union
block|{
struct|struct
block|{
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
name|unsigned
name|dub_pad
range|:
literal|6
decl_stmt|;
name|unsigned
name|dub_len
range|:
literal|10
decl_stmt|;
name|unsigned
name|dub_dport
range|:
literal|8
decl_stmt|;
name|unsigned
name|dub_sport
range|:
literal|8
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|BYTE_ORDER
operator|==
name|LITTLE_ENDIAN
name|unsigned
name|dub_sport
range|:
literal|8
decl_stmt|;
name|unsigned
name|dub_dport
range|:
literal|8
decl_stmt|;
name|unsigned
name|dub_len
range|:
literal|10
decl_stmt|;
name|unsigned
name|dub_pad
range|:
literal|6
decl_stmt|;
endif|#
directive|endif
block|}
name|du_bits
struct|;
name|unsigned
name|du_bytes
decl_stmt|;
block|}
name|dsh_u
union|;
define|#
directive|define
name|dsh_pad
value|dsh_u.du_bits.dub_pad
define|#
directive|define
name|dsh_len
value|dsh_u.du_bits.dub_len
define|#
directive|define
name|dsh_dport
value|dsh_u.du_bits.dub_dport
define|#
directive|define
name|dsh_sport
value|dsh_u.du_bits.dub_sport
define|#
directive|define
name|dsh_bytes
value|dsh_u.du_bytes
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NETATALK_DDP_H_ */
end_comment

end_unit

