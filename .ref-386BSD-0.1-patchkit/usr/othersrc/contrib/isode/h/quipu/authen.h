begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* authen.h - parameters for strong authentication */
end_comment

begin_comment
comment|/*  * $Header: /f/osi/h/quipu/RCS/authen.h,v 7.4 91/03/09 11:54:04 mrose Exp $  *  *  *  * $Log:	authen.h,v $  * Revision 7.4  91/03/09  11:54:04  mrose  * update  *   * Revision 7.3  91/02/22  09:25:26  mrose  * Interim 6.8  *   * Revision 7.2  90/11/20  15:30:21  mrose  * cjr  *   * Revision 7.1  90/10/17  11:46:15  mrose  * sync  *   * Revision 7.0  89/11/23  21:56:23  mrose  * Release 6.0  *   */
end_comment

begin_comment
comment|/*  *				  NOTICE  *  *    Acquisition, use, and distribution of this module and related  *    materials are subject to the restrictions of a license agreement.  *    Consult the Preface in the User's Manual for the full terms of  *    this agreement.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|QUIPUAUTHEN
end_ifndef

begin_define
define|#
directive|define
name|QUIPUAUTHEN
end_define

begin_include
include|#
directive|include
file|"quipu/name.h"
end_include

begin_comment
comment|/* Structures for strong authentication */
end_comment

begin_struct
struct|struct
name|alg_id
block|{
name|OID
name|algorithm
decl_stmt|;
name|PE
name|asn
decl_stmt|;
name|int
name|p_type
decl_stmt|;
define|#
directive|define
name|ALG_PARM_ABSENT
value|0
define|#
directive|define
name|ALG_PARM_UNKNOWN
value|1
define|#
directive|define
name|ALG_PARM_NUMERIC
value|2
union|union
block|{
name|int
name|numeric
decl_stmt|;
block|}
name|un
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|random_number
block|{
name|int
name|n_bits
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|key_info
block|{
name|struct
name|alg_id
name|alg
decl_stmt|;
name|int
name|n_bits
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|validity
block|{
name|char
modifier|*
name|not_before
decl_stmt|;
name|char
modifier|*
name|not_after
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|signature
block|{
name|struct
name|alg_id
name|alg
decl_stmt|;
name|PE
name|encoded
decl_stmt|;
name|int
name|n_bits
decl_stmt|;
name|char
modifier|*
name|encrypted
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|certificate
block|{
name|struct
name|alg_id
name|alg
decl_stmt|;
name|int
name|version
decl_stmt|;
name|int
name|serial
decl_stmt|;
name|DN
name|issuer
decl_stmt|;
name|DN
name|subject
decl_stmt|;
name|struct
name|validity
name|valid
decl_stmt|;
name|struct
name|key_info
name|key
decl_stmt|;
name|struct
name|signature
name|sig
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|certificate_list
block|{
name|struct
name|certificate
modifier|*
name|cert
decl_stmt|;
name|struct
name|certificate
modifier|*
name|reverse
decl_stmt|;
name|struct
name|certificate_list
modifier|*
name|next
decl_stmt|;
name|struct
name|certificate_list
modifier|*
name|superior
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|revoked_certificate
block|{
name|struct
name|alg_id
name|alg
decl_stmt|;
name|DN
name|subject
decl_stmt|;
name|int
name|serial
decl_stmt|;
name|char
modifier|*
name|revocation_date
decl_stmt|;
name|struct
name|revoked_certificate
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|revocation_list
block|{
name|struct
name|alg_id
name|alg
decl_stmt|;
name|DN
name|issuer
decl_stmt|;
name|char
modifier|*
name|last_update
decl_stmt|;
name|char
modifier|*
name|next_update
decl_stmt|;
comment|/* For RFC 1040 format only */
name|struct
name|revoked_certificate
modifier|*
name|revoked
decl_stmt|;
name|struct
name|signature
name|sig
decl_stmt|;
name|struct
name|signature
name|sig2
decl_stmt|;
name|char
name|test
index|[
literal|1
index|]
decl_stmt|;
comment|/* For pepsy to test for revoked certificate */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ca_record
block|{
name|struct
name|key_info
name|key
decl_stmt|;
name|DN
name|name
decl_stmt|;
name|struct
name|validity
name|valid
decl_stmt|;
comment|/* parameters controlling jurisdiction would go here */
name|struct
name|ca_record
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|protected_password
block|{
name|char
modifier|*
name|passwd
decl_stmt|;
name|int
name|n_octets
decl_stmt|;
name|char
name|is_protected
index|[
literal|1
index|]
decl_stmt|;
name|char
modifier|*
name|time1
decl_stmt|;
name|char
modifier|*
name|time2
decl_stmt|;
name|struct
name|random_number
modifier|*
name|random1
decl_stmt|;
name|struct
name|random_number
modifier|*
name|random2
decl_stmt|;
name|struct
name|alg_id
modifier|*
name|alg_id
decl_stmt|;
comment|/* NULL - for pepsy */
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

end_unit

