begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//
end_comment

begin_comment
comment|// Fix.h : variable length fixed point data type
end_comment

begin_comment
comment|//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Fix_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Fix_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<Integer.h>
end_include

begin_typedef
typedef|typedef
name|unsigned
name|short
name|uint16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|short
name|int16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|uint32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|int32
typedef|;
end_typedef

begin_define
define|#
directive|define
name|_Fix_min_length
value|1
end_define

begin_define
define|#
directive|define
name|_Fix_max_length
value|65535
end_define

begin_define
define|#
directive|define
name|_Fix_min_value
value|-1.0
end_define

begin_define
define|#
directive|define
name|_Fix_max_value
value|1.0
end_define

begin_decl_stmt
specifier|extern
name|uint16
name|Fix_default_length
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|Fix_default_print_width
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|_Frep
comment|// internal Fix representation
block|{
name|uint16
name|len
decl_stmt|;
comment|// length in bits
name|uint16
name|siz
decl_stmt|;
comment|// allocated storage
name|int16
name|ref
decl_stmt|;
comment|// reference count
name|uint16
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// start of ushort array represention
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|_Frep
modifier|*
name|_Fix
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|_Frep
name|_Frep_0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|_Frep
name|_Frep_m1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|_Frep
name|_Frep_quotient_bump
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Fix
block|{
name|_Fix
name|rep
decl_stmt|;
name|Fix
argument_list|(
name|_Fix
argument_list|)
expr_stmt|;
name|void
name|unique
parameter_list|()
function_decl|;
name|public
label|:
name|Fix
argument_list|()
expr_stmt|;
name|Fix
argument_list|(
name|Fix
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|double
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
name|Fix
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
name|double
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
name|_Frep
operator|*
argument_list|)
expr_stmt|;
operator|~
name|Fix
argument_list|()
expr_stmt|;
name|Fix
name|operator
init|=
operator|(
name|Fix
operator|&
operator|)
decl_stmt|;
name|Fix
name|operator
init|=
operator|(
name|double
operator|&
operator|)
decl_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
operator|&
name|operator
operator|+
operator|(
operator|)
expr_stmt|;
name|Fix
name|operator
operator|-
operator|(
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|+
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|-
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
name|Fix
modifier|&
parameter_list|,
name|Fix
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
operator|/
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
name|Fix
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
name|int
parameter_list|,
name|Fix
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
operator|%
operator|(
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|<<
operator|(
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|>>
operator|(
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|friend
name|Fix
name|operator
operator|<
condition|?
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// min
name|friend
name|Fix
name|operator
operator|>
condition|?
operator|(
name|Fix
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// max
endif|#
directive|endif
name|Fix
name|operator
operator|+=
operator|(
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|-=
operator|(
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|*=
operator|(
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|/=
operator|(
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|*=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|%=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|<<=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|>>=
operator|(
name|int
operator|)
expr_stmt|;
name|friend
name|char
modifier|*
name|Ftoa
parameter_list|(
name|Fix
modifier|&
parameter_list|,
name|int
name|width
init|=
name|Fix_default_print_width
parameter_list|)
function_decl|;
name|friend
name|Fix
name|atoF
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
name|len
init|=
name|Fix_default_length
parameter_list|)
function_decl|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// built-in functions
name|friend
name|Fix
name|abs
parameter_list|(
name|Fix
parameter_list|)
function_decl|;
comment|// absolute value
name|friend
name|int
name|sgn
parameter_list|(
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// -1, 0, +1
name|friend
name|Integer
name|mantissa
parameter_list|(
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// integer representation
name|friend
name|double
name|value
parameter_list|(
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// double value
name|friend
name|int
name|length
parameter_list|(
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// field length
name|friend
name|void
name|show
parameter_list|(
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// show contents
comment|// error handlers
name|void
name|error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|// error handler
name|void
name|range_error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|// range error handler
comment|// internal class functions
name|friend
name|void
name|mask
parameter_list|(
name|_Fix
parameter_list|)
function_decl|;
name|friend
name|int
name|compare
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
init|=
operator|&
name|_Frep_0
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|new_Fix
parameter_list|(
name|uint16
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|new_Fix
parameter_list|(
name|uint16
parameter_list|,
name|_Fix
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|new_Fix
parameter_list|(
name|uint16
parameter_list|,
name|double
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|copy
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|negate
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|add
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|subtract
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|multiply
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|multiply
parameter_list|(
name|_Fix
parameter_list|,
name|int
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|divide
parameter_list|(
name|_Fix
parameter_list|,
name|_Fix
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
name|friend
name|_Fix
name|shift
parameter_list|(
name|_Fix
parameter_list|,
name|int
parameter_list|,
name|_Fix
init|=
name|NULL
parameter_list|)
function_decl|;
comment|// non-operator versions for user
name|friend
name|void
name|negate
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|add
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|subtract
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|multiply
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|divide
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|q
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|shift
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_decl_stmt
specifier|extern
name|void
name|default_Fix_error_handler
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl_stmt|,
name|default_Fix_range_error_handler
argument_list|(
specifier|const
name|char
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|Fix_error_handler
decl_stmt|,
name|Fix_range_error_handler
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|set_Fix_error_handler
argument_list|(
name|one_arg_error_handler_t
name|f
argument_list|)
decl_stmt|,
name|set_Fix_range_error_handler
argument_list|(
name|one_arg_error_handler_t
name|f
argument_list|)
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|Fix_peh
function_decl|)
parameter_list|(
name|_Fix
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|Fix_peh
name|Fix_overflow_handler
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|Fix_overflow_saturate
argument_list|(
name|_Fix
operator|&
argument_list|)
decl_stmt|,
name|Fix_overflow_wrap
argument_list|(
name|_Fix
operator|&
argument_list|)
decl_stmt|,
name|Fix_overflow_warning_saturate
argument_list|(
name|_Fix
operator|&
argument_list|)
decl_stmt|,
name|Fix_overflow_warning
argument_list|(
name|_Fix
operator|&
argument_list|)
decl_stmt|,
name|Fix_overflow_error
argument_list|(
name|_Fix
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|Fix_peh
name|set_overflow_handler
parameter_list|(
name|Fix_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|Fix_set_default_length
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// function definitions
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|void
name|Fix
operator|::
name|unique
argument_list|()
block|{
if|if
condition|(
name|rep
operator|->
name|ref
operator|>
literal|1
condition|)
block|{
name|rep
operator|->
name|ref
operator|--
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
name|rep
operator|->
name|len
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function
unit|}  inline
name|void
name|mask
parameter_list|(
name|_Fix
name|x
parameter_list|)
block|{
name|int
name|n
init|=
name|x
operator|->
name|len
operator|&
literal|0x0f
decl_stmt|;
if|if
condition|(
name|n
condition|)
name|x
operator|->
name|s
index|[
name|x
operator|->
name|siz
operator|-
literal|1
index|]
operator|&=
literal|0xffff0000
operator|>>
name|n
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|_Fix
name|copy
parameter_list|(
name|_Fix
name|from
parameter_list|,
name|_Fix
name|to
parameter_list|)
block|{
name|uint16
modifier|*
name|ts
init|=
name|to
operator|->
name|s
decl_stmt|,
modifier|*
name|fs
init|=
name|from
operator|->
name|s
decl_stmt|;
name|int
name|ilim
init|=
name|to
operator|->
name|siz
operator|<
name|from
operator|->
name|siz
condition|?
name|to
operator|->
name|siz
else|:
name|from
operator|->
name|siz
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ilim
condition|;
name|i
operator|++
control|)
operator|*
name|ts
operator|++
operator|=
operator|*
name|fs
operator|++
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|to
operator|->
name|siz
condition|;
name|i
operator|++
control|)
operator|*
name|ts
operator|++
operator|=
literal|0
expr_stmt|;
name|mask
argument_list|(
name|to
argument_list|)
expr_stmt|;
return|return
name|to
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|_Fix f
argument_list|)
block|{
name|rep
operator|=
name|f
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|()
block|{
name|rep
operator|=
name|new_Fix
argument_list|(
name|Fix_default_length
argument_list|)
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|_Fix_min_length
operator|||
name|len
operator|>
name|_Fix_max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|uint16
operator|)
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|double& d
argument_list|)
block|{
name|rep
operator|=
name|new_Fix
argument_list|(
name|Fix_default_length
argument_list|,
name|d
argument_list|)
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|Fix&  y
argument_list|)
block|{
name|rep
operator|=
name|y
operator|.
name|rep
block|;
name|rep
operator|->
name|ref
operator|++
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|Fix&  y
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|_Fix_min_length
operator|||
name|len
operator|>
name|_Fix_max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|uint16
operator|)
name|len
argument_list|,
name|y
operator|.
name|rep
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|_Frep* fr
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
literal|1
operator|||
name|len
operator|>
literal|65535
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|uint16
operator|)
name|len
argument_list|,
name|fr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|double& d
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|_Fix_min_length
operator|||
name|len
operator|>
name|_Fix_max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|uint16
operator|)
name|len
argument_list|,
name|d
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
operator|~
name|Fix
argument_list|()
block|{
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|=
operator|(
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|rep
operator|->
name|len
operator|==
name|y
operator|.
name|rep
operator|->
name|len
condition|)
block|{
operator|++
name|y
operator|.
name|rep
operator|->
name|ref
expr_stmt|;
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
name|rep
operator|=
name|y
operator|.
name|rep
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|unique
argument_list|()
expr_stmt|;
name|copy
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
end_else

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix
name|Fix
operator|::
name|operator
operator|=
operator|(
name|double
operator|&
name|d
operator|)
block|{
name|int
name|oldlen
operator|=
name|rep
operator|->
name|len
block|;
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
name|oldlen
argument_list|,
name|d
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|operator
operator|==
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
operator|&
name|Fix
operator|::
name|operator
operator|+
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|-
operator|(
operator|)
block|{
name|_Fix
name|r
operator|=
name|negate
argument_list|(
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|+
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
name|_Fix
name|r
operator|=
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|-
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
name|_Fix
name|r
operator|=
name|subtract
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|)
block|{
name|_Fix
name|r
init|=
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|_Fix
name|r
init|=
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
name|int
name|y
parameter_list|,
name|Fix
modifier|&
name|x
parameter_list|)
block|{
name|_Fix
name|r
init|=
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
decl_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|/
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
name|_Fix
name|r
operator|=
name|divide
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|+=
operator|(
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|add
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|-=
operator|(
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|subtract
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|*=
operator|(
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|multiply
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|*=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|multiply
argument_list|(
name|rep
argument_list|,
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|/=
operator|(
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|divide
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|%
operator|(
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|Fix
name|r
argument_list|(
operator|(
name|int
operator|)
name|x
operator|.
name|rep
operator|->
name|len
operator|+
name|y
argument_list|,
name|x
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|<<
operator|(
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|_Fix
name|rep
operator|=
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
block|;
return|return
name|rep
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|>>
operator|(
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|_Fix
name|rep
operator|=
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
operator|-
name|y
argument_list|)
block|;
return|return
name|rep
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|<<=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|shift
argument_list|(
name|rep
argument_list|,
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|>>=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|shift
argument_list|(
name|rep
argument_list|,
operator|-
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|<
condition|?
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<=
literal|0
condition|)
return|return
name|x
return|;
else|else
return|return
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|>
condition|?
operator|(
name|Fix
operator|&
name|x
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|x
return|;
else|else
return|return
name|y
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|inline
name|Fix
name|abs
parameter_list|(
name|Fix
name|x
parameter_list|)
block|{
name|_Fix
name|r
init|=
operator|(
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|)
operator|>=
literal|0
condition|?
name|new_Fix
argument_list|(
name|x
operator|.
name|rep
operator|->
name|len
argument_list|,
name|x
operator|.
name|rep
argument_list|)
else|:
name|negate
argument_list|(
name|x
operator|.
name|rep
argument_list|)
operator|)
decl_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|sgn
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|)
block|{
name|int
name|a
init|=
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|)
decl_stmt|;
return|return
name|a
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|a
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|length
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|rep
operator|->
name|len
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|s
operator|<<
name|Ftoa
argument_list|(
name|y
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|void
name|negate
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|negate
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|add
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|subtract
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|subtract
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|multiply
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|divide
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|q
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|divide
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|q
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|shift
parameter_list|(
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

