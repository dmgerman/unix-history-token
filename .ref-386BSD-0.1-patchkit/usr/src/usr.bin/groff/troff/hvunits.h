begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.uucp)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file LICENSE.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_decl_stmt
name|class
name|vunits
block|{
name|int
name|n
decl_stmt|;
name|public
label|:
name|vunits
argument_list|()
expr_stmt|;
name|vunits
argument_list|(
name|units
argument_list|)
expr_stmt|;
name|units
name|to_units
parameter_list|()
function_decl|;
name|int
name|is_zero
parameter_list|()
function_decl|;
name|vunits
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|vunits
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|vunits
name|scale
parameter_list|(
name|vunits
name|n
parameter_list|,
name|units
name|x
parameter_list|,
name|units
name|y
parameter_list|)
function_decl|;
comment|// scale n by x/y
name|friend
name|vunits
name|scale
parameter_list|(
name|vunits
name|n
parameter_list|,
name|vunits
name|x
parameter_list|,
name|vunits
name|y
parameter_list|)
function_decl|;
name|friend
name|vunits
name|operator
operator|+
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|vunits
name|operator
operator|-
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|vunits
name|operator
operator|-
operator|(
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|/
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|vunits
name|operator
operator|/
operator|(
specifier|const
name|vunits
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|vunits
name|operator
modifier|*
parameter_list|(
specifier|const
name|vunits
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|vunits
name|operator
modifier|*
parameter_list|(
name|int
parameter_list|,
specifier|const
name|vunits
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|vunits
operator|&
operator|,
specifier|const
name|vunits
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
name|vunits
name|V0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|hunits
block|{
name|int
name|n
decl_stmt|;
name|public
label|:
name|hunits
argument_list|()
expr_stmt|;
name|hunits
argument_list|(
name|units
argument_list|)
expr_stmt|;
name|units
name|to_units
parameter_list|()
function_decl|;
name|int
name|is_zero
parameter_list|()
function_decl|;
name|hunits
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|hunits
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|hunits
name|scale
parameter_list|(
name|hunits
name|n
parameter_list|,
name|units
name|x
parameter_list|,
name|units
name|y
parameter_list|)
function_decl|;
comment|// scale n by x/y
name|friend
name|hunits
name|scale
parameter_list|(
name|hunits
name|n
parameter_list|,
name|double
name|x
parameter_list|)
function_decl|;
name|friend
name|hunits
name|operator
operator|+
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|hunits
name|operator
operator|-
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|hunits
name|operator
operator|-
operator|(
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|/
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|hunits
name|operator
operator|/
operator|(
specifier|const
name|hunits
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|hunits
name|operator
modifier|*
parameter_list|(
specifier|const
name|hunits
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|hunits
name|operator
modifier|*
parameter_list|(
name|int
parameter_list|,
specifier|const
name|hunits
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|hunits
operator|&
operator|,
specifier|const
name|hunits
operator|&
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
name|hunits
name|H0
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|int
name|get_vunits
parameter_list|(
name|vunits
modifier|*
parameter_list|,
name|unsigned
name|char
name|si
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|get_hunits
parameter_list|(
name|hunits
modifier|*
parameter_list|,
name|unsigned
name|char
name|si
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|get_vunits
parameter_list|(
name|vunits
modifier|*
parameter_list|,
name|unsigned
name|char
name|si
parameter_list|,
name|vunits
name|prev_value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|get_hunits
parameter_list|(
name|hunits
modifier|*
parameter_list|,
name|unsigned
name|char
name|si
parameter_list|,
name|hunits
name|prev_value
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|inline
name|vunits
operator|::
name|vunits
argument_list|()
operator|:
name|n
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|units
name|vunits
operator|::
name|to_units
argument_list|()
block|{
return|return
name|n
operator|*
name|vresolution
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|vunits
operator|::
name|is_zero
argument_list|()
block|{
return|return
name|n
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
name|operator
operator|+
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
name|vunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|+=
name|y
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
name|operator
operator|-
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
name|vunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|-=
name|y
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
name|operator
operator|-
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|)
block|{
name|vunits
name|r
block|;
name|r
operator|.
name|n
operator|=
operator|-
name|x
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|/
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|/
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
name|operator
operator|/
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
name|int
name|n
operator|)
block|{
name|vunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|/=
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|vunits
name|operator
modifier|*
parameter_list|(
specifier|const
name|vunits
modifier|&
name|x
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|vunits
name|r
decl_stmt|;
name|r
operator|=
name|x
expr_stmt|;
name|r
operator|.
name|n
operator|*=
name|n
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|vunits
name|operator
modifier|*
parameter_list|(
name|int
name|n
parameter_list|,
specifier|const
name|vunits
modifier|&
name|x
parameter_list|)
block|{
name|vunits
name|r
decl_stmt|;
name|r
operator|=
name|x
expr_stmt|;
name|r
operator|.
name|n
operator|*=
name|n
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|<
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|>
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|<=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|>=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|==
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|,
specifier|const
name|vunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|!=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
operator|&
name|vunits
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|)
block|{
name|n
operator|+=
name|x
operator|.
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|vunits
operator|&
name|vunits
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|vunits
operator|&
name|x
operator|)
block|{
name|n
operator|-=
name|x
operator|.
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
operator|::
name|hunits
argument_list|()
operator|:
name|n
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|units
name|hunits
operator|::
name|to_units
argument_list|()
block|{
return|return
name|n
operator|*
name|hresolution
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|hunits
operator|::
name|is_zero
argument_list|()
block|{
return|return
name|n
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
name|operator
operator|+
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
name|hunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|+=
name|y
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
name|operator
operator|-
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
name|hunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|-=
name|y
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
name|operator
operator|-
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|)
block|{
name|hunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|=
operator|-
name|x
operator|.
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|/
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|/
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
name|operator
operator|/
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
name|int
name|n
operator|)
block|{
name|hunits
name|r
block|;
name|r
operator|=
name|x
block|;
name|r
operator|.
name|n
operator|/=
name|n
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|hunits
name|operator
modifier|*
parameter_list|(
specifier|const
name|hunits
modifier|&
name|x
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|hunits
name|r
decl_stmt|;
name|r
operator|=
name|x
expr_stmt|;
name|r
operator|.
name|n
operator|*=
name|n
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|hunits
name|operator
modifier|*
parameter_list|(
name|int
name|n
parameter_list|,
specifier|const
name|hunits
modifier|&
name|x
parameter_list|)
block|{
name|hunits
name|r
decl_stmt|;
name|r
operator|=
name|x
expr_stmt|;
name|r
operator|.
name|n
operator|*=
name|n
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|<
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|>
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|<=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|>=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|==
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|,
specifier|const
name|hunits
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|n
operator|!=
name|y
operator|.
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
operator|&
name|hunits
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|)
block|{
name|n
operator|+=
name|x
operator|.
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|hunits
operator|&
name|hunits
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|hunits
operator|&
name|x
operator|)
block|{
name|n
operator|-=
name|x
operator|.
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|hunits
name|scale
parameter_list|(
name|hunits
name|n
parameter_list|,
name|units
name|x
parameter_list|,
name|units
name|y
parameter_list|)
block|{
name|hunits
name|r
decl_stmt|;
name|r
operator|.
name|n
operator|=
name|scale
argument_list|(
name|n
operator|.
name|n
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|vunits
name|scale
parameter_list|(
name|vunits
name|n
parameter_list|,
name|units
name|x
parameter_list|,
name|units
name|y
parameter_list|)
block|{
name|vunits
name|r
decl_stmt|;
name|r
operator|.
name|n
operator|=
name|scale
argument_list|(
name|n
operator|.
name|n
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|vunits
name|scale
parameter_list|(
name|vunits
name|n
parameter_list|,
name|vunits
name|x
parameter_list|,
name|vunits
name|y
parameter_list|)
block|{
name|vunits
name|r
decl_stmt|;
name|r
operator|.
name|n
operator|=
name|scale
argument_list|(
name|n
operator|.
name|n
argument_list|,
name|x
operator|.
name|n
argument_list|,
name|y
operator|.
name|n
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|hunits
name|scale
parameter_list|(
name|hunits
name|n
parameter_list|,
name|double
name|x
parameter_list|)
block|{
name|hunits
name|r
decl_stmt|;
name|r
operator|.
name|n
operator|=
name|int
argument_list|(
name|n
operator|.
name|n
operator|*
name|x
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|units
name|scale
parameter_list|(
name|units
name|n
parameter_list|,
name|double
name|x
parameter_list|)
block|{
return|return
name|int
argument_list|(
name|n
operator|*
name|x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|units
name|points_to_units
parameter_list|(
name|units
name|n
parameter_list|)
block|{
return|return
name|scale
argument_list|(
name|n
argument_list|,
name|units_per_inch
argument_list|,
literal|72
argument_list|)
return|;
block|}
end_function

end_unit

