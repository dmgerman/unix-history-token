begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BitSet_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_BitSet_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<values.h>
end_include

begin_define
define|#
directive|define
name|BITSETBITS
value|BITS(short)
end_define

begin_struct
struct|struct
name|BitSetRep
block|{
name|unsigned
name|short
name|len
decl_stmt|;
comment|// number of shorts in s
name|unsigned
name|short
name|sz
decl_stmt|;
comment|// allocated slots
name|unsigned
name|short
name|virt
decl_stmt|;
comment|// virtual 0 or 1
name|unsigned
name|short
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// bits start here
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetalloc
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|short
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetcopy
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|BitSetRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetresize
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetop
parameter_list|(
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
name|BitSetRep
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetcmpl
parameter_list|(
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
name|BitSetRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|BitSetRep
name|_nilBitSetRep
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitSet
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitSetBit
block|{
name|protected
label|:
name|BitSet
modifier|*
name|src
decl_stmt|;
name|unsigned
name|long
name|pos
decl_stmt|;
name|public
label|:
name|BitSetBit
argument_list|(
argument|BitSet* v
argument_list|,
argument|int p
argument_list|)
empty_stmt|;
name|BitSetBit
argument_list|(
specifier|const
name|BitSetBit
operator|&
name|b
argument_list|)
expr_stmt|;
operator|~
name|BitSetBit
argument_list|()
expr_stmt|;
name|operator
name|int
parameter_list|()
function_decl|;
name|int
name|operator
init|=
operator|(
name|int
name|b
operator|)
decl_stmt|;
name|int
name|operator
operator|==
operator|(
name|int
name|b
operator|)
expr_stmt|;
name|int
name|operator
operator|!=
operator|(
name|int
name|b
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BitSet
block|{
name|protected
label|:
name|BitSetRep
modifier|*
name|rep
decl_stmt|;
name|public
label|:
comment|// constructors
name|BitSet
argument_list|()
expr_stmt|;
name|BitSet
argument_list|(
specifier|const
name|BitSet
operator|&
argument_list|)
expr_stmt|;
operator|~
name|BitSet
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
decl_stmt|;
comment|// equality& subset tests
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
comment|// operations on self
name|void
name|operator
operator||=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|operator
operator|&=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|operator
operator|-=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|operator
operator|^=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|complement
parameter_list|()
function_decl|;
comment|// individual bit manipulation
name|void
name|set
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|()
function_decl|;
comment|// set all
name|void
name|clear
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
comment|// clear all
name|void
name|invert
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|invert
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|int
name|test
argument_list|(
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|test
argument_list|(
name|int
name|from
argument_list|,
name|int
name|to
argument_list|)
decl|const
decl_stmt|;
name|BitSetBit
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
comment|// iterators
name|int
name|first
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|last
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|next
argument_list|(
name|int
name|pos
argument_list|,
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|previous
argument_list|(
name|int
name|pos
argument_list|,
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
comment|// status
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
name|int
name|virtual_bit
argument_list|()
specifier|const
expr_stmt|;
name|int
name|count
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
comment|// convertors& IO
name|friend
name|BitSet
name|atoBitSet
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|star
init|=
literal|'*'
parameter_list|)
function_decl|;
name|friend
specifier|const
name|char
modifier|*
name|BitSettoa
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|star
init|=
literal|'*'
parameter_list|)
function_decl|;
name|friend
name|BitSet
name|shorttoBitSet
parameter_list|(
name|unsigned
name|short
name|w
parameter_list|)
function_decl|;
name|friend
name|BitSet
name|longtoBitSet
parameter_list|(
name|unsigned
name|long
name|w
parameter_list|)
function_decl|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|BitSet
operator|&
name|x
operator|)
expr_stmt|;
comment|// procedural versions of operators
name|friend
name|void
name|and
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|or
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|xor
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|diff
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|complement
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
comment|// misc
specifier|volatile
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|BitSet
name|BitSetTmp
typedef|;
end_typedef

begin_expr_stmt
name|BitSet
name|operator
operator||
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|BitSet
name|operator
function_decl|&  (const
name|BitSet
function_decl|& x
operator|,
function_decl|const BitSet& y
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|BitSet
name|operator
operator|-
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|BitSet
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|BitSet
name|operator
operator|~
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// These are inlined regardless of optimization
end_comment

begin_function
specifier|inline
name|int
name|BitSet_index
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|l
argument_list|)
operator|/
name|BITSETBITS
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|BitSet_pos
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
name|l
operator|&
operator|(
name|BITSETBITS
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|BitSet
operator|::
name|BitSet
argument_list|()
operator|:
name|rep
argument_list|(
argument|&_nilBitSetRep
argument_list|)
block|{}
specifier|inline
name|BitSet
operator|::
name|BitSet
argument_list|(
specifier|const
name|BitSet
operator|&
name|x
argument_list|)
operator|:
name|rep
argument_list|(
argument|BitSetcopy(
literal|0
argument|, x.rep)
argument_list|)
block|{}
specifier|inline
name|BitSet
operator|::
operator|~
name|BitSet
argument_list|()
block|{
if|if
condition|(
name|rep
operator|!=
operator|&
name|_nilBitSetRep
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|BitSet
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetcopy
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<=
name|x
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|void
name|and
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'&'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|or
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|xor
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|diff
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|complement
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetcmpl
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_NRV
argument_list|)
end_if

begin_decl_stmt
specifier|inline
name|BitSet
name|operator
modifier|&
argument_list|(
specifier|const
name|BitSet
operator|&
name|x
argument_list|,
specifier|const
name|BitSet
operator|&
name|y
argument_list|)
decl|return
name|r
block|{
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator||
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
block|{
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitSet
name|operator
operator|^
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitSet
name|operator
operator|-
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|diff
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitSet
name|operator
operator|~
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|)
end_return

begin_return
return|return
name|r
block|{
operator|::
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|; }
else|#
directive|else
comment|/* NO_NRV */
specifier|inline
name|BitSet
name|operator
operator|&
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|BitSet
name|r
block|;
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_return

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator||
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|BitSet
name|r
block|;
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|BitSet
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|)
block|{
name|BitSet
name|r
decl_stmt|;
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator|-
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|BitSet
name|r
block|;
name|diff
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator|~
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|)
block|{
name|BitSet
name|r
block|;
operator|::
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
specifier|inline
name|void
name|BitSet
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|and
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitSet
operator|::
name|operator
operator||=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|or
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitSet
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|xor
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitSet
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|diff
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitSet
operator|::
name|complement
argument_list|()
block|{
operator|::
name|complement
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|int
name|BitSet
operator|::
name|virtual_bit
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|virt
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSet
operator|::
name|first
argument_list|(
argument|int b
argument_list|)
specifier|const
block|{
return|return
name|next
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSet
operator|::
name|test
argument_list|(
argument|int p
argument_list|)
specifier|const
block|{
if|if
condition|(
name|p
operator|<
literal|0
condition|)
name|error
argument_list|(
literal|"Illegal bit index"
argument_list|)
expr_stmt|;
name|int
name|index
operator|=
name|BitSet_index
argument_list|(
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|index
operator|>=
name|rep
operator|->
name|len
operator|)
condition|?
name|rep
operator|->
name|virt
else|:
operator|(
operator|(
name|rep
operator|->
name|s
index|[
name|index
index|]
operator|&
operator|(
literal|1
operator|<<
name|BitSet_pos
argument_list|(
name|p
argument_list|)
operator|)
operator|)
operator|!=
literal|0
operator|)
return|;
end_return

begin_expr_stmt
unit|}   inline
name|void
name|BitSet
operator|::
name|clear
argument_list|()
block|{
if|if
condition|(
name|rep
operator|->
name|len
operator|>
literal|0
condition|)
name|bzero
argument_list|(
name|rep
operator|->
name|s
argument_list|,
name|rep
operator|->
name|sz
operator|*
sizeof|sizeof
argument_list|(
name|short
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|->
name|len
operator|=
name|rep
operator|->
name|virt
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
name|BitSet
operator|::
name|set
argument_list|()
block|{
name|rep
operator|=
name|BitSetalloc
argument_list|(
name|rep
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
block|; }
specifier|inline
name|BitSetBit
operator|::
name|BitSetBit
argument_list|(
specifier|const
name|BitSetBit
operator|&
name|b
argument_list|)
operator|:
name|src
argument_list|(
name|b
operator|.
name|src
argument_list|)
operator|,
name|pos
argument_list|(
argument|b.pos
argument_list|)
block|{}
specifier|inline
name|BitSetBit
operator|::
name|BitSetBit
argument_list|(
argument|BitSet* v
argument_list|,
argument|int p
argument_list|)
block|{
name|src
operator|=
name|v
block|;
name|pos
operator|=
name|p
block|; }
specifier|inline
name|BitSetBit
operator|::
operator|~
name|BitSetBit
argument_list|()
block|{}
specifier|inline
name|BitSetBit
operator|::
name|operator
name|int
argument_list|()
block|{
return|return
name|src
operator|->
name|test
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSetBit
operator|::
name|operator
operator|=
operator|(
name|int
name|b
operator|)
block|{
if|if
condition|(
name|b
condition|)
name|src
operator|->
name|set
argument_list|(
name|pos
argument_list|)
expr_stmt|;
else|else
name|src
operator|->
name|clear
argument_list|(
name|pos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|b
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|BitSetBit
operator|::
name|operator
operator|==
operator|(
name|int
name|b
operator|)
block|{
return|return
name|src
operator|->
name|test
argument_list|(
name|pos
argument_list|)
operator|==
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSetBit
operator|::
name|operator
operator|!=
operator|(
name|int
name|b
operator|)
block|{
return|return
name|src
operator|->
name|test
argument_list|(
name|pos
argument_list|)
operator|!=
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSetBit
name|BitSet
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
name|error
argument_list|(
literal|"illegal bit index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|BitSetBit
argument_list|(
name|this
argument_list|,
name|i
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

