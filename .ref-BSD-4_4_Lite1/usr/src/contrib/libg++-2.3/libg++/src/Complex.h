begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Complex_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Complex_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_decl_stmt
name|class
name|Complex
block|{
ifdef|#
directive|ifdef
name|__ATT_complex__
name|public
label|:
else|#
directive|else
name|protected
label|:
endif|#
directive|endif
name|double
name|re
decl_stmt|;
name|double
name|im
decl_stmt|;
name|public
label|:
name|double
name|real
argument_list|()
specifier|const
expr_stmt|;
name|double
name|imag
parameter_list|()
function_decl|const;
name|Complex
argument_list|()
expr_stmt|;
name|Complex
argument_list|(
specifier|const
name|Complex
operator|&
name|y
argument_list|)
expr_stmt|;
name|Complex
argument_list|(
argument|double r
argument_list|,
argument|double i=
literal|0
argument_list|)
empty_stmt|;
operator|~
name|Complex
argument_list|()
expr_stmt|;
name|Complex
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
decl_stmt|;
name|Complex
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|+=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|-=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|*=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|/=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// non-inline functions
end_comment

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|cos
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sin
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|cosh
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sinh
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|exp
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|log
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|int
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sqrt
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// other functions defined as inlines
end_comment

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|conj
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
name|double
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|real
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|imag
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|abs
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|norm
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|arg
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|polar
parameter_list|(
name|double
name|r
parameter_list|,
name|double
name|t
init|=
literal|0.0
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// inline members
end_comment

begin_expr_stmt
specifier|inline
name|double
name|Complex
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|re
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|Complex
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|im
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|()
block|{}
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|(
specifier|const
name|Complex
operator|&
name|y
argument_list|)
operator|:
name|re
argument_list|(
name|y
operator|.
name|real
argument_list|()
argument_list|)
operator|,
name|im
argument_list|(
argument|y.imag()
argument_list|)
block|{}
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|(
argument|double r
argument_list|,
argument|double i
argument_list|)
operator|:
name|re
argument_list|(
name|r
argument_list|)
operator|,
name|im
argument_list|(
argument|i
argument_list|)
block|{}
specifier|inline
name|Complex
operator|::
operator|~
name|Complex
argument_list|()
block|{}
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|+=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|+=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|+=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|+=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|-=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|-=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|-=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|-=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|double
name|r
operator|=
name|re
operator|*
name|y
operator|.
name|real
argument_list|()
operator|-
name|im
operator|*
name|y
operator|.
name|imag
argument_list|()
block|;
name|im
operator|=
name|re
operator|*
name|y
operator|.
name|imag
argument_list|()
operator|+
name|im
operator|*
name|y
operator|.
name|real
argument_list|()
block|;
name|re
operator|=
name|r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|*=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|*=
name|y
block|;
name|im
operator|*=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|//  functions
end_comment

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
operator|==
name|y
operator|.
name|real
argument_list|()
operator|&&
name|x
operator|.
name|imag
argument_list|()
operator|==
name|y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
operator|==
literal|0.0
operator|&&
name|x
operator|.
name|real
argument_list|()
operator|==
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
operator|!=
name|y
operator|.
name|real
argument_list|()
operator|||
name|x
operator|.
name|imag
argument_list|()
operator|!=
name|y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
operator|!=
literal|0.0
operator|||
name|x
operator|.
name|real
argument_list|()
operator|!=
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|)
block|{
return|return
name|Complex
argument_list|(
operator|-
name|x
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Complex
name|conj
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|+
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|+
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|+
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|+
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|-
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|-
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|-
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|-
name|y
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
operator|.
name|real
argument_list|()
operator|-
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
operator|.
name|imag
argument_list|()
argument_list|,
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
operator|.
name|imag
argument_list|()
operator|+
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
name|double
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|*
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|*
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|real
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|imag
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|abs
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|hypot
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|norm
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|x
operator|.
name|real
argument_list|()
operator|+
name|x
operator|.
name|imag
argument_list|()
operator|*
name|x
operator|.
name|imag
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|arg
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|atan2
argument_list|(
name|x
operator|.
name|imag
argument_list|()
argument_list|,
name|x
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|polar
parameter_list|(
name|double
name|r
parameter_list|,
name|double
name|t
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|r
operator|*
name|cos
argument_list|(
name|t
argument_list|)
argument_list|,
name|r
operator|*
name|sin
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

