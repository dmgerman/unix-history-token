begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1993 David I. Bell  * Permission is granted to use, distribute, or modify this source,  * provided that this copyright notice remains intact.  *  * Data structure declarations for extended precision complex arithmetic.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CMATH_H
end_ifndef

begin_define
define|#
directive|define
name|CMATH_H
end_define

begin_include
include|#
directive|include
file|"qmath.h"
end_include

begin_comment
comment|/*  * Complex arithmetic definitions.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|NUMBER
modifier|*
name|real
decl_stmt|;
comment|/* real part of number */
name|NUMBER
modifier|*
name|imag
decl_stmt|;
comment|/* imaginary part of number */
name|long
name|links
decl_stmt|;
comment|/* link count */
block|}
name|COMPLEX
typedef|;
end_typedef

begin_comment
comment|/*  * Input, output, and conversion routines.  */
end_comment

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|comalloc
name|MATH_PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|qqtoc
name|MATH_PROTO
argument_list|(
operator|(
name|NUMBER
operator|*
name|q1
operator|,
name|NUMBER
operator|*
name|q2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|comfree
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|comprint
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cprintfr
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Basic numeric routines.  */
end_comment

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cadd
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|csub
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cmul
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cdiv
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|caddq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|csubq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cmulq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cdivq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cmodq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cquoq
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cscale
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|long
name|i
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cshift
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|long
name|i
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cround
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|long
name|i
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cbround
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|long
name|i
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|csquare
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cconj
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|creal
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cimag
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cneg
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cinv
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cint
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cfrac
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|BOOL
name|ccmp
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * More complicated functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cpowi
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|HASH
name|chash
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Transcendental routines.  These all take an epsilon argument to  * specify how accurately these are to be calculated.  */
end_comment

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cpower
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c1
operator|,
name|COMPLEX
operator|*
name|c2
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|csqrt
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|croot
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|q
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cexp
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cln
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|ccos
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|csin
name|MATH_PROTO
argument_list|(
operator|(
name|COMPLEX
operator|*
name|c
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|COMPLEX
modifier|*
name|cpolar
name|MATH_PROTO
argument_list|(
operator|(
name|NUMBER
operator|*
name|q1
operator|,
name|NUMBER
operator|*
name|q2
operator|,
name|NUMBER
operator|*
name|epsilon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * macro expansions to speed this thing up  */
end_comment

begin_define
define|#
directive|define
name|cisreal
parameter_list|(
name|c
parameter_list|)
value|(qiszero((c)->imag))
end_define

begin_define
define|#
directive|define
name|cisimag
parameter_list|(
name|c
parameter_list|)
value|(qiszero((c)->real)&& !cisreal(c))
end_define

begin_define
define|#
directive|define
name|ciszero
parameter_list|(
name|c
parameter_list|)
value|(cisreal(c)&& qiszero((c)->real))
end_define

begin_define
define|#
directive|define
name|cisone
parameter_list|(
name|c
parameter_list|)
value|(cisreal(c)&& qisone((c)->real))
end_define

begin_define
define|#
directive|define
name|cisnegone
parameter_list|(
name|c
parameter_list|)
value|(cisreal(c)&& qisnegone((c)->real))
end_define

begin_define
define|#
directive|define
name|cisrunit
parameter_list|(
name|c
parameter_list|)
value|(cisreal(c)&& qisunit((c)->real))
end_define

begin_define
define|#
directive|define
name|cisiunit
parameter_list|(
name|c
parameter_list|)
value|(qiszero((c)->real)&& qisunit((c)->imag))
end_define

begin_define
define|#
directive|define
name|cisunit
parameter_list|(
name|c
parameter_list|)
value|(cisrunit(c) || cisiunit(c))
end_define

begin_define
define|#
directive|define
name|cistwo
parameter_list|(
name|c
parameter_list|)
value|(cisreal(c)&& qistwo((c)->real))
end_define

begin_define
define|#
directive|define
name|cisint
parameter_list|(
name|c
parameter_list|)
value|(qisint((c)->real)&& qisint((c)->imag))
end_define

begin_define
define|#
directive|define
name|ciseven
parameter_list|(
name|c
parameter_list|)
value|(qiseven((c)->real)&& qiseven((c)->imag))
end_define

begin_define
define|#
directive|define
name|cisodd
parameter_list|(
name|c
parameter_list|)
value|(qisodd((c)->real) || qisodd((c)->imag))
end_define

begin_define
define|#
directive|define
name|clink
parameter_list|(
name|c
parameter_list|)
value|((c)->links++, (c))
end_define

begin_comment
comment|/*  * Pre-defined values.  */
end_comment

begin_decl_stmt
specifier|extern
name|COMPLEX
name|_czero_
decl_stmt|,
name|_cone_
decl_stmt|,
name|_conei_
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* END CODE */
end_comment

end_unit

