begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990, 1993  *	The Regents of the University of California.  All rights reserved.  * (c) UNIX System Laboratories, Inc.  * All or some portions of this file are derived from material licensed  * to the University of California by American Telephone and Telegraph  * Co. or Unix System Laboratories, Inc. and are reproduced herein with  * the permission of UNIX System Laboratories, Inc.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)conf.h	8.3 (Berkeley) 1/21/94  */
end_comment

begin_comment
comment|/*  * Definitions of device driver entry switches  */
end_comment

begin_struct_decl
struct_decl|struct
name|buf
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|proc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|tty
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|uio
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|vnode
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|bdevsw
block|{
name|int
argument_list|(
argument|*d_open
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|oflags
operator|,
name|int
name|devtype
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_close
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|fflag
operator|,
name|int
name|devtype
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_strategy
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|buf
operator|*
name|bp
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_ioctl
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|cmd
operator|,
name|caddr_t
name|data
operator|,
name|int
name|fflag
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
function_decl|(
modifier|*
name|d_dump
function_decl|)
parameter_list|()
function_decl|;
comment|/* parameters vary by architecture */
name|int
argument_list|(
argument|*d_psize
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|)
argument_list|)
expr_stmt|;
name|int
name|d_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|bdevsw
name|bdevsw
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|cdevsw
block|{
name|int
argument_list|(
argument|*d_open
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|oflags
operator|,
name|int
name|devtype
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_close
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|fflag
operator|,
name|int
name|devtype
operator|,
expr|struct
name|proc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_read
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
expr|struct
name|uio
operator|*
name|uio
operator|,
name|int
name|ioflag
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_write
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
expr|struct
name|uio
operator|*
name|uio
operator|,
name|int
name|ioflag
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_ioctl
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|cmd
operator|,
name|caddr_t
name|data
operator|,
name|int
name|fflag
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_stop
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
name|int
name|rw
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_reset
argument_list|)
name|__P
argument_list|(
operator|(
name|int
name|uban
operator|)
argument_list|)
expr_stmt|;
comment|/* XXX */
name|struct
name|tty
modifier|*
name|d_ttys
decl_stmt|;
name|int
argument_list|(
argument|*d_select
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
name|int
name|which
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_mmap
argument_list|)
name|__P
argument_list|(
operator|(
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*d_strategy
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|buf
operator|*
name|bp
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|cdevsw
name|cdevsw
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* symbolic sleep message strings */
end_comment

begin_decl_stmt
specifier|extern
name|char
name|devopn
index|[]
decl_stmt|,
name|devio
index|[]
decl_stmt|,
name|devwait
index|[]
decl_stmt|,
name|devin
index|[]
decl_stmt|,
name|devout
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|devioc
index|[]
decl_stmt|,
name|devcls
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|linesw
block|{
name|int
argument_list|(
argument|*l_open
argument_list|)
name|__P
argument_list|(
operator|(
name|dev_t
name|dev
operator|,
expr|struct
name|tty
operator|*
name|tp
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
name|int
name|flag
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_read
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
expr|struct
name|uio
operator|*
name|uio
operator|,
name|int
name|flag
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_write
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
expr|struct
name|uio
operator|*
name|uio
operator|,
name|int
name|flag
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_ioctl
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
name|int
name|cmd
operator|,
name|caddr_t
name|data
operator|,
name|int
name|flag
operator|,
expr|struct
name|proc
operator|*
name|p
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_rint
argument_list|)
name|__P
argument_list|(
operator|(
name|int
name|c
operator|,
expr|struct
name|tty
operator|*
name|tp
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_start
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*l_modem
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|tty
operator|*
name|tp
operator|,
name|int
name|flag
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|linesw
name|linesw
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|swdevt
block|{
name|dev_t
name|sw_dev
decl_stmt|;
name|int
name|sw_flags
decl_stmt|;
name|int
name|sw_nblks
decl_stmt|;
name|struct
name|vnode
modifier|*
name|sw_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SW_FREED
value|0x01
end_define

begin_define
define|#
directive|define
name|SW_SEQUENTIAL
value|0x02
end_define

begin_define
define|#
directive|define
name|sw_freed
value|sw_flags
end_define

begin_comment
comment|/* XXX compat */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|KERNEL
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|swdevt
name|swdevt
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

