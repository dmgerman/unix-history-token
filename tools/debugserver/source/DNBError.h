begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DNBError.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/26/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DNBError_h__
end_ifndef

begin_define
define|#
directive|define
name|__DNBError_h__
end_define

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<mach/mach.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|class
name|DNBError
block|{
name|public
label|:
typedef|typedef
name|uint32_t
name|ValueType
typedef|;
typedef|typedef
enum|enum
block|{
name|Generic
init|=
literal|0
block|,
name|MachKernel
init|=
literal|1
block|,
name|POSIX
init|=
literal|2
ifdef|#
directive|ifdef
name|WITH_SPRINGBOARD
block|,
name|SpringBoard
init|=
literal|3
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WITH_BKS
block|,
name|BackBoard
init|=
literal|4
endif|#
directive|endif
ifdef|#
directive|ifdef
name|WITH_FBS
block|,
name|FrontBoard
init|=
literal|5
endif|#
directive|endif
block|}
name|FlavorType
typedef|;
name|explicit
name|DNBError
argument_list|(
argument|ValueType err =
literal|0
argument_list|,
argument|FlavorType flavor = Generic
argument_list|)
block|:
name|m_err
argument_list|(
name|err
argument_list|)
operator|,
name|m_flavor
argument_list|(
argument|flavor
argument_list|)
block|{}
specifier|const
name|char
operator|*
name|AsString
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
block|{
name|m_err
operator|=
literal|0
expr_stmt|;
name|m_flavor
operator|=
name|Generic
expr_stmt|;
name|m_str
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|ValueType
name|Error
argument_list|()
specifier|const
block|{
return|return
name|m_err
return|;
block|}
name|FlavorType
name|Flavor
argument_list|()
specifier|const
block|{
return|return
name|m_flavor
return|;
block|}
name|ValueType
name|operator
init|=
operator|(
name|kern_return_t
name|err
operator|)
block|{
name|m_err
operator|=
name|err
block|;
name|m_flavor
operator|=
name|MachKernel
block|;
name|m_str
operator|.
name|clear
argument_list|()
block|;
return|return
name|m_err
return|;
block|}
name|void
name|SetError
parameter_list|(
name|kern_return_t
name|err
parameter_list|)
block|{
name|m_err
operator|=
name|err
expr_stmt|;
name|m_flavor
operator|=
name|MachKernel
expr_stmt|;
name|m_str
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|SetErrorToErrno
parameter_list|()
block|{
name|m_err
operator|=
name|errno
expr_stmt|;
name|m_flavor
operator|=
name|POSIX
expr_stmt|;
name|m_str
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|SetError
parameter_list|(
name|ValueType
name|err
parameter_list|,
name|FlavorType
name|flavor
parameter_list|)
block|{
name|m_err
operator|=
name|err
expr_stmt|;
name|m_flavor
operator|=
name|flavor
expr_stmt|;
name|m_str
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Generic errors can set their own string values
name|void
name|SetErrorString
parameter_list|(
specifier|const
name|char
modifier|*
name|err_str
parameter_list|)
block|{
if|if
condition|(
name|err_str
operator|&&
name|err_str
index|[
literal|0
index|]
condition|)
name|m_str
operator|=
name|err_str
expr_stmt|;
else|else
name|m_str
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|Success
argument_list|()
specifier|const
block|{
return|return
name|m_err
operator|==
literal|0
return|;
block|}
name|bool
name|Fail
argument_list|()
specifier|const
block|{
return|return
name|m_err
operator|!=
literal|0
return|;
block|}
name|void
name|LogThreadedIfError
argument_list|(
specifier|const
name|char
operator|*
name|format
argument_list|,
operator|...
argument_list|)
decl|const
decl_stmt|;
name|void
name|LogThreaded
argument_list|(
specifier|const
name|char
operator|*
name|format
argument_list|,
operator|...
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|ValueType
name|m_err
decl_stmt|;
name|FlavorType
name|m_flavor
decl_stmt|;
name|mutable
name|std
operator|::
name|string
name|m_str
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __DNBError_h__
end_comment

end_unit

