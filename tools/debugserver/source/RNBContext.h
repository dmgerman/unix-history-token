begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RNBContext.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 12/12/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__RNBContext_h__
end_ifndef

begin_define
define|#
directive|define
name|__RNBContext_h__
end_define

begin_include
include|#
directive|include
file|"DNBError.h"
end_include

begin_include
include|#
directive|include
file|"PThreadEvent.h"
end_include

begin_include
include|#
directive|include
file|"RNBDefs.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|class
name|RNBContext
block|{
name|public
label|:
enum|enum
block|{
name|event_proc_state_changed
init|=
literal|0x001
block|,
name|event_proc_thread_running
init|=
literal|0x002
block|,
comment|// Sticky
name|event_proc_thread_exiting
init|=
literal|0x004
block|,
name|event_proc_stdio_available
init|=
literal|0x008
block|,
name|event_proc_profile_data
init|=
literal|0x010
block|,
name|event_read_packet_available
init|=
literal|0x020
block|,
name|event_read_thread_running
init|=
literal|0x040
block|,
comment|// Sticky
name|event_read_thread_exiting
init|=
literal|0x080
block|,
name|event_darwin_log_data_available
init|=
literal|0x100
block|,
name|normal_event_bits
init|=
name|event_proc_state_changed
operator||
name|event_proc_thread_exiting
operator||
name|event_proc_stdio_available
operator||
name|event_proc_profile_data
operator||
name|event_read_packet_available
operator||
name|event_read_thread_exiting
operator||
name|event_darwin_log_data_available
block|,
name|sticky_event_bits
init|=
name|event_proc_thread_running
operator||
name|event_read_thread_running
block|,
name|all_event_bits
init|=
name|sticky_event_bits
operator||
name|normal_event_bits
block|}
name|event_t
enum|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|RNBContext
argument_list|()
operator|:
name|m_pid
argument_list|(
name|INVALID_NUB_PROCESS
argument_list|)
operator|,
name|m_pid_stop_count
argument_list|(
literal|0
argument_list|)
operator|,
name|m_events
argument_list|(
literal|0
argument_list|,
name|all_event_bits
argument_list|)
operator|,
name|m_pid_pthread
argument_list|()
operator|,
name|m_launch_status
argument_list|()
operator|,
name|m_arg_vec
argument_list|()
operator|,
name|m_env_vec
argument_list|()
operator|,
name|m_detach_on_error
argument_list|(
argument|false
argument_list|)
block|{}
name|virtual
operator|~
name|RNBContext
argument_list|()
expr_stmt|;
name|nub_process_t
name|ProcessID
argument_list|()
specifier|const
block|{
return|return
name|m_pid
return|;
block|}
name|bool
name|HasValidProcessID
argument_list|()
specifier|const
block|{
return|return
name|m_pid
operator|!=
name|INVALID_NUB_PROCESS
return|;
block|}
name|void
name|SetProcessID
parameter_list|(
name|nub_process_t
name|pid
parameter_list|)
function_decl|;
name|nub_size_t
name|GetProcessStopCount
argument_list|()
specifier|const
block|{
return|return
name|m_pid_stop_count
return|;
block|}
name|bool
name|SetProcessStopCount
parameter_list|(
name|nub_size_t
name|count
parameter_list|)
block|{
comment|// Returns true if this class' notion of the PID state changed
if|if
condition|(
name|m_pid_stop_count
operator|==
name|count
condition|)
return|return
name|false
return|;
comment|// Didn't change
name|m_pid_stop_count
operator|=
name|count
expr_stmt|;
return|return
name|true
return|;
comment|// The stop count has changed.
block|}
name|bool
name|ProcessStateRunning
argument_list|()
specifier|const
expr_stmt|;
name|PThreadEvent
modifier|&
name|Events
parameter_list|()
block|{
return|return
name|m_events
return|;
block|}
name|nub_event_t
name|AllEventBits
argument_list|()
specifier|const
block|{
return|return
name|all_event_bits
return|;
block|}
name|nub_event_t
name|NormalEventBits
argument_list|()
specifier|const
block|{
return|return
name|normal_event_bits
return|;
block|}
name|nub_event_t
name|StickyEventBits
argument_list|()
specifier|const
block|{
return|return
name|sticky_event_bits
return|;
block|}
specifier|const
name|char
modifier|*
name|EventsAsString
argument_list|(
name|nub_event_t
name|events
argument_list|,
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl_stmt|;
name|size_t
name|ArgumentCount
argument_list|()
specifier|const
block|{
return|return
name|m_arg_vec
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|char
modifier|*
name|ArgumentAtIndex
parameter_list|(
name|size_t
name|index
parameter_list|)
function_decl|;
name|void
name|PushArgument
parameter_list|(
specifier|const
name|char
modifier|*
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
condition|)
name|m_arg_vec
operator|.
name|push_back
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|void
name|ClearArgv
parameter_list|()
block|{
name|m_arg_vec
operator|.
name|erase
argument_list|(
name|m_arg_vec
operator|.
name|begin
argument_list|()
argument_list|,
name|m_arg_vec
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|size_t
name|EnvironmentCount
argument_list|()
specifier|const
block|{
return|return
name|m_env_vec
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|char
modifier|*
name|EnvironmentAtIndex
parameter_list|(
name|size_t
name|index
parameter_list|)
function_decl|;
name|void
name|PushEnvironment
parameter_list|(
specifier|const
name|char
modifier|*
name|arg
parameter_list|)
block|{
if|if
condition|(
name|arg
condition|)
name|m_env_vec
operator|.
name|push_back
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|void
name|ClearEnvironment
parameter_list|()
block|{
name|m_env_vec
operator|.
name|erase
argument_list|(
name|m_env_vec
operator|.
name|begin
argument_list|()
argument_list|,
name|m_env_vec
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DNBError
modifier|&
name|LaunchStatus
parameter_list|()
block|{
return|return
name|m_launch_status
return|;
block|}
specifier|const
name|char
modifier|*
name|LaunchStatusAsString
argument_list|(
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl_stmt|;
name|nub_launch_flavor_t
name|LaunchFlavor
argument_list|()
specifier|const
block|{
return|return
name|m_launch_flavor
return|;
block|}
name|void
name|SetLaunchFlavor
parameter_list|(
name|nub_launch_flavor_t
name|flavor
parameter_list|)
block|{
name|m_launch_flavor
operator|=
name|flavor
expr_stmt|;
block|}
specifier|const
name|char
operator|*
name|GetWorkingDirectory
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|m_working_directory
operator|.
name|empty
argument_list|()
condition|)
return|return
name|m_working_directory
operator|.
name|c_str
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
end_decl_stmt

begin_function_decl
name|bool
name|SetWorkingDirectory
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|string
operator|&
name|GetSTDIN
argument_list|()
block|{
return|return
name|m_stdin
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
operator|&
name|GetSTDOUT
argument_list|()
block|{
return|return
name|m_stdout
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
operator|&
name|GetSTDERR
argument_list|()
block|{
return|return
name|m_stderr
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
operator|&
name|GetWorkingDir
argument_list|()
block|{
return|return
name|m_working_dir
return|;
block|}
end_expr_stmt

begin_function
specifier|const
name|char
modifier|*
name|GetSTDINPath
parameter_list|()
block|{
return|return
name|m_stdin
operator|.
name|empty
argument_list|()
condition|?
name|NULL
else|:
name|m_stdin
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|GetSTDOUTPath
parameter_list|()
block|{
return|return
name|m_stdout
operator|.
name|empty
argument_list|()
condition|?
name|NULL
else|:
name|m_stdout
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|GetSTDERRPath
parameter_list|()
block|{
return|return
name|m_stderr
operator|.
name|empty
argument_list|()
condition|?
name|NULL
else|:
name|m_stderr
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|GetWorkingDirPath
parameter_list|()
block|{
return|return
name|m_working_dir
operator|.
name|empty
argument_list|()
condition|?
name|NULL
else|:
name|m_working_dir
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|PushProcessEvent
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|)
block|{
name|m_process_event
operator|.
name|assign
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|GetProcessEvent
parameter_list|()
block|{
return|return
name|m_process_event
operator|.
name|c_str
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|SetDetachOnError
parameter_list|(
name|bool
name|detach
parameter_list|)
block|{
name|m_detach_on_error
operator|=
name|detach
expr_stmt|;
block|}
end_function

begin_function
name|bool
name|GetDetachOnError
parameter_list|()
block|{
return|return
name|m_detach_on_error
return|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Classes that inherit from RNBContext can see and modify these
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
name|nub_process_t
name|m_pid
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_stdin
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_stdout
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_stderr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_working_dir
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|nub_size_t
name|m_pid_stop_count
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|PThreadEvent
name|m_events
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Threaded events that we can wait for
end_comment

begin_decl_stmt
name|pthread_t
name|m_pid_pthread
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|nub_launch_flavor_t
name|m_launch_flavor
decl_stmt|;
end_decl_stmt

begin_comment
comment|// How to launch our inferior process
end_comment

begin_decl_stmt
name|DNBError
name|m_launch_status
decl_stmt|;
end_decl_stmt

begin_comment
comment|// This holds the status from the last launch attempt.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|m_arg_vec
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|m_env_vec
expr_stmt|;
end_expr_stmt

begin_comment
comment|// This will be unparsed - entries FOO=value
end_comment

begin_expr_stmt
name|std
operator|::
name|string
name|m_working_directory
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_process_event
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|m_detach_on_error
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|StartProcessStatusThread
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|StopProcessStatusThread
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
modifier|*
name|ThreadFunctionProcessStatus
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Outlaw copy and assignment operators
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|RNBContext
argument_list|(
specifier|const
name|RNBContext
operator|&
name|rhs
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|RNBContext
modifier|&
name|operator
init|=
operator|(
specifier|const
name|RNBContext
operator|&
name|rhs
operator|)
decl_stmt|;
end_decl_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __RNBContext_h__
end_comment

end_unit

