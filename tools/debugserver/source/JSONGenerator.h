begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- JSONGenerator.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__JSONGenerator_h_
end_ifndef

begin_define
define|#
directive|define
name|__JSONGenerator_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<iomanip>
end_include

begin_include
include|#
directive|include
file|<sstream>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|/// @class JSONGenerator JSONGenerator.h
end_comment

begin_comment
comment|/// @brief A class which can construct structured data for the sole purpose
end_comment

begin_comment
comment|/// of printing it in JSON format.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// A stripped down version of lldb's StructuredData objects which are much
end_comment

begin_comment
comment|/// general purpose.  This variant is intended only for assembling information
end_comment

begin_comment
comment|/// and printing it as a JSON string.
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|class
name|JSONGenerator
block|{
name|public
label|:
name|class
name|Object
decl_stmt|;
name|class
name|Array
decl_stmt|;
name|class
name|Integer
decl_stmt|;
name|class
name|Float
decl_stmt|;
name|class
name|Boolean
decl_stmt|;
name|class
name|String
decl_stmt|;
name|class
name|Dictionary
decl_stmt|;
name|class
name|Generic
decl_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Object
operator|>
name|ObjectSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Array
operator|>
name|ArraySP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Integer
operator|>
name|IntegerSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Float
operator|>
name|FloatSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Boolean
operator|>
name|BooleanSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|String
operator|>
name|StringSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Dictionary
operator|>
name|DictionarySP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Generic
operator|>
name|GenericSP
expr_stmt|;
name|enum
name|class
name|Type
block|{
name|eTypeInvalid
operator|=
operator|-
literal|1
operator|,
name|eTypeNull
operator|=
literal|0
operator|,
name|eTypeGeneric
operator|,
name|eTypeArray
operator|,
name|eTypeInteger
operator|,
name|eTypeFloat
operator|,
name|eTypeBoolean
operator|,
name|eTypeString
operator|,
name|eTypeDictionary
block|}
empty_stmt|;
name|class
name|Object
range|:
name|public
name|std
operator|::
name|enable_shared_from_this
operator|<
name|Object
operator|>
block|{
name|public
operator|:
name|Object
argument_list|(
argument|Type t = Type::eTypeInvalid
argument_list|)
operator|:
name|m_type
argument_list|(
argument|t
argument_list|)
block|{         }
name|virtual
operator|~
name|Object
argument_list|()
block|{         }
name|virtual
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|Clear
argument_list|()
block|{
name|m_type
operator|=
name|Type
operator|::
name|eTypeInvalid
block|;         }
name|Type
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
name|void
name|SetType
argument_list|(
argument|Type t
argument_list|)
block|{
name|m_type
operator|=
name|t
block|;         }
name|Array
operator|*
name|GetAsArray
argument_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeArray
condition|)
return|return
operator|(
name|Array
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Dictionary
modifier|*
name|GetAsDictionary
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeDictionary
condition|)
return|return
operator|(
name|Dictionary
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Integer
modifier|*
name|GetAsInteger
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeInteger
condition|)
return|return
operator|(
name|Integer
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Float
modifier|*
name|GetAsFloat
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeFloat
condition|)
return|return
operator|(
name|Float
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Boolean
modifier|*
name|GetAsBoolean
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeBoolean
condition|)
return|return
operator|(
name|Boolean
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|String
modifier|*
name|GetAsString
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeString
condition|)
return|return
operator|(
name|String
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Generic
modifier|*
name|GetAsGeneric
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeGeneric
condition|)
return|return
operator|(
name|Generic
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
name|std
operator|::
name|ostream
operator|&
name|s
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|private
label|:
name|Type
name|m_type
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|Array
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Array
argument_list|()
operator|:
name|Object
argument_list|(
argument|Type::eTypeArray
argument_list|)
block|{         }
name|virtual
operator|~
name|Array
argument_list|()
block|{         }
name|void
name|AddItem
argument_list|(
argument|ObjectSP item
argument_list|)
block|{
name|m_items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|s
operator|<<
literal|"["
block|;
specifier|const
name|size_t
name|arrsize
operator|=
name|m_items
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrsize
condition|;
operator|++
name|i
control|)
block|{
name|m_items
index|[
name|i
index|]
operator|->
name|Dump
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|arrsize
condition|)
name|s
operator|<<
literal|","
expr_stmt|;
block|}
name|s
operator|<<
literal|"]"
expr_stmt|;
block|}
name|protected
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ObjectSP
operator|>
name|collection
expr_stmt|;
name|collection
name|m_items
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Integer
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Integer
argument_list|(
argument|uint64_t value =
literal|0
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeInteger
argument_list|)
block|,
name|m_value
argument_list|(
argument|value
argument_list|)
block|{         }
name|virtual
operator|~
name|Integer
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|uint64_t value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|s
operator|<<
name|m_value
block|;         }
name|protected
operator|:
name|uint64_t
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Float
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Float
argument_list|(
argument|double d =
literal|0.0
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeFloat
argument_list|)
block|,
name|m_value
argument_list|(
argument|d
argument_list|)
block|{         }
name|virtual
operator|~
name|Float
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|double value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|s
operator|<<
name|m_value
block|;         }
name|protected
operator|:
name|double
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Boolean
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Boolean
argument_list|(
argument|bool b = false
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeBoolean
argument_list|)
block|,
name|m_value
argument_list|(
argument|b
argument_list|)
block|{         }
name|virtual
operator|~
name|Boolean
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|bool value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
if|if
condition|(
name|m_value
operator|==
name|true
condition|)
name|s
operator|<<
literal|"true"
expr_stmt|;
else|else
name|s
operator|<<
literal|"false"
expr_stmt|;
block|}
name|protected
operator|:
name|bool
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|String
range|:
name|public
name|Object
block|{
name|public
operator|:
name|String
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeString
argument_list|)
block|,
name|m_value
argument_list|()
block|{         }
name|String
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeString
argument_list|)
block|,
name|m_value
argument_list|(
argument|s
argument_list|)
block|{         }
name|String
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&&
name|s
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeString
argument_list|)
block|,
name|m_value
argument_list|(
argument|s
argument_list|)
block|{         }
name|void
name|SetValue
argument_list|(
argument|const std::string&string
argument_list|)
block|{
name|m_value
operator|=
name|string
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|std
operator|::
name|string
name|quoted
block|;
specifier|const
name|size_t
name|strsize
operator|=
name|m_value
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strsize
condition|;
operator|++
name|i
control|)
block|{
name|char
name|ch
init|=
name|m_value
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'"'
condition|)
name|quoted
operator|.
name|push_back
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|quoted
operator|.
name|push_back
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|s
operator|<<
literal|'"'
operator|<<
name|quoted
operator|.
name|c_str
argument_list|()
operator|<<
literal|'"'
expr_stmt|;
block|}
name|protected
operator|:
name|std
operator|::
name|string
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Dictionary
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Dictionary
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeDictionary
argument_list|)
block|,
name|m_dict
argument_list|()
block|{         }
name|virtual
operator|~
name|Dictionary
argument_list|()
block|{         }
name|void
name|AddItem
argument_list|(
argument|std::string key
argument_list|,
argument|ObjectSP value
argument_list|)
block|{
name|m_dict
operator|.
name|push_back
argument_list|(
name|Pair
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
block|;         }
name|void
name|AddIntegerItem
argument_list|(
argument|std::string key
argument_list|,
argument|uint64_t value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new Integer(value)
argument_list|)
argument_list|)
block|;         }
name|void
name|AddFloatItem
argument_list|(
argument|std::string key
argument_list|,
argument|double value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new Float(value)
argument_list|)
argument_list|)
block|;         }
name|void
name|AddStringItem
argument_list|(
argument|std::string key
argument_list|,
argument|std::string value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new String(std::move(value))
argument_list|)
argument_list|)
block|;         }
name|void
name|AddBytesAsHexASCIIString
argument_list|(
argument|std::string key
argument_list|,
argument|const uint8_t *src
argument_list|,
argument|size_t src_len
argument_list|)
block|{
if|if
condition|(
name|src
operator|&&
name|src_len
condition|)
block|{
name|std
operator|::
name|ostringstream
name|strm
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|src_len
condition|;
name|i
operator|++
control|)
name|strm
operator|<<
name|std
operator|::
name|setfill
argument_list|(
literal|'0'
argument_list|)
operator|<<
name|std
operator|::
name|hex
operator|<<
name|std
operator|::
name|right
operator|<<
name|std
operator|::
name|setw
argument_list|(
literal|2
argument_list|)
operator|<<
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|src
index|[
name|i
index|]
argument_list|)
operator|)
expr_stmt|;
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new String(std::move(strm.str()))
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new String()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|AddBooleanItem
argument_list|(
argument|std::string key
argument_list|,
argument|bool value
argument_list|)
block|{
name|AddItem
argument_list|(
name|key
argument_list|,
name|ObjectSP
argument_list|(
argument|new Boolean(value)
argument_list|)
argument_list|)
block|;         }
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|bool
name|have_printed_one_elem
operator|=
name|false
block|;
name|s
operator|<<
literal|"{"
block|;
for|for
control|(
name|collection
operator|::
name|const_iterator
name|iter
operator|=
name|m_dict
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|have_printed_one_elem
operator|==
name|false
condition|)
block|{
name|have_printed_one_elem
operator|=
name|true
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|","
expr_stmt|;
block|}
name|s
operator|<<
literal|"\""
operator|<<
name|iter
operator|->
name|first
operator|.
name|c_str
argument_list|()
operator|<<
literal|"\":"
expr_stmt|;
name|iter
operator|->
name|second
operator|->
name|Dump
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|s
operator|<<
literal|"}"
expr_stmt|;
block|}
name|protected
operator|:
comment|// Keep the dictionary as a vector so the dictionary doesn't reorder itself when you dump it
comment|// We aren't accessing keys by name, so this won't affect performance
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|ObjectSP
operator|>
name|Pair
expr_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Pair
operator|>
name|collection
expr_stmt|;
end_typedef

begin_decl_stmt
name|collection
name|m_dict
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Null
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Null
argument_list|()
operator|:
name|Object
argument_list|(
argument|Type::eTypeNull
argument_list|)
block|{         }
name|virtual
operator|~
name|Null
argument_list|()
block|{         }
name|bool
name|IsValid
argument_list|()
specifier|const
name|override
block|{
return|return
name|false
return|;
block|}
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|{
name|s
operator|<<
literal|"null"
block|;         }
name|protected
operator|:
expr|}
block|;
name|class
name|Generic
operator|:
name|public
name|Object
block|{
name|public
operator|:
name|explicit
name|Generic
argument_list|(
name|void
operator|*
name|object
operator|=
name|nullptr
argument_list|)
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeGeneric
argument_list|)
block|,
name|m_object
argument_list|(
argument|object
argument_list|)
block|{         }
name|void
name|SetValue
argument_list|(
argument|void *value
argument_list|)
block|{
name|m_object
operator|=
name|value
block|;         }
name|void
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_object
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
name|override
block|{
return|return
name|m_object
operator|!=
name|nullptr
return|;
block|}
name|void
name|Dump
argument_list|(
argument|std::ostream&s
argument_list|)
specifier|const
name|override
block|;
name|private
operator|:
name|void
operator|*
name|m_object
block|;     }
block|;  }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// class JSONGenerator
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __JSONGenerator_h_
end_comment

end_unit

