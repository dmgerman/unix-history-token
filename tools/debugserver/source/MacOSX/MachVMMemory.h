begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MachVMMemory.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/26/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MachVMMemory_h__
end_ifndef

begin_define
define|#
directive|define
name|__MachVMMemory_h__
end_define

begin_include
include|#
directive|include
file|"DNBDefs.h"
end_include

begin_include
include|#
directive|include
file|"DNBError.h"
end_include

begin_include
include|#
directive|include
file|<mach/mach.h>
end_include

begin_decl_stmt
name|class
name|MachVMMemory
block|{
name|public
label|:
name|MachVMMemory
argument_list|()
expr_stmt|;
operator|~
name|MachVMMemory
argument_list|()
expr_stmt|;
name|nub_size_t
name|Read
parameter_list|(
name|task_t
name|task
parameter_list|,
name|nub_addr_t
name|address
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|nub_size_t
name|data_count
parameter_list|)
function_decl|;
name|nub_size_t
name|Write
parameter_list|(
name|task_t
name|task
parameter_list|,
name|nub_addr_t
name|address
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|nub_size_t
name|data_count
parameter_list|)
function_decl|;
name|nub_size_t
name|PageSize
parameter_list|(
name|task_t
name|task
parameter_list|)
function_decl|;
name|nub_bool_t
name|GetMemoryRegionInfo
parameter_list|(
name|task_t
name|task
parameter_list|,
name|nub_addr_t
name|address
parameter_list|,
name|DNBRegionInfo
modifier|*
name|region_info
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|HOST_VM_INFO64_COUNT
argument_list|)
name|nub_bool_t
name|GetMemoryProfile
parameter_list|(
name|DNBProfileDataScanType
name|scanType
parameter_list|,
name|task_t
name|task
parameter_list|,
name|struct
name|task_basic_info
name|ti
parameter_list|,
name|cpu_type_t
name|cputype
parameter_list|,
name|nub_process_t
name|pid
parameter_list|,
name|vm_statistics64_data_t
modifier|&
name|vminfo
parameter_list|,
name|uint64_t
modifier|&
name|physical_memory
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rprvt
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rsize
parameter_list|,
name|mach_vm_size_t
modifier|&
name|vprvt
parameter_list|,
name|mach_vm_size_t
modifier|&
name|vsize
parameter_list|,
name|mach_vm_size_t
modifier|&
name|dirty_size
parameter_list|,
name|mach_vm_size_t
modifier|&
name|purgeable
parameter_list|,
name|mach_vm_size_t
modifier|&
name|anonymous
parameter_list|)
function_decl|;
else|#
directive|else
name|nub_bool_t
name|GetMemoryProfile
parameter_list|(
name|DNBProfileDataScanType
name|scanType
parameter_list|,
name|task_t
name|task
parameter_list|,
name|struct
name|task_basic_info
name|ti
parameter_list|,
name|cpu_type_t
name|cputype
parameter_list|,
name|nub_process_t
name|pid
parameter_list|,
name|vm_statistics_data_t
modifier|&
name|vminfo
parameter_list|,
name|uint64_t
modifier|&
name|physical_memory
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rprvt
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rsize
parameter_list|,
name|mach_vm_size_t
modifier|&
name|vprvt
parameter_list|,
name|mach_vm_size_t
modifier|&
name|vsize
parameter_list|,
name|mach_vm_size_t
modifier|&
name|dirty_size
parameter_list|,
name|mach_vm_size_t
modifier|&
name|purgeable
parameter_list|,
name|mach_vm_size_t
modifier|&
name|anonymous
parameter_list|)
function_decl|;
endif|#
directive|endif
name|protected
label|:
name|nub_size_t
name|MaxBytesLeftInPage
parameter_list|(
name|task_t
name|task
parameter_list|,
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|count
parameter_list|)
function_decl|;
name|uint64_t
name|GetStolenPages
parameter_list|(
name|task_t
name|task
parameter_list|)
function_decl|;
name|void
name|GetRegionSizes
parameter_list|(
name|task_t
name|task
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rsize
parameter_list|,
name|mach_vm_size_t
modifier|&
name|dirty_size
parameter_list|)
function_decl|;
name|void
name|GetMemorySizes
parameter_list|(
name|task_t
name|task
parameter_list|,
name|cpu_type_t
name|cputype
parameter_list|,
name|nub_process_t
name|pid
parameter_list|,
name|mach_vm_size_t
modifier|&
name|rprvt
parameter_list|,
name|mach_vm_size_t
modifier|&
name|vprvt
parameter_list|)
function_decl|;
name|nub_size_t
name|WriteRegion
parameter_list|(
name|task_t
name|task
parameter_list|,
specifier|const
name|nub_addr_t
name|address
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
specifier|const
name|nub_size_t
name|data_count
parameter_list|)
function_decl|;
name|vm_size_t
name|m_page_size
decl_stmt|;
name|DNBError
name|m_err
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//    #ifndef __MachVMMemory_h__
end_comment

end_unit

