begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DNBArchImpl.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/25/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DebugNubArchMachPPC_h__
end_ifndef

begin_define
define|#
directive|define
name|__DebugNubArchMachPPC_h__
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ppc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ppc64__
argument_list|)
end_if

begin_include
include|#
directive|include
file|"DNBArch.h"
end_include

begin_decl_stmt
name|class
name|MachThread
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DNBArchMachPPC
range|:
name|public
name|DNBArchProtocol
block|{
name|public
operator|:
name|DNBArchMachPPC
argument_list|(
name|MachThread
operator|*
name|thread
argument_list|)
operator|:
name|m_thread
argument_list|(
name|thread
argument_list|)
block|,
name|m_state
argument_list|()
block|{}
name|virtual
operator|~
name|DNBArchMachPPC
argument_list|()
block|{}
name|virtual
specifier|const
name|DNBRegisterSetInfo
operator|*
name|GetRegisterSetInfo
argument_list|(
argument|nub_size_t *num_reg_sets
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|GetRegisterValue
argument_list|(
argument|uint32_t set
argument_list|,
argument|uint32_t reg
argument_list|,
argument|DNBRegisterValue *value
argument_list|)
specifier|const
block|;
name|virtual
name|kern_return_t
name|GetRegisterState
argument_list|(
argument|int set
argument_list|,
argument|bool force
argument_list|)
block|;
name|virtual
name|kern_return_t
name|SetRegisterState
argument_list|(
argument|int set
argument_list|)
block|;
name|virtual
name|bool
name|RegisterSetStateIsValid
argument_list|(
argument|int set
argument_list|)
specifier|const
block|;
name|virtual
name|uint64_t
name|GetPC
argument_list|(
argument|uint64_t failValue
argument_list|)
block|;
comment|// Get program counter
name|virtual
name|kern_return_t
name|SetPC
argument_list|(
argument|uint64_t value
argument_list|)
block|;
name|virtual
name|uint64_t
name|GetSP
argument_list|(
argument|uint64_t failValue
argument_list|)
block|;
comment|// Get stack pointer
name|virtual
name|bool
name|ThreadWillResume
argument_list|()
block|;
name|virtual
name|bool
name|ThreadDidStop
argument_list|()
block|;
specifier|static
specifier|const
name|uint8_t
operator|*
name|SoftwareBreakpointOpcode
argument_list|(
argument|nub_size_t byte_size
argument_list|)
block|;
specifier|static
name|uint32_t
name|GetCPUType
argument_list|()
block|;
name|protected
operator|:
name|kern_return_t
name|EnableHardwareSingleStep
argument_list|(
argument|bool enable
argument_list|)
block|;
typedef|typedef
enum|enum
name|RegisterSetTag
block|{
name|e_regSetALL
init|=
name|REGISTER_SET_ALL
block|,
name|e_regSetGPR
block|,
name|e_regSetFPR
block|,
name|e_regSetEXC
block|,
name|e_regSetVEC
block|,
name|kNumRegisterSets
decl|}
name|RegisterSet
empty_stmt|;
typedef|typedef
enum|enum
name|RegisterSetWordSizeTag
block|{
name|e_regSetWordSizeGPR
init|=
name|PPC_THREAD_STATE_COUNT
block|,
name|e_regSetWordSizeFPR
init|=
name|PPC_FLOAT_STATE_COUNT
block|,
name|e_regSetWordSizeEXC
init|=
name|PPC_EXCEPTION_STATE_COUNT
block|,
name|e_regSetWordSizeVEC
init|=
name|PPC_VECTOR_STATE_COUNT
init|}
name|RegisterSetWordSize
empty_stmt|;
enum|enum
block|{
name|Read
init|=
literal|0
block|,
name|Write
init|=
literal|1
block|,
name|kNumErrors
init|=
literal|2
init|}
empty_stmt|;
struct|struct
name|State
block|{
name|ppc_thread_state_t
name|gpr
block|;
name|ppc_float_state_t
name|fpr
block|;
name|ppc_exception_state_t
name|exc
block|;
name|ppc_vector_state_t
name|vec
block|;
name|kern_return_t
name|gpr_errs
index|[
literal|2
index|]
block|;
comment|// Read/Write errors
name|kern_return_t
name|fpr_errs
index|[
literal|2
index|]
block|;
comment|// Read/Write errors
name|kern_return_t
name|exc_errs
index|[
literal|2
index|]
block|;
comment|// Read/Write errors
name|kern_return_t
name|vec_errs
index|[
literal|2
index|]
block|;
comment|// Read/Write errors
name|State
argument_list|()
block|{
name|uint32_t
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|kNumErrors
condition|;
name|i
operator|++
control|)
block|{
name|gpr_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|fpr_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|exc_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|vec_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|void
name|InvalidateAllRegisterStates
parameter_list|()
block|{
name|SetError
argument_list|(
name|e_regSetALL
argument_list|,
name|Read
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|kern_return_t
name|GetError
function|(int set
operator|,
function|uint32_t err_idx
block|)
specifier|const
block|{
if|if
condition|(
name|err_idx
operator|<
name|kNumErrors
condition|)
block|{
switch|switch
condition|(
name|set
condition|)
block|{
comment|// When getting all errors, just OR all values together to see if
comment|// we got any kind of error.
case|case
name|e_regSetALL
case|:
return|return
name|gpr_errs
index|[
name|err_idx
index|]
operator||
name|fpr_errs
index|[
name|err_idx
index|]
operator||
name|exc_errs
index|[
name|err_idx
index|]
operator||
name|vec_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetGPR
case|:
return|return
name|gpr_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetFPR
case|:
return|return
name|fpr_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetEXC
case|:
return|return
name|exc_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetVEC
case|:
return|return
name|vec_errs
index|[
name|err_idx
index|]
return|;
default|default:
break|break;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
name|bool
name|SetError
argument_list|(
argument|int set
argument_list|,
argument|uint32_t err_idx
argument_list|,
argument|kern_return_t err
argument_list|)
block|{
if|if
condition|(
name|err_idx
operator|<
name|kNumErrors
condition|)
block|{
switch|switch
condition|(
name|set
condition|)
block|{
case|case
name|e_regSetALL
case|:
name|gpr_errs
index|[
name|err_idx
index|]
operator|=
name|fpr_errs
index|[
name|err_idx
index|]
operator|=
name|exc_errs
index|[
name|err_idx
index|]
operator|=
name|vec_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetGPR
case|:
name|gpr_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetFPR
case|:
name|fpr_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetEXC
case|:
name|exc_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetVEC
case|:
name|vec_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
default|default:
break|break;
block|}
block|}
return|return
name|false
return|;
block|}
name|bool
name|RegsAreValid
argument_list|(
argument|int set
argument_list|)
specifier|const
block|{
return|return
name|GetError
argument_list|(
name|set
argument_list|,
name|Read
argument_list|)
operator|==
name|KERN_SUCCESS
return|;
block|}
expr|}
expr_stmt|;
name|kern_return_t
name|GetGPRState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
name|kern_return_t
name|GetFPRState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
name|kern_return_t
name|GetEXCState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
name|kern_return_t
name|GetVECState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
name|kern_return_t
name|SetGPRState
parameter_list|()
function_decl|;
name|kern_return_t
name|SetFPRState
parameter_list|()
function_decl|;
name|kern_return_t
name|SetEXCState
parameter_list|()
function_decl|;
name|kern_return_t
name|SetVECState
parameter_list|()
function_decl|;
name|protected
label|:
name|MachThread
modifier|*
name|m_thread
block|;
name|State
name|m_state
block|;
block|}
enum|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #if defined (__powerpc__) || defined (__ppc__) || defined (__ppc64__)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __DebugNubArchMachPPC_h__
end_comment

end_unit

