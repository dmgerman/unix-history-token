begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DNBArchImplI386.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/25/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DNBArchImplI386_h__
end_ifndef

begin_define
define|#
directive|define
name|__DNBArchImplI386_h__
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
end_if

begin_include
include|#
directive|include
file|"DNBArch.h"
end_include

begin_include
include|#
directive|include
file|"MachRegisterStatesI386.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|class
name|MachThread
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DNBArchImplI386
range|:
name|public
name|DNBArchProtocol
block|{
name|public
operator|:
name|DNBArchImplI386
argument_list|(
name|MachThread
operator|*
name|thread
argument_list|)
operator|:
name|DNBArchProtocol
argument_list|()
block|,
name|m_thread
argument_list|(
name|thread
argument_list|)
block|,
name|m_state
argument_list|()
block|,
name|m_2pc_dbg_checkpoint
argument_list|()
block|,
name|m_2pc_trans_state
argument_list|(
name|Trans_Done
argument_list|)
block|,
name|m_saved_register_states
argument_list|()
block|{}
name|virtual
operator|~
name|DNBArchImplI386
argument_list|()
block|{}
specifier|static
name|void
name|Initialize
argument_list|()
block|;
name|virtual
name|bool
name|GetRegisterValue
argument_list|(
argument|uint32_t set
argument_list|,
argument|uint32_t reg
argument_list|,
argument|DNBRegisterValue *value
argument_list|)
block|;
name|virtual
name|bool
name|SetRegisterValue
argument_list|(
argument|uint32_t set
argument_list|,
argument|uint32_t reg
argument_list|,
argument|const DNBRegisterValue *value
argument_list|)
block|;
name|virtual
name|nub_size_t
name|GetRegisterContext
argument_list|(
argument|void *buf
argument_list|,
argument|nub_size_t buf_len
argument_list|)
block|;
name|virtual
name|nub_size_t
name|SetRegisterContext
argument_list|(
argument|const void *buf
argument_list|,
argument|nub_size_t buf_len
argument_list|)
block|;
name|virtual
name|uint32_t
name|SaveRegisterState
argument_list|()
block|;
name|virtual
name|bool
name|RestoreRegisterState
argument_list|(
argument|uint32_t save_id
argument_list|)
block|;
name|virtual
name|kern_return_t
name|GetRegisterState
argument_list|(
argument|int set
argument_list|,
argument|bool force
argument_list|)
block|;
name|virtual
name|kern_return_t
name|SetRegisterState
argument_list|(
argument|int set
argument_list|)
block|;
name|virtual
name|bool
name|RegisterSetStateIsValid
argument_list|(
argument|int set
argument_list|)
specifier|const
block|;
name|virtual
name|uint64_t
name|GetPC
argument_list|(
argument|uint64_t failValue
argument_list|)
block|;
comment|// Get program counter
name|virtual
name|kern_return_t
name|SetPC
argument_list|(
argument|uint64_t value
argument_list|)
block|;
name|virtual
name|uint64_t
name|GetSP
argument_list|(
argument|uint64_t failValue
argument_list|)
block|;
comment|// Get stack pointer
name|virtual
name|void
name|ThreadWillResume
argument_list|()
block|;
name|virtual
name|bool
name|ThreadDidStop
argument_list|()
block|;
name|virtual
name|bool
name|NotifyException
argument_list|(
name|MachException
operator|::
name|Data
operator|&
name|exc
argument_list|)
block|;
name|virtual
name|uint32_t
name|NumSupportedHardwareWatchpoints
argument_list|()
block|;
name|virtual
name|uint32_t
name|EnableHardwareWatchpoint
argument_list|(
argument|nub_addr_t addr
argument_list|,
argument|nub_size_t size
argument_list|,
argument|bool read
argument_list|,
argument|bool write
argument_list|,
argument|bool also_set_on_task
argument_list|)
block|;
name|virtual
name|bool
name|DisableHardwareWatchpoint
argument_list|(
argument|uint32_t hw_break_index
argument_list|,
argument|bool also_set_on_task
argument_list|)
block|;
name|virtual
name|uint32_t
name|GetHardwareWatchpointHit
argument_list|(
name|nub_addr_t
operator|&
name|addr
argument_list|)
block|;
name|protected
operator|:
name|kern_return_t
name|EnableHardwareSingleStep
argument_list|(
argument|bool enable
argument_list|)
block|;
typedef|typedef
name|__i386_thread_state_t
name|GPR
typedef|;
end_decl_stmt

begin_typedef
typedef|typedef
name|__i386_float_state_t
name|FPU
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__i386_exception_state_t
name|EXC
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__i386_avx_state_t
name|AVX
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__i386_debug_state_t
name|DBG
typedef|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterInfo
name|g_gpr_registers
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterInfo
name|g_fpu_registers_no_avx
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterInfo
name|g_fpu_registers_avx
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterInfo
name|g_exc_registers
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterSetInfo
name|g_reg_sets_no_avx
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|DNBRegisterSetInfo
name|g_reg_sets_avx
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_gpr_registers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_fpu_registers_no_avx
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_fpu_registers_avx
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_exc_registers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_all_registers_no_avx
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_all_registers_avx
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|k_num_register_sets
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
enum|enum
name|RegisterSetTag
block|{
name|e_regSetALL
init|=
name|REGISTER_SET_ALL
block|,
name|e_regSetGPR
block|,
name|e_regSetFPU
block|,
name|e_regSetEXC
block|,
name|e_regSetDBG
block|,
name|kNumRegisterSets
block|}
name|RegisterSet
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|RegisterSetWordSizeTag
block|{
name|e_regSetWordSizeGPR
init|=
sizeof|sizeof
argument_list|(
name|GPR
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
block|,
name|e_regSetWordSizeFPU
init|=
sizeof|sizeof
argument_list|(
name|FPU
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
block|,
name|e_regSetWordSizeEXC
init|=
sizeof|sizeof
argument_list|(
name|EXC
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
block|,
name|e_regSetWordSizeAVX
init|=
sizeof|sizeof
argument_list|(
name|AVX
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
block|,
name|e_regSetWordSizeDBG
init|=
sizeof|sizeof
argument_list|(
name|DBG
argument_list|)
operator|/
expr|sizeof
operator|(
name|int
operator|)
block|}
name|RegisterSetWordSize
typedef|;
end_typedef

begin_enum
enum|enum
block|{
name|Read
init|=
literal|0
block|,
name|Write
init|=
literal|1
block|,
name|kNumErrors
init|=
literal|2
block|}
enum|;
end_enum

begin_struct
struct|struct
name|Context
block|{
name|GPR
name|gpr
decl_stmt|;
union|union
block|{
name|FPU
name|no_avx
decl_stmt|;
name|AVX
name|avx
decl_stmt|;
block|}
name|fpu
union|;
name|EXC
name|exc
decl_stmt|;
name|DBG
name|dbg
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|State
block|{
name|Context
name|context
decl_stmt|;
name|kern_return_t
name|gpr_errs
index|[
literal|2
index|]
decl_stmt|;
comment|// Read/Write errors
name|kern_return_t
name|fpu_errs
index|[
literal|2
index|]
decl_stmt|;
comment|// Read/Write errors
name|kern_return_t
name|exc_errs
index|[
literal|2
index|]
decl_stmt|;
comment|// Read/Write errors
name|kern_return_t
name|dbg_errs
index|[
literal|2
index|]
decl_stmt|;
comment|// Read/Write errors
name|State
argument_list|()
block|{
name|uint32_t
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|kNumErrors
condition|;
name|i
operator|++
control|)
block|{
name|gpr_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|fpu_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|exc_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|dbg_errs
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|void
name|InvalidateAllRegisterStates
parameter_list|()
block|{
name|SetError
argument_list|(
name|e_regSetALL
argument_list|,
name|Read
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|kern_return_t
name|GetError
argument_list|(
name|int
name|flavor
argument_list|,
name|uint32_t
name|err_idx
argument_list|)
decl|const
block|{
if|if
condition|(
name|err_idx
operator|<
name|kNumErrors
condition|)
block|{
switch|switch
condition|(
name|flavor
condition|)
block|{
comment|// When getting all errors, just OR all values together to see if
comment|// we got any kind of error.
case|case
name|e_regSetALL
case|:
return|return
name|gpr_errs
index|[
name|err_idx
index|]
operator||
name|fpu_errs
index|[
name|err_idx
index|]
operator||
name|exc_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetGPR
case|:
return|return
name|gpr_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetFPU
case|:
return|return
name|fpu_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetEXC
case|:
return|return
name|exc_errs
index|[
name|err_idx
index|]
return|;
case|case
name|e_regSetDBG
case|:
return|return
name|dbg_errs
index|[
name|err_idx
index|]
return|;
default|default:
break|break;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
name|bool
name|SetError
parameter_list|(
name|int
name|flavor
parameter_list|,
name|uint32_t
name|err_idx
parameter_list|,
name|kern_return_t
name|err
parameter_list|)
block|{
if|if
condition|(
name|err_idx
operator|<
name|kNumErrors
condition|)
block|{
switch|switch
condition|(
name|flavor
condition|)
block|{
case|case
name|e_regSetALL
case|:
name|gpr_errs
index|[
name|err_idx
index|]
operator|=
name|fpu_errs
index|[
name|err_idx
index|]
operator|=
name|exc_errs
index|[
name|err_idx
index|]
operator|=
name|dbg_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetGPR
case|:
name|gpr_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetFPU
case|:
name|fpu_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetEXC
case|:
name|exc_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
case|case
name|e_regSetDBG
case|:
name|dbg_errs
index|[
name|err_idx
index|]
operator|=
name|err
expr_stmt|;
return|return
name|true
return|;
default|default:
break|break;
block|}
block|}
return|return
name|false
return|;
block|}
name|bool
name|RegsAreValid
argument_list|(
name|int
name|flavor
argument_list|)
decl|const
block|{
return|return
name|GetError
argument_list|(
name|flavor
argument_list|,
name|Read
argument_list|)
operator|==
name|KERN_SUCCESS
return|;
block|}
block|}
struct|;
end_struct

begin_function_decl
name|kern_return_t
name|GetGPRState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|GetFPUState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|GetEXCState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|GetDBGState
parameter_list|(
name|bool
name|force
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|SetGPRState
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|SetFPUState
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|SetEXCState
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|kern_return_t
name|SetDBGState
parameter_list|(
name|bool
name|also_set_on_task
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|DNBArchProtocol
modifier|*
name|Create
parameter_list|(
name|MachThread
modifier|*
name|thread
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
specifier|const
name|uint8_t
modifier|*
name|SoftwareBreakpointOpcode
parameter_list|(
name|nub_size_t
name|byte_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
specifier|const
name|DNBRegisterSetInfo
modifier|*
name|GetRegisterSetInfo
parameter_list|(
name|nub_size_t
modifier|*
name|num_reg_sets
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|uint32_t
name|GetRegisterContextSize
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// Helper functions for watchpoint manipulations.
end_comment

begin_function_decl
specifier|static
name|void
name|SetWatchpoint
parameter_list|(
name|DBG
modifier|&
name|debug_state
parameter_list|,
name|uint32_t
name|hw_index
parameter_list|,
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|size
parameter_list|,
name|bool
name|read
parameter_list|,
name|bool
name|write
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|ClearWatchpoint
parameter_list|(
name|DBG
modifier|&
name|debug_state
parameter_list|,
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|IsWatchpointVacant
parameter_list|(
specifier|const
name|DBG
modifier|&
name|debug_state
parameter_list|,
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|void
name|ClearWatchpointHits
parameter_list|(
name|DBG
modifier|&
name|debug_state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|bool
name|IsWatchpointHit
parameter_list|(
specifier|const
name|DBG
modifier|&
name|debug_state
parameter_list|,
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|nub_addr_t
name|GetWatchAddress
parameter_list|(
specifier|const
name|DBG
modifier|&
name|debug_state
parameter_list|,
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|bool
name|StartTransForHWP
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|bool
name|RollbackTransForHWP
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|bool
name|FinishTransForHWP
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|DBG
name|GetDBGCheckpoint
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
name|MachThread
modifier|*
name|m_thread
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|State
name|m_state
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|DBG
name|m_2pc_dbg_checkpoint
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|m_2pc_trans_state
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Is transaction of DBG state change: Pedning
end_comment

begin_comment
comment|// (0), Done (1), or Rolled Back (2)?
end_comment

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint32_t
operator|,
name|Context
operator|>
name|SaveRegisterStates
expr_stmt|;
end_typedef

begin_decl_stmt
name|SaveRegisterStates
name|m_saved_register_states
decl_stmt|;
end_decl_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// #if defined (__i386__) || defined (__x86_64__)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __DNBArchImplI386_h__
end_comment

end_unit

