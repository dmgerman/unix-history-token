begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MachThreadList.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/19/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MachThreadList_h__
end_ifndef

begin_define
define|#
directive|define
name|__MachThreadList_h__
end_define

begin_include
include|#
directive|include
file|"MachThread.h"
end_include

begin_include
include|#
directive|include
file|"ThreadInfo.h"
end_include

begin_decl_stmt
name|class
name|DNBThreadResumeActions
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachThreadList
block|{
name|public
label|:
name|MachThreadList
argument_list|()
expr_stmt|;
operator|~
name|MachThreadList
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|Dump
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetRegisterValue
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
name|uint32_t
name|set
argument_list|,
name|uint32_t
name|reg
argument_list|,
name|DNBRegisterValue
operator|*
name|reg_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetRegisterValue
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
name|uint32_t
name|set
argument_list|,
name|uint32_t
name|reg
argument_list|,
specifier|const
name|DNBRegisterValue
operator|*
name|reg_value
argument_list|)
decl|const
decl_stmt|;
name|nub_size_t
name|GetRegisterContext
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|buf_len
parameter_list|)
function_decl|;
name|nub_size_t
name|SetRegisterContext
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|buf_len
parameter_list|)
function_decl|;
name|uint32_t
name|SaveRegisterState
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|bool
name|RestoreRegisterState
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|uint32_t
name|save_id
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetThreadInfo
argument_list|(
name|nub_thread_t
name|tid
argument_list|)
decl|const
decl_stmt|;
name|void
name|ProcessWillResume
parameter_list|(
name|MachProcess
modifier|*
name|process
parameter_list|,
specifier|const
name|DNBThreadResumeActions
modifier|&
name|thread_actions
parameter_list|)
function_decl|;
name|uint32_t
name|ProcessDidStop
parameter_list|(
name|MachProcess
modifier|*
name|process
parameter_list|)
function_decl|;
name|bool
name|NotifyException
argument_list|(
name|MachException
operator|::
name|Data
operator|&
name|exc
argument_list|)
decl_stmt|;
name|bool
name|ShouldStop
parameter_list|(
name|bool
modifier|&
name|step_more
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetName
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_state_t
name|GetState
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_thread_t
name|SetCurrentThread
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|ThreadInfo
operator|::
name|QoS
name|GetRequestedQoS
argument_list|(
argument|nub_thread_t tid
argument_list|,
argument|nub_addr_t tsd
argument_list|,
argument|uint64_t dti_qos_class_index
argument_list|)
expr_stmt|;
name|nub_addr_t
name|GetPThreadT
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_addr_t
name|GetDispatchQueueT
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_addr_t
name|GetTSDAddressForThread
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_base_address_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_base_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_entry_size
parameter_list|)
function_decl|;
name|bool
name|GetThreadStoppedReason
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
expr|struct
name|DNBThreadStopInfo
operator|*
name|stop_info
argument_list|)
decl|const
decl_stmt|;
name|void
name|DumpThreadStoppedReason
argument_list|(
name|nub_thread_t
name|tid
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetIdentifierInfo
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|thread_identifier_info_data_t
modifier|*
name|ident_info
parameter_list|)
function_decl|;
name|nub_size_t
name|NumThreads
argument_list|()
specifier|const
expr_stmt|;
name|nub_thread_t
name|ThreadIDAtIndex
argument_list|(
name|nub_size_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|nub_thread_t
name|CurrentThreadID
parameter_list|()
function_decl|;
name|void
name|CurrentThread
parameter_list|(
name|MachThreadSP
modifier|&
name|threadSP
parameter_list|)
function_decl|;
name|void
name|NotifyBreakpointChanged
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|bp
parameter_list|)
function_decl|;
name|uint32_t
name|EnableHardwareBreakpoint
argument_list|(
specifier|const
name|DNBBreakpoint
operator|*
name|bp
argument_list|)
decl|const
decl_stmt|;
name|bool
name|DisableHardwareBreakpoint
argument_list|(
specifier|const
name|DNBBreakpoint
operator|*
name|bp
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|EnableHardwareWatchpoint
argument_list|(
specifier|const
name|DNBBreakpoint
operator|*
name|wp
argument_list|)
decl|const
decl_stmt|;
name|bool
name|DisableHardwareWatchpoint
argument_list|(
specifier|const
name|DNBBreakpoint
operator|*
name|wp
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|NumSupportedHardwareWatchpoints
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetThreadIndexForThreadStoppedWithSignal
argument_list|(
specifier|const
name|int
name|signo
argument_list|)
decl|const
decl_stmt|;
name|MachThreadSP
name|GetThreadByID
argument_list|(
name|nub_thread_t
name|tid
argument_list|)
decl|const
decl_stmt|;
name|MachThreadSP
name|GetThreadByMachPortNumber
argument_list|(
name|thread_t
name|mach_port_number
argument_list|)
decl|const
decl_stmt|;
name|nub_thread_t
name|GetThreadIDByMachPortNumber
argument_list|(
name|thread_t
name|mach_port_number
argument_list|)
decl|const
decl_stmt|;
name|thread_t
name|GetMachPortNumberByThreadID
argument_list|(
name|nub_thread_t
name|globally_unique_id
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MachThreadSP
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|uint32_t
name|UpdateThreadList
parameter_list|(
name|MachProcess
modifier|*
name|process
parameter_list|,
name|bool
name|update
parameter_list|,
name|collection
modifier|*
name|num_threads
init|=
name|NULL
parameter_list|)
function_decl|;
comment|//  const_iterator  FindThreadByID (thread_t tid) const;
name|collection
name|m_threads
decl_stmt|;
name|mutable
name|PThreadMutex
name|m_threads_mutex
decl_stmt|;
name|MachThreadSP
name|m_current_thread
decl_stmt|;
name|bool
name|m_is_64_bit
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __MachThreadList_h__
end_comment

end_unit

