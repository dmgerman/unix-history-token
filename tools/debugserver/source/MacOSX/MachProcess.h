begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MachProcess.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/15/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MachProcess_h__
end_ifndef

begin_define
define|#
directive|define
name|__MachProcess_h__
end_define

begin_include
include|#
directive|include
file|<mach/mach.h>
end_include

begin_include
include|#
directive|include
file|<mach-o/loader.h>
end_include

begin_include
include|#
directive|include
file|<sys/signal.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<uuid/uuid.h>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include

begin_include
include|#
directive|include
file|"DNBDefs.h"
end_include

begin_include
include|#
directive|include
file|"DNBBreakpoint.h"
end_include

begin_include
include|#
directive|include
file|"DNBError.h"
end_include

begin_include
include|#
directive|include
file|"DNBThreadResumeActions.h"
end_include

begin_include
include|#
directive|include
file|"MachException.h"
end_include

begin_include
include|#
directive|include
file|"MachVMMemory.h"
end_include

begin_include
include|#
directive|include
file|"MachTask.h"
end_include

begin_include
include|#
directive|include
file|"MachThreadList.h"
end_include

begin_include
include|#
directive|include
file|"PThreadCondition.h"
end_include

begin_include
include|#
directive|include
file|"PThreadEvent.h"
end_include

begin_include
include|#
directive|include
file|"PThreadMutex.h"
end_include

begin_include
include|#
directive|include
file|"Genealogy.h"
end_include

begin_include
include|#
directive|include
file|"ThreadInfo.h"
end_include

begin_include
include|#
directive|include
file|"JSONGenerator.h"
end_include

begin_decl_stmt
name|class
name|DNBThreadResumeActions
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachProcess
block|{
name|public
label|:
comment|//----------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//----------------------------------------------------------------------
name|MachProcess
argument_list|()
expr_stmt|;
operator|~
name|MachProcess
argument_list|()
expr_stmt|;
comment|// A structure that can hold everything debugserver needs to know from
comment|// a binary's Mach-O header / load commands.
struct|struct
name|mach_o_segment
block|{
name|std
operator|::
name|string
name|name
expr_stmt|;
name|uint64_t
name|vmaddr
decl_stmt|;
name|uint64_t
name|vmsize
decl_stmt|;
name|uint64_t
name|fileoff
decl_stmt|;
name|uint64_t
name|filesize
decl_stmt|;
name|uint64_t
name|maxprot
decl_stmt|;
name|uint64_t
name|initprot
decl_stmt|;
name|uint64_t
name|nsects
decl_stmt|;
name|uint64_t
name|flags
decl_stmt|;
block|}
struct|;
struct|struct
name|mach_o_information
block|{
name|struct
name|mach_header_64
name|mach_header
decl_stmt|;
name|std
operator|::
name|vector
operator|<
expr|struct
name|mach_o_segment
operator|>
name|segments
expr_stmt|;
name|uuid_t
name|uuid
decl_stmt|;
name|std
operator|::
name|string
name|min_version_os_name
expr_stmt|;
name|std
operator|::
name|string
name|min_version_os_version
expr_stmt|;
block|}
struct|;
struct|struct
name|binary_image_information
block|{
name|std
operator|::
name|string
name|filename
expr_stmt|;
name|uint64_t
name|load_address
decl_stmt|;
name|uint64_t
name|mod_date
decl_stmt|;
comment|// may not be available - 0 if so
name|struct
name|mach_o_information
name|macho_info
decl_stmt|;
name|binary_image_information
argument_list|()
operator|:
name|filename
argument_list|()
operator|,
name|load_address
argument_list|(
name|INVALID_NUB_ADDRESS
argument_list|)
operator|,
name|mod_date
argument_list|(
literal|0
argument_list|)
block|{ }
block|}
struct|;
comment|//----------------------------------------------------------------------
comment|// Child process control
comment|//----------------------------------------------------------------------
name|pid_t
name|AttachForDebug
parameter_list|(
name|pid_t
name|pid
parameter_list|,
name|char
modifier|*
name|err_str
parameter_list|,
name|size_t
name|err_len
parameter_list|)
function_decl|;
name|pid_t
name|LaunchForDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
specifier|const
name|char
modifier|*
name|working_directory
parameter_list|,
specifier|const
name|char
modifier|*
name|stdin_path
parameter_list|,
specifier|const
name|char
modifier|*
name|stdout_path
parameter_list|,
specifier|const
name|char
modifier|*
name|stderr_path
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|nub_launch_flavor_t
name|launch_flavor
parameter_list|,
name|int
name|disable_aslr
parameter_list|,
specifier|const
name|char
modifier|*
name|event_data
parameter_list|,
name|DNBError
modifier|&
name|err
parameter_list|)
function_decl|;
specifier|static
name|uint32_t
name|GetCPUTypeForLocalProcess
parameter_list|(
name|pid_t
name|pid
parameter_list|)
function_decl|;
specifier|static
name|pid_t
name|ForkChildForPTraceDebugging
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
name|MachProcess
modifier|*
name|process
parameter_list|,
name|DNBError
modifier|&
name|err
parameter_list|)
function_decl|;
specifier|static
name|pid_t
name|PosixSpawnChildForPTraceDebugging
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|cpu_type_t
name|cpu_type
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
specifier|const
name|char
modifier|*
name|working_directory
parameter_list|,
specifier|const
name|char
modifier|*
name|stdin_path
parameter_list|,
specifier|const
name|char
modifier|*
name|stdout_path
parameter_list|,
specifier|const
name|char
modifier|*
name|stderr_path
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|MachProcess
modifier|*
name|process
parameter_list|,
name|int
name|disable_aslr
parameter_list|,
name|DNBError
modifier|&
name|err
parameter_list|)
function_decl|;
name|nub_addr_t
name|GetDYLDAllImageInfosAddress
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|void
modifier|*
name|PrepareForAttach
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|nub_launch_flavor_t
name|launch_flavor
parameter_list|,
name|bool
name|waitfor
parameter_list|,
name|DNBError
modifier|&
name|err_str
parameter_list|)
function_decl|;
specifier|static
name|void
name|CleanupAfterAttach
parameter_list|(
specifier|const
name|void
modifier|*
name|attach_token
parameter_list|,
name|nub_launch_flavor_t
name|launch_flavor
parameter_list|,
name|bool
name|success
parameter_list|,
name|DNBError
modifier|&
name|err_str
parameter_list|)
function_decl|;
specifier|static
name|nub_process_t
name|CheckForProcess
parameter_list|(
specifier|const
name|void
modifier|*
name|attach_token
parameter_list|,
name|nub_launch_flavor_t
name|launch_flavor
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|WITH_BKS
argument_list|)
operator|||
name|defined
argument_list|(
name|WITH_FBS
argument_list|)
name|pid_t
name|BoardServiceLaunchForDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|app_bundle_path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|bool
name|disable_aslr
parameter_list|,
specifier|const
name|char
modifier|*
name|event_data
parameter_list|,
name|DNBError
modifier|&
name|launch_err
parameter_list|)
function_decl|;
name|pid_t
name|BoardServiceForkChildForPTraceDebugging
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|bool
name|disable_aslr
parameter_list|,
specifier|const
name|char
modifier|*
name|event_data
parameter_list|,
name|DNBError
modifier|&
name|launch_err
parameter_list|)
function_decl|;
name|bool
name|BoardServiceSendEvent
parameter_list|(
specifier|const
name|char
modifier|*
name|event
parameter_list|,
name|DNBError
modifier|&
name|error
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|static
name|bool
name|GetOSVersionNumbers
parameter_list|(
name|uint64_t
modifier|*
name|major
parameter_list|,
name|uint64_t
modifier|*
name|minor
parameter_list|,
name|uint64_t
modifier|*
name|patch
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|WITH_BKS
specifier|static
name|void
name|BKSCleanupAfterAttach
parameter_list|(
specifier|const
name|void
modifier|*
name|attach_token
parameter_list|,
name|DNBError
modifier|&
name|err_str
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// WITH_BKS
ifdef|#
directive|ifdef
name|WITH_FBS
specifier|static
name|void
name|FBSCleanupAfterAttach
parameter_list|(
specifier|const
name|void
modifier|*
name|attach_token
parameter_list|,
name|DNBError
modifier|&
name|err_str
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// WITH_FBS
ifdef|#
directive|ifdef
name|WITH_SPRINGBOARD
name|pid_t
name|SBLaunchForDebug
parameter_list|(
specifier|const
name|char
modifier|*
name|app_bundle_path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|bool
name|disable_aslr
parameter_list|,
name|DNBError
modifier|&
name|launch_err
parameter_list|)
function_decl|;
specifier|static
name|pid_t
name|SBForkChildForPTraceDebugging
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
specifier|const
modifier|*
name|argv
index|[]
parameter_list|,
name|char
specifier|const
modifier|*
name|envp
index|[]
parameter_list|,
name|bool
name|no_stdio
parameter_list|,
name|MachProcess
modifier|*
name|process
parameter_list|,
name|DNBError
modifier|&
name|launch_err
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// WITH_SPRINGBOARD
name|nub_addr_t
name|LookupSymbol
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|shlib
parameter_list|)
function_decl|;
name|void
name|SetNameToAddressCallback
parameter_list|(
name|DNBCallbackNameToAddress
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
block|{
name|m_name_to_addr_callback
operator|=
name|callback
expr_stmt|;
name|m_name_to_addr_baton
operator|=
name|baton
expr_stmt|;
block|}
name|void
name|SetSharedLibraryInfoCallback
parameter_list|(
name|DNBCallbackCopyExecutableImageInfos
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
block|{
name|m_image_infos_callback
operator|=
name|callback
expr_stmt|;
name|m_image_infos_baton
operator|=
name|baton
expr_stmt|;
block|}
name|bool
name|Resume
parameter_list|(
specifier|const
name|DNBThreadResumeActions
modifier|&
name|thread_actions
parameter_list|)
function_decl|;
name|bool
name|Signal
parameter_list|(
name|int
name|signal
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_abstime
init|=
name|NULL
parameter_list|)
function_decl|;
name|bool
name|Interrupt
parameter_list|()
function_decl|;
name|bool
name|SendEvent
parameter_list|(
specifier|const
name|char
modifier|*
name|event
parameter_list|,
name|DNBError
modifier|&
name|send_err
parameter_list|)
function_decl|;
name|bool
name|Kill
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|timeout_abstime
init|=
name|NULL
parameter_list|)
function_decl|;
name|bool
name|Detach
parameter_list|()
function_decl|;
name|nub_size_t
name|ReadMemory
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|size
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
name|nub_size_t
name|WriteMemory
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|size
parameter_list|,
specifier|const
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Path and arg accessors
comment|//----------------------------------------------------------------------
specifier|const
name|char
operator|*
name|Path
argument_list|()
specifier|const
block|{
return|return
name|m_path
operator|.
name|c_str
argument_list|()
return|;
block|}
name|size_t
name|ArgumentCount
argument_list|()
specifier|const
block|{
return|return
name|m_args
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|char
modifier|*
name|ArgumentAtIndex
argument_list|(
name|size_t
name|arg_idx
argument_list|)
decl|const
block|{
if|if
condition|(
name|arg_idx
operator|<
name|m_args
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_args
index|[
name|arg_idx
index|]
operator|.
name|c_str
argument_list|()
return|;
return|return
name|NULL
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Breakpoint functions
comment|//----------------------------------------------------------------------
name|DNBBreakpoint
modifier|*
name|CreateBreakpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|length
parameter_list|,
name|bool
name|hardware
parameter_list|)
function_decl|;
name|bool
name|DisableBreakpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|bool
name|remove
parameter_list|)
function_decl|;
name|void
name|DisableAllBreakpoints
parameter_list|(
name|bool
name|remove
parameter_list|)
function_decl|;
name|bool
name|EnableBreakpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|)
function_decl|;
name|DNBBreakpointList
modifier|&
name|Breakpoints
parameter_list|()
block|{
return|return
name|m_breakpoints
return|;
block|}
specifier|const
name|DNBBreakpointList
operator|&
name|Breakpoints
argument_list|()
specifier|const
block|{
return|return
name|m_breakpoints
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Watchpoint functions
comment|//----------------------------------------------------------------------
name|DNBBreakpoint
modifier|*
name|CreateWatchpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|length
parameter_list|,
name|uint32_t
name|watch_type
parameter_list|,
name|bool
name|hardware
parameter_list|)
function_decl|;
name|bool
name|DisableWatchpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|bool
name|remove
parameter_list|)
function_decl|;
name|void
name|DisableAllWatchpoints
parameter_list|(
name|bool
name|remove
parameter_list|)
function_decl|;
name|bool
name|EnableWatchpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|)
function_decl|;
name|uint32_t
name|GetNumSupportedHardwareWatchpoints
argument_list|()
specifier|const
expr_stmt|;
name|DNBBreakpointList
modifier|&
name|Watchpoints
parameter_list|()
block|{
return|return
name|m_watchpoints
return|;
block|}
specifier|const
name|DNBBreakpointList
operator|&
name|Watchpoints
argument_list|()
specifier|const
block|{
return|return
name|m_watchpoints
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Exception thread functions
comment|//----------------------------------------------------------------------
name|bool
name|StartSTDIOThread
parameter_list|()
function_decl|;
specifier|static
name|void
modifier|*
name|STDIOThread
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
name|ExceptionMessageReceived
argument_list|(
specifier|const
name|MachException
operator|::
name|Message
operator|&
name|exceptionMessage
argument_list|)
decl_stmt|;
name|task_t
name|ExceptionMessageBundleComplete
parameter_list|()
function_decl|;
name|void
name|SharedLibrariesUpdated
parameter_list|()
function_decl|;
name|nub_size_t
name|CopyImageInfos
parameter_list|(
name|struct
name|DNBExecutableImageInfo
modifier|*
modifier|*
name|image_infos
parameter_list|,
name|bool
name|only_changed
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Profile functions
comment|//----------------------------------------------------------------------
name|void
name|SetEnableAsyncProfiling
parameter_list|(
name|bool
name|enable
parameter_list|,
name|uint64_t
name|internal_usec
parameter_list|,
name|DNBProfileDataScanType
name|scan_type
parameter_list|)
function_decl|;
name|bool
name|IsProfilingEnabled
parameter_list|()
block|{
return|return
name|m_profile_enabled
return|;
block|}
name|useconds_t
name|ProfileInterval
parameter_list|()
block|{
return|return
name|m_profile_interval_usec
return|;
block|}
name|bool
name|StartProfileThread
parameter_list|()
function_decl|;
specifier|static
name|void
modifier|*
name|ProfileThread
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
name|SignalAsyncProfileData
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|)
function_decl|;
name|size_t
name|GetAsyncProfileData
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buf_size
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Accessors
comment|//----------------------------------------------------------------------
name|pid_t
name|ProcessID
argument_list|()
specifier|const
block|{
return|return
name|m_pid
return|;
block|}
name|bool
name|ProcessIDIsValid
argument_list|()
specifier|const
block|{
return|return
name|m_pid
operator|>
literal|0
return|;
block|}
name|pid_t
name|SetProcessID
parameter_list|(
name|pid_t
name|pid
parameter_list|)
function_decl|;
name|MachTask
modifier|&
name|Task
parameter_list|()
block|{
return|return
name|m_task
return|;
block|}
specifier|const
name|MachTask
operator|&
name|Task
argument_list|()
specifier|const
block|{
return|return
name|m_task
return|;
block|}
name|PThreadEvent
modifier|&
name|Events
parameter_list|()
block|{
return|return
name|m_events
return|;
block|}
specifier|const
name|DNBRegisterSetInfo
modifier|*
name|GetRegisterSetInfo
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
name|nub_size_t
operator|*
name|num_reg_sets
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetRegisterValue
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
name|uint32_t
name|set
argument_list|,
name|uint32_t
name|reg
argument_list|,
name|DNBRegisterValue
operator|*
name|reg_value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetRegisterValue
argument_list|(
name|nub_thread_t
name|tid
argument_list|,
name|uint32_t
name|set
argument_list|,
name|uint32_t
name|reg
argument_list|,
specifier|const
name|DNBRegisterValue
operator|*
name|value
argument_list|)
decl|const
decl_stmt|;
name|nub_bool_t
name|SyncThreadState
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|ThreadGetName
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_state_t
name|ThreadGetState
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|ThreadInfo
operator|::
name|QoS
name|GetRequestedQoS
argument_list|(
argument|nub_thread_t tid
argument_list|,
argument|nub_addr_t tsd
argument_list|,
argument|uint64_t dti_qos_class_index
argument_list|)
expr_stmt|;
name|nub_addr_t
name|GetPThreadT
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_addr_t
name|GetDispatchQueueT
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|nub_addr_t
name|GetTSDAddressForThread
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_base_address_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_base_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_entry_size
parameter_list|)
function_decl|;
name|bool
name|GetMachOInformationFromMemory
parameter_list|(
name|nub_addr_t
name|mach_o_header_addr
parameter_list|,
name|int
name|wordsize
parameter_list|,
name|struct
name|mach_o_information
modifier|&
name|inf
parameter_list|)
function_decl|;
name|JSONGenerator
operator|::
name|ObjectSP
name|FormatDynamicLibrariesIntoJSON
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
expr|struct
name|binary_image_information
operator|>
operator|&
name|image_infos
argument_list|)
expr_stmt|;
name|void
name|GetAllLoadedBinariesViaDYLDSPI
argument_list|(
name|std
operator|::
name|vector
operator|<
expr|struct
name|binary_image_information
operator|>
operator|&
name|image_infos
argument_list|)
decl_stmt|;
name|JSONGenerator
operator|::
name|ObjectSP
name|GetLoadedDynamicLibrariesInfos
argument_list|(
argument|nub_process_t pid
argument_list|,
argument|nub_addr_t image_list_address
argument_list|,
argument|nub_addr_t image_count
argument_list|)
expr_stmt|;
name|JSONGenerator
operator|::
name|ObjectSP
name|GetLibrariesInfoForAddresses
argument_list|(
argument|nub_process_t pid
argument_list|,
argument|std::vector<uint64_t>&macho_addresses
argument_list|)
expr_stmt|;
name|JSONGenerator
operator|::
name|ObjectSP
name|GetAllLoadedLibrariesInfos
argument_list|(
argument|nub_process_t pid
argument_list|)
expr_stmt|;
name|JSONGenerator
operator|::
name|ObjectSP
name|GetSharedCacheInfo
argument_list|(
argument|nub_process_t pid
argument_list|)
expr_stmt|;
name|nub_size_t
name|GetNumThreads
argument_list|()
specifier|const
expr_stmt|;
name|nub_thread_t
name|GetThreadAtIndex
argument_list|(
name|nub_size_t
name|thread_idx
argument_list|)
decl|const
decl_stmt|;
name|nub_thread_t
name|GetCurrentThread
parameter_list|()
function_decl|;
name|nub_thread_t
name|GetCurrentThreadMachPort
parameter_list|()
function_decl|;
name|nub_thread_t
name|SetCurrentThread
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|)
function_decl|;
name|MachThreadList
modifier|&
name|GetThreadList
parameter_list|()
block|{
return|return
name|m_thread_list
return|;
block|}
name|bool
name|GetThreadStoppedReason
parameter_list|(
name|nub_thread_t
name|tid
parameter_list|,
name|struct
name|DNBThreadStopInfo
modifier|*
name|stop_info
parameter_list|)
function_decl|;
name|void
name|DumpThreadStoppedReason
argument_list|(
name|nub_thread_t
name|tid
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetThreadInfo
argument_list|(
name|nub_thread_t
name|tid
argument_list|)
decl|const
decl_stmt|;
name|nub_thread_t
name|GetThreadIDForMachPortNumber
argument_list|(
name|thread_t
name|mach_port_number
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|GetCPUType
parameter_list|()
function_decl|;
name|nub_state_t
name|GetState
parameter_list|()
function_decl|;
name|void
name|SetState
parameter_list|(
name|nub_state_t
name|state
parameter_list|)
function_decl|;
name|bool
name|IsRunning
parameter_list|(
name|nub_state_t
name|state
parameter_list|)
block|{
return|return
name|state
operator|==
name|eStateRunning
operator|||
name|IsStepping
argument_list|(
name|state
argument_list|)
return|;
block|}
name|bool
name|IsStepping
parameter_list|(
name|nub_state_t
name|state
parameter_list|)
block|{
return|return
name|state
operator|==
name|eStateStepping
return|;
block|}
name|bool
name|CanResume
parameter_list|(
name|nub_state_t
name|state
parameter_list|)
block|{
return|return
name|state
operator|==
name|eStateStopped
return|;
block|}
name|bool
name|GetExitStatus
parameter_list|(
name|int
modifier|*
name|status
parameter_list|)
block|{
if|if
condition|(
name|GetState
argument_list|()
operator|==
name|eStateExited
condition|)
block|{
if|if
condition|(
name|status
condition|)
operator|*
name|status
operator|=
name|m_exit_status
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|void
name|SetExitStatus
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|m_exit_status
operator|=
name|status
expr_stmt|;
name|SetState
argument_list|(
name|eStateExited
argument_list|)
expr_stmt|;
block|}
specifier|const
name|char
modifier|*
name|GetExitInfo
parameter_list|()
block|{
return|return
name|m_exit_info
operator|.
name|c_str
argument_list|()
return|;
block|}
name|void
name|SetExitInfo
parameter_list|(
specifier|const
name|char
modifier|*
name|info
parameter_list|)
function_decl|;
name|uint32_t
name|StopCount
argument_list|()
specifier|const
block|{
return|return
name|m_stop_count
return|;
block|}
name|void
name|SetChildFileDescriptors
parameter_list|(
name|int
name|stdin_fileno
parameter_list|,
name|int
name|stdout_fileno
parameter_list|,
name|int
name|stderr_fileno
parameter_list|)
block|{
name|m_child_stdin
operator|=
name|stdin_fileno
expr_stmt|;
name|m_child_stdout
operator|=
name|stdout_fileno
expr_stmt|;
name|m_child_stderr
operator|=
name|stderr_fileno
expr_stmt|;
block|}
name|int
name|GetStdinFileDescriptor
argument_list|()
specifier|const
block|{
return|return
name|m_child_stdin
return|;
block|}
name|int
name|GetStdoutFileDescriptor
argument_list|()
specifier|const
block|{
return|return
name|m_child_stdout
return|;
block|}
name|int
name|GetStderrFileDescriptor
argument_list|()
specifier|const
block|{
return|return
name|m_child_stderr
return|;
block|}
name|void
name|AppendSTDOUT
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|size_t
name|GetAvailableSTDOUT
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buf_size
parameter_list|)
function_decl|;
name|size_t
name|GetAvailableSTDERR
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buf_size
parameter_list|)
function_decl|;
name|void
name|CloseChildFileDescriptors
parameter_list|()
block|{
if|if
condition|(
name|m_child_stdin
operator|>=
literal|0
condition|)
block|{
operator|::
name|close
argument_list|(
name|m_child_stdin
argument_list|)
expr_stmt|;
name|m_child_stdin
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|m_child_stdout
operator|>=
literal|0
condition|)
block|{
operator|::
name|close
argument_list|(
name|m_child_stdout
argument_list|)
expr_stmt|;
name|m_child_stdout
operator|=
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|m_child_stderr
operator|>=
literal|0
condition|)
block|{
operator|::
name|close
argument_list|(
name|m_child_stderr
argument_list|)
expr_stmt|;
name|m_child_stderr
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|bool
name|ProcessUsingSpringBoard
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|eMachProcessFlagsUsingSBS
operator|)
operator|!=
literal|0
return|;
block|}
name|bool
name|ProcessUsingBackBoard
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|eMachProcessFlagsUsingBKS
operator|)
operator|!=
literal|0
return|;
block|}
name|Genealogy
operator|::
name|ThreadActivitySP
name|GetGenealogyInfoForThread
argument_list|(
argument|nub_thread_t tid
argument_list|,
argument|bool&timed_out
argument_list|)
expr_stmt|;
name|Genealogy
operator|::
name|ProcessExecutableInfoSP
name|GetGenealogyImageInfo
argument_list|(
argument|size_t idx
argument_list|)
expr_stmt|;
name|DNBProfileDataScanType
name|GetProfileScanType
parameter_list|()
block|{
return|return
name|m_profile_scan_type
return|;
block|}
name|private
label|:
enum|enum
block|{
name|eMachProcessFlagsNone
init|=
literal|0
block|,
name|eMachProcessFlagsAttached
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|eMachProcessFlagsUsingSBS
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|eMachProcessFlagsUsingBKS
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|eMachProcessFlagsUsingFBS
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|}
enum|;
name|void
name|Clear
parameter_list|(
name|bool
name|detaching
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|ReplyToAllExceptions
parameter_list|()
function_decl|;
name|void
name|PrivateResume
parameter_list|()
function_decl|;
name|uint32_t
name|Flags
argument_list|()
specifier|const
block|{
return|return
name|m_flags
return|;
block|}
name|nub_state_t
name|DoSIGSTOP
parameter_list|(
name|bool
name|clear_bps_and_wps
parameter_list|,
name|bool
name|allow_running
parameter_list|,
name|uint32_t
modifier|*
name|thread_idx_ptr
parameter_list|)
function_decl|;
name|pid_t
name|m_pid
decl_stmt|;
comment|// Process ID of child process
name|cpu_type_t
name|m_cpu_type
decl_stmt|;
comment|// The CPU type of this process
name|int
name|m_child_stdin
decl_stmt|;
name|int
name|m_child_stdout
decl_stmt|;
name|int
name|m_child_stderr
decl_stmt|;
name|std
operator|::
name|string
name|m_path
expr_stmt|;
comment|// A path to the executable if we have one
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|m_args
expr_stmt|;
comment|// The arguments with which the process was lauched
name|int
name|m_exit_status
decl_stmt|;
comment|// The exit status for the process
name|std
operator|::
name|string
name|m_exit_info
expr_stmt|;
comment|// Any extra info that we may have about the exit
name|MachTask
name|m_task
decl_stmt|;
comment|// The mach task for this process
name|uint32_t
name|m_flags
decl_stmt|;
comment|// Process specific flags (see eMachProcessFlags enums)
name|uint32_t
name|m_stop_count
decl_stmt|;
comment|// A count of many times have we stopped
name|pthread_t
name|m_stdio_thread
decl_stmt|;
comment|// Thread ID for the thread that watches for child process stdio
name|PThreadMutex
name|m_stdio_mutex
decl_stmt|;
comment|// Multithreaded protection for stdio
name|std
operator|::
name|string
name|m_stdout_data
expr_stmt|;
name|bool
name|m_profile_enabled
decl_stmt|;
comment|// A flag to indicate if profiling is enabled
name|useconds_t
name|m_profile_interval_usec
decl_stmt|;
comment|// If enable, the profiling interval in microseconds
name|DNBProfileDataScanType
name|m_profile_scan_type
decl_stmt|;
comment|// Indicates what needs to be profiled
name|pthread_t
name|m_profile_thread
decl_stmt|;
comment|// Thread ID for the thread that profiles the inferior
name|PThreadMutex
name|m_profile_data_mutex
decl_stmt|;
comment|// Multithreaded protection for profile info data
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|m_profile_data
expr_stmt|;
comment|// Profile data, must be protected by m_profile_data_mutex
name|DNBThreadResumeActions
name|m_thread_actions
decl_stmt|;
comment|// The thread actions for the current MachProcess::Resume() call
name|MachException
operator|::
name|Message
operator|::
name|collection
name|m_exception_messages
expr_stmt|;
comment|// A collection of exception messages caught when listening to the exception port
name|PThreadMutex
name|m_exception_messages_mutex
decl_stmt|;
comment|// Multithreaded protection for m_exception_messages
name|MachThreadList
name|m_thread_list
decl_stmt|;
comment|// A list of threads that is maintained/updated after each stop
name|Genealogy
name|m_activities
decl_stmt|;
comment|// A list of activities that is updated after every stop lazily
name|nub_state_t
name|m_state
decl_stmt|;
comment|// The state of our process
name|PThreadMutex
name|m_state_mutex
decl_stmt|;
comment|// Multithreaded protection for m_state
name|PThreadEvent
name|m_events
decl_stmt|;
comment|// Process related events in the child processes lifetime can be waited upon
name|PThreadEvent
name|m_private_events
decl_stmt|;
comment|// Used to coordinate running and stopping the process without affecting m_events
name|DNBBreakpointList
name|m_breakpoints
decl_stmt|;
comment|// Breakpoint list for this process
name|DNBBreakpointList
name|m_watchpoints
decl_stmt|;
comment|// Watchpoint list for this process
name|DNBCallbackNameToAddress
name|m_name_to_addr_callback
decl_stmt|;
name|void
modifier|*
name|m_name_to_addr_baton
decl_stmt|;
name|DNBCallbackCopyExecutableImageInfos
name|m_image_infos_callback
decl_stmt|;
name|void
modifier|*
name|m_image_infos_baton
decl_stmt|;
name|std
operator|::
name|string
name|m_bundle_id
expr_stmt|;
comment|// If we are a SB or BKS process, this will be our bundle ID.
name|int
name|m_sent_interrupt_signo
decl_stmt|;
comment|// When we call MachProcess::Interrupt(), we want to send a single signal
comment|// to the inferior and only send the signal if we aren't already stopped.
comment|// If we end up sending a signal to stop the process we store it until we
comment|// receive an exception with this signal. This helps us to verify we got
comment|// the signal that interrupted the process. We might stop due to another
comment|// reason after an interrupt signal is sent, so this helps us ensure that
comment|// we don't report a spurious stop on the next resume.
name|int
name|m_auto_resume_signo
decl_stmt|;
comment|// If we resume the process and still haven't received our interrupt signal
comment|// acknownledgement, we will shortly after the next resume. We store the
comment|// interrupt signal in this variable so when we get the interrupt signal
comment|// as the sole reason for the process being stopped, we can auto resume
comment|// the process.
name|bool
name|m_did_exec
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|m_dyld_process_info_create
function_decl|)
parameter_list|(
name|task_t
name|task
parameter_list|,
name|uint64_t
name|timestamp
parameter_list|,
name|kern_return_t
modifier|*
name|kernelError
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_dyld_process_info_for_each_image
function_decl|)
parameter_list|(
name|void
modifier|*
name|info
parameter_list|,
name|void
function_decl|(
modifier|^
name|callback
function_decl|)
parameter_list|(
name|uint64_t
name|machHeaderAddress
parameter_list|,
specifier|const
name|uuid_t
name|uuid
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_dyld_process_info_release
function_decl|)
parameter_list|(
name|void
modifier|*
name|info
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_dyld_process_info_get_cache
function_decl|)
parameter_list|(
name|void
modifier|*
name|info
parameter_list|,
name|void
modifier|*
name|cacheInfo
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __MachProcess_h__
end_comment

end_unit

