begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MachThread.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/19/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MachThread_h__
end_ifndef

begin_define
define|#
directive|define
name|__MachThread_h__
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<libproc.h>
end_include

begin_include
include|#
directive|include
file|<mach/mach.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<sys/signal.h>
end_include

begin_include
include|#
directive|include
file|"PThreadCondition.h"
end_include

begin_include
include|#
directive|include
file|"PThreadMutex.h"
end_include

begin_include
include|#
directive|include
file|"MachException.h"
end_include

begin_include
include|#
directive|include
file|"DNBArch.h"
end_include

begin_include
include|#
directive|include
file|"DNBRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"ThreadInfo.h"
end_include

begin_decl_stmt
name|class
name|DNBBreakpoint
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachProcess
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachThreadList
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachThread
block|{
name|public
label|:
name|MachThread
argument_list|(
argument|MachProcess *process
argument_list|,
argument|bool is_64_bit
argument_list|,
argument|uint64_t unique_thread_id =
literal|0
argument_list|,
argument|thread_t mach_port_number =
literal|0
argument_list|)
empty_stmt|;
operator|~
name|MachThread
argument_list|()
expr_stmt|;
name|MachProcess
modifier|*
name|Process
parameter_list|()
block|{
return|return
name|m_process
return|;
block|}
specifier|const
name|MachProcess
operator|*
name|Process
argument_list|()
specifier|const
block|{
return|return
name|m_process
return|;
block|}
name|nub_process_t
name|ProcessID
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Dump
parameter_list|(
name|uint32_t
name|index
parameter_list|)
function_decl|;
name|uint64_t
name|ThreadID
argument_list|()
specifier|const
block|{
return|return
name|m_unique_id
return|;
block|}
name|thread_t
name|MachPortNumber
argument_list|()
specifier|const
block|{
return|return
name|m_mach_port_number
return|;
block|}
name|thread_t
name|InferiorThreadID
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|SequenceID
argument_list|()
specifier|const
block|{
return|return
name|m_seq_id
return|;
block|}
specifier|static
name|bool
name|ThreadIDIsValid
parameter_list|(
name|uint64_t
name|thread
parameter_list|)
function_decl|;
comment|// The 64-bit system-wide unique thread identifier
specifier|static
name|bool
name|MachPortNumberIsValid
parameter_list|(
name|thread_t
name|thread
parameter_list|)
function_decl|;
comment|// The mach port # for this thread in debugserver namespace
name|void
name|Resume
parameter_list|(
name|bool
name|others_stopped
parameter_list|)
function_decl|;
name|void
name|Suspend
parameter_list|()
function_decl|;
name|bool
name|SetSuspendCountBeforeResume
parameter_list|(
name|bool
name|others_stopped
parameter_list|)
function_decl|;
name|bool
name|RestoreSuspendCountAfterStop
parameter_list|()
function_decl|;
name|bool
name|GetRegisterState
parameter_list|(
name|int
name|flavor
parameter_list|,
name|bool
name|force
parameter_list|)
function_decl|;
name|bool
name|SetRegisterState
parameter_list|(
name|int
name|flavor
parameter_list|)
function_decl|;
name|uint64_t
name|GetPC
parameter_list|(
name|uint64_t
name|failValue
init|=
name|INVALID_NUB_ADDRESS
parameter_list|)
function_decl|;
comment|// Get program counter
name|bool
name|SetPC
parameter_list|(
name|uint64_t
name|value
parameter_list|)
function_decl|;
comment|// Set program counter
name|uint64_t
name|GetSP
parameter_list|(
name|uint64_t
name|failValue
init|=
name|INVALID_NUB_ADDRESS
parameter_list|)
function_decl|;
comment|// Get stack pointer
name|DNBBreakpoint
modifier|*
name|CurrentBreakpoint
parameter_list|()
function_decl|;
name|uint32_t
name|EnableHardwareBreakpoint
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|breakpoint
parameter_list|)
function_decl|;
name|uint32_t
name|EnableHardwareWatchpoint
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|watchpoint
parameter_list|,
name|bool
name|also_set_on_task
parameter_list|)
function_decl|;
name|bool
name|DisableHardwareBreakpoint
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|breakpoint
parameter_list|)
function_decl|;
name|bool
name|DisableHardwareWatchpoint
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|watchpoint
parameter_list|,
name|bool
name|also_set_on_task
parameter_list|)
function_decl|;
name|uint32_t
name|NumSupportedHardwareWatchpoints
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|RollbackTransForHWP
parameter_list|()
function_decl|;
name|bool
name|FinishTransForHWP
parameter_list|()
function_decl|;
name|nub_state_t
name|GetState
parameter_list|()
function_decl|;
name|void
name|SetState
parameter_list|(
name|nub_state_t
name|state
parameter_list|)
function_decl|;
name|void
name|ThreadWillResume
parameter_list|(
specifier|const
name|DNBThreadResumeAction
modifier|*
name|thread_action
parameter_list|,
name|bool
name|others_stopped
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|ShouldStop
parameter_list|(
name|bool
modifier|&
name|step_more
parameter_list|)
function_decl|;
name|bool
name|IsStepping
parameter_list|()
function_decl|;
name|bool
name|ThreadDidStop
parameter_list|()
function_decl|;
name|bool
name|NotifyException
argument_list|(
name|MachException
operator|::
name|Data
operator|&
name|exc
argument_list|)
decl_stmt|;
specifier|const
name|MachException
operator|::
name|Data
operator|&
name|GetStopException
argument_list|()
block|{
return|return
name|m_stop_exception
return|;
block|}
name|nub_size_t
name|GetNumRegistersInSet
argument_list|(
name|nub_size_t
name|regSet
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetRegisterSetName
argument_list|(
name|nub_size_t
name|regSet
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|DNBRegisterInfo
modifier|*
name|GetRegisterInfo
argument_list|(
name|nub_size_t
name|regSet
argument_list|,
name|nub_size_t
name|regIndex
argument_list|)
decl|const
decl_stmt|;
name|void
name|DumpRegisterState
parameter_list|(
name|nub_size_t
name|regSet
parameter_list|)
function_decl|;
specifier|const
name|DNBRegisterSetInfo
modifier|*
name|GetRegisterSetInfo
argument_list|(
name|nub_size_t
operator|*
name|num_reg_sets
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetRegisterValue
parameter_list|(
name|uint32_t
name|reg_set_idx
parameter_list|,
name|uint32_t
name|reg_idx
parameter_list|,
name|DNBRegisterValue
modifier|*
name|reg_value
parameter_list|)
function_decl|;
name|bool
name|SetRegisterValue
parameter_list|(
name|uint32_t
name|reg_set_idx
parameter_list|,
name|uint32_t
name|reg_idx
parameter_list|,
specifier|const
name|DNBRegisterValue
modifier|*
name|reg_value
parameter_list|)
function_decl|;
name|nub_size_t
name|GetRegisterContext
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|nub_size_t
name|buf_len
parameter_list|)
function_decl|;
name|nub_size_t
name|SetRegisterContext
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|nub_size_t
name|buf_len
parameter_list|)
function_decl|;
name|uint32_t
name|SaveRegisterState
parameter_list|()
function_decl|;
name|bool
name|RestoreRegisterState
parameter_list|(
name|uint32_t
name|save_id
parameter_list|)
function_decl|;
name|void
name|NotifyBreakpointChanged
parameter_list|(
specifier|const
name|DNBBreakpoint
modifier|*
name|bp
parameter_list|)
block|{                     }
name|bool
name|IsUserReady
parameter_list|()
function_decl|;
name|struct
name|thread_basic_info
modifier|*
name|GetBasicInfo
parameter_list|()
function_decl|;
specifier|const
name|char
operator|*
name|GetBasicInfoAsString
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetName
parameter_list|()
function_decl|;
name|DNBArchProtocol
modifier|*
name|GetArchProtocol
parameter_list|()
block|{
return|return
name|m_arch_ap
operator|.
name|get
argument_list|()
return|;
block|}
name|ThreadInfo
operator|::
name|QoS
name|GetRequestedQoS
argument_list|(
argument|nub_addr_t tsd
argument_list|,
argument|uint64_t dti_qos_class_index
argument_list|)
expr_stmt|;
name|nub_addr_t
name|GetPThreadT
parameter_list|()
function_decl|;
name|nub_addr_t
name|GetDispatchQueueT
parameter_list|()
function_decl|;
name|nub_addr_t
name|GetTSDAddressForThread
parameter_list|(
name|uint64_t
name|plo_pthread_tsd_base_address_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_base_offset
parameter_list|,
name|uint64_t
name|plo_pthread_tsd_entry_size
parameter_list|)
function_decl|;
specifier|static
name|uint64_t
name|GetGloballyUniqueThreadIDForMachPortID
parameter_list|(
name|thread_t
name|mach_port_id
parameter_list|)
function_decl|;
name|protected
label|:
specifier|static
name|bool
name|GetBasicInfo
parameter_list|(
name|thread_t
name|threadID
parameter_list|,
name|struct
name|thread_basic_info
modifier|*
name|basic_info
parameter_list|)
function_decl|;
name|bool
name|GetIdentifierInfo
parameter_list|()
function_decl|;
comment|//    const char *
comment|//    GetDispatchQueueName();
comment|//
name|MachProcess
modifier|*
name|m_process
decl_stmt|;
comment|// The process that owns this thread
name|uint64_t
name|m_unique_id
decl_stmt|;
comment|// The globally unique ID for this thread (nub_thread_t)
name|thread_t
name|m_mach_port_number
decl_stmt|;
comment|// The mach port # for this thread in debugserver namesp.
name|uint32_t
name|m_seq_id
decl_stmt|;
comment|// A Sequential ID that increments with each new thread
name|nub_state_t
name|m_state
decl_stmt|;
comment|// The state of our process
name|PThreadMutex
name|m_state_mutex
decl_stmt|;
comment|// Multithreaded protection for m_state
name|struct
name|thread_basic_info
name|m_basic_info
decl_stmt|;
comment|// Basic information for a thread used to see if a thread is valid
name|int32_t
name|m_suspend_count
decl_stmt|;
comment|// The current suspend count> 0 means we have suspended m_suspendCount times,
comment|//< 0 means we have resumed it m_suspendCount times.
name|MachException
operator|::
name|Data
name|m_stop_exception
expr_stmt|;
comment|// The best exception that describes why this thread is stopped
name|std
operator|::
name|unique_ptr
operator|<
name|DNBArchProtocol
operator|>
name|m_arch_ap
expr_stmt|;
comment|// Arch specific information for register state and more
specifier|const
name|DNBRegisterSetInfo
modifier|*
name|m_reg_sets
decl_stmt|;
comment|// Register set information for this thread
name|nub_size_t
name|m_num_reg_sets
decl_stmt|;
name|thread_identifier_info_data_t
name|m_ident_info
decl_stmt|;
name|struct
name|proc_threadinfo
name|m_proc_threadinfo
decl_stmt|;
name|std
operator|::
name|string
name|m_dispatch_queue_name
expr_stmt|;
name|bool
name|m_is_64_bit
decl_stmt|;
comment|// qos_class_t _pthread_qos_class_decode(pthread_priority_t priority, int *, unsigned long *);
name|unsigned
name|int
function_decl|(
modifier|*
name|m_pthread_qos_class_decode
function_decl|)
parameter_list|(
name|unsigned
name|long
name|priority
parameter_list|,
name|int
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|)
function_decl|;
name|private
label|:
name|friend
name|class
name|MachThreadList
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|MachThread
operator|>
name|MachThreadSP
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

end_unit

