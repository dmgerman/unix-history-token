begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Activity.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__Genealogy_h__
end_ifndef

begin_define
define|#
directive|define
name|__Genealogy_h__
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<mach/task.h>
end_include

begin_include
include|#
directive|include
file|"GenealogySPI.h"
end_include

begin_include
include|#
directive|include
file|"MachThreadList.h"
end_include

begin_decl_stmt
name|class
name|Genealogy
block|{
name|public
label|:
name|Genealogy
argument_list|()
expr_stmt|;
operator|~
name|Genealogy
argument_list|()
block|{     }
name|void
name|Clear
argument_list|()
expr_stmt|;
struct|struct
name|Breadcrumb
block|{
name|uint32_t
name|breadcrumb_id
decl_stmt|;
name|uint64_t
name|activity_id
decl_stmt|;
name|uint64_t
name|timestamp
decl_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
block|}
struct|;
struct|struct
name|Activity
block|{
name|uint64_t
name|activity_start
decl_stmt|;
name|uint64_t
name|activity_id
decl_stmt|;
name|uint64_t
name|parent_id
decl_stmt|;
name|std
operator|::
name|string
name|activity_name
expr_stmt|;
name|std
operator|::
name|string
name|reason
expr_stmt|;
block|}
struct|;
struct|struct
name|Message
block|{
name|uint64_t
name|timestamp
decl_stmt|;
name|uint64_t
name|activity_id
decl_stmt|;
name|uint64_t
name|trace_id
decl_stmt|;
name|uint64_t
name|thread
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
comment|// OS_TRACE_TYPE_RELEASE, OS_TRACE_TYPE_DEBUG, OS_TRACE_TYPE_ERROR, OS_TRACE_TYPE_FAULT
name|uint32_t
name|process_info_index
decl_stmt|;
comment|// index # of the image uuid/file path, 0 means unknown
name|std
operator|::
name|string
name|message
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Message
operator|>
name|MessageList
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Breadcrumb
operator|>
name|BreadcrumbList
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Activity
operator|>
name|ActivityList
expr_stmt|;
struct|struct
name|ThreadActivity
block|{
name|Activity
name|current_activity
decl_stmt|;
name|MessageList
name|messages
decl_stmt|;
name|BreadcrumbList
name|breadcrumbs
decl_stmt|;
comment|// should be 0 or 1 breadcrumbs; no more than 1 BC for any given activity
block|}
struct|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|ThreadActivity
operator|>
name|ThreadActivitySP
expr_stmt|;
name|ThreadActivitySP
name|GetGenealogyInfoForThread
parameter_list|(
name|pid_t
name|pid
parameter_list|,
name|nub_thread_t
name|tid
parameter_list|,
specifier|const
name|MachThreadList
modifier|&
name|thread_list
parameter_list|,
name|task_t
name|task
parameter_list|,
name|bool
modifier|&
name|timed_out
parameter_list|)
function_decl|;
struct|struct
name|ProcessExecutableInfo
block|{
name|std
operator|::
name|string
name|image_path
expr_stmt|;
name|uuid_t
name|image_uuid
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|ProcessExecutableInfo
operator|>
name|ProcessExecutableInfoSP
expr_stmt|;
name|ProcessExecutableInfoSP
name|GetProcessExecutableInfosAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
name|uint32_t
name|AddProcessExecutableInfo
parameter_list|(
name|ProcessExecutableInfoSP
name|process_exe_info
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|GetActivities
parameter_list|(
name|pid_t
name|pid
parameter_list|,
specifier|const
name|MachThreadList
modifier|&
name|thread_list
parameter_list|,
name|task_t
name|task
parameter_list|)
function_decl|;
comment|// the spi we need to call into libtrace - look them up via dlsym at runtime
name|bool
function_decl|(
modifier|*
name|m_os_activity_diagnostic_for_pid
function_decl|)
parameter_list|(
name|pid_t
name|pid
parameter_list|,
name|os_activity_t
name|activity
parameter_list|,
name|uint32_t
name|flags
parameter_list|,
name|os_diagnostic_block_t
name|block
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_os_activity_iterate_processes
function_decl|)
parameter_list|(
name|os_activity_process_list_t
name|processes
parameter_list|,
name|bool
function_decl|(
modifier|^
name|iterator
function_decl|)
parameter_list|(
name|os_activity_process_t
name|process_info
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_os_activity_iterate_breadcrumbs
function_decl|)
parameter_list|(
name|os_activity_process_t
name|process_info
parameter_list|,
name|bool
function_decl|(
modifier|^
name|iterator
function_decl|)
parameter_list|(
name|os_activity_breadcrumb_t
name|breadcrumb
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_os_activity_iterate_messages
function_decl|)
parameter_list|(
name|os_trace_message_list_t
name|messages
parameter_list|,
name|os_activity_process_t
name|process_info
parameter_list|,
name|bool
function_decl|(
modifier|^
name|iterator
function_decl|)
parameter_list|(
name|os_trace_message_t
name|tracemsg
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|m_os_activity_iterate_activities
function_decl|)
parameter_list|(
name|os_activity_list_t
name|activities
parameter_list|,
name|os_activity_process_t
name|process_info
parameter_list|,
name|bool
function_decl|(
modifier|^
name|iterator
function_decl|)
parameter_list|(
name|os_activity_entry_t
name|activity
parameter_list|)
parameter_list|)
function_decl|;
name|uint8_t
function_decl|(
modifier|*
name|m_os_trace_get_type
function_decl|)
parameter_list|(
name|os_trace_message_t
name|trace_msg
parameter_list|)
function_decl|;
name|char
modifier|*
function_decl|(
modifier|*
name|m_os_trace_copy_formatted_message
function_decl|)
parameter_list|(
name|os_trace_message_t
name|trace_msg
parameter_list|)
function_decl|;
name|os_activity_t
function_decl|(
modifier|*
name|m_os_activity_for_thread
function_decl|)
parameter_list|(
name|os_activity_process_t
name|process
parameter_list|,
name|uint64_t
name|thread_id
parameter_list|)
function_decl|;
name|os_activity_t
function_decl|(
modifier|*
name|m_os_activity_for_task_thread
function_decl|)
parameter_list|(
name|task_t
name|target
parameter_list|,
name|uint64_t
name|thread_id
parameter_list|)
function_decl|;
name|os_trace_message_list_t
function_decl|(
modifier|*
name|m_os_activity_messages_for_thread
function_decl|)
parameter_list|(
name|os_activity_process_t
name|process
parameter_list|,
name|os_activity_t
name|activity
parameter_list|,
name|uint64_t
name|thread_id
parameter_list|)
function_decl|;
name|std
operator|::
name|map
operator|<
name|nub_thread_t
operator|,
name|ThreadActivitySP
operator|>
name|m_thread_activities
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ProcessExecutableInfoSP
operator|>
name|m_process_executable_infos
expr_stmt|;
name|bool
name|m_diagnosticd_call_timed_out
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __Genealogy_h__
end_comment

end_unit

