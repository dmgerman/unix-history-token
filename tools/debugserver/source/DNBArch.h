begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DNBArch.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 6/24/07.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DebugNubArch_h__
end_ifndef

begin_define
define|#
directive|define
name|__DebugNubArch_h__
end_define

begin_include
include|#
directive|include
file|"DNBDefs.h"
end_include

begin_include
include|#
directive|include
file|"MacOSX/MachException.h"
end_include

begin_include
include|#
directive|include
file|<mach/mach.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_struct_decl
struct_decl|struct
name|DNBRegisterValue
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|DNBRegisterSetInfo
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|DNBArchProtocol
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|MachThread
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|DNBArchProtocol
modifier|*
function_decl|(
modifier|*
name|DNBArchCallbackCreate
function_decl|)
parameter_list|(
name|MachThread
modifier|*
name|thread
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|DNBRegisterSetInfo
modifier|*
function_decl|(
modifier|*
name|DNBArchCallbackGetRegisterSetInfo
function_decl|)
parameter_list|(
name|nub_size_t
modifier|*
name|num_reg_sets
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|uint8_t
modifier|*
function_decl|(
modifier|*
name|DNBArchCallbackGetBreakpointOpcode
function_decl|)
parameter_list|(
name|nub_size_t
name|byte_size
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|DNBArchPluginInfoTag
block|{
name|uint32_t
name|cpu_type
decl_stmt|;
name|DNBArchCallbackCreate
name|Create
decl_stmt|;
name|DNBArchCallbackGetRegisterSetInfo
name|GetRegisterSetInfo
decl_stmt|;
name|DNBArchCallbackGetBreakpointOpcode
name|GetBreakpointOpcode
decl_stmt|;
block|}
name|DNBArchPluginInfo
typedef|;
end_typedef

begin_decl_stmt
name|class
name|DNBArchProtocol
block|{
name|public
label|:
specifier|static
name|DNBArchProtocol
modifier|*
name|Create
parameter_list|(
name|MachThread
modifier|*
name|thread
parameter_list|)
function_decl|;
specifier|static
name|uint32_t
name|GetRegisterCPUType
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|DNBRegisterSetInfo
modifier|*
name|GetRegisterSetInfo
parameter_list|(
name|nub_size_t
modifier|*
name|num_reg_sets
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|uint8_t
modifier|*
name|GetBreakpointOpcode
parameter_list|(
name|nub_size_t
name|byte_size
parameter_list|)
function_decl|;
specifier|static
name|void
name|RegisterArchPlugin
parameter_list|(
specifier|const
name|DNBArchPluginInfo
modifier|&
name|arch_info
parameter_list|)
function_decl|;
specifier|static
name|uint32_t
name|GetArchitecture
parameter_list|()
function_decl|;
specifier|static
name|bool
name|SetArchitecture
parameter_list|(
name|uint32_t
name|cpu_type
parameter_list|)
function_decl|;
name|DNBArchProtocol
argument_list|()
operator|:
name|m_save_id
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|DNBArchProtocol
argument_list|()
block|{}
name|virtual
name|bool
name|GetRegisterValue
argument_list|(
argument|uint32_t set
argument_list|,
argument|uint32_t reg
argument_list|,
argument|DNBRegisterValue *value
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|SetRegisterValue
parameter_list|(
name|uint32_t
name|set
parameter_list|,
name|uint32_t
name|reg
parameter_list|,
specifier|const
name|DNBRegisterValue
modifier|*
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|nub_size_t
name|GetRegisterContext
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|nub_size_t
name|buf_len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|nub_size_t
name|SetRegisterContext
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|nub_size_t
name|buf_len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|uint32_t
name|SaveRegisterState
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|RestoreRegisterState
parameter_list|(
name|uint32_t
name|save_id
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|kern_return_t
name|GetRegisterState
parameter_list|(
name|int
name|set
parameter_list|,
name|bool
name|force
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|kern_return_t
name|SetRegisterState
parameter_list|(
name|int
name|set
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|RegisterSetStateIsValid
argument_list|(
name|int
name|set
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|uint64_t
name|GetPC
parameter_list|(
name|uint64_t
name|failValue
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Get program counter
name|virtual
name|kern_return_t
name|SetPC
parameter_list|(
name|uint64_t
name|value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|uint64_t
name|GetSP
parameter_list|(
name|uint64_t
name|failValue
parameter_list|)
init|=
literal|0
function_decl|;
comment|// Get stack pointer
name|virtual
name|void
name|ThreadWillResume
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|ThreadDidStop
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|NotifyException
argument_list|(
name|MachException
operator|::
name|Data
operator|&
name|exc
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|uint32_t
name|NumSupportedHardwareBreakpoints
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|uint32_t
name|NumSupportedHardwareWatchpoints
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|uint32_t
name|EnableHardwareBreakpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|size
parameter_list|)
block|{
return|return
name|INVALID_NUB_HW_INDEX
return|;
block|}
name|virtual
name|uint32_t
name|EnableHardwareWatchpoint
parameter_list|(
name|nub_addr_t
name|addr
parameter_list|,
name|nub_size_t
name|size
parameter_list|,
name|bool
name|read
parameter_list|,
name|bool
name|write
parameter_list|,
name|bool
name|also_set_on_task
parameter_list|)
block|{
return|return
name|INVALID_NUB_HW_INDEX
return|;
block|}
name|virtual
name|bool
name|DisableHardwareBreakpoint
parameter_list|(
name|uint32_t
name|hw_index
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|DisableHardwareWatchpoint
parameter_list|(
name|uint32_t
name|hw_index
parameter_list|,
name|bool
name|also_set_on_task
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|uint32_t
name|GetHardwareWatchpointHit
parameter_list|(
name|nub_addr_t
modifier|&
name|addr
parameter_list|)
block|{
return|return
name|INVALID_NUB_HW_INDEX
return|;
block|}
name|virtual
name|bool
name|StepNotComplete
parameter_list|()
block|{
return|return
name|false
return|;
block|}
name|protected
label|:
name|friend
name|class
name|MachThread
decl_stmt|;
name|uint32_t
name|GetNextRegisterStateSaveID
parameter_list|()
block|{
return|return
operator|++
name|m_save_id
return|;
block|}
enum|enum
block|{
name|Trans_Pending
init|=
literal|0
block|,
comment|// Transaction is pending, and checkpoint state has been snapshotted.
name|Trans_Done
init|=
literal|1
block|,
comment|// Transaction is done, the current state is committed, and
comment|// checkpoint state is irrelevant.
name|Trans_Rolled_Back
init|=
literal|2
comment|// Transaction is done, the current state has been
comment|// rolled back to the checkpoint state.
block|}
enum|;
name|virtual
name|bool
name|StartTransForHWP
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|RollbackTransForHWP
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|FinishTransForHWP
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|uint32_t
name|m_save_id
decl_stmt|;
comment|// An always incrementing integer ID used with
comment|// SaveRegisterState/RestoreRegisterState
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_include
include|#
directive|include
file|"MacOSX/arm/DNBArchImpl.h"
end_include

begin_include
include|#
directive|include
file|"MacOSX/arm64/DNBArchImplARM64.h"
end_include

begin_include
include|#
directive|include
file|"MacOSX/i386/DNBArchImplI386.h"
end_include

begin_include
include|#
directive|include
file|"MacOSX/ppc/DNBArchImpl.h"
end_include

begin_include
include|#
directive|include
file|"MacOSX/x86_64/DNBArchImplX86_64.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

