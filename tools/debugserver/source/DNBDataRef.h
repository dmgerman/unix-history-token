begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DNBDataRef.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Created by Greg Clayton on 1/11/06.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  DNBDataRef is a class that can extract data in normal or byte
end_comment

begin_comment
comment|//  swapped order from a data buffer that someone else owns. The data
end_comment

begin_comment
comment|//  buffer needs to remain intact as long as the DNBDataRef object
end_comment

begin_comment
comment|//  needs the data. Strings returned are pointers into the data buffer
end_comment

begin_comment
comment|//  and will need to be copied if they are needed after the data buffer
end_comment

begin_comment
comment|//  is no longer around.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__DNBDataRef_h__
end_ifndef

begin_define
define|#
directive|define
name|__DNBDataRef_h__
end_define

begin_include
include|#
directive|include
file|"DNBDefs.h"
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_decl_stmt
name|class
name|DNBDataRef
block|{
name|public
label|:
comment|// For use with Dump
typedef|typedef
enum|enum
block|{
name|TypeUInt8
init|=
literal|0
block|,
name|TypeChar
block|,
name|TypeUInt16
block|,
name|TypeUInt32
block|,
name|TypeUInt64
block|,
name|TypePointer
block|,
name|TypeULEB128
block|,
name|TypeSLEB128
block|}
name|Type
typedef|;
typedef|typedef
name|uint32_t
name|offset_t
typedef|;
typedef|typedef
name|nub_addr_t
name|addr_t
typedef|;
name|DNBDataRef
argument_list|()
expr_stmt|;
name|DNBDataRef
argument_list|(
argument|const uint8_t *start
argument_list|,
argument|size_t size
argument_list|,
argument|bool swap
argument_list|)
empty_stmt|;
operator|~
name|DNBDataRef
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
block|{
name|DNBDataRef
operator|::
name|SetData
argument_list|(
name|NULL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_swap
operator|=
name|false
expr_stmt|;
block|}
name|size_t
name|BytesLeft
argument_list|(
name|size_t
name|offset
argument_list|)
decl|const
block|{
specifier|const
name|size_t
name|size
init|=
name|GetSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|offset
condition|)
return|return
name|size
operator|-
name|offset
return|;
return|return
literal|0
return|;
block|}
name|bool
name|ValidOffset
argument_list|(
name|offset_t
name|offset
argument_list|)
decl|const
block|{
return|return
name|BytesLeft
argument_list|(
name|offset
argument_list|)
operator|>
literal|0
return|;
block|}
name|bool
name|ValidOffsetForDataOfSize
argument_list|(
name|offset_t
name|offset
argument_list|,
name|uint32_t
name|num_bytes
argument_list|)
decl|const
block|{
return|return
name|num_bytes
operator|<=
name|BytesLeft
argument_list|(
name|offset
argument_list|)
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_end
operator|-
name|m_start
return|;
block|}
specifier|const
name|uint8_t
operator|*
name|GetDataStart
argument_list|()
specifier|const
block|{
return|return
name|m_start
return|;
block|}
specifier|const
name|uint8_t
operator|*
name|GetDataEnd
argument_list|()
specifier|const
block|{
return|return
name|m_end
return|;
block|}
name|bool
name|GetSwap
argument_list|()
specifier|const
block|{
return|return
name|m_swap
return|;
block|}
name|void
name|SetSwap
parameter_list|(
name|bool
name|swap
parameter_list|)
block|{
name|m_swap
operator|=
name|swap
expr_stmt|;
block|}
name|void
name|SetData
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|start
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|m_start
operator|=
name|start
expr_stmt|;
if|if
condition|(
name|m_start
operator|!=
name|NULL
condition|)
name|m_end
operator|=
name|start
operator|+
name|size
expr_stmt|;
else|else
name|m_end
operator|=
name|NULL
expr_stmt|;
block|}
name|uint8_t
name|GetPointerSize
argument_list|()
specifier|const
block|{
return|return
name|m_ptrSize
return|;
block|}
name|void
name|SetPointerSize
parameter_list|(
name|uint8_t
name|size
parameter_list|)
block|{
name|m_ptrSize
operator|=
name|size
expr_stmt|;
block|}
name|void
name|SetEHPtrBaseAddrPCRelative
parameter_list|(
name|addr_t
name|addr
init|=
name|INVALID_NUB_ADDRESS
parameter_list|)
block|{
name|m_addrPCRelative
operator|=
name|addr
expr_stmt|;
block|}
name|void
name|SetEHPtrBaseAddrTEXT
parameter_list|(
name|addr_t
name|addr
init|=
name|INVALID_NUB_ADDRESS
parameter_list|)
block|{
name|m_addrTEXT
operator|=
name|addr
expr_stmt|;
block|}
name|void
name|SetEHPtrBaseAddrDATA
parameter_list|(
name|addr_t
name|addr
init|=
name|INVALID_NUB_ADDRESS
parameter_list|)
block|{
name|m_addrDATA
operator|=
name|addr
expr_stmt|;
block|}
name|uint8_t
name|Get8
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint16_t
name|Get16
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|Get32
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|Get64
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|GetMax32
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|uint32_t
name|byte_size
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|GetMax64
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|uint32_t
name|byte_size
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|GetPointer
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
comment|//  uint64_t        GetDwarfEHPtr(offset_t *offset_ptr, uint32_t eh_ptr_enc)
comment|//  const;
specifier|const
name|char
modifier|*
name|GetCStr
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|uint32_t
name|fixed_length
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|PeekCStr
argument_list|(
name|offset_t
name|offset
argument_list|)
decl|const
block|{
if|if
condition|(
name|ValidOffset
argument_list|(
name|offset
argument_list|)
condition|)
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
name|m_start
operator|+
name|offset
return|;
return|return
name|NULL
return|;
block|}
specifier|const
name|uint8_t
modifier|*
name|GetData
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|uint32_t
name|length
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|Get_ULEB128
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|int64_t
name|Get_SLEB128
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|void
name|Skip_LEB128
argument_list|(
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|Dump
argument_list|(
name|offset_t
name|startOffset
argument_list|,
name|offset_t
name|endOffset
argument_list|,
name|uint64_t
name|offsetBase
argument_list|,
name|DNBDataRef
operator|::
name|Type
name|type
argument_list|,
name|uint32_t
name|numPerLine
argument_list|,
specifier|const
name|char
operator|*
name|typeFormat
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|protected
label|:
specifier|const
name|uint8_t
modifier|*
name|m_start
decl_stmt|;
specifier|const
name|uint8_t
modifier|*
name|m_end
decl_stmt|;
name|bool
name|m_swap
decl_stmt|;
name|uint8_t
name|m_ptrSize
decl_stmt|;
name|addr_t
name|m_addrPCRelative
decl_stmt|;
name|addr_t
name|m_addrTEXT
decl_stmt|;
name|addr_t
name|m_addrDATA
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __DNBDataRef_h__
end_comment

end_unit

