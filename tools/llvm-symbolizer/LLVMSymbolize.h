begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LLVMSymbolize.h ----------------------------------------- C++ -----===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Header for LLVM symbolization library.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_SYMBOLIZE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_SYMBOLIZE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/DIContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/MachOUniversal.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
typedef|typedef
name|DILineInfoSpecifier
operator|::
name|FunctionNameKind
name|FunctionNameKind
expr_stmt|;
name|using
name|namespace
name|object
decl_stmt|;
name|namespace
name|symbolize
block|{
name|class
name|ModuleInfo
decl_stmt|;
name|class
name|LLVMSymbolizer
block|{
name|public
label|:
struct|struct
name|Options
block|{
name|bool
name|UseSymbolTable
range|:
literal|1
decl_stmt|;
name|FunctionNameKind
name|PrintFunctions
decl_stmt|;
name|bool
name|PrintInlining
range|:
literal|1
decl_stmt|;
name|bool
name|Demangle
range|:
literal|1
decl_stmt|;
name|std
operator|::
name|string
name|DefaultArch
expr_stmt|;
name|Options
argument_list|(
argument|bool UseSymbolTable = true
argument_list|,
argument|FunctionNameKind PrintFunctions = FunctionNameKind::LinkageName
argument_list|,
argument|bool PrintInlining = true
argument_list|,
argument|bool Demangle = true
argument_list|,
argument|std::string DefaultArch =
literal|""
argument_list|)
block|:
name|UseSymbolTable
argument_list|(
name|UseSymbolTable
argument_list|)
operator|,
name|PrintFunctions
argument_list|(
name|PrintFunctions
argument_list|)
operator|,
name|PrintInlining
argument_list|(
name|PrintInlining
argument_list|)
operator|,
name|Demangle
argument_list|(
name|Demangle
argument_list|)
operator|,
name|DefaultArch
argument_list|(
argument|DefaultArch
argument_list|)
block|{}
block|}
struct|;
name|LLVMSymbolizer
argument_list|(
specifier|const
name|Options
operator|&
name|Opts
operator|=
name|Options
argument_list|()
argument_list|)
operator|:
name|Opts
argument_list|(
argument|Opts
argument_list|)
block|{}
operator|~
name|LLVMSymbolizer
argument_list|()
block|{
name|flush
argument_list|()
block|;   }
comment|// Returns the result of symbolization for module name/offset as
comment|// a string (possibly containing newlines).
name|std
operator|::
name|string
name|symbolizeCode
argument_list|(
argument|const std::string&ModuleName
argument_list|,
argument|uint64_t ModuleOffset
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|symbolizeData
argument_list|(
argument|const std::string&ModuleName
argument_list|,
argument|uint64_t ModuleOffset
argument_list|)
expr_stmt|;
name|void
name|flush
parameter_list|()
function_decl|;
specifier|static
name|std
operator|::
name|string
name|DemangleName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
expr_stmt|;
name|private
label|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|Binary
operator|*
operator|,
name|Binary
operator|*
operator|>
name|BinaryPair
expr_stmt|;
name|ModuleInfo
modifier|*
name|getOrCreateModuleInfo
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|ModuleName
argument_list|)
decl_stmt|;
comment|/// \brief Returns pair of pointers to binary and debug binary.
name|BinaryPair
name|getOrCreateBinary
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
comment|/// \brief Returns a parsed object file for a given architecture in a
comment|/// universal binary (or the binary itself if it is an object file).
name|ObjectFile
modifier|*
name|getObjectFileFromBinary
argument_list|(
name|Binary
operator|*
name|Bin
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|ArchName
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|printDILineInfo
argument_list|(
argument|DILineInfo LineInfo
argument_list|)
specifier|const
expr_stmt|;
comment|// Owns all the parsed binaries and object files.
name|SmallVector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Binary
operator|>
operator|,
literal|4
operator|>
name|ParsedBinariesAndObjects
expr_stmt|;
comment|// Owns module info objects.
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|ModuleInfo
operator|*
operator|>
name|ModuleMapTy
expr_stmt|;
name|ModuleMapTy
name|Modules
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|BinaryPair
operator|>
name|BinaryMapTy
expr_stmt|;
name|BinaryMapTy
name|BinaryForPath
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|pair
operator|<
name|MachOUniversalBinary
operator|*
operator|,
name|std
operator|::
name|string
operator|>
operator|,
name|ObjectFile
operator|*
operator|>
name|ObjectFileForArchMapTy
expr_stmt|;
name|ObjectFileForArchMapTy
name|ObjectFileForArch
decl_stmt|;
name|Options
name|Opts
decl_stmt|;
specifier|static
specifier|const
name|char
name|kBadString
index|[]
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ModuleInfo
block|{
name|public
label|:
name|ModuleInfo
argument_list|(
name|ObjectFile
operator|*
name|Obj
argument_list|,
name|DIContext
operator|*
name|DICtx
argument_list|)
expr_stmt|;
name|DILineInfo
name|symbolizeCode
argument_list|(
name|uint64_t
name|ModuleOffset
argument_list|,
specifier|const
name|LLVMSymbolizer
operator|::
name|Options
operator|&
name|Opts
argument_list|)
decl|const
decl_stmt|;
name|DIInliningInfo
name|symbolizeInlinedCode
argument_list|(
name|uint64_t
name|ModuleOffset
argument_list|,
specifier|const
name|LLVMSymbolizer
operator|::
name|Options
operator|&
name|Opts
argument_list|)
decl|const
decl_stmt|;
name|bool
name|symbolizeData
argument_list|(
name|uint64_t
name|ModuleOffset
argument_list|,
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|uint64_t
operator|&
name|Start
argument_list|,
name|uint64_t
operator|&
name|Size
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|bool
name|getNameFromSymbolTable
argument_list|(
name|SymbolRef
operator|::
name|Type
name|Type
argument_list|,
name|uint64_t
name|Address
argument_list|,
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|uint64_t
operator|&
name|Addr
argument_list|,
name|uint64_t
operator|&
name|Size
argument_list|)
decl|const
decl_stmt|;
name|void
name|addSymbol
parameter_list|(
specifier|const
name|SymbolRef
modifier|&
name|Symbol
parameter_list|)
function_decl|;
name|ObjectFile
modifier|*
name|Module
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DIContext
operator|>
name|DebugInfoContext
expr_stmt|;
struct|struct
name|SymbolDesc
block|{
name|uint64_t
name|Addr
decl_stmt|;
comment|// If size is 0, assume that symbol occupies the whole memory range up to
comment|// the following symbol.
name|uint64_t
name|Size
decl_stmt|;
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|SymbolDesc
operator|&
name|s1
operator|,
specifier|const
name|SymbolDesc
operator|&
name|s2
operator|)
block|{
return|return
name|s1
operator|.
name|Addr
operator|<
name|s2
operator|.
name|Addr
return|;
block|}
block|}
struct|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|SymbolDesc
operator|,
name|StringRef
operator|>
name|SymbolMapTy
expr_stmt|;
name|SymbolMapTy
name|Functions
decl_stmt|;
name|SymbolMapTy
name|Objects
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// namespace symbolize
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_SYMBOLIZE_H
end_comment

end_unit

