begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DiffPrinter.h ------------------------------------------ *- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_LLVMPDBDUMP_DIFFPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_LLVMPDBDUMP_DIFFPRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo/PDB/Native/RawConstants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatVariadic.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<unordered_set>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
operator|>
expr|struct
name|hash
operator|<
name|llvm
operator|::
name|pdb
operator|::
name|PdbRaw_FeatureSig
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|pdb
operator|::
name|PdbRaw_FeatureSig
name|argument_type
expr_stmt|;
typedef|typedef
name|std
operator|::
name|size_t
name|result_type
expr_stmt|;
name|result_type
name|operator
argument_list|()
operator|(
name|argument_type
name|Item
operator|)
specifier|const
block|{
return|return
name|std
operator|::
name|hash
operator|<
name|uint32_t
operator|>
block|{}
operator|(
name|uint32_t
argument_list|(
name|Item
argument_list|)
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
name|namespace
name|pdb
block|{
name|class
name|PDBFile
decl_stmt|;
name|enum
name|class
name|DiffResult
block|{
name|UNSPECIFIED
operator|,
name|IDENTICAL
operator|,
name|EQUIVALENT
operator|,
name|DIFFERENT
block|}
empty_stmt|;
struct|struct
name|IdenticalDiffProvider
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|DiffResult
name|compare
argument_list|(
argument|const T&Left
argument_list|,
argument|const U&Right
argument_list|)
block|{
return|return
operator|(
name|Left
operator|==
name|Right
operator|)
operator|?
name|DiffResult
operator|::
name|IDENTICAL
operator|:
name|DiffResult
operator|::
name|DIFFERENT
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|string
name|format
argument_list|(
argument|const T&Item
argument_list|,
argument|bool Right
argument_list|)
block|{
return|return
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|Item
argument_list|)
operator|.
name|str
argument_list|()
return|;
block|}
block|}
struct|;
struct|struct
name|EquivalentDiffProvider
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|DiffResult
name|compare
argument_list|(
argument|const T&Left
argument_list|,
argument|const U&Right
argument_list|)
block|{
return|return
operator|(
name|Left
operator|==
name|Right
operator|)
operator|?
name|DiffResult
operator|::
name|IDENTICAL
operator|:
name|DiffResult
operator|::
name|EQUIVALENT
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|string
name|format
argument_list|(
argument|const T&Item
argument_list|,
argument|bool Right
argument_list|)
block|{
return|return
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|Item
argument_list|)
operator|.
name|str
argument_list|()
return|;
block|}
block|}
struct|;
name|class
name|DiffPrinter
block|{
name|public
label|:
name|DiffPrinter
argument_list|(
argument|uint32_t Indent
argument_list|,
argument|StringRef Header
argument_list|,
argument|uint32_t PropertyWidth
argument_list|,
argument|uint32_t FieldWidth
argument_list|,
argument|bool Result
argument_list|,
argument|bool Values
argument_list|,
argument|raw_ostream&Stream
argument_list|)
empty_stmt|;
operator|~
name|DiffPrinter
argument_list|()
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
expr|struct
name|Identical
block|{}
expr_stmt|;
name|template
operator|<
name|typename
name|Provider
operator|=
name|IdenticalDiffProvider
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|print
argument_list|(
argument|StringRef Property
argument_list|,
argument|const T&Left
argument_list|,
argument|const U&Right
argument_list|,
argument|Provider P = Provider()
argument_list|)
block|{
name|std
operator|::
name|string
name|L
operator|=
name|P
operator|.
name|format
argument_list|(
name|Left
argument_list|,
name|false
argument_list|)
block|;
name|std
operator|::
name|string
name|R
operator|=
name|P
operator|.
name|format
argument_list|(
name|Right
argument_list|,
name|true
argument_list|)
block|;
name|DiffResult
name|Result
operator|=
name|P
operator|.
name|compare
argument_list|(
name|Left
argument_list|,
name|Right
argument_list|)
block|;
name|printExplicit
argument_list|(
name|Property
argument_list|,
name|Result
argument_list|,
name|L
argument_list|,
name|R
argument_list|)
block|;   }
name|void
name|printExplicit
argument_list|(
argument|StringRef Property
argument_list|,
argument|DiffResult C
argument_list|,
argument|StringRef Left
argument_list|,
argument|StringRef Right
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|printExplicit
argument_list|(
argument|StringRef Property
argument_list|,
argument|DiffResult C
argument_list|,
argument|const T&Left
argument_list|,
argument|const U&Right
argument_list|)
block|{
name|std
operator|::
name|string
name|L
operator|=
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|Left
argument_list|)
operator|.
name|str
argument_list|()
block|;
name|std
operator|::
name|string
name|R
operator|=
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|Right
argument_list|)
operator|.
name|str
argument_list|()
block|;
name|printExplicit
argument_list|(
name|Property
argument_list|,
name|C
argument_list|,
name|StringRef
argument_list|(
name|L
argument_list|)
argument_list|,
name|StringRef
argument_list|(
name|R
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|diffUnorderedArray
argument_list|(
argument|StringRef Property
argument_list|,
argument|ArrayRef<T> Left
argument_list|,
argument|ArrayRef<U> Right
argument_list|)
block|{
name|std
operator|::
name|unordered_set
operator|<
name|T
operator|>
name|LS
argument_list|(
name|Left
operator|.
name|begin
argument_list|()
argument_list|,
name|Left
operator|.
name|end
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|unordered_set
operator|<
name|U
operator|>
name|RS
argument_list|(
name|Right
operator|.
name|begin
argument_list|()
argument_list|,
name|Right
operator|.
name|end
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|string
name|Count1
operator|=
name|formatv
argument_list|(
literal|"{0} element(s)"
argument_list|,
name|Left
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|string
name|Count2
operator|=
name|formatv
argument_list|(
literal|"{0} element(s)"
argument_list|,
name|Right
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|print
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|Property
argument_list|)
operator|+
literal|"s (set)"
argument_list|,
name|Count1
argument_list|,
name|Count2
argument_list|)
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|L
range|:
name|LS
control|)
block|{
name|auto
name|Iter
init|=
name|RS
operator|.
name|find
argument_list|(
name|L
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|Text
operator|=
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|L
argument_list|)
operator|.
name|str
argument_list|()
expr_stmt|;
if|if
condition|(
name|Iter
operator|==
name|RS
operator|.
name|end
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|Property
argument_list|,
name|Text
argument_list|,
literal|"(not present)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|print
argument_list|(
name|Property
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|)
expr_stmt|;
name|RS
operator|.
name|erase
argument_list|(
name|Iter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|R
range|:
name|RS
control|)
block|{
name|auto
name|Iter
init|=
name|LS
operator|.
name|find
argument_list|(
name|R
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|Text
operator|=
name|formatv
argument_list|(
literal|"{0}"
argument_list|,
name|R
argument_list|)
operator|.
name|str
argument_list|()
expr_stmt|;
if|if
condition|(
name|Iter
operator|==
name|LS
operator|.
name|end
argument_list|()
condition|)
block|{
name|print
argument_list|(
name|Property
argument_list|,
literal|"(not present)"
argument_list|,
name|Text
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|print
argument_list|(
name|Property
argument_list|,
name|Text
argument_list|,
name|Text
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|typename
name|ValueProvider
operator|=
name|IdenticalDiffProvider
operator|,
name|typename
name|T
operator|,
name|typename
name|U
operator|>
name|void
name|diffUnorderedMap
argument_list|(
argument|StringRef Property
argument_list|,
argument|const StringMap<T>&Left
argument_list|,
argument|const StringMap<U>&Right
argument_list|,
argument|ValueProvider P = ValueProvider()
argument_list|)
block|{
name|StringMap
operator|<
name|U
operator|>
name|RightCopy
argument_list|(
name|Right
argument_list|)
block|;
name|std
operator|::
name|string
name|Count1
operator|=
name|formatv
argument_list|(
literal|"{0} element(s)"
argument_list|,
name|Left
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|string
name|Count2
operator|=
name|formatv
argument_list|(
literal|"{0} element(s)"
argument_list|,
name|Right
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|print
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|Property
argument_list|)
operator|+
literal|"s (map)"
argument_list|,
name|Count1
argument_list|,
name|Count2
argument_list|)
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|L
range|:
name|Left
control|)
block|{
name|auto
name|Iter
init|=
name|RightCopy
operator|.
name|find
argument_list|(
name|L
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Iter
operator|==
name|RightCopy
operator|.
name|end
argument_list|()
condition|)
block|{
name|printExplicit
argument_list|(
name|L
operator|.
name|getKey
argument_list|()
argument_list|,
name|DiffResult
operator|::
name|DIFFERENT
argument_list|,
name|L
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"(not present)"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|print
argument_list|(
name|L
operator|.
name|getKey
argument_list|()
argument_list|,
name|L
operator|.
name|getValue
argument_list|()
argument_list|,
name|Iter
operator|->
name|getValue
argument_list|()
argument_list|,
name|P
argument_list|)
expr_stmt|;
name|RightCopy
operator|.
name|erase
argument_list|(
name|Iter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|R
range|:
name|RightCopy
control|)
block|{
name|printExplicit
argument_list|(
name|R
operator|.
name|getKey
argument_list|()
argument_list|,
name|DiffResult
operator|::
name|DIFFERENT
argument_list|,
literal|"(not present)"
argument_list|,
name|R
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|printFullRow
argument_list|(
argument|StringRef Text
argument_list|)
expr_stmt|;
name|private
label|:
name|uint32_t
name|tableWidth
argument_list|()
specifier|const
expr_stmt|;
name|void
name|printHeaderRow
parameter_list|()
function_decl|;
name|void
name|printSeparatorRow
parameter_list|()
function_decl|;
name|void
name|newLine
parameter_list|(
name|char
name|InitialChar
init|=
literal|'|'
parameter_list|)
function_decl|;
name|void
name|printValue
parameter_list|(
name|StringRef
name|Value
parameter_list|,
name|DiffResult
name|C
parameter_list|,
name|AlignStyle
name|Style
parameter_list|,
name|uint32_t
name|Width
parameter_list|,
name|bool
name|Force
parameter_list|)
function_decl|;
name|void
name|printResult
parameter_list|(
name|DiffResult
name|Result
parameter_list|)
function_decl|;
name|bool
name|PrintResult
decl_stmt|;
name|bool
name|PrintValues
decl_stmt|;
name|uint32_t
name|Indent
decl_stmt|;
name|uint32_t
name|PropertyWidth
decl_stmt|;
name|uint32_t
name|FieldWidth
decl_stmt|;
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// namespace pdb
block|}
end_block

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

