begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|TOOLS_LLVM_DWP_DWPSTRINGPOOL
end_ifndef

begin_define
define|#
directive|define
name|TOOLS_LLVM_DWP_DWPSTRINGPOOL
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSection.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCStreamer.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWPStringPool
block|{
struct|struct
name|CStrDenseMapInfo
block|{
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
literal|0
operator|)
operator|)
return|;
block|}
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
operator|~
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
literal|1
operator|)
operator|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|char
modifier|*
name|Val
parameter_list|)
block|{
name|assert
argument_list|(
name|Val
operator|!=
name|getEmptyKey
argument_list|()
operator|&&
literal|"Cannot hash the empty key!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Val
operator|!=
name|getTombstoneKey
argument_list|()
operator|&&
literal|"Cannot hash the tombstone key!"
argument_list|)
expr_stmt|;
return|return
operator|(
name|unsigned
operator|)
name|hash_value
argument_list|(
name|StringRef
argument_list|(
name|Val
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|char
modifier|*
name|LHS
parameter_list|,
specifier|const
name|char
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
condition|)
return|return
name|LHS
operator|==
name|getEmptyKey
argument_list|()
return|;
if|if
condition|(
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|LHS
operator|==
name|getTombstoneKey
argument_list|()
return|;
return|return
name|strcmp
argument_list|(
name|LHS
argument_list|,
name|RHS
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
struct|;
name|MCStreamer
modifier|&
name|Out
decl_stmt|;
name|MCSection
modifier|*
name|Sec
decl_stmt|;
name|DenseMap
operator|<
specifier|const
name|char
operator|*
operator|,
name|uint32_t
operator|,
name|CStrDenseMapInfo
operator|>
name|Pool
expr_stmt|;
name|uint32_t
name|Offset
init|=
literal|0
decl_stmt|;
name|public
label|:
name|DWPStringPool
argument_list|(
name|MCStreamer
operator|&
name|Out
argument_list|,
name|MCSection
operator|*
name|Sec
argument_list|)
operator|:
name|Out
argument_list|(
name|Out
argument_list|)
operator|,
name|Sec
argument_list|(
argument|Sec
argument_list|)
block|{}
name|uint32_t
name|getOffset
argument_list|(
argument|const char *Str
argument_list|,
argument|unsigned Length
argument_list|)
block|{
name|assert
argument_list|(
name|strlen
argument_list|(
name|Str
argument_list|)
operator|+
literal|1
operator|==
name|Length
operator|&&
literal|"Ensure length hint is correct"
argument_list|)
block|;
name|auto
name|Pair
operator|=
name|Pool
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Str
argument_list|,
name|Offset
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|Pair
operator|.
name|second
condition|)
block|{
name|Out
operator|.
name|SwitchSection
argument_list|(
name|Sec
argument_list|)
expr_stmt|;
name|Out
operator|.
name|EmitBytes
argument_list|(
name|StringRef
argument_list|(
name|Str
argument_list|,
name|Length
argument_list|)
argument_list|)
expr_stmt|;
name|Offset
operator|+=
name|Length
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|first
operator|->
name|second
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

