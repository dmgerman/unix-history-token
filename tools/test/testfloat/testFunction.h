begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ===============================================================================  This C header file is part of TestFloat, Release 2a, a package of programs for testing the correctness of floating-point arithmetic complying to the IEC/IEEE Standard for Floating-Point.  Written by John R. Hauser.  More information is available through the Web page `http://HTTP.CS.Berkeley.EDU/~jhauser/arithmetic/TestFloat.html'.  THIS SOFTWARE IS DISTRIBUTED AS IS, FOR FREE.  Although reasonable effort has been made to avoid it, THIS SOFTWARE MAY CONTAIN FAULTS THAT WILL AT TIMES RESULT IN INCORRECT BEHAVIOR.  USE OF THIS SOFTWARE IS RESTRICTED TO PERSONS AND ORGANIZATIONS WHO CAN AND WILL TAKE FULL RESPONSIBILITY FOR ANY AND ALL LOSSES, COSTS, OR OTHER PROBLEMS ARISING FROM ITS USE.  Derivative works are acceptable, even for commercial purposes, so long as (1) they include prominent notice that the work is derivative, and (2) they include prominent notice akin to these four paragraphs for those parts of this code that are retained.  =============================================================================== */
end_comment

begin_enum
enum|enum
block|{
name|INT32_TO_FLOAT32
init|=
literal|1
block|,
name|INT32_TO_FLOAT64
block|,
name|INT32_TO_FLOATX80
block|,
name|INT32_TO_FLOAT128
block|,
name|INT64_TO_FLOAT32
block|,
name|INT64_TO_FLOAT64
block|,
name|INT64_TO_FLOATX80
block|,
name|INT64_TO_FLOAT128
block|,
name|FLOAT32_TO_INT32
block|,
name|FLOAT32_TO_INT32_ROUND_TO_ZERO
block|,
name|FLOAT32_TO_INT64
block|,
name|FLOAT32_TO_INT64_ROUND_TO_ZERO
block|,
name|FLOAT32_TO_FLOAT64
block|,
name|FLOAT32_TO_FLOATX80
block|,
name|FLOAT32_TO_FLOAT128
block|,
name|FLOAT32_ROUND_TO_INT
block|,
name|FLOAT32_ADD
block|,
name|FLOAT32_SUB
block|,
name|FLOAT32_MUL
block|,
name|FLOAT32_DIV
block|,
name|FLOAT32_REM
block|,
name|FLOAT32_SQRT
block|,
name|FLOAT32_EQ
block|,
name|FLOAT32_LE
block|,
name|FLOAT32_LT
block|,
name|FLOAT32_EQ_SIGNALING
block|,
name|FLOAT32_LE_QUIET
block|,
name|FLOAT32_LT_QUIET
block|,
name|FLOAT64_TO_INT32
block|,
name|FLOAT64_TO_INT32_ROUND_TO_ZERO
block|,
name|FLOAT64_TO_INT64
block|,
name|FLOAT64_TO_INT64_ROUND_TO_ZERO
block|,
name|FLOAT64_TO_FLOAT32
block|,
name|FLOAT64_TO_FLOATX80
block|,
name|FLOAT64_TO_FLOAT128
block|,
name|FLOAT64_ROUND_TO_INT
block|,
name|FLOAT64_ADD
block|,
name|FLOAT64_SUB
block|,
name|FLOAT64_MUL
block|,
name|FLOAT64_DIV
block|,
name|FLOAT64_REM
block|,
name|FLOAT64_SQRT
block|,
name|FLOAT64_EQ
block|,
name|FLOAT64_LE
block|,
name|FLOAT64_LT
block|,
name|FLOAT64_EQ_SIGNALING
block|,
name|FLOAT64_LE_QUIET
block|,
name|FLOAT64_LT_QUIET
block|,
name|FLOATX80_TO_INT32
block|,
name|FLOATX80_TO_INT32_ROUND_TO_ZERO
block|,
name|FLOATX80_TO_INT64
block|,
name|FLOATX80_TO_INT64_ROUND_TO_ZERO
block|,
name|FLOATX80_TO_FLOAT32
block|,
name|FLOATX80_TO_FLOAT64
block|,
name|FLOATX80_TO_FLOAT128
block|,
name|FLOATX80_ROUND_TO_INT
block|,
name|FLOATX80_ADD
block|,
name|FLOATX80_SUB
block|,
name|FLOATX80_MUL
block|,
name|FLOATX80_DIV
block|,
name|FLOATX80_REM
block|,
name|FLOATX80_SQRT
block|,
name|FLOATX80_EQ
block|,
name|FLOATX80_LE
block|,
name|FLOATX80_LT
block|,
name|FLOATX80_EQ_SIGNALING
block|,
name|FLOATX80_LE_QUIET
block|,
name|FLOATX80_LT_QUIET
block|,
name|FLOAT128_TO_INT32
block|,
name|FLOAT128_TO_INT32_ROUND_TO_ZERO
block|,
name|FLOAT128_TO_INT64
block|,
name|FLOAT128_TO_INT64_ROUND_TO_ZERO
block|,
name|FLOAT128_TO_FLOAT32
block|,
name|FLOAT128_TO_FLOAT64
block|,
name|FLOAT128_TO_FLOATX80
block|,
name|FLOAT128_ROUND_TO_INT
block|,
name|FLOAT128_ADD
block|,
name|FLOAT128_SUB
block|,
name|FLOAT128_MUL
block|,
name|FLOAT128_DIV
block|,
name|FLOAT128_REM
block|,
name|FLOAT128_SQRT
block|,
name|FLOAT128_EQ
block|,
name|FLOAT128_LE
block|,
name|FLOAT128_LT
block|,
name|FLOAT128_EQ_SIGNALING
block|,
name|FLOAT128_LE_QUIET
block|,
name|FLOAT128_LT_QUIET
block|,
name|NUM_FUNCTIONS
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|int8
name|numInputs
decl_stmt|;
name|flag
name|roundingPrecision
decl_stmt|,
name|roundingMode
decl_stmt|;
block|}
name|functionT
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
specifier|const
name|functionT
name|functions
index|[
name|NUM_FUNCTIONS
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|flag
name|functionExists
index|[
name|NUM_FUNCTIONS
index|]
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
block|{
name|ROUND_NEAREST_EVEN
init|=
literal|1
block|,
name|ROUND_TO_ZERO
block|,
name|ROUND_DOWN
block|,
name|ROUND_UP
block|,
name|NUM_ROUNDINGMODES
block|}
enum|;
end_enum

begin_function_decl
name|void
name|testFunction
parameter_list|(
name|uint8
parameter_list|,
name|int8
parameter_list|,
name|int8
parameter_list|)
function_decl|;
end_function_decl

end_unit

