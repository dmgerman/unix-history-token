begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Test 0080:	Check uninitialized scratch memory.  *  * Note:	This behavior is not guaranteed with bpf_filter(9).  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/* BPF program */
end_comment

begin_decl_stmt
name|struct
name|bpf_insn
name|pc
index|[]
init|=
block|{
name|BPF_STMT
argument_list|(
name|BPF_LDX
operator||
name|BPF_IMM
argument_list|,
literal|0xffffffff
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|1
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|28
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|2
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|26
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|3
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|4
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|22
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|5
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|20
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|6
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|18
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|7
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|8
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|14
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|9
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|12
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|10
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|11
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|12
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|13
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|14
argument_list|)
block|,
name|BPF_JUMP
argument_list|(
name|BPF_JMP
operator||
name|BPF_JSET
operator||
name|BPF_X
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_LD
operator||
name|BPF_MEM
argument_list|,
literal|15
argument_list|)
block|,
name|BPF_STMT
argument_list|(
name|BPF_RET
operator||
name|BPF_A
argument_list|,
literal|0
argument_list|)
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Packet */
end_comment

begin_decl_stmt
name|u_char
name|pkt
index|[]
init|=
block|{
literal|0x00
block|, }
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Packet length seen on wire */
end_comment

begin_decl_stmt
name|u_int
name|wirelen
init|=
sizeof|sizeof
argument_list|(
name|pkt
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Packet length passed on buffer */
end_comment

begin_decl_stmt
name|u_int
name|buflen
init|=
sizeof|sizeof
argument_list|(
name|pkt
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Invalid instruction */
end_comment

begin_decl_stmt
name|int
name|invalid
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Expected return value */
end_comment

begin_decl_stmt
name|u_int
name|expect
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Expeced signal */
end_comment

begin_decl_stmt
name|int
name|expect_signal
init|=
literal|0
decl_stmt|;
end_decl_stmt

end_unit

