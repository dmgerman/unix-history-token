begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CursorVisitor.h - CursorVisitor interface ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_TOOLS_LIBCLANG_CURSORVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_TOOLS_LIBCLANG_CURSORVISITOR_H
end_define

begin_include
include|#
directive|include
file|"CXCursor.h"
end_include

begin_include
include|#
directive|include
file|"CXTranslationUnit.h"
end_include

begin_include
include|#
directive|include
file|"Index_Internal.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TypeLocVisitor.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|PreprocessingRecord
decl_stmt|;
name|class
name|ASTUnit
decl_stmt|;
name|namespace
name|cxcursor
block|{
name|class
name|VisitorJob
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|DeclVisitKind
block|,
name|StmtVisitKind
block|,
name|MemberExprPartsKind
block|,
name|TypeLocVisitKind
block|,
name|OverloadExprPartsKind
block|,
name|DeclRefExprPartsKind
block|,
name|LabelRefVisitKind
block|,
name|ExplicitTemplateArgsVisitKind
block|,
name|NestedNameSpecifierLocVisitKind
block|,
name|DeclarationNameInfoVisitKind
block|,
name|MemberRefVisitKind
block|,
name|SizeOfPackExprPartsKind
block|,
name|LambdaExprPartsKind
block|,
name|PostChildrenVisitKind
block|}
enum|;
name|protected
label|:
specifier|const
name|void
modifier|*
name|data
index|[
literal|3
index|]
decl_stmt|;
name|CXCursor
name|parent
decl_stmt|;
name|Kind
name|K
decl_stmt|;
name|VisitorJob
argument_list|(
argument|CXCursor C
argument_list|,
argument|Kind k
argument_list|,
argument|const void *d1
argument_list|,
argument|const void *d2 = nullptr
argument_list|,
argument|const void *d3 = nullptr
argument_list|)
block|:
name|parent
argument_list|(
name|C
argument_list|)
operator|,
name|K
argument_list|(
argument|k
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
name|d1
block|;
name|data
index|[
literal|1
index|]
operator|=
name|d2
block|;
name|data
index|[
literal|2
index|]
operator|=
name|d3
block|;   }
name|public
operator|:
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|K
return|;
block|}
specifier|const
name|CXCursor
operator|&
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|parent
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|VisitorJob
operator|,
literal|10
operator|>
name|VisitorWorkList
expr_stmt|;
comment|// Cursor visitor.
name|class
name|CursorVisitor
range|:
name|public
name|DeclVisitor
operator|<
name|CursorVisitor
decl_stmt|,
name|bool
decl|>
decl_stmt|,
name|public
name|TypeLocVisitor
decl|<
name|CursorVisitor
decl_stmt|,
name|bool
decl|>
block|{
name|public
label|:
comment|/// \brief Callback called after child nodes of a cursor have been visited.
comment|/// Return true to break visitation or false to continue.
typedef|typedef
name|bool
function_decl|(
modifier|*
name|PostChildrenVisitorTy
function_decl|)
parameter_list|(
name|CXCursor
name|cursor
parameter_list|,
name|CXClientData
name|client_data
parameter_list|)
function_decl|;
name|private
label|:
comment|/// \brief The translation unit we are traversing.
name|CXTranslationUnit
name|TU
decl_stmt|;
name|ASTUnit
modifier|*
name|AU
decl_stmt|;
comment|/// \brief The parent cursor whose children we are traversing.
name|CXCursor
name|Parent
decl_stmt|;
comment|/// \brief The declaration that serves at the parent of any statement or
comment|/// expression nodes.
specifier|const
name|Decl
modifier|*
name|StmtParent
decl_stmt|;
comment|/// \brief The visitor function.
name|CXCursorVisitor
name|Visitor
decl_stmt|;
name|PostChildrenVisitorTy
name|PostChildrenVisitor
decl_stmt|;
comment|/// \brief The opaque client data, to be passed along to the visitor.
name|CXClientData
name|ClientData
decl_stmt|;
comment|/// \brief Whether we should visit the preprocessing record entries last,
comment|/// after visiting other declarations.
name|bool
name|VisitPreprocessorLast
decl_stmt|;
comment|/// \brief Whether we should visit declarations or preprocessing record
comment|/// entries that are #included inside the \arg RegionOfInterest.
name|bool
name|VisitIncludedEntities
decl_stmt|;
comment|/// \brief When valid, a source range to which the cursor should restrict
comment|/// its search.
name|SourceRange
name|RegionOfInterest
decl_stmt|;
comment|/// \brief Whether we should only visit declarations and not preprocessing
comment|/// record entries.
name|bool
name|VisitDeclsOnly
decl_stmt|;
comment|// FIXME: Eventually remove.  This part of a hack to support proper
comment|// iteration over all Decls contained lexically within an ObjC container.
name|DeclContext
operator|::
name|decl_iterator
operator|*
name|DI_current
expr_stmt|;
name|DeclContext
operator|::
name|decl_iterator
name|DE_current
expr_stmt|;
name|SmallVectorImpl
operator|<
name|Decl
operator|*
operator|>
operator|::
name|iterator
operator|*
name|FileDI_current
expr_stmt|;
name|SmallVectorImpl
operator|<
name|Decl
operator|*
operator|>
operator|::
name|iterator
name|FileDE_current
expr_stmt|;
comment|// Cache of pre-allocated worklists for data-recursion walk of Stmts.
name|SmallVector
operator|<
name|VisitorWorkList
operator|*
operator|,
literal|5
operator|>
name|WorkListFreeList
expr_stmt|;
name|SmallVector
operator|<
name|VisitorWorkList
operator|*
operator|,
literal|5
operator|>
name|WorkListCache
expr_stmt|;
name|using
name|DeclVisitor
operator|<
name|CursorVisitor
operator|,
name|bool
operator|>
operator|::
name|Visit
expr_stmt|;
name|using
name|TypeLocVisitor
operator|<
name|CursorVisitor
operator|,
name|bool
operator|>
operator|::
name|Visit
expr_stmt|;
comment|/// \brief Determine whether this particular source range comes before, comes
comment|/// after, or overlaps the region of interest.
comment|///
comment|/// \param R a half-open source range retrieved from the abstract syntax tree.
name|RangeComparisonResult
name|CompareRegionOfInterest
parameter_list|(
name|SourceRange
name|R
parameter_list|)
function_decl|;
name|bool
name|visitDeclsFromFileRegion
parameter_list|(
name|FileID
name|File
parameter_list|,
name|unsigned
name|Offset
parameter_list|,
name|unsigned
name|Length
parameter_list|)
function_decl|;
name|class
name|SetParentRAII
block|{
name|CXCursor
modifier|&
name|Parent
decl_stmt|;
specifier|const
name|Decl
modifier|*
modifier|&
name|StmtParent
decl_stmt|;
name|CXCursor
name|OldParent
decl_stmt|;
name|public
label|:
name|SetParentRAII
argument_list|(
argument|CXCursor&Parent
argument_list|,
argument|const Decl *&StmtParent
argument_list|,
argument|CXCursor NewParent
argument_list|)
block|:
name|Parent
argument_list|(
name|Parent
argument_list|)
operator|,
name|StmtParent
argument_list|(
name|StmtParent
argument_list|)
operator|,
name|OldParent
argument_list|(
argument|Parent
argument_list|)
block|{
name|Parent
operator|=
name|NewParent
block|;
if|if
condition|(
name|clang_isDeclaration
argument_list|(
name|Parent
operator|.
name|kind
argument_list|)
condition|)
name|StmtParent
operator|=
name|getCursorDecl
argument_list|(
name|Parent
argument_list|)
expr_stmt|;
block|}
operator|~
name|SetParentRAII
argument_list|()
block|{
name|Parent
operator|=
name|OldParent
block|;
if|if
condition|(
name|clang_isDeclaration
argument_list|(
name|Parent
operator|.
name|kind
argument_list|)
condition|)
name|StmtParent
operator|=
name|getCursorDecl
argument_list|(
name|Parent
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
name|public
label|:
name|CursorVisitor
argument_list|(
argument|CXTranslationUnit TU
argument_list|,
argument|CXCursorVisitor Visitor
argument_list|,
argument|CXClientData ClientData
argument_list|,
argument|bool VisitPreprocessorLast
argument_list|,
argument|bool VisitIncludedPreprocessingEntries = false
argument_list|,
argument|SourceRange RegionOfInterest = SourceRange()
argument_list|,
argument|bool VisitDeclsOnly = false
argument_list|,
argument|PostChildrenVisitorTy PostChildrenVisitor = nullptr
argument_list|)
block|:
name|TU
argument_list|(
name|TU
argument_list|)
operator|,
name|AU
argument_list|(
name|cxtu
operator|::
name|getASTUnit
argument_list|(
name|TU
argument_list|)
argument_list|)
operator|,
name|Visitor
argument_list|(
name|Visitor
argument_list|)
operator|,
name|PostChildrenVisitor
argument_list|(
name|PostChildrenVisitor
argument_list|)
operator|,
name|ClientData
argument_list|(
name|ClientData
argument_list|)
operator|,
name|VisitPreprocessorLast
argument_list|(
name|VisitPreprocessorLast
argument_list|)
operator|,
name|VisitIncludedEntities
argument_list|(
name|VisitIncludedPreprocessingEntries
argument_list|)
operator|,
name|RegionOfInterest
argument_list|(
name|RegionOfInterest
argument_list|)
operator|,
name|VisitDeclsOnly
argument_list|(
name|VisitDeclsOnly
argument_list|)
operator|,
name|DI_current
argument_list|(
name|nullptr
argument_list|)
operator|,
name|FileDI_current
argument_list|(
argument|nullptr
argument_list|)
block|{
name|Parent
operator|.
name|kind
operator|=
name|CXCursor_NoDeclFound
block|;
name|Parent
operator|.
name|data
index|[
literal|0
index|]
operator|=
name|nullptr
block|;
name|Parent
operator|.
name|data
index|[
literal|1
index|]
operator|=
name|nullptr
block|;
name|Parent
operator|.
name|data
index|[
literal|2
index|]
operator|=
name|nullptr
block|;
name|StmtParent
operator|=
name|nullptr
block|;   }
operator|~
name|CursorVisitor
argument_list|()
block|{
comment|// Free the pre-allocated worklists for data-recursion.
for|for
control|(
name|SmallVectorImpl
operator|<
name|VisitorWorkList
operator|*
operator|>
operator|::
name|iterator
name|I
operator|=
name|WorkListCache
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|WorkListCache
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|delete
modifier|*
name|I
decl_stmt|;
block|}
block|}
name|ASTUnit
operator|*
name|getASTUnit
argument_list|()
specifier|const
block|{
return|return
name|AU
return|;
block|}
name|CXTranslationUnit
name|getTU
argument_list|()
specifier|const
block|{
return|return
name|TU
return|;
block|}
name|bool
name|Visit
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|,
name|bool
name|CheckedRegionOfInterest
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief Visit declarations and preprocessed entities for the file region
comment|/// designated by \see RegionOfInterest.
name|bool
name|visitFileRegion
parameter_list|()
function_decl|;
name|bool
name|visitPreprocessedEntitiesInRegion
parameter_list|()
function_decl|;
name|bool
name|shouldVisitIncludedEntities
argument_list|()
specifier|const
block|{
return|return
name|VisitIncludedEntities
return|;
block|}
name|template
operator|<
name|typename
name|InputIterator
operator|>
name|bool
name|visitPreprocessedEntities
argument_list|(
argument|InputIterator First
argument_list|,
argument|InputIterator Last
argument_list|,
argument|PreprocessingRecord&PPRec
argument_list|,
argument|FileID FID = FileID()
argument_list|)
expr_stmt|;
name|bool
name|VisitChildren
parameter_list|(
name|CXCursor
name|Parent
parameter_list|)
function_decl|;
comment|// Declaration visitors
name|bool
name|VisitTypeAliasDecl
parameter_list|(
name|TypeAliasDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitAttributes
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitBlockDecl
parameter_list|(
name|BlockDecl
modifier|*
name|B
parameter_list|)
function_decl|;
name|bool
name|VisitCXXRecordDecl
parameter_list|(
name|CXXRecordDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|Optional
operator|<
name|bool
operator|>
name|shouldVisitCursor
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
name|bool
name|VisitDeclContext
parameter_list|(
name|DeclContext
modifier|*
name|DC
parameter_list|)
function_decl|;
name|bool
name|VisitTranslationUnitDecl
parameter_list|(
name|TranslationUnitDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitTypedefDecl
parameter_list|(
name|TypedefDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitTagDecl
parameter_list|(
name|TagDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitClassTemplateSpecializationDecl
parameter_list|(
name|ClassTemplateSpecializationDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitClassTemplatePartialSpecializationDecl
parameter_list|(
name|ClassTemplatePartialSpecializationDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitTemplateTypeParmDecl
parameter_list|(
name|TemplateTypeParmDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitEnumConstantDecl
parameter_list|(
name|EnumConstantDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitDeclaratorDecl
parameter_list|(
name|DeclaratorDecl
modifier|*
name|DD
parameter_list|)
function_decl|;
name|bool
name|VisitFunctionDecl
parameter_list|(
name|FunctionDecl
modifier|*
name|ND
parameter_list|)
function_decl|;
name|bool
name|VisitFieldDecl
parameter_list|(
name|FieldDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitVarDecl
parameter_list|(
name|VarDecl
modifier|*
parameter_list|)
function_decl|;
name|bool
name|VisitNonTypeTemplateParmDecl
parameter_list|(
name|NonTypeTemplateParmDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitFunctionTemplateDecl
parameter_list|(
name|FunctionTemplateDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitClassTemplateDecl
parameter_list|(
name|ClassTemplateDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitTemplateTemplateParmDecl
parameter_list|(
name|TemplateTemplateParmDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitObjCMethodDecl
parameter_list|(
name|ObjCMethodDecl
modifier|*
name|ND
parameter_list|)
function_decl|;
name|bool
name|VisitObjCContainerDecl
parameter_list|(
name|ObjCContainerDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitObjCCategoryDecl
parameter_list|(
name|ObjCCategoryDecl
modifier|*
name|ND
parameter_list|)
function_decl|;
name|bool
name|VisitObjCProtocolDecl
parameter_list|(
name|ObjCProtocolDecl
modifier|*
name|PID
parameter_list|)
function_decl|;
name|bool
name|VisitObjCPropertyDecl
parameter_list|(
name|ObjCPropertyDecl
modifier|*
name|PD
parameter_list|)
function_decl|;
name|bool
name|VisitObjCInterfaceDecl
parameter_list|(
name|ObjCInterfaceDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitObjCImplDecl
parameter_list|(
name|ObjCImplDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitObjCCategoryImplDecl
parameter_list|(
name|ObjCCategoryImplDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitObjCImplementationDecl
parameter_list|(
name|ObjCImplementationDecl
modifier|*
name|D
parameter_list|)
function_decl|;
comment|// FIXME: ObjCCompatibleAliasDecl requires aliased-class locations.
name|bool
name|VisitObjCPropertyImplDecl
parameter_list|(
name|ObjCPropertyImplDecl
modifier|*
name|PD
parameter_list|)
function_decl|;
name|bool
name|VisitLinkageSpecDecl
parameter_list|(
name|LinkageSpecDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitNamespaceDecl
parameter_list|(
name|NamespaceDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitNamespaceAliasDecl
parameter_list|(
name|NamespaceAliasDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitUsingDirectiveDecl
parameter_list|(
name|UsingDirectiveDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitUsingDecl
parameter_list|(
name|UsingDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitUnresolvedUsingValueDecl
parameter_list|(
name|UnresolvedUsingValueDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|VisitUnresolvedUsingTypenameDecl
parameter_list|(
name|UnresolvedUsingTypenameDecl
modifier|*
name|D
parameter_list|)
function_decl|;
comment|// Name visitor
name|bool
name|VisitDeclarationNameInfo
parameter_list|(
name|DeclarationNameInfo
name|Name
parameter_list|)
function_decl|;
name|bool
name|VisitNestedNameSpecifier
parameter_list|(
name|NestedNameSpecifier
modifier|*
name|NNS
parameter_list|,
name|SourceRange
name|Range
parameter_list|)
function_decl|;
name|bool
name|VisitNestedNameSpecifierLoc
parameter_list|(
name|NestedNameSpecifierLoc
name|NNS
parameter_list|)
function_decl|;
comment|// Template visitors
name|bool
name|VisitTemplateParameters
parameter_list|(
specifier|const
name|TemplateParameterList
modifier|*
name|Params
parameter_list|)
function_decl|;
name|bool
name|VisitTemplateName
parameter_list|(
name|TemplateName
name|Name
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|)
function_decl|;
name|bool
name|VisitTemplateArgumentLoc
parameter_list|(
specifier|const
name|TemplateArgumentLoc
modifier|&
name|TAL
parameter_list|)
function_decl|;
comment|// Type visitors
define|#
directive|define
name|ABSTRACT_TYPELOC
parameter_list|(
name|CLASS
parameter_list|,
name|PARENT
parameter_list|)
define|#
directive|define
name|TYPELOC
parameter_list|(
name|CLASS
parameter_list|,
name|PARENT
parameter_list|)
define|\
value|bool Visit##CLASS##TypeLoc(CLASS##TypeLoc TyLoc);
include|#
directive|include
file|"clang/AST/TypeLocNodes.def"
name|bool
name|VisitTagTypeLoc
parameter_list|(
name|TagTypeLoc
name|TL
parameter_list|)
function_decl|;
name|bool
name|VisitArrayTypeLoc
parameter_list|(
name|ArrayTypeLoc
name|TL
parameter_list|)
function_decl|;
name|bool
name|VisitFunctionTypeLoc
parameter_list|(
name|FunctionTypeLoc
name|TL
parameter_list|,
name|bool
name|SkipResultType
init|=
name|false
parameter_list|)
function_decl|;
comment|// Data-recursive visitor functions.
name|bool
name|IsInRegionOfInterest
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
name|bool
name|RunVisitorWorkList
parameter_list|(
name|VisitorWorkList
modifier|&
name|WL
parameter_list|)
function_decl|;
name|void
name|EnqueueWorkList
parameter_list|(
name|VisitorWorkList
modifier|&
name|WL
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
name|LLVM_ATTRIBUTE_NOINLINE
name|bool
name|Visit
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

