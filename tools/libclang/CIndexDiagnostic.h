begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- CIndexDiagnostic.h - Diagnostics C Interface ------------*- C++ -*-===*\ |*                                                                            *| |*                     The LLVM Compiler Infrastructure                       *| |*                                                                            *| |* This file is distributed under the University of Illinois Open Source      *| |* License. See LICENSE.TXT for details.                                      *| |*                                                                            *| |*===----------------------------------------------------------------------===*| |*                                                                            *| |* Implements the diagnostic functions of the Clang C interface.              *| |*                                                                            *| \*===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CINDEX_DIAGNOSTIC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CINDEX_DIAGNOSTIC_H
end_define

begin_include
include|#
directive|include
file|"clang-c/Index.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|LangOptions
decl_stmt|;
name|class
name|StoredDiagnostic
decl_stmt|;
name|class
name|CXDiagnosticImpl
decl_stmt|;
name|class
name|CXDiagnosticSetImpl
block|{
name|std
operator|::
name|vector
operator|<
name|CXDiagnosticImpl
operator|*
operator|>
name|Diagnostics
expr_stmt|;
specifier|const
name|bool
name|IsExternallyManaged
decl_stmt|;
name|public
label|:
name|CXDiagnosticSetImpl
argument_list|(
argument|bool isManaged = false
argument_list|)
block|:
name|IsExternallyManaged
argument_list|(
argument|isManaged
argument_list|)
block|{}
name|virtual
operator|~
name|CXDiagnosticSetImpl
argument_list|()
expr_stmt|;
name|size_t
name|getNumDiagnostics
argument_list|()
specifier|const
block|{
return|return
name|Diagnostics
operator|.
name|size
argument_list|()
return|;
block|}
name|CXDiagnosticImpl
modifier|*
name|getDiagnostic
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumDiagnostics
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Diagnostics
index|[
name|i
index|]
return|;
block|}
name|void
name|appendDiagnostic
parameter_list|(
name|CXDiagnosticImpl
modifier|*
name|D
parameter_list|)
block|{
name|Diagnostics
operator|.
name|push_back
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Diagnostics
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|isExternallyManaged
argument_list|()
specifier|const
block|{
return|return
name|IsExternallyManaged
return|;
block|}
block|}
empty_stmt|;
name|class
name|CXDiagnosticImpl
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|StoredDiagnosticKind
block|,
name|LoadedDiagnosticKind
block|,
name|CustomNoteDiagnosticKind
block|}
enum|;
name|virtual
operator|~
name|CXDiagnosticImpl
argument_list|()
expr_stmt|;
comment|/// \brief Return the severity of the diagnostic.
name|virtual
name|CXDiagnosticSeverity
name|getSeverity
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the location of the diagnostic.
name|virtual
name|CXSourceLocation
name|getLocation
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the spelling of the diagnostic.
name|virtual
name|CXString
name|getSpelling
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the text for the diagnostic option.
name|virtual
name|CXString
name|getDiagnosticOption
argument_list|(
name|CXString
operator|*
name|Disable
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// \brief Return the category of the diagnostic.
name|virtual
name|unsigned
name|getCategory
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the category string of the diagnostic.
name|virtual
name|CXString
name|getCategoryText
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the number of source ranges for the diagnostic.
name|virtual
name|unsigned
name|getNumRanges
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the source ranges for the diagnostic.
name|virtual
name|CXSourceRange
name|getRange
argument_list|(
name|unsigned
name|Range
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// \brief Return the number of FixIts.
name|virtual
name|unsigned
name|getNumFixIts
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|/// \brief Return the FixIt information (source range and inserted text).
name|virtual
name|CXString
name|getFixIt
argument_list|(
name|unsigned
name|FixIt
argument_list|,
name|CXSourceRange
operator|*
name|ReplacementRange
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|K
return|;
block|}
name|CXDiagnosticSetImpl
modifier|&
name|getChildDiagnostics
parameter_list|()
block|{
return|return
name|ChildDiags
return|;
block|}
name|protected
label|:
name|CXDiagnosticImpl
argument_list|(
argument|Kind k
argument_list|)
block|:
name|K
argument_list|(
argument|k
argument_list|)
block|{}
name|CXDiagnosticSetImpl
name|ChildDiags
decl_stmt|;
name|void
name|append
parameter_list|(
name|CXDiagnosticImpl
modifier|*
name|D
parameter_list|)
block|{
name|ChildDiags
operator|.
name|appendDiagnostic
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|Kind
name|K
decl_stmt|;
block|}
empty_stmt|;
comment|/// \brief The storage behind a CXDiagnostic
name|struct
name|CXStoredDiagnostic
range|:
name|public
name|CXDiagnosticImpl
block|{
specifier|const
name|StoredDiagnostic
operator|&
name|Diag
block|;
specifier|const
name|LangOptions
operator|&
name|LangOpts
block|;
name|CXStoredDiagnostic
argument_list|(
specifier|const
name|StoredDiagnostic
operator|&
name|Diag
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LangOpts
argument_list|)
operator|:
name|CXDiagnosticImpl
argument_list|(
name|StoredDiagnosticKind
argument_list|)
block|,
name|Diag
argument_list|(
name|Diag
argument_list|)
block|,
name|LangOpts
argument_list|(
argument|LangOpts
argument_list|)
block|{ }
name|virtual
operator|~
name|CXStoredDiagnostic
argument_list|()
block|{}
comment|/// \brief Return the severity of the diagnostic.
name|CXDiagnosticSeverity
name|getSeverity
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the location of the diagnostic.
name|CXSourceLocation
name|getLocation
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the spelling of the diagnostic.
name|CXString
name|getSpelling
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the text for the diagnostic option.
name|CXString
name|getDiagnosticOption
argument_list|(
argument|CXString *Disable
argument_list|)
specifier|const
name|override
block|;
comment|/// \brief Return the category of the diagnostic.
name|unsigned
name|getCategory
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the category string of the diagnostic.
name|CXString
name|getCategoryText
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the number of source ranges for the diagnostic.
name|unsigned
name|getNumRanges
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the source ranges for the diagnostic.
name|CXSourceRange
name|getRange
argument_list|(
argument|unsigned Range
argument_list|)
specifier|const
name|override
block|;
comment|/// \brief Return the number of FixIts.
name|unsigned
name|getNumFixIts
argument_list|()
specifier|const
name|override
block|;
comment|/// \brief Return the FixIt information (source range and inserted text).
name|CXString
name|getFixIt
argument_list|(
argument|unsigned FixIt
argument_list|,
argument|CXSourceRange *ReplacementRange
argument_list|)
specifier|const
name|override
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const CXDiagnosticImpl *D
argument_list|)
block|{
return|return
name|D
operator|->
name|getKind
argument_list|()
operator|==
name|StoredDiagnosticKind
return|;
block|}
expr|}
block|;
name|namespace
name|cxdiag
block|{
name|CXDiagnosticSetImpl
operator|*
name|lazyCreateDiags
argument_list|(
argument|CXTranslationUnit TU
argument_list|,
argument|bool checkIfChanged = false
argument_list|)
block|; }
comment|// end namespace cxdiag
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_CINDEX_DIAGNOSTIC_H
end_comment

end_unit

