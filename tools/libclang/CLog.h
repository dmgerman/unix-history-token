begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CLog.h - Logging Interface -------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIBCLANG_CLOG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIBCLANG_CLOG_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/IntrusiveRefCntPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|format_object_base
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|FileEntry
decl_stmt|;
name|namespace
name|cxindex
block|{
name|class
name|Logger
decl_stmt|;
typedef|typedef
name|IntrusiveRefCntPtr
operator|<
name|Logger
operator|>
name|LogRef
expr_stmt|;
comment|/// \brief Collects logging output and writes it to stderr when it's destructed.
comment|/// Common use case:
comment|/// \code
comment|///   if (LogRef Log = Logger::make(__func__)) {
comment|///     *Log<< "stuff";
comment|///   }
comment|/// \endcode
name|class
name|Logger
range|:
name|public
name|RefCountedBase
operator|<
name|Logger
operator|>
block|{
name|std
operator|::
name|string
name|Name
block|;
name|bool
name|Trace
block|;
name|SmallString
operator|<
literal|64
operator|>
name|Msg
block|;
name|llvm
operator|::
name|raw_svector_ostream
name|LogOS
block|;
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getEnvVar
argument_list|()
block|{
specifier|static
specifier|const
name|char
operator|*
name|sCachedVar
operator|=
operator|::
name|getenv
argument_list|(
literal|"LIBCLANG_LOGGING"
argument_list|)
block|;
return|return
name|sCachedVar
return|;
block|}
specifier|static
name|bool
name|isLoggingEnabled
argument_list|()
block|{
return|return
name|getEnvVar
argument_list|()
operator|!=
literal|0
return|;
block|}
specifier|static
name|bool
name|isStackTracingEnabled
argument_list|()
block|{
if|if
condition|(
specifier|const
name|char
modifier|*
name|EnvOpt
init|=
name|Logger
operator|::
name|getEnvVar
argument_list|()
condition|)
return|return
name|llvm
operator|::
name|StringRef
argument_list|(
name|EnvOpt
argument_list|)
operator|==
literal|"2"
return|;
return|return
name|false
return|;
block|}
specifier|static
name|LogRef
name|make
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|trace
operator|=
name|isStackTracingEnabled
argument_list|()
argument_list|)
block|{
if|if
condition|(
name|isLoggingEnabled
argument_list|()
condition|)
return|return
name|new
name|Logger
argument_list|(
name|name
argument_list|,
name|trace
argument_list|)
return|;
return|return
literal|0
return|;
block|}
name|explicit
name|Logger
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|trace
argument_list|)
range|:
name|Name
argument_list|(
name|name
argument_list|)
decl_stmt|,
name|Trace
argument_list|(
name|trace
argument_list|)
decl_stmt|,
name|LogOS
argument_list|(
name|Msg
argument_list|)
block|{ }
operator|~
name|Logger
argument_list|()
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|CXTranslationUnit
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|FileEntry
operator|*
name|FE
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|CXCursor
name|cursor
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|CXSourceLocation
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|CXSourceRange
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|CXString
operator|)
expr_stmt|;
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|llvm
operator|::
name|StringRef
name|Str
operator|)
block|{
name|LogOS
operator|<<
name|Str
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|char
operator|*
name|Str
operator|)
block|{
if|if
condition|(
name|Str
condition|)
name|LogOS
operator|<<
name|Str
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|N
operator|)
block|{
name|LogOS
operator|<<
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|long
name|N
operator|)
block|{
name|LogOS
operator|<<
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|N
operator|)
block|{
name|LogOS
operator|<<
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|int
name|N
operator|)
block|{
name|LogOS
operator|<<
name|N
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|char
name|C
operator|)
block|{
name|LogOS
operator|<<
name|C
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|char
name|C
operator|)
block|{
name|LogOS
operator|<<
name|C
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
name|signed
name|char
name|C
operator|)
block|{
name|LogOS
operator|<<
name|C
block|;
return|return
operator|*
name|this
return|;
block|}
name|Logger
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|llvm
operator|::
name|format_object_base
operator|&
name|Fmt
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|} }
comment|/// \brief Macros to automate common uses of Logger. Like this:
end_comment

begin_comment
comment|/// \code
end_comment

begin_comment
comment|///   LOG_FUNC_SECTION {
end_comment

begin_comment
comment|///     *Log<< "blah";
end_comment

begin_comment
comment|///   }
end_comment

begin_comment
comment|/// \endcode
end_comment

begin_define
define|#
directive|define
name|LOG_SECTION
parameter_list|(
name|NAME
parameter_list|)
value|if (LogRef Log = clang::cxindex::Logger::make(NAME))
end_define

begin_define
define|#
directive|define
name|LOG_FUNC_SECTION
value|LOG_SECTION(LLVM_FUNCTION_NAME)
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

