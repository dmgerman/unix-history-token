begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CXCursor.h - Routines for manipulating CXCursors -------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines routines for manipulating CXCursors.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CXCURSOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CXCURSOR_H
end_define

begin_include
include|#
directive|include
file|"clang-c/Index.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|ASTUnit
decl_stmt|;
name|class
name|Attr
decl_stmt|;
name|class
name|CXXBaseSpecifier
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|FieldDecl
decl_stmt|;
name|class
name|InclusionDirective
decl_stmt|;
name|class
name|LabelStmt
decl_stmt|;
name|class
name|MacroDefinition
decl_stmt|;
name|class
name|MacroExpansion
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|ObjCInterfaceDecl
decl_stmt|;
name|class
name|ObjCProtocolDecl
decl_stmt|;
name|class
name|OverloadedTemplateStorage
decl_stmt|;
name|class
name|OverloadExpr
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|TemplateDecl
decl_stmt|;
name|class
name|TemplateName
decl_stmt|;
name|class
name|TypeDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|class
name|IdentifierInfo
decl_stmt|;
name|namespace
name|cxcursor
block|{
name|CXCursor
name|getCursor
parameter_list|(
name|CXTranslationUnit
parameter_list|,
name|SourceLocation
parameter_list|)
function_decl|;
name|CXCursor
name|MakeCXCursor
argument_list|(
specifier|const
name|clang
operator|::
name|Attr
operator|*
name|A
argument_list|,
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|Parent
argument_list|,
name|CXTranslationUnit
name|TU
argument_list|)
decl_stmt|;
name|CXCursor
name|MakeCXCursor
argument_list|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|D
argument_list|,
name|CXTranslationUnit
name|TU
argument_list|,
name|SourceRange
name|RegionOfInterest
operator|=
name|SourceRange
argument_list|()
argument_list|,
name|bool
name|FirstInDeclGroup
operator|=
name|true
argument_list|)
decl_stmt|;
name|CXCursor
name|MakeCXCursor
argument_list|(
specifier|const
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|clang
operator|::
name|Decl
operator|*
name|Parent
argument_list|,
name|CXTranslationUnit
name|TU
argument_list|,
name|SourceRange
name|RegionOfInterest
operator|=
name|SourceRange
argument_list|()
argument_list|)
decl_stmt|;
name|CXCursor
name|MakeCXCursorInvalid
parameter_list|(
name|CXCursorKind
name|K
parameter_list|,
name|CXTranslationUnit
name|TU
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|/// \brief Create an Objective-C superclass reference at the given location.
name|CXCursor
name|MakeCursorObjCSuperClassRef
parameter_list|(
name|ObjCInterfaceDecl
modifier|*
name|Super
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack an ObjCSuperClassRef cursor into the interface it references
comment|/// and optionally the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|ObjCInterfaceDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorObjCSuperClassRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create an Objective-C protocol reference at the given location.
name|CXCursor
name|MakeCursorObjCProtocolRef
parameter_list|(
specifier|const
name|ObjCProtocolDecl
modifier|*
name|Proto
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack an ObjCProtocolRef cursor into the protocol it references
comment|/// and optionally the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|ObjCProtocolDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorObjCProtocolRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create an Objective-C class reference at the given location.
name|CXCursor
name|MakeCursorObjCClassRef
parameter_list|(
specifier|const
name|ObjCInterfaceDecl
modifier|*
name|Class
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack an ObjCClassRef cursor into the class it references
comment|/// and optionally the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|ObjCInterfaceDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorObjCClassRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a type reference at the given location.
name|CXCursor
name|MakeCursorTypeRef
parameter_list|(
specifier|const
name|TypeDecl
modifier|*
name|Type
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a TypeRef cursor into the class it references
comment|/// and optionally the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|TypeDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorTypeRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a reference to a template at the given location.
name|CXCursor
name|MakeCursorTemplateRef
parameter_list|(
specifier|const
name|TemplateDecl
modifier|*
name|Template
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a TemplateRef cursor into the template it references and
comment|/// the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|TemplateDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorTemplateRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a reference to a namespace or namespace alias at the given
comment|/// location.
name|CXCursor
name|MakeCursorNamespaceRef
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|NS
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a NamespaceRef cursor into the namespace or namespace alias
comment|/// it references and the location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|NamedDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorNamespaceRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a reference to a variable at the given location.
name|CXCursor
name|MakeCursorVariableRef
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|Var
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a VariableRef cursor into the variable it references and the
comment|/// location where the where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|VarDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorVariableRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a reference to a field at the given location.
name|CXCursor
name|MakeCursorMemberRef
parameter_list|(
specifier|const
name|FieldDecl
modifier|*
name|Field
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a MemberRef cursor into the field it references and the
comment|/// location where the reference occurred.
name|std
operator|::
name|pair
operator|<
specifier|const
name|FieldDecl
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorMemberRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a CXX base specifier cursor.
name|CXCursor
name|MakeCursorCXXBaseSpecifier
parameter_list|(
specifier|const
name|CXXBaseSpecifier
modifier|*
name|B
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a CXXBaseSpecifier cursor into a CXXBaseSpecifier.
specifier|const
name|CXXBaseSpecifier
modifier|*
name|getCursorCXXBaseSpecifier
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
comment|/// \brief Create a preprocessing directive cursor.
name|CXCursor
name|MakePreprocessingDirectiveCursor
parameter_list|(
name|SourceRange
name|Range
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a given preprocessing directive to retrieve its source range.
name|SourceRange
name|getCursorPreprocessingDirective
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
comment|/// \brief Create a macro definition cursor.
name|CXCursor
name|MakeMacroDefinitionCursor
parameter_list|(
specifier|const
name|MacroDefinition
modifier|*
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a given macro definition cursor to retrieve its
comment|/// source range.
specifier|const
name|MacroDefinition
modifier|*
name|getCursorMacroDefinition
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
comment|/// \brief Create a macro expansion cursor.
name|CXCursor
name|MakeMacroExpansionCursor
parameter_list|(
name|MacroExpansion
modifier|*
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Create a "pseudo" macro expansion cursor, using a macro definition
comment|/// and a source location.
name|CXCursor
name|MakeMacroExpansionCursor
parameter_list|(
name|MacroDefinition
modifier|*
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Wraps a macro expansion cursor and provides a common interface
comment|/// for a normal macro expansion cursor or a "pseudo" one.
comment|///
comment|/// "Pseudo" macro expansion cursors (essentially a macro definition along with
comment|/// a source location) are created in special cases, for example they can be
comment|/// created for identifiers inside macro definitions, if these identifiers are
comment|/// macro names.
name|class
name|MacroExpansionCursor
block|{
name|CXCursor
name|C
decl_stmt|;
name|bool
name|isPseudo
argument_list|()
specifier|const
block|{
return|return
name|C
operator|.
name|data
index|[
literal|1
index|]
operator|!=
name|nullptr
return|;
block|}
specifier|const
name|MacroDefinition
operator|*
name|getAsMacroDefinition
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isPseudo
argument_list|()
argument_list|)
block|;
return|return
name|static_cast
operator|<
specifier|const
name|MacroDefinition
operator|*
operator|>
operator|(
name|C
operator|.
name|data
index|[
literal|0
index|]
operator|)
return|;
block|}
specifier|const
name|MacroExpansion
operator|*
name|getAsMacroExpansion
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isPseudo
argument_list|()
argument_list|)
block|;
return|return
name|static_cast
operator|<
specifier|const
name|MacroExpansion
operator|*
operator|>
operator|(
name|C
operator|.
name|data
index|[
literal|0
index|]
operator|)
return|;
block|}
name|SourceLocation
name|getPseudoLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isPseudo
argument_list|()
argument_list|)
block|;
return|return
name|SourceLocation
operator|::
name|getFromPtrEncoding
argument_list|(
name|C
operator|.
name|data
index|[
literal|1
index|]
argument_list|)
return|;
block|}
name|public
label|:
name|MacroExpansionCursor
argument_list|(
argument|CXCursor C
argument_list|)
block|:
name|C
argument_list|(
argument|C
argument_list|)
block|{
name|assert
argument_list|(
name|C
operator|.
name|kind
operator|==
name|CXCursor_MacroExpansion
argument_list|)
expr_stmt|;
block|}
specifier|const
name|IdentifierInfo
operator|*
name|getName
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|MacroDefinition
operator|*
name|getDefinition
argument_list|()
specifier|const
expr_stmt|;
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
comment|/// \brief Unpack a given macro expansion cursor to retrieve its info.
specifier|static
specifier|inline
name|MacroExpansionCursor
name|getCursorMacroExpansion
parameter_list|(
name|CXCursor
name|C
parameter_list|)
block|{
return|return
name|C
return|;
block|}
comment|/// \brief Create an inclusion directive cursor.
name|CXCursor
name|MakeInclusionDirectiveCursor
parameter_list|(
name|InclusionDirective
modifier|*
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a given inclusion directive cursor to retrieve its
comment|/// source range.
specifier|const
name|InclusionDirective
modifier|*
name|getCursorInclusionDirective
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
comment|/// \brief Create a label reference at the given location.
name|CXCursor
name|MakeCursorLabelRef
parameter_list|(
name|LabelStmt
modifier|*
name|Label
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Unpack a label reference into the label statement it refers to and
comment|/// the location of the reference.
name|std
operator|::
name|pair
operator|<
specifier|const
name|LabelStmt
operator|*
operator|,
name|SourceLocation
operator|>
name|getCursorLabelRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
comment|/// \brief Create a overloaded declaration reference cursor for an expression.
name|CXCursor
name|MakeCursorOverloadedDeclRef
parameter_list|(
specifier|const
name|OverloadExpr
modifier|*
name|E
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Create a overloaded declaration reference cursor for a declaration.
name|CXCursor
name|MakeCursorOverloadedDeclRef
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|SourceLocation
name|Location
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Create a overloaded declaration reference cursor for a template name.
name|CXCursor
name|MakeCursorOverloadedDeclRef
parameter_list|(
name|TemplateName
name|Template
parameter_list|,
name|SourceLocation
name|Location
parameter_list|,
name|CXTranslationUnit
name|TU
parameter_list|)
function_decl|;
comment|/// \brief Internal storage for an overloaded declaration reference cursor;
typedef|typedef
name|llvm
operator|::
name|PointerUnion3
operator|<
specifier|const
name|OverloadExpr
operator|*
operator|,
specifier|const
name|Decl
operator|*
operator|,
name|OverloadedTemplateStorage
operator|*
operator|>
name|OverloadedDeclRefStorage
expr_stmt|;
comment|/// \brief Unpack an overloaded declaration reference into an expression,
comment|/// declaration, or template name along with the source location.
name|std
operator|::
name|pair
operator|<
name|OverloadedDeclRefStorage
operator|,
name|SourceLocation
operator|>
name|getCursorOverloadedDeclRef
argument_list|(
argument|CXCursor C
argument_list|)
expr_stmt|;
specifier|const
name|Decl
modifier|*
name|getCursorDecl
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
specifier|const
name|Expr
modifier|*
name|getCursorExpr
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
specifier|const
name|Stmt
modifier|*
name|getCursorStmt
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
specifier|const
name|Attr
modifier|*
name|getCursorAttr
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
specifier|const
name|Decl
modifier|*
name|getCursorParentDecl
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
name|ASTContext
modifier|&
name|getCursorContext
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
name|ASTUnit
modifier|*
name|getCursorASTUnit
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
name|CXTranslationUnit
name|getCursorTU
parameter_list|(
name|CXCursor
name|Cursor
parameter_list|)
function_decl|;
name|void
name|getOverriddenCursors
argument_list|(
name|CXCursor
name|cursor
argument_list|,
name|SmallVectorImpl
operator|<
name|CXCursor
operator|>
operator|&
name|overridden
argument_list|)
decl_stmt|;
comment|/// \brief Create an opaque  pool used for fast generation of overriden
comment|/// CXCursor arrays.
name|void
modifier|*
name|createOverridenCXCursorsPool
parameter_list|()
function_decl|;
comment|/// \brief Dispose of the overriden CXCursors pool.
name|void
name|disposeOverridenCXCursorsPool
parameter_list|(
name|void
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/// \brief Returns a index/location pair for a selector identifier if the cursor
comment|/// points to one.
name|std
operator|::
name|pair
operator|<
name|int
operator|,
name|SourceLocation
operator|>
name|getSelectorIdentifierIndexAndLoc
argument_list|(
name|CXCursor
argument_list|)
expr_stmt|;
specifier|static
specifier|inline
name|int
name|getSelectorIdentifierIndex
parameter_list|(
name|CXCursor
name|cursor
parameter_list|)
block|{
return|return
name|getSelectorIdentifierIndexAndLoc
argument_list|(
name|cursor
argument_list|)
operator|.
name|first
return|;
block|}
specifier|static
specifier|inline
name|SourceLocation
name|getSelectorIdentifierLoc
parameter_list|(
name|CXCursor
name|cursor
parameter_list|)
block|{
return|return
name|getSelectorIdentifierIndexAndLoc
argument_list|(
name|cursor
argument_list|)
operator|.
name|second
return|;
block|}
name|CXCursor
name|getSelectorIdentifierCursor
parameter_list|(
name|int
name|SelIdx
parameter_list|,
name|CXCursor
name|cursor
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|CXCursor
name|getTypeRefedCallExprCursor
parameter_list|(
name|CXCursor
name|cursor
parameter_list|)
block|{
name|CXCursor
name|newCursor
init|=
name|cursor
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|kind
operator|==
name|CXCursor_CallExpr
condition|)
name|newCursor
operator|.
name|xdata
operator|=
literal|1
expr_stmt|;
return|return
name|newCursor
return|;
block|}
name|CXCursor
name|getTypeRefCursor
parameter_list|(
name|CXCursor
name|cursor
parameter_list|)
function_decl|;
comment|/// \brief Generate a USR for \arg D and put it in \arg Buf.
comment|/// \returns true if no USR was computed or the result should be ignored,
comment|/// false otherwise.
name|bool
name|getDeclCursorUSR
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|Buf
argument_list|)
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
name|CXCursor
name|X
operator|,
name|CXCursor
name|Y
operator|)
expr_stmt|;
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|CXCursor
name|X
operator|,
name|CXCursor
name|Y
operator|)
block|{
return|return
operator|!
operator|(
name|X
operator|==
name|Y
operator|)
return|;
block|}
comment|/// \brief Return true if the cursor represents a declaration that is the
comment|/// first in a declaration group.
name|bool
name|isFirstInDeclGroup
parameter_list|(
name|CXCursor
name|C
parameter_list|)
function_decl|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace: clang::cxcursor
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

