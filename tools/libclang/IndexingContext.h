begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- IndexingContext.h - Higher level API functions -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"CXCursor.h"
end_include

begin_include
include|#
directive|include
file|"Index_Internal.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclGroup.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclObjC.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|<deque>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|FileEntry
decl_stmt|;
name|class
name|MSPropertyDecl
decl_stmt|;
name|class
name|ObjCPropertyDecl
decl_stmt|;
name|class
name|ClassTemplateDecl
decl_stmt|;
name|class
name|FunctionTemplateDecl
decl_stmt|;
name|class
name|TypeAliasTemplateDecl
decl_stmt|;
name|class
name|ClassTemplateSpecializationDecl
decl_stmt|;
name|namespace
name|cxindex
block|{
name|class
name|IndexingContext
decl_stmt|;
name|class
name|AttrListInfo
decl_stmt|;
name|class
name|ScratchAlloc
block|{
name|IndexingContext
modifier|&
name|IdxCtx
decl_stmt|;
name|public
label|:
name|explicit
name|ScratchAlloc
parameter_list|(
name|IndexingContext
modifier|&
name|indexCtx
parameter_list|)
function_decl|;
name|ScratchAlloc
argument_list|(
specifier|const
name|ScratchAlloc
operator|&
name|SA
argument_list|)
expr_stmt|;
operator|~
name|ScratchAlloc
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|toCStr
parameter_list|(
name|StringRef
name|Str
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|copyCStr
parameter_list|(
name|StringRef
name|Str
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|*
name|allocate
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
name|struct
name|EntityInfo
range|:
name|public
name|CXIdxEntityInfo
block|{
specifier|const
name|NamedDecl
operator|*
name|Dcl
block|;
name|IndexingContext
operator|*
name|IndexCtx
block|;
name|IntrusiveRefCntPtr
operator|<
name|AttrListInfo
operator|>
name|AttrList
block|;
name|EntityInfo
argument_list|()
block|{
name|name
operator|=
name|USR
operator|=
literal|0
block|;
name|attributes
operator|=
literal|0
block|;
name|numAttributes
operator|=
literal|0
block|;   }
block|}
decl_stmt|;
name|struct
name|ContainerInfo
range|:
name|public
name|CXIdxContainerInfo
block|{
specifier|const
name|DeclContext
operator|*
name|DC
block|;
name|IndexingContext
operator|*
name|IndexCtx
block|; }
decl_stmt|;
name|struct
name|DeclInfo
range|:
name|public
name|CXIdxDeclInfo
block|{   enum
name|DInfoKind
block|{
name|Info_Decl
block|,
name|Info_ObjCContainer
block|,
name|Info_ObjCInterface
block|,
name|Info_ObjCProtocol
block|,
name|Info_ObjCCategory
block|,
name|Info_ObjCProperty
block|,
name|Info_CXXClass
block|}
block|;
name|DInfoKind
name|Kind
block|;
name|EntityInfo
name|EntInfo
block|;
name|ContainerInfo
name|SemanticContainer
block|;
name|ContainerInfo
name|LexicalContainer
block|;
name|ContainerInfo
name|DeclAsContainer
block|;
name|DeclInfo
argument_list|(
argument|bool isRedeclaration
argument_list|,
argument|bool isDefinition
argument_list|,
argument|bool isContainer
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Info_Decl
argument_list|)
block|{
name|this
operator|->
name|isRedeclaration
operator|=
name|isRedeclaration
block|;
name|this
operator|->
name|isDefinition
operator|=
name|isDefinition
block|;
name|this
operator|->
name|isContainer
operator|=
name|isContainer
block|;
name|attributes
operator|=
literal|0
block|;
name|numAttributes
operator|=
literal|0
block|;
name|declAsContainer
operator|=
name|semanticContainer
operator|=
name|lexicalContainer
operator|=
literal|0
block|;
name|flags
operator|=
literal|0
block|;   }
name|DeclInfo
argument_list|(
argument|DInfoKind K
argument_list|,
argument|bool isRedeclaration
argument_list|,
argument|bool isDefinition
argument_list|,
argument|bool isContainer
argument_list|)
operator|:
name|Kind
argument_list|(
argument|K
argument_list|)
block|{
name|this
operator|->
name|isRedeclaration
operator|=
name|isRedeclaration
block|;
name|this
operator|->
name|isDefinition
operator|=
name|isDefinition
block|;
name|this
operator|->
name|isContainer
operator|=
name|isContainer
block|;
name|attributes
operator|=
literal|0
block|;
name|numAttributes
operator|=
literal|0
block|;
name|declAsContainer
operator|=
name|semanticContainer
operator|=
name|lexicalContainer
operator|=
literal|0
block|;
name|flags
operator|=
literal|0
block|;   }
block|}
decl_stmt|;
name|struct
name|ObjCContainerDeclInfo
range|:
name|public
name|DeclInfo
block|{
name|CXIdxObjCContainerDeclInfo
name|ObjCContDeclInfo
block|;
name|ObjCContainerDeclInfo
argument_list|(
argument|bool isForwardRef
argument_list|,
argument|bool isRedeclaration
argument_list|,
argument|bool isImplementation
argument_list|)
operator|:
name|DeclInfo
argument_list|(
argument|Info_ObjCContainer
argument_list|,
argument|isRedeclaration
argument_list|,
comment|/*isDefinition=*/
argument|!isForwardRef
argument_list|,
comment|/*isContainer=*/
argument|!isForwardRef
argument_list|)
block|{
name|init
argument_list|(
name|isForwardRef
argument_list|,
name|isImplementation
argument_list|)
block|;   }
name|ObjCContainerDeclInfo
argument_list|(
argument|DInfoKind K
argument_list|,
argument|bool isForwardRef
argument_list|,
argument|bool isRedeclaration
argument_list|,
argument|bool isImplementation
argument_list|)
operator|:
name|DeclInfo
argument_list|(
argument|K
argument_list|,
argument|isRedeclaration
argument_list|,
comment|/*isDefinition=*/
argument|!isForwardRef
argument_list|,
comment|/*isContainer=*/
argument|!isForwardRef
argument_list|)
block|{
name|init
argument_list|(
name|isForwardRef
argument_list|,
name|isImplementation
argument_list|)
block|;   }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|Info_ObjCContainer
operator|<=
name|D
operator|->
name|Kind
operator|&&
name|D
operator|->
name|Kind
operator|<=
name|Info_ObjCCategory
return|;
block|}
name|private
operator|:
name|void
name|init
argument_list|(
argument|bool isForwardRef
argument_list|,
argument|bool isImplementation
argument_list|)
block|{
if|if
condition|(
name|isForwardRef
condition|)
name|ObjCContDeclInfo
operator|.
name|kind
operator|=
name|CXIdxObjCContainer_ForwardRef
expr_stmt|;
elseif|else
if|if
condition|(
name|isImplementation
condition|)
name|ObjCContDeclInfo
operator|.
name|kind
operator|=
name|CXIdxObjCContainer_Implementation
expr_stmt|;
else|else
name|ObjCContDeclInfo
operator|.
name|kind
operator|=
name|CXIdxObjCContainer_Interface
expr_stmt|;
block|}
expr|}
block|;  struct
name|ObjCInterfaceDeclInfo
operator|:
name|public
name|ObjCContainerDeclInfo
block|{
name|CXIdxObjCInterfaceDeclInfo
name|ObjCInterDeclInfo
block|;
name|CXIdxObjCProtocolRefListInfo
name|ObjCProtoListInfo
block|;
name|ObjCInterfaceDeclInfo
argument_list|(
specifier|const
name|ObjCInterfaceDecl
operator|*
name|D
argument_list|)
operator|:
name|ObjCContainerDeclInfo
argument_list|(
argument|Info_ObjCInterface
argument_list|,
comment|/*isForwardRef=*/
argument|false
argument_list|,
comment|/*isRedeclaration=*/
argument|D->getPreviousDecl() !=
literal|0
argument_list|,
comment|/*isImplementation=*/
argument|false
argument_list|)
block|{ }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|D
operator|->
name|Kind
operator|==
name|Info_ObjCInterface
return|;
block|}
expr|}
block|;  struct
name|ObjCProtocolDeclInfo
operator|:
name|public
name|ObjCContainerDeclInfo
block|{
name|CXIdxObjCProtocolRefListInfo
name|ObjCProtoRefListInfo
block|;
name|ObjCProtocolDeclInfo
argument_list|(
specifier|const
name|ObjCProtocolDecl
operator|*
name|D
argument_list|)
operator|:
name|ObjCContainerDeclInfo
argument_list|(
argument|Info_ObjCProtocol
argument_list|,
comment|/*isForwardRef=*/
argument|false
argument_list|,
comment|/*isRedeclaration=*/
argument|D->getPreviousDecl()
argument_list|,
comment|/*isImplementation=*/
argument|false
argument_list|)
block|{ }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|D
operator|->
name|Kind
operator|==
name|Info_ObjCProtocol
return|;
block|}
expr|}
block|;  struct
name|ObjCCategoryDeclInfo
operator|:
name|public
name|ObjCContainerDeclInfo
block|{
name|CXIdxObjCCategoryDeclInfo
name|ObjCCatDeclInfo
block|;
name|CXIdxObjCProtocolRefListInfo
name|ObjCProtoListInfo
block|;
name|explicit
name|ObjCCategoryDeclInfo
argument_list|(
argument|bool isImplementation
argument_list|)
operator|:
name|ObjCContainerDeclInfo
argument_list|(
argument|Info_ObjCCategory
argument_list|,
comment|/*isForwardRef=*/
argument|false
argument_list|,
comment|/*isRedeclaration=*/
argument|isImplementation
argument_list|,
comment|/*isImplementation=*/
argument|isImplementation
argument_list|)
block|{ }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|D
operator|->
name|Kind
operator|==
name|Info_ObjCCategory
return|;
block|}
expr|}
block|;  struct
name|ObjCPropertyDeclInfo
operator|:
name|public
name|DeclInfo
block|{
name|CXIdxObjCPropertyDeclInfo
name|ObjCPropDeclInfo
block|;
name|ObjCPropertyDeclInfo
argument_list|()
operator|:
name|DeclInfo
argument_list|(
argument|Info_ObjCProperty
argument_list|,
comment|/*isRedeclaration=*/
argument|false
argument_list|,
comment|/*isDefinition=*/
argument|false
argument_list|,
comment|/*isContainer=*/
argument|false
argument_list|)
block|{ }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|D
operator|->
name|Kind
operator|==
name|Info_ObjCProperty
return|;
block|}
expr|}
block|;  struct
name|CXXClassDeclInfo
operator|:
name|public
name|DeclInfo
block|{
name|CXIdxCXXClassDeclInfo
name|CXXClassInfo
block|;
name|CXXClassDeclInfo
argument_list|(
argument|bool isRedeclaration
argument_list|,
argument|bool isDefinition
argument_list|)
operator|:
name|DeclInfo
argument_list|(
argument|Info_CXXClass
argument_list|,
argument|isRedeclaration
argument_list|,
argument|isDefinition
argument_list|,
argument|isDefinition
argument_list|)
block|{ }
specifier|static
name|bool
name|classof
argument_list|(
argument|const DeclInfo *D
argument_list|)
block|{
return|return
name|D
operator|->
name|Kind
operator|==
name|Info_CXXClass
return|;
block|}
expr|}
block|;  struct
name|AttrInfo
operator|:
name|public
name|CXIdxAttrInfo
block|{
specifier|const
name|Attr
operator|*
name|A
block|;
name|AttrInfo
argument_list|(
argument|CXIdxAttrKind Kind
argument_list|,
argument|CXCursor C
argument_list|,
argument|CXIdxLoc Loc
argument_list|,
argument|const Attr *A
argument_list|)
block|{
name|kind
operator|=
name|Kind
block|;
name|cursor
operator|=
name|C
block|;
name|loc
operator|=
name|Loc
block|;
name|this
operator|->
name|A
operator|=
name|A
block|;   }
block|}
block|;  struct
name|IBOutletCollectionInfo
operator|:
name|public
name|AttrInfo
block|{
name|EntityInfo
name|ClassInfo
block|;
name|CXIdxIBOutletCollectionAttrInfo
name|IBCollInfo
block|;
name|IBOutletCollectionInfo
argument_list|(
argument|CXCursor C
argument_list|,
argument|CXIdxLoc Loc
argument_list|,
argument|const Attr *A
argument_list|)
operator|:
name|AttrInfo
argument_list|(
argument|CXIdxAttr_IBOutletCollection
argument_list|,
argument|C
argument_list|,
argument|Loc
argument_list|,
argument|A
argument_list|)
block|{
name|assert
argument_list|(
name|C
operator|.
name|kind
operator|==
name|CXCursor_IBOutletCollectionAttr
argument_list|)
block|;
name|IBCollInfo
operator|.
name|objcClass
operator|=
literal|0
block|;   }
name|IBOutletCollectionInfo
argument_list|(
specifier|const
name|IBOutletCollectionInfo
operator|&
name|other
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const AttrInfo *A
argument_list|)
block|{
return|return
name|A
operator|->
name|kind
operator|==
name|CXIdxAttr_IBOutletCollection
return|;
block|}
expr|}
block|;
name|class
name|AttrListInfo
block|{
name|ScratchAlloc
name|SA
block|;
name|SmallVector
operator|<
name|AttrInfo
block|,
literal|2
operator|>
name|Attrs
block|;
name|SmallVector
operator|<
name|IBOutletCollectionInfo
block|,
literal|2
operator|>
name|IBCollAttrs
block|;
name|SmallVector
operator|<
name|CXIdxAttrInfo
operator|*
block|,
literal|2
operator|>
name|CXAttrs
block|;
name|unsigned
name|ref_cnt
block|;
name|AttrListInfo
argument_list|(
argument|const AttrListInfo&
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|AttrListInfo
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
block|;
name|public
operator|:
name|AttrListInfo
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|IndexingContext
operator|&
name|IdxCtx
argument_list|)
block|;
specifier|static
name|IntrusiveRefCntPtr
operator|<
name|AttrListInfo
operator|>
name|create
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|IndexingContext
operator|&
name|IdxCtx
argument_list|)
block|;
specifier|const
name|CXIdxAttrInfo
operator|*
specifier|const
operator|*
name|getAttrs
argument_list|()
specifier|const
block|{
if|if
condition|(
name|CXAttrs
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|CXAttrs
operator|.
name|data
argument_list|()
return|;
block|}
name|unsigned
name|getNumAttrs
argument_list|()
specifier|const
block|{
return|return
operator|(
name|unsigned
operator|)
name|CXAttrs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \brief Retain/Release only useful when we allocate a AttrListInfo from the
comment|/// BumpPtrAllocator, and not from the stack; so that we keep a pointer
comment|// in the EntityInfo
name|void
name|Retain
argument_list|()
block|{
operator|++
name|ref_cnt
block|; }
name|void
name|Release
argument_list|()
block|{
name|assert
argument_list|(
name|ref_cnt
operator|>
literal|0
operator|&&
literal|"Reference count is already zero."
argument_list|)
block|;
if|if
condition|(
operator|--
name|ref_cnt
operator|==
literal|0
condition|)
block|{
comment|// Memory is allocated from a BumpPtrAllocator, no need to delete it.
name|this
operator|->
expr|~
name|AttrListInfo
argument_list|()
expr_stmt|;
block|}
block|}
expr|}
block|;  struct
name|RefFileOccurence
block|{
specifier|const
name|FileEntry
operator|*
name|File
block|;
specifier|const
name|Decl
operator|*
name|Dcl
block|;
name|RefFileOccurence
argument_list|(
specifier|const
name|FileEntry
operator|*
name|File
argument_list|,
specifier|const
name|Decl
operator|*
name|Dcl
argument_list|)
operator|:
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Dcl
argument_list|(
argument|Dcl
argument_list|)
block|{ }
block|}
block|;
name|class
name|IndexingContext
block|{
name|ASTContext
operator|*
name|Ctx
block|;
name|CXClientData
name|ClientData
block|;
name|IndexerCallbacks
operator|&
name|CB
block|;
name|unsigned
name|IndexOptions
block|;
name|CXTranslationUnit
name|CXTU
block|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|FileEntry
operator|*
operator|,
name|CXIdxClientFile
operator|>
name|FileMapTy
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|DeclContext
operator|*
operator|,
name|CXIdxClientContainer
operator|>
name|ContainerMapTy
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Decl
operator|*
operator|,
name|CXIdxClientEntity
operator|>
name|EntityMapTy
expr_stmt|;
name|FileMapTy
name|FileMap
block|;
name|ContainerMapTy
name|ContainerMap
block|;
name|EntityMapTy
name|EntityMap
block|;
name|llvm
operator|::
name|DenseSet
operator|<
name|RefFileOccurence
operator|>
name|RefFileOccurences
block|;
name|std
operator|::
name|deque
operator|<
name|DeclGroupRef
operator|>
name|TUDeclsInObjCContainer
block|;
name|llvm
operator|::
name|BumpPtrAllocator
name|StrScratch
block|;
name|unsigned
name|StrAdapterCount
block|;
name|friend
name|class
name|ScratchAlloc
block|;    struct
name|ObjCProtocolListInfo
block|{
name|SmallVector
operator|<
name|CXIdxObjCProtocolRefInfo
block|,
literal|4
operator|>
name|ProtInfos
block|;
name|SmallVector
operator|<
name|EntityInfo
block|,
literal|4
operator|>
name|ProtEntities
block|;
name|SmallVector
operator|<
name|CXIdxObjCProtocolRefInfo
operator|*
block|,
literal|4
operator|>
name|Prots
block|;
name|CXIdxObjCProtocolRefListInfo
name|getListInfo
argument_list|()
specifier|const
block|{
name|CXIdxObjCProtocolRefListInfo
name|Info
operator|=
block|{
name|Prots
operator|.
name|data
argument_list|()
block|,
operator|(
name|unsigned
operator|)
name|Prots
operator|.
name|size
argument_list|()
block|}
block|;
return|return
name|Info
return|;
block|}
name|ObjCProtocolListInfo
argument_list|(
specifier|const
name|ObjCProtocolList
operator|&
name|ProtList
argument_list|,
name|IndexingContext
operator|&
name|IdxCtx
argument_list|,
name|ScratchAlloc
operator|&
name|SA
argument_list|)
block|;   }
block|;    struct
name|CXXBasesListInfo
block|{
name|SmallVector
operator|<
name|CXIdxBaseClassInfo
block|,
literal|4
operator|>
name|BaseInfos
block|;
name|SmallVector
operator|<
name|EntityInfo
block|,
literal|4
operator|>
name|BaseEntities
block|;
name|SmallVector
operator|<
name|CXIdxBaseClassInfo
operator|*
block|,
literal|4
operator|>
name|CXBases
block|;
specifier|const
name|CXIdxBaseClassInfo
operator|*
specifier|const
operator|*
name|getBases
argument_list|()
specifier|const
block|{
return|return
name|CXBases
operator|.
name|data
argument_list|()
return|;
block|}
name|unsigned
name|getNumBases
argument_list|()
specifier|const
block|{
return|return
operator|(
name|unsigned
operator|)
name|CXBases
operator|.
name|size
argument_list|()
return|;
block|}
name|CXXBasesListInfo
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|D
argument_list|,
name|IndexingContext
operator|&
name|IdxCtx
argument_list|,
name|ScratchAlloc
operator|&
name|SA
argument_list|)
block|;
name|private
operator|:
name|SourceLocation
name|getBaseLoc
argument_list|(
argument|const CXXBaseSpecifier&Base
argument_list|)
specifier|const
block|;   }
block|;
name|friend
name|class
name|AttrListInfo
block|;
name|public
operator|:
name|IndexingContext
argument_list|(
argument|CXClientData clientData
argument_list|,
argument|IndexerCallbacks&indexCallbacks
argument_list|,
argument|unsigned indexOptions
argument_list|,
argument|CXTranslationUnit cxTU
argument_list|)
operator|:
name|Ctx
argument_list|(
literal|0
argument_list|)
block|,
name|ClientData
argument_list|(
name|clientData
argument_list|)
block|,
name|CB
argument_list|(
name|indexCallbacks
argument_list|)
block|,
name|IndexOptions
argument_list|(
name|indexOptions
argument_list|)
block|,
name|CXTU
argument_list|(
name|cxTU
argument_list|)
block|,
name|StrScratch
argument_list|(
comment|/*size=*/
literal|1024
argument_list|)
block|,
name|StrAdapterCount
argument_list|(
literal|0
argument_list|)
block|{ }
name|ASTContext
operator|&
name|getASTContext
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Ctx
return|;
block|}
name|void
name|setASTContext
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|)
block|;
name|void
name|setPreprocessor
argument_list|(
name|Preprocessor
operator|&
name|PP
argument_list|)
block|;
name|bool
name|shouldSuppressRefs
argument_list|()
specifier|const
block|{
return|return
name|IndexOptions
operator|&
name|CXIndexOpt_SuppressRedundantRefs
return|;
block|}
name|bool
name|shouldIndexFunctionLocalSymbols
argument_list|()
specifier|const
block|{
return|return
name|IndexOptions
operator|&
name|CXIndexOpt_IndexFunctionLocalSymbols
return|;
block|}
name|bool
name|shouldIndexImplicitTemplateInsts
argument_list|()
specifier|const
block|{
return|return
name|IndexOptions
operator|&
name|CXIndexOpt_IndexImplicitTemplateInstantiations
return|;
block|}
specifier|static
name|bool
name|isFunctionLocalDecl
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|)
block|;
name|bool
name|shouldAbort
argument_list|()
block|;
name|bool
name|hasDiagnosticCallback
argument_list|()
specifier|const
block|{
return|return
name|CB
operator|.
name|diagnostic
return|;
block|}
name|void
name|enteredMainFile
argument_list|(
specifier|const
name|FileEntry
operator|*
name|File
argument_list|)
block|;
name|void
name|ppIncludedFile
argument_list|(
argument|SourceLocation hashLoc
argument_list|,
argument|StringRef filename
argument_list|,
argument|const FileEntry *File
argument_list|,
argument|bool isImport
argument_list|,
argument|bool isAngled
argument_list|,
argument|bool isModuleImport
argument_list|)
block|;
name|void
name|importedModule
argument_list|(
specifier|const
name|ImportDecl
operator|*
name|ImportD
argument_list|)
block|;
name|void
name|importedPCH
argument_list|(
specifier|const
name|FileEntry
operator|*
name|File
argument_list|)
block|;
name|void
name|startedTranslationUnit
argument_list|()
block|;
name|void
name|indexDecl
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|)
block|;
name|void
name|indexTagDecl
argument_list|(
specifier|const
name|TagDecl
operator|*
name|D
argument_list|)
block|;
name|void
name|indexTypeSourceInfo
argument_list|(
name|TypeSourceInfo
operator|*
name|TInfo
argument_list|,
specifier|const
name|NamedDecl
operator|*
name|Parent
argument_list|,
specifier|const
name|DeclContext
operator|*
name|DC
operator|=
literal|0
argument_list|)
block|;
name|void
name|indexTypeLoc
argument_list|(
argument|TypeLoc TL
argument_list|,
argument|const NamedDecl *Parent
argument_list|,
argument|const DeclContext *DC =
literal|0
argument_list|)
block|;
name|void
name|indexNestedNameSpecifierLoc
argument_list|(
argument|NestedNameSpecifierLoc NNS
argument_list|,
argument|const NamedDecl *Parent
argument_list|,
argument|const DeclContext *DC =
literal|0
argument_list|)
block|;
name|void
name|indexDeclContext
argument_list|(
specifier|const
name|DeclContext
operator|*
name|DC
argument_list|)
block|;
name|void
name|indexBody
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|,
specifier|const
name|NamedDecl
operator|*
name|Parent
argument_list|,
specifier|const
name|DeclContext
operator|*
name|DC
operator|=
literal|0
argument_list|)
block|;
name|void
name|handleDiagnosticSet
argument_list|(
argument|CXDiagnosticSet CXDiagSet
argument_list|)
block|;
name|bool
name|handleFunction
argument_list|(
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|)
block|;
name|bool
name|handleVar
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleField
argument_list|(
specifier|const
name|FieldDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleMSProperty
argument_list|(
specifier|const
name|MSPropertyDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleEnumerator
argument_list|(
specifier|const
name|EnumConstantDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleTagDecl
argument_list|(
specifier|const
name|TagDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleTypedefName
argument_list|(
specifier|const
name|TypedefNameDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCInterface
argument_list|(
specifier|const
name|ObjCInterfaceDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCImplementation
argument_list|(
specifier|const
name|ObjCImplementationDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCProtocol
argument_list|(
specifier|const
name|ObjCProtocolDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCCategory
argument_list|(
specifier|const
name|ObjCCategoryDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCCategoryImpl
argument_list|(
specifier|const
name|ObjCCategoryImplDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleObjCMethod
argument_list|(
specifier|const
name|ObjCMethodDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleSynthesizedObjCProperty
argument_list|(
specifier|const
name|ObjCPropertyImplDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleSynthesizedObjCMethod
argument_list|(
argument|const ObjCMethodDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|,
argument|const DeclContext *LexicalDC
argument_list|)
block|;
name|bool
name|handleObjCProperty
argument_list|(
specifier|const
name|ObjCPropertyDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleNamespace
argument_list|(
specifier|const
name|NamespaceDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleClassTemplate
argument_list|(
specifier|const
name|ClassTemplateDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleFunctionTemplate
argument_list|(
specifier|const
name|FunctionTemplateDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleTypeAliasTemplate
argument_list|(
specifier|const
name|TypeAliasTemplateDecl
operator|*
name|D
argument_list|)
block|;
name|bool
name|handleReference
argument_list|(
argument|const NamedDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|,
argument|CXCursor Cursor
argument_list|,
argument|const NamedDecl *Parent
argument_list|,
argument|const DeclContext *DC
argument_list|,
argument|const Expr *E =
literal|0
argument_list|,
argument|CXIdxEntityRefKind Kind = CXIdxEntityRef_Direct
argument_list|)
block|;
name|bool
name|handleReference
argument_list|(
argument|const NamedDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|,
argument|const NamedDecl *Parent
argument_list|,
argument|const DeclContext *DC
argument_list|,
argument|const Expr *E =
literal|0
argument_list|,
argument|CXIdxEntityRefKind Kind = CXIdxEntityRef_Direct
argument_list|)
block|;
name|bool
name|isNotFromSourceFile
argument_list|(
argument|SourceLocation Loc
argument_list|)
specifier|const
block|;
name|void
name|indexTopLevelDecl
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|)
block|;
name|void
name|indexTUDeclsInObjCContainer
argument_list|()
block|;
name|void
name|indexDeclGroupRef
argument_list|(
argument|DeclGroupRef DG
argument_list|)
block|;
name|void
name|addTUDeclInObjCContainer
argument_list|(
argument|DeclGroupRef DG
argument_list|)
block|{
name|TUDeclsInObjCContainer
operator|.
name|push_back
argument_list|(
name|DG
argument_list|)
block|;   }
name|void
name|translateLoc
argument_list|(
argument|SourceLocation Loc
argument_list|,
argument|CXIdxClientFile *indexFile
argument_list|,
argument|CXFile *file
argument_list|,
argument|unsigned *line
argument_list|,
argument|unsigned *column
argument_list|,
argument|unsigned *offset
argument_list|)
block|;
name|CXIdxClientContainer
name|getClientContainerForDC
argument_list|(
argument|const DeclContext *DC
argument_list|)
specifier|const
block|;
name|void
name|addContainerInMap
argument_list|(
argument|const DeclContext *DC
argument_list|,
argument|CXIdxClientContainer container
argument_list|)
block|;
name|CXIdxClientEntity
name|getClientEntity
argument_list|(
argument|const Decl *D
argument_list|)
specifier|const
block|;
name|void
name|setClientEntity
argument_list|(
argument|const Decl *D
argument_list|,
argument|CXIdxClientEntity client
argument_list|)
block|;
specifier|static
name|bool
name|isTemplateImplicitInstantiation
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|)
block|;
name|private
operator|:
name|bool
name|handleDecl
argument_list|(
argument|const NamedDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|,
argument|CXCursor Cursor
argument_list|,
argument|DeclInfo&DInfo
argument_list|,
argument|const DeclContext *LexicalDC =
literal|0
argument_list|)
block|;
name|bool
name|handleObjCContainer
argument_list|(
argument|const ObjCContainerDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|,
argument|CXCursor Cursor
argument_list|,
argument|ObjCContainerDeclInfo&ContDInfo
argument_list|)
block|;
name|bool
name|handleCXXRecordDecl
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
specifier|const
name|NamedDecl
operator|*
name|OrigD
argument_list|)
block|;
name|bool
name|markEntityOccurrenceInFile
argument_list|(
argument|const NamedDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|;
specifier|const
name|NamedDecl
operator|*
name|getEntityDecl
argument_list|(
argument|const NamedDecl *D
argument_list|)
specifier|const
block|;
specifier|const
name|DeclContext
operator|*
name|getEntityContainer
argument_list|(
argument|const Decl *D
argument_list|)
specifier|const
block|;
name|CXIdxClientFile
name|getIndexFile
argument_list|(
specifier|const
name|FileEntry
operator|*
name|File
argument_list|)
block|;
name|CXIdxLoc
name|getIndexLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
specifier|const
block|;
name|void
name|getEntityInfo
argument_list|(
specifier|const
name|NamedDecl
operator|*
name|D
argument_list|,
name|EntityInfo
operator|&
name|EntityInfo
argument_list|,
name|ScratchAlloc
operator|&
name|SA
argument_list|)
block|;
name|void
name|getContainerInfo
argument_list|(
specifier|const
name|DeclContext
operator|*
name|DC
argument_list|,
name|ContainerInfo
operator|&
name|ContInfo
argument_list|)
block|;
name|CXCursor
name|getCursor
argument_list|(
argument|const Decl *D
argument_list|)
block|{
return|return
name|cxcursor
operator|::
name|MakeCXCursor
argument_list|(
name|D
argument_list|,
name|CXTU
argument_list|)
return|;
block|}
name|CXCursor
name|getRefCursor
argument_list|(
argument|const NamedDecl *D
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|;
specifier|static
name|bool
name|shouldIgnoreIfImplicit
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|)
block|; }
block|;
specifier|inline
name|ScratchAlloc
operator|::
name|ScratchAlloc
argument_list|(
name|IndexingContext
operator|&
name|idxCtx
argument_list|)
operator|:
name|IdxCtx
argument_list|(
argument|idxCtx
argument_list|)
block|{
operator|++
name|IdxCtx
operator|.
name|StrAdapterCount
block|; }
specifier|inline
name|ScratchAlloc
operator|::
name|ScratchAlloc
argument_list|(
specifier|const
name|ScratchAlloc
operator|&
name|SA
argument_list|)
operator|:
name|IdxCtx
argument_list|(
argument|SA.IdxCtx
argument_list|)
block|{
operator|++
name|IdxCtx
operator|.
name|StrAdapterCount
block|; }
specifier|inline
name|ScratchAlloc
operator|::
operator|~
name|ScratchAlloc
argument_list|()
block|{
operator|--
name|IdxCtx
operator|.
name|StrAdapterCount
block|;
if|if
condition|(
name|IdxCtx
operator|.
name|StrAdapterCount
operator|==
literal|0
condition|)
name|IdxCtx
operator|.
name|StrScratch
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|*
name|ScratchAlloc
operator|::
name|allocate
argument_list|()
block|{
return|return
name|IdxCtx
operator|.
name|StrScratch
operator|.
name|Allocate
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
expr|}}
comment|// end clang::cxindex
name|namespace
name|llvm
block|{
comment|/// Define DenseMapInfo so that FileID's can be used as keys in DenseMap and
comment|/// DenseSets.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|clang
operator|::
name|cxindex
operator|::
name|RefFileOccurence
operator|>
block|{
specifier|static
specifier|inline
name|clang
operator|::
name|cxindex
operator|::
name|RefFileOccurence
name|getEmptyKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|cxindex
operator|::
name|RefFileOccurence
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|cxindex
operator|::
name|RefFileOccurence
name|getTombstoneKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|cxindex
operator|::
name|RefFileOccurence
argument_list|(
operator|(
specifier|const
name|clang
operator|::
name|FileEntry
operator|*
operator|)
operator|~
literal|0
argument_list|,
operator|(
specifier|const
name|clang
operator|::
name|Decl
operator|*
operator|)
operator|~
literal|0
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|clang::cxindex::RefFileOccurence S
argument_list|)
block|{
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|clang
operator|::
name|FileEntry
operator|*
operator|,
specifier|const
name|clang
operator|::
name|Decl
operator|*
operator|>
name|PairTy
expr_stmt|;
return|return
name|DenseMapInfo
operator|<
name|PairTy
operator|>
operator|::
name|getHashValue
argument_list|(
name|PairTy
argument_list|(
name|S
operator|.
name|File
argument_list|,
name|S
operator|.
name|Dcl
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|clang::cxindex::RefFileOccurence LHS
argument_list|,
argument|clang::cxindex::RefFileOccurence RHS
argument_list|)
block|{
return|return
name|LHS
operator|.
name|File
operator|==
name|RHS
operator|.
name|File
operator|&&
name|LHS
operator|.
name|Dcl
operator|==
name|RHS
operator|.
name|Dcl
return|;
block|}
expr|}
block|; }
end_decl_stmt

end_unit

