begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DiagnosticNames.h - Defines a table of all builtin diagnostics ------==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|diagtool
block|{
struct|struct
name|DiagnosticRecord
block|{
specifier|const
name|char
modifier|*
name|NameStr
decl_stmt|;
name|short
name|DiagID
decl_stmt|;
name|uint8_t
name|NameLen
decl_stmt|;
name|llvm
operator|::
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|StringRef
argument_list|(
name|NameStr
argument_list|,
name|NameLen
argument_list|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DiagnosticRecord
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|getName
argument_list|()
operator|<
name|Other
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
struct|;
comment|/// \brief Get every diagnostic in the system, sorted by name.
name|llvm
operator|::
name|ArrayRef
operator|<
name|DiagnosticRecord
operator|>
name|getBuiltinDiagnosticsByName
argument_list|()
expr_stmt|;
comment|/// \brief Get a diagnostic by its ID.
specifier|const
name|DiagnosticRecord
modifier|&
name|getDiagnosticForID
parameter_list|(
name|short
name|DiagID
parameter_list|)
function_decl|;
struct|struct
name|GroupRecord
block|{
comment|// Be safe with the size of 'NameLen' because we don't statically check if
comment|// the size will fit in the field; the struct size won't decrease with a
comment|// shorter type anyway.
name|size_t
name|NameLen
decl_stmt|;
specifier|const
name|char
modifier|*
name|NameStr
decl_stmt|;
specifier|const
name|short
modifier|*
name|Members
decl_stmt|;
specifier|const
name|short
modifier|*
name|SubGroups
decl_stmt|;
name|llvm
operator|::
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|StringRef
argument_list|(
name|NameStr
argument_list|,
name|NameLen
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|RecordType
operator|>
name|class
name|group_iterator
block|{
specifier|const
name|short
operator|*
name|CurrentID
block|;
name|friend
expr|struct
name|GroupRecord
block|;
name|group_iterator
argument_list|(
specifier|const
name|short
operator|*
name|Start
argument_list|)
operator|:
name|CurrentID
argument_list|(
argument|Start
argument_list|)
block|{
if|if
condition|(
name|CurrentID
operator|&&
operator|*
name|CurrentID
operator|==
operator|-
literal|1
condition|)
name|CurrentID
operator|=
literal|0
expr_stmt|;
block|}
name|public
operator|:
typedef|typedef
name|RecordType
name|value_type
typedef|;
typedef|typedef
specifier|const
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
specifier|const
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|std
operator|::
name|ptrdiff_t
name|difference_type
expr_stmt|;
specifier|inline
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
specifier|inline
name|pointer
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
name|operator
operator|*
operator|(
operator|)
return|;
block|}
specifier|inline
namespace|short
name|getID
namespace|(
struct|)
specifier|const
block|{
return|return
operator|*
name|CurrentID
return|;
block|}
name|group_iterator
modifier|&
name|operator
decl|++
argument_list|()
block|{
operator|++
name|CurrentID
expr_stmt|;
if|if
condition|(
operator|*
name|CurrentID
operator|==
operator|-
literal|1
condition|)
name|CurrentID
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
decl|==
argument_list|(
name|group_iterator
operator|&
name|Other
argument_list|)
decl|const
block|{
return|return
name|CurrentID
operator|==
name|Other
operator|.
name|CurrentID
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
name|group_iterator
operator|&
name|Other
argument_list|)
decl|const
block|{
return|return
name|CurrentID
operator|!=
name|Other
operator|.
name|CurrentID
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|group_iterator
operator|<
name|GroupRecord
operator|>
name|subgroup_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|subgroup_iterator
name|subgroup_begin
argument_list|()
specifier|const
block|{
return|return
name|SubGroups
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|subgroup_iterator
name|subgroup_end
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|group_iterator
operator|<
name|DiagnosticRecord
operator|>
name|diagnostics_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|diagnostics_iterator
name|diagnostics_begin
argument_list|()
specifier|const
block|{
return|return
name|Members
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|diagnostics_iterator
name|diagnostics_end
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|GroupRecord
operator|&
name|Other
operator|)
specifier|const
block|{
return|return
name|getName
argument_list|()
operator|<
name|Other
operator|.
name|getName
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|/// \brief Get every diagnostic group in the system, sorted by name.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|ArrayRef
operator|<
name|GroupRecord
operator|>
name|getDiagnosticGroups
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|GroupRecord
operator|::
name|subgroup_iterator
operator|::
name|reference
name|GroupRecord
operator|::
name|subgroup_iterator
operator|::
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getDiagnosticGroups
argument_list|()
index|[
operator|*
name|CurrentID
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
specifier|inline
name|GroupRecord
operator|::
name|diagnostics_iterator
operator|::
name|reference
name|GroupRecord
operator|::
name|diagnostics_iterator
operator|::
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getDiagnosticForID
argument_list|(
operator|*
name|CurrentID
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace diagtool
end_comment

end_unit

