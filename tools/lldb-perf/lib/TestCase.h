begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TestCase.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PerfTestDriver__TestCase__
end_ifndef

begin_define
define|#
directive|define
name|__PerfTestDriver__TestCase__
end_define

begin_include
include|#
directive|include
file|"lldb/API/LLDB.h"
end_include

begin_include
include|#
directive|include
file|"Measurement.h"
end_include

begin_include
include|#
directive|include
file|<getopt.h>
end_include

begin_decl_stmt
name|namespace
name|lldb_perf
block|{
name|class
name|Results
decl_stmt|;
name|class
name|TestCase
block|{
name|public
label|:
name|TestCase
argument_list|()
expr_stmt|;
struct|struct
name|ActionWanted
block|{
name|enum
name|class
name|Type
block|{
name|eStepOver
operator|,
name|eContinue
operator|,
name|eStepOut
operator|,
name|eRelaunch
operator|,
name|eCallNext
operator|,
name|eNone
operator|,
name|eKill
block|}
name|type
expr_stmt|;
name|lldb
operator|::
name|SBThread
name|thread
expr_stmt|;
name|lldb
operator|::
name|SBLaunchInfo
name|launch_info
expr_stmt|;
name|ActionWanted
argument_list|()
operator|:
name|type
argument_list|(
name|Type
operator|::
name|eContinue
argument_list|)
operator|,
name|thread
argument_list|()
operator|,
name|launch_info
argument_list|(
argument|NULL
argument_list|)
block|{         }
name|void
name|None
argument_list|()
block|{
name|type
operator|=
name|Type
operator|::
name|eNone
block|;
name|thread
operator|=
name|lldb
operator|::
name|SBThread
argument_list|()
block|;         }
name|void
name|Continue
argument_list|()
block|{
name|type
operator|=
name|Type
operator|::
name|eContinue
block|;
name|thread
operator|=
name|lldb
operator|::
name|SBThread
argument_list|()
block|;         }
name|void
name|StepOver
argument_list|(
argument|lldb::SBThread t
argument_list|)
block|{
name|type
operator|=
name|Type
operator|::
name|eStepOver
block|;
name|thread
operator|=
name|t
block|;         }
name|void
name|StepOut
argument_list|(
argument|lldb::SBThread t
argument_list|)
block|{
name|type
operator|=
name|Type
operator|::
name|eStepOut
block|;
name|thread
operator|=
name|t
block|;         }
name|void
name|Relaunch
argument_list|(
argument|lldb::SBLaunchInfo l
argument_list|)
block|{
name|type
operator|=
name|Type
operator|::
name|eRelaunch
block|;
name|thread
operator|=
name|lldb
operator|::
name|SBThread
argument_list|()
block|;
name|launch_info
operator|=
name|l
block|;         }
name|void
name|Kill
argument_list|()
block|{
name|type
operator|=
name|Type
operator|::
name|eKill
block|;
name|thread
operator|=
name|lldb
operator|::
name|SBThread
argument_list|()
block|;         }
name|void
name|CallNext
argument_list|()
block|{
name|type
operator|=
name|Type
operator|::
name|eCallNext
block|;
name|thread
operator|=
name|lldb
operator|::
name|SBThread
argument_list|()
block|;         }
block|}
struct|;
name|virtual
operator|~
name|TestCase
argument_list|()
block|{     }
name|virtual
name|bool
name|Setup
argument_list|(
name|int
operator|&
name|argc
argument_list|,
specifier|const
name|char
operator|*
operator|*
operator|&
name|argv
argument_list|)
expr_stmt|;
name|virtual
name|void
name|TestStep
parameter_list|(
name|int
name|counter
parameter_list|,
name|ActionWanted
modifier|&
name|next_action
parameter_list|)
init|=
literal|0
function_decl|;
name|bool
name|Launch
argument_list|(
name|lldb
operator|::
name|SBLaunchInfo
operator|&
name|launch_info
argument_list|)
decl_stmt|;
name|bool
name|Launch
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
specifier|const
name|char
operator|*
operator|>
name|args
operator|=
block|{}
argument_list|)
decl_stmt|;
name|void
name|Loop
parameter_list|()
function_decl|;
name|void
name|SetVerbose
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetVerbose
parameter_list|()
function_decl|;
name|virtual
name|void
name|WriteResults
parameter_list|(
name|Results
modifier|&
name|results
parameter_list|)
init|=
literal|0
function_decl|;
name|template
operator|<
name|typename
name|G
operator|,
name|typename
name|A
operator|>
name|Measurement
operator|<
name|G
operator|,
name|A
operator|>
name|CreateMeasurement
argument_list|(
argument|A a
argument_list|,
argument|const char* name = NULL
argument_list|,
argument|const char* description = NULL
argument_list|)
block|{
return|return
name|Measurement
operator|<
name|G
operator|,
name|A
operator|>
operator|(
name|a
operator|,
name|name
operator|,
name|description
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|A
operator|>
name|TimeMeasurement
operator|<
name|A
operator|>
name|CreateTimeMeasurement
argument_list|(
argument|A a
argument_list|,
argument|const char* name = NULL
argument_list|,
argument|const char* description = NULL
argument_list|)
block|{
return|return
name|TimeMeasurement
operator|<
name|A
operator|>
operator|(
name|a
operator|,
name|name
operator|,
name|description
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|A
operator|>
name|MemoryMeasurement
operator|<
name|A
operator|>
name|CreateMemoryMeasurement
argument_list|(
argument|A a
argument_list|,
argument|const char* name = NULL
argument_list|,
argument|const char* description = NULL
argument_list|)
block|{
return|return
name|MemoryMeasurement
operator|<
name|A
operator|>
operator|(
name|a
operator|,
name|name
operator|,
name|description
operator|)
return|;
block|}
specifier|static
name|int
name|Run
parameter_list|(
name|TestCase
modifier|&
name|test
parameter_list|,
name|int
name|argc
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
name|virtual
name|bool
name|ParseOption
parameter_list|(
name|int
name|short_option
parameter_list|,
specifier|const
name|char
modifier|*
name|optarg
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|struct
name|option
modifier|*
name|GetLongOptions
parameter_list|()
block|{
return|return
name|NULL
return|;
block|}
name|lldb
operator|::
name|SBDebugger
operator|&
name|GetDebugger
argument_list|()
block|{
return|return
name|m_debugger
return|;
block|}
name|lldb
operator|::
name|SBTarget
operator|&
name|GetTarget
argument_list|()
block|{
return|return
name|m_target
return|;
block|}
name|lldb
operator|::
name|SBProcess
operator|&
name|GetProcess
argument_list|()
block|{
return|return
name|m_process
return|;
block|}
name|lldb
operator|::
name|SBThread
operator|&
name|GetThread
argument_list|()
block|{
return|return
name|m_thread
return|;
block|}
name|int
name|GetStep
parameter_list|()
block|{
return|return
name|m_step
return|;
block|}
specifier|static
specifier|const
name|int
name|RUN_SUCCESS
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|RUN_SETUP_ERROR
init|=
literal|100
decl_stmt|;
name|protected
label|:
name|lldb
operator|::
name|SBDebugger
name|m_debugger
expr_stmt|;
name|lldb
operator|::
name|SBTarget
name|m_target
expr_stmt|;
name|lldb
operator|::
name|SBProcess
name|m_process
expr_stmt|;
name|lldb
operator|::
name|SBThread
name|m_thread
expr_stmt|;
name|lldb
operator|::
name|SBListener
name|m_listener
expr_stmt|;
name|bool
name|m_verbose
decl_stmt|;
name|int
name|m_step
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__PerfTestDriver__TestCase__) */
end_comment

end_unit

