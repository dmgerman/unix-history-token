begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Results.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PerfTestDriver_Results_h__
end_ifndef

begin_define
define|#
directive|define
name|__PerfTestDriver_Results_h__
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb_perf
block|{
name|class
name|Results
block|{
name|public
label|:
name|class
name|Array
decl_stmt|;
name|class
name|Dictionary
decl_stmt|;
name|class
name|Double
decl_stmt|;
name|class
name|String
decl_stmt|;
name|class
name|Unsigned
decl_stmt|;
name|class
name|Result
block|{
name|public
label|:
name|enum
name|class
name|Type
block|{
name|Invalid
operator|,
name|Array
operator|,
name|Dictionary
operator|,
name|Double
operator|,
name|String
operator|,
name|Unsigned
block|}
empty_stmt|;
name|Result
argument_list|(
argument|Type type
argument_list|,
argument|const char *name
argument_list|,
argument|const char *description
argument_list|)
block|:
name|m_name
argument_list|()
operator|,
name|m_description
argument_list|()
operator|,
name|m_type
argument_list|(
argument|type
argument_list|)
block|{
if|if
condition|(
name|name
operator|&&
name|name
index|[
literal|0
index|]
condition|)
name|m_name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|description
operator|&&
name|description
index|[
literal|0
index|]
condition|)
name|m_description
operator|=
name|description
expr_stmt|;
block|}
name|virtual
operator|~
name|Result
argument_list|()
block|{}
name|virtual
name|void
name|Write
argument_list|(
name|Results
operator|&
name|results
argument_list|)
operator|=
literal|0
expr_stmt|;
name|Array
modifier|*
name|GetAsArray
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|Array
condition|)
return|return
operator|(
name|Array
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Dictionary
modifier|*
name|GetAsDictionary
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|Dictionary
condition|)
return|return
operator|(
name|Dictionary
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Double
modifier|*
name|GetAsDouble
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|Double
condition|)
return|return
operator|(
name|Double
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|String
modifier|*
name|GetAsString
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|String
condition|)
return|return
operator|(
name|String
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Unsigned
modifier|*
name|GetAsUnsigned
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|Unsigned
condition|)
return|return
operator|(
name|Unsigned
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
specifier|const
name|char
operator|*
name|GetName
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_name
operator|.
name|empty
argument_list|()
condition|)
return|return
name|NULL
return|;
return|return
name|m_name
operator|.
name|c_str
argument_list|()
return|;
block|}
specifier|const
name|char
operator|*
name|GetDescription
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_description
operator|.
name|empty
argument_list|()
condition|)
return|return
name|NULL
return|;
return|return
name|m_description
operator|.
name|c_str
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Type
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|m_name
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_description
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Type
name|m_type
decl_stmt|;
end_decl_stmt

begin_typedef
unit|};
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Result
operator|>
name|ResultSP
expr_stmt|;
end_typedef

begin_decl_stmt
name|class
name|Array
range|:
name|public
name|Result
block|{
name|public
operator|:
name|Array
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|)
operator|:
name|Result
argument_list|(
argument|Type::Array
argument_list|,
argument|name
argument_list|,
argument|description
argument_list|)
block|{}
name|virtual
operator|~
name|Array
argument_list|()
block|{}
name|ResultSP
name|Append
argument_list|(
specifier|const
name|ResultSP
operator|&
name|result_sp
argument_list|)
block|;
name|void
name|ForEach
argument_list|(
specifier|const
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|ResultSP
operator|&
argument_list|)
operator|>
operator|&
name|callback
argument_list|)
block|;
name|virtual
name|void
name|Write
argument_list|(
argument|Results&results
argument_list|)
block|{}
name|protected
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ResultSP
operator|>
name|collection
expr_stmt|;
name|collection
name|m_array
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Dictionary
range|:
name|public
name|Result
block|{
name|public
operator|:
name|Dictionary
argument_list|()
operator|:
name|Result
argument_list|(
argument|Type::Dictionary
argument_list|,
argument|NULL
argument_list|,
argument|NULL
argument_list|)
block|{}
name|Dictionary
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|)
operator|:
name|Result
argument_list|(
argument|Type::Dictionary
argument_list|,
argument|name
argument_list|,
argument|description
argument_list|)
block|{}
name|virtual
operator|~
name|Dictionary
argument_list|()
block|{}
name|virtual
name|void
name|Write
argument_list|(
argument|Results&results
argument_list|)
block|{}
name|void
name|ForEach
argument_list|(
specifier|const
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
argument_list|,
specifier|const
name|ResultSP
operator|&
argument_list|)
operator|>
operator|&
name|callback
argument_list|)
block|;
name|ResultSP
name|Add
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
specifier|const
name|ResultSP
operator|&
name|result_sp
argument_list|)
block|;
name|ResultSP
name|AddDouble
argument_list|(
argument|const char *name
argument_list|,
argument|const char *descriptiorn
argument_list|,
argument|double value
argument_list|)
block|;
name|ResultSP
name|AddUnsigned
argument_list|(
argument|const char *name
argument_list|,
argument|const char *description
argument_list|,
argument|uint64_t value
argument_list|)
block|;
name|ResultSP
name|AddString
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
specifier|const
name|char
operator|*
name|value
argument_list|)
block|;
name|protected
operator|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|ResultSP
operator|>
name|collection
expr_stmt|;
name|collection
name|m_dictionary
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|String
range|:
name|public
name|Result
block|{
name|public
operator|:
name|String
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
specifier|const
name|char
operator|*
name|value
argument_list|)
operator|:
name|Result
argument_list|(
name|Type
operator|::
name|String
argument_list|,
name|name
argument_list|,
name|description
argument_list|)
block|,
name|m_string
argument_list|()
block|{
if|if
condition|(
name|value
operator|&&
name|value
index|[
literal|0
index|]
condition|)
name|m_string
operator|=
name|value
expr_stmt|;
block|}
name|virtual
operator|~
name|String
argument_list|()
block|{}
name|virtual
name|void
name|Write
argument_list|(
argument|Results&results
argument_list|)
block|{}
specifier|const
name|char
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|empty
argument_list|()
operator|?
name|NULL
operator|:
name|m_string
operator|.
name|c_str
argument_list|()
return|;
block|}
name|protected
operator|:
name|std
operator|::
name|string
name|m_string
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Double
range|:
name|public
name|Result
block|{
name|public
operator|:
name|Double
argument_list|(
argument|const char *name
argument_list|,
argument|const char *description
argument_list|,
argument|double value
argument_list|)
operator|:
name|Result
argument_list|(
name|Type
operator|::
name|Double
argument_list|,
name|name
argument_list|,
name|description
argument_list|)
block|,
name|m_double
argument_list|(
argument|value
argument_list|)
block|{}
name|virtual
operator|~
name|Double
argument_list|()
block|{}
name|virtual
name|void
name|Write
argument_list|(
argument|Results&results
argument_list|)
block|{}
name|double
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_double
return|;
block|}
name|protected
operator|:
name|double
name|m_double
block|;   }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Unsigned
range|:
name|public
name|Result
block|{
name|public
operator|:
name|Unsigned
argument_list|(
argument|const char *name
argument_list|,
argument|const char *description
argument_list|,
argument|uint64_t value
argument_list|)
operator|:
name|Result
argument_list|(
name|Type
operator|::
name|Unsigned
argument_list|,
name|name
argument_list|,
name|description
argument_list|)
block|,
name|m_unsigned
argument_list|(
argument|value
argument_list|)
block|{}
name|virtual
operator|~
name|Unsigned
argument_list|()
block|{}
name|virtual
name|void
name|Write
argument_list|(
argument|Results&results
argument_list|)
block|{}
name|uint64_t
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_unsigned
return|;
block|}
name|protected
operator|:
name|uint64_t
name|m_unsigned
block|;   }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Results
argument_list|()
operator|:
name|m_results
argument_list|()
block|{}
operator|~
name|Results
argument_list|()
block|{}
name|Dictionary
operator|&
name|GetDictionary
argument_list|()
block|{
return|return
name|m_results
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|Write
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|Dictionary
name|m_results
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace lldb_perf
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef __PerfTestDriver_Results_h__
end_comment

end_unit

