begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Measurement.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PerfTestDriver__Measurement__
end_ifndef

begin_define
define|#
directive|define
name|__PerfTestDriver__Measurement__
end_define

begin_include
include|#
directive|include
file|"Gauge.h"
end_include

begin_include
include|#
directive|include
file|"MemoryGauge.h"
end_include

begin_include
include|#
directive|include
file|"Metric.h"
end_include

begin_include
include|#
directive|include
file|"Timer.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_perf
block|{
name|template
operator|<
name|typename
name|GaugeType
operator|,
name|typename
name|Callable
operator|>
name|class
name|Measurement
block|{
name|public
operator|:
name|Measurement
argument_list|()
operator|:
name|m_gauge
argument_list|()
block|,
name|m_callable
argument_list|()
block|,
name|m_metric
argument_list|()
block|{}
name|Measurement
argument_list|(
argument|Callable callable
argument_list|,
argument|const char *name
argument_list|,
argument|const char *desc
argument_list|)
operator|:
name|m_gauge
argument_list|()
block|,
name|m_callable
argument_list|(
name|callable
argument_list|)
block|,
name|m_metric
argument_list|(
argument|Metric<typename GaugeType::ValueType>(name, desc)
argument_list|)
block|{}
name|Measurement
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|desc
argument_list|)
operator|:
name|m_gauge
argument_list|()
block|,
name|m_callable
argument_list|()
block|,
name|m_metric
argument_list|(
argument|Metric<typename GaugeType::ValueType>(name, desc)
argument_list|)
block|{}
name|template
operator|<
name|typename
name|GaugeType_Rhs
block|,
name|typename
name|Callable_Rhs
operator|>
name|Measurement
argument_list|(
specifier|const
name|Measurement
operator|<
name|GaugeType_Rhs
argument_list|,
name|Callable_Rhs
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|m_gauge
argument_list|(
name|rhs
operator|.
name|GetGauge
argument_list|()
argument_list|)
block|,
name|m_callable
argument_list|(
name|rhs
operator|.
name|GetCallable
argument_list|()
argument_list|)
block|,
name|m_metric
argument_list|(
argument|rhs.GetMetric()
argument_list|)
block|{}
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|void
name|operator
argument_list|()
operator|(
name|Args
operator|...
name|args
operator|)
block|{
name|m_gauge
operator|.
name|Start
argument_list|()
block|;
name|m_callable
argument_list|(
name|args
operator|...
argument_list|)
block|;
name|m_metric
operator|.
name|Append
argument_list|(
name|m_gauge
operator|.
name|Stop
argument_list|()
argument_list|)
block|;   }
name|virtual
specifier|const
name|Callable
operator|&
name|GetCallable
argument_list|()
specifier|const
block|{
return|return
name|m_callable
return|;
block|}
name|virtual
specifier|const
name|GaugeType
operator|&
name|GetGauge
argument_list|()
specifier|const
block|{
return|return
name|m_gauge
return|;
block|}
name|virtual
specifier|const
name|Metric
operator|<
name|typename
name|GaugeType
operator|::
name|ValueType
operator|>
operator|&
name|GetMetric
argument_list|()
specifier|const
block|{
return|return
name|m_metric
return|;
block|}
name|void
name|Start
argument_list|()
block|{
name|m_gauge
operator|.
name|Start
argument_list|()
block|; }
name|typename
name|GaugeType
operator|::
name|ValueType
name|Stop
argument_list|()
block|{
name|auto
name|value
operator|=
name|m_gauge
operator|.
name|Stop
argument_list|()
block|;
name|m_metric
operator|.
name|Append
argument_list|(
name|value
argument_list|)
block|;
return|return
name|value
return|;
block|}
name|void
name|WriteStartValue
argument_list|(
argument|Results&results
argument_list|)
block|{
name|auto
name|metric
operator|=
name|GetMetric
argument_list|()
block|;
name|results
operator|.
name|GetDictionary
argument_list|()
operator|.
name|Add
argument_list|(
argument|metric.GetName()
argument_list|,
argument|metric.GetDescription()
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(             NULL, metric.GetStartValue())
argument_list|)
block|;   }
name|void
name|WriteStopValue
argument_list|(
argument|Results&results
argument_list|)
block|{
name|auto
name|metric
operator|=
name|GetMetric
argument_list|()
block|;
name|results
operator|.
name|GetDictionary
argument_list|()
operator|.
name|Add
argument_list|(
argument|metric.GetName()
argument_list|,
argument|metric.GetDescription()
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(             NULL, metric.GetStopValue())
argument_list|)
block|;   }
name|void
name|WriteAverageValue
argument_list|(
argument|Results&results
argument_list|)
block|{
name|auto
name|metric
operator|=
name|GetMetric
argument_list|()
block|;
name|results
operator|.
name|GetDictionary
argument_list|()
operator|.
name|Add
argument_list|(
argument|metric.GetName()
argument_list|,
argument|metric.GetDescription()
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(             NULL, metric.GetAverage())
argument_list|)
block|;   }
name|void
name|WriteAverageAndStandardDeviation
argument_list|(
argument|Results&results
argument_list|)
block|{
name|auto
name|metric
operator|=
name|GetMetric
argument_list|()
block|;
name|auto
name|dictionary
operator|=
operator|(
name|Results
operator|::
name|Dictionary
operator|*
operator|)
name|results
operator|.
name|GetDictionary
argument_list|()
operator|.
name|Add
argument_list|(
argument|metric.GetName()
argument_list|,
argument|metric.GetDescription()
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(                      NULL, metric.GetAverage())
argument_list|)
operator|.
name|get
argument_list|()
block|;
if|if
condition|(
name|dictionary
condition|)
block|{
name|dictionary
operator|->
name|Add
argument_list|(
literal|"stddev"
argument_list|,
argument|NULL
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(                           NULL, metric.GetStandardDeviation())
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|WriteStandardDeviation
argument_list|(
argument|Results&results
argument_list|)
block|{
name|auto
name|metric
operator|=
name|GetMetric
argument_list|()
block|;
name|results
operator|.
name|GetDictionary
argument_list|()
operator|.
name|Add
argument_list|(
argument|metric.GetName()
argument_list|,
argument|metric.GetDescription()
argument_list|,
argument|lldb_perf::GetResult<typename GaugeType::ValueType>(             NULL, metric.GetStandardDeviation())
argument_list|)
block|;   }
name|protected
operator|:
name|GaugeType
name|m_gauge
block|;
name|Callable
name|m_callable
block|;
name|Metric
operator|<
name|typename
name|GaugeType
operator|::
name|ValueType
operator|>
name|m_metric
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Callable
operator|>
name|class
name|TimeMeasurement
operator|:
name|public
name|Measurement
operator|<
name|TimeGauge
operator|,
name|Callable
operator|>
block|{
name|public
operator|:
name|TimeMeasurement
argument_list|()
operator|:
name|Measurement
operator|<
name|TimeGauge
block|,
name|Callable
operator|>
operator|(
operator|)
block|{}
name|TimeMeasurement
argument_list|(
argument|Callable callable
argument_list|,
argument|const char *name = NULL
argument_list|,
argument|const char *descr = NULL
argument_list|)
operator|:
name|Measurement
operator|<
name|TimeGauge
block|,
name|Callable
operator|>
operator|(
name|callable
operator|,
name|name
operator|,
name|descr
operator|)
block|{}
name|template
operator|<
name|typename
name|Callable_Rhs
operator|>
name|TimeMeasurement
argument_list|(
specifier|const
name|TimeMeasurement
operator|<
name|Callable_Rhs
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|Measurement
operator|<
name|TimeGauge
block|,
name|Callable
operator|>
operator|(
name|rhs
operator|)
block|{}
name|template
operator|<
name|typename
name|GaugeType_Rhs
block|,
name|typename
name|Callable_Rhs
operator|>
name|TimeMeasurement
argument_list|(
specifier|const
name|Measurement
operator|<
name|GaugeType_Rhs
argument_list|,
name|Callable_Rhs
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|Measurement
operator|<
name|GaugeType_Rhs
block|,
name|Callable_Rhs
operator|>
operator|(
name|rhs
operator|)
block|{}
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|void
name|operator
argument_list|()
operator|(
name|Args
operator|...
name|args
operator|)
block|{
name|Measurement
operator|<
name|TimeGauge
block|,
name|Callable
operator|>
operator|::
name|operator
argument_list|()
argument_list|(
name|args
operator|...
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|Callable
operator|>
name|class
name|MemoryMeasurement
operator|:
name|public
name|Measurement
operator|<
name|MemoryGauge
operator|,
name|Callable
operator|>
block|{
name|public
operator|:
name|MemoryMeasurement
argument_list|()
operator|:
name|Measurement
operator|<
name|MemoryGauge
block|,
name|Callable
operator|>
operator|(
operator|)
block|{}
name|MemoryMeasurement
argument_list|(
argument|Callable callable
argument_list|,
argument|const char *name
argument_list|,
argument|const char *descr
argument_list|)
operator|:
name|Measurement
operator|<
name|MemoryGauge
block|,
name|Callable
operator|>
operator|(
name|callable
operator|,
name|name
operator|,
name|descr
operator|)
block|{}
name|MemoryMeasurement
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|descr
argument_list|)
operator|:
name|Measurement
operator|<
name|MemoryGauge
block|,
name|Callable
operator|>
operator|(
name|name
operator|,
name|descr
operator|)
block|{}
name|template
operator|<
name|typename
name|Callable_Rhs
operator|>
name|MemoryMeasurement
argument_list|(
specifier|const
name|MemoryMeasurement
operator|<
name|Callable_Rhs
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|Measurement
operator|<
name|MemoryGauge
block|,
name|Callable
operator|>
operator|(
name|rhs
operator|)
block|{}
name|template
operator|<
name|typename
name|GaugeType_Rhs
block|,
name|typename
name|Callable_Rhs
operator|>
name|MemoryMeasurement
argument_list|(
specifier|const
name|Measurement
operator|<
name|GaugeType_Rhs
argument_list|,
name|Callable_Rhs
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|Measurement
operator|<
name|GaugeType_Rhs
block|,
name|Callable_Rhs
operator|>
operator|(
name|rhs
operator|)
block|{}
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|void
name|operator
argument_list|()
operator|(
name|Args
operator|...
name|args
operator|)
block|{
name|Measurement
operator|<
name|MemoryGauge
block|,
name|Callable
operator|>
operator|::
name|operator
argument_list|()
argument_list|(
name|args
operator|...
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(__PerfTestDriver__Measurement__) */
end_comment

end_unit

