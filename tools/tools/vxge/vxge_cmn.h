begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VXGE_CMN_H_
end_ifndef

begin_define
define|#
directive|define
name|_VXGE_CMN_H_
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include

begin_include
include|#
directive|include
file|<net/if.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include

begin_include
include|#
directive|include
file|<fcntl.h>
end_include

begin_if
if|#
directive|if
name|BYTE_ORDER
operator|==
name|BIG_ENDIAN
end_if

begin_define
define|#
directive|define
name|VXGE_OS_HOST_BIG_ENDIAN
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VXGE_OS_HOST_LITTLE_ENDIAN
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|VXGE_OS_HOST_BIG_ENDIAN
argument_list|)
end_if

begin_define
define|#
directive|define
name|GET_OFFSET_STATS
parameter_list|(
name|index
parameter_list|)
value|statsInfo[(index)].be_offset
end_define

begin_define
define|#
directive|define
name|GET_OFFSET_PCICONF
parameter_list|(
name|index
parameter_list|)
value|pciconfInfo[(index)].be_offset
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|GET_OFFSET_STATS
parameter_list|(
name|index
parameter_list|)
value|statsInfo[(index)].le_offset
end_define

begin_define
define|#
directive|define
name|GET_OFFSET_PCICONF
parameter_list|(
name|index
parameter_list|)
value|pciconfInfo[(index)].le_offset
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|vxge_mem_free
parameter_list|(
name|x
parameter_list|)
define|\
value|if (NULL != x) { free(x); x = NULL; }
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|u8
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|u16
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|u32
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|u64
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|u_long
name|ulong_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|_vxge_query_device_info_e
block|{
name|VXGE_GET_PCI_CONF
init|=
literal|100
block|,
name|VXGE_GET_MRPCIM_STATS
init|=
literal|101
block|,
name|VXGE_GET_DEVICE_STATS
init|=
literal|102
block|,
name|VXGE_GET_DEVICE_HWINFO
init|=
literal|103
block|,
name|VXGE_GET_DRIVER_STATS
init|=
literal|104
block|,
name|VXGE_GET_INTR_STATS
init|=
literal|105
block|,
name|VXGE_GET_VERSION
init|=
literal|106
block|,
name|VXGE_GET_TCODE
init|=
literal|107
block|,
name|VXGE_GET_VPATH_COUNT
init|=
literal|108
block|,
name|VXGE_GET_BANDWIDTH
init|=
literal|109
block|,
name|VXGE_SET_BANDWIDTH
init|=
literal|110
block|,
name|VXGE_GET_PORT_MODE
init|=
literal|111
block|,
name|VXGE_SET_PORT_MODE
init|=
literal|112
block|}
name|vxge_query_device_info_e
typedef|;
end_typedef

begin_comment
comment|/* Register type enumaration */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|vxge_hal_mgmt_reg_type_e
block|{
name|vxge_hal_mgmt_reg_type_legacy
init|=
literal|0
block|,
name|vxge_hal_mgmt_reg_type_toc
init|=
literal|1
block|,
name|vxge_hal_mgmt_reg_type_common
init|=
literal|2
block|,
name|vxge_hal_mgmt_reg_type_memrepair
init|=
literal|3
block|,
name|vxge_hal_mgmt_reg_type_pcicfgmgmt
init|=
literal|4
block|,
name|vxge_hal_mgmt_reg_type_mrpcim
init|=
literal|5
block|,
name|vxge_hal_mgmt_reg_type_srpcim
init|=
literal|6
block|,
name|vxge_hal_mgmt_reg_type_vpmgmt
init|=
literal|7
block|,
name|vxge_hal_mgmt_reg_type_vpath
init|=
literal|8
block|}
name|vxge_hal_mgmt_reg_type_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|vxge_hal_xmac_nwif_dp_mode
block|{
name|VXGE_HAL_DP_NP_MODE_DEFAULT
block|,
name|VXGE_HAL_DP_NP_MODE_LINK_AGGR
block|,
name|VXGE_HAL_DP_NP_MODE_ACTIVE_PASSIVE
block|,
name|VXGE_HAL_DP_NP_MODE_SINGLE_PORT
block|,
name|VXGE_HAL_DP_NP_MODE_DUAL_PORT
block|,
name|VXGE_HAL_DP_NP_MODE_DISABLE_PORT_MGMT
block|}
name|vxge_hal_xmac_nwif_dp_mode
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|vxge_hal_xmac_nwif_behavior_on_failure
block|{
name|VXGE_HAL_XMAC_NWIF_OnFailure_NoMove
block|,
name|VXGE_HAL_XMAC_NWIF_OnFailure_OtherPort
block|,
name|VXGE_HAL_XMAC_NWIF_OnFailure_OtherPortBackOnRestore
block|}
name|vxge_hal_xmac_nwif_behavior_on_failure
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_LEGACY
value|7
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_TOC
value|11
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_COMMON
value|65
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_PCICFGMGMT
value|3
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_MRPCIM
value|1370
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_SRPCIM
value|48
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_VPMGMT
value|29
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_REG_COUNT_VPATH
value|139
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_STATS_COUNT_DRIVER
value|17
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_STATS_COUNT
value|160
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_STATS_COUNT_SW
value|54
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MGMT_STATS_COUNT_EXTENDED
value|56
end_define

begin_define
define|#
directive|define
name|VXGE_MAX_BANDWIDTH
value|10000
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_MAX_VIRTUAL_PATHS
value|17
end_define

begin_define
define|#
directive|define
name|ETH_LENGTH_OF_ADDRESS
value|6
end_define

begin_typedef
typedef|typedef
name|char
name|macaddr
index|[
name|ETH_LENGTH_OF_ADDRESS
index|]
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VXGE_PRINT
parameter_list|(
name|fd
parameter_list|,
name|fmt
modifier|...
parameter_list|)
value|{	\ 	fprintf(fd, fmt);		\ 	fprintf(fd, "\n");		\ 	printf(fmt);			\ 	printf("\n");			\ }
end_define

begin_comment
comment|/* Read& Write	Register */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_vxge_register_info_t
block|{
name|u64
name|value
decl_stmt|;
name|u64
name|offset
decl_stmt|;
name|char
name|option
index|[
literal|2
index|]
decl_stmt|;
block|}
name|vxge_register_info_t
typedef|;
end_typedef

begin_comment
comment|/* Register Dump */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_vxge_pci_bar0_t
block|{
name|char
name|name
index|[
literal|64
index|]
decl_stmt|;
name|u64
name|offset
decl_stmt|;
name|u32
name|size
decl_stmt|;
block|}
name|vxge_pci_bar0_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_stats_driver_info_t
block|{
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|u64
name|value
decl_stmt|;
block|}
name|vxge_stats_driver_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_hal_device_pmd_info_t
block|{
name|u32
name|type
decl_stmt|;
name|u32
name|unused
decl_stmt|;
name|char
name|vendor
index|[
literal|24
index|]
decl_stmt|;
name|char
name|part_num
index|[
literal|24
index|]
decl_stmt|;
name|char
name|ser_num
index|[
literal|24
index|]
decl_stmt|;
block|}
name|vxge_hal_device_pmd_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_hal_device_version_t
block|{
name|u32
name|major
decl_stmt|;
name|u32
name|minor
decl_stmt|;
name|u32
name|build
decl_stmt|;
name|char
name|version
index|[
literal|32
index|]
decl_stmt|;
block|}
name|vxge_hal_device_version_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_hal_device_date_t
block|{
name|u32
name|day
decl_stmt|;
name|u32
name|month
decl_stmt|;
name|u32
name|year
decl_stmt|;
name|char
name|date
index|[
literal|16
index|]
decl_stmt|;
block|}
name|vxge_hal_device_date_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_hal_device_hw_info_t
block|{
name|u32
name|host_type
decl_stmt|;
name|u64
name|function_mode
decl_stmt|;
name|u32
name|func_id
decl_stmt|;
name|u64
name|vpath_mask
decl_stmt|;
name|vxge_hal_device_version_t
name|fw_version
decl_stmt|;
name|vxge_hal_device_date_t
name|fw_date
decl_stmt|;
name|vxge_hal_device_version_t
name|flash_version
decl_stmt|;
name|vxge_hal_device_date_t
name|flash_date
decl_stmt|;
name|char
name|serial_number
index|[
literal|24
index|]
decl_stmt|;
name|char
name|part_number
index|[
literal|24
index|]
decl_stmt|;
name|char
name|product_description
index|[
literal|72
index|]
decl_stmt|;
name|u32
name|unused
decl_stmt|;
name|u32
name|ports
decl_stmt|;
name|vxge_hal_device_pmd_info_t
name|pmd_port0
decl_stmt|;
name|vxge_hal_device_pmd_info_t
name|pmd_port1
decl_stmt|;
name|macaddr
name|mac_addrs
index|[
name|VXGE_HAL_MAX_VIRTUAL_PATHS
index|]
decl_stmt|;
name|macaddr
name|mac_addr_masks
index|[
name|VXGE_HAL_MAX_VIRTUAL_PATHS
index|]
decl_stmt|;
block|}
name|vxge_hal_device_hw_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_device_hw_info_t
block|{
name|vxge_hal_device_hw_info_t
name|hw_info
decl_stmt|;
name|u32
name|port_mode
decl_stmt|;
name|u32
name|port_failure
decl_stmt|;
block|}
name|vxge_device_hw_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_bw_info_t
block|{
name|char
name|query
decl_stmt|;
name|u64
name|func_id
decl_stmt|;
name|int
name|priority
decl_stmt|;
name|int
name|bandwidth
decl_stmt|;
block|}
name|vxge_bw_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_vxge_port_info_t
block|{
name|char
name|query
decl_stmt|;
name|int
name|port_mode
decl_stmt|;
name|int
name|port_failure
decl_stmt|;
block|}
name|vxge_port_info_t
typedef|;
end_typedef

begin_function_decl
name|u32
name|vxge_get_num_vpath
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|vxge_null_terminate
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _VXGE_CMN_H_ */
end_comment

end_unit

