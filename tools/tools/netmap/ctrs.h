begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|CTRS_H_
end_ifndef

begin_define
define|#
directive|define
name|CTRS_H_
end_define

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_comment
comment|/* counters to accumulate statistics */
end_comment

begin_struct
struct|struct
name|my_ctrs
block|{
name|uint64_t
name|pkts
decl_stmt|,
name|bytes
decl_stmt|,
name|events
decl_stmt|,
name|drop
decl_stmt|;
name|uint64_t
name|min_space
decl_stmt|;
name|struct
name|timeval
name|t
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* very crude code to print a number in normalized form.  * Caller has to make sure that the buffer is large enough.  */
end_comment

begin_function
specifier|static
specifier|const
name|char
modifier|*
name|norm2
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|double
name|val
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|)
block|{
name|char
modifier|*
name|units
index|[]
init|=
block|{
literal|""
block|,
literal|"K"
block|,
literal|"M"
block|,
literal|"G"
block|,
literal|"T"
block|}
decl_stmt|;
name|u_int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|val
operator|>=
literal|1000
operator|&&
name|i
operator|<
sizeof|sizeof
argument_list|(
name|units
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|val
operator|/=
literal|1000
expr_stmt|;
name|sprintf
argument_list|(
name|buf
argument_list|,
name|fmt
argument_list|,
name|val
argument_list|,
name|units
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
specifier|const
name|char
modifier|*
name|norm
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|double
name|val
parameter_list|)
block|{
return|return
name|norm2
argument_list|(
name|buf
argument_list|,
name|val
argument_list|,
literal|"%.3f %s"
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|timespec_ge
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
name|a
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|->
name|tv_sec
operator|>
name|b
operator|->
name|tv_sec
condition|)
return|return
operator|(
literal|1
operator|)
return|;
if|if
condition|(
name|a
operator|->
name|tv_sec
operator|<
name|b
operator|->
name|tv_sec
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
name|a
operator|->
name|tv_nsec
operator|>=
name|b
operator|->
name|tv_nsec
condition|)
return|return
operator|(
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|timespec
name|timeval2spec
argument_list|(
argument|const struct timeval *a
argument_list|)
block|{ 	struct
name|timespec
name|ts
operator|=
block|{
operator|.
name|tv_sec
operator|=
name|a
operator|->
name|tv_sec
block|,
operator|.
name|tv_nsec
operator|=
name|a
operator|->
name|tv_usec
operator|*
literal|1000
block|}
block|;
return|return
name|ts
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|timeval
name|timespec2val
argument_list|(
argument|const struct timespec *a
argument_list|)
block|{ 	struct
name|timeval
name|tv
operator|=
block|{
operator|.
name|tv_sec
operator|=
name|a
operator|->
name|tv_sec
block|,
operator|.
name|tv_usec
operator|=
name|a
operator|->
name|tv_nsec
operator|/
literal|1000
block|}
block|;
return|return
name|tv
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|timespec
name|timespec_add
argument_list|(
argument|struct timespec a
argument_list|,
argument|struct timespec b
argument_list|)
block|{ 	struct
name|timespec
name|ret
operator|=
block|{
name|a
operator|.
name|tv_sec
operator|+
name|b
operator|.
name|tv_sec
block|,
name|a
operator|.
name|tv_nsec
operator|+
name|b
operator|.
name|tv_nsec
block|}
block|;
if|if
condition|(
name|ret
operator|.
name|tv_nsec
operator|>=
literal|1000000000
condition|)
block|{
name|ret
operator|.
name|tv_sec
operator|++
expr_stmt|;
name|ret
operator|.
name|tv_nsec
operator|-=
literal|1000000000
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|ret
return|;
end_return

begin_function
unit|}  static
name|__inline
name|struct
name|timespec
name|timespec_sub
parameter_list|(
name|struct
name|timespec
name|a
parameter_list|,
name|struct
name|timespec
name|b
parameter_list|)
block|{
name|struct
name|timespec
name|ret
init|=
block|{
name|a
operator|.
name|tv_sec
operator|-
name|b
operator|.
name|tv_sec
block|,
name|a
operator|.
name|tv_nsec
operator|-
name|b
operator|.
name|tv_nsec
block|}
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|tv_nsec
operator|<
literal|0
condition|)
block|{
name|ret
operator|.
name|tv_sec
operator|--
expr_stmt|;
name|ret
operator|.
name|tv_nsec
operator|+=
literal|1000000000
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
name|uint64_t
name|wait_for_next_report
parameter_list|(
name|struct
name|timeval
modifier|*
name|prev
parameter_list|,
name|struct
name|timeval
modifier|*
name|cur
parameter_list|,
name|int
name|report_interval
parameter_list|)
block|{
name|struct
name|timeval
name|delta
decl_stmt|;
name|delta
operator|.
name|tv_sec
operator|=
name|report_interval
operator|/
literal|1000
expr_stmt|;
name|delta
operator|.
name|tv_usec
operator|=
operator|(
name|report_interval
operator|%
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
if|if
condition|(
name|select
argument_list|(
literal|0
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
name|NULL
argument_list|,
operator|&
name|delta
argument_list|)
operator|<
literal|0
operator|&&
name|errno
operator|!=
name|EINTR
condition|)
block|{
name|perror
argument_list|(
literal|"select"
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
block|}
name|gettimeofday
argument_list|(
name|cur
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|timersub
argument_list|(
name|cur
argument_list|,
name|prev
argument_list|,
operator|&
name|delta
argument_list|)
expr_stmt|;
return|return
name|delta
operator|.
name|tv_sec
operator|*
literal|1000000
operator|+
name|delta
operator|.
name|tv_usec
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CTRS_H_ */
end_comment

end_unit

