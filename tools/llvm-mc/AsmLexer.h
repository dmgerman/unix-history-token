begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- AsmLexer.h - Lexer for Assembly Files --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class declares the lexer for assembly files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ASMLEXER_H
end_ifndef

begin_define
define|#
directive|define
name|ASMLEXER_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|SourceMgr
decl_stmt|;
name|class
name|SMLoc
decl_stmt|;
name|namespace
name|asmtok
block|{
enum|enum
name|TokKind
block|{
comment|// Markers
name|Eof
block|,
name|Error
block|,
comment|// String values.
name|Identifier
block|,
name|Register
block|,
name|String
block|,
comment|// Integer values.
name|IntVal
block|,
comment|// No-value.
name|EndOfStatement
block|,
name|Colon
block|,
name|Plus
block|,
name|Minus
block|,
name|Tilde
block|,
name|Slash
block|,
comment|// '/'
name|LParen
block|,
name|RParen
block|,
name|Star
block|,
name|Comma
block|,
name|Dollar
block|,
name|Equal
block|,
name|EqualEqual
block|,
name|Pipe
block|,
name|PipePipe
block|,
name|Caret
block|,
name|Amp
block|,
name|AmpAmp
block|,
name|Exclaim
block|,
name|ExclaimEqual
block|,
name|Percent
block|,
name|Less
block|,
name|LessEqual
block|,
name|LessLess
block|,
name|LessGreater
block|,
name|Greater
block|,
name|GreaterEqual
block|,
name|GreaterGreater
block|}
enum|;
block|}
comment|/// AsmLexer - Lexer class for assembly files.
name|class
name|AsmLexer
block|{
name|SourceMgr
modifier|&
name|SrcMgr
decl_stmt|;
specifier|const
name|char
modifier|*
name|CurPtr
decl_stmt|;
specifier|const
name|MemoryBuffer
modifier|*
name|CurBuf
decl_stmt|;
comment|// A llvm::StringSet<>, which provides uniqued and null-terminated strings.
name|void
modifier|*
name|TheStringSet
decl_stmt|;
comment|// Information about the current token.
specifier|const
name|char
modifier|*
name|TokStart
decl_stmt|;
name|asmtok
operator|::
name|TokKind
name|CurKind
expr_stmt|;
specifier|const
name|char
modifier|*
name|CurStrVal
decl_stmt|;
comment|// This is valid for Identifier.
name|int64_t
name|CurIntVal
decl_stmt|;
comment|/// CurBuffer - This is the current buffer index we're lexing from as managed
comment|/// by the SourceMgr object.
name|int
name|CurBuffer
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|AsmLexer
operator|&
operator|)
decl_stmt|;
comment|// DO NOT IMPLEMENT
name|AsmLexer
argument_list|(
specifier|const
name|AsmLexer
operator|&
argument_list|)
expr_stmt|;
comment|// DO NOT IMPLEMENT
name|public
label|:
name|AsmLexer
argument_list|(
name|SourceMgr
operator|&
name|SrcMgr
argument_list|)
expr_stmt|;
operator|~
name|AsmLexer
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|Lex
argument_list|()
block|{
return|return
name|CurKind
operator|=
name|LexToken
argument_list|()
return|;
block|}
name|asmtok
operator|::
name|TokKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|CurKind
return|;
block|}
name|bool
name|is
argument_list|(
name|asmtok
operator|::
name|TokKind
name|K
argument_list|)
decl|const
block|{
return|return
name|CurKind
operator|==
name|K
return|;
block|}
name|bool
name|isNot
argument_list|(
name|asmtok
operator|::
name|TokKind
name|K
argument_list|)
decl|const
block|{
return|return
name|CurKind
operator|!=
name|K
return|;
block|}
specifier|const
name|char
operator|*
name|getCurStrVal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|CurKind
operator|==
name|asmtok
operator|::
name|Identifier
operator|||
name|CurKind
operator|==
name|asmtok
operator|::
name|Register
operator|||
name|CurKind
operator|==
name|asmtok
operator|::
name|String
operator|)
operator|&&
literal|"This token doesn't have a string value"
argument_list|)
block|;
return|return
name|CurStrVal
return|;
block|}
name|int64_t
name|getCurIntVal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|CurKind
operator|==
name|asmtok
operator|::
name|IntVal
operator|&&
literal|"This token isn't an integer"
argument_list|)
block|;
return|return
name|CurIntVal
return|;
block|}
name|SMLoc
name|getLoc
argument_list|()
specifier|const
expr_stmt|;
name|void
name|PrintMessage
argument_list|(
name|SMLoc
name|Loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Msg
argument_list|,
specifier|const
name|char
operator|*
name|Type
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|int
name|getNextChar
parameter_list|()
function_decl|;
name|asmtok
operator|::
name|TokKind
name|ReturnError
argument_list|(
specifier|const
name|char
operator|*
name|Loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Msg
argument_list|)
expr_stmt|;
comment|/// LexToken - Read the next token and return its code.
name|asmtok
operator|::
name|TokKind
name|LexToken
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexIdentifier
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexPercent
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexSlash
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexLineComment
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexDigit
argument_list|()
expr_stmt|;
name|asmtok
operator|::
name|TokKind
name|LexQuote
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

