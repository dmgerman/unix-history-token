begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-LTOModule.h - LLVM Link Time Optimizer ------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the LTOModule class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LTO_MODULE_H
end_ifndef

begin_define
define|#
directive|define
name|LTO_MODULE_H
end_define

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/lto.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// forward references to llvm classes
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Mangler
decl_stmt|;
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|Function
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|//
end_comment

begin_comment
comment|// C++ class which implements the opaque lto_module_t
end_comment

begin_comment
comment|//
end_comment

begin_struct
struct|struct
name|LTOModule
block|{
specifier|static
name|bool
name|isBitcodeFile
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isBitcodeFile
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isBitcodeFileForTarget
parameter_list|(
specifier|const
name|void
modifier|*
name|mem
parameter_list|,
name|size_t
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|triplePrefix
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isBitcodeFileForTarget
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|triplePrefix
parameter_list|)
function_decl|;
specifier|static
name|LTOModule
modifier|*
name|makeLTOModule
argument_list|(
specifier|const
name|char
operator|*
name|path
argument_list|,
name|std
operator|::
name|string
operator|&
name|errMsg
argument_list|)
decl_stmt|;
specifier|static
name|LTOModule
modifier|*
name|makeLTOModule
argument_list|(
name|int
name|fd
argument_list|,
specifier|const
name|char
operator|*
name|path
argument_list|,
name|size_t
name|size
argument_list|,
name|std
operator|::
name|string
operator|&
name|errMsg
argument_list|)
decl_stmt|;
specifier|static
name|LTOModule
modifier|*
name|makeLTOModule
argument_list|(
name|int
name|fd
argument_list|,
specifier|const
name|char
operator|*
name|path
argument_list|,
name|size_t
name|file_size
argument_list|,
name|size_t
name|map_size
argument_list|,
name|off_t
name|offset
argument_list|,
name|std
operator|::
name|string
operator|&
name|errMsg
argument_list|)
decl_stmt|;
specifier|static
name|LTOModule
modifier|*
name|makeLTOModule
argument_list|(
specifier|const
name|void
operator|*
name|mem
argument_list|,
name|size_t
name|length
argument_list|,
name|std
operator|::
name|string
operator|&
name|errMsg
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|getTargetTriple
parameter_list|()
function_decl|;
name|void
name|setTargetTriple
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|uint32_t
name|getSymbolCount
parameter_list|()
function_decl|;
name|lto_symbol_attributes
name|getSymbolAttributes
parameter_list|(
name|uint32_t
name|index
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|getSymbolName
parameter_list|(
name|uint32_t
name|index
parameter_list|)
function_decl|;
name|llvm
operator|::
name|Module
operator|*
name|getLLVVMModule
argument_list|()
block|{
return|return
name|_module
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
operator|&
name|getAsmUndefinedRefs
argument_list|()
block|{
return|return
name|_asm_undefines
return|;
block|}
name|private
label|:
name|LTOModule
argument_list|(
name|llvm
operator|::
name|Module
operator|*
name|m
argument_list|,
name|llvm
operator|::
name|TargetMachine
operator|*
name|t
argument_list|)
expr_stmt|;
name|bool
name|ParseSymbols
parameter_list|()
function_decl|;
name|void
name|addDefinedSymbol
argument_list|(
name|llvm
operator|::
name|GlobalValue
operator|*
name|def
argument_list|,
name|llvm
operator|::
name|Mangler
operator|&
name|mangler
argument_list|,
name|bool
name|isFunction
argument_list|)
decl_stmt|;
name|void
name|addPotentialUndefinedSymbol
argument_list|(
name|llvm
operator|::
name|GlobalValue
operator|*
name|decl
argument_list|,
name|llvm
operator|::
name|Mangler
operator|&
name|mangler
argument_list|)
decl_stmt|;
name|void
name|addDefinedFunctionSymbol
argument_list|(
name|llvm
operator|::
name|Function
operator|*
name|f
argument_list|,
name|llvm
operator|::
name|Mangler
operator|&
name|mangler
argument_list|)
decl_stmt|;
name|void
name|addDefinedDataSymbol
argument_list|(
name|llvm
operator|::
name|GlobalValue
operator|*
name|v
argument_list|,
name|llvm
operator|::
name|Mangler
operator|&
name|mangler
argument_list|)
decl_stmt|;
name|bool
name|addAsmGlobalSymbols
argument_list|(
name|llvm
operator|::
name|MCContext
operator|&
name|Context
argument_list|)
decl_stmt|;
name|void
name|addAsmGlobalSymbol
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|lto_symbol_attributes
name|scope
parameter_list|)
function_decl|;
name|void
name|addAsmGlobalSymbolUndef
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|addObjCClass
argument_list|(
name|llvm
operator|::
name|GlobalVariable
operator|*
name|clgv
argument_list|)
decl_stmt|;
name|void
name|addObjCCategory
argument_list|(
name|llvm
operator|::
name|GlobalVariable
operator|*
name|clgv
argument_list|)
decl_stmt|;
name|void
name|addObjCClassRef
argument_list|(
name|llvm
operator|::
name|GlobalVariable
operator|*
name|clgv
argument_list|)
decl_stmt|;
name|bool
name|objcClassNameFromExpression
argument_list|(
name|llvm
operator|::
name|Constant
operator|*
name|c
argument_list|,
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|isTargetMatch
argument_list|(
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|memBuffer
argument_list|,
specifier|const
name|char
operator|*
name|triplePrefix
argument_list|)
decl_stmt|;
specifier|static
name|LTOModule
modifier|*
name|makeLTOModule
argument_list|(
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|buffer
argument_list|,
name|std
operator|::
name|string
operator|&
name|errMsg
argument_list|)
decl_stmt|;
specifier|static
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|makeBuffer
argument_list|(
argument|const void* mem
argument_list|,
argument|size_t length
argument_list|)
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|StringMap
operator|<
name|uint8_t
operator|>
name|StringSet
expr_stmt|;
struct|struct
name|NameAndAttributes
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|lto_symbol_attributes
name|attributes
decl_stmt|;
block|}
struct|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|llvm
operator|::
name|Module
operator|>
name|_module
expr_stmt|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|llvm
operator|::
name|TargetMachine
operator|>
name|_target
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|NameAndAttributes
operator|>
name|_symbols
expr_stmt|;
comment|// _defines and _undefines only needed to disambiguate tentative definitions
name|StringSet
name|_defines
decl_stmt|;
name|llvm
operator|::
name|StringMap
operator|<
name|NameAndAttributes
operator|>
name|_undefines
expr_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
name|_asm_undefines
expr_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LTO_MODULE_H
end_comment

end_unit

