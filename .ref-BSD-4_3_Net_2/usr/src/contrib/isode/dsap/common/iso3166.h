begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* iso3166.c - bitmap of ISO 3166 codes */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lint
end_ifndef

begin_comment
comment|/* static char *rcsid = "$Header: /f/osi/dsap/common/RCS/iso3166.h,v 7.2 91/02/22 09:19:27 mrose Interim $";  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*   * $Header: /f/osi/dsap/common/RCS/iso3166.h,v 7.2 91/02/22 09:19:27 mrose Interim $  *  *  * $Log:	iso3166.h,v $  * Revision 7.2  91/02/22  09:19:27  mrose  * Interim 6.8  *   * Revision 7.1  90/12/11  10:53:54  mrose  * lock-and-load  *   * Revision 7.0  90/12/10  14:26:03  mrose  * *** empty log message ***  *   */
end_comment

begin_comment
comment|/*  *				  NOTICE  *  *    Acquisition, use, and distribution of this module and related  *    materials are subject to the restrictions of a license agreement.  *    Consult the Preface in the User's Manual for the full terms of  *    this agreement.  *  */
end_comment

begin_comment
comment|/* LINTLIBRARY */
end_comment

begin_comment
comment|/* The idea for this comes from EWOS/EGDIR/90/156     The table below was automatically generated by "dsaconfig -c".  If the list    of 3166 codes change, re-run dsaconfig and update this file!  */
end_comment

begin_comment
comment|/* this macro assumes that bitno is already defined, and that chars are already    in upper-case. */
end_comment

begin_define
define|#
directive|define
name|is3166
parameter_list|(
name|cp
parameter_list|)
define|\
value|(bitno = (((((cp)[0]) - 'A')& 0xff) * 26) + ((((cp)[1]) - 'A')& 0xff), \ 	bits_3166[bitno>> 3]& (1<< (bitno % 8)))
end_define

begin_decl_stmt
specifier|static
name|unsigned
name|char
name|bits_3166
index|[
literal|85
index|]
init|=
block|{
literal|0x78
block|,
literal|0x69
block|,
literal|0x5f
block|,
literal|0xe8
block|,
literal|0xcf
block|,
literal|0xf9
block|,
literal|0x5d
block|,
literal|0xde
block|,
literal|0x67
block|,
literal|0x1b
block|,
literal|0x86
block|,
literal|0x15
block|,
literal|0x80
block|,
literal|0xc4
block|,
literal|0x00
block|,
literal|0x0c
block|,
literal|0x00
block|,
literal|0x5c
block|,
literal|0x09
block|,
literal|0xb0
block|,
literal|0x9a
block|,
literal|0xbb
block|,
literal|0x15
block|,
literal|0x00
block|,
literal|0x0d
block|,
literal|0x06
block|,
literal|0x18
block|,
literal|0x68
block|,
literal|0x0f
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x03
block|,
literal|0x00
block|,
literal|0x19
block|,
literal|0x2b
block|,
literal|0xd4
block|,
literal|0x41
block|,
literal|0x81
block|,
literal|0x45
block|,
literal|0xc5
block|,
literal|0xe8
block|,
literal|0xff
block|,
literal|0xd7
block|,
literal|0x25
block|,
literal|0x6b
block|,
literal|0x08
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0x40
block|,
literal|0x3c
block|,
literal|0x8f
block|,
literal|0x52
block|,
literal|0x01
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x01
block|,
literal|0xf1
block|,
literal|0xad
block|,
literal|0xa7
block|,
literal|0x33
block|,
literal|0x3b
block|,
literal|0xb9
block|,
literal|0x9a
block|,
literal|0x41
block|,
literal|0x10
block|,
literal|0x04
block|,
literal|0x55
block|,
literal|0x85
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x02
block|,
literal|0x40
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x00
block|,
literal|0x18
block|,
literal|0x00
block|,
literal|0x10
block|,
literal|0x04
block|,
literal|0x40
block|,
literal|0x08
block|,
literal|0x01
block|, }
decl_stmt|;
end_decl_stmt

end_unit

