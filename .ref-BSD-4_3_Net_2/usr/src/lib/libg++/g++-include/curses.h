begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1989 Free Software Foundation     written by Eric Newton (newton@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_comment
comment|/*  * Edited for compatablity with C++, 2/28/89<ecn>  * This file has all the /usr/include/curses.h info (with proper prototypes)  * used for the CursesWindow classes.  You may need to change this to be  * compatable with your curses implementation.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_curses_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_curses_h
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_extern
extern|extern
literal|"C"
block|{
ifndef|#
directive|ifndef
name|VMS
include|#
directive|include
file|<sgtty.h>
endif|#
directive|endif
comment|// protection against possibility that these are macros:
ifndef|#
directive|ifndef
name|stty
specifier|extern
name|int
name|stty
parameter_list|(
name|int
parameter_list|,
name|struct
name|sgttyb
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|gtty
specifier|extern
name|int
name|gtty
parameter_list|(
name|int
parameter_list|,
name|struct
name|sgttyb
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
end_extern

begin_typedef
typedef|typedef
name|char
name|cbool
typedef|;
end_typedef

begin_comment
comment|// curses explicitly declares bools as chars
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|hpux
argument_list|)
end_if

begin_enum
enum|enum
name|CursesStatus
block|{
name|ERR
init|=
operator|-
literal|1
block|,
name|OK
init|=
literal|0
block|}
enum|;
end_enum

begin_comment
comment|// curses lib uses define's
end_comment

begin_else
else|#
directive|else
end_else

begin_enum
enum|enum
name|CursesStatus
block|{
name|ERR
init|=
literal|0
block|,
name|OK
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|// curses lib uses define's
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  *  BSD'ish.  Warning!!  *  */
end_comment

begin_define
define|#
directive|define
name|_ENDLINE
value|001
end_define

begin_define
define|#
directive|define
name|_FULLWIN
value|002
end_define

begin_define
define|#
directive|define
name|_SCROLLWIN
value|004
end_define

begin_define
define|#
directive|define
name|_FLUSH
value|010
end_define

begin_define
define|#
directive|define
name|_FULLLINE
value|020
end_define

begin_define
define|#
directive|define
name|_IDLINE
value|040
end_define

begin_define
define|#
directive|define
name|_STANDOUT
value|0200
end_define

begin_define
define|#
directive|define
name|_NOCHANGE
value|-1
end_define

begin_define
define|#
directive|define
name|_puts
parameter_list|(
name|s
parameter_list|)
value|tputs(s, 0, _putchar)
end_define

begin_comment
comment|/*  * Capabilities from termcap  */
end_comment

begin_decl_stmt
specifier|extern
name|cbool
name|AM
decl_stmt|,
name|BS
decl_stmt|,
name|CA
decl_stmt|,
name|DA
decl_stmt|,
name|DB
decl_stmt|,
name|EO
decl_stmt|,
name|HC
decl_stmt|,
name|HZ
decl_stmt|,
name|IN
decl_stmt|,
name|MI
decl_stmt|,
name|MS
decl_stmt|,
name|NC
decl_stmt|,
name|NS
decl_stmt|,
name|OS
decl_stmt|,
name|UL
decl_stmt|,
name|XB
decl_stmt|,
name|XN
decl_stmt|,
name|XT
decl_stmt|,
name|XS
decl_stmt|,
name|XX
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|AL
decl_stmt|,
modifier|*
name|BC
decl_stmt|,
modifier|*
name|BT
decl_stmt|,
modifier|*
name|CD
decl_stmt|,
modifier|*
name|CE
decl_stmt|,
modifier|*
name|CL
decl_stmt|,
modifier|*
name|CM
decl_stmt|,
modifier|*
name|CR
decl_stmt|,
modifier|*
name|CS
decl_stmt|,
modifier|*
name|DC
decl_stmt|,
modifier|*
name|DL
decl_stmt|,
modifier|*
name|DM
decl_stmt|,
modifier|*
name|DO
decl_stmt|,
modifier|*
name|ED
decl_stmt|,
modifier|*
name|EI
decl_stmt|,
modifier|*
name|K0
decl_stmt|,
modifier|*
name|K1
decl_stmt|,
modifier|*
name|K2
decl_stmt|,
modifier|*
name|K3
decl_stmt|,
modifier|*
name|K4
decl_stmt|,
modifier|*
name|K5
decl_stmt|,
modifier|*
name|K6
decl_stmt|,
modifier|*
name|K7
decl_stmt|,
modifier|*
name|K8
decl_stmt|,
modifier|*
name|K9
decl_stmt|,
modifier|*
name|HO
decl_stmt|,
modifier|*
name|IC
decl_stmt|,
modifier|*
name|IM
decl_stmt|,
modifier|*
name|IP
decl_stmt|,
modifier|*
name|KD
decl_stmt|,
modifier|*
name|KE
decl_stmt|,
modifier|*
name|KH
decl_stmt|,
modifier|*
name|KL
decl_stmt|,
modifier|*
name|KR
decl_stmt|,
modifier|*
name|KS
decl_stmt|,
modifier|*
name|KU
decl_stmt|,
modifier|*
name|LL
decl_stmt|,
modifier|*
name|MA
decl_stmt|,
modifier|*
name|ND
decl_stmt|,
modifier|*
name|NL
decl_stmt|,
modifier|*
name|RC
decl_stmt|,
modifier|*
name|SC
decl_stmt|,
modifier|*
name|SE
decl_stmt|,
modifier|*
name|SF
decl_stmt|,
modifier|*
name|SO
decl_stmt|,
modifier|*
name|SR
decl_stmt|,
modifier|*
name|TA
decl_stmt|,
modifier|*
name|TE
decl_stmt|,
modifier|*
name|TI
decl_stmt|,
modifier|*
name|UC
decl_stmt|,
modifier|*
name|UE
decl_stmt|,
modifier|*
name|UP
decl_stmt|,
modifier|*
name|US
decl_stmt|,
modifier|*
name|VB
decl_stmt|,
modifier|*
name|VS
decl_stmt|,
modifier|*
name|VE
decl_stmt|,
modifier|*
name|AL_PARM
decl_stmt|,
modifier|*
name|DL_PARM
decl_stmt|,
modifier|*
name|UP_PARM
decl_stmt|,
modifier|*
name|DOWN_PARM
decl_stmt|,
modifier|*
name|LEFT_PARM
decl_stmt|,
modifier|*
name|RIGHT_PARM
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|PC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cbool
name|GT
decl_stmt|,
name|NONL
decl_stmt|,
name|UPPERCASE
decl_stmt|,
name|normtty
decl_stmt|,
name|_pfast
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|_win_st
block|{
ifdef|#
directive|ifdef
name|VMS
name|int
name|_cury
decl_stmt|,
name|_curx
decl_stmt|;
name|int
name|_maxy
decl_stmt|,
name|_maxx
decl_stmt|;
name|int
name|_begy
decl_stmt|,
name|_begx
decl_stmt|;
else|#
directive|else
name|short
name|_cury
decl_stmt|,
name|_curx
decl_stmt|;
name|short
name|_maxy
decl_stmt|,
name|_maxx
decl_stmt|;
name|short
name|_begy
decl_stmt|,
name|_begx
decl_stmt|;
endif|#
directive|endif
name|short
name|_flags
decl_stmt|;
ifndef|#
directive|ifndef
name|VMS
name|short
name|_ch_off
decl_stmt|;
endif|#
directive|endif
name|cbool
name|_clear
decl_stmt|;
name|cbool
name|_leave
decl_stmt|;
name|cbool
name|_scroll
decl_stmt|;
ifdef|#
directive|ifdef
name|VMS
name|cbool
name|_wrap
decl_stmt|;
endif|#
directive|endif
name|char
modifier|*
modifier|*
name|_y
decl_stmt|;
name|short
modifier|*
name|_firstch
decl_stmt|;
name|short
modifier|*
name|_lastch
decl_stmt|;
name|struct
name|_win_st
modifier|*
name|_nextp
decl_stmt|,
modifier|*
name|_orig
decl_stmt|;
ifdef|#
directive|ifdef
name|VMS
name|struct
name|_win_st
modifier|*
name|_parent
decl_stmt|,
modifier|*
name|_child
decl_stmt|;
name|int
name|_id
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WINDOW
value|struct _win_st
end_define

begin_decl_stmt
specifier|extern
name|cbool
name|My_term
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cbool
name|_echoit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cbool
name|_rawmode
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cbool
name|_endwin
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|Def_term
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|ttytype
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|LINES
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|COLS
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|_tty_ch
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|_res_flg
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|struct
name|sgttyb
name|SGTTY
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|SGTTY
name|_tty
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * standard curses functions.  *  */
end_comment

begin_extern
extern|extern
literal|"C"
block|{
specifier|extern
name|WINDOW
modifier|*
name|stdscr
decl_stmt|;
specifier|extern
name|WINDOW
modifier|*
name|curscr
decl_stmt|;
name|WINDOW
modifier|*
name|newwin
parameter_list|(
name|int
name|lines
parameter_list|,
name|int
name|cols
parameter_list|,
name|int
name|sy
parameter_list|,
name|int
name|sx
parameter_list|)
function_decl|;
name|WINDOW
modifier|*
name|subwin
parameter_list|(
name|WINDOW
modifier|*
name|w
parameter_list|,
name|int
name|lines
parameter_list|,
name|int
name|cols
parameter_list|,
name|int
name|sy
parameter_list|,
name|int
name|sx
parameter_list|)
function_decl|;
name|WINDOW
modifier|*
name|initscr
parameter_list|()
function_decl|;
name|int
name|box
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|char
parameter_list|,
name|char
parameter_list|)
function_decl|;
name|int
name|delwin
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|mvcur
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|overlay
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|overwrite
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|scroll
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|touchwin
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|waddch
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
name|int
name|waddstr
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|wclear
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wclrtobot
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wclrtoeol
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wdelch
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wdeleteln
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|werase
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wgetch
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wgetstr
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|winsch
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
name|int
name|winsertln
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wmove
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|wrefresh
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wstandend
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wstandout
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
name|wprintw
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|mvwprintw
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|wscanw
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|mvwscanw
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|WINDOW
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|endwin
parameter_list|()
function_decl|;
block|}
end_extern

begin_comment
comment|/* Pseudo functions */
end_comment

begin_comment
comment|/*   * these are inlines rather than defines here so as to allow overloaded  * versions in the CursesWindow class  */
end_comment

begin_function_decl
name|int
name|clearok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|leaveok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scrollok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|flushok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|getyx
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|int
modifier|&
name|y
parameter_list|,
name|int
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|winch
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|int
name|clearok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
block|{
return|return
operator|(
name|win
operator|->
name|_clear
operator|=
name|bf
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|leaveok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
block|{
return|return
operator|(
name|win
operator|->
name|_leave
operator|=
name|bf
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|scrollok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
block|{
return|return
operator|(
name|win
operator|->
name|_scroll
operator|=
name|bf
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|flushok
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|cbool
name|bf
parameter_list|)
block|{
return|return
operator|(
name|bf
condition|?
operator|(
name|win
operator|->
name|_flags
operator||=
name|_FLUSH
operator|)
else|:
operator|(
name|win
operator|->
name|_flags
operator|&=
operator|~
name|_FLUSH
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|void
name|getyx
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|,
name|int
modifier|&
name|y
parameter_list|,
name|int
modifier|&
name|x
parameter_list|)
block|{
name|y
operator|=
name|win
operator|->
name|_cury
expr_stmt|;
name|x
operator|=
name|win
operator|->
name|_curx
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|int
name|winch
parameter_list|(
name|WINDOW
modifier|*
name|win
parameter_list|)
block|{
return|return
name|win
operator|->
name|_y
index|[
name|win
operator|->
name|_cury
index|]
index|[
name|win
operator|->
name|_curx
index|]
operator|&
literal|0177
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __OPTIMIZE__ */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USG
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
name|int
name|raw
parameter_list|()
function_decl|;
name|int
name|noraw
parameter_list|()
function_decl|;
name|int
name|cbreak
parameter_list|()
function_decl|;
name|int
name|nocbreak
parameter_list|()
function_decl|;
block|}
end_extern

begin_else
else|#
directive|else
end_else

begin_function_decl
name|int
name|raw
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|noraw
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cbreak
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nocbreak
parameter_list|()
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|int
name|raw
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator||=
name|RAW
operator|,
name|_pfast
operator|=
name|_rawmode
operator|=
literal|1
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|noraw
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator|&=
operator|~
name|RAW
operator|,
name|_rawmode
operator|=
literal|0
operator|,
name|_pfast
operator|=
operator|!
operator|(
name|_tty
operator|.
name|sg_flags
operator|&
name|CRMOD
operator|)
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|cbreak
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator||=
name|CBREAK
operator|,
name|_rawmode
operator|=
literal|1
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nocbreak
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator|&=
operator|~
name|CBREAK
operator|,
name|_rawmode
operator|=
literal|0
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ OPTIMIZE __ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* USG */
end_comment

begin_function_decl
name|int
name|crmode
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nocrmode
parameter_list|()
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|int
name|crmode
parameter_list|()
block|{
return|return
name|cbreak
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nocrmode
parameter_list|()
block|{
return|return
name|nocbreak
argument_list|()
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ OPTIMIZE __ */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USG
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
name|int
name|_setecho
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|_setnonl
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
end_extern

begin_function_decl
name|int
name|echo
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|noecho
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nl
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nonl
parameter_list|()
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|int
name|echo
parameter_list|()
block|{
return|return
name|_setecho
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|noecho
parameter_list|()
block|{
return|return
name|_setecho
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nl
parameter_list|()
block|{
return|return
name|_setnonl
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nonl
parameter_list|()
block|{
return|return
name|_setnonl
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ OPTIMIZE __ */
end_comment

begin_extern
extern|extern
literal|"C"
block|{
name|int
name|savetty
parameter_list|()
function_decl|;
name|int
name|resetty
parameter_list|()
function_decl|;
name|int
name|erasechar
parameter_list|()
function_decl|;
name|int
name|killchar
parameter_list|()
function_decl|;
name|int
name|baudrate
parameter_list|()
function_decl|;
block|}
end_extern

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not USG */
end_comment

begin_function_decl
name|int
name|echo
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|noecho
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nl
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nonl
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|savetty
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
name|int
name|resetty
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|erasechar
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|killchar
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|baudrate
parameter_list|()
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|int
name|echo
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator||=
name|ECHO
operator|,
name|_echoit
operator|=
literal|1
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|noecho
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator|&=
operator|~
name|ECHO
operator|,
name|_echoit
operator|=
literal|0
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nl
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator||=
name|CRMOD
operator|,
name|_pfast
operator|=
name|_rawmode
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|nonl
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator|&=
operator|~
name|CRMOD
operator|,
name|_pfast
operator|=
literal|1
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|savetty
parameter_list|()
block|{
return|return
operator|(
name|void
operator|)
name|gtty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
operator|,
name|_res_flg
operator|=
name|_tty
operator|.
name|sg_flags
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|resetty
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_flags
operator|=
name|_res_flg
operator|,
name|stty
argument_list|(
name|_tty_ch
argument_list|,
operator|&
name|_tty
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|erasechar
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_erase
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|killchar
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_kill
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|baudrate
parameter_list|()
block|{
return|return
name|_tty
operator|.
name|sg_ospeed
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ OPTIMIZE __ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* USG */
end_comment

begin_extern
extern|extern
literal|"C"
block|{
name|char
modifier|*
name|longname
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|getcap
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|_unctrl
index|[]
decl_stmt|;
block|}
end_extern

begin_function_decl
name|char
modifier|*
name|unctrl
parameter_list|(
name|int
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_function
specifier|inline
name|char
modifier|*
name|unctrl
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
name|_unctrl
index|[
operator|(
name|c
operator|)
operator|&
literal|0177
index|]
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ OPTIMIZE __ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

