begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Here's a ctype.h for SunOS-3 and vax 4.3BSD.
end_comment

begin_comment
comment|// It will probably work on most BSD derived systems.
end_comment

begin_comment
comment|// Just compare it to the C version to verify.
end_comment

begin_comment
comment|// No big deal, but it will save you some typing.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ctype_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_ctype_h
end_define

begin_function_decl
name|int
name|isalpha
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isupper
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|islower
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isdigit
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isxdigit
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isspace
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ispunct
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isalnum
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isprint
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isgraph
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iscntrl
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isascii
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|toupper
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|tolower
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|toascii
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/* sorry, but needed for USG stuff */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_U
init|=
literal|01
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_L
init|=
literal|02
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_N
init|=
literal|04
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_S
init|=
literal|010
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_P
init|=
literal|020
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_C
init|=
literal|040
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USG
argument_list|)
operator|||
name|defined
argument_list|(
name|DGUX
argument_list|)
end_if

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_B
init|=
literal|0100
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* different from BSD */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_X
init|=
literal|0200
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* different from BSD */
end_comment

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_X
init|=
literal|0100
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|int
name|_B
init|=
literal|0200
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|DGUX
end_ifdef

begin_define
define|#
directive|define
name|CTYPE_TYPE
value|short
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CTYPE_TYPE
value|char
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|DGUX
argument_list|)
operator|||
name|defined
argument_list|(
name|USG
argument_list|)
operator|||
name|defined
argument_list|(
name|hpux
argument_list|)
end_if

begin_define
define|#
directive|define
name|_ctype_
value|_ctype
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_extern
extern|extern
literal|"C"
block|{
specifier|extern
name|CTYPE_TYPE
name|_ctype_
index|[]
decl_stmt|;
block|}
end_extern

begin_comment
comment|/* *	The following bit of ugliness is to ensure that the __ctype__[] *	initialization is brought in from the VAX-11 "C" runtime library */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|VMS
end_ifdef

begin_define
define|#
directive|define
name|_ctype_
value|$$PsectAttributes_NOWRT$$_ctype_
end_define

begin_decl_stmt
specifier|extern
name|char
name|_ctype_
index|[]
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
literal|"C"
block|{
extern|extern c$v_ctypedefs(
block|)
empty_stmt|;
end_extern

begin_expr_stmt
specifier|static
name|__ctype__dummy
argument_list|()
block|{
name|c$v_ctypedefs
argument_list|()
block|;}
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|VMS
end_ifdef

begin_function
unit|inline
name|int
name|isalpha
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_U
operator||
name|_L
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isupper
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_U
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|islower
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_L
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isdigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_N
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isxdigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_X
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isspace
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_S
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|ispunct
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_P
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isalnum
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_U
operator||
name|_L
operator||
name|_N
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isprint
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_P
operator||
name|_U
operator||
name|_L
operator||
name|_N
operator||
name|_B
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isgraph
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_P
operator||
name|_U
operator||
name|_L
operator||
name|_N
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|iscntrl
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|)
index|[
name|c
index|]
operator|&
name|_C
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isascii
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
call|(
name|unsigned
call|)
argument_list|(
name|c
argument_list|)
operator|<=
literal|0177
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|toupper
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|)
operator|-
literal|'a'
operator|+
literal|'A'
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|tolower
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|)
operator|-
literal|'A'
operator|+
literal|'a'
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|toascii
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|)
operator|&
literal|0177
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|inline
name|int
name|isalpha
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_U
operator||
name|_L
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isupper
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_U
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|islower
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_L
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isdigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_N
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isxdigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_X
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isspace
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_S
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|ispunct
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_P
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isalnum
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_U
operator||
name|_L
operator||
name|_N
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isprint
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_P
operator||
name|_U
operator||
name|_L
operator||
name|_N
operator||
name|_B
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isgraph
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
operator|(
name|_P
operator||
name|_U
operator||
name|_L
operator||
name|_N
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|iscntrl
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|_ctype_
operator|+
literal|1
operator|)
index|[
name|c
index|]
operator|&
name|_C
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|isascii
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
call|(
name|unsigned
call|)
argument_list|(
name|c
argument_list|)
operator|<=
literal|0177
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|toupper
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|islower
argument_list|(
name|c
argument_list|)
condition|?
operator|(
name|c
operator|-
literal|'a'
operator|+
literal|'A'
operator|)
else|:
name|c
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|tolower
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|isupper
argument_list|(
name|c
argument_list|)
condition|?
operator|(
name|c
operator|-
literal|'A'
operator|+
literal|'a'
operator|)
else|:
name|c
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|toascii
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|)
operator|&
literal|0177
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_ctype_
end_ifdef

begin_undef
undef|#
directive|undef
name|_ctype_
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|CTYPE_TYPE
end_ifdef

begin_undef
undef|#
directive|undef
name|CTYPE_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __OPTIMIZE__ */
end_comment

begin_endif
endif|#
directive|endif
endif|_ctype_h
end_endif

end_unit

