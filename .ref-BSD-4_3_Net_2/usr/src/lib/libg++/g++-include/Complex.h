begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Complex_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Complex_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_decl_stmt
name|class
name|Complex
block|{
ifdef|#
directive|ifdef
name|__ATT_complex__
name|public
label|:
else|#
directive|else
name|protected
label|:
endif|#
directive|endif
name|double
name|re
decl_stmt|;
name|double
name|im
decl_stmt|;
name|public
label|:
name|double
name|real
argument_list|()
specifier|const
expr_stmt|;
name|double
name|imag
parameter_list|()
function_decl|const;
name|Complex
argument_list|()
expr_stmt|;
name|Complex
argument_list|(
specifier|const
name|Complex
operator|&
name|y
argument_list|)
expr_stmt|;
name|Complex
argument_list|(
argument|double r
argument_list|,
argument|double i=
literal|0
argument_list|)
empty_stmt|;
operator|~
name|Complex
argument_list|()
expr_stmt|;
name|Complex
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
decl_stmt|;
name|Complex
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|+=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|-=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|*=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
name|Complex
operator|&
name|operator
operator|/=
operator|(
name|double
name|y
operator|)
expr_stmt|;
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_function_decl
specifier|extern
name|void
name|default_Complex_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|Complex_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|one_arg_error_handler_t
name|set_Complex_error_handler
parameter_list|(
name|one_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// non-inline functions
end_comment

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|/
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|cos
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sin
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|cosh
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sinh
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|exp
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|log
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|long
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|pow
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|sqrt
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// other functions defined as inlines
end_comment

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|conj
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|+
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Complex
name|operator
operator|-
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|operator
modifier|*
parameter_list|(
name|double
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|real
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|imag
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|abs
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|norm
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|arg
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Complex
name|polar
parameter_list|(
name|double
name|r
parameter_list|,
name|double
name|t
init|=
literal|0.0
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_comment
comment|// inline members
end_comment

begin_expr_stmt
specifier|inline
name|double
name|Complex
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|re
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|Complex
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|im
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|()
block|{}
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|(
specifier|const
name|Complex
operator|&
name|y
argument_list|)
operator|:
name|re
argument_list|(
name|y
operator|.
name|real
argument_list|()
argument_list|)
operator|,
name|im
argument_list|(
argument|y.imag()
argument_list|)
block|{}
specifier|inline
name|Complex
operator|::
name|Complex
argument_list|(
argument|double r
argument_list|,
argument|double i
argument_list|)
operator|:
name|re
argument_list|(
name|r
argument_list|)
operator|,
name|im
argument_list|(
argument|i
argument_list|)
block|{}
specifier|inline
name|Complex
operator|::
operator|~
name|Complex
argument_list|()
block|{}
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|+=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|+=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|+=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|+=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|re
operator|-=
name|y
operator|.
name|real
argument_list|()
block|;
name|im
operator|-=
name|y
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|-=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|-=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
name|double
name|r
operator|=
name|re
operator|*
name|y
operator|.
name|real
argument_list|()
operator|-
name|im
operator|*
name|y
operator|.
name|imag
argument_list|()
block|;
name|im
operator|=
name|re
operator|*
name|y
operator|.
name|imag
argument_list|()
operator|+
name|im
operator|*
name|y
operator|.
name|real
argument_list|()
block|;
name|re
operator|=
name|r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
operator|&
name|Complex
operator|::
name|operator
operator|*=
operator|(
name|double
name|y
operator|)
block|{
name|re
operator|*=
name|y
block|;
name|im
operator|*=
name|y
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|//  functions
end_comment

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
operator|==
name|y
operator|.
name|real
argument_list|()
operator|&&
name|x
operator|.
name|imag
argument_list|()
operator|==
name|y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
operator|==
literal|0.0
operator|&&
name|x
operator|.
name|real
argument_list|()
operator|==
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
operator|!=
name|y
operator|.
name|real
argument_list|()
operator|||
name|x
operator|.
name|imag
argument_list|()
operator|!=
name|y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
operator|!=
literal|0.0
operator|||
name|x
operator|.
name|real
argument_list|()
operator|!=
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|)
block|{
return|return
name|Complex
argument_list|(
operator|-
name|x
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Complex
name|conj
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|+
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|+
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|+
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|+
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|+
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|-
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|-
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
specifier|const
name|Complex
operator|&
name|x
operator|,
name|double
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|-
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Complex
name|operator
operator|-
operator|(
name|double
name|x
operator|,
specifier|const
name|Complex
operator|&
name|y
operator|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|-
name|y
operator|.
name|real
argument_list|()
argument_list|,
operator|-
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
operator|.
name|real
argument_list|()
operator|-
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
operator|.
name|imag
argument_list|()
argument_list|,
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
operator|.
name|imag
argument_list|()
operator|+
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|y
argument_list|,
name|x
operator|.
name|imag
argument_list|()
operator|*
name|y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|operator
modifier|*
parameter_list|(
name|double
name|x
parameter_list|,
specifier|const
name|Complex
modifier|&
name|y
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|x
operator|*
name|y
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|*
name|y
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|real
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|imag
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|abs
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|hypot
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|,
name|x
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|norm
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
operator|.
name|real
argument_list|()
operator|*
name|x
operator|.
name|real
argument_list|()
operator|+
name|x
operator|.
name|imag
argument_list|()
operator|*
name|x
operator|.
name|imag
argument_list|()
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|arg
parameter_list|(
specifier|const
name|Complex
modifier|&
name|x
parameter_list|)
block|{
return|return
name|atan2
argument_list|(
name|x
operator|.
name|imag
argument_list|()
argument_list|,
name|x
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Complex
name|polar
parameter_list|(
name|double
name|r
parameter_list|,
name|double
name|t
parameter_list|)
block|{
return|return
name|Complex
argument_list|(
name|r
operator|*
name|cos
argument_list|(
name|t
argument_list|)
argument_list|,
name|r
operator|*
name|sin
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
endif|__OPTIMIZE__
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

