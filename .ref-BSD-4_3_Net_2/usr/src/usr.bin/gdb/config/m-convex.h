begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Definitions to make GDB run on Convex Unix (4bsd)    Copyright (C) 1989 Free Software Foundation, Inc.  This file is part of GDB.  GDB is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  GDB is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GDB; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_comment
comment|/* Describe the endian nature of this machine.  */
end_comment

begin_define
define|#
directive|define
name|BITS_BIG_ENDIAN
end_define

begin_define
define|#
directive|define
name|BYTES_BIG_ENDIAN
end_define

begin_define
define|#
directive|define
name|WORDS_BIG_ENDIAN
end_define

begin_comment
comment|/* Include certain files for dbxread.c  */
end_comment

begin_include
include|#
directive|include
file|<convex/filehdr.h>
end_include

begin_include
include|#
directive|include
file|<convex/opthdr.h>
end_include

begin_include
include|#
directive|include
file|<convex/scnhdr.h>
end_include

begin_include
include|#
directive|include
file|<nlist.h>
end_include

begin_define
define|#
directive|define
name|LONG_LONG
end_define

begin_define
define|#
directive|define
name|ATTACH_DETACH
end_define

begin_define
define|#
directive|define
name|HAVE_WAIT_STRUCT
end_define

begin_define
define|#
directive|define
name|NO_SIGINTERRUPT
end_define

begin_comment
comment|/* Get rid of any system-imposed stack limit if possible.  */
end_comment

begin_define
define|#
directive|define
name|SET_STACK_LIMIT_HUGE
end_define

begin_comment
comment|/* Define this if the C compiler puts an underscore at the front    of external names before giving them to the linker.  */
end_comment

begin_define
define|#
directive|define
name|NAMES_HAVE_UNDERSCORE
end_define

begin_comment
comment|/* Debugger information will be in DBX format.  */
end_comment

begin_define
define|#
directive|define
name|READ_DBX_FORMAT
end_define

begin_comment
comment|/* There is come problem with the debugging symbols generated by the    compiler such that the debugging symbol for the first line of a    function overlap with the function prologue.  */
end_comment

begin_define
define|#
directive|define
name|PROLOGUE_FIRSTLINE_OVERLAP
end_define

begin_comment
comment|/* When convex pcc says CHAR or SHORT, it provides the correct address.  */
end_comment

begin_define
define|#
directive|define
name|BELIEVE_PCC_PROMOTION
value|1
end_define

begin_comment
comment|/* Symbol types to ignore.  */
end_comment

begin_comment
comment|/* 0xc4 is N_MONPT.  Use the numeric value for the benefit of people    with (rather) old OS's.  */
end_comment

begin_define
define|#
directive|define
name|IGNORE_SYMBOL
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|(((TYPE)& ~N_EXT) == N_TBSS       \      || ((TYPE)& ~N_EXT) == N_TDATA   \      || ((TYPE)& ~N_EXT) == 0xc4)
end_define

begin_comment
comment|/* Use SIGCONT rather than SIGTSTP because convex Unix occasionally    turkeys SIGTSTP.  I think.  */
end_comment

begin_define
define|#
directive|define
name|STOP_SIGNAL
value|SIGCONT
end_define

begin_comment
comment|/* Convex ld sometimes omits _etext.    Get text segment end from a.out header in this case.  */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|text_end
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|END_OF_TEXT_DEFAULT
value|text_end
end_define

begin_comment
comment|/* Use csh to do argument expansion so we get ~ and such.  */
end_comment

begin_comment
comment|/* Doesn't work.  */
end_comment

begin_comment
comment|/* #define SHELL_FILE "/bin/csh" */
end_comment

begin_comment
comment|/* Offset from address of function to start of its code.    Zero on most machines.  */
end_comment

begin_define
define|#
directive|define
name|FUNCTION_START_OFFSET
value|0
end_define

begin_comment
comment|/* Advance PC across any function entry prologue instructions    to reach some "real" code.    Convex prolog is:        [sub.w #-,sp]		in one of 3 possible sizes        [mov psw,-		fc/vc main program prolog         and #-,-		  (skip it because the "mov psw" saves the 	mov -,psw]		   T bit, so continue gets a surprise trap)        [and #-,sp]		fc/vc O2 main program prolog        [ld.- -(ap),-]		pcc/gcc register arg loads */
end_comment

begin_define
define|#
directive|define
name|SKIP_PROLOGUE
parameter_list|(
name|pc
parameter_list|)
define|\
value|{ int op, ix;								\   op = read_memory_integer (pc, 2);					\   if ((op& 0xffc7) == 0x5ac0) pc += 2;					\   else if (op == 0x1580) pc += 4;					\   else if (op == 0x15c0) pc += 6;					\   if ((read_memory_integer (pc, 2)& 0xfff8) == 0x7c40			\&& (read_memory_integer (pc + 2, 2)& 0xfff8) == 0x1240		\&& (read_memory_integer (pc + 8, 2)& 0xfff8) == 0x7c48)		\     pc += 10;								\   if (read_memory_integer (pc, 2) == 0x1240) pc += 6;			\   for (;;) {								\     op = read_memory_integer (pc, 2);					\     ix = (op>> 3)& 7;							\     if (ix != 6) break;							\     if ((op& 0xfcc0) == 0x3000) pc += 4;				\     else if ((op& 0xfcc0) == 0x3040) pc += 6;				\     else if ((op& 0xfcc0) == 0x2800) pc += 4;				\     else if ((op& 0xfcc0) == 0x2840) pc += 6;				\     else break;}}
end_define

begin_comment
comment|/* Immediately after a function call, return the saved pc.    (ignore frame and return *$sp so we can handle both calls and callq) */
end_comment

begin_define
define|#
directive|define
name|SAVED_PC_AFTER_CALL
parameter_list|(
name|frame
parameter_list|)
define|\
value|read_memory_integer (read_register (SP_REGNUM), 4)
end_define

begin_comment
comment|/* Address of end of stack space.    This is ((USRSTACK + 0xfff)& -0x1000)) from<convex/vmparam.h> but    that expression depends on the kernel version; instead, fetch a    page-zero pointer and get it from that.  This will be invalid if    they ever change the way bkpt signals are delivered.  */
end_comment

begin_define
define|#
directive|define
name|STACK_END_ADDR
value|(0xfffff000& *(unsigned *) 0x80000050)
end_define

begin_comment
comment|/* User-mode traps push an extended rtn block,    then fault with one of the following PCs */
end_comment

begin_define
define|#
directive|define
name|is_trace_pc
parameter_list|(
name|pc
parameter_list|)
value|((unsigned) ((pc) - (*(int *) 0x80000040))<= 4)
end_define

begin_define
define|#
directive|define
name|is_arith_pc
parameter_list|(
name|pc
parameter_list|)
value|((unsigned) ((pc) - (*(int *) 0x80000044))<= 4)
end_define

begin_define
define|#
directive|define
name|is_break_pc
parameter_list|(
name|pc
parameter_list|)
value|((unsigned) ((pc) - (*(int *) 0x80000050))<= 4)
end_define

begin_comment
comment|/* We need to manipulate trap bits in the psw */
end_comment

begin_define
define|#
directive|define
name|PSW_TRAP_FLAGS
value|0x69670000
end_define

begin_define
define|#
directive|define
name|PSW_T_BIT
value|0x08000000
end_define

begin_define
define|#
directive|define
name|PSW_S_BIT
value|0x01000000
end_define

begin_comment
comment|/* Stack grows downward.  */
end_comment

begin_define
define|#
directive|define
name|INNER_THAN
value|<
end_define

begin_comment
comment|/* Sequence of bytes for breakpoint instruction. (bkpt)  */
end_comment

begin_define
define|#
directive|define
name|BREAKPOINT
value|{0x7d,0x50}
end_define

begin_comment
comment|/* Amount PC must be decremented by after a breakpoint.    This is often the number of bytes in BREAKPOINT but not always.    (The break PC needs to be decremented by 2, but we do it when the    break frame is recognized and popped.  That way gdb can tell breaks    from trace traps with certainty.) */
end_comment

begin_define
define|#
directive|define
name|DECR_PC_AFTER_BREAK
value|0
end_define

begin_comment
comment|/* Nonzero if instruction at PC is a return instruction. (rtn or rtnq) */
end_comment

begin_define
define|#
directive|define
name|ABOUT_TO_RETURN
parameter_list|(
name|pc
parameter_list|)
define|\
value|((read_memory_integer (pc, 2)& 0xffe0) == 0x7c80)
end_define

begin_comment
comment|/* Return 1 if P points to an invalid floating point value. */
end_comment

begin_define
define|#
directive|define
name|INVALID_FLOAT
parameter_list|(
name|p
parameter_list|,
name|len
parameter_list|)
value|0
end_define

begin_comment
comment|/* Largest integer type */
end_comment

begin_define
define|#
directive|define
name|LONGEST
value|long long
end_define

begin_comment
comment|/* Name of the builtin type for the LONGEST type above.  */
end_comment

begin_undef
undef|#
directive|undef
name|BUILTIN_TYPE_LONGEST
end_undef

begin_define
define|#
directive|define
name|BUILTIN_TYPE_LONGEST
value|builtin_type_long_long
end_define

begin_comment
comment|/* Say how long (ordinary) registers are.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_TYPE
value|long long
end_define

begin_comment
comment|/* Number of machine registers */
end_comment

begin_define
define|#
directive|define
name|NUM_REGS
value|26
end_define

begin_comment
comment|/* Initializer for an array of names of registers.    There should be NUM_REGS strings in this initializer.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_NAMES
value|{"pc","psw","fp","ap","a5","a4","a3","a2","a1","sp",\ 			"s7","s6","s5","s4","s3","s2","s1","s0",\ 			"S7","S6","S5","S4","S3","S2","S1","S0"}
end_define

begin_comment
comment|/* Register numbers of various important registers.    Note that some of these values are "real" register numbers,    and correspond to the general registers of the machine,    and some are "phony" register numbers which are too large    to be actual register numbers as far as the user is concerned    but do serve to get the desired values when passed to read_register.  */
end_comment

begin_define
define|#
directive|define
name|S0_REGNUM
value|25
end_define

begin_comment
comment|/* the real S regs */
end_comment

begin_define
define|#
directive|define
name|S7_REGNUM
value|18
end_define

begin_define
define|#
directive|define
name|s0_REGNUM
value|17
end_define

begin_comment
comment|/* low-order halves of S regs */
end_comment

begin_define
define|#
directive|define
name|s7_REGNUM
value|10
end_define

begin_define
define|#
directive|define
name|SP_REGNUM
value|9
end_define

begin_comment
comment|/* A regs */
end_comment

begin_define
define|#
directive|define
name|A1_REGNUM
value|8
end_define

begin_define
define|#
directive|define
name|A5_REGNUM
value|4
end_define

begin_define
define|#
directive|define
name|AP_REGNUM
value|3
end_define

begin_define
define|#
directive|define
name|FP_REGNUM
value|2
end_define

begin_comment
comment|/* Contains address of executing stack frame */
end_comment

begin_define
define|#
directive|define
name|PS_REGNUM
value|1
end_define

begin_comment
comment|/* Contains processor status */
end_comment

begin_define
define|#
directive|define
name|PC_REGNUM
value|0
end_define

begin_comment
comment|/* Contains program counter */
end_comment

begin_comment
comment|/* convert dbx stab register number (from `r' declaration) to a gdb REGNUM */
end_comment

begin_define
define|#
directive|define
name|STAB_REG_TO_REGNUM
parameter_list|(
name|value
parameter_list|)
define|\
value|((value)< 8 ? S0_REGNUM - (value) : SP_REGNUM - ((value) - 8))
end_define

begin_comment
comment|/* Vector register numbers, not handled as ordinary regs.    They are treated as convenience variables whose values are read    from the inferior when needed.  */
end_comment

begin_define
define|#
directive|define
name|V0_REGNUM
value|0
end_define

begin_define
define|#
directive|define
name|V7_REGNUM
value|7
end_define

begin_define
define|#
directive|define
name|VM_REGNUM
value|8
end_define

begin_define
define|#
directive|define
name|VS_REGNUM
value|9
end_define

begin_define
define|#
directive|define
name|VL_REGNUM
value|10
end_define

begin_comment
comment|/* Total amount of space needed to store our copies of the machine's    register state, the array `registers'.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_BYTES
value|(4*10 + 8*8)
end_define

begin_comment
comment|/* Index within `registers' of the first byte of the space for    register N.    NB: must match structure of struct syscall_context for correct operation */
end_comment

begin_define
define|#
directive|define
name|REGISTER_BYTE
parameter_list|(
name|N
parameter_list|)
value|((N)< s7_REGNUM ? 4*(N) : \ 			  (N)< S7_REGNUM ? 44 + 8 * ((N)-s7_REGNUM) : \ 			                    40 + 8 * ((N)-S7_REGNUM))
end_define

begin_comment
comment|/* Number of bytes of storage in the actual machine representation    for register N. */
end_comment

begin_define
define|#
directive|define
name|REGISTER_RAW_SIZE
parameter_list|(
name|N
parameter_list|)
value|((N)< S7_REGNUM ? 4 : 8)
end_define

begin_comment
comment|/* Number of bytes of storage in the program's representation    for register N.   */
end_comment

begin_define
define|#
directive|define
name|REGISTER_VIRTUAL_SIZE
parameter_list|(
name|N
parameter_list|)
value|REGISTER_RAW_SIZE(N)
end_define

begin_comment
comment|/* Largest value REGISTER_RAW_SIZE can have.  */
end_comment

begin_define
define|#
directive|define
name|MAX_REGISTER_RAW_SIZE
value|8
end_define

begin_comment
comment|/* Largest value REGISTER_VIRTUAL_SIZE can have.  */
end_comment

begin_define
define|#
directive|define
name|MAX_REGISTER_VIRTUAL_SIZE
value|8
end_define

begin_comment
comment|/* Nonzero if register N requires conversion    from raw format to virtual format.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_CONVERTIBLE
parameter_list|(
name|N
parameter_list|)
value|0
end_define

begin_comment
comment|/* Convert data from raw format for register REGNUM    to virtual format for register REGNUM.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_CONVERT_TO_VIRTUAL
parameter_list|(
name|REGNUM
parameter_list|,
name|FROM
parameter_list|,
name|TO
parameter_list|)
define|\
value|bcopy ((FROM), (TO), REGISTER_RAW_SIZE (REGNUM));
end_define

begin_comment
comment|/* Convert data from virtual format for register REGNUM    to raw format for register REGNUM.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_CONVERT_TO_RAW
parameter_list|(
name|REGNUM
parameter_list|,
name|FROM
parameter_list|,
name|TO
parameter_list|)
define|\
value|bcopy ((FROM), (TO), REGISTER_RAW_SIZE (REGNUM));
end_define

begin_comment
comment|/* Return the GDB type object for the "standard" data type    of data in register N.  */
end_comment

begin_define
define|#
directive|define
name|REGISTER_VIRTUAL_TYPE
parameter_list|(
name|N
parameter_list|)
define|\
value|((N)< S7_REGNUM ? builtin_type_int : builtin_type_long_long)
end_define

begin_comment
comment|/* Store the address of the place in which to copy the structure the    subroutine will return.  This is called from call_function. */
end_comment

begin_define
define|#
directive|define
name|STORE_STRUCT_RETURN
parameter_list|(
name|ADDR
parameter_list|,
name|SP
parameter_list|)
define|\
value|{ write_register (A1_REGNUM, (ADDR)); }
end_define

begin_comment
comment|/* Extract from an array REGBUF containing the (raw) register state    a function return value of type TYPE, and copy that, in virtual format,    into VALBUF.  */
end_comment

begin_define
define|#
directive|define
name|EXTRACT_RETURN_VALUE
parameter_list|(
name|TYPE
parameter_list|,
name|REGBUF
parameter_list|,
name|VALBUF
parameter_list|)
define|\
value|bcopy (&((char *) REGBUF) [REGISTER_BYTE (S0_REGNUM) + \ 			     8 - TYPE_LENGTH (TYPE)],\ 	 VALBUF, TYPE_LENGTH (TYPE))
end_define

begin_comment
comment|/* Write into appropriate registers a function return value    of type TYPE, given in virtual format.  */
end_comment

begin_define
define|#
directive|define
name|STORE_RETURN_VALUE
parameter_list|(
name|TYPE
parameter_list|,
name|VALBUF
parameter_list|)
define|\
value|write_register_bytes (REGISTER_BYTE (S0_REGNUM), VALBUF, 8)
end_define

begin_comment
comment|/* Extract from an array REGBUF containing the (raw) register state    the address in which a function should return its structure value,    as a CORE_ADDR (or an expression that can be used as one).  */
end_comment

begin_define
define|#
directive|define
name|EXTRACT_STRUCT_VALUE_ADDRESS
parameter_list|(
name|REGBUF
parameter_list|)
define|\
value|(*(int *)& ((char *) REGBUF) [REGISTER_BYTE (s0_REGNUM)])
end_define

begin_comment
comment|/* Compensate for lack of `vprintf' function.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HAVE_VPRINTF
end_ifndef

begin_define
define|#
directive|define
name|vprintf
parameter_list|(
name|format
parameter_list|,
name|ap
parameter_list|)
value|_doprnt (format, ap, stdout)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not HAVE_VPRINTF */
end_comment

begin_comment
comment|/* Define trapped internal variable hooks to read and write    vector and communication registers.  */
end_comment

begin_define
define|#
directive|define
name|IS_TRAPPED_INTERNALVAR
value|is_trapped_internalvar
end_define

begin_define
define|#
directive|define
name|VALUE_OF_TRAPPED_INTERNALVAR
value|value_of_trapped_internalvar
end_define

begin_define
define|#
directive|define
name|SET_TRAPPED_INTERNALVAR
value|set_trapped_internalvar
end_define

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_of_trapped_internalvar
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/* Hooks to read data from soff exec and core files,    and to describe the files.  */
end_comment

begin_define
define|#
directive|define
name|XFER_CORE_FILE
end_define

begin_define
define|#
directive|define
name|FILES_INFO_HOOK
value|print_maps
end_define

begin_comment
comment|/* Hook to call after creating inferior process.  */
end_comment

begin_define
define|#
directive|define
name|CREATE_INFERIOR_HOOK
value|create_inferior_hook
end_define

begin_comment
comment|/* Hook to call to print a typeless integer value, normally printed in decimal.    For convex, use hex instead if the number looks like an address.  */
end_comment

begin_define
define|#
directive|define
name|PRINT_TYPELESS_INTEGER
value|decout
end_define

begin_comment
comment|/* For the native compiler, variables for a particular lexical context    are listed after the beginning LBRAC instead of before in the    executables list of symbols.  Using "gcc_compiled." to distinguish    between GCC and native compiler doesn't work on Convex because the    linker sorts the symbols to put "gcc_compiled." in the wrong place.    desc is nonzero for native, zero for gcc.   */
end_comment

begin_define
define|#
directive|define
name|VARIABLES_INSIDE_BLOCK
parameter_list|(
name|desc
parameter_list|)
value|(desc != 0)
end_define

begin_comment
comment|/* Pcc occaisionally puts an SO where there should be an SOL.   */
end_comment

begin_define
define|#
directive|define
name|PCC_SOL_BROKEN
end_define

begin_comment
comment|/* Cannot execute with pc on the stack.  */
end_comment

begin_define
define|#
directive|define
name|CANNOT_EXECUTE_STACK
end_define

begin_escape
end_escape

begin_comment
comment|/* Describe the pointer in each stack frame to the previous stack frame    (its caller).  */
end_comment

begin_comment
comment|/* FRAME_CHAIN takes a frame_info with a frame's nominal address in fi->frame,    and produces the frame's chain-pointer.     FRAME_CHAIN_COMBINE takes the chain pointer and the frame's nominal address    and produces the nominal address of the caller frame.     However, if FRAME_CHAIN_VALID returns zero,    it means the given frame is the outermost one and has no caller.    In that case, FRAME_CHAIN_COMBINE is not used.  */
end_comment

begin_comment
comment|/* (caller fp is saved at 8(fp)) */
end_comment

begin_define
define|#
directive|define
name|FRAME_CHAIN
parameter_list|(
name|fi
parameter_list|)
value|(read_memory_integer ((fi)->frame + 8, 4))
end_define

begin_define
define|#
directive|define
name|FRAME_CHAIN_VALID
parameter_list|(
name|chain
parameter_list|,
name|thisframe
parameter_list|)
define|\
value|(chain != 0&& (outside_startup_file (FRAME_SAVED_PC (thisframe))))
end_define

begin_define
define|#
directive|define
name|FRAME_CHAIN_COMBINE
parameter_list|(
name|chain
parameter_list|,
name|thisframe
parameter_list|)
value|(chain)
end_define

begin_comment
comment|/* Define other aspects of the stack frame.  */
end_comment

begin_comment
comment|/* A macro that tells us whether the function invocation represented    by FI does not have a frame on the stack associated with it.  If it    does not, FRAMELESS is set to 1, else 0.    On convex, check at the return address for `callq' -- if so, frameless,    otherwise, not.  */
end_comment

begin_define
define|#
directive|define
name|FRAMELESS_FUNCTION_INVOCATION
parameter_list|(
name|FI
parameter_list|,
name|FRAMELESS
parameter_list|)
define|\
value|{ 									\   extern CORE_ADDR text_start, text_end;				\   CORE_ADDR call_addr = SAVED_PC_AFTER_CALL (FI);			\   (FRAMELESS) = (call_addr>= text_start&& call_addr< text_end	\&& read_memory_integer (call_addr - 6, 1) == 0x22);	\ }
end_define

begin_define
define|#
directive|define
name|FRAME_SAVED_PC
parameter_list|(
name|fi
parameter_list|)
value|(read_memory_integer ((fi)->frame, 4))
end_define

begin_define
define|#
directive|define
name|FRAME_ARGS_ADDRESS
parameter_list|(
name|fi
parameter_list|)
value|(read_memory_integer ((fi)->frame + 12, 4))
end_define

begin_define
define|#
directive|define
name|FRAME_LOCALS_ADDRESS
parameter_list|(
name|fi
parameter_list|)
value|(fi)->frame
end_define

begin_comment
comment|/* Return number of args passed to a frame.    Can return -1, meaning no way to tell.  */
end_comment

begin_define
define|#
directive|define
name|FRAME_NUM_ARGS
parameter_list|(
name|numargs
parameter_list|,
name|fi
parameter_list|)
define|\
value|{ numargs = read_memory_integer (FRAME_ARGS_ADDRESS (fi) - 4, 4); \   if (numargs< 0 || numargs>= 256) numargs = -1;}
end_define

begin_comment
comment|/* Return number of bytes at start of arglist that are not really args.  */
end_comment

begin_define
define|#
directive|define
name|FRAME_ARGS_SKIP
value|0
end_define

begin_comment
comment|/* Put here the code to store, into a struct frame_saved_regs,    the addresses of the saved registers of frame described by FRAME_INFO.    This includes special registers such as pc and fp saved in special    ways in the stack frame.  sp is even more special:    the address we return for it IS the sp for the next frame.  */
end_comment

begin_comment
comment|/* Normal (short) frames save only PC, FP, (callee's) AP.  To reasonably    handle gcc and pcc register variables, scan the code following the    call for the instructions the compiler inserts to reload register    variables from stack slots and record the stack slots as the saved    locations of those registers.  This will occasionally identify some    random load as a saved register; this is harmless.  vc does not    declare its register allocation actions in the stabs.  */
end_comment

begin_define
define|#
directive|define
name|FRAME_FIND_SAVED_REGS
parameter_list|(
name|frame_info
parameter_list|,
name|frame_saved_regs
parameter_list|)
define|\
value|{ register int regnum;							\   register int frame_length =
comment|/* 3 short, 2 long, 1 extended, 0 context */
value|\       (read_memory_integer ((frame_info)->frame + 4, 4)>> 25)& 3;	\   register CORE_ADDR frame_fp =						\       read_memory_integer ((frame_info)->frame + 8, 4);			\   register CORE_ADDR next_addr;						\   bzero (&frame_saved_regs, sizeof frame_saved_regs);			\   (frame_saved_regs).regs[PC_REGNUM] = (frame_info)->frame + 0;		\   (frame_saved_regs).regs[PS_REGNUM] = (frame_info)->frame + 4;		\   (frame_saved_regs).regs[FP_REGNUM] = (frame_info)->frame + 8;		\   (frame_saved_regs).regs[AP_REGNUM] = frame_fp + 12;			\   next_addr = (frame_info)->frame + 12;					\   if (frame_length< 3)							\     for (regnum = A5_REGNUM; regnum< SP_REGNUM; ++regnum)		\       (frame_saved_regs).regs[regnum] = (next_addr += 4);		\   if (frame_length< 2)							\     (frame_saved_regs).regs[SP_REGNUM] = (next_addr += 4);		\   next_addr -= 4;							\   if (frame_length< 3)							\     for (regnum = S7_REGNUM; regnum< S0_REGNUM; ++regnum)		\       (frame_saved_regs).regs[regnum] = (next_addr += 8);		\   if (frame_length< 2)							\     (frame_saved_regs).regs[S0_REGNUM] = (next_addr += 8);		\   else									\     (frame_saved_regs).regs[SP_REGNUM] = next_addr + 8;			\   if (frame_length == 3) {						\     CORE_ADDR pc = read_memory_integer ((frame_info)->frame, 4);	\     int op, ix, disp;							\     op = read_memory_integer (pc, 2);					\     if ((op& 0xffc7) == 0x1480) pc += 4;
comment|/* add.w #-,sp */
value|\     else if ((op& 0xffc7) == 0x58c0) pc += 2;
comment|/* add.w #-,sp */
value|\     op = read_memory_integer (pc, 2);					\     if ((op& 0xffc7) == 0x2a06) pc += 4;
comment|/* ld.w -,ap */
value|\     for (;;) {								\       op = read_memory_integer (pc, 2);					\       ix = (op>> 3)& 7;						\       if ((op& 0xfcc0) == 0x2800) {
comment|/* ld.- -,ak */
value|\         regnum = SP_REGNUM - (op& 7);					\ 	disp = read_memory_integer (pc + 2, 2);				\ 	pc += 4;}							\       else if ((op& 0xfcc0) == 0x2840) {
comment|/* ld.- -,ak */
value|\         regnum = SP_REGNUM - (op& 7);					\ 	disp = read_memory_integer (pc + 2, 4);				\ 	pc += 6;}							\       if ((op& 0xfcc0) == 0x3000) {
comment|/* ld.- -,sk */
value|\         regnum = S0_REGNUM - (op& 7);					\ 	disp = read_memory_integer (pc + 2, 2);				\ 	pc += 4;}							\       else if ((op& 0xfcc0) == 0x3040) {
comment|/* ld.- -,sk */
value|\         regnum = S0_REGNUM - (op& 7);					\ 	disp = read_memory_integer (pc + 2, 4);				\ 	pc += 6;}							\       else if ((op& 0xff00) == 0x7100) {
comment|/* br crossjump */
value|\         pc += 2 * (char) op;						\         continue;}							\       else if (op == 0x0140) {
comment|/* jmp crossjump */
value|\         pc = read_memory_integer (pc + 2, 4);				\         continue;}							\       else break;							\       if ((frame_saved_regs).regs[regnum])				\ 	break;								\       if (ix == 7) disp += frame_fp;					\       else if (ix == 6) disp += read_memory_integer (frame_fp + 12, 4);	\       else if (ix != 0) break;						\       (frame_saved_regs).regs[regnum] =					\ 	disp - 8 + (1<< ((op>> 8)& 3));				\       if (regnum>= S7_REGNUM)						\         (frame_saved_regs).regs[regnum - S0_REGNUM + s0_REGNUM] =	\ 	  disp - 4 + (1<< ((op>> 8)& 3));				\     }									\   }									\ }
end_define

begin_escape
end_escape

begin_comment
comment|/* Things needed for making the inferior call functions.  */
end_comment

begin_comment
comment|/* Push an empty stack frame, to record the current PC, etc.  */
end_comment

begin_define
define|#
directive|define
name|PUSH_DUMMY_FRAME
define|\
value|{ register CORE_ADDR sp = read_register (SP_REGNUM);			\   register int regnum;				    			\   char buf[8];					    			\   long word;								\   for (regnum = S0_REGNUM; regnum>= S7_REGNUM; --regnum) { 		\     read_register_bytes (REGISTER_BYTE (regnum), buf, 8); 		\     sp = push_bytes (sp, buf, 8);}		    			\   for (regnum = SP_REGNUM; regnum>= FP_REGNUM; --regnum) { 		\     word = read_register (regnum);					\     sp = push_bytes (sp,&word, 4);}   					\   word = (read_register (PS_REGNUM)&~ (3<<25)) | (1<<25);		\   sp = push_bytes (sp,&word, 4); 					\   word = read_register (PC_REGNUM);					\   sp = push_bytes (sp,&word, 4);   					\   write_register (SP_REGNUM, sp);		    			\   write_register (FP_REGNUM, sp);		    			\   write_register (AP_REGNUM, sp);}
end_define

begin_comment
comment|/* Discard from the stack the innermost frame, restoring all registers.  */
end_comment

begin_define
define|#
directive|define
name|POP_FRAME
value|do {\   register CORE_ADDR fp = read_register (FP_REGNUM);	    \   register int regnum;					    \   register int frame_length =
comment|/* 3 short, 2 long, 1 extended, 0 context */
value|\       (read_memory_integer (fp + 4, 4)>> 25)& 3;          \   char buf[8];					            \   write_register (PC_REGNUM, read_memory_integer (fp, 4));  \   write_register (PS_REGNUM, read_memory_integer (fp += 4, 4));  \   write_register (FP_REGNUM, read_memory_integer (fp += 4, 4));  \   write_register (AP_REGNUM, read_memory_integer (fp += 4, 4));  \   if (frame_length< 3) 				     \     for (regnum = A5_REGNUM; regnum< SP_REGNUM; ++regnum)   \       write_register (regnum, read_memory_integer (fp += 4, 4)); \   if (frame_length< 2)					     \     write_register (SP_REGNUM, read_memory_integer (fp += 4, 4)); \   fp -= 4;							\   if (frame_length< 3)  					\     for (regnum = S7_REGNUM; regnum< S0_REGNUM; ++regnum) {	\       read_memory (fp += 8, buf, 8);				\       write_register_bytes (REGISTER_BYTE (regnum), buf, 8);}   \   if (frame_length< 2)	{					\     read_memory (fp += 8, buf, 8);				\     write_register_bytes (REGISTER_BYTE (regnum), buf, 8);}     \   else write_register (SP_REGNUM, fp + 8);			\   flush_cached_frames ();					\   set_current_frame (create_new_frame (read_register (FP_REGNUM), \ 				       read_pc ())); 		\ } while (0)
end_define

begin_comment
comment|/* This sequence of words is the instructions      mov sp,ap      pshea 69696969      calls 32323232      bkpt    Note this is 16 bytes.  */
end_comment

begin_define
define|#
directive|define
name|CALL_DUMMY
value|{0x50860d4069696969LL,0x2140323232327d50LL}
end_define

begin_define
define|#
directive|define
name|CALL_DUMMY_START_OFFSET
value|0
end_define

begin_comment
comment|/* Insert the specified number of args and function address    into a call sequence of the above form stored at DUMMYNAME.  */
end_comment

begin_define
define|#
directive|define
name|FIX_CALL_DUMMY
parameter_list|(
name|dummyname
parameter_list|,
name|pc
parameter_list|,
name|fun
parameter_list|,
name|nargs
parameter_list|,
name|type
parameter_list|)
define|\
value|{ *(int *)((char *) dummyname + 4) = nargs;	\   *(int *)((char *) dummyname + 10) = fun; }
end_define

begin_escape
end_escape

begin_comment
comment|/* Defs to read soff symbol tables, see dbxread.c */
end_comment

begin_define
define|#
directive|define
name|NUMBER_OF_SYMBOLS
value|((long) opthdr.o_nsyms)
end_define

begin_define
define|#
directive|define
name|STRING_TABLE_OFFSET
value|((long) filehdr.h_strptr)
end_define

begin_define
define|#
directive|define
name|SYMBOL_TABLE_OFFSET
value|((long) opthdr.o_symptr)
end_define

begin_define
define|#
directive|define
name|STRING_TABLE_SIZE
value|((long) filehdr.h_strsiz)
end_define

begin_define
define|#
directive|define
name|SIZE_OF_TEXT_SEGMENT
value|((long) txthdr.s_size)
end_define

begin_define
define|#
directive|define
name|ENTRY_POINT
value|((long) opthdr.o_entry)
end_define

begin_define
define|#
directive|define
name|READ_STRING_TABLE_SIZE
parameter_list|(
name|BUFFER
parameter_list|)
define|\
value|(BUFFER = STRING_TABLE_SIZE)
end_define

begin_define
define|#
directive|define
name|DECLARE_FILE_HEADERS
define|\
value|FILEHDR filehdr;							\   OPTHDR opthdr;							\   SCNHDR txthdr
end_define

begin_define
define|#
directive|define
name|READ_FILE_HEADERS
parameter_list|(
name|DESC
parameter_list|,
name|NAME
parameter_list|)
define|\
value|{									\   int n;								\   val = myread (DESC,&filehdr, sizeof filehdr);			\   if (val< 0)								\     perror_with_name (NAME);						\   if (! IS_SOFF_MAGIC (filehdr.h_magic))				\     error ("%s: not an executable file.", NAME);			\   lseek (DESC, 0L, 0);							\   if (myread (DESC,&filehdr, sizeof filehdr)< 0)			\     perror_with_name (NAME);						\   if (myread (DESC,&opthdr, filehdr.h_opthdr)<= 0)			\     perror_with_name (NAME);						\   for (n = 0; n< filehdr.h_nscns; n++)					\     {									\       if (myread (DESC,&txthdr, sizeof txthdr)< 0)			\ 	perror_with_name (NAME);					\       if ((txthdr.s_flags& S_TYPMASK) == S_TEXT)			\ 	break;								\     }									\ }
end_define

begin_escape
end_escape

begin_comment
comment|/* Interface definitions for kernel debugger KDB.  */
end_comment

begin_comment
comment|/* (no kdb) */
end_comment

end_unit

