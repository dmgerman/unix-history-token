begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.uucp)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file LICENSE.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_decl_stmt
name|class
name|reg
range|:
name|public
name|object
block|{
name|public
operator|:
name|virtual
specifier|const
name|char
operator|*
name|get_string
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|int
name|get_value
argument_list|(
name|units
operator|*
argument_list|)
block|;
name|virtual
name|void
name|increment
argument_list|()
block|;
name|virtual
name|void
name|decrement
argument_list|()
block|;
name|virtual
name|void
name|set_increment
argument_list|(
name|units
argument_list|)
block|;
name|virtual
name|void
name|alter_format
argument_list|(
argument|char f
argument_list|,
argument|int w =
literal|0
argument_list|)
block|;
name|virtual
specifier|const
name|char
operator|*
name|get_format
argument_list|()
block|;
name|virtual
name|void
name|set_value
argument_list|(
name|units
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|constant_int_reg
range|:
name|public
name|reg
block|{
name|int
operator|*
name|p
block|;
name|public
operator|:
name|constant_int_reg
argument_list|(
name|int
operator|*
argument_list|)
block|;
specifier|const
name|char
operator|*
name|get_string
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|general_reg
range|:
name|public
name|reg
block|{
name|char
name|format
block|;
name|int
name|width
block|;
name|int
name|inc
block|;
name|public
operator|:
name|general_reg
argument_list|()
block|;
specifier|const
name|char
operator|*
name|get_string
argument_list|()
block|;
name|void
name|increment
argument_list|()
block|;
name|void
name|decrement
argument_list|()
block|;
name|void
name|alter_format
argument_list|(
argument|char f
argument_list|,
argument|int w =
literal|0
argument_list|)
block|;
name|void
name|set_increment
argument_list|(
name|units
argument_list|)
block|;
specifier|const
name|char
operator|*
name|get_format
argument_list|()
block|;
name|void
name|add_value
argument_list|(
name|units
argument_list|)
block|;
name|void
name|set_value
argument_list|(
name|units
argument_list|)
operator|=
literal|0
block|;
name|int
name|get_value
argument_list|(
name|units
operator|*
argument_list|)
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|variable_reg
range|:
name|public
name|general_reg
block|{
name|units
operator|*
name|ptr
block|;
name|public
operator|:
name|variable_reg
argument_list|(
name|int
operator|*
argument_list|)
block|;
name|void
name|set_value
argument_list|(
name|units
argument_list|)
block|;
name|int
name|get_value
argument_list|(
name|units
operator|*
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|object_dictionary
name|number_reg_dictionary
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|set_number_reg
parameter_list|(
name|symbol
name|nm
parameter_list|,
name|units
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|reg
modifier|*
name|lookup_number_reg
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|void inline_define_reg();
endif|#
directive|endif
end_endif

end_unit

