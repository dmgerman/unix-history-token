begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1989, 1990, 1991 Free Software Foundation, Inc.      Written by James Clark (jjc@jclark.uucp)  This file is part of groff.  groff is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  groff is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with groff; see the file LICENSE.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_struct
struct|struct
name|size_range
block|{
name|int
name|min
decl_stmt|;
name|int
name|max
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|font_size
block|{
specifier|static
name|size_range
modifier|*
name|size_table
decl_stmt|;
specifier|static
name|int
name|nranges
decl_stmt|;
name|int
name|p
decl_stmt|;
name|public
label|:
name|font_size
argument_list|()
expr_stmt|;
name|font_size
argument_list|(
argument|int points
argument_list|)
empty_stmt|;
name|int
name|to_points
parameter_list|()
function_decl|;
name|int
name|to_scaled_points
parameter_list|()
function_decl|;
name|int
name|to_units
parameter_list|()
function_decl|;
name|int
name|operator
operator|==
operator|(
name|font_size
operator|)
expr_stmt|;
name|int
name|operator
operator|!=
operator|(
name|font_size
operator|)
expr_stmt|;
specifier|static
name|void
name|init_size_table
parameter_list|(
name|int
modifier|*
name|sizes
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|font_size
operator|::
name|font_size
argument_list|()
operator|:
name|p
argument_list|(
literal|0
argument_list|)
block|{ }
specifier|inline
name|int
name|font_size
operator|::
name|operator
operator|==
operator|(
name|font_size
name|fs
operator|)
block|{
return|return
name|p
operator|==
name|fs
operator|.
name|p
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|font_size
operator|::
name|operator
operator|!=
operator|(
name|font_size
name|fs
operator|)
block|{
return|return
name|p
operator|!=
name|fs
operator|.
name|p
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|font_size
operator|::
name|to_scaled_points
argument_list|()
block|{
return|return
name|p
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|font_size
operator|::
name|to_points
argument_list|()
block|{
return|return
name|p
operator|/
name|sizescale
return|;
block|}
end_expr_stmt

begin_struct_decl
struct_decl|struct
name|tab
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|tab_type
block|{
name|TAB_NONE
block|,
name|TAB_LEFT
block|,
name|TAB_CENTER
block|,
name|TAB_RIGHT
block|}
enum|;
end_enum

begin_decl_stmt
name|class
name|tab_stops
block|{
name|tab
modifier|*
name|initial_list
decl_stmt|;
name|tab
modifier|*
name|repeated_list
decl_stmt|;
name|public
label|:
name|tab_stops
argument_list|()
expr_stmt|;
name|tab_stops
argument_list|(
argument|hunits distance
argument_list|,
argument|tab_type type
argument_list|)
empty_stmt|;
name|tab_stops
argument_list|(
specifier|const
name|tab_stops
operator|&
argument_list|)
expr_stmt|;
operator|~
name|tab_stops
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|tab_stops
operator|&
operator|)
decl_stmt|;
name|tab_type
name|distance_to_next_tab
parameter_list|(
name|hunits
name|pos
parameter_list|,
name|hunits
modifier|*
name|distance
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|add_tab
parameter_list|(
name|hunits
name|pos
parameter_list|,
name|tab_type
name|type
parameter_list|,
name|int
name|repeated
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|to_string
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct_decl
struct_decl|struct
name|charinfo
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|node
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|breakpoint
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|font_family
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pending_output_line
struct_decl|;
end_struct_decl

begin_decl_stmt
name|class
name|environment
block|{
name|int
name|dummy
decl_stmt|;
comment|// dummy environment used for \w
name|hunits
name|prev_line_length
decl_stmt|;
name|hunits
name|line_length
decl_stmt|;
name|hunits
name|prev_title_length
decl_stmt|;
name|hunits
name|title_length
decl_stmt|;
name|font_size
name|prev_size
decl_stmt|;
name|font_size
name|size
decl_stmt|;
name|int
name|requested_size
decl_stmt|;
name|int
name|prev_requested_size
decl_stmt|;
name|int
name|char_height
decl_stmt|;
name|int
name|char_slant
decl_stmt|;
name|int
name|prev_fontno
decl_stmt|;
name|int
name|fontno
decl_stmt|;
name|font_family
modifier|*
name|prev_family
decl_stmt|;
name|font_family
modifier|*
name|family
decl_stmt|;
name|int
name|space_size
decl_stmt|;
comment|// in 36ths of an em
name|int
name|sentence_space_size
decl_stmt|;
comment|// same but for spaces at the end of sentences
name|int
name|adjust_mode
decl_stmt|;
name|int
name|fill
decl_stmt|;
name|int
name|interrupted
decl_stmt|;
name|int
name|prev_line_interrupted
decl_stmt|;
name|int
name|center_lines
decl_stmt|;
name|int
name|right_justify_lines
decl_stmt|;
name|vunits
name|prev_vertical_spacing
decl_stmt|;
name|vunits
name|vertical_spacing
decl_stmt|;
name|int
name|prev_line_spacing
decl_stmt|;
name|int
name|line_spacing
decl_stmt|;
name|hunits
name|prev_indent
decl_stmt|;
name|hunits
name|indent
decl_stmt|;
name|hunits
name|temporary_indent
decl_stmt|;
name|int
name|have_temporary_indent
decl_stmt|;
name|hunits
name|saved_indent
decl_stmt|;
name|hunits
name|target_text_length
decl_stmt|;
name|int
name|pre_underline_fontno
decl_stmt|;
name|int
name|underline_lines
decl_stmt|;
name|symbol
name|input_trap
decl_stmt|;
name|int
name|input_trap_count
decl_stmt|;
name|node
modifier|*
name|line
decl_stmt|;
comment|// in reverse order
name|hunits
name|prev_text_length
decl_stmt|;
name|hunits
name|width_total
decl_stmt|;
name|int
name|space_total
decl_stmt|;
name|hunits
name|input_line_start
decl_stmt|;
name|tab_stops
name|tabs
decl_stmt|;
name|node
modifier|*
name|tab_contents
decl_stmt|;
name|hunits
name|tab_width
decl_stmt|;
name|hunits
name|tab_distance
decl_stmt|;
name|tab_type
name|current_tab
decl_stmt|;
name|node
modifier|*
name|leader_node
decl_stmt|;
name|charinfo
modifier|*
name|tab_char
decl_stmt|;
name|charinfo
modifier|*
name|leader_char
decl_stmt|;
name|int
name|current_field
decl_stmt|;
comment|// is there a current field?
name|hunits
name|field_distance
decl_stmt|;
name|hunits
name|pre_field_width
decl_stmt|;
name|int
name|field_spaces
decl_stmt|;
name|int
name|tab_field_spaces
decl_stmt|;
name|int
name|tab_precedes_field
decl_stmt|;
name|int
name|discarding
decl_stmt|;
name|int
name|spread_flag
decl_stmt|;
comment|// set by \p
name|node
modifier|*
name|margin_character_node
decl_stmt|;
name|hunits
name|margin_character_distance
decl_stmt|;
name|node
modifier|*
name|numbering_nodes
decl_stmt|;
name|hunits
name|line_number_digit_width
decl_stmt|;
name|int
name|number_text_separation
decl_stmt|;
comment|// in digit spaces
name|int
name|line_number_indent
decl_stmt|;
comment|// in digit spaces
name|int
name|line_number_multiple
decl_stmt|;
name|int
name|no_number_count
decl_stmt|;
name|unsigned
name|hyphenation_flags
decl_stmt|;
name|int
name|hyphen_line_count
decl_stmt|;
name|int
name|hyphen_line_max
decl_stmt|;
name|hunits
name|hyphenation_space
decl_stmt|;
name|hunits
name|hyphenation_margin
decl_stmt|;
name|pending_output_line
modifier|*
name|pending_lines
decl_stmt|;
ifdef|#
directive|ifdef
name|WIDOW_CONTROL
name|int
name|widow_control
decl_stmt|;
endif|#
directive|endif
comment|/* WIDOW_CONTROL */
name|tab_type
name|distance_to_next_tab
parameter_list|(
name|hunits
modifier|*
parameter_list|)
function_decl|;
name|void
name|start_line
parameter_list|()
function_decl|;
name|void
name|output_line
parameter_list|(
name|node
modifier|*
parameter_list|,
name|hunits
parameter_list|)
function_decl|;
name|void
name|output
parameter_list|(
name|node
modifier|*
name|nd
parameter_list|,
name|int
name|retain_size
parameter_list|,
name|vunits
name|vs
parameter_list|,
name|int
name|ls
parameter_list|,
name|hunits
name|width
parameter_list|)
function_decl|;
name|void
name|output_title
parameter_list|(
name|node
modifier|*
name|nd
parameter_list|,
name|int
name|retain_size
parameter_list|,
name|vunits
name|vs
parameter_list|,
name|int
name|ls
parameter_list|,
name|hunits
name|width
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|WIDOW_CONTROL
name|void
name|mark_last_line
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* WIDOW_CONTROL */
name|void
name|possibly_break_line
parameter_list|(
name|int
name|forced
init|=
literal|0
parameter_list|)
function_decl|;
name|breakpoint
modifier|*
name|choose_breakpoint
parameter_list|()
function_decl|;
name|void
name|hyphenate_line
parameter_list|()
function_decl|;
name|void
name|start_field
parameter_list|()
function_decl|;
name|void
name|wrap_up_field
parameter_list|()
function_decl|;
name|node
modifier|*
name|make_tab_node
parameter_list|(
name|hunits
name|d
parameter_list|,
name|node
modifier|*
name|next
init|=
literal|0
parameter_list|)
function_decl|;
name|node
modifier|*
name|get_prev_char
parameter_list|()
function_decl|;
name|public
label|:
specifier|const
name|symbol
name|name
decl_stmt|;
name|unsigned
name|char
name|control_char
decl_stmt|;
name|unsigned
name|char
name|no_break_control_char
decl_stmt|;
name|charinfo
modifier|*
name|hyphen_indicator_char
decl_stmt|;
name|environment
argument_list|(
name|symbol
argument_list|)
expr_stmt|;
name|environment
argument_list|(
specifier|const
name|environment
operator|*
argument_list|)
expr_stmt|;
comment|// for temporary environment
operator|~
name|environment
argument_list|()
expr_stmt|;
name|int
name|is_dummy
parameter_list|()
block|{
return|return
name|dummy
return|;
block|}
name|int
name|is_empty
parameter_list|()
function_decl|;
name|vunits
name|get_vertical_spacing
parameter_list|()
function_decl|;
comment|// .v
name|int
name|get_line_spacing
parameter_list|()
function_decl|;
comment|// .L
name|int
name|get_point_size
parameter_list|()
block|{
return|return
name|size
operator|.
name|to_scaled_points
argument_list|()
return|;
block|}
name|font_size
name|get_font_size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
name|int
name|get_size
parameter_list|()
block|{
return|return
name|size
operator|.
name|to_units
argument_list|()
return|;
block|}
name|int
name|get_requested_point_size
parameter_list|()
block|{
return|return
name|requested_size
return|;
block|}
name|int
name|get_char_height
parameter_list|()
block|{
return|return
name|char_height
return|;
block|}
name|int
name|get_char_slant
parameter_list|()
block|{
return|return
name|char_slant
return|;
block|}
name|hunits
name|get_digit_width
parameter_list|()
function_decl|;
name|int
name|get_font
parameter_list|()
block|{
return|return
name|fontno
return|;
block|}
empty_stmt|;
comment|// .f
name|font_family
modifier|*
name|get_family
parameter_list|()
block|{
return|return
name|family
return|;
block|}
name|int
name|get_bold
parameter_list|()
function_decl|;
comment|// .b
name|int
name|get_adjust_mode
parameter_list|()
function_decl|;
comment|// .j
name|int
name|get_fill
parameter_list|()
function_decl|;
comment|// .u
name|hunits
name|get_indent
parameter_list|()
function_decl|;
comment|// .i
name|hunits
name|get_temporary_indent
parameter_list|()
function_decl|;
name|hunits
name|get_line_length
parameter_list|()
function_decl|;
comment|// .l
name|hunits
name|get_saved_line_length
parameter_list|()
function_decl|;
comment|// .ll
name|hunits
name|get_saved_indent
parameter_list|()
function_decl|;
comment|// .in
name|hunits
name|get_title_length
parameter_list|()
function_decl|;
name|hunits
name|get_prev_char_width
parameter_list|()
function_decl|;
comment|// .w
name|hunits
name|get_prev_char_skew
parameter_list|()
function_decl|;
name|vunits
name|get_prev_char_height
parameter_list|()
function_decl|;
name|vunits
name|get_prev_char_depth
parameter_list|()
function_decl|;
name|hunits
name|get_text_length
parameter_list|()
function_decl|;
comment|// .k
name|hunits
name|get_prev_text_length
parameter_list|()
function_decl|;
comment|// .n
name|hunits
name|get_space_width
parameter_list|()
function_decl|;
name|int
name|get_space_size
parameter_list|()
function_decl|;
comment|// in ems/36
name|int
name|get_sentence_space_size
parameter_list|()
function_decl|;
name|hunits
name|get_narrow_space_width
parameter_list|()
function_decl|;
name|hunits
name|get_half_narrow_space_width
parameter_list|()
function_decl|;
name|hunits
name|get_input_line_position
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|get_tabs
parameter_list|()
function_decl|;
name|int
name|get_hyphenation_flags
parameter_list|()
function_decl|;
name|int
name|get_hyphen_line_max
parameter_list|()
function_decl|;
name|int
name|get_hyphen_line_count
parameter_list|()
function_decl|;
name|hunits
name|get_hyphenation_space
parameter_list|()
function_decl|;
name|hunits
name|get_hyphenation_margin
parameter_list|()
function_decl|;
name|int
name|get_center_lines
parameter_list|()
function_decl|;
name|int
name|get_right_justify_lines
parameter_list|()
function_decl|;
name|int
name|get_prev_line_interrupted
parameter_list|()
block|{
return|return
name|prev_line_interrupted
return|;
block|}
name|node
modifier|*
name|make_char_node
parameter_list|(
name|charinfo
modifier|*
parameter_list|)
function_decl|;
name|node
modifier|*
name|extract_output_line
parameter_list|()
function_decl|;
name|void
name|width_registers
parameter_list|()
function_decl|;
name|void
name|wrap_up_tab
parameter_list|()
function_decl|;
name|void
name|set_font
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|set_font
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
name|void
name|set_family
parameter_list|(
name|symbol
parameter_list|)
function_decl|;
name|void
name|set_size
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|set_char_height
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|set_char_slant
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|set_input_line_position
parameter_list|(
name|hunits
parameter_list|)
function_decl|;
comment|// used by \n(hp
name|void
name|interrupt
parameter_list|()
function_decl|;
name|void
name|spread
parameter_list|()
block|{
name|spread_flag
operator|=
literal|1
expr_stmt|;
block|}
name|void
name|do_break
parameter_list|()
function_decl|;
comment|// .br
name|void
name|newline
parameter_list|()
function_decl|;
name|void
name|handle_tab
parameter_list|(
name|int
name|is_leader
init|=
literal|0
parameter_list|)
function_decl|;
comment|// do a tab or leader
name|void
name|add_node
parameter_list|(
name|node
modifier|*
parameter_list|)
function_decl|;
name|void
name|add_char
parameter_list|(
name|charinfo
modifier|*
parameter_list|)
function_decl|;
name|void
name|add_hyphen_indicator
parameter_list|()
function_decl|;
name|void
name|add_italic_correction
parameter_list|()
function_decl|;
name|void
name|space
parameter_list|()
function_decl|;
name|void
name|space_newline
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|get_font_family_string
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|get_name_string
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|get_point_size_string
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|get_requested_point_size_string
parameter_list|()
function_decl|;
name|void
name|output_pending_lines
parameter_list|()
function_decl|;
name|friend
name|void
name|title_length
parameter_list|()
function_decl|;
name|friend
name|void
name|space_size
parameter_list|()
function_decl|;
name|friend
name|void
name|fill
parameter_list|()
function_decl|;
name|friend
name|void
name|no_fill
parameter_list|()
function_decl|;
name|friend
name|void
name|adjust
parameter_list|()
function_decl|;
name|friend
name|void
name|no_adjust
parameter_list|()
function_decl|;
name|friend
name|void
name|center
parameter_list|()
function_decl|;
name|friend
name|void
name|right_justify
parameter_list|()
function_decl|;
name|friend
name|void
name|vertical_spacing
parameter_list|()
function_decl|;
name|friend
name|void
name|line_spacing
parameter_list|()
function_decl|;
name|friend
name|void
name|line_length
parameter_list|()
function_decl|;
name|friend
name|void
name|indent
parameter_list|()
function_decl|;
name|friend
name|void
name|temporary_indent
parameter_list|()
function_decl|;
name|friend
name|void
name|underline
parameter_list|()
function_decl|;
name|friend
name|void
name|input_trap
parameter_list|()
function_decl|;
name|friend
name|void
name|set_tabs
parameter_list|()
function_decl|;
name|friend
name|void
name|margin_character
parameter_list|()
function_decl|;
name|friend
name|void
name|no_number
parameter_list|()
function_decl|;
name|friend
name|void
name|number_lines
parameter_list|()
function_decl|;
name|friend
name|void
name|leader_character
parameter_list|()
function_decl|;
name|friend
name|void
name|tab_character
parameter_list|()
function_decl|;
name|friend
name|void
name|hyphenate_request
parameter_list|()
function_decl|;
name|friend
name|void
name|no_hyphenate
parameter_list|()
function_decl|;
name|friend
name|void
name|hyphen_line_max_request
parameter_list|()
function_decl|;
name|friend
name|void
name|hyphenation_space_request
parameter_list|()
function_decl|;
name|friend
name|void
name|hyphenation_margin_request
parameter_list|()
function_decl|;
name|friend
name|void
name|line_width
parameter_list|()
function_decl|;
if|#
directive|if
literal|0
block|friend void tabs_save();   friend void tabs_restore();
endif|#
directive|endif
name|friend
name|void
name|title
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|WIDOW_CONTROL
name|friend
name|void
name|widow_control_request
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* WIDOW_CONTROL */
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|extern
name|environment
modifier|*
name|curenv
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|pop_env
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|push_env
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|init_environments
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|read_hyphen_file
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|int
name|break_flag
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|symbol
name|default_family
decl_stmt|;
end_decl_stmt

end_unit

