begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  *  Copyright (c) 2003-2008 Cavium Networks (support@cavium.com). All rights  *  reserved.  *  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions are  *  met:  *  *      * Redistributions of source code must retain the above copyright  *        notice, this list of conditions and the following disclaimer.  *  *      * Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials provided  *        with the distribution.  *  *      * Neither the name of Cavium Networks nor the names of  *        its contributors may be used to endorse or promote products  *        derived from this software without specific prior written  *        permission.  *  *  TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  *  AND WITH ALL FAULTS AND CAVIUM NETWORKS MAKES NO PROMISES, REPRESENTATIONS  *  OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH  *  RESPECT TO THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY  *  REPRESENTATION OR DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT  *  DEFECTS, AND CAVIUM SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES  *  OF TITLE, MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR  *  PURPOSE, LACK OF VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET  *  POSSESSION OR CORRESPONDENCE TO DESCRIPTION.  THE ENTIRE RISK ARISING OUT  *  OF USE OR PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  *  *  *  For any questions regarding licensing please contact marketing@caviumnetworks.com  *  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * Utility functions for endian swapping  *  *<hr>$Revision: 32636 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_SWAP_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_SWAP_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/**  * Byte swap a 16 bit number  *  * @param x      16 bit number  * @return Byte swapped result  */
specifier|static
specifier|inline
name|uint16_t
name|cvmx_swap16
parameter_list|(
name|uint16_t
name|x
parameter_list|)
block|{
return|return
operator|(
call|(
name|uint16_t
call|)
argument_list|(
operator|(
operator|(
call|(
name|uint16_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint16_t
operator|)
literal|0x00ffU
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
call|(
name|uint16_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint16_t
operator|)
literal|0xff00U
operator|)
operator|>>
literal|8
operator|)
argument_list|)
operator|)
return|;
block|}
comment|/**  * Byte swap a 32 bit number  *  * @param x      32 bit number  * @return Byte swapped result  */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_swap32
parameter_list|(
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
call|(
name|uint32_t
call|)
argument_list|(
operator|(
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint32_t
operator|)
literal|0x000000ffUL
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint32_t
operator|)
literal|0x0000ff00UL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint32_t
operator|)
literal|0x00ff0000UL
operator|)
operator|>>
literal|8
operator|)
operator||
operator|(
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|x
argument_list|)
operator|&
operator|(
name|uint32_t
operator|)
literal|0xff000000UL
operator|)
operator|>>
literal|24
operator|)
argument_list|)
operator|)
return|;
block|}
comment|/**  * Byte swap a 64 bit number  *  * @param x      64 bit number  * @return Byte swapped result  */
specifier|static
specifier|inline
name|uint64_t
name|cvmx_swap64
parameter_list|(
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
operator|(
name|x
operator|>>
literal|56
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|48
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|40
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|32
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|24
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|16
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|8
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
operator|(
name|x
operator|>>
literal|0
operator|)
operator|&
literal|0xfful
operator|)
operator|<<
literal|56
operator|)
operator|)
return|;
block|}
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
define|#
directive|define
name|cvmx_cpu_to_le16
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap16(x)
define|#
directive|define
name|cvmx_cpu_to_le32
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap32(x)
define|#
directive|define
name|cvmx_cpu_to_le64
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap64(x)
define|#
directive|define
name|cvmx_cpu_to_be16
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|cvmx_cpu_to_be32
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|cvmx_cpu_to_be64
parameter_list|(
name|x
parameter_list|)
value|(x)
else|#
directive|else
define|#
directive|define
name|cvmx_cpu_to_le16
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|cvmx_cpu_to_le32
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|cvmx_cpu_to_le64
parameter_list|(
name|x
parameter_list|)
value|(x)
define|#
directive|define
name|cvmx_cpu_to_be16
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap16(x)
define|#
directive|define
name|cvmx_cpu_to_be32
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap32(x)
define|#
directive|define
name|cvmx_cpu_to_be64
parameter_list|(
name|x
parameter_list|)
value|cvmx_swap64(x)
endif|#
directive|endif
define|#
directive|define
name|cvmx_le16_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_le16(x)
define|#
directive|define
name|cvmx_le32_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_le32(x)
define|#
directive|define
name|cvmx_le64_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_le64(x)
define|#
directive|define
name|cvmx_be16_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_be16(x)
define|#
directive|define
name|cvmx_be32_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_be32(x)
define|#
directive|define
name|cvmx_be64_to_cpu
parameter_list|(
name|x
parameter_list|)
value|cvmx_cpu_to_be64(x)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CVMX_SWAP_H__ */
end_comment

end_unit

