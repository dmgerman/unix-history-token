begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * BSD LICENSE  *  * Copyright (c) 2015-2017 Amazon.com, Inc. or its affiliates.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * * Redistributions of source code must retain the above copyright  * notice, this list of conditions and the following disclaimer.  * * Redistributions in binary form must reproduce the above copyright  * notice, this list of conditions and the following disclaimer in  * the documentation and/or other materials provided with the  * distribution.  * * Neither the name of copyright holder nor the names of its  * contributors may be used to endorse or promote products derived  * from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ENA_ETH_COM_H_
end_ifndef

begin_define
define|#
directive|define
name|ENA_ETH_COM_H_
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|"ena_com.h"
comment|/* head update threshold in units of (queue size / ENA_COMP_HEAD_THRESH) */
define|#
directive|define
name|ENA_COMP_HEAD_THRESH
value|4
struct|struct
name|ena_com_tx_ctx
block|{
name|struct
name|ena_com_tx_meta
name|ena_meta
decl_stmt|;
name|struct
name|ena_com_buf
modifier|*
name|ena_bufs
decl_stmt|;
comment|/* For LLQ, header buffer - pushed to the device mem space */
name|void
modifier|*
name|push_header
decl_stmt|;
name|enum
name|ena_eth_io_l3_proto_index
name|l3_proto
decl_stmt|;
name|enum
name|ena_eth_io_l4_proto_index
name|l4_proto
decl_stmt|;
name|u16
name|num_bufs
decl_stmt|;
name|u16
name|req_id
decl_stmt|;
comment|/* For regular queue, indicate the size of the header 	 * For LLQ, indicate the size of the pushed buffer 	 */
name|u16
name|header_len
decl_stmt|;
name|u8
name|meta_valid
decl_stmt|;
name|u8
name|tso_enable
decl_stmt|;
name|u8
name|l3_csum_enable
decl_stmt|;
name|u8
name|l4_csum_enable
decl_stmt|;
name|u8
name|l4_csum_partial
decl_stmt|;
name|u8
name|df
decl_stmt|;
comment|/* Don't fragment */
block|}
struct|;
struct|struct
name|ena_com_rx_ctx
block|{
name|struct
name|ena_com_rx_buf_info
modifier|*
name|ena_bufs
decl_stmt|;
name|enum
name|ena_eth_io_l3_proto_index
name|l3_proto
decl_stmt|;
name|enum
name|ena_eth_io_l4_proto_index
name|l4_proto
decl_stmt|;
name|bool
name|l3_csum_err
decl_stmt|;
name|bool
name|l4_csum_err
decl_stmt|;
comment|/* fragmented packet */
name|bool
name|frag
decl_stmt|;
name|u32
name|hash
decl_stmt|;
name|u16
name|descs
decl_stmt|;
name|int
name|max_bufs
decl_stmt|;
block|}
struct|;
name|int
name|ena_com_prepare_tx
parameter_list|(
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|,
name|struct
name|ena_com_tx_ctx
modifier|*
name|ena_tx_ctx
parameter_list|,
name|int
modifier|*
name|nb_hw_desc
parameter_list|)
function_decl|;
name|int
name|ena_com_rx_pkt
parameter_list|(
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|,
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|,
name|struct
name|ena_com_rx_ctx
modifier|*
name|ena_rx_ctx
parameter_list|)
function_decl|;
name|int
name|ena_com_add_single_rx_desc
parameter_list|(
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|,
name|struct
name|ena_com_buf
modifier|*
name|ena_buf
parameter_list|,
name|u16
name|req_id
parameter_list|)
function_decl|;
name|int
name|ena_com_tx_comp_req_id_get
parameter_list|(
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|,
name|u16
modifier|*
name|req_id
parameter_list|)
function_decl|;
specifier|static
specifier|inline
name|void
name|ena_com_unmask_intr
parameter_list|(
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|,
name|struct
name|ena_eth_io_intr_reg
modifier|*
name|intr_reg
parameter_list|)
block|{
name|ENA_REG_WRITE32
argument_list|(
name|io_cq
operator|->
name|bus
argument_list|,
name|intr_reg
operator|->
name|intr_control
argument_list|,
name|io_cq
operator|->
name|unmask_reg
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|int
name|ena_com_sq_empty_space
parameter_list|(
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|)
block|{
name|u16
name|tail
decl_stmt|,
name|next_to_comp
decl_stmt|,
name|cnt
decl_stmt|;
name|next_to_comp
operator|=
name|io_sq
operator|->
name|next_to_comp
expr_stmt|;
name|tail
operator|=
name|io_sq
operator|->
name|tail
expr_stmt|;
name|cnt
operator|=
name|tail
operator|-
name|next_to_comp
expr_stmt|;
return|return
name|io_sq
operator|->
name|q_depth
operator|-
literal|1
operator|-
name|cnt
return|;
block|}
specifier|static
specifier|inline
name|int
name|ena_com_write_sq_doorbell
parameter_list|(
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|)
block|{
name|u16
name|tail
decl_stmt|;
name|tail
operator|=
name|io_sq
operator|->
name|tail
expr_stmt|;
name|ena_trc_dbg
argument_list|(
literal|"write submission queue doorbell for queue: %d tail: %d\n"
argument_list|,
name|io_sq
operator|->
name|qid
argument_list|,
name|tail
argument_list|)
expr_stmt|;
name|ENA_REG_WRITE32
argument_list|(
name|io_sq
operator|->
name|bus
argument_list|,
name|tail
argument_list|,
name|io_sq
operator|->
name|db_addr
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|int
name|ena_com_update_dev_comp_head
parameter_list|(
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|)
block|{
name|u16
name|unreported_comp
decl_stmt|,
name|head
decl_stmt|;
name|bool
name|need_update
decl_stmt|;
name|head
operator|=
name|io_cq
operator|->
name|head
expr_stmt|;
name|unreported_comp
operator|=
name|head
operator|-
name|io_cq
operator|->
name|last_head_update
expr_stmt|;
name|need_update
operator|=
name|unreported_comp
operator|>
operator|(
name|io_cq
operator|->
name|q_depth
operator|/
name|ENA_COMP_HEAD_THRESH
operator|)
expr_stmt|;
if|if
condition|(
name|io_cq
operator|->
name|cq_head_db_reg
operator|&&
name|need_update
condition|)
block|{
name|ena_trc_dbg
argument_list|(
literal|"Write completion queue doorbell for queue %d: head: %d\n"
argument_list|,
name|io_cq
operator|->
name|qid
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|ENA_REG_WRITE32
argument_list|(
name|io_cq
operator|->
name|bus
argument_list|,
name|head
argument_list|,
name|io_cq
operator|->
name|cq_head_db_reg
argument_list|)
expr_stmt|;
name|io_cq
operator|->
name|last_head_update
operator|=
name|head
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|void
name|ena_com_update_numa_node
parameter_list|(
name|struct
name|ena_com_io_cq
modifier|*
name|io_cq
parameter_list|,
name|u8
name|numa_node
parameter_list|)
block|{
name|struct
name|ena_eth_io_numa_node_cfg_reg
name|numa_cfg
decl_stmt|;
if|if
condition|(
operator|!
name|io_cq
operator|->
name|numa_node_cfg_reg
condition|)
return|return;
name|numa_cfg
operator|.
name|numa_cfg
operator|=
operator|(
name|numa_node
operator|&
name|ENA_ETH_IO_NUMA_NODE_CFG_REG_NUMA_MASK
operator|)
operator||
name|ENA_ETH_IO_NUMA_NODE_CFG_REG_ENABLED_MASK
expr_stmt|;
name|ENA_REG_WRITE32
argument_list|(
name|io_cq
operator|->
name|bus
argument_list|,
name|numa_cfg
operator|.
name|numa_cfg
argument_list|,
name|io_cq
operator|->
name|numa_node_cfg_reg
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|inline
name|void
name|ena_com_comp_ack
parameter_list|(
name|struct
name|ena_com_io_sq
modifier|*
name|io_sq
parameter_list|,
name|u16
name|elem
parameter_list|)
block|{
name|io_sq
operator|->
name|next_to_comp
operator|+=
name|elem
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ENA_ETH_COM_H_ */
end_comment

end_unit

