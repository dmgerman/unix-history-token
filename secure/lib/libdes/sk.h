begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/des/sk.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1996 Eric Young (eay@mincom.oz.au)  * All rights reserved.  *   * This file is part of an SSL implementation written  * by Eric Young (eay@mincom.oz.au).  * The implementation was written so as to conform with Netscapes SSL  * specification.  This library and applications are  * FREE FOR COMMERCIAL AND NON-COMMERCIAL USE  * as long as the following conditions are aheared to.  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  If this code is used in a product,  * Eric Young should be given attribution as the author of the parts used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    This product includes software developed by Eric Young (eay@mincom.oz.au)  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|DES_LONG
name|des_skb
index|[
literal|8
index|]
index|[
literal|64
index|]
init|=
block|{
block|{
comment|/* for C bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
literal|0x00000000L
block|,
literal|0x00000010L
block|,
literal|0x20000000L
block|,
literal|0x20000010L
block|,
literal|0x00010000L
block|,
literal|0x00010010L
block|,
literal|0x20010000L
block|,
literal|0x20010010L
block|,
literal|0x00000800L
block|,
literal|0x00000810L
block|,
literal|0x20000800L
block|,
literal|0x20000810L
block|,
literal|0x00010800L
block|,
literal|0x00010810L
block|,
literal|0x20010800L
block|,
literal|0x20010810L
block|,
literal|0x00000020L
block|,
literal|0x00000030L
block|,
literal|0x20000020L
block|,
literal|0x20000030L
block|,
literal|0x00010020L
block|,
literal|0x00010030L
block|,
literal|0x20010020L
block|,
literal|0x20010030L
block|,
literal|0x00000820L
block|,
literal|0x00000830L
block|,
literal|0x20000820L
block|,
literal|0x20000830L
block|,
literal|0x00010820L
block|,
literal|0x00010830L
block|,
literal|0x20010820L
block|,
literal|0x20010830L
block|,
literal|0x00080000L
block|,
literal|0x00080010L
block|,
literal|0x20080000L
block|,
literal|0x20080010L
block|,
literal|0x00090000L
block|,
literal|0x00090010L
block|,
literal|0x20090000L
block|,
literal|0x20090010L
block|,
literal|0x00080800L
block|,
literal|0x00080810L
block|,
literal|0x20080800L
block|,
literal|0x20080810L
block|,
literal|0x00090800L
block|,
literal|0x00090810L
block|,
literal|0x20090800L
block|,
literal|0x20090810L
block|,
literal|0x00080020L
block|,
literal|0x00080030L
block|,
literal|0x20080020L
block|,
literal|0x20080030L
block|,
literal|0x00090020L
block|,
literal|0x00090030L
block|,
literal|0x20090020L
block|,
literal|0x20090030L
block|,
literal|0x00080820L
block|,
literal|0x00080830L
block|,
literal|0x20080820L
block|,
literal|0x20080830L
block|,
literal|0x00090820L
block|,
literal|0x00090830L
block|,
literal|0x20090820L
block|,
literal|0x20090830L
block|, }
block|,
block|{
comment|/* for C bits (numbered as per FIPS 46) 7 8 10 11 12 13 */
literal|0x00000000L
block|,
literal|0x02000000L
block|,
literal|0x00002000L
block|,
literal|0x02002000L
block|,
literal|0x00200000L
block|,
literal|0x02200000L
block|,
literal|0x00202000L
block|,
literal|0x02202000L
block|,
literal|0x00000004L
block|,
literal|0x02000004L
block|,
literal|0x00002004L
block|,
literal|0x02002004L
block|,
literal|0x00200004L
block|,
literal|0x02200004L
block|,
literal|0x00202004L
block|,
literal|0x02202004L
block|,
literal|0x00000400L
block|,
literal|0x02000400L
block|,
literal|0x00002400L
block|,
literal|0x02002400L
block|,
literal|0x00200400L
block|,
literal|0x02200400L
block|,
literal|0x00202400L
block|,
literal|0x02202400L
block|,
literal|0x00000404L
block|,
literal|0x02000404L
block|,
literal|0x00002404L
block|,
literal|0x02002404L
block|,
literal|0x00200404L
block|,
literal|0x02200404L
block|,
literal|0x00202404L
block|,
literal|0x02202404L
block|,
literal|0x10000000L
block|,
literal|0x12000000L
block|,
literal|0x10002000L
block|,
literal|0x12002000L
block|,
literal|0x10200000L
block|,
literal|0x12200000L
block|,
literal|0x10202000L
block|,
literal|0x12202000L
block|,
literal|0x10000004L
block|,
literal|0x12000004L
block|,
literal|0x10002004L
block|,
literal|0x12002004L
block|,
literal|0x10200004L
block|,
literal|0x12200004L
block|,
literal|0x10202004L
block|,
literal|0x12202004L
block|,
literal|0x10000400L
block|,
literal|0x12000400L
block|,
literal|0x10002400L
block|,
literal|0x12002400L
block|,
literal|0x10200400L
block|,
literal|0x12200400L
block|,
literal|0x10202400L
block|,
literal|0x12202400L
block|,
literal|0x10000404L
block|,
literal|0x12000404L
block|,
literal|0x10002404L
block|,
literal|0x12002404L
block|,
literal|0x10200404L
block|,
literal|0x12200404L
block|,
literal|0x10202404L
block|,
literal|0x12202404L
block|, }
block|,
block|{
comment|/* for C bits (numbered as per FIPS 46) 14 15 16 17 19 20 */
literal|0x00000000L
block|,
literal|0x00000001L
block|,
literal|0x00040000L
block|,
literal|0x00040001L
block|,
literal|0x01000000L
block|,
literal|0x01000001L
block|,
literal|0x01040000L
block|,
literal|0x01040001L
block|,
literal|0x00000002L
block|,
literal|0x00000003L
block|,
literal|0x00040002L
block|,
literal|0x00040003L
block|,
literal|0x01000002L
block|,
literal|0x01000003L
block|,
literal|0x01040002L
block|,
literal|0x01040003L
block|,
literal|0x00000200L
block|,
literal|0x00000201L
block|,
literal|0x00040200L
block|,
literal|0x00040201L
block|,
literal|0x01000200L
block|,
literal|0x01000201L
block|,
literal|0x01040200L
block|,
literal|0x01040201L
block|,
literal|0x00000202L
block|,
literal|0x00000203L
block|,
literal|0x00040202L
block|,
literal|0x00040203L
block|,
literal|0x01000202L
block|,
literal|0x01000203L
block|,
literal|0x01040202L
block|,
literal|0x01040203L
block|,
literal|0x08000000L
block|,
literal|0x08000001L
block|,
literal|0x08040000L
block|,
literal|0x08040001L
block|,
literal|0x09000000L
block|,
literal|0x09000001L
block|,
literal|0x09040000L
block|,
literal|0x09040001L
block|,
literal|0x08000002L
block|,
literal|0x08000003L
block|,
literal|0x08040002L
block|,
literal|0x08040003L
block|,
literal|0x09000002L
block|,
literal|0x09000003L
block|,
literal|0x09040002L
block|,
literal|0x09040003L
block|,
literal|0x08000200L
block|,
literal|0x08000201L
block|,
literal|0x08040200L
block|,
literal|0x08040201L
block|,
literal|0x09000200L
block|,
literal|0x09000201L
block|,
literal|0x09040200L
block|,
literal|0x09040201L
block|,
literal|0x08000202L
block|,
literal|0x08000203L
block|,
literal|0x08040202L
block|,
literal|0x08040203L
block|,
literal|0x09000202L
block|,
literal|0x09000203L
block|,
literal|0x09040202L
block|,
literal|0x09040203L
block|, }
block|,
block|{
comment|/* for C bits (numbered as per FIPS 46) 21 23 24 26 27 28 */
literal|0x00000000L
block|,
literal|0x00100000L
block|,
literal|0x00000100L
block|,
literal|0x00100100L
block|,
literal|0x00000008L
block|,
literal|0x00100008L
block|,
literal|0x00000108L
block|,
literal|0x00100108L
block|,
literal|0x00001000L
block|,
literal|0x00101000L
block|,
literal|0x00001100L
block|,
literal|0x00101100L
block|,
literal|0x00001008L
block|,
literal|0x00101008L
block|,
literal|0x00001108L
block|,
literal|0x00101108L
block|,
literal|0x04000000L
block|,
literal|0x04100000L
block|,
literal|0x04000100L
block|,
literal|0x04100100L
block|,
literal|0x04000008L
block|,
literal|0x04100008L
block|,
literal|0x04000108L
block|,
literal|0x04100108L
block|,
literal|0x04001000L
block|,
literal|0x04101000L
block|,
literal|0x04001100L
block|,
literal|0x04101100L
block|,
literal|0x04001008L
block|,
literal|0x04101008L
block|,
literal|0x04001108L
block|,
literal|0x04101108L
block|,
literal|0x00020000L
block|,
literal|0x00120000L
block|,
literal|0x00020100L
block|,
literal|0x00120100L
block|,
literal|0x00020008L
block|,
literal|0x00120008L
block|,
literal|0x00020108L
block|,
literal|0x00120108L
block|,
literal|0x00021000L
block|,
literal|0x00121000L
block|,
literal|0x00021100L
block|,
literal|0x00121100L
block|,
literal|0x00021008L
block|,
literal|0x00121008L
block|,
literal|0x00021108L
block|,
literal|0x00121108L
block|,
literal|0x04020000L
block|,
literal|0x04120000L
block|,
literal|0x04020100L
block|,
literal|0x04120100L
block|,
literal|0x04020008L
block|,
literal|0x04120008L
block|,
literal|0x04020108L
block|,
literal|0x04120108L
block|,
literal|0x04021000L
block|,
literal|0x04121000L
block|,
literal|0x04021100L
block|,
literal|0x04121100L
block|,
literal|0x04021008L
block|,
literal|0x04121008L
block|,
literal|0x04021108L
block|,
literal|0x04121108L
block|, }
block|,
block|{
comment|/* for D bits (numbered as per FIPS 46) 1 2 3 4 5 6 */
literal|0x00000000L
block|,
literal|0x10000000L
block|,
literal|0x00010000L
block|,
literal|0x10010000L
block|,
literal|0x00000004L
block|,
literal|0x10000004L
block|,
literal|0x00010004L
block|,
literal|0x10010004L
block|,
literal|0x20000000L
block|,
literal|0x30000000L
block|,
literal|0x20010000L
block|,
literal|0x30010000L
block|,
literal|0x20000004L
block|,
literal|0x30000004L
block|,
literal|0x20010004L
block|,
literal|0x30010004L
block|,
literal|0x00100000L
block|,
literal|0x10100000L
block|,
literal|0x00110000L
block|,
literal|0x10110000L
block|,
literal|0x00100004L
block|,
literal|0x10100004L
block|,
literal|0x00110004L
block|,
literal|0x10110004L
block|,
literal|0x20100000L
block|,
literal|0x30100000L
block|,
literal|0x20110000L
block|,
literal|0x30110000L
block|,
literal|0x20100004L
block|,
literal|0x30100004L
block|,
literal|0x20110004L
block|,
literal|0x30110004L
block|,
literal|0x00001000L
block|,
literal|0x10001000L
block|,
literal|0x00011000L
block|,
literal|0x10011000L
block|,
literal|0x00001004L
block|,
literal|0x10001004L
block|,
literal|0x00011004L
block|,
literal|0x10011004L
block|,
literal|0x20001000L
block|,
literal|0x30001000L
block|,
literal|0x20011000L
block|,
literal|0x30011000L
block|,
literal|0x20001004L
block|,
literal|0x30001004L
block|,
literal|0x20011004L
block|,
literal|0x30011004L
block|,
literal|0x00101000L
block|,
literal|0x10101000L
block|,
literal|0x00111000L
block|,
literal|0x10111000L
block|,
literal|0x00101004L
block|,
literal|0x10101004L
block|,
literal|0x00111004L
block|,
literal|0x10111004L
block|,
literal|0x20101000L
block|,
literal|0x30101000L
block|,
literal|0x20111000L
block|,
literal|0x30111000L
block|,
literal|0x20101004L
block|,
literal|0x30101004L
block|,
literal|0x20111004L
block|,
literal|0x30111004L
block|, }
block|,
block|{
comment|/* for D bits (numbered as per FIPS 46) 8 9 11 12 13 14 */
literal|0x00000000L
block|,
literal|0x08000000L
block|,
literal|0x00000008L
block|,
literal|0x08000008L
block|,
literal|0x00000400L
block|,
literal|0x08000400L
block|,
literal|0x00000408L
block|,
literal|0x08000408L
block|,
literal|0x00020000L
block|,
literal|0x08020000L
block|,
literal|0x00020008L
block|,
literal|0x08020008L
block|,
literal|0x00020400L
block|,
literal|0x08020400L
block|,
literal|0x00020408L
block|,
literal|0x08020408L
block|,
literal|0x00000001L
block|,
literal|0x08000001L
block|,
literal|0x00000009L
block|,
literal|0x08000009L
block|,
literal|0x00000401L
block|,
literal|0x08000401L
block|,
literal|0x00000409L
block|,
literal|0x08000409L
block|,
literal|0x00020001L
block|,
literal|0x08020001L
block|,
literal|0x00020009L
block|,
literal|0x08020009L
block|,
literal|0x00020401L
block|,
literal|0x08020401L
block|,
literal|0x00020409L
block|,
literal|0x08020409L
block|,
literal|0x02000000L
block|,
literal|0x0A000000L
block|,
literal|0x02000008L
block|,
literal|0x0A000008L
block|,
literal|0x02000400L
block|,
literal|0x0A000400L
block|,
literal|0x02000408L
block|,
literal|0x0A000408L
block|,
literal|0x02020000L
block|,
literal|0x0A020000L
block|,
literal|0x02020008L
block|,
literal|0x0A020008L
block|,
literal|0x02020400L
block|,
literal|0x0A020400L
block|,
literal|0x02020408L
block|,
literal|0x0A020408L
block|,
literal|0x02000001L
block|,
literal|0x0A000001L
block|,
literal|0x02000009L
block|,
literal|0x0A000009L
block|,
literal|0x02000401L
block|,
literal|0x0A000401L
block|,
literal|0x02000409L
block|,
literal|0x0A000409L
block|,
literal|0x02020001L
block|,
literal|0x0A020001L
block|,
literal|0x02020009L
block|,
literal|0x0A020009L
block|,
literal|0x02020401L
block|,
literal|0x0A020401L
block|,
literal|0x02020409L
block|,
literal|0x0A020409L
block|, }
block|,
block|{
comment|/* for D bits (numbered as per FIPS 46) 16 17 18 19 20 21 */
literal|0x00000000L
block|,
literal|0x00000100L
block|,
literal|0x00080000L
block|,
literal|0x00080100L
block|,
literal|0x01000000L
block|,
literal|0x01000100L
block|,
literal|0x01080000L
block|,
literal|0x01080100L
block|,
literal|0x00000010L
block|,
literal|0x00000110L
block|,
literal|0x00080010L
block|,
literal|0x00080110L
block|,
literal|0x01000010L
block|,
literal|0x01000110L
block|,
literal|0x01080010L
block|,
literal|0x01080110L
block|,
literal|0x00200000L
block|,
literal|0x00200100L
block|,
literal|0x00280000L
block|,
literal|0x00280100L
block|,
literal|0x01200000L
block|,
literal|0x01200100L
block|,
literal|0x01280000L
block|,
literal|0x01280100L
block|,
literal|0x00200010L
block|,
literal|0x00200110L
block|,
literal|0x00280010L
block|,
literal|0x00280110L
block|,
literal|0x01200010L
block|,
literal|0x01200110L
block|,
literal|0x01280010L
block|,
literal|0x01280110L
block|,
literal|0x00000200L
block|,
literal|0x00000300L
block|,
literal|0x00080200L
block|,
literal|0x00080300L
block|,
literal|0x01000200L
block|,
literal|0x01000300L
block|,
literal|0x01080200L
block|,
literal|0x01080300L
block|,
literal|0x00000210L
block|,
literal|0x00000310L
block|,
literal|0x00080210L
block|,
literal|0x00080310L
block|,
literal|0x01000210L
block|,
literal|0x01000310L
block|,
literal|0x01080210L
block|,
literal|0x01080310L
block|,
literal|0x00200200L
block|,
literal|0x00200300L
block|,
literal|0x00280200L
block|,
literal|0x00280300L
block|,
literal|0x01200200L
block|,
literal|0x01200300L
block|,
literal|0x01280200L
block|,
literal|0x01280300L
block|,
literal|0x00200210L
block|,
literal|0x00200310L
block|,
literal|0x00280210L
block|,
literal|0x00280310L
block|,
literal|0x01200210L
block|,
literal|0x01200310L
block|,
literal|0x01280210L
block|,
literal|0x01280310L
block|, }
block|,
block|{
comment|/* for D bits (numbered as per FIPS 46) 22 23 24 25 27 28 */
literal|0x00000000L
block|,
literal|0x04000000L
block|,
literal|0x00040000L
block|,
literal|0x04040000L
block|,
literal|0x00000002L
block|,
literal|0x04000002L
block|,
literal|0x00040002L
block|,
literal|0x04040002L
block|,
literal|0x00002000L
block|,
literal|0x04002000L
block|,
literal|0x00042000L
block|,
literal|0x04042000L
block|,
literal|0x00002002L
block|,
literal|0x04002002L
block|,
literal|0x00042002L
block|,
literal|0x04042002L
block|,
literal|0x00000020L
block|,
literal|0x04000020L
block|,
literal|0x00040020L
block|,
literal|0x04040020L
block|,
literal|0x00000022L
block|,
literal|0x04000022L
block|,
literal|0x00040022L
block|,
literal|0x04040022L
block|,
literal|0x00002020L
block|,
literal|0x04002020L
block|,
literal|0x00042020L
block|,
literal|0x04042020L
block|,
literal|0x00002022L
block|,
literal|0x04002022L
block|,
literal|0x00042022L
block|,
literal|0x04042022L
block|,
literal|0x00000800L
block|,
literal|0x04000800L
block|,
literal|0x00040800L
block|,
literal|0x04040800L
block|,
literal|0x00000802L
block|,
literal|0x04000802L
block|,
literal|0x00040802L
block|,
literal|0x04040802L
block|,
literal|0x00002800L
block|,
literal|0x04002800L
block|,
literal|0x00042800L
block|,
literal|0x04042800L
block|,
literal|0x00002802L
block|,
literal|0x04002802L
block|,
literal|0x00042802L
block|,
literal|0x04042802L
block|,
literal|0x00000820L
block|,
literal|0x04000820L
block|,
literal|0x00040820L
block|,
literal|0x04040820L
block|,
literal|0x00000822L
block|,
literal|0x04000822L
block|,
literal|0x00040822L
block|,
literal|0x04040822L
block|,
literal|0x00002820L
block|,
literal|0x04002820L
block|,
literal|0x00042820L
block|,
literal|0x04042820L
block|,
literal|0x00002822L
block|,
literal|0x04002822L
block|,
literal|0x00042822L
block|,
literal|0x04042822L
block|, }
block|}
decl_stmt|;
end_decl_stmt

end_unit

