begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2008 Yahoo!, Inc.  * All rights reserved.  * Written by: John Baldwin<jhb@FreeBSD.org>  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MPTUTIL_H__
end_ifndef

begin_define
define|#
directive|define
name|__MPTUTIL_H__
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/linker_set.h>
end_include

begin_include
include|#
directive|include
file|<dev/mpt/mpilib/mpi_type.h>
end_include

begin_include
include|#
directive|include
file|<dev/mpt/mpilib/mpi.h>
end_include

begin_include
include|#
directive|include
file|<dev/mpt/mpilib/mpi_cnfg.h>
end_include

begin_include
include|#
directive|include
file|<dev/mpt/mpilib/mpi_raid.h>
end_include

begin_define
define|#
directive|define
name|IOC_STATUS_SUCCESS
parameter_list|(
name|status
parameter_list|)
define|\
value|(((status)& MPI_IOCSTATUS_MASK) == MPI_IOCSTATUS_SUCCESS)
end_define

begin_struct
struct|struct
name|mpt_query_disk
block|{
name|char
name|devname
index|[
name|SPECNAMELEN
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mpt_standalone_disk
block|{
name|uint64_t
name|maxlba
decl_stmt|;
name|char
name|inqstring
index|[
literal|64
index|]
decl_stmt|;
name|char
name|devname
index|[
name|SPECNAMELEN
operator|+
literal|1
index|]
decl_stmt|;
name|u_int
name|bus
decl_stmt|;
name|u_int
name|target
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mpt_drive_list
block|{
name|int
name|ndrives
decl_stmt|;
name|CONFIG_PAGE_RAID_PHYS_DISK_0
modifier|*
name|drives
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mptutil_command
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
function_decl|(
modifier|*
name|handler
function_decl|)
parameter_list|(
name|int
name|ac
parameter_list|,
name|char
modifier|*
modifier|*
name|av
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MPT_DATASET
parameter_list|(
name|name
parameter_list|)
value|mptutil_ ## name ## _table
end_define

begin_define
define|#
directive|define
name|MPT_COMMAND
parameter_list|(
name|set
parameter_list|,
name|name
parameter_list|,
name|function
parameter_list|)
define|\
value|static struct mptutil_command function ## _mptutil_command =	\ 	{ #name, function };						\ 	DATA_SET(MPT_DATASET(set), function ## _mptutil_command)
end_define

begin_define
define|#
directive|define
name|MPT_TABLE
parameter_list|(
name|set
parameter_list|,
name|name
parameter_list|)
define|\
value|SET_DECLARE(MPT_DATASET(name), struct mptutil_command);		\ 									\ 	static int							\ 	mptutil_ ## name ## _table_handler(int ac, char **av)		\ 	{								\ 		return (mpt_table_handler(SET_BEGIN(MPT_DATASET(name)), \ 		    SET_LIMIT(MPT_DATASET(name)), ac, av));		\ 	}								\ 	MPT_COMMAND(set, name, mptutil_ ## name ## _table_handler)
end_define

begin_decl_stmt
specifier|extern
name|int
name|mpt_unit
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_function_decl
name|void
name|hexdump
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|length
parameter_list|,
specifier|const
name|char
modifier|*
name|hdr
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|HD_COLUMN_MASK
value|0xff
end_define

begin_define
define|#
directive|define
name|HD_DELIM_MASK
value|0xff00
end_define

begin_define
define|#
directive|define
name|HD_OMIT_COUNT
value|(1<< 16)
end_define

begin_define
define|#
directive|define
name|HD_OMIT_HEX
value|(1<< 17)
end_define

begin_define
define|#
directive|define
name|HD_OMIT_CHARS
value|(1<< 18)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|mpt_table_handler
parameter_list|(
name|struct
name|mptutil_command
modifier|*
modifier|*
name|start
parameter_list|,
name|struct
name|mptutil_command
modifier|*
modifier|*
name|end
parameter_list|,
name|int
name|ac
parameter_list|,
name|char
modifier|*
modifier|*
name|av
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_read_config_page_header
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|PageType
parameter_list|,
name|U8
name|PageNumber
parameter_list|,
name|U32
name|PageAddress
parameter_list|,
name|CONFIG_PAGE_HEADER
modifier|*
name|header
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mpt_read_config_page
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|PageType
parameter_list|,
name|U8
name|PageNumber
parameter_list|,
name|U32
name|PageAddress
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mpt_read_extended_config_page
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|ExtPageType
parameter_list|,
name|U8
name|PageVersion
parameter_list|,
name|U8
name|PageNumber
parameter_list|,
name|U32
name|PageAddress
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_write_config_page
parameter_list|(
name|int
name|fd
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_ioc_status
parameter_list|(
name|U16
name|IOCStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_raid_action
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|Action
parameter_list|,
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|,
name|U8
name|PhysDiskNum
parameter_list|,
name|U32
name|ActionDataWord
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|RAID_VOL0_STATUS
modifier|*
name|VolumeStatus
parameter_list|,
name|U32
modifier|*
name|ActionData
parameter_list|,
name|int
name|datalen
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|,
name|U16
modifier|*
name|ActionStatus
parameter_list|,
name|int
name|write
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_raid_status
parameter_list|(
name|U16
name|ActionStatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_open
parameter_list|(
name|int
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_raid_level
parameter_list|(
name|U8
name|VolumeType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_volstate
parameter_list|(
name|U8
name|State
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_pdstate
parameter_list|(
name|CONFIG_PAGE_RAID_PHYS_DISK_0
modifier|*
name|info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_pd_inq_string
parameter_list|(
name|CONFIG_PAGE_RAID_PHYS_DISK_0
modifier|*
name|pd_info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mpt_drive_list
modifier|*
name|mpt_pd_list
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mpt_free_pd_list
parameter_list|(
name|struct
name|mpt_drive_list
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_query_disk
parameter_list|(
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|,
name|struct
name|mpt_query_disk
modifier|*
name|qd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mpt_volume_name
parameter_list|(
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_fetch_disks
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
modifier|*
name|ndisks
parameter_list|,
name|struct
name|mpt_standalone_disk
modifier|*
modifier|*
name|disksp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_lock_volume
parameter_list|(
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_lookup_drive
parameter_list|(
name|struct
name|mpt_drive_list
modifier|*
name|list
parameter_list|,
specifier|const
name|char
modifier|*
name|drive
parameter_list|,
name|U8
modifier|*
name|PhysDiskNum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_lookup_volume
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|U8
modifier|*
name|VolumeBus
parameter_list|,
name|U8
modifier|*
name|VolumeID
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mpt_rescan_bus
parameter_list|(
name|int
name|bus
parameter_list|,
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|mpt_read_man_page
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|PageNumber
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
block|{
return|return
operator|(
name|mpt_read_config_page
argument_list|(
name|fd
argument_list|,
name|MPI_CONFIG_PAGETYPE_MANUFACTURING
argument_list|,
name|PageNumber
argument_list|,
literal|0
argument_list|,
name|IOCStatus
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|mpt_read_ioc_page
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|PageNumber
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
block|{
return|return
operator|(
name|mpt_read_config_page
argument_list|(
name|fd
argument_list|,
name|MPI_CONFIG_PAGETYPE_IOC
argument_list|,
name|PageNumber
argument_list|,
literal|0
argument_list|,
name|IOCStatus
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|U32
name|mpt_vol_pageaddr
parameter_list|(
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|)
block|{
return|return
operator|(
name|VolumeBus
operator|<<
literal|8
operator||
name|VolumeID
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|CONFIG_PAGE_RAID_VOL_0
modifier|*
name|mpt_vol_info
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
block|{
return|return
operator|(
name|mpt_read_config_page
argument_list|(
name|fd
argument_list|,
name|MPI_CONFIG_PAGETYPE_RAID_VOLUME
argument_list|,
literal|0
argument_list|,
name|mpt_vol_pageaddr
argument_list|(
name|VolumeBus
argument_list|,
name|VolumeID
argument_list|)
argument_list|,
name|IOCStatus
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|CONFIG_PAGE_RAID_VOL_1
modifier|*
name|mpt_vol_names
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|VolumeBus
parameter_list|,
name|U8
name|VolumeID
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
block|{
return|return
operator|(
name|mpt_read_config_page
argument_list|(
name|fd
argument_list|,
name|MPI_CONFIG_PAGETYPE_RAID_VOLUME
argument_list|,
literal|1
argument_list|,
name|mpt_vol_pageaddr
argument_list|(
name|VolumeBus
argument_list|,
name|VolumeID
argument_list|)
argument_list|,
name|IOCStatus
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|CONFIG_PAGE_RAID_PHYS_DISK_0
modifier|*
name|mpt_pd_info
parameter_list|(
name|int
name|fd
parameter_list|,
name|U8
name|PhysDiskNum
parameter_list|,
name|U16
modifier|*
name|IOCStatus
parameter_list|)
block|{
return|return
operator|(
name|mpt_read_config_page
argument_list|(
name|fd
argument_list|,
name|MPI_CONFIG_PAGETYPE_RAID_PHYSDISK
argument_list|,
literal|0
argument_list|,
name|PhysDiskNum
argument_list|,
name|IOCStatus
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !__MPTUTIL_H__ */
end_comment

end_unit

