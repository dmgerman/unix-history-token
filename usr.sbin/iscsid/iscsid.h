begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ISCSID_H
end_ifndef

begin_define
define|#
directive|define
name|ISCSID_H
end_define

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<openssl/md5.h>
end_include

begin_include
include|#
directive|include
file|<iscsi_ioctl.h>
end_include

begin_define
define|#
directive|define
name|DEFAULT_PIDFILE
value|"/var/run/iscsid.pid"
end_define

begin_define
define|#
directive|define
name|CONN_DIGEST_NONE
value|0
end_define

begin_define
define|#
directive|define
name|CONN_DIGEST_CRC32C
value|1
end_define

begin_define
define|#
directive|define
name|CONN_MUTUAL_CHALLENGE_LEN
value|1024
end_define

begin_define
define|#
directive|define
name|SOCKBUF_SIZE
value|1048576
end_define

begin_struct
struct|struct
name|connection
block|{
name|int
name|conn_iscsi_fd
decl_stmt|;
name|int
name|conn_socket
decl_stmt|;
name|unsigned
name|int
name|conn_session_id
decl_stmt|;
name|struct
name|iscsi_session_conf
name|conn_conf
decl_stmt|;
name|struct
name|iscsi_session_limits
name|conn_limits
decl_stmt|;
name|char
name|conn_target_alias
index|[
name|ISCSI_ADDR_LEN
index|]
decl_stmt|;
name|uint8_t
name|conn_isid
index|[
literal|6
index|]
decl_stmt|;
name|uint16_t
name|conn_tsih
decl_stmt|;
name|uint32_t
name|conn_statsn
decl_stmt|;
name|int
name|conn_header_digest
decl_stmt|;
name|int
name|conn_data_digest
decl_stmt|;
name|bool
name|conn_initial_r2t
decl_stmt|;
name|bool
name|conn_immediate_data
decl_stmt|;
name|size_t
name|conn_max_data_segment_length
decl_stmt|;
name|size_t
name|conn_max_burst_length
decl_stmt|;
name|size_t
name|conn_first_burst_length
decl_stmt|;
name|struct
name|chap
modifier|*
name|conn_mutual_chap
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|pdu
block|{
name|struct
name|connection
modifier|*
name|pdu_connection
decl_stmt|;
name|struct
name|iscsi_bhs
modifier|*
name|pdu_bhs
decl_stmt|;
name|char
modifier|*
name|pdu_data
decl_stmt|;
name|size_t
name|pdu_data_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|KEYS_MAX
value|1024
end_define

begin_struct
struct|struct
name|keys
block|{
name|char
modifier|*
name|keys_names
index|[
name|KEYS_MAX
index|]
decl_stmt|;
name|char
modifier|*
name|keys_values
index|[
name|KEYS_MAX
index|]
decl_stmt|;
name|char
modifier|*
name|keys_data
decl_stmt|;
name|size_t
name|keys_data_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|CHAP_CHALLENGE_LEN
value|1024
end_define

begin_struct
struct|struct
name|chap
block|{
name|unsigned
name|char
name|chap_id
decl_stmt|;
name|char
name|chap_challenge
index|[
name|CHAP_CHALLENGE_LEN
index|]
decl_stmt|;
name|char
name|chap_response
index|[
name|MD5_DIGEST_LENGTH
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|rchap
block|{
name|char
modifier|*
name|rchap_secret
decl_stmt|;
name|unsigned
name|char
name|rchap_id
decl_stmt|;
name|void
modifier|*
name|rchap_challenge
decl_stmt|;
name|size_t
name|rchap_challenge_len
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|chap
modifier|*
name|chap_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|chap_get_id
parameter_list|(
specifier|const
name|struct
name|chap
modifier|*
name|chap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|chap_get_challenge
parameter_list|(
specifier|const
name|struct
name|chap
modifier|*
name|chap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|chap_receive
parameter_list|(
name|struct
name|chap
modifier|*
name|chap
parameter_list|,
specifier|const
name|char
modifier|*
name|response
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|chap_authenticate
parameter_list|(
name|struct
name|chap
modifier|*
name|chap
parameter_list|,
specifier|const
name|char
modifier|*
name|secret
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|chap_delete
parameter_list|(
name|struct
name|chap
modifier|*
name|chap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|rchap
modifier|*
name|rchap_new
parameter_list|(
specifier|const
name|char
modifier|*
name|secret
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rchap_receive
parameter_list|(
name|struct
name|rchap
modifier|*
name|rchap
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|,
specifier|const
name|char
modifier|*
name|challenge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|rchap_get_response
parameter_list|(
name|struct
name|rchap
modifier|*
name|rchap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rchap_delete
parameter_list|(
name|struct
name|rchap
modifier|*
name|rchap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|keys
modifier|*
name|keys_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|keys_delete
parameter_list|(
name|struct
name|keys
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|keys_load
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
specifier|const
name|struct
name|pdu
modifier|*
name|pdu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|keys_save
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
name|struct
name|pdu
modifier|*
name|pdu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|keys_find
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|keys_find_int
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|keys_add
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|keys_add_int
parameter_list|(
name|struct
name|keys
modifier|*
name|keys
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|pdu
modifier|*
name|pdu_new
parameter_list|(
name|struct
name|connection
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|pdu
modifier|*
name|pdu_new_response
parameter_list|(
name|struct
name|pdu
modifier|*
name|request
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pdu_receive
parameter_list|(
name|struct
name|pdu
modifier|*
name|request
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pdu_send
parameter_list|(
name|struct
name|pdu
modifier|*
name|response
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pdu_delete
parameter_list|(
name|struct
name|pdu
modifier|*
name|ip
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|login
parameter_list|(
name|struct
name|connection
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|discovery
parameter_list|(
name|struct
name|connection
modifier|*
name|ic
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_init
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_set_peer_name
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_set_peer_addr
parameter_list|(
specifier|const
name|char
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|log_err
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__dead2
name|__printflike
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|log_errx
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__dead2
name|__printflike
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|log_warn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|log_warnx
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|log_debugx
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|char
modifier|*
name|checked_strdup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|timed_out
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fail
parameter_list|(
specifier|const
name|struct
name|connection
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ISCSID_H */
end_comment

end_unit

