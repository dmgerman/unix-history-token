begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2011 NetApp, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY NETAPP, INC ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL NETAPP, INC OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PCI_EMUL_H_
end_ifndef

begin_define
define|#
directive|define
name|_PCI_EMUL_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<sys/kernel.h>
end_include

begin_include
include|#
directive|include
file|<dev/pci/pcireg.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_define
define|#
directive|define
name|PCI_BARMAX
value|PCIR_MAX_BAR_0
end_define

begin_comment
comment|/* BAR registers in a Type 0 header */
end_comment

begin_define
define|#
directive|define
name|PCIY_RESERVED
value|0x00
end_define

begin_struct_decl
struct_decl|struct
name|vmctx
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pci_devinst
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|memory_region
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|pci_devemu
block|{
name|char
modifier|*
name|pe_emu
decl_stmt|;
comment|/* Name of device emulation */
comment|/* instance creation */
name|int
function_decl|(
modifier|*
name|pe_init
function_decl|)
parameter_list|(
name|struct
name|vmctx
modifier|*
parameter_list|,
name|struct
name|pci_devinst
modifier|*
parameter_list|,
name|char
modifier|*
name|opts
parameter_list|)
function_decl|;
comment|/* config space read/write callbacks */
name|int
function_decl|(
modifier|*
name|pe_cfgwrite
function_decl|)
parameter_list|(
name|struct
name|vmctx
modifier|*
name|ctx
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|pe_cfgread
function_decl|)
parameter_list|(
name|struct
name|vmctx
modifier|*
name|ctx
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|,
name|uint32_t
modifier|*
name|retval
parameter_list|)
function_decl|;
comment|/* BAR read/write callbacks */
name|void
function_decl|(
modifier|*
name|pe_barwrite
function_decl|)
parameter_list|(
name|struct
name|vmctx
modifier|*
name|ctx
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|baridx
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|int
name|size
parameter_list|,
name|uint64_t
name|value
parameter_list|)
function_decl|;
name|uint64_t
function_decl|(
modifier|*
name|pe_barread
function_decl|)
parameter_list|(
name|struct
name|vmctx
modifier|*
name|ctx
parameter_list|,
name|int
name|vcpu
parameter_list|,
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|baridx
parameter_list|,
name|uint64_t
name|offset
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PCI_EMUL_SET
parameter_list|(
name|x
parameter_list|)
value|DATA_SET(pci_devemu_set, x);
end_define

begin_enum
enum|enum
name|pcibar_type
block|{
name|PCIBAR_NONE
block|,
name|PCIBAR_IO
block|,
name|PCIBAR_MEM32
block|,
name|PCIBAR_MEM64
block|,
name|PCIBAR_MEMHI64
block|}
enum|;
end_enum

begin_struct
struct|struct
name|pcibar
block|{
name|enum
name|pcibar_type
name|type
decl_stmt|;
comment|/* io or memory */
name|uint64_t
name|size
decl_stmt|;
name|uint64_t
name|addr
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PI_NAMESZ
value|40
end_define

begin_struct
struct|struct
name|msix_table_entry
block|{
name|uint64_t
name|addr
decl_stmt|;
name|uint32_t
name|msg_data
decl_stmt|;
name|uint32_t
name|vector_control
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_comment
comment|/*   * In case the structure is modified to hold extra information, use a define  * for the size that should be emulated.  */
end_comment

begin_define
define|#
directive|define
name|MSIX_TABLE_ENTRY_SIZE
value|16
end_define

begin_struct
struct|struct
name|pci_devinst
block|{
name|struct
name|pci_devemu
modifier|*
name|pi_d
decl_stmt|;
name|struct
name|vmctx
modifier|*
name|pi_vmctx
decl_stmt|;
name|uint8_t
name|pi_bus
decl_stmt|,
name|pi_slot
decl_stmt|,
name|pi_func
decl_stmt|;
name|uint8_t
name|pi_lintr_pin
decl_stmt|;
name|char
name|pi_name
index|[
name|PI_NAMESZ
index|]
decl_stmt|;
name|uint16_t
name|pi_iobase
decl_stmt|;
name|int
name|pi_bar_getsize
decl_stmt|;
struct|struct
block|{
name|int
name|enabled
decl_stmt|;
name|int
name|cpu
decl_stmt|;
name|int
name|vector
decl_stmt|;
name|int
name|msgnum
decl_stmt|;
block|}
name|pi_msi
struct|;
struct|struct
block|{
name|int
name|enabled
decl_stmt|;
name|int
name|table_bar
decl_stmt|;
name|int
name|pba_bar
decl_stmt|;
name|size_t
name|table_offset
decl_stmt|;
name|int
name|table_count
decl_stmt|;
name|size_t
name|pba_offset
decl_stmt|;
name|struct
name|msix_table_entry
modifier|*
name|table
decl_stmt|;
comment|/* allocated at runtime */
block|}
name|pi_msix
struct|;
name|void
modifier|*
name|pi_arg
decl_stmt|;
comment|/* devemu-private data */
name|u_char
name|pi_cfgdata
index|[
name|PCI_REGMAX
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|pcibar
name|pi_bar
index|[
name|PCI_BARMAX
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|msicap
block|{
name|uint8_t
name|capid
decl_stmt|;
name|uint8_t
name|nextptr
decl_stmt|;
name|uint16_t
name|msgctrl
decl_stmt|;
name|uint32_t
name|addrlo
decl_stmt|;
name|uint32_t
name|addrhi
decl_stmt|;
name|uint16_t
name|msgdata
decl_stmt|;
block|}
name|__packed
struct|;
end_struct

begin_struct
struct|struct
name|msixcap
block|{
name|uint8_t
name|capid
decl_stmt|;
name|uint8_t
name|nextptr
decl_stmt|;
name|uint16_t
name|msgctrl
decl_stmt|;
name|uint32_t
name|table_info
decl_stmt|;
comment|/* bar index and offset within it */
name|uint32_t
name|pba_info
decl_stmt|;
comment|/* bar index and offset within it */
block|}
name|__packed
struct|;
end_struct

begin_function_decl
name|void
name|init_pci
parameter_list|(
name|struct
name|vmctx
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|msicap_cfgwrite
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|capoff
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|msixcap_cfgwrite
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|capoff
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_callback
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_emul_alloc_bar
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pdi
parameter_list|,
name|int
name|idx
parameter_list|,
name|enum
name|pcibar_type
name|type
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_emul_alloc_pbar
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pdi
parameter_list|,
name|int
name|idx
parameter_list|,
name|uint64_t
name|hostbase
parameter_list|,
name|enum
name|pcibar_type
name|type
parameter_list|,
name|uint64_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_emul_add_msicap
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|msgnum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_is_legacy
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_generate_msi
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|msgnum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_generate_msix
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|msgnum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_lintr_assert
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_lintr_deassert
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_lintr_request
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|ivec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_msi_enabled
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_msix_enabled
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pci_msi_msgnum
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_parse_slot
parameter_list|(
name|char
modifier|*
name|opt
parameter_list|,
name|int
name|legacy
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pci_populate_msicap
parameter_list|(
name|struct
name|msicap
modifier|*
name|cap
parameter_list|,
name|int
name|msgs
parameter_list|,
name|int
name|nextptr
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|void
name|pci_set_cfgdata8
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|,
name|uint8_t
name|val
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
name|PCI_REGMAX
argument_list|)
expr_stmt|;
operator|*
operator|(
name|uint8_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pci_set_cfgdata16
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|,
name|uint16_t
name|val
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
operator|(
name|PCI_REGMAX
operator|-
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|*
operator|(
name|uint16_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pci_set_cfgdata32
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
operator|(
name|PCI_REGMAX
operator|-
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|&
literal|3
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
operator|*
operator|(
name|uint32_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint8_t
name|pci_get_cfgdata8
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
name|PCI_REGMAX
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
operator|(
name|uint8_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint16_t
name|pci_get_cfgdata16
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
operator|(
name|PCI_REGMAX
operator|-
literal|1
operator|)
operator|&&
operator|(
name|offset
operator|&
literal|1
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
operator|(
name|uint16_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|pci_get_cfgdata32
parameter_list|(
name|struct
name|pci_devinst
modifier|*
name|pi
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|assert
argument_list|(
name|offset
operator|<=
operator|(
name|PCI_REGMAX
operator|-
literal|3
operator|)
operator|&&
operator|(
name|offset
operator|&
literal|3
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
operator|(
name|uint32_t
operator|*
operator|)
operator|(
name|pi
operator|->
name|pi_cfgdata
operator|+
name|offset
operator|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PCI_EMUL_H_ */
end_comment

end_unit

