begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: cd9660_eltorito.h,v 1.5 2009/07/04 14:31:38 ahoka Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 2005 Daniel Watt, Walter Deignan, Ryan Gabrys, Alan  * Perez-Rathke and Ram Vedam.  All rights reserved.  *  * This code was written by Daniel Watt, Walter Deignan, Ryan Gabrys,  * Alan Perez-Rathke and Ram Vedam.  *  * Redistribution and use in source and binary forms, with or  * without modification, are permitted provided that the following  * conditions are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above  *    copyright notice, this list of conditions and the following  *    disclaimer in the documentation and/or other materials provided  *    with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY DANIEL WATT, WALTER DEIGNAN, RYAN  * GABRYS, ALAN PEREZ-RATHKE AND RAM VEDAM ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL DANIEL WATT, WALTER DEIGNAN, RYAN  * GABRYS, ALAN PEREZ-RATHKE AND RAM VEDAM BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE,DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY  * OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CD9660_ELTORITO_H_
end_ifndef

begin_define
define|#
directive|define
name|_CD9660_ELTORITO_H_
end_define

begin_comment
comment|/* Boot defines */
end_comment

begin_define
define|#
directive|define
name|ET_ID
value|"EL TORITO SPECIFICATION"
end_define

begin_define
define|#
directive|define
name|ET_SYS_X86
value|0
end_define

begin_define
define|#
directive|define
name|ET_SYS_PPC
value|1
end_define

begin_define
define|#
directive|define
name|ET_SYS_MAC
value|2
end_define

begin_define
define|#
directive|define
name|ET_BOOT_ENTRY_SIZE
value|0x20
end_define

begin_define
define|#
directive|define
name|ET_BOOTABLE
value|0x88
end_define

begin_define
define|#
directive|define
name|ET_NOT_BOOTABLE
value|0
end_define

begin_define
define|#
directive|define
name|ET_MEDIA_NOEM
value|0
end_define

begin_define
define|#
directive|define
name|ET_MEDIA_12FDD
value|1
end_define

begin_define
define|#
directive|define
name|ET_MEDIA_144FDD
value|2
end_define

begin_define
define|#
directive|define
name|ET_MEDIA_288FDD
value|3
end_define

begin_define
define|#
directive|define
name|ET_MEDIA_HDD
value|4
end_define

begin_define
define|#
directive|define
name|ET_INDICATOR_HEADERMORE
value|0x90
end_define

begin_define
define|#
directive|define
name|ET_INDICATOR_HEADERLAST
value|0x91
end_define

begin_define
define|#
directive|define
name|ET_INDICATOR_EXTENSION
value|0x44
end_define

begin_comment
comment|/*** Boot Structures ***/
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_boot_volume_descriptor
block|{
name|u_char
name|boot_record_indicator
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|identifier
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x05
argument_list|)
index|]
decl_stmt|;
name|u_char
name|version
index|[
name|ISODCL
argument_list|(
literal|0x06
argument_list|,
literal|0x06
argument_list|)
index|]
decl_stmt|;
name|u_char
name|boot_system_identifier
index|[
name|ISODCL
argument_list|(
literal|0x07
argument_list|,
literal|0x26
argument_list|)
index|]
decl_stmt|;
name|u_char
name|unused1
index|[
name|ISODCL
argument_list|(
literal|0x27
argument_list|,
literal|0x46
argument_list|)
index|]
decl_stmt|;
name|u_char
name|boot_catalog_pointer
index|[
name|ISODCL
argument_list|(
literal|0x47
argument_list|,
literal|0x4A
argument_list|)
index|]
decl_stmt|;
name|u_char
name|unused2
index|[
name|ISODCL
argument_list|(
literal|0x4B
argument_list|,
literal|0x7FF
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_volume_descriptor
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_boot_catalog_validation_entry
block|{
name|u_char
name|header_id
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|platform_id
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x01
argument_list|)
index|]
decl_stmt|;
name|u_char
name|reserved1
index|[
name|ISODCL
argument_list|(
literal|0x02
argument_list|,
literal|0x03
argument_list|)
index|]
decl_stmt|;
name|u_char
name|manufacturer
index|[
name|ISODCL
argument_list|(
literal|0x04
argument_list|,
literal|0x1B
argument_list|)
index|]
decl_stmt|;
name|u_char
name|checksum
index|[
name|ISODCL
argument_list|(
literal|0x1C
argument_list|,
literal|0x1D
argument_list|)
index|]
decl_stmt|;
name|u_char
name|key
index|[
name|ISODCL
argument_list|(
literal|0x1E
argument_list|,
literal|0x1F
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_catalog_validation_entry
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_boot_catalog_initial_entry
block|{
name|u_char
name|boot_indicator
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|media_type
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x01
argument_list|)
index|]
decl_stmt|;
name|u_char
name|load_segment
index|[
name|ISODCL
argument_list|(
literal|0x02
argument_list|,
literal|0x03
argument_list|)
index|]
decl_stmt|;
name|u_char
name|system_type
index|[
name|ISODCL
argument_list|(
literal|0x04
argument_list|,
literal|0x04
argument_list|)
index|]
decl_stmt|;
name|u_char
name|unused_1
index|[
name|ISODCL
argument_list|(
literal|0x05
argument_list|,
literal|0x05
argument_list|)
index|]
decl_stmt|;
name|u_char
name|sector_count
index|[
name|ISODCL
argument_list|(
literal|0x06
argument_list|,
literal|0x07
argument_list|)
index|]
decl_stmt|;
name|u_char
name|load_rba
index|[
name|ISODCL
argument_list|(
literal|0x08
argument_list|,
literal|0x0B
argument_list|)
index|]
decl_stmt|;
name|u_char
name|unused_2
index|[
name|ISODCL
argument_list|(
literal|0x0C
argument_list|,
literal|0x1F
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_catalog_initial_entry
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ET_SECTION_HEADER_MORE
value|0x90
end_define

begin_define
define|#
directive|define
name|ET_SECTION_HEADER_LAST
value|0x91
end_define

begin_typedef
typedef|typedef
struct|struct
name|_boot_catalog_section_header
block|{
name|u_char
name|header_indicator
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|platform_id
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x01
argument_list|)
index|]
decl_stmt|;
name|u_char
name|num_section_entries
index|[
name|ISODCL
argument_list|(
literal|0x02
argument_list|,
literal|0x03
argument_list|)
index|]
decl_stmt|;
name|u_char
name|id_string
index|[
name|ISODCL
argument_list|(
literal|0x04
argument_list|,
literal|0x1F
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_catalog_section_header
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_boot_catalog_section_entry
block|{
name|u_char
name|boot_indicator
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|media_type
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x01
argument_list|)
index|]
decl_stmt|;
name|u_char
name|load_segment
index|[
name|ISODCL
argument_list|(
literal|0x02
argument_list|,
literal|0x03
argument_list|)
index|]
decl_stmt|;
name|u_char
name|system_type
index|[
name|ISODCL
argument_list|(
literal|0x04
argument_list|,
literal|0x04
argument_list|)
index|]
decl_stmt|;
name|u_char
name|unused_1
index|[
name|ISODCL
argument_list|(
literal|0x05
argument_list|,
literal|0x05
argument_list|)
index|]
decl_stmt|;
name|u_char
name|sector_count
index|[
name|ISODCL
argument_list|(
literal|0x06
argument_list|,
literal|0x07
argument_list|)
index|]
decl_stmt|;
name|u_char
name|load_rba
index|[
name|ISODCL
argument_list|(
literal|0x08
argument_list|,
literal|0x0B
argument_list|)
index|]
decl_stmt|;
name|u_char
name|selection_criteria
index|[
name|ISODCL
argument_list|(
literal|0x0C
argument_list|,
literal|0x0C
argument_list|)
index|]
decl_stmt|;
name|u_char
name|vendor_criteria
index|[
name|ISODCL
argument_list|(
literal|0x0D
argument_list|,
literal|0x1F
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_catalog_section_entry
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_boot_catalog_section_entry_extension
block|{
name|u_char
name|extension_indicator
index|[
name|ISODCL
argument_list|(
literal|0x00
argument_list|,
literal|0x00
argument_list|)
index|]
decl_stmt|;
name|u_char
name|flags
index|[
name|ISODCL
argument_list|(
literal|0x01
argument_list|,
literal|0x01
argument_list|)
index|]
decl_stmt|;
name|u_char
name|vendor_criteria
index|[
name|ISODCL
argument_list|(
literal|0x02
argument_list|,
literal|0x1F
argument_list|)
index|]
decl_stmt|;
block|}
name|boot_catalog_section_entry_extension
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ET_ENTRY_VE
value|1
end_define

begin_define
define|#
directive|define
name|ET_ENTRY_IE
value|2
end_define

begin_define
define|#
directive|define
name|ET_ENTRY_SH
value|3
end_define

begin_define
define|#
directive|define
name|ET_ENTRY_SE
value|4
end_define

begin_define
define|#
directive|define
name|ET_ENTRY_EX
value|5
end_define

begin_struct
struct|struct
name|boot_catalog_entry
block|{
name|char
name|entry_type
decl_stmt|;
union|union
block|{
name|boot_catalog_validation_entry
name|VE
decl_stmt|;
name|boot_catalog_initial_entry
name|IE
decl_stmt|;
name|boot_catalog_section_header
name|SH
decl_stmt|;
name|boot_catalog_section_entry
name|SE
decl_stmt|;
name|boot_catalog_section_entry_extension
name|EX
decl_stmt|;
block|}
name|entry_data
union|;
name|LIST_ENTRY
argument_list|(
argument|boot_catalog_entry
argument_list|)
name|ll_struct
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Temporary structure */
end_comment

begin_struct
struct|struct
name|cd9660_boot_image
block|{
name|char
modifier|*
name|filename
decl_stmt|;
name|int
name|size
decl_stmt|;
name|int
name|sector
decl_stmt|;
comment|/* copied to LoadRBA */
name|int
name|num_sectors
decl_stmt|;
name|unsigned
name|int
name|loadSegment
decl_stmt|;
name|u_char
name|targetMode
decl_stmt|;
name|u_char
name|system
decl_stmt|;
name|u_char
name|bootable
decl_stmt|;
comment|/* 	 * If the boot image exists in the filesystem 	 * already, this is a pointer to that node. For the sake 	 * of simplicity in future versions, this pointer is only 	 * to the node in the primary volume. This SHOULD be done 	 * via a hashtable lookup. 	 */
name|struct
name|_cd9660node
modifier|*
name|boot_image_node
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|cd9660_boot_image
argument_list|)
name|image_list
expr_stmt|;
name|int
name|serialno
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CD9660_ELTORITO_H_ */
end_comment

end_unit

