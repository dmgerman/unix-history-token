begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 1999 LSIIT Laboratory.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the project nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  *  Questions concerning this software should be directed to  *  Mickael Hoerdt (hoerdt@clarinet.u-strasbg.fr) LSIIT Strasbourg.  *  */
end_comment

begin_comment
comment|/*  * This program has been derived from pim6dd.  * The pim6dd program is covered by the license in the accompanying file  * named "LICENSE.pim6dd".  */
end_comment

begin_comment
comment|/*  * This program has been derived from pimd.  * The pimd program is covered by the license in the accompanying file  * named "LICENSE.pimd".  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|RP_H
end_ifndef

begin_define
define|#
directive|define
name|RP_H
end_define

begin_include
include|#
directive|include
file|"defs.h"
end_include

begin_include
include|#
directive|include
file|"mrt.h"
end_include

begin_decl_stmt
specifier|extern
name|cand_rp_t
modifier|*
name|cand_rp_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|grp_mask_t
modifier|*
name|grp_mask_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|cand_rp_t
modifier|*
name|segmented_cand_rp_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|grp_mask_t
modifier|*
name|segmented_grp_mask_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int8
name|cand_rp_flag
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int8
name|cand_bsr_flag
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int8
name|my_cand_rp_priority
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int8
name|my_bsr_priority
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|my_cand_rp_adv_period
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|my_bsr_period
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|my_cand_rp_holdtime
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|sockaddr_in6
name|my_cand_rp_address
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|sockaddr_in6
name|my_bsr_address
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|in6_addr
name|my_bsr_hash_mask
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|in6_addr
name|curr_bsr_hash_mask
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|sockaddr_in6
name|curr_bsr_address
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|curr_bsr_fragment_tag
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int8
name|curr_bsr_priority
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|pim_bootstrap_timer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16
name|pim_cand_rp_adv_timer
decl_stmt|;
end_decl_stmt

begin_struct
specifier|extern
struct|struct
name|cand_rp_adv_message_
block|{
name|u_int8
modifier|*
name|buffer
decl_stmt|;
name|u_int8
modifier|*
name|insert_data_ptr
decl_stmt|;
name|u_int8
modifier|*
name|prefix_cnt_ptr
decl_stmt|;
name|u_int16
name|message_size
decl_stmt|;
block|}
name|cand_rp_adv_message
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|void
name|init_rp6_and_bsr6
name|__P
argument_list|(
operator|(
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|delete_rp_list
parameter_list|(
name|cand_rp_t
modifier|*
modifier|*
name|used_cand_rp_list
parameter_list|,
name|grp_mask_t
modifier|*
modifier|*
name|used_grp_mask_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int16
name|bootstrap_initial_delay
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|rpentry_t
modifier|*
name|rp_match
name|__P
argument_list|(
operator|(
expr|struct
name|sockaddr_in6
operator|*
name|group
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|rp_grp_entry_t
modifier|*
name|rp_grp_match
name|__P
argument_list|(
operator|(
expr|struct
name|sockaddr_in6
operator|*
name|group
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|create_pim6_bootstrap_message
name|__P
argument_list|(
operator|(
name|char
operator|*
name|send_buff
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|rp_grp_entry_t
modifier|*
name|add_rp_grp_entry
name|__P
argument_list|(
operator|(
name|cand_rp_t
operator|*
operator|*
name|used_cand_rp_list
operator|,
name|grp_mask_t
operator|*
operator|*
name|used_grp_mask_list
operator|,
expr|struct
name|sockaddr_in6
operator|*
name|rp_addr
operator|,
name|u_int8
name|rp_priority
operator|,
name|u_int16
name|rp_holdtime
operator|,
expr|struct
name|sockaddr_in6
operator|*
name|group_addr
operator|,
expr|struct
name|in6_addr
name|group_mask
operator|,
expr|struct
name|in6_addr
name|bsr_hash_mask
operator|,
name|u_int16
name|fragment_tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|delete_rp_grp_entry
name|__P
argument_list|(
operator|(
name|cand_rp_t
operator|*
operator|*
name|used_cand_rp_list
operator|,
name|grp_mask_t
operator|*
operator|*
name|used_grp_mask_list
operator|,
name|rp_grp_entry_t
operator|*
name|rp_grp_entry_delete
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|delete_grp_mask
name|__P
argument_list|(
operator|(
name|cand_rp_t
operator|*
operator|*
name|used_cand_rp_list
operator|,
name|grp_mask_t
operator|*
operator|*
name|used_grp_mask_list
operator|,
expr|struct
name|sockaddr_in6
operator|*
name|group_addr
operator|,
expr|struct
name|in6_addr
name|group_mask
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|delete_rp
name|__P
argument_list|(
operator|(
name|cand_rp_t
operator|*
operator|*
name|used_cand_rp_list
operator|,
name|grp_mask_t
operator|*
operator|*
name|used_grp_mask_list
operator|,
expr|struct
name|sockaddr_in6
operator|*
name|rp_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|delete_rp_list
name|__P
argument_list|(
operator|(
name|cand_rp_t
operator|*
operator|*
name|used_cand_rp_list
operator|,
name|grp_mask_t
operator|*
operator|*
name|used_grp_mask_list
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|rpentry_t
modifier|*
name|rp_match
name|__P
argument_list|(
operator|(
expr|struct
name|sockaddr_in6
operator|*
name|group
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|rp_grp_entry_t
modifier|*
name|rp_grp_match
name|__P
argument_list|(
operator|(
expr|struct
name|sockaddr_in6
operator|*
name|group
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|rpentry_t
modifier|*
name|rp_find
name|__P
argument_list|(
operator|(
expr|struct
name|sockaddr_in6
operator|*
name|rp_address
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|remap_grpentry
name|__P
argument_list|(
operator|(
name|grpentry_t
operator|*
name|grpentry_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|check_mrtentry_rp
name|__P
argument_list|(
operator|(
name|mrtentry_t
operator|*
name|mrtentry_ptr
operator|,
expr|struct
name|sockaddr_in6
operator|*
name|rp_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

