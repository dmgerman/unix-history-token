begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005 Michael Bushkov<bushman@rsu.ru>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NSCD_AGENT_H__
end_ifndef

begin_define
define|#
directive|define
name|__NSCD_AGENT_H__
end_define

begin_comment
comment|/*  * Agents are used to perform the actual lookups from the caching daemon.  * There are two types of daemons: for common requests and for multipart  * requests.  * All agents are stored in the agents table, which is the singleton.  */
end_comment

begin_enum
enum|enum
name|agent_type
block|{
name|COMMON_AGENT
init|=
literal|0
block|,
name|MULTIPART_AGENT
init|=
literal|1
block|}
enum|;
end_enum

begin_struct
struct|struct
name|agent
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|enum
name|agent_type
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|common_agent
block|{
name|struct
name|agent
name|parent
decl_stmt|;
name|int
function_decl|(
modifier|*
name|lookup_func
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|multipart_agent
block|{
name|struct
name|agent
name|parent
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|mp_init_func
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|mp_lookup_func
function_decl|)
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|mp_destroy_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|agent_table
block|{
name|struct
name|agent
modifier|*
modifier|*
name|agents
decl_stmt|;
name|size_t
name|agents_num
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|agent_table
modifier|*
name|init_agent_table
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|register_agent
parameter_list|(
name|struct
name|agent_table
modifier|*
parameter_list|,
name|struct
name|agent
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|agent
modifier|*
name|find_agent
parameter_list|(
name|struct
name|agent_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|enum
name|agent_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|destroy_agent_table
parameter_list|(
name|struct
name|agent_table
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

