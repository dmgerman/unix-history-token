begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1999 Takanori Watanabe  * Copyright (c) 1999, 2000 Mitsuru IWASAKI<iwasaki@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	$Id: aml_obj.h,v 1.15 2000/08/09 14:47:43 iwasaki Exp $  *	$FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_AML_OBJ_H_
end_ifndef

begin_define
define|#
directive|define
name|_AML_OBJ_H_
end_define

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_struct_decl
struct_decl|struct
name|aml_environ
struct_decl|;
end_struct_decl

begin_enum
enum|enum
name|aml_objtype
block|{
name|aml_t_namestr
init|=
operator|-
literal|3
block|,
name|aml_t_regfield
block|,
name|aml_t_objref
block|,
name|aml_t_null
init|=
literal|0
block|,
name|aml_t_num
block|,
name|aml_t_string
block|,
name|aml_t_buffer
block|,
name|aml_t_package
block|,
name|aml_t_device
block|,
name|aml_t_field
block|,
name|aml_t_event
block|,
name|aml_t_method
block|,
name|aml_t_mutex
block|,
name|aml_t_opregion
block|,
name|aml_t_powerres
block|,
name|aml_t_processor
block|,
name|aml_t_therm
block|,
name|aml_t_bufferfield
block|,
name|aml_t_ddbhandle
block|,
name|aml_t_debug
block|}
enum|;
end_enum

begin_struct
struct|struct
name|aml_namestr
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* =aml_t_namestr */
name|u_int8_t
modifier|*
name|dp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_opregion
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|space
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_num
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* =aml_t_num */
name|int
name|number
decl_stmt|;
name|int
name|constant
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_package
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|elements
decl_stmt|;
name|union
name|aml_object
modifier|*
modifier|*
name|objects
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_string
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* =aml_t_string */
name|int
name|needfree
decl_stmt|;
name|u_int8_t
modifier|*
name|string
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_buffer
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* =aml_t_buffer */
name|int
name|size
decl_stmt|;
name|u_int8_t
modifier|*
name|data
decl_stmt|;
comment|/* This should be free when  					 * this object is free. 					 */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|fieldtype
block|{
name|f_t_field
block|,
name|f_t_index
block|,
name|f_t_bank
block|}
enum|;
end_enum

begin_struct
struct|struct
name|nfieldd
block|{
name|enum
name|fieldtype
name|ftype
decl_stmt|;
comment|/* f_t_field */
name|u_int8_t
modifier|*
name|regname
decl_stmt|;
comment|/* Namestring */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ifieldd
block|{
name|enum
name|fieldtype
name|ftype
decl_stmt|;
comment|/* f_t_index */
name|u_int8_t
modifier|*
name|indexname
decl_stmt|;
name|u_int8_t
modifier|*
name|dataname
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bfieldd
block|{
name|enum
name|fieldtype
name|ftype
decl_stmt|;
comment|/* f_t_bank */
name|u_int8_t
modifier|*
name|regname
decl_stmt|;
name|u_int8_t
modifier|*
name|bankname
decl_stmt|;
name|u_int32_t
name|bankvalue
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_field
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
name|int
name|bitoffset
decl_stmt|;
comment|/* Not Byte offset but bitoffset */
name|int
name|bitlen
decl_stmt|;
union|union
block|{
name|enum
name|fieldtype
name|ftype
decl_stmt|;
name|struct
name|nfieldd
name|fld
decl_stmt|;
name|struct
name|ifieldd
name|ifld
decl_stmt|;
name|struct
name|bfieldd
name|bfld
decl_stmt|;
block|}
name|f
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_bufferfield
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* aml_t_bufferfield */
name|int
name|bitoffset
decl_stmt|;
name|int
name|bitlen
decl_stmt|;
name|u_int8_t
modifier|*
name|origin
decl_stmt|;
comment|/* This should not be free 					 * when this object is free 					 * (Within Buffer object) 					 */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_method
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|argnum
decl_stmt|;
comment|/* Not argnum but argnum|frag */
name|u_int8_t
modifier|*
name|from
decl_stmt|;
name|u_int8_t
modifier|*
name|to
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_powerres
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|level
decl_stmt|;
name|int
name|order
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_processor
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|id
decl_stmt|;
name|int
name|addr
decl_stmt|;
name|int
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_mutex_queue
block|{
name|STAILQ_ENTRY
argument_list|(
argument|aml_mutex_queue
argument_list|)
name|entry
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_mutex
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|level
decl_stmt|;
specifier|volatile
name|void
modifier|*
name|cookie
decl_stmt|;
comment|/* In kernel, struct proc? */
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|aml_mutex_queue
argument_list|)
name|queue
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_objref
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|struct
name|aml_name
modifier|*
name|nameref
decl_stmt|;
name|union
name|aml_object
modifier|*
name|ref
decl_stmt|;
name|int
name|offset
decl_stmt|;
comment|/* of aml_buffer.data or aml_package.objects. */
comment|/* if negative value, not ready to dereference for element access. */
name|unsigned
name|deref
decl_stmt|;
comment|/* indicates whether dereffenced or not */
name|unsigned
name|alias
decl_stmt|;
comment|/* true if this is an alias object reference */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_regfield
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|int
name|space
decl_stmt|;
name|u_int32_t
name|flags
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|bitoffset
decl_stmt|;
name|int
name|bitlen
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aml_event
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
comment|/* aml_t_event */
name|int
name|inuse
decl_stmt|;
block|}
struct|;
end_struct

begin_union
union|union
name|aml_object
block|{
name|enum
name|aml_objtype
name|type
decl_stmt|;
name|struct
name|aml_num
name|num
decl_stmt|;
name|struct
name|aml_processor
name|proc
decl_stmt|;
name|struct
name|aml_powerres
name|pres
decl_stmt|;
name|struct
name|aml_opregion
name|opregion
decl_stmt|;
name|struct
name|aml_method
name|meth
decl_stmt|;
name|struct
name|aml_field
name|field
decl_stmt|;
name|struct
name|aml_mutex
name|mutex
decl_stmt|;
name|struct
name|aml_namestr
name|nstr
decl_stmt|;
name|struct
name|aml_buffer
name|buffer
decl_stmt|;
name|struct
name|aml_bufferfield
name|bfld
decl_stmt|;
name|struct
name|aml_package
name|package
decl_stmt|;
name|struct
name|aml_string
name|str
decl_stmt|;
name|struct
name|aml_objref
name|objref
decl_stmt|;
name|struct
name|aml_event
name|event
decl_stmt|;
name|struct
name|aml_regfield
name|regfield
decl_stmt|;
block|}
union|;
end_union

begin_function_decl
name|union
name|aml_object
modifier|*
name|aml_copy_object
parameter_list|(
name|struct
name|aml_environ
modifier|*
parameter_list|,
name|union
name|aml_object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|union
name|aml_object
modifier|*
name|aml_alloc_object
parameter_list|(
name|enum
name|aml_objtype
parameter_list|,
name|union
name|aml_object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aml_free_objectcontent
parameter_list|(
name|union
name|aml_object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aml_free_object
parameter_list|(
name|union
name|aml_object
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aml_realloc_object
parameter_list|(
name|union
name|aml_object
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_AML_OBJ_H_ */
end_comment

end_unit

