begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|AUTOMOUNTD_H
end_ifndef

begin_define
define|#
directive|define
name|AUTOMOUNTD_H
end_define

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_define
define|#
directive|define
name|AUTO_MASTER_PATH
value|"/etc/auto_master"
end_define

begin_define
define|#
directive|define
name|AUTO_MAP_PREFIX
value|"/etc"
end_define

begin_define
define|#
directive|define
name|AUTO_SPECIAL_PREFIX
value|"/etc/autofs"
end_define

begin_define
define|#
directive|define
name|AUTO_INCLUDE_PATH
value|AUTO_SPECIAL_PREFIX "/include"
end_define

begin_struct
struct|struct
name|node
block|{
name|TAILQ_ENTRY
argument_list|(
argument|node
argument_list|)
name|n_next
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
argument|nodehead
argument_list|,
argument|node
argument_list|)
name|n_children
expr_stmt|;
name|struct
name|node
modifier|*
name|n_parent
decl_stmt|;
name|char
modifier|*
name|n_key
decl_stmt|;
name|char
modifier|*
name|n_options
decl_stmt|;
name|char
modifier|*
name|n_location
decl_stmt|;
name|char
modifier|*
name|n_map
decl_stmt|;
specifier|const
name|char
modifier|*
name|n_config_file
decl_stmt|;
name|int
name|n_config_line
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|defined_value
block|{
name|TAILQ_ENTRY
argument_list|(
argument|defined_value
argument_list|)
name|d_next
expr_stmt|;
name|char
modifier|*
name|d_name
decl_stmt|;
name|char
modifier|*
name|d_value
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|log_init
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_set_peer_name
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|log_set_peer_addr
parameter_list|(
specifier|const
name|char
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|log_err
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__dead2
name|__printf0like
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|log_errx
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__dead2
name|__printf0like
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|log_warn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printf0like
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|log_warnx
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|log_debugx
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printf0like
parameter_list|(
function_decl|1
operator|,
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|char
modifier|*
name|checked_strdup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|concat
parameter_list|(
specifier|const
name|char
modifier|*
name|s1
parameter_list|,
name|char
name|separator
parameter_list|,
specifier|const
name|char
modifier|*
name|s2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|create_directory
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node
modifier|*
name|node_new_root
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node
modifier|*
name|node_new
parameter_list|(
name|struct
name|node
modifier|*
name|parent
parameter_list|,
name|char
modifier|*
name|key
parameter_list|,
name|char
modifier|*
name|options
parameter_list|,
name|char
modifier|*
name|location
parameter_list|,
specifier|const
name|char
modifier|*
name|config_file
parameter_list|,
name|int
name|config_line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node
modifier|*
name|node_new_map
parameter_list|(
name|struct
name|node
modifier|*
name|parent
parameter_list|,
name|char
modifier|*
name|key
parameter_list|,
name|char
modifier|*
name|options
parameter_list|,
name|char
modifier|*
name|map
parameter_list|,
specifier|const
name|char
modifier|*
name|config_file
parameter_list|,
name|int
name|config_line
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node
modifier|*
name|node_find
parameter_list|(
name|struct
name|node
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|mountpoint
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|node_is_direct_map
parameter_list|(
specifier|const
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|node_has_wildcards
parameter_list|(
specifier|const
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|node_path
parameter_list|(
specifier|const
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|node_options
parameter_list|(
specifier|const
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|node_expand_ampersand
parameter_list|(
name|struct
name|node
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|node_expand_wildcard
parameter_list|(
name|struct
name|node
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|node_expand_defined
parameter_list|(
name|struct
name|node
modifier|*
name|root
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|node_expand_indirect_maps
parameter_list|(
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|node_print
parameter_list|(
specifier|const
name|struct
name|node
modifier|*
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|parse_master
parameter_list|(
name|struct
name|node
modifier|*
name|root
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|parse_map
parameter_list|(
name|struct
name|node
modifier|*
name|parent
parameter_list|,
specifier|const
name|char
modifier|*
name|map
parameter_list|,
specifier|const
name|char
modifier|*
name|args
parameter_list|,
name|bool
modifier|*
name|wildcards
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|defined_expand
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|defined_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|defined_parse_and_add
parameter_list|(
name|char
modifier|*
name|def
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lesser_daemon
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|main_automount
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|main_automountd
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|main_autounmountd
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|FILE
modifier|*
name|auto_popen
parameter_list|(
specifier|const
name|char
modifier|*
name|argv0
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|auto_pclose
parameter_list|(
name|FILE
modifier|*
name|iop
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * lex(1) stuff.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|lineno
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|STR
value|1
end_define

begin_define
define|#
directive|define
name|NEWLINE
value|2
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !AUTOMOUNTD_H */
end_comment

end_unit

