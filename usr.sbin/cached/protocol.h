begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005 Michael Bushkov<bushman@rsu.ru>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CACHED_PROTOCOL_H__
end_ifndef

begin_define
define|#
directive|define
name|__CACHED_PROTOCOL_H__
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_comment
comment|/* maximum buffer size to receive - larger buffers are not allowed */
end_comment

begin_define
define|#
directive|define
name|MAX_BUFFER_SIZE
value|(1<< 20)
end_define

begin_comment
comment|/* buffer size correctness checking routine */
end_comment

begin_define
define|#
directive|define
name|BUFSIZE_CORRECT
parameter_list|(
name|x
parameter_list|)
value|(((x)> 0)&& ((x)< MAX_BUFFER_SIZE))
end_define

begin_define
define|#
directive|define
name|BUFSIZE_INVALID
parameter_list|(
name|x
parameter_list|)
value|(!BUFSIZE_CORRECT(x))
end_define

begin_comment
comment|/* structures below represent the data that are sent/received by the daemon */
end_comment

begin_struct
struct|struct
name|cache_write_request
block|{
name|char
modifier|*
name|entry
decl_stmt|;
name|char
modifier|*
name|cache_key
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|size_t
name|entry_length
decl_stmt|;
name|size_t
name|cache_key_size
decl_stmt|;
name|size_t
name|data_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_write_response
block|{
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_read_request
block|{
name|char
modifier|*
name|entry
decl_stmt|;
name|char
modifier|*
name|cache_key
decl_stmt|;
name|size_t
name|entry_length
decl_stmt|;
name|size_t
name|cache_key_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_read_response
block|{
name|char
modifier|*
name|data
decl_stmt|;
comment|// ignored if error_code is not 0
name|size_t
name|data_size
decl_stmt|;
comment|// ignored if error_code is not 0
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|transformation_type
block|{
name|TT_USER
init|=
literal|0
block|,
comment|// tranform only the entries of the caller
name|TT_ALL
init|=
literal|1
comment|// transform all entries
block|}
enum|;
end_enum

begin_struct
struct|struct
name|cache_transform_request
block|{
name|char
modifier|*
name|entry
decl_stmt|;
comment|// ignored if entry_length is 0
name|size_t
name|entry_length
decl_stmt|;
name|int
name|transformation_type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_transform_response
block|{
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_write_session_request
block|{
name|char
modifier|*
name|entry
decl_stmt|;
name|size_t
name|entry_length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_write_session_response
block|{
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_write_session_write_request
block|{
name|char
modifier|*
name|data
decl_stmt|;
name|size_t
name|data_size
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_write_session_write_response
block|{
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_read_session_request
block|{
name|char
modifier|*
name|entry
decl_stmt|;
name|size_t
name|entry_length
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_read_session_response
block|{
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cache_mp_read_session_read_response
block|{
name|char
modifier|*
name|data
decl_stmt|;
name|size_t
name|data_size
decl_stmt|;
name|int
name|error_code
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|comm_element_t
block|{
name|CET_UNDEFINED
init|=
literal|0
block|,
name|CET_WRITE_REQUEST
init|=
literal|1
block|,
name|CET_WRITE_RESPONSE
init|=
literal|2
block|,
name|CET_READ_REQUEST
init|=
literal|3
block|,
name|CET_READ_RESPONSE
init|=
literal|4
block|,
name|CET_TRANSFORM_REQUEST
init|=
literal|5
block|,
name|CET_TRANSFORM_RESPONSE
init|=
literal|6
block|,
name|CET_MP_WRITE_SESSION_REQUEST
init|=
literal|7
block|,
name|CET_MP_WRITE_SESSION_RESPONSE
init|=
literal|8
block|,
name|CET_MP_WRITE_SESSION_WRITE_REQUEST
init|=
literal|9
block|,
name|CET_MP_WRITE_SESSION_WRITE_RESPONSE
init|=
literal|10
block|,
name|CET_MP_WRITE_SESSION_CLOSE_NOTIFICATION
init|=
literal|11
block|,
name|CET_MP_WRITE_SESSION_ABANDON_NOTIFICATION
init|=
literal|12
block|,
name|CET_MP_READ_SESSION_REQUEST
init|=
literal|13
block|,
name|CET_MP_READ_SESSION_RESPONSE
init|=
literal|14
block|,
name|CET_MP_READ_SESSION_READ_REQUEST
init|=
literal|15
block|,
name|CET_MP_READ_SESSION_READ_RESPONSE
init|=
literal|16
block|,
name|CET_MP_READ_SESSION_CLOSE_NOTIFICATION
init|=
literal|17
block|,
name|CET_MAX
init|=
literal|18
block|}
enum|;
end_enum

begin_comment
comment|/*  * The comm_element is used as the holder of any known (defined above) data  * type that is to be sent/received.  */
end_comment

begin_struct
struct|struct
name|comm_element
block|{
union|union
block|{
name|struct
name|cache_write_request
name|c_write_request
decl_stmt|;
name|struct
name|cache_write_response
name|c_write_response
decl_stmt|;
name|struct
name|cache_read_request
name|c_read_request
decl_stmt|;
name|struct
name|cache_read_response
name|c_read_response
decl_stmt|;
name|struct
name|cache_transform_request
name|c_transform_request
decl_stmt|;
name|struct
name|cache_transform_response
name|c_transform_response
decl_stmt|;
name|struct
name|cache_mp_write_session_request
name|c_mp_ws_request
decl_stmt|;
name|struct
name|cache_mp_write_session_response
name|c_mp_ws_response
decl_stmt|;
name|struct
name|cache_mp_write_session_write_request
name|c_mp_ws_write_request
decl_stmt|;
name|struct
name|cache_mp_write_session_write_response
name|c_mp_ws_write_response
decl_stmt|;
name|struct
name|cache_mp_read_session_request
name|c_mp_rs_request
decl_stmt|;
name|struct
name|cache_mp_read_session_response
name|c_mp_rs_response
decl_stmt|;
name|struct
name|cache_mp_read_session_read_response
name|c_mp_rs_read_response
decl_stmt|;
block|}
union|;
name|enum
name|comm_element_t
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|init_comm_element
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|,
name|enum
name|comm_element_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_comm_element
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * For each type of data, there is three functions (init/finalize/get), that  * used with comm_element structure  */
end_comment

begin_function_decl
specifier|extern
name|void
name|init_cache_write_request
parameter_list|(
name|struct
name|cache_write_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_write_request
parameter_list|(
name|struct
name|cache_write_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_write_request
modifier|*
name|get_cache_write_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_write_response
parameter_list|(
name|struct
name|cache_write_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_write_response
parameter_list|(
name|struct
name|cache_write_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_write_response
modifier|*
name|get_cache_write_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_read_request
parameter_list|(
name|struct
name|cache_read_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_read_request
parameter_list|(
name|struct
name|cache_read_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_read_request
modifier|*
name|get_cache_read_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_read_response
parameter_list|(
name|struct
name|cache_read_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_read_response
parameter_list|(
name|struct
name|cache_read_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_read_response
modifier|*
name|get_cache_read_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_transform_request
parameter_list|(
name|struct
name|cache_transform_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_transform_request
parameter_list|(
name|struct
name|cache_transform_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_transform_request
modifier|*
name|get_cache_transform_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_transform_response
parameter_list|(
name|struct
name|cache_transform_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_transform_response
parameter_list|(
name|struct
name|cache_transform_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_transform_response
modifier|*
name|get_cache_transform_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_write_session_request
parameter_list|(
name|struct
name|cache_mp_write_session_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_write_session_request
parameter_list|(
name|struct
name|cache_mp_write_session_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_write_session_request
modifier|*
name|get_cache_mp_write_session_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_write_session_response
parameter_list|(
name|struct
name|cache_mp_write_session_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_write_session_response
parameter_list|(
name|struct
name|cache_mp_write_session_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_write_session_response
modifier|*
name|get_cache_mp_write_session_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_write_session_write_request
parameter_list|(
name|struct
name|cache_mp_write_session_write_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_write_session_write_request
parameter_list|(
name|struct
name|cache_mp_write_session_write_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_write_session_write_request
modifier|*
name|get_cache_mp_write_session_write_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_write_session_write_response
parameter_list|(
name|struct
name|cache_mp_write_session_write_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_write_session_write_response
parameter_list|(
name|struct
name|cache_mp_write_session_write_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_write_session_write_response
modifier|*
name|get_cache_mp_write_session_write_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_read_session_request
parameter_list|(
name|struct
name|cache_mp_read_session_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_read_session_request
parameter_list|(
name|struct
name|cache_mp_read_session_request
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_read_session_request
modifier|*
name|get_cache_mp_read_session_request
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_read_session_response
parameter_list|(
name|struct
name|cache_mp_read_session_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_read_session_response
parameter_list|(
name|struct
name|cache_mp_read_session_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_read_session_response
modifier|*
name|get_cache_mp_read_session_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_cache_mp_read_session_read_response
parameter_list|(
name|struct
name|cache_mp_read_session_read_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|finalize_cache_mp_read_session_read_response
parameter_list|(
name|struct
name|cache_mp_read_session_read_response
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cache_mp_read_session_read_response
modifier|*
name|get_cache_mp_read_session_read_response
parameter_list|(
name|struct
name|comm_element
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

