begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2014 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Edward Tomasz Napierala under sponsorship  * from the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EFISIGN_H
end_ifndef

begin_define
define|#
directive|define
name|EFISIGN_H
end_define

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<openssl/evp.h>
end_include

begin_define
define|#
directive|define
name|DIGEST
value|"SHA256"
end_define

begin_define
define|#
directive|define
name|MAX_SECTIONS
value|128
end_define

begin_struct
struct|struct
name|executable
block|{
specifier|const
name|char
modifier|*
name|x_path
decl_stmt|;
name|FILE
modifier|*
name|x_fp
decl_stmt|;
name|char
modifier|*
name|x_buf
decl_stmt|;
name|size_t
name|x_len
decl_stmt|;
comment|/* 	 * Set by pe_parse(), used by digest(). 	 */
name|size_t
name|x_headers_len
decl_stmt|;
name|off_t
name|x_checksum_off
decl_stmt|;
name|size_t
name|x_checksum_len
decl_stmt|;
name|off_t
name|x_certificate_entry_off
decl_stmt|;
name|size_t
name|x_certificate_entry_len
decl_stmt|;
name|int
name|x_nsections
decl_stmt|;
name|off_t
name|x_section_off
index|[
name|MAX_SECTIONS
index|]
decl_stmt|;
name|size_t
name|x_section_len
index|[
name|MAX_SECTIONS
index|]
decl_stmt|;
comment|/* 	 * Computed by digest(). 	 */
name|unsigned
name|char
name|x_digest
index|[
name|EVP_MAX_MD_SIZE
index|]
decl_stmt|;
name|unsigned
name|int
name|x_digest_len
decl_stmt|;
comment|/* 	 * Received from the parent process, which computes it in sign(). 	 */
name|void
modifier|*
name|x_signature
decl_stmt|;
name|size_t
name|x_signature_len
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|FILE
modifier|*
name|checked_fopen
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|send_chunk
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|pipefd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|receive_chunk
parameter_list|(
name|void
modifier|*
modifier|*
name|bufp
parameter_list|,
name|size_t
modifier|*
name|lenp
parameter_list|,
name|int
name|pipefd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|child
parameter_list|(
specifier|const
name|char
modifier|*
name|inpath
parameter_list|,
specifier|const
name|char
modifier|*
name|outpath
parameter_list|,
name|int
name|pipefd
parameter_list|,
name|bool
name|Vflag
parameter_list|,
name|bool
name|vflag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|parse
parameter_list|(
name|struct
name|executable
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|update
parameter_list|(
name|struct
name|executable
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|signature_size
parameter_list|(
specifier|const
name|struct
name|executable
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|show_certificate
parameter_list|(
specifier|const
name|struct
name|executable
modifier|*
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|range_check
parameter_list|(
specifier|const
name|struct
name|executable
modifier|*
name|x
parameter_list|,
name|off_t
name|off
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !EFISIGN_H */
end_comment

end_unit

