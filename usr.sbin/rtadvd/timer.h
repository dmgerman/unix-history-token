begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$FreeBSD$	*/
end_comment

begin_comment
comment|/*	$KAME: timer.h,v 1.3 2000/05/27 11:30:43 jinmei Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (C) 1998 WIDE Project.  * All rights reserved.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the project nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* a< b */
end_comment

begin_define
define|#
directive|define
name|TIMEVAL_LT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a).tv_sec< (b).tv_sec) ||\ 			  (((a).tv_sec == (b).tv_sec)&& \ 			    ((a).tv_usec< (b).tv_usec)))
end_define

begin_comment
comment|/* a<= b */
end_comment

begin_define
define|#
directive|define
name|TIMEVAL_LEQ
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a).tv_sec< (b).tv_sec) ||\ 			   (((a).tv_sec == (b).tv_sec)&&\  			    ((a).tv_usec<= (b).tv_usec)))
end_define

begin_struct
struct|struct
name|rtadvd_timer
block|{
name|struct
name|rtadvd_timer
modifier|*
name|next
decl_stmt|;
name|struct
name|rtadvd_timer
modifier|*
name|prev
decl_stmt|;
name|struct
name|rainfo
modifier|*
name|rai
decl_stmt|;
name|struct
name|timeval
name|tm
decl_stmt|;
name|void
argument_list|(
argument|*expire
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* expiration function */
name|void
modifier|*
name|expire_data
decl_stmt|;
name|void
argument_list|(
argument|*update
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* update function */
name|void
modifier|*
name|update_data
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|void
name|rtadvd_timer_init
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|rtadvd_timer
modifier|*
name|rtadvd_add_timer
name|__P
argument_list|(
operator|(
name|void
argument_list|(
argument|*
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rtadvd_set_timer
name|__P
argument_list|(
operator|(
expr|struct
name|timeval
operator|*
operator|,
expr|struct
name|rtadvd_timer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rtadvd_remove_timer
name|__P
argument_list|(
operator|(
expr|struct
name|rtadvd_timer
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|timeval
modifier|*
name|rtadvd_check_timer
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|timeval
modifier|*
name|rtadvd_timer_rest
name|__P
argument_list|(
operator|(
expr|struct
name|rtadvd_timer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|TIMEVAL_ADD
name|__P
argument_list|(
operator|(
expr|struct
name|timeval
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|TIMEVAL_SUB
name|__P
argument_list|(
operator|(
expr|struct
name|timeval
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|,
expr|struct
name|timeval
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

