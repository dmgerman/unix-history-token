begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$Id: aldap.h,v 1.9 2012/04/30 21:40:03 jmatthew Exp $ */
end_comment

begin_comment
comment|/*	$OpenBSD: aldap.h,v 1.9 2012/04/30 21:40:03 jmatthew Exp $ */
end_comment

begin_comment
comment|/*	$FreeBSD$ */
end_comment

begin_comment
comment|/*  * Copyright (c) 2008 Alexander Schrijver<aschrijver@openbsd.org>  * Copyright (c) 2006, 2007 Marc Balmer<mbalmer@openbsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|"ber.h"
end_include

begin_define
define|#
directive|define
name|LDAP_URL
value|"ldap://"
end_define

begin_define
define|#
directive|define
name|LDAP_PORT
value|389
end_define

begin_define
define|#
directive|define
name|LDAP_PAGED_OID
value|"1.2.840.113556.1.4.319"
end_define

begin_struct
struct|struct
name|aldap
block|{
define|#
directive|define
name|ALDAP_ERR_SUCCESS
value|0
define|#
directive|define
name|ALDAP_ERR_PARSER_ERROR
value|1
define|#
directive|define
name|ALDAP_ERR_INVALID_FILTER
value|2
define|#
directive|define
name|ALDAP_ERR_OPERATION_FAILED
value|3
name|u_int8_t
name|err
decl_stmt|;
name|int
name|msgid
decl_stmt|;
name|struct
name|ber
name|ber
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aldap_page_control
block|{
name|int
name|size
decl_stmt|;
name|char
modifier|*
name|cookie
decl_stmt|;
name|unsigned
name|int
name|cookie_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|aldap_message
block|{
name|int
name|msgid
decl_stmt|;
name|int
name|message_type
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|msg
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|header
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|protocol_op
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|dn
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|long
name|long
name|rescode
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|diagmsg
decl_stmt|;
block|}
name|res
struct|;
struct|struct
block|{
name|struct
name|ber_element
modifier|*
name|iter
decl_stmt|;
name|struct
name|ber_element
modifier|*
name|attrs
decl_stmt|;
block|}
name|search
struct|;
block|}
name|body
union|;
name|struct
name|ber_element
modifier|*
name|references
decl_stmt|;
name|struct
name|aldap_page_control
modifier|*
name|page
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|aldap_protocol
block|{
name|LDAP
block|,
name|LDAPS
block|}
enum|;
end_enum

begin_struct
struct|struct
name|aldap_url
block|{
name|int
name|protocol
decl_stmt|;
name|char
modifier|*
name|host
decl_stmt|;
name|in_port_t
name|port
decl_stmt|;
name|char
modifier|*
name|dn
decl_stmt|;
define|#
directive|define
name|MAXATTR
value|1024
name|char
modifier|*
name|attributes
index|[
name|MAXATTR
index|]
decl_stmt|;
name|int
name|scope
decl_stmt|;
name|char
modifier|*
name|filter
decl_stmt|;
name|char
modifier|*
name|buffer
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|protocol_op
block|{
name|LDAP_REQ_BIND
init|=
literal|0
block|,
name|LDAP_RES_BIND
init|=
literal|1
block|,
name|LDAP_REQ_UNBIND_30
init|=
literal|2
block|,
name|LDAP_REQ_SEARCH
init|=
literal|3
block|,
name|LDAP_RES_SEARCH_ENTRY
init|=
literal|4
block|,
name|LDAP_RES_SEARCH_RESULT
init|=
literal|5
block|,
name|LDAP_REQ_MODIFY
init|=
literal|6
block|,
name|LDAP_RES_MODIFY
init|=
literal|7
block|,
name|LDAP_REQ_ADD
init|=
literal|8
block|,
name|LDAP_RES_ADD
init|=
literal|9
block|,
name|LDAP_REQ_DELETE_30
init|=
literal|10
block|,
name|LDAP_RES_DELETE
init|=
literal|11
block|,
name|LDAP_REQ_MODRDN
init|=
literal|12
block|,
name|LDAP_RES_MODRDN
init|=
literal|13
block|,
name|LDAP_REQ_COMPARE
init|=
literal|14
block|,
name|LDAP_RES_COMPARE
init|=
literal|15
block|,
name|LDAP_REQ_ABANDON_30
init|=
literal|16
block|,
name|LDAP_RES_SEARCH_REFERENCE
init|=
literal|19
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|deref_aliases
block|{
name|LDAP_DEREF_NEVER
init|=
literal|0
block|,
name|LDAP_DEREF_SEARCHING
init|=
literal|1
block|,
name|LDAP_DEREF_FINDING
init|=
literal|2
block|,
name|LDAP_DEREF_ALWAYS
init|=
literal|3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|authentication_choice
block|{
name|LDAP_AUTH_SIMPLE
init|=
literal|0
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|scope
block|{
name|LDAP_SCOPE_BASE
init|=
literal|0
block|,
name|LDAP_SCOPE_ONELEVEL
init|=
literal|1
block|,
name|LDAP_SCOPE_SUBTREE
init|=
literal|2
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|result_code
block|{
name|LDAP_SUCCESS
init|=
literal|0
block|,
name|LDAP_OPERATIONS_ERROR
init|=
literal|1
block|,
name|LDAP_PROTOCOL_ERROR
init|=
literal|2
block|,
name|LDAP_TIMELIMIT_EXCEEDED
init|=
literal|3
block|,
name|LDAP_SIZELIMIT_EXCEEDED
init|=
literal|4
block|,
name|LDAP_COMPARE_FALSE
init|=
literal|5
block|,
name|LDAP_COMPARE_TRUE
init|=
literal|6
block|,
name|LDAP_STRONG_AUTH_NOT_SUPPORTED
init|=
literal|7
block|,
name|LDAP_STRONG_AUTH_REQUIRED
init|=
literal|8
block|,
name|LDAP_REFERRAL
init|=
literal|10
block|,
name|LDAP_ADMINLIMIT_EXCEEDED
init|=
literal|11
block|,
name|LDAP_UNAVAILABLE_CRITICAL_EXTENSION
init|=
literal|12
block|,
name|LDAP_CONFIDENTIALITY_REQUIRED
init|=
literal|13
block|,
name|LDAP_SASL_BIND_IN_PROGRESS
init|=
literal|14
block|,
name|LDAP_NO_SUCH_ATTRIBUTE
init|=
literal|16
block|,
name|LDAP_UNDEFINED_TYPE
init|=
literal|17
block|,
name|LDAP_INAPPROPRIATE_MATCHING
init|=
literal|18
block|,
name|LDAP_CONSTRAINT_VIOLATION
init|=
literal|19
block|,
name|LDAP_TYPE_OR_VALUE_EXISTS
init|=
literal|20
block|,
name|LDAP_INVALID_SYNTAX
init|=
literal|21
block|,
name|LDAP_NO_SUCH_OBJECT
init|=
literal|32
block|,
name|LDAP_ALIAS_PROBLEM
init|=
literal|33
block|,
name|LDAP_INVALID_DN_SYNTAX
init|=
literal|34
block|,
name|LDAP_ALIAS_DEREF_PROBLEM
init|=
literal|36
block|,
name|LDAP_INAPPROPRIATE_AUTH
init|=
literal|48
block|,
name|LDAP_INVALID_CREDENTIALS
init|=
literal|49
block|,
name|LDAP_INSUFFICIENT_ACCESS
init|=
literal|50
block|,
name|LDAP_BUSY
init|=
literal|51
block|,
name|LDAP_UNAVAILABLE
init|=
literal|52
block|,
name|LDAP_UNWILLING_TO_PERFORM
init|=
literal|53
block|,
name|LDAP_LOOP_DETECT
init|=
literal|54
block|,
name|LDAP_NAMING_VIOLATION
init|=
literal|64
block|,
name|LDAP_OBJECT_CLASS_VIOLATION
init|=
literal|65
block|,
name|LDAP_NOT_ALLOWED_ON_NONLEAF
init|=
literal|66
block|,
name|LDAP_NOT_ALLOWED_ON_RDN
init|=
literal|67
block|,
name|LDAP_ALREADY_EXISTS
init|=
literal|68
block|,
name|LDAP_NO_OBJECT_CLASS_MODS
init|=
literal|69
block|,
name|LDAP_AFFECTS_MULTIPLE_DSAS
init|=
literal|71
block|,
name|LDAP_OTHER
init|=
literal|80
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|filter
block|{
name|LDAP_FILT_AND
init|=
literal|0
block|,
name|LDAP_FILT_OR
init|=
literal|1
block|,
name|LDAP_FILT_NOT
init|=
literal|2
block|,
name|LDAP_FILT_EQ
init|=
literal|3
block|,
name|LDAP_FILT_SUBS
init|=
literal|4
block|,
name|LDAP_FILT_GE
init|=
literal|5
block|,
name|LDAP_FILT_LE
init|=
literal|6
block|,
name|LDAP_FILT_PRES
init|=
literal|7
block|,
name|LDAP_FILT_APPR
init|=
literal|8
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|subfilter
block|{
name|LDAP_FILT_SUBS_INIT
init|=
literal|0
block|,
name|LDAP_FILT_SUBS_ANY
init|=
literal|1
block|,
name|LDAP_FILT_SUBS_FIN
init|=
literal|2
block|, }
enum|;
end_enum

begin_function_decl
name|struct
name|aldap
modifier|*
name|aldap_init
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_close
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|aldap_message
modifier|*
name|aldap_parse
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aldap_freemsg
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_bind
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_unbind
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_search
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|enum
name|scope
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|aldap_page_control
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_get_errno
parameter_list|(
name|struct
name|aldap
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_get_resultcode
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|aldap_get_dn
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|aldap_get_diagmsg
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
modifier|*
name|aldap_get_references
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aldap_free_references
parameter_list|(
name|char
modifier|*
modifier|*
name|values
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|int	 aldap_parse_url(char *, struct aldap_url *); void	 aldap_free_url(struct aldap_url *); int	 aldap_search_url(struct aldap *, char *, int, int, int);
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|aldap_count_attrs
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_match_attr
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_first_attr
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_next_attr
parameter_list|(
name|struct
name|aldap_message
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|aldap_free_attr
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|aldap_page_control
modifier|*
name|aldap_parse_page_control
parameter_list|(
name|struct
name|ber_element
modifier|*
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|aldap_freepage
parameter_list|(
name|struct
name|aldap_page_control
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

