begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *	    Written by Toshiharu OHNO (tony-o@iij.ad.jp)  *  *   Copyright (C) 1993, Internet Initiative Japan, Inc. All rights reserverd.  *  * Redistribution and use in source and binary forms are permitted  * provided that the above copyright notice and this paragraph are  * duplicated in all such forms and that any documentation,  * advertising materials, and other materials related to such  * distribution and use acknowledge that the software was developed  * by the Internet Initiative Japan.  The name of the  * IIJ may not be used to endorse or promote products derived  * from this software without specific prior written permission.  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED  * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.  *  * $Id: command.h,v 1.15.2.3 1999/05/02 08:59:38 brian Exp $  *  *	TODO:  */
end_comment

begin_struct_decl
struct_decl|struct
name|cmdtab
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|bundle
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|datalink
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|prompt
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|cmdargs
block|{
name|struct
name|cmdtab
specifier|const
modifier|*
name|cmdtab
decl_stmt|;
comment|/* The entire command table */
name|struct
name|cmdtab
specifier|const
modifier|*
name|cmd
decl_stmt|;
comment|/* This command entry */
name|int
name|argc
decl_stmt|;
comment|/* Number of arguments (excluding cmd */
name|int
name|argn
decl_stmt|;
comment|/* Argument to start processing from */
name|char
specifier|const
modifier|*
specifier|const
modifier|*
name|argv
decl_stmt|;
comment|/* Arguments */
name|struct
name|bundle
modifier|*
name|bundle
decl_stmt|;
comment|/* Our bundle */
name|struct
name|datalink
modifier|*
name|cx
decl_stmt|;
comment|/* Our context */
name|struct
name|prompt
modifier|*
name|prompt
decl_stmt|;
comment|/* Who executed us */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cmdtab
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|alias
decl_stmt|;
name|int
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|struct
name|cmdargs
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|u_char
name|lauth
decl_stmt|;
specifier|const
name|char
modifier|*
name|helpmes
decl_stmt|;
specifier|const
name|char
modifier|*
name|syntax
decl_stmt|;
specifier|const
name|void
modifier|*
name|args
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NEG_ACCEPTED
value|(1)
end_define

begin_define
define|#
directive|define
name|NEG_ENABLED
value|(2)
end_define

begin_define
define|#
directive|define
name|IsAccepted
parameter_list|(
name|x
parameter_list|)
value|((x)& NEG_ACCEPTED)
end_define

begin_define
define|#
directive|define
name|IsEnabled
parameter_list|(
name|x
parameter_list|)
value|((x)& NEG_ENABLED)
end_define

begin_decl_stmt
specifier|extern
specifier|const
name|char
name|Version
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
name|VersionDate
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|command_Expand
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
specifier|const
modifier|*
specifier|const
modifier|*
parameter_list|,
name|struct
name|bundle
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pid_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|command_Interpret
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
name|vector
index|[
name|MAXARGS
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|command_Run
parameter_list|(
name|struct
name|bundle
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
specifier|const
modifier|*
specifier|const
modifier|*
parameter_list|,
name|struct
name|prompt
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|datalink
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|command_Decode
parameter_list|(
name|struct
name|bundle
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|prompt
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|link
modifier|*
name|command_ChooseLink
parameter_list|(
name|struct
name|cmdargs
specifier|const
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|command_ShowNegval
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

end_unit

