begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2005 Free Software Foundation, Inc.    Contributed by Richard Henderson<rth@redhat.com>.     This file is part of the GNU OpenMP Library (libgomp).     Libgomp is free software; you can redistribute it and/or modify it    under the terms of the GNU Lesser General Public License as published by    the Free Software Foundation; either version 2.1 of the License, or    (at your option) any later version.     Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS    FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for    more details.     You should have received a copy of the GNU Lesser General Public License     along with libgomp; see the file COPYING.LIB.  If not, write to the    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,    MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with other files, some    of which are compiled with GCC, to produce an executable, this library    does not by itself cause the resulting executable to be covered by the    GNU General Public License.  This exception does not however invalidate    any other reasons why the executable file might be covered by the GNU    General Public License.  */
end_comment

begin_comment
comment|/* Provide target-specific access to the futex system call.  */
end_comment

begin_include
include|#
directive|include
file|<sys/syscall.h>
end_include

begin_define
define|#
directive|define
name|FUTEX_WAIT
value|0
end_define

begin_define
define|#
directive|define
name|FUTEX_WAKE
value|1
end_define

begin_function
specifier|static
specifier|inline
name|void
name|sys_futex0
parameter_list|(
name|int
modifier|*
name|addr
parameter_list|,
name|int
name|op
parameter_list|,
name|int
name|val
parameter_list|)
block|{
specifier|register
name|long
name|int
name|r0
name|__asm__
argument_list|(
literal|"r0"
argument_list|)
decl_stmt|;
specifier|register
name|long
name|int
name|r3
name|__asm__
argument_list|(
literal|"r3"
argument_list|)
decl_stmt|;
specifier|register
name|long
name|int
name|r4
name|__asm__
argument_list|(
literal|"r4"
argument_list|)
decl_stmt|;
specifier|register
name|long
name|int
name|r5
name|__asm__
argument_list|(
literal|"r5"
argument_list|)
decl_stmt|;
specifier|register
name|long
name|int
name|r6
name|__asm__
argument_list|(
literal|"r6"
argument_list|)
decl_stmt|;
name|r0
operator|=
name|SYS_futex
expr_stmt|;
name|r3
operator|=
operator|(
name|long
operator|)
name|addr
expr_stmt|;
name|r4
operator|=
name|op
expr_stmt|;
name|r5
operator|=
name|val
expr_stmt|;
name|r6
operator|=
literal|0
expr_stmt|;
comment|/* ??? The powerpc64 sysdep.h file clobbers ctr; the powerpc32 sysdep.h      doesn't.  It doesn't much matter for us.  In the interest of unity,      go ahead and clobber it always.  */
asm|__asm volatile ("sc"
block|:
literal|"=r"
operator|(
name|r0
operator|)
operator|,
literal|"=r"
operator|(
name|r3
operator|)
operator|,
literal|"=r"
operator|(
name|r4
operator|)
operator|,
literal|"=r"
operator|(
name|r5
operator|)
operator|,
literal|"=r"
operator|(
name|r6
operator|)
operator|:
literal|"r"
operator|(
name|r0
operator|)
operator|,
literal|"r"
operator|(
name|r3
operator|)
operator|,
literal|"r"
operator|(
name|r4
operator|)
operator|,
literal|"r"
operator|(
name|r5
operator|)
operator|,
literal|"r"
operator|(
name|r6
operator|)
operator|:
literal|"r7"
operator|,
literal|"r8"
operator|,
literal|"r9"
operator|,
literal|"r10"
operator|,
literal|"r11"
operator|,
literal|"r12"
operator|,
literal|"cr0"
operator|,
literal|"ctr"
operator|,
literal|"memory"
block|)
function|;
end_function

begin_function
unit|}  static
specifier|inline
name|void
name|futex_wait
parameter_list|(
name|int
modifier|*
name|addr
parameter_list|,
name|int
name|val
parameter_list|)
block|{
name|sys_futex0
argument_list|(
name|addr
argument_list|,
name|FUTEX_WAIT
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|futex_wake
parameter_list|(
name|int
modifier|*
name|addr
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|sys_futex0
argument_list|(
name|addr
argument_list|,
name|FUTEX_WAKE
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

