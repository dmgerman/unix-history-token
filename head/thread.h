begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2014 Garrett D'Amore<garrett@damore.org>  *  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_THREAD_H
end_ifndef

begin_define
define|#
directive|define
name|_THREAD_H
end_define

begin_comment
comment|/*  * thread.h:  * definitions needed to use the thread interface except synchronization.  * use<synch.h> for thread synchronization.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ASM
end_ifndef

begin_include
include|#
directive|include
file|<sys/signal.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<synch.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ASM */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ASM
typedef|typedef
name|unsigned
name|int
name|thread_t
typedef|;
typedef|typedef
name|unsigned
name|int
name|thread_key_t
typedef|;
specifier|extern
name|int
name|thr_create
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|long
parameter_list|,
name|thread_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_join
parameter_list|(
name|thread_t
parameter_list|,
name|thread_t
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_setconcurrency
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_getconcurrency
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|thr_exit
argument_list|(
name|void
operator|*
argument_list|)
name|__NORETURN
decl_stmt|;
specifier|extern
name|thread_t
name|thr_self
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * the definition of thr_sigsetmask() is not strict ansi-c since sigset_t is  * not in the strict ansi-c name space. Hence, include the prototype for  * thr_sigsetmask() only if strict ansi-c conformance is not turned on.  */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_STRICT_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
specifier|extern
name|int
name|thr_sigsetmask
parameter_list|(
name|int
parameter_list|,
specifier|const
name|sigset_t
modifier|*
parameter_list|,
name|sigset_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * the definition of thr_stksegment() is not strict ansi-c since stack_t is  * not in the strict ansi-c name space. Hence, include the prototype for  * thr_stksegment() only if strict ansi-c conformance is not turned on.  */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_STRICT_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|__EXTENSIONS__
argument_list|)
specifier|extern
name|int
name|thr_stksegment
parameter_list|(
name|stack_t
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
specifier|extern
name|int
name|thr_main
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_kill
parameter_list|(
name|thread_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_suspend
parameter_list|(
name|thread_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_continue
parameter_list|(
name|thread_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|thr_yield
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_setprio
parameter_list|(
name|thread_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_getprio
parameter_list|(
name|thread_t
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_keycreate
parameter_list|(
name|thread_key_t
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_keycreate_once
parameter_list|(
name|thread_key_t
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_setspecific
parameter_list|(
name|thread_key_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|thr_getspecific
parameter_list|(
name|thread_key_t
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|thr_min_stack
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* _ASM */
define|#
directive|define
name|THR_MIN_STACK
value|thr_min_stack()
comment|/*  * thread flags (one word bit mask)  */
comment|/*  * POSIX.1c Note:  * THR_BOUND is defined same as PTHREAD_SCOPE_SYSTEM in<pthread.h>  * THR_DETACHED is defined same as PTHREAD_CREATE_DETACHED in<pthread.h>  * Any changes in these definitions should be reflected in<pthread.h>  */
define|#
directive|define
name|THR_BOUND
value|0x00000001
comment|/* = PTHREAD_SCOPE_SYSTEM */
define|#
directive|define
name|THR_NEW_LWP
value|0x00000002
define|#
directive|define
name|THR_DETACHED
value|0x00000040
comment|/* = PTHREAD_CREATE_DETACHED */
define|#
directive|define
name|THR_SUSPENDED
value|0x00000080
define|#
directive|define
name|THR_DAEMON
value|0x00000100
comment|/*  * The key to be created by thr_keycreate_once()  * must be statically initialized with THR_ONCE_KEY.  * This must be the same as PTHREAD_ONCE_KEY_NP in<pthread.h>  */
define|#
directive|define
name|THR_ONCE_KEY
value|(thread_key_t)(-1)
comment|/*  * The available register states returned by thr_getstate().  */
define|#
directive|define
name|TRS_VALID
value|0
define|#
directive|define
name|TRS_NONVOLATILE
value|1
define|#
directive|define
name|TRS_LWPID
value|2
define|#
directive|define
name|TRS_INVALID
value|3
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _THREAD_H */
end_comment

end_unit

