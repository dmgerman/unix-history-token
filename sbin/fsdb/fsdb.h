begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: fsdb.h,v 1.2 1995/10/08 23:18:11 thorpej Exp $	*/
end_comment

begin_comment
comment|/*  *  Copyright (c) 1995 John T. Kohl  *  All rights reserved.  *   *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  1. Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  2. Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in the  *     documentation and/or other materials provided with the distribution.  *  3. The name of the author may not be used to endorse or promote products  *     derived from this software without specific prior written permission.  *   * THIS SOFTWARE IS PROVIDED BY THE AUTHOR `AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|bread
name|__P
argument_list|(
operator|(
name|int
name|fd
operator|,
name|char
operator|*
name|buf
operator|,
name|daddr_t
name|blk
operator|,
name|long
name|size
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bwrite
name|__P
argument_list|(
operator|(
name|int
name|fd
operator|,
name|char
operator|*
name|buf
operator|,
name|daddr_t
name|blk
operator|,
name|long
name|size
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|rwerror
name|__P
argument_list|(
operator|(
name|char
operator|*
name|mesg
operator|,
name|daddr_t
name|blk
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|reply
name|__P
argument_list|(
operator|(
name|char
operator|*
name|question
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|dev_bsize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|secsize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fsmodified
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|fsfd
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|cmdtable
block|{
specifier|const
name|char
modifier|*
name|cmd
decl_stmt|;
specifier|const
name|char
modifier|*
name|helptxt
decl_stmt|;
name|unsigned
name|int
name|minargc
decl_stmt|;
name|unsigned
name|int
name|maxargc
decl_stmt|;
name|unsigned
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|FL_RO
value|0x0000
comment|/* for symmetry */
define|#
directive|define
name|FL_WR
value|0x0001
comment|/* wants to write */
name|int
argument_list|(
argument|*handler
argument_list|)
name|__P
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
name|argv
index|[]
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|dinode
modifier|*
name|curinode
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ino_t
name|curinum
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|argcount
name|__P
argument_list|(
operator|(
expr|struct
name|cmdtable
operator|*
name|cmdp
operator|,
name|int
name|argc
operator|,
name|char
operator|*
name|argv
index|[]
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
modifier|*
name|crack
name|__P
argument_list|(
operator|(
name|char
operator|*
name|line
operator|,
name|int
operator|*
name|argc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|printstat
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|cp
operator|,
name|ino_t
name|inum
operator|,
expr|struct
name|dinode
operator|*
name|dp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|printactive
name|__P
argument_list|(
operator|(
name|int
name|doblocks
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|checkactive
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|checkactivedir
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

