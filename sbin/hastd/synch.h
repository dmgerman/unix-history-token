begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009-2010 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Pawel Jakub Dawidek under sponsorship from  * the FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYNCH_H_
end_ifndef

begin_define
define|#
directive|define
name|_SYNCH_H_
end_define

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_function
specifier|static
name|__inline
name|void
name|mtx_init
parameter_list|(
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_mutex_init
argument_list|(
name|lock
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mtx_lock
parameter_list|(
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_mutex_lock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|bool
name|mtx_trylock
parameter_list|(
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_mutex_trylock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
operator|||
name|error
operator|==
name|EBUSY
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|mtx_unlock
parameter_list|(
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_mutex_unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|rw_init
parameter_list|(
name|pthread_rwlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_rwlock_init
argument_list|(
name|lock
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|rw_rlock
parameter_list|(
name|pthread_rwlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_rwlock_rdlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|rw_wlock
parameter_list|(
name|pthread_rwlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_rwlock_wrlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|rw_unlock
parameter_list|(
name|pthread_rwlock_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_rwlock_unlock
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cv_init
parameter_list|(
name|pthread_cond_t
modifier|*
name|cv
parameter_list|)
block|{
name|pthread_condattr_t
name|attr
decl_stmt|;
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_condattr_init
argument_list|(
operator|&
name|attr
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
name|error
operator|=
name|pthread_condattr_setclock
argument_list|(
operator|&
name|attr
argument_list|,
name|CLOCK_MONOTONIC
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
name|error
operator|=
name|pthread_cond_init
argument_list|(
name|cv
argument_list|,
operator|&
name|attr
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cv_wait
parameter_list|(
name|pthread_cond_t
modifier|*
name|cv
parameter_list|,
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_cond_wait
argument_list|(
name|cv
argument_list|,
name|lock
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|bool
name|cv_timedwait
parameter_list|(
name|pthread_cond_t
modifier|*
name|cv
parameter_list|,
name|pthread_mutex_t
modifier|*
name|lock
parameter_list|,
name|int
name|timeout
parameter_list|)
block|{
name|struct
name|timespec
name|ts
decl_stmt|;
name|int
name|error
decl_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
name|cv_wait
argument_list|(
name|cv
argument_list|,
name|lock
argument_list|)
expr_stmt|;
return|return
operator|(
name|false
operator|)
return|;
block|}
name|error
operator|=
name|clock_gettime
argument_list|(
name|CLOCK_MONOTONIC
argument_list|,
operator|&
name|ts
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ts
operator|.
name|tv_sec
operator|+=
name|timeout
expr_stmt|;
name|error
operator|=
name|pthread_cond_timedwait
argument_list|(
name|cv
argument_list|,
name|lock
argument_list|,
operator|&
name|ts
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
operator|||
name|error
operator|==
name|ETIMEDOUT
argument_list|)
expr_stmt|;
return|return
operator|(
name|error
operator|==
name|ETIMEDOUT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cv_signal
parameter_list|(
name|pthread_cond_t
modifier|*
name|cv
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_cond_signal
argument_list|(
name|cv
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|cv_broadcast
parameter_list|(
name|pthread_cond_t
modifier|*
name|cv
parameter_list|)
block|{
name|int
name|error
decl_stmt|;
name|error
operator|=
name|pthread_cond_broadcast
argument_list|(
name|cv
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|error
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_SYNCH_H_ */
end_comment

end_unit

