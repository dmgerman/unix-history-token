begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// target-reloc.h -- target specific relocation support  -*- C++ -*-
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GOLD_TARGET_RELOC_H
end_ifndef

begin_define
define|#
directive|define
name|GOLD_TARGET_RELOC_H
end_define

begin_include
include|#
directive|include
file|"elfcpp.h"
end_include

begin_include
include|#
directive|include
file|"object.h"
end_include

begin_include
include|#
directive|include
file|"symtab.h"
end_include

begin_include
include|#
directive|include
file|"reloc-types.h"
end_include

begin_decl_stmt
name|namespace
name|gold
block|{
comment|// This function implements the generic part of reloc scanning.  This
comment|// is an inline function which takes a class whose operator()
comment|// implements the machine specific part of scanning.  We do it this
comment|// way to avoidmaking a function call for each relocation, and to
comment|// avoid repeating the generic code for each target.
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|Target_type
operator|,
name|int
name|sh_type
operator|,
name|typename
name|Scan
operator|>
specifier|inline
name|void
name|scan_relocs
argument_list|(
argument|const General_options& options
argument_list|,
argument|Symbol_table* symtab
argument_list|,
argument|Layout* layout
argument_list|,
argument|Target_type* target
argument_list|,
argument|Sized_relobj<size
argument_list|,
argument|big_endian>* object
argument_list|,
argument|unsigned int data_shndx
argument_list|,
argument|const unsigned char* prelocs
argument_list|,
argument|size_t reloc_count
argument_list|,
argument|size_t local_count
argument_list|,
argument|const unsigned char* plocal_syms
argument_list|,
argument|Symbol** global_syms
argument_list|)
block|{
typedef|typedef
name|typename
name|Reloc_types
operator|<
name|sh_type
operator|,
name|size
operator|,
name|big_endian
operator|>
operator|::
name|Reloc
name|Reltype
expr_stmt|;
specifier|const
name|int
name|reloc_size
operator|=
name|Reloc_types
operator|<
name|sh_type
operator|,
name|size
operator|,
name|big_endian
operator|>
operator|::
name|reloc_size
expr_stmt|;
specifier|const
name|int
name|sym_size
init|=
name|elfcpp
operator|::
name|Elf_sizes
operator|<
name|size
operator|>
operator|::
name|sym_size
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reloc_count
condition|;
operator|++
name|i
operator|,
name|prelocs
operator|+=
name|reloc_size
control|)
block|{
name|Reltype
name|reloc
parameter_list|(
name|prelocs
parameter_list|)
function_decl|;
name|typename
name|elfcpp
operator|::
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|r_info
operator|=
name|reloc
operator|.
name|get_r_info
argument_list|()
expr_stmt|;
name|unsigned
name|int
name|r_sym
init|=
name|elfcpp
operator|::
name|elf_r_sym
operator|<
name|size
operator|>
operator|(
name|r_info
operator|)
decl_stmt|;
name|unsigned
name|int
name|r_type
init|=
name|elfcpp
operator|::
name|elf_r_type
operator|<
name|size
operator|>
operator|(
name|r_info
operator|)
decl_stmt|;
if|if
condition|(
name|r_sym
operator|<
name|local_count
condition|)
block|{
name|gold_assert
argument_list|(
name|plocal_syms
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|typename
name|elfcpp
operator|::
name|Sym
operator|<
name|size
operator|,
name|big_endian
operator|>
name|lsym
argument_list|(
name|plocal_syms
operator|+
name|r_sym
operator|*
name|sym_size
argument_list|)
expr_stmt|;
specifier|const
name|unsigned
name|int
name|shndx
init|=
name|lsym
operator|.
name|get_st_shndx
argument_list|()
decl_stmt|;
if|if
condition|(
name|shndx
operator|<
name|elfcpp
operator|::
name|SHN_LORESERVE
operator|&&
name|shndx
operator|!=
name|elfcpp
operator|::
name|SHN_UNDEF
operator|&&
operator|!
name|object
operator|->
name|is_section_included
argument_list|(
name|lsym
operator|.
name|get_st_shndx
argument_list|()
argument_list|)
condition|)
block|{
comment|// RELOC is a relocation against a local symbol in a
comment|// section we are discarding.  We can ignore this
comment|// relocation.  It will eventually become a reloc
comment|// against the value zero.
comment|//
comment|// FIXME: We should issue a warning if this is an
comment|// allocated section; is this the best place to do it?
comment|//
comment|// FIXME: The old GNU linker would in some cases look
comment|// for the linkonce section which caused this section to
comment|// be discarded, and, if the other section was the same
comment|// size, change the reloc to refer to the other section.
comment|// That seems risky and weird to me, and I don't know of
comment|// any case where it is actually required.
continue|continue;
block|}
name|scan
operator|.
name|local
argument_list|(
name|options
argument_list|,
name|symtab
argument_list|,
name|layout
argument_list|,
name|target
argument_list|,
name|object
argument_list|,
name|data_shndx
argument_list|,
name|reloc
argument_list|,
name|r_type
argument_list|,
name|lsym
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Symbol
modifier|*
name|gsym
init|=
name|global_syms
index|[
name|r_sym
operator|-
name|local_count
index|]
decl_stmt|;
name|gold_assert
argument_list|(
name|gsym
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|gsym
operator|->
name|is_forwarder
argument_list|()
condition|)
name|gsym
operator|=
name|symtab
operator|->
name|resolve_forwards
argument_list|(
name|gsym
argument_list|)
expr_stmt|;
name|scan
operator|.
name|global
argument_list|(
name|options
argument_list|,
name|symtab
argument_list|,
name|layout
argument_list|,
name|target
argument_list|,
name|object
argument_list|,
name|data_shndx
argument_list|,
name|reloc
argument_list|,
name|r_type
argument_list|,
name|gsym
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
comment|// This function implements the generic part of relocation processing.
end_comment

begin_comment
comment|// This is an inline function which take a class whose operator()
end_comment

begin_comment
comment|// implements the machine specific part of relocation.  We do it this
end_comment

begin_comment
comment|// way to avoid making a function call for each relocation, and to
end_comment

begin_comment
comment|// avoid repeating the generic relocation handling code for each
end_comment

begin_comment
comment|// target.
end_comment

begin_comment
comment|// SIZE is the ELF size: 32 or 64.  BIG_ENDIAN is the endianness of
end_comment

begin_comment
comment|// the data.  SH_TYPE is the section type: SHT_REL or SHT_RELA.
end_comment

begin_comment
comment|// RELOCATE implements operator() to do a relocation.
end_comment

begin_comment
comment|// PRELOCS points to the relocation data.  RELOC_COUNT is the number
end_comment

begin_comment
comment|// of relocs.  VIEW is the section data, VIEW_ADDRESS is its memory
end_comment

begin_comment
comment|// address, and VIEW_SIZE is the size.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|size
operator|,
name|bool
name|big_endian
operator|,
name|typename
name|Target_type
operator|,
name|int
name|sh_type
operator|,
name|typename
name|Relocate
operator|>
specifier|inline
name|void
name|relocate_section
argument_list|(
argument|const Relocate_info<size
argument_list|,
argument|big_endian>* relinfo
argument_list|,
argument|Target_type* target
argument_list|,
argument|const unsigned char* prelocs
argument_list|,
argument|size_t reloc_count
argument_list|,
argument|unsigned char* view
argument_list|,
argument|typename elfcpp::Elf_types<size>::Elf_Addr view_address
argument_list|,
argument|off_t view_size
argument_list|)
block|{
typedef|typedef
name|typename
name|Reloc_types
operator|<
name|sh_type
operator|,
name|size
operator|,
name|big_endian
operator|>
operator|::
name|Reloc
name|Reltype
expr_stmt|;
specifier|const
name|int
name|reloc_size
operator|=
name|Reloc_types
operator|<
name|sh_type
operator|,
name|size
operator|,
name|big_endian
operator|>
operator|::
name|reloc_size
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Relocate
name|relocate
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|int
name|local_count
init|=
name|relinfo
operator|->
name|local_symbol_count
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|typename
name|Sized_relobj
operator|<
name|size
operator|,
name|big_endian
operator|>
operator|::
name|Local_values
operator|*
name|local_values
operator|=
name|relinfo
operator|->
name|local_values
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Symbol
modifier|*
specifier|const
modifier|*
name|global_syms
init|=
name|relinfo
operator|->
name|symbols
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reloc_count
condition|;
operator|++
name|i
operator|,
name|prelocs
operator|+=
name|reloc_size
control|)
block|{
name|Reltype
name|reloc
parameter_list|(
name|prelocs
parameter_list|)
function_decl|;
name|off_t
name|offset
init|=
name|reloc
operator|.
name|get_r_offset
argument_list|()
decl_stmt|;
name|typename
name|elfcpp
operator|::
name|Elf_types
operator|<
name|size
operator|>
operator|::
name|Elf_WXword
name|r_info
operator|=
name|reloc
operator|.
name|get_r_info
argument_list|()
expr_stmt|;
name|unsigned
name|int
name|r_sym
init|=
name|elfcpp
operator|::
name|elf_r_sym
operator|<
name|size
operator|>
operator|(
name|r_info
operator|)
decl_stmt|;
name|unsigned
name|int
name|r_type
init|=
name|elfcpp
operator|::
name|elf_r_type
operator|<
name|size
operator|>
operator|(
name|r_info
operator|)
decl_stmt|;
specifier|const
name|Sized_symbol
operator|<
name|size
operator|>
operator|*
name|sym
expr_stmt|;
name|Symbol_value
operator|<
name|size
operator|>
name|symval
expr_stmt|;
specifier|const
name|Symbol_value
operator|<
name|size
operator|>
operator|*
name|psymval
expr_stmt|;
if|if
condition|(
name|r_sym
operator|<
name|local_count
condition|)
block|{
name|sym
operator|=
name|NULL
expr_stmt|;
name|psymval
operator|=
operator|&
operator|(
operator|*
name|local_values
operator|)
index|[
name|r_sym
index|]
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|Symbol
modifier|*
name|gsym
init|=
name|global_syms
index|[
name|r_sym
operator|-
name|local_count
index|]
decl_stmt|;
name|gold_assert
argument_list|(
name|gsym
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|gsym
operator|->
name|is_forwarder
argument_list|()
condition|)
name|gsym
operator|=
name|relinfo
operator|->
name|symtab
operator|->
name|resolve_forwards
argument_list|(
name|gsym
argument_list|)
expr_stmt|;
name|sym
operator|=
name|static_cast
operator|<
specifier|const
name|Sized_symbol
operator|<
name|size
operator|>
operator|*
operator|>
operator|(
name|gsym
operator|)
expr_stmt|;
if|if
condition|(
name|sym
operator|->
name|has_symtab_index
argument_list|()
condition|)
name|symval
operator|.
name|set_output_symtab_index
argument_list|(
name|sym
operator|->
name|symtab_index
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|symval
operator|.
name|set_no_output_symtab_entry
argument_list|()
expr_stmt|;
name|symval
operator|.
name|set_output_value
argument_list|(
name|sym
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|psymval
operator|=
operator|&
name|symval
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|relocate
operator|.
name|relocate
argument_list|(
name|relinfo
argument_list|,
name|target
argument_list|,
name|i
argument_list|,
name|reloc
argument_list|,
name|r_type
argument_list|,
name|sym
argument_list|,
name|psymval
argument_list|,
name|view
operator|+
name|offset
argument_list|,
name|view_address
operator|+
name|offset
argument_list|,
name|view_size
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|>=
name|view_size
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|_
argument_list|(
literal|"%s: %s: reloc has bad offset %zu\n"
argument_list|)
argument_list|,
name|program_name
argument_list|,
name|relinfo
operator|->
name|location
argument_list|(
name|i
argument_list|,
name|offset
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|,
name|static_cast
operator|<
name|size_t
operator|>
operator|(
name|offset
operator|)
argument_list|)
expr_stmt|;
name|gold_exit
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sym
operator|!=
name|NULL
operator|&&
name|sym
operator|->
name|is_undefined
argument_list|()
operator|&&
name|sym
operator|->
name|binding
argument_list|()
operator|!=
name|elfcpp
operator|::
name|STB_WEAK
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
name|_
argument_list|(
literal|"%s: %s: undefined reference to '%s'\n"
argument_list|)
argument_list|,
name|program_name
argument_list|,
name|relinfo
operator|->
name|location
argument_list|(
name|i
argument_list|,
name|offset
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|,
name|sym
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
comment|// gold_exit(false);
block|}
if|if
condition|(
name|sym
operator|!=
name|NULL
operator|&&
name|sym
operator|->
name|has_warning
argument_list|()
condition|)
name|relinfo
operator|->
name|symtab
operator|->
name|issue_warning
argument_list|(
name|sym
argument_list|,
name|relinfo
operator|->
name|location
argument_list|(
name|i
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_for

begin_comment
unit|}  }
comment|// End namespace gold.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(GOLD_TARGET_RELOC_H)
end_comment

end_unit

