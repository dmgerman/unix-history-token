begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// strtab.h -- manage an ELF string table for gold   -*- C++ -*-
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GOLD_STRTAB_H
end_ifndef

begin_define
define|#
directive|define
name|GOLD_STRTAB_H
end_define

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|gold
block|{
comment|// This class holds an ELF string table.  We keep a reference count
comment|// for each string, which we use to determine which strings are
comment|// actually required at the end.  When all operations are done, the
comment|// string table is finalized, which sets the offsets to use for each
comment|// string.
name|class
name|Strtab
block|{
name|public
label|:
name|Strtab
argument_list|()
expr_stmt|;
operator|~
name|Strtab
argument_list|()
expr_stmt|;
name|Strtab_ref
modifier|*
name|add
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|Strtab_ref
modifier|*
name|add
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
block|{
return|return
name|this
operator|->
name|add
argument_list|(
name|s
operator|.
name|c_str
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
name|Strtab
argument_list|(
specifier|const
name|Strtab
operator|&
argument_list|)
expr_stmt|;
name|Strtab
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Strtab
operator|&
operator|)
decl_stmt|;
struct|struct
name|strtab_hash
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
argument_list|(
specifier|const
name|char
operator|*
name|p
argument_list|)
expr_stmt|;
block|}
struct|;
struct|struct
name|strtab_eq
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|char
operator|*
name|p1
operator|,
specifier|const
name|char
operator|*
name|p2
operator|)
block|{
return|return
name|strcmp
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|==
literal|0
return|;
block|}
block|}
struct|;
name|Unordered_map
operator|<
specifier|const
name|char
operator|*
operator|,
name|Strtab_ref
operator|*
operator|,
name|strtab_hash
operator|,
name|strtab_eq
operator|,
name|std
operator|::
name|allocator
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|char
operator|*
specifier|const
operator|,
name|Strtab_ref
operator|*
operator|>
expr|>
operator|,
name|true
operator|>
name|strings_
expr_stmt|;
block|}
empty_stmt|;
comment|// Users of Strtab work with pointers to Strtab_ref structures.  These
comment|// are allocated via new and should be deleted if the string is no
comment|// longer needed.
name|class
name|Strtab_ref
block|{
name|public
label|:
operator|~
name|Strtab_ref
argument_list|()
expr_stmt|;
specifier|const
name|char
operator|*
name|str
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|Strtab_ref
argument_list|(
specifier|const
name|Strtab_ref
operator|&
argument_list|)
expr_stmt|;
name|Strtab_ref
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Strtab_ref
operator|&
operator|)
decl_stmt|;
name|int
name|refs_
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End namespace gold.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(GOLD_STRTAB_H)
end_comment

end_unit

