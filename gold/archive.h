begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// archive.h -- archive support for gold      -*- C++ -*-
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GOLD_ARCHIVE_H
end_ifndef

begin_define
define|#
directive|define
name|GOLD_ARCHIVE_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"workqueue.h"
end_include

begin_decl_stmt
name|namespace
name|gold
block|{
name|class
name|General_options
decl_stmt|;
name|class
name|Input_file
decl_stmt|;
name|class
name|Input_objects
decl_stmt|;
name|class
name|Input_group
decl_stmt|;
name|class
name|Layout
decl_stmt|;
name|class
name|Symbol_table
decl_stmt|;
comment|// This class represents an archive--generally a libNAME.a file.
comment|// Archives have a symbol table and a list of objects.
name|class
name|Archive
block|{
name|public
label|:
name|Archive
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|,
name|Input_file
operator|*
name|input_file
argument_list|)
operator|:
name|name_
argument_list|(
name|name
argument_list|)
operator|,
name|input_file_
argument_list|(
name|input_file
argument_list|)
operator|,
name|armap_
argument_list|()
operator|,
name|extended_names_
argument_list|()
block|{ }
comment|// The length of the magic string at the start of an archive.
specifier|static
specifier|const
name|int
name|sarmag
operator|=
literal|8
expr_stmt|;
comment|// The magic string at the start of an archive.
specifier|static
specifier|const
name|char
name|armag
index|[
name|sarmag
index|]
decl_stmt|;
comment|// The string expected at the end of an archive member header.
specifier|static
specifier|const
name|char
name|arfmag
index|[
literal|2
index|]
decl_stmt|;
comment|// The name of the object.
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|name_
return|;
block|}
comment|// Set up the archive: read the symbol map.
name|void
name|setup
parameter_list|()
function_decl|;
comment|// Get a reference to the underlying file.
name|File_read
modifier|&
name|file
parameter_list|()
block|{
return|return
name|this
operator|->
name|input_file_
operator|->
name|file
argument_list|()
return|;
block|}
comment|// Lock the underlying file.
name|void
name|lock
parameter_list|()
block|{
name|this
operator|->
name|input_file_
operator|->
name|file
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
comment|// Unlock the underlying file.
name|void
name|unlock
parameter_list|()
block|{
name|this
operator|->
name|input_file_
operator|->
name|file
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Return whether the underlying file is locked.
name|bool
name|is_locked
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|input_file_
operator|->
name|file
argument_list|()
operator|.
name|is_locked
argument_list|()
return|;
block|}
comment|// Select members from the archive as needed and add them to the
comment|// link.
name|void
name|add_symbols
parameter_list|(
specifier|const
name|General_options
modifier|&
parameter_list|,
name|Symbol_table
modifier|*
parameter_list|,
name|Layout
modifier|*
parameter_list|,
name|Input_objects
modifier|*
parameter_list|)
function_decl|;
name|private
label|:
name|Archive
argument_list|(
specifier|const
name|Archive
operator|&
argument_list|)
expr_stmt|;
name|Archive
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Archive
operator|&
operator|)
decl_stmt|;
struct_decl|struct
name|Archive_header
struct_decl|;
comment|// Get a view into the underlying file.
specifier|const
name|unsigned
name|char
modifier|*
name|get_view
parameter_list|(
name|off_t
name|start
parameter_list|,
name|off_t
name|size
parameter_list|)
block|{
return|return
name|this
operator|->
name|input_file_
operator|->
name|file
argument_list|()
operator|.
name|get_view
argument_list|(
name|start
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|// Read an archive member header at OFF.  Return the size of the
comment|// member, and set *PNAME to the name.
name|off_t
name|read_header
argument_list|(
name|off_t
name|off
argument_list|,
name|std
operator|::
name|string
operator|*
name|pname
argument_list|)
decl_stmt|;
comment|// Include an archive member in the link.
name|void
name|include_member
parameter_list|(
specifier|const
name|General_options
modifier|&
parameter_list|,
name|Symbol_table
modifier|*
parameter_list|,
name|Layout
modifier|*
parameter_list|,
name|Input_objects
modifier|*
parameter_list|,
name|off_t
name|off
parameter_list|)
function_decl|;
comment|// An entry in the archive map of symbols to object files.
struct|struct
name|Armap_entry
block|{
comment|// The symbol name.
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|// The offset to the file.
name|off_t
name|offset
decl_stmt|;
block|}
struct|;
comment|// Name of object as printed to user.
name|std
operator|::
name|string
name|name_
expr_stmt|;
comment|// For reading the file.
name|Input_file
modifier|*
name|input_file_
decl_stmt|;
comment|// The archive map.
name|std
operator|::
name|vector
operator|<
name|Armap_entry
operator|>
name|armap_
expr_stmt|;
comment|// The extended name table.
name|std
operator|::
name|string
name|extended_names_
expr_stmt|;
comment|// Track which symbols in the archive map are for elements which
comment|// have already been included in the link.
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
name|seen_
expr_stmt|;
block|}
empty_stmt|;
comment|// This class is used to read an archive and pick out the desired
comment|// elements and add them to the link.
name|class
name|Add_archive_symbols
range|:
name|public
name|Task
block|{
name|public
operator|:
name|Add_archive_symbols
argument_list|(
specifier|const
name|General_options
operator|&
name|options
argument_list|,
name|Symbol_table
operator|*
name|symtab
argument_list|,
name|Layout
operator|*
name|layout
argument_list|,
name|Input_objects
operator|*
name|input_objects
argument_list|,
name|Archive
operator|*
name|archive
argument_list|,
name|Input_group
operator|*
name|input_group
argument_list|,
name|Task_token
operator|*
name|this_blocker
argument_list|,
name|Task_token
operator|*
name|next_blocker
argument_list|)
operator|:
name|options_
argument_list|(
name|options
argument_list|)
block|,
name|symtab_
argument_list|(
name|symtab
argument_list|)
block|,
name|layout_
argument_list|(
name|layout
argument_list|)
block|,
name|input_objects_
argument_list|(
name|input_objects
argument_list|)
block|,
name|archive_
argument_list|(
name|archive
argument_list|)
block|,
name|input_group_
argument_list|(
name|input_group
argument_list|)
block|,
name|this_blocker_
argument_list|(
name|this_blocker
argument_list|)
block|,
name|next_blocker_
argument_list|(
argument|next_blocker
argument_list|)
block|{ }
operator|~
name|Add_archive_symbols
argument_list|()
block|;
comment|// The standard Task methods.
name|Is_runnable_type
name|is_runnable
argument_list|(
name|Workqueue
operator|*
argument_list|)
block|;
name|Task_locker
operator|*
name|locks
argument_list|(
name|Workqueue
operator|*
argument_list|)
block|;
name|void
name|run
argument_list|(
name|Workqueue
operator|*
argument_list|)
block|;
name|private
operator|:
name|class
name|Add_archive_symbols_locker
block|;
specifier|const
name|General_options
operator|&
name|options_
block|;
name|Symbol_table
operator|*
name|symtab_
block|;
name|Layout
operator|*
name|layout_
block|;
name|Input_objects
operator|*
name|input_objects_
block|;
name|Archive
operator|*
name|archive_
block|;
name|Input_group
operator|*
name|input_group_
block|;
name|Task_token
operator|*
name|this_blocker_
block|;
name|Task_token
operator|*
name|next_blocker_
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End namespace gold.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(GOLD_ARCHIVE_H)
end_comment

end_unit

