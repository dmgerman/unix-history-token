begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- BranchFolding.h - Fold machine code branch instructions --*- C++ -*===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_BRANCHFOLDING_HPP
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_BRANCHFOLDING_HPP
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineModuleInfo
decl_stmt|;
name|class
name|RegScavenger
decl_stmt|;
name|class
name|TargetInstrInfo
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|BranchFolder
block|{
name|public
label|:
name|explicit
name|BranchFolder
parameter_list|(
name|bool
name|defaultEnableTailMerge
parameter_list|)
function_decl|;
name|bool
name|OptimizeFunction
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
specifier|const
name|TargetInstrInfo
modifier|*
name|tii
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
parameter_list|,
name|MachineModuleInfo
modifier|*
name|mmi
parameter_list|)
function_decl|;
name|private
label|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|MachineBasicBlock
operator|*
operator|>
name|MergePotentialsElt
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
operator|::
name|iterator
name|MPIterator
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
name|MergePotentials
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|MPIterator
operator|,
name|MachineBasicBlock
operator|::
name|iterator
operator|>
name|SameTailElt
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|SameTailElt
operator|>
name|SameTails
expr_stmt|;
name|bool
name|EnableTailMerge
decl_stmt|;
specifier|const
name|TargetInstrInfo
modifier|*
name|TII
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|TRI
decl_stmt|;
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
name|RegScavenger
modifier|*
name|RS
decl_stmt|;
name|bool
name|TailMergeBlocks
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|TryMergeBlocks
parameter_list|(
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
name|void
name|ReplaceTailWithBranchTo
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|OldInst
argument_list|,
name|MachineBasicBlock
operator|*
name|NewDest
argument_list|)
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|SplitMBBAt
argument_list|(
name|MachineBasicBlock
operator|&
name|CurMBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|BBI1
argument_list|)
decl_stmt|;
name|unsigned
name|ComputeSameTails
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|unsigned
name|minCommonTailLength
parameter_list|)
function_decl|;
name|void
name|RemoveBlocksWithHash
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
name|unsigned
name|CreateCommonTailOnlyBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
modifier|&
name|PredBB
parameter_list|,
name|unsigned
name|maxCommonTailLength
parameter_list|)
function_decl|;
name|bool
name|OptimizeBranches
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|OptimizeBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|void
name|RemoveDeadBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|bool
name|OptimizeImpDefsBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|bool
name|CanFallThrough
parameter_list|(
name|MachineBasicBlock
modifier|*
name|CurBB
parameter_list|)
function_decl|;
name|bool
name|CanFallThrough
argument_list|(
name|MachineBasicBlock
operator|*
name|CurBB
argument_list|,
name|bool
name|BranchUnAnalyzable
argument_list|,
name|MachineBasicBlock
operator|*
name|TBB
argument_list|,
name|MachineBasicBlock
operator|*
name|FBB
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
comment|/// BranchFolderPass - Wrap branch folder in a machine function pass.
name|class
name|BranchFolderPass
range|:
name|public
name|MachineFunctionPass
decl_stmt|,
name|public
name|BranchFolder
block|{
name|public
label|:
specifier|static
name|char
name|ID
decl_stmt|;
name|explicit
name|BranchFolderPass
argument_list|(
argument|bool defaultEnableTailMerge
argument_list|)
block|:
name|MachineFunctionPass
argument_list|(
operator|&
name|ID
argument_list|)
operator|,
name|BranchFolder
argument_list|(
argument|defaultEnableTailMerge
argument_list|)
block|{}
name|virtual
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
expr_stmt|;
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"Control Flow Optimizer"
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_CODEGEN_BRANCHFOLDING_HPP */
end_comment

end_unit

