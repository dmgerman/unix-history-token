begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- BranchFolding.h - Fold machine code branch instructions -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_BRANCHFOLDING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_BRANCHFOLDING_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/LivePhysRegs.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/BlockFrequency.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineBlockFrequencyInfo
decl_stmt|;
name|class
name|MachineBranchProbabilityInfo
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineModuleInfo
decl_stmt|;
name|class
name|MachineLoopInfo
decl_stmt|;
name|class
name|TargetInstrInfo
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|BranchFolder
block|{
name|public
label|:
name|class
name|MBFIWrapper
decl_stmt|;
name|explicit
name|BranchFolder
parameter_list|(
name|bool
name|defaultEnableTailMerge
parameter_list|,
name|bool
name|CommonHoist
parameter_list|,
name|MBFIWrapper
modifier|&
name|MBFI
parameter_list|,
specifier|const
name|MachineBranchProbabilityInfo
modifier|&
name|MBPI
parameter_list|,
comment|// Min tail length to merge. Defaults to commandline
comment|// flag. Ignored for optsize.
name|unsigned
name|MinCommonTailLength
init|=
literal|0
parameter_list|)
function_decl|;
comment|/// Perhaps branch folding, tail merging and other CFG optimizations on the
comment|/// given function.  Block placement changes the layout and may create new
comment|/// tail merging opportunities.
name|bool
name|OptimizeFunction
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
specifier|const
name|TargetInstrInfo
modifier|*
name|tii
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
parameter_list|,
name|MachineModuleInfo
modifier|*
name|mmi
parameter_list|,
name|MachineLoopInfo
modifier|*
name|mli
init|=
name|nullptr
parameter_list|,
name|bool
name|AfterPlacement
init|=
name|false
parameter_list|)
function_decl|;
name|private
label|:
name|class
name|MergePotentialsElt
block|{
name|unsigned
name|Hash
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|Block
decl_stmt|;
name|public
label|:
name|MergePotentialsElt
argument_list|(
argument|unsigned h
argument_list|,
argument|MachineBasicBlock *b
argument_list|)
block|:
name|Hash
argument_list|(
name|h
argument_list|)
operator|,
name|Block
argument_list|(
argument|b
argument_list|)
block|{}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|Hash
return|;
block|}
name|MachineBasicBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|Block
return|;
block|}
name|void
name|setBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
block|{
name|Block
operator|=
name|MBB
expr_stmt|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MergePotentialsElt
operator|&
operator|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
operator|::
name|iterator
name|MPIterator
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
name|MergePotentials
expr_stmt|;
name|SmallPtrSet
operator|<
specifier|const
name|MachineBasicBlock
operator|*
operator|,
literal|2
operator|>
name|TriedMerging
expr_stmt|;
name|DenseMap
operator|<
specifier|const
name|MachineBasicBlock
operator|*
operator|,
name|int
operator|>
name|FuncletMembership
expr_stmt|;
name|class
name|SameTailElt
block|{
name|MPIterator
name|MPIter
decl_stmt|;
name|MachineBasicBlock
operator|::
name|iterator
name|TailStartPos
expr_stmt|;
name|public
label|:
name|SameTailElt
argument_list|(
argument|MPIterator mp
argument_list|,
argument|MachineBasicBlock::iterator tsp
argument_list|)
block|:
name|MPIter
argument_list|(
name|mp
argument_list|)
operator|,
name|TailStartPos
argument_list|(
argument|tsp
argument_list|)
block|{}
name|MPIterator
name|getMPIter
argument_list|()
specifier|const
block|{
return|return
name|MPIter
return|;
block|}
name|MergePotentialsElt
operator|&
name|getMergePotentialsElt
argument_list|()
specifier|const
block|{
return|return
operator|*
name|getMPIter
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|::
name|iterator
name|getTailStartPos
argument_list|()
specifier|const
block|{
return|return
name|TailStartPos
return|;
block|}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|getMergePotentialsElt
argument_list|()
operator|.
name|getHash
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|getMergePotentialsElt
argument_list|()
operator|.
name|getBlock
argument_list|()
return|;
block|}
name|bool
name|tailIsWholeBlock
argument_list|()
specifier|const
block|{
return|return
name|TailStartPos
operator|==
name|getBlock
argument_list|()
operator|->
name|begin
argument_list|()
return|;
block|}
name|void
name|setBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
block|{
name|getMergePotentialsElt
argument_list|()
operator|.
name|setBlock
argument_list|(
name|MBB
argument_list|)
expr_stmt|;
block|}
name|void
name|setTailStartPos
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|Pos
argument_list|)
block|{
name|TailStartPos
operator|=
name|Pos
expr_stmt|;
block|}
block|}
empty_stmt|;
name|std
operator|::
name|vector
operator|<
name|SameTailElt
operator|>
name|SameTails
expr_stmt|;
name|bool
name|AfterBlockPlacement
decl_stmt|;
name|bool
name|EnableTailMerge
decl_stmt|;
name|bool
name|EnableHoistCommonCode
decl_stmt|;
name|bool
name|UpdateLiveIns
decl_stmt|;
name|unsigned
name|MinCommonTailLength
decl_stmt|;
specifier|const
name|TargetInstrInfo
modifier|*
name|TII
decl_stmt|;
specifier|const
name|MachineRegisterInfo
modifier|*
name|MRI
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|TRI
decl_stmt|;
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
name|MachineLoopInfo
modifier|*
name|MLI
decl_stmt|;
name|LivePhysRegs
name|LiveRegs
decl_stmt|;
name|public
label|:
comment|/// \brief This class keeps track of branch frequencies of newly created
comment|/// blocks and tail-merged blocks.
name|class
name|MBFIWrapper
block|{
name|public
label|:
name|MBFIWrapper
argument_list|(
specifier|const
name|MachineBlockFrequencyInfo
operator|&
name|I
argument_list|)
operator|:
name|MBFI
argument_list|(
argument|I
argument_list|)
block|{}
name|BlockFrequency
name|getBlockFreq
argument_list|(
argument|const MachineBasicBlock *MBB
argument_list|)
specifier|const
expr_stmt|;
name|void
name|setBlockFreq
parameter_list|(
specifier|const
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|,
name|BlockFrequency
name|F
parameter_list|)
function_decl|;
name|raw_ostream
modifier|&
name|printBlockFreq
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
decl_stmt|;
name|raw_ostream
modifier|&
name|printBlockFreq
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|BlockFrequency
name|Freq
argument_list|)
decl|const
decl_stmt|;
name|void
name|view
parameter_list|(
specifier|const
name|Twine
modifier|&
name|Name
parameter_list|,
name|bool
name|isSimple
init|=
name|true
parameter_list|)
function_decl|;
name|uint64_t
name|getEntryFreq
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
specifier|const
name|MachineBlockFrequencyInfo
modifier|&
name|MBFI
decl_stmt|;
name|DenseMap
operator|<
specifier|const
name|MachineBasicBlock
operator|*
operator|,
name|BlockFrequency
operator|>
name|MergedBBFreq
expr_stmt|;
block|}
empty_stmt|;
name|private
label|:
name|MBFIWrapper
modifier|&
name|MBBFreqInfo
decl_stmt|;
specifier|const
name|MachineBranchProbabilityInfo
modifier|&
name|MBPI
decl_stmt|;
name|bool
name|TailMergeBlocks
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|TryTailMergeBlocks
parameter_list|(
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|,
name|unsigned
name|MinCommonTailLength
parameter_list|)
function_decl|;
name|void
name|setCommonTailEdgeWeights
parameter_list|(
name|MachineBasicBlock
modifier|&
name|TailMBB
parameter_list|)
function_decl|;
comment|/// Delete the instruction OldInst and everything after it, replacing it
comment|/// with an unconditional branch to NewDest.
name|void
name|ReplaceTailWithBranchTo
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|OldInst
argument_list|,
name|MachineBasicBlock
operator|*
name|NewDest
argument_list|)
decl_stmt|;
comment|/// Given a machine basic block and an iterator into it, split the MBB so
comment|/// that the part before the iterator falls into the part starting at the
comment|/// iterator.  This returns the new MBB.
name|MachineBasicBlock
modifier|*
name|SplitMBBAt
argument_list|(
name|MachineBasicBlock
operator|&
name|CurMBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|BBI1
argument_list|,
specifier|const
name|BasicBlock
operator|*
name|BB
argument_list|)
decl_stmt|;
comment|/// Look through all the blocks in MergePotentials that have hash CurHash
comment|/// (guaranteed to match the last element).  Build the vector SameTails of
comment|/// all those that have the (same) largest number of instructions in common
comment|/// of any pair of these blocks.  SameTails entries contain an iterator into
comment|/// MergePotentials (from which the MachineBasicBlock can be found) and a
comment|/// MachineBasicBlock::iterator into that MBB indicating the instruction
comment|/// where the matching code sequence begins.  Order of elements in SameTails
comment|/// is the reverse of the order in which those blocks appear in
comment|/// MergePotentials (where they are not necessarily consecutive).
name|unsigned
name|ComputeSameTails
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|unsigned
name|minCommonTailLength
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
comment|/// Remove all blocks with hash CurHash from MergePotentials, restoring
comment|/// branches at ends of blocks as appropriate.
name|void
name|RemoveBlocksWithHash
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
comment|/// None of the blocks to be tail-merged consist only of the common tail.
comment|/// Create a block that does by splitting one.
name|bool
name|CreateCommonTailOnlyBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
modifier|&
name|PredBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|unsigned
name|maxCommonTailLength
parameter_list|,
name|unsigned
modifier|&
name|commonTailIndex
parameter_list|)
function_decl|;
comment|/// Create merged DebugLocs of identical instructions across SameTails and
comment|/// assign it to the instruction in common tail.
name|void
name|MergeCommonTailDebugLocs
parameter_list|(
name|unsigned
name|commonTailIndex
parameter_list|)
function_decl|;
name|bool
name|OptimizeBranches
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
comment|/// Analyze and optimize control flow related to the specified block. This
comment|/// is never called on the entry block.
name|bool
name|OptimizeBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
comment|/// Remove the specified dead machine basic block from the function,
comment|/// updating the CFG.
name|void
name|RemoveDeadBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
comment|/// Hoist common instruction sequences at the start of basic blocks to their
comment|/// common predecessor.
name|bool
name|HoistCommonCode
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
comment|/// If the successors of MBB has common instruction sequence at the start of
comment|/// the function, move the instructions before MBB terminator if it's legal.
name|bool
name|HoistCommonCodeInSuccs
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_CODEGEN_BRANCHFOLDING_HPP */
end_comment

end_unit

