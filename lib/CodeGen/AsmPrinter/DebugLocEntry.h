begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/DebugLocEntry.h - Entry in debug_loc list -*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_ASMPRINTER_DEBUGLOCENTRY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_ASMPRINTER_DEBUGLOCENTRY_H
end_define

begin_include
include|#
directive|include
file|"DebugLocStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DebugInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSymbol.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MachineLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
comment|/// \brief This struct describes location entries emitted in the .debug_loc
comment|/// section.
name|class
name|DebugLocEntry
block|{
comment|/// Begin and end symbols for the address range that this location is valid.
specifier|const
name|MCSymbol
modifier|*
name|Begin
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|End
decl_stmt|;
name|public
label|:
comment|/// \brief A single location or constant.
struct|struct
name|Value
block|{
name|Value
argument_list|(
argument|const DIExpression *Expr
argument_list|,
argument|int64_t i
argument_list|)
block|:
name|Expression
argument_list|(
name|Expr
argument_list|)
operator|,
name|EntryKind
argument_list|(
argument|E_Integer
argument_list|)
block|{
name|Constant
operator|.
name|Int
operator|=
name|i
block|;     }
name|Value
argument_list|(
specifier|const
name|DIExpression
operator|*
name|Expr
argument_list|,
specifier|const
name|ConstantFP
operator|*
name|CFP
argument_list|)
operator|:
name|Expression
argument_list|(
name|Expr
argument_list|)
operator|,
name|EntryKind
argument_list|(
argument|E_ConstantFP
argument_list|)
block|{
name|Constant
operator|.
name|CFP
operator|=
name|CFP
block|;     }
name|Value
argument_list|(
specifier|const
name|DIExpression
operator|*
name|Expr
argument_list|,
specifier|const
name|ConstantInt
operator|*
name|CIP
argument_list|)
operator|:
name|Expression
argument_list|(
name|Expr
argument_list|)
operator|,
name|EntryKind
argument_list|(
argument|E_ConstantInt
argument_list|)
block|{
name|Constant
operator|.
name|CIP
operator|=
name|CIP
block|;     }
name|Value
argument_list|(
argument|const DIExpression *Expr
argument_list|,
argument|MachineLocation Loc
argument_list|)
operator|:
name|Expression
argument_list|(
name|Expr
argument_list|)
operator|,
name|EntryKind
argument_list|(
name|E_Location
argument_list|)
operator|,
name|Loc
argument_list|(
argument|Loc
argument_list|)
block|{
name|assert
argument_list|(
name|cast
operator|<
name|DIExpression
operator|>
operator|(
name|Expr
operator|)
operator|->
name|isValid
argument_list|()
argument_list|)
block|;     }
comment|/// Any complex address location expression for this Value.
specifier|const
name|DIExpression
operator|*
name|Expression
expr_stmt|;
comment|/// Type of entry that this represents.
enum|enum
name|EntryType
block|{
name|E_Location
block|,
name|E_Integer
block|,
name|E_ConstantFP
block|,
name|E_ConstantInt
block|}
enum|;
name|enum
name|EntryType
name|EntryKind
decl_stmt|;
comment|/// Either a constant,
union|union
block|{
name|int64_t
name|Int
decl_stmt|;
specifier|const
name|ConstantFP
modifier|*
name|CFP
decl_stmt|;
specifier|const
name|ConstantInt
modifier|*
name|CIP
decl_stmt|;
block|}
name|Constant
union|;
comment|// Or a location in the machine frame.
name|MachineLocation
name|Loc
decl_stmt|;
name|bool
name|isLocation
argument_list|()
specifier|const
block|{
return|return
name|EntryKind
operator|==
name|E_Location
return|;
block|}
name|bool
name|isInt
argument_list|()
specifier|const
block|{
return|return
name|EntryKind
operator|==
name|E_Integer
return|;
block|}
name|bool
name|isConstantFP
argument_list|()
specifier|const
block|{
return|return
name|EntryKind
operator|==
name|E_ConstantFP
return|;
block|}
name|bool
name|isConstantInt
argument_list|()
specifier|const
block|{
return|return
name|EntryKind
operator|==
name|E_ConstantInt
return|;
block|}
name|int64_t
name|getInt
argument_list|()
specifier|const
block|{
return|return
name|Constant
operator|.
name|Int
return|;
block|}
specifier|const
name|ConstantFP
operator|*
name|getConstantFP
argument_list|()
specifier|const
block|{
return|return
name|Constant
operator|.
name|CFP
return|;
block|}
specifier|const
name|ConstantInt
operator|*
name|getConstantInt
argument_list|()
specifier|const
block|{
return|return
name|Constant
operator|.
name|CIP
return|;
block|}
name|MachineLocation
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|Loc
return|;
block|}
name|bool
name|isFragment
argument_list|()
specifier|const
block|{
return|return
name|getExpression
argument_list|()
operator|->
name|isFragment
argument_list|()
return|;
block|}
specifier|const
name|DIExpression
operator|*
name|getExpression
argument_list|()
specifier|const
block|{
return|return
name|Expression
return|;
block|}
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Value
operator|&
operator|,
specifier|const
name|Value
operator|&
operator|)
expr_stmt|;
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Value
operator|&
operator|,
specifier|const
name|Value
operator|&
operator|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NDEBUG
argument_list|)
operator|||
name|defined
argument_list|(
name|LLVM_ENABLE_DUMP
argument_list|)
name|LLVM_DUMP_METHOD
name|void
name|dump
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isLocation
argument_list|()
condition|)
block|{
name|llvm
operator|::
name|dbgs
argument_list|()
operator|<<
literal|"Loc = { reg="
operator|<<
name|Loc
operator|.
name|getReg
argument_list|()
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
name|Loc
operator|.
name|isIndirect
argument_list|()
condition|)
name|llvm
operator|::
name|dbgs
argument_list|()
operator|<<
literal|'+'
operator|<<
name|Loc
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|llvm
operator|::
name|dbgs
argument_list|()
operator|<<
literal|"} "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isConstantInt
argument_list|()
condition|)
name|Constant
operator|.
name|CIP
operator|->
name|dump
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|isConstantFP
argument_list|()
condition|)
name|Constant
operator|.
name|CFP
operator|->
name|dump
argument_list|()
expr_stmt|;
if|if
condition|(
name|Expression
condition|)
name|Expression
operator|->
name|dump
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|}
empty_stmt|;
name|private
label|:
comment|/// A nonempty list of locations/constants belonging to this entry,
comment|/// sorted by offset.
name|SmallVector
operator|<
name|Value
operator|,
literal|1
operator|>
name|Values
expr_stmt|;
name|public
label|:
name|DebugLocEntry
argument_list|(
argument|const MCSymbol *B
argument_list|,
argument|const MCSymbol *E
argument_list|,
argument|Value Val
argument_list|)
block|:
name|Begin
argument_list|(
name|B
argument_list|)
operator|,
name|End
argument_list|(
argument|E
argument_list|)
block|{
name|Values
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Val
argument_list|)
argument_list|)
block|;   }
comment|/// \brief If this and Next are describing different pieces of the same
comment|/// variable, merge them by appending Next's values to the current
comment|/// list of values.
comment|/// Return true if the merge was successful.
name|bool
name|MergeValues
argument_list|(
specifier|const
name|DebugLocEntry
operator|&
name|Next
argument_list|)
expr_stmt|;
comment|/// \brief Attempt to merge this DebugLocEntry with Next and return
comment|/// true if the merge was successful. Entries can be merged if they
comment|/// share the same Loc/Constant and if Next immediately follows this
comment|/// Entry.
name|bool
name|MergeRanges
parameter_list|(
specifier|const
name|DebugLocEntry
modifier|&
name|Next
parameter_list|)
block|{
comment|// If this and Next are describing the same variable, merge them.
if|if
condition|(
operator|(
name|End
operator|==
name|Next
operator|.
name|Begin
operator|&&
name|Values
operator|==
name|Next
operator|.
name|Values
operator|)
condition|)
block|{
name|End
operator|=
name|Next
operator|.
name|End
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getBeginSym
argument_list|()
specifier|const
block|{
return|return
name|Begin
return|;
block|}
specifier|const
name|MCSymbol
operator|*
name|getEndSym
argument_list|()
specifier|const
block|{
return|return
name|End
return|;
block|}
name|ArrayRef
operator|<
name|Value
operator|>
name|getValues
argument_list|()
specifier|const
block|{
return|return
name|Values
return|;
block|}
name|void
name|addValues
argument_list|(
name|ArrayRef
operator|<
name|DebugLocEntry
operator|::
name|Value
operator|>
name|Vals
argument_list|)
block|{
name|Values
operator|.
name|append
argument_list|(
name|Vals
operator|.
name|begin
argument_list|()
argument_list|,
name|Vals
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|sortUniqueValues
argument_list|()
expr_stmt|;
name|assert
argument_list|(
name|all_of
argument_list|(
name|Values
argument_list|,
index|[]
operator|(
name|DebugLocEntry
operator|::
name|Value
name|V
operator|)
block|{
return|return
name|V
operator|.
name|isFragment
argument_list|()
return|;
block|}
block|)
decl|&& "value must be a piece"
decl_stmt|);
block|}
end_decl_stmt

begin_comment
comment|// \brief Sort the pieces by offset.
end_comment

begin_comment
comment|// Remove any duplicate entries by dropping all but the first.
end_comment

begin_function
name|void
name|sortUniqueValues
parameter_list|()
block|{
name|std
operator|::
name|sort
argument_list|(
name|Values
operator|.
name|begin
argument_list|()
argument_list|,
name|Values
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Values
operator|.
name|erase
argument_list|(
name|std
operator|::
name|unique
argument_list|(
name|Values
operator|.
name|begin
argument_list|()
argument_list|,
name|Values
operator|.
name|end
argument_list|()
argument_list|,
index|[]
operator|(
specifier|const
name|Value
operator|&
name|A
operator|,
specifier|const
name|Value
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getExpression
argument_list|()
operator|==
name|B
operator|.
name|getExpression
argument_list|()
return|;
block|}
block|)
operator|,
function|Values.end
parameter_list|()
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/// \brief Lower this entry into a DWARF expression.
end_comment

begin_expr_stmt
unit|void
name|finalize
argument_list|(
specifier|const
name|AsmPrinter
operator|&
name|AP
argument_list|,
name|DebugLocStream
operator|::
name|ListBuilder
operator|&
name|List
argument_list|,
specifier|const
name|DIBasicType
operator|*
name|BT
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|/// \brief Compare two Values for equality.
end_comment

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DebugLocEntry
operator|::
name|Value
operator|&
name|A
operator|,
specifier|const
name|DebugLocEntry
operator|::
name|Value
operator|&
name|B
operator|)
block|{
if|if
condition|(
name|A
operator|.
name|EntryKind
operator|!=
name|B
operator|.
name|EntryKind
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|A
operator|.
name|Expression
operator|!=
name|B
operator|.
name|Expression
condition|)
return|return
name|false
return|;
end_if

begin_switch
switch|switch
condition|(
name|A
operator|.
name|EntryKind
condition|)
block|{
case|case
name|DebugLocEntry
operator|::
name|Value
operator|::
name|E_Location
case|:
return|return
name|A
operator|.
name|Loc
operator|==
name|B
operator|.
name|Loc
return|;
case|case
name|DebugLocEntry
operator|::
name|Value
operator|::
name|E_Integer
case|:
return|return
name|A
operator|.
name|Constant
operator|.
name|Int
operator|==
name|B
operator|.
name|Constant
operator|.
name|Int
return|;
case|case
name|DebugLocEntry
operator|::
name|Value
operator|::
name|E_ConstantFP
case|:
return|return
name|A
operator|.
name|Constant
operator|.
name|CFP
operator|==
name|B
operator|.
name|Constant
operator|.
name|CFP
return|;
case|case
name|DebugLocEntry
operator|::
name|Value
operator|::
name|E_ConstantInt
case|:
return|return
name|A
operator|.
name|Constant
operator|.
name|CIP
operator|==
name|B
operator|.
name|Constant
operator|.
name|CIP
return|;
block|}
end_switch

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"unhandled EntryKind"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/// Compare two fragments based on their offset.
end_comment

begin_expr_stmt
unit|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|DebugLocEntry
operator|::
name|Value
operator|&
name|A
operator|,
specifier|const
name|DebugLocEntry
operator|::
name|Value
operator|&
name|B
operator|)
block|{
return|return
name|A
operator|.
name|getExpression
argument_list|()
operator|->
name|getFragmentInfo
argument_list|()
operator|->
name|OffsetInBits
operator|<
name|B
operator|.
name|getExpression
argument_list|()
operator|->
name|getFragmentInfo
argument_list|()
operator|->
name|OffsetInBits
return|;
block|}
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

