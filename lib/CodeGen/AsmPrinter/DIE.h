begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- lib/CodeGen/DIE.h - DWARF Info Entries -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Data structures for DWARF info entries.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CODEGEN_ASMPRINTER_DIE_H__
end_ifndef

begin_define
define|#
directive|define
name|CODEGEN_ASMPRINTER_DIE_H__
end_define

begin_include
include|#
directive|include
file|"DwarfLabel.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
name|class
name|DwarfPrinter
decl_stmt|;
name|class
name|TargetData
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEAbbrevData - Dwarf abbreviation data, describes the one attribute of a
comment|/// Dwarf abbreviation.
name|class
name|DIEAbbrevData
block|{
comment|/// Attribute - Dwarf attribute code.
comment|///
name|unsigned
name|Attribute
decl_stmt|;
comment|/// Form - Dwarf form code.
comment|///
name|unsigned
name|Form
decl_stmt|;
name|public
label|:
name|DIEAbbrevData
argument_list|(
argument|unsigned A
argument_list|,
argument|unsigned F
argument_list|)
block|:
name|Attribute
argument_list|(
name|A
argument_list|)
operator|,
name|Form
argument_list|(
argument|F
argument_list|)
block|{}
comment|// Accessors.
name|unsigned
name|getAttribute
argument_list|()
specifier|const
block|{
return|return
name|Attribute
return|;
block|}
name|unsigned
name|getForm
argument_list|()
specifier|const
block|{
return|return
name|Form
return|;
block|}
comment|/// Profile - Used to gather unique data for the abbreviation folding set.
comment|///
name|void
name|Profile
argument_list|(
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEAbbrev - Dwarf abbreviation, describes the organization of a debug
comment|/// information object.
name|class
name|DIEAbbrev
range|:
name|public
name|FoldingSetNode
block|{
comment|/// Tag - Dwarf tag code.
comment|///
name|unsigned
name|Tag
block|;
comment|/// Unique number for node.
comment|///
name|unsigned
name|Number
block|;
comment|/// ChildrenFlag - Dwarf children flag.
comment|///
name|unsigned
name|ChildrenFlag
block|;
comment|/// Data - Raw data bytes for abbreviation.
comment|///
name|SmallVector
operator|<
name|DIEAbbrevData
block|,
literal|8
operator|>
name|Data
block|;
name|public
operator|:
name|DIEAbbrev
argument_list|(
argument|unsigned T
argument_list|,
argument|unsigned C
argument_list|)
operator|:
name|Tag
argument_list|(
name|T
argument_list|)
block|,
name|ChildrenFlag
argument_list|(
name|C
argument_list|)
block|,
name|Data
argument_list|()
block|{}
name|virtual
operator|~
name|DIEAbbrev
argument_list|()
block|{}
comment|// Accessors.
name|unsigned
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Tag
return|;
block|}
name|unsigned
name|getNumber
argument_list|()
specifier|const
block|{
return|return
name|Number
return|;
block|}
name|unsigned
name|getChildrenFlag
argument_list|()
specifier|const
block|{
return|return
name|ChildrenFlag
return|;
block|}
specifier|const
name|SmallVector
operator|<
name|DIEAbbrevData
block|,
literal|8
operator|>
operator|&
name|getData
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|void
name|setTag
argument_list|(
argument|unsigned T
argument_list|)
block|{
name|Tag
operator|=
name|T
block|; }
name|void
name|setChildrenFlag
argument_list|(
argument|unsigned CF
argument_list|)
block|{
name|ChildrenFlag
operator|=
name|CF
block|; }
name|void
name|setNumber
argument_list|(
argument|unsigned N
argument_list|)
block|{
name|Number
operator|=
name|N
block|; }
comment|/// AddAttribute - Adds another set of attribute information to the
comment|/// abbreviation.
name|void
name|AddAttribute
argument_list|(
argument|unsigned Attribute
argument_list|,
argument|unsigned Form
argument_list|)
block|{
name|Data
operator|.
name|push_back
argument_list|(
name|DIEAbbrevData
argument_list|(
name|Attribute
argument_list|,
name|Form
argument_list|)
argument_list|)
block|;     }
comment|/// AddFirstAttribute - Adds a set of attribute information to the front
comment|/// of the abbreviation.
name|void
name|AddFirstAttribute
argument_list|(
argument|unsigned Attribute
argument_list|,
argument|unsigned Form
argument_list|)
block|{
name|Data
operator|.
name|insert
argument_list|(
name|Data
operator|.
name|begin
argument_list|()
argument_list|,
name|DIEAbbrevData
argument_list|(
name|Attribute
argument_list|,
name|Form
argument_list|)
argument_list|)
block|;     }
comment|/// Profile - Used to gather unique data for the abbreviation folding set.
comment|///
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|;
comment|/// Emit - Print the abbreviation using the specified asm printer.
comment|///
name|void
name|Emit
argument_list|(
argument|const DwarfPrinter *DP
argument_list|)
specifier|const
block|;
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|void
name|dump
argument_list|()
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIE - A structured debug information entry.  Has an abbreviation which
comment|/// describes it's organization.
name|class
name|CompileUnit
decl_stmt|;
name|class
name|DIEValue
decl_stmt|;
name|class
name|DIE
block|{
name|protected
label|:
comment|/// Abbrev - Buffer for constructing abbreviation.
comment|///
name|DIEAbbrev
name|Abbrev
decl_stmt|;
comment|/// Offset - Offset in debug info section.
comment|///
name|unsigned
name|Offset
decl_stmt|;
comment|/// Size - Size of instance + children.
comment|///
name|unsigned
name|Size
decl_stmt|;
comment|/// Children DIEs.
comment|///
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
name|Children
expr_stmt|;
name|DIE
modifier|*
name|Parent
decl_stmt|;
comment|/// Attributes values.
comment|///
name|SmallVector
operator|<
name|DIEValue
operator|*
operator|,
literal|32
operator|>
name|Values
expr_stmt|;
comment|// Private data for print()
name|mutable
name|unsigned
name|IndentCount
decl_stmt|;
name|public
label|:
name|explicit
name|DIE
argument_list|(
argument|unsigned Tag
argument_list|)
block|:
name|Abbrev
argument_list|(
name|Tag
argument_list|,
name|dwarf
operator|::
name|DW_CHILDREN_no
argument_list|)
operator|,
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
operator|,
name|Parent
argument_list|(
literal|0
argument_list|)
operator|,
name|IndentCount
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|DIE
argument_list|()
expr_stmt|;
comment|// Accessors.
name|DIEAbbrev
modifier|&
name|getAbbrev
parameter_list|()
block|{
return|return
name|Abbrev
return|;
block|}
name|unsigned
name|getAbbrevNumber
argument_list|()
specifier|const
block|{
return|return
name|Abbrev
operator|.
name|getNumber
argument_list|()
return|;
block|}
name|unsigned
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Abbrev
operator|.
name|getTag
argument_list|()
return|;
block|}
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|unsigned
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
operator|&
name|getChildren
argument_list|()
specifier|const
block|{
return|return
name|Children
return|;
block|}
name|SmallVector
operator|<
name|DIEValue
operator|*
operator|,
literal|32
operator|>
operator|&
name|getValues
argument_list|()
block|{
return|return
name|Values
return|;
block|}
name|DIE
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
name|void
name|setTag
parameter_list|(
name|unsigned
name|Tag
parameter_list|)
block|{
name|Abbrev
operator|.
name|setTag
argument_list|(
name|Tag
argument_list|)
expr_stmt|;
block|}
name|void
name|setOffset
parameter_list|(
name|unsigned
name|O
parameter_list|)
block|{
name|Offset
operator|=
name|O
expr_stmt|;
block|}
name|void
name|setSize
parameter_list|(
name|unsigned
name|S
parameter_list|)
block|{
name|Size
operator|=
name|S
expr_stmt|;
block|}
name|void
name|setParent
parameter_list|(
name|DIE
modifier|*
name|P
parameter_list|)
block|{
name|Parent
operator|=
name|P
expr_stmt|;
block|}
comment|/// addValue - Add a value and attributes to a DIE.
comment|///
name|void
name|addValue
parameter_list|(
name|unsigned
name|Attribute
parameter_list|,
name|unsigned
name|Form
parameter_list|,
name|DIEValue
modifier|*
name|Value
parameter_list|)
block|{
name|Abbrev
operator|.
name|AddAttribute
argument_list|(
name|Attribute
argument_list|,
name|Form
argument_list|)
expr_stmt|;
name|Values
operator|.
name|push_back
argument_list|(
name|Value
argument_list|)
expr_stmt|;
block|}
comment|/// SiblingOffset - Return the offset of the debug information entry's
comment|/// sibling.
name|unsigned
name|getSiblingOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|+
name|Size
return|;
block|}
comment|/// addSiblingOffset - Add a sibling offset field to the front of the DIE.
comment|///
name|void
name|addSiblingOffset
parameter_list|()
function_decl|;
comment|/// addChild - Add a child to the DIE.
comment|///
name|void
name|addChild
parameter_list|(
name|DIE
modifier|*
name|Child
parameter_list|)
block|{
if|if
condition|(
name|Child
operator|->
name|getParent
argument_list|()
condition|)
block|{
name|assert
argument_list|(
name|Child
operator|->
name|getParent
argument_list|()
operator|==
name|this
operator|&&
literal|"Unexpected DIE Parent!"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Abbrev
operator|.
name|setChildrenFlag
argument_list|(
name|dwarf
operator|::
name|DW_CHILDREN_yes
argument_list|)
expr_stmt|;
name|Children
operator|.
name|push_back
argument_list|(
name|Child
argument_list|)
expr_stmt|;
name|Child
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|void
name|print
parameter_list|(
name|raw_ostream
modifier|&
name|O
parameter_list|,
name|unsigned
name|IncIndent
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|dump
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEValue - A debug information entry value.
comment|///
name|class
name|DIEValue
block|{
name|public
label|:
enum|enum
block|{
name|isInteger
block|,
name|isString
block|,
name|isLabel
block|,
name|isAsIsLabel
block|,
name|isSectionOffset
block|,
name|isDelta
block|,
name|isEntry
block|,
name|isBlock
block|}
enum|;
name|protected
label|:
comment|/// Type - Type of data stored in the value.
comment|///
name|unsigned
name|Type
decl_stmt|;
name|public
label|:
name|explicit
name|DIEValue
argument_list|(
argument|unsigned T
argument_list|)
block|:
name|Type
argument_list|(
argument|T
argument_list|)
block|{}
name|virtual
operator|~
name|DIEValue
argument_list|()
block|{}
comment|// Accessors
name|unsigned
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
comment|/// EmitValue - Emit value via the Dwarf writer.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
name|DwarfPrinter
operator|*
name|D
argument_list|,
name|unsigned
name|Form
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// SizeOf - Return the size of a value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
specifier|const
name|TargetData
operator|*
name|TD
argument_list|,
name|unsigned
name|Form
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|DIEValue
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
parameter_list|(
name|raw_ostream
modifier|&
name|O
parameter_list|)
init|=
literal|0
function_decl|;
name|void
name|dump
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
empty_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEInteger - An integer value DIE.
comment|///
name|class
name|DIEInteger
range|:
name|public
name|DIEValue
block|{
name|uint64_t
name|Integer
block|;
name|public
operator|:
name|explicit
name|DIEInteger
argument_list|(
argument|uint64_t I
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isInteger
argument_list|)
block|,
name|Integer
argument_list|(
argument|I
argument_list|)
block|{}
comment|/// BestForm - Choose the best form for integer.
comment|///
specifier|static
name|unsigned
name|BestForm
argument_list|(
argument|bool IsSigned
argument_list|,
argument|uint64_t Int
argument_list|)
block|{
if|if
condition|(
name|IsSigned
condition|)
block|{
if|if
condition|(
operator|(
name|char
operator|)
name|Int
operator|==
operator|(
name|signed
operator|)
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data1
return|;
if|if
condition|(
operator|(
name|short
operator|)
name|Int
operator|==
operator|(
name|signed
operator|)
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data2
return|;
if|if
condition|(
operator|(
name|int
operator|)
name|Int
operator|==
operator|(
name|signed
operator|)
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data4
return|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|unsigned
name|char
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data1
return|;
if|if
condition|(
operator|(
name|unsigned
name|short
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data2
return|;
if|if
condition|(
operator|(
name|unsigned
name|int
operator|)
name|Int
operator|==
name|Int
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_data4
return|;
block|}
return|return
name|dwarf
operator|::
name|DW_FORM_data8
return|;
block|}
comment|/// EmitValue - Emit integer of appropriate size.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of integer value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEInteger *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *I
argument_list|)
block|{
return|return
name|I
operator|->
name|getType
argument_list|()
operator|==
name|isInteger
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEString - A string value DIE. This DIE keeps string reference only.
comment|///
name|class
name|DIEString
range|:
name|public
name|DIEValue
block|{
specifier|const
name|StringRef
name|Str
block|;
name|public
operator|:
name|explicit
name|DIEString
argument_list|(
argument|const StringRef S
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isString
argument_list|)
block|,
name|Str
argument_list|(
argument|S
argument_list|)
block|{}
comment|/// EmitValue - Emit string value.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of string value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *
argument_list|,
argument|unsigned
comment|/*Form*/
argument_list|)
specifier|const
block|{
return|return
name|Str
operator|.
name|size
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|char
argument_list|)
return|;
comment|// sizeof('\0');
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEString *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *S
argument_list|)
block|{
return|return
name|S
operator|->
name|getType
argument_list|()
operator|==
name|isString
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEDwarfLabel - A Dwarf internal label expression DIE.
comment|//
name|class
name|DIEDwarfLabel
range|:
name|public
name|DIEValue
block|{
specifier|const
name|DWLabel
name|Label
block|;
name|public
operator|:
name|explicit
name|DIEDwarfLabel
argument_list|(
specifier|const
name|DWLabel
operator|&
name|L
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isLabel
argument_list|)
block|,
name|Label
argument_list|(
argument|L
argument_list|)
block|{}
comment|/// EmitValue - Emit label value.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of label value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEDwarfLabel *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *L
argument_list|)
block|{
return|return
name|L
operator|->
name|getType
argument_list|()
operator|==
name|isLabel
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEObjectLabel - A label to an object in code or data.
comment|//
name|class
name|DIEObjectLabel
range|:
name|public
name|DIEValue
block|{
specifier|const
name|MCSymbol
operator|*
name|Sym
block|;
name|public
operator|:
name|explicit
name|DIEObjectLabel
argument_list|(
specifier|const
name|MCSymbol
operator|*
name|S
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isAsIsLabel
argument_list|)
block|,
name|Sym
argument_list|(
argument|S
argument_list|)
block|{}
comment|/// EmitValue - Emit label value.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of label value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEObjectLabel *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *L
argument_list|)
block|{
return|return
name|L
operator|->
name|getType
argument_list|()
operator|==
name|isAsIsLabel
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIESectionOffset - A section offset DIE.
comment|///
name|class
name|DIESectionOffset
range|:
name|public
name|DIEValue
block|{
specifier|const
name|DWLabel
name|Label
block|;
specifier|const
name|DWLabel
name|Section
block|;
name|bool
name|IsEH
operator|:
literal|1
block|;
name|bool
name|UseSet
operator|:
literal|1
block|;
name|public
operator|:
name|DIESectionOffset
argument_list|(
argument|const DWLabel&Lab
argument_list|,
argument|const DWLabel&Sec
argument_list|,
argument|bool isEH = false
argument_list|,
argument|bool useSet = true
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isSectionOffset
argument_list|)
block|,
name|Label
argument_list|(
name|Lab
argument_list|)
block|,
name|Section
argument_list|(
name|Sec
argument_list|)
block|,
name|IsEH
argument_list|(
name|isEH
argument_list|)
block|,
name|UseSet
argument_list|(
argument|useSet
argument_list|)
block|{}
comment|/// EmitValue - Emit section offset.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of section offset value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIESectionOffset *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *D
argument_list|)
block|{
return|return
name|D
operator|->
name|getType
argument_list|()
operator|==
name|isSectionOffset
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEDelta - A simple label difference DIE.
comment|///
name|class
name|DIEDelta
range|:
name|public
name|DIEValue
block|{
specifier|const
name|DWLabel
name|LabelHi
block|;
specifier|const
name|DWLabel
name|LabelLo
block|;
name|public
operator|:
name|DIEDelta
argument_list|(
specifier|const
name|DWLabel
operator|&
name|Hi
argument_list|,
specifier|const
name|DWLabel
operator|&
name|Lo
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isDelta
argument_list|)
block|,
name|LabelHi
argument_list|(
name|Hi
argument_list|)
block|,
name|LabelLo
argument_list|(
argument|Lo
argument_list|)
block|{}
comment|/// EmitValue - Emit delta value.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of delta value in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEDelta *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *D
argument_list|)
block|{
return|return
name|D
operator|->
name|getType
argument_list|()
operator|==
name|isDelta
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEntry - A pointer to another debug information entry.  An instance of
comment|/// this class can also be used as a proxy for a debug information entry not
comment|/// yet defined (ie. types.)
name|class
name|DIEEntry
range|:
name|public
name|DIEValue
block|{
name|DIE
operator|*
name|Entry
block|;
name|public
operator|:
name|explicit
name|DIEEntry
argument_list|(
name|DIE
operator|*
name|E
argument_list|)
operator|:
name|DIEValue
argument_list|(
name|isEntry
argument_list|)
block|,
name|Entry
argument_list|(
argument|E
argument_list|)
block|{}
name|DIE
operator|*
name|getEntry
argument_list|()
specifier|const
block|{
return|return
name|Entry
return|;
block|}
name|void
name|setEntry
argument_list|(
argument|DIE *E
argument_list|)
block|{
name|Entry
operator|=
name|E
block|; }
comment|/// EmitValue - Emit debug information entry offset.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
argument|DwarfPrinter *D
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|;
comment|/// SizeOf - Determine size of debug information entry in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
argument|const TargetData *TD
argument_list|,
argument|unsigned Form
argument_list|)
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|int32_t
argument_list|)
return|;
block|}
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEEntry *
argument_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const DIEValue *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isEntry
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
endif|#
directive|endif
block|}
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|/// DIEBlock - A block of values.  Primarily used for location expressions.
comment|//
name|class
name|DIEBlock
range|:
name|public
name|DIEValue
decl_stmt|,
name|public
name|DIE
block|{
name|unsigned
name|Size
decl_stmt|;
comment|// Size in bytes excluding size header.
name|public
label|:
name|DIEBlock
argument_list|()
operator|:
name|DIEValue
argument_list|(
name|isBlock
argument_list|)
operator|,
name|DIE
argument_list|(
literal|0
argument_list|)
operator|,
name|Size
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|DIEBlock
argument_list|()
block|{}
comment|/// ComputeSize - calculate the size of the block.
comment|///
name|unsigned
name|ComputeSize
argument_list|(
specifier|const
name|TargetData
operator|*
name|TD
argument_list|)
expr_stmt|;
comment|/// BestForm - Choose the best form for data.
comment|///
name|unsigned
name|BestForm
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|(
name|unsigned
name|char
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block1
return|;
if|if
condition|(
operator|(
name|unsigned
name|short
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block2
return|;
if|if
condition|(
operator|(
name|unsigned
name|int
operator|)
name|Size
operator|==
name|Size
condition|)
return|return
name|dwarf
operator|::
name|DW_FORM_block4
return|;
return|return
name|dwarf
operator|::
name|DW_FORM_block
return|;
block|}
comment|/// EmitValue - Emit block data.
comment|///
name|virtual
name|void
name|EmitValue
argument_list|(
name|DwarfPrinter
operator|*
name|D
argument_list|,
name|unsigned
name|Form
argument_list|)
decl|const
decl_stmt|;
comment|/// SizeOf - Determine size of block data in bytes.
comment|///
name|virtual
name|unsigned
name|SizeOf
argument_list|(
specifier|const
name|TargetData
operator|*
name|TD
argument_list|,
name|unsigned
name|Form
argument_list|)
decl|const
decl_stmt|;
comment|// Implement isa/cast/dyncast.
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|DIEBlock
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|DIEValue
modifier|*
name|E
parameter_list|)
block|{
return|return
name|E
operator|->
name|getType
argument_list|()
operator|==
name|isBlock
return|;
block|}
ifndef|#
directive|ifndef
name|NDEBUG
name|virtual
name|void
name|print
parameter_list|(
name|raw_ostream
modifier|&
name|O
parameter_list|)
function_decl|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

