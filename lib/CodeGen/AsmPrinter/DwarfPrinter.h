begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- lib/CodeGen/DwarfPrinter.h - Dwarf Printer -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Emit general DWARF directives.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CODEGEN_ASMPRINTER_DWARFPRINTER_H__
end_ifndef

begin_define
define|#
directive|define
name|CODEGEN_ASMPRINTER_DWARFPRINTER_H__
end_define

begin_include
include|#
directive|include
file|"DwarfLabel.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineLocation.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AsmPrinter
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineModuleInfo
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|MCAsmInfo
decl_stmt|;
name|class
name|TargetData
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|Dwarf
block|{
name|protected
label|:
comment|//===-------------------------------------------------------------==---===//
comment|// Core attributes used by the DWARF printer.
comment|//
comment|/// O - Stream to .s file.
comment|///
name|raw_ostream
modifier|&
name|O
decl_stmt|;
comment|/// Asm - Target of Dwarf emission.
comment|///
name|AsmPrinter
modifier|*
name|Asm
decl_stmt|;
comment|/// MAI - Target asm information.
comment|///
specifier|const
name|MCAsmInfo
modifier|*
name|MAI
decl_stmt|;
comment|/// TD - Target data.
comment|///
specifier|const
name|TargetData
modifier|*
name|TD
decl_stmt|;
comment|/// RI - Register Information.
comment|///
specifier|const
name|TargetRegisterInfo
modifier|*
name|RI
decl_stmt|;
comment|/// M - Current module.
comment|///
name|Module
modifier|*
name|M
decl_stmt|;
comment|/// MF - Current machine function.
comment|///
name|MachineFunction
modifier|*
name|MF
decl_stmt|;
comment|/// MMI - Collected machine module information.
comment|///
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
comment|/// SubprogramCount - The running count of functions being compiled.
comment|///
name|unsigned
name|SubprogramCount
decl_stmt|;
comment|/// Flavor - A unique string indicating what dwarf producer this is, used to
comment|/// unique labels.
comment|///
specifier|const
name|char
modifier|*
specifier|const
name|Flavor
decl_stmt|;
comment|/// SetCounter - A unique number for each '.set' directive.
comment|///
name|unsigned
name|SetCounter
decl_stmt|;
name|Dwarf
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|AsmPrinter
operator|*
name|A
argument_list|,
specifier|const
name|MCAsmInfo
operator|*
name|T
argument_list|,
specifier|const
name|char
operator|*
name|flavor
argument_list|)
expr_stmt|;
name|public
label|:
comment|//===------------------------------------------------------------------===//
comment|// Accessors.
comment|//
specifier|const
name|AsmPrinter
operator|*
name|getAsm
argument_list|()
specifier|const
block|{
return|return
name|Asm
return|;
block|}
name|MachineModuleInfo
operator|*
name|getMMI
argument_list|()
specifier|const
block|{
return|return
name|MMI
return|;
block|}
specifier|const
name|MCAsmInfo
operator|*
name|getMCAsmInfo
argument_list|()
specifier|const
block|{
return|return
name|MAI
return|;
block|}
specifier|const
name|TargetData
operator|*
name|getTargetData
argument_list|()
specifier|const
block|{
return|return
name|TD
return|;
block|}
name|void
name|PrintRelDirective
argument_list|(
name|bool
name|Force32Bit
operator|=
name|false
argument_list|,
name|bool
name|isInSection
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
comment|/// PrintLabelName - Print label name in form used by Dwarf writer.
comment|///
name|void
name|PrintLabelName
argument_list|(
specifier|const
name|DWLabel
operator|&
name|Label
argument_list|)
decl|const
block|{
name|PrintLabelName
argument_list|(
name|Label
operator|.
name|getTag
argument_list|()
argument_list|,
name|Label
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|PrintLabelName
argument_list|(
specifier|const
name|char
operator|*
name|Tag
argument_list|,
name|unsigned
name|Number
argument_list|)
decl|const
decl_stmt|;
name|void
name|PrintLabelName
argument_list|(
specifier|const
name|char
operator|*
name|Tag
argument_list|,
name|unsigned
name|Number
argument_list|,
specifier|const
name|char
operator|*
name|Suffix
argument_list|)
decl|const
decl_stmt|;
comment|/// EmitLabel - Emit location label for internal use by Dwarf.
comment|///
name|void
name|EmitLabel
argument_list|(
specifier|const
name|DWLabel
operator|&
name|Label
argument_list|)
decl|const
block|{
name|EmitLabel
argument_list|(
name|Label
operator|.
name|getTag
argument_list|()
argument_list|,
name|Label
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitLabel
argument_list|(
specifier|const
name|char
operator|*
name|Tag
argument_list|,
name|unsigned
name|Number
argument_list|)
decl|const
decl_stmt|;
comment|/// EmitReference - Emit a reference to a label.
comment|///
name|void
name|EmitReference
argument_list|(
specifier|const
name|DWLabel
operator|&
name|Label
argument_list|,
name|bool
name|IsPCRelative
operator|=
name|false
argument_list|,
name|bool
name|Force32Bit
operator|=
name|false
argument_list|)
decl|const
block|{
name|EmitReference
argument_list|(
name|Label
operator|.
name|getTag
argument_list|()
argument_list|,
name|Label
operator|.
name|getNumber
argument_list|()
argument_list|,
name|IsPCRelative
argument_list|,
name|Force32Bit
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitReference
argument_list|(
specifier|const
name|char
operator|*
name|Tag
argument_list|,
name|unsigned
name|Number
argument_list|,
name|bool
name|IsPCRelative
operator|=
name|false
argument_list|,
name|bool
name|Force32Bit
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|void
name|EmitReference
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|IsPCRelative
operator|=
name|false
argument_list|,
name|bool
name|Force32Bit
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
comment|/// EmitDifference - Emit the difference between two labels.  Some
comment|/// assemblers do not behave with absolute expressions with data directives,
comment|/// so there is an option (needsSet) to use an intermediary set expression.
name|void
name|EmitDifference
parameter_list|(
specifier|const
name|DWLabel
modifier|&
name|LabelHi
parameter_list|,
specifier|const
name|DWLabel
modifier|&
name|LabelLo
parameter_list|,
name|bool
name|IsSmall
init|=
name|false
parameter_list|)
block|{
name|EmitDifference
argument_list|(
name|LabelHi
operator|.
name|getTag
argument_list|()
argument_list|,
name|LabelHi
operator|.
name|getNumber
argument_list|()
argument_list|,
name|LabelLo
operator|.
name|getTag
argument_list|()
argument_list|,
name|LabelLo
operator|.
name|getNumber
argument_list|()
argument_list|,
name|IsSmall
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitDifference
parameter_list|(
specifier|const
name|char
modifier|*
name|TagHi
parameter_list|,
name|unsigned
name|NumberHi
parameter_list|,
specifier|const
name|char
modifier|*
name|TagLo
parameter_list|,
name|unsigned
name|NumberLo
parameter_list|,
name|bool
name|IsSmall
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|EmitSectionOffset
parameter_list|(
specifier|const
name|char
modifier|*
name|Label
parameter_list|,
specifier|const
name|char
modifier|*
name|Section
parameter_list|,
name|unsigned
name|LabelNumber
parameter_list|,
name|unsigned
name|SectionNumber
parameter_list|,
name|bool
name|IsSmall
init|=
name|false
parameter_list|,
name|bool
name|isEH
init|=
name|false
parameter_list|,
name|bool
name|useSet
init|=
name|true
parameter_list|)
function_decl|;
comment|/// EmitFrameMoves - Emit frame instructions to describe the layout of the
comment|/// frame.
name|void
name|EmitFrameMoves
argument_list|(
specifier|const
name|char
operator|*
name|BaseLabel
argument_list|,
name|unsigned
name|BaseLabelID
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|MachineMove
operator|>
operator|&
name|Moves
argument_list|,
name|bool
name|isEH
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

