begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/DwarfCompileUnit.h - Dwarf Compile Unit ---*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains support for writing dwarf compile unit.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CODEGEN_ASMPRINTER_DWARFCOMPILEUNIT_H
end_ifndef

begin_define
define|#
directive|define
name|CODEGEN_ASMPRINTER_DWARFCOMPILEUNIT_H
end_define

begin_include
include|#
directive|include
file|"DIE.h"
end_include

begin_include
include|#
directive|include
file|"DwarfDebug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCExpr.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineLocation
decl_stmt|;
name|class
name|MachineOperand
decl_stmt|;
name|class
name|ConstantInt
decl_stmt|;
name|class
name|ConstantFP
decl_stmt|;
name|class
name|DbgVariable
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|/// CompileUnit - This dwarf writer support class manages information associated
comment|/// with a source file.
name|class
name|CompileUnit
block|{
comment|/// UniqueID - a numeric ID unique among all CUs in the module
comment|///
name|unsigned
name|UniqueID
decl_stmt|;
comment|/// Node - MDNode for the compile unit.
name|DICompileUnit
name|Node
decl_stmt|;
comment|/// CUDie - Compile unit debug information entry.
comment|///
specifier|const
name|OwningPtr
operator|<
name|DIE
operator|>
name|CUDie
expr_stmt|;
comment|/// Asm - Target of Dwarf emission.
name|AsmPrinter
modifier|*
name|Asm
decl_stmt|;
comment|// Holders for some common dwarf information.
name|DwarfDebug
modifier|*
name|DD
decl_stmt|;
name|DwarfUnits
modifier|*
name|DU
decl_stmt|;
comment|/// IndexTyDie - An anonymous type for index type.  Owned by CUDie.
name|DIE
modifier|*
name|IndexTyDie
decl_stmt|;
comment|/// MDNodeToDieMap - Tracks the mapping of unit level debug information
comment|/// variables to debug information entries.
name|DenseMap
operator|<
specifier|const
name|MDNode
operator|*
operator|,
name|DIE
operator|*
operator|>
name|MDNodeToDieMap
expr_stmt|;
comment|/// MDNodeToDIEEntryMap - Tracks the mapping of unit level debug information
comment|/// descriptors to debug information entries using a DIEEntry proxy.
name|DenseMap
operator|<
specifier|const
name|MDNode
operator|*
operator|,
name|DIEEntry
operator|*
operator|>
name|MDNodeToDIEEntryMap
expr_stmt|;
comment|/// GlobalNames - A map of globally visible named entities for this unit.
comment|///
name|StringMap
operator|<
name|DIE
operator|*
operator|>
name|GlobalNames
expr_stmt|;
comment|/// GlobalTypes - A map of globally visible types for this unit.
comment|///
name|StringMap
operator|<
name|DIE
operator|*
operator|>
name|GlobalTypes
expr_stmt|;
comment|/// AccelNames - A map of names for the name accelerator table.
comment|///
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
name|AccelNames
expr_stmt|;
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
name|AccelObjC
expr_stmt|;
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
name|AccelNamespace
expr_stmt|;
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|DIE
operator|*
operator|,
name|unsigned
operator|>
expr|>
operator|>
name|AccelTypes
expr_stmt|;
comment|/// DIEBlocks - A list of all the DIEBlocks in use.
name|std
operator|::
name|vector
operator|<
name|DIEBlock
operator|*
operator|>
name|DIEBlocks
expr_stmt|;
comment|/// ContainingTypeMap - This map is used to keep track of subprogram DIEs that
comment|/// need DW_AT_containing_type attribute. This attribute points to a DIE that
comment|/// corresponds to the MDNode mapped with the subprogram DIE.
name|DenseMap
operator|<
name|DIE
operator|*
operator|,
specifier|const
name|MDNode
operator|*
operator|>
name|ContainingTypeMap
expr_stmt|;
comment|// DIEValueAllocator - All DIEValues are allocated through this allocator.
name|BumpPtrAllocator
name|DIEValueAllocator
decl_stmt|;
comment|// DIEIntegerOne - A preallocated DIEValue because 1 is used frequently.
name|DIEInteger
modifier|*
name|DIEIntegerOne
decl_stmt|;
name|public
label|:
name|CompileUnit
argument_list|(
argument|unsigned UID
argument_list|,
argument|DIE *D
argument_list|,
argument|DICompileUnit CU
argument_list|,
argument|AsmPrinter *A
argument_list|,
argument|DwarfDebug *DW
argument_list|,
argument|DwarfUnits *DWU
argument_list|)
empty_stmt|;
operator|~
name|CompileUnit
argument_list|()
expr_stmt|;
comment|// Accessors.
name|unsigned
name|getUniqueID
argument_list|()
specifier|const
block|{
return|return
name|UniqueID
return|;
block|}
name|uint16_t
name|getLanguage
argument_list|()
specifier|const
block|{
return|return
name|Node
operator|.
name|getLanguage
argument_list|()
return|;
block|}
name|DICompileUnit
name|getNode
argument_list|()
specifier|const
block|{
return|return
name|Node
return|;
block|}
name|DIE
operator|*
name|getCUDie
argument_list|()
specifier|const
block|{
return|return
name|CUDie
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|StringMap
operator|<
name|DIE
operator|*
operator|>
operator|&
name|getGlobalNames
argument_list|()
specifier|const
block|{
return|return
name|GlobalNames
return|;
block|}
specifier|const
name|StringMap
operator|<
name|DIE
operator|*
operator|>
operator|&
name|getGlobalTypes
argument_list|()
specifier|const
block|{
return|return
name|GlobalTypes
return|;
block|}
specifier|const
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
operator|&
name|getAccelNames
argument_list|()
specifier|const
block|{
return|return
name|AccelNames
return|;
block|}
specifier|const
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
operator|&
name|getAccelObjC
argument_list|()
specifier|const
block|{
return|return
name|AccelObjC
return|;
block|}
specifier|const
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|DIE
operator|*
operator|>
expr|>
operator|&
name|getAccelNamespace
argument_list|()
specifier|const
block|{
return|return
name|AccelNamespace
return|;
block|}
specifier|const
name|StringMap
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|DIE
operator|*
operator|,
name|unsigned
operator|>
expr|>
operator|>
operator|&
name|getAccelTypes
argument_list|()
specifier|const
block|{
return|return
name|AccelTypes
return|;
block|}
name|unsigned
name|getDebugInfoOffset
argument_list|()
specifier|const
block|{
return|return
name|DebugInfoOffset
return|;
block|}
name|void
name|setDebugInfoOffset
parameter_list|(
name|unsigned
name|DbgInfoOff
parameter_list|)
block|{
name|DebugInfoOffset
operator|=
name|DbgInfoOff
expr_stmt|;
block|}
comment|/// hasContent - Return true if this compile unit has something to write out.
comment|///
name|bool
name|hasContent
argument_list|()
specifier|const
block|{
return|return
operator|!
name|CUDie
operator|->
name|getChildren
argument_list|()
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// getParentContextString - Get a string containing the language specific
comment|/// context for a global name.
name|std
operator|::
name|string
name|getParentContextString
argument_list|(
argument|DIScope Context
argument_list|)
specifier|const
expr_stmt|;
comment|/// addGlobalName - Add a new global entity to the compile unit.
comment|///
name|void
name|addGlobalName
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|DIE
modifier|*
name|Die
parameter_list|,
name|DIScope
name|Context
parameter_list|)
function_decl|;
comment|/// addGlobalType - Add a new global type to the compile unit.
comment|///
name|void
name|addGlobalType
parameter_list|(
name|DIType
name|Ty
parameter_list|)
function_decl|;
comment|/// addPubTypes - Add a set of types from the subprogram to the global types.
name|void
name|addPubTypes
parameter_list|(
name|DISubprogram
name|SP
parameter_list|)
function_decl|;
comment|/// addAccelName - Add a new name to the name accelerator table.
name|void
name|addAccelName
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|DIE
modifier|*
name|Die
parameter_list|)
function_decl|;
comment|/// addAccelObjC - Add a new name to the ObjC accelerator table.
name|void
name|addAccelObjC
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|DIE
modifier|*
name|Die
parameter_list|)
function_decl|;
comment|/// addAccelNamespace - Add a new name to the namespace accelerator table.
name|void
name|addAccelNamespace
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|DIE
modifier|*
name|Die
parameter_list|)
function_decl|;
comment|/// addAccelType - Add a new type to the type accelerator table.
name|void
name|addAccelType
argument_list|(
name|StringRef
name|Name
argument_list|,
name|std
operator|::
name|pair
operator|<
name|DIE
operator|*
argument_list|,
name|unsigned
operator|>
name|Die
argument_list|)
decl_stmt|;
comment|/// getDIE - Returns the debug information entry map slot for the
comment|/// specified debug variable. We delegate the request to DwarfDebug
comment|/// when the MDNode can be part of the type system, since DIEs for
comment|/// the type system can be shared across CUs and the mappings are
comment|/// kept in DwarfDebug.
name|DIE
modifier|*
name|getDIE
argument_list|(
name|DIDescriptor
name|D
argument_list|)
decl|const
decl_stmt|;
name|DIEBlock
modifier|*
name|getDIEBlock
parameter_list|()
block|{
return|return
name|new
argument_list|(
argument|DIEValueAllocator
argument_list|)
name|DIEBlock
argument_list|()
return|;
block|}
comment|/// insertDIE - Insert DIE into the map. We delegate the request to DwarfDebug
comment|/// when the MDNode can be part of the type system, since DIEs for
comment|/// the type system can be shared across CUs and the mappings are
comment|/// kept in DwarfDebug.
name|void
name|insertDIE
parameter_list|(
name|DIDescriptor
name|Desc
parameter_list|,
name|DIE
modifier|*
name|D
parameter_list|)
function_decl|;
comment|/// addDie - Adds or interns the DIE to the compile unit.
comment|///
name|void
name|addDie
parameter_list|(
name|DIE
modifier|*
name|Buffer
parameter_list|)
block|{
name|CUDie
operator|->
name|addChild
argument_list|(
name|Buffer
argument_list|)
expr_stmt|;
block|}
comment|/// addFlag - Add a flag that is true to the DIE.
name|void
name|addFlag
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|)
decl_stmt|;
comment|/// addUInt - Add an unsigned integer attribute data and value.
comment|///
name|void
name|addUInt
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|Optional
operator|<
name|dwarf
operator|::
name|Form
operator|>
name|Form
argument_list|,
name|uint64_t
name|Integer
argument_list|)
decl_stmt|;
name|void
name|addUInt
argument_list|(
name|DIEBlock
operator|*
name|Block
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
name|uint64_t
name|Integer
argument_list|)
decl_stmt|;
comment|/// addSInt - Add an signed integer attribute data and value.
comment|///
name|void
name|addSInt
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|Optional
operator|<
name|dwarf
operator|::
name|Form
operator|>
name|Form
argument_list|,
name|int64_t
name|Integer
argument_list|)
decl_stmt|;
name|void
name|addSInt
argument_list|(
name|DIEBlock
operator|*
name|Die
argument_list|,
name|Optional
operator|<
name|dwarf
operator|::
name|Form
operator|>
name|Form
argument_list|,
name|int64_t
name|Integer
argument_list|)
decl_stmt|;
comment|/// addString - Add a string attribute data and value.
comment|///
name|void
name|addString
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
specifier|const
name|StringRef
name|Str
argument_list|)
decl_stmt|;
comment|/// addLocalString - Add a string attribute data and value.
comment|///
name|void
name|addLocalString
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
specifier|const
name|StringRef
name|Str
argument_list|)
decl_stmt|;
comment|/// addExpr - Add a Dwarf expression attribute data and value.
comment|///
name|void
name|addExpr
argument_list|(
name|DIEBlock
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
specifier|const
name|MCExpr
operator|*
name|Expr
argument_list|)
decl_stmt|;
comment|/// addLabel - Add a Dwarf label attribute data and value.
comment|///
name|void
name|addLabel
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Label
argument_list|)
decl_stmt|;
name|void
name|addLabel
argument_list|(
name|DIEBlock
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Label
argument_list|)
decl_stmt|;
comment|/// addLabelAddress - Add a dwarf label attribute data and value using
comment|/// either DW_FORM_addr or DW_FORM_GNU_addr_index.
comment|///
name|void
name|addLabelAddress
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|MCSymbol
operator|*
name|Label
argument_list|)
decl_stmt|;
comment|/// addOpAddress - Add a dwarf op address data and value using the
comment|/// form given and an op of either DW_FORM_addr or DW_FORM_GNU_addr_index.
comment|///
name|void
name|addOpAddress
parameter_list|(
name|DIEBlock
modifier|*
name|Die
parameter_list|,
specifier|const
name|MCSymbol
modifier|*
name|Label
parameter_list|)
function_decl|;
comment|/// addDelta - Add a label delta attribute data and value.
comment|///
name|void
name|addDelta
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|dwarf
operator|::
name|Form
name|Form
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Hi
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Lo
argument_list|)
decl_stmt|;
comment|/// addDIEEntry - Add a DIE attribute data and value.
comment|///
name|void
name|addDIEEntry
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|DIE
operator|*
name|Entry
argument_list|)
decl_stmt|;
comment|/// addDIEEntry - Add a DIE attribute data and value.
comment|///
name|void
name|addDIEEntry
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|DIEEntry
operator|*
name|Entry
argument_list|)
decl_stmt|;
comment|/// addBlock - Add block data.
comment|///
name|void
name|addBlock
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
name|DIEBlock
operator|*
name|Block
argument_list|)
decl_stmt|;
comment|/// addSourceLine - Add location information to specified debug information
comment|/// entry.
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DIVariable
name|V
parameter_list|)
function_decl|;
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DIGlobalVariable
name|G
parameter_list|)
function_decl|;
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DISubprogram
name|SP
parameter_list|)
function_decl|;
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DIType
name|Ty
parameter_list|)
function_decl|;
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DINameSpace
name|NS
parameter_list|)
function_decl|;
name|void
name|addSourceLine
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
name|DIObjCProperty
name|Ty
parameter_list|)
function_decl|;
comment|/// addAddress - Add an address attribute to a die based on the location
comment|/// provided.
name|void
name|addAddress
argument_list|(
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
specifier|const
name|MachineLocation
operator|&
name|Location
argument_list|,
name|bool
name|Indirect
operator|=
name|false
argument_list|)
decl_stmt|;
comment|/// addConstantValue - Add constant value entry in variable DIE.
name|void
name|addConstantValue
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
specifier|const
name|MachineOperand
modifier|&
name|MO
parameter_list|,
name|DIType
name|Ty
parameter_list|)
function_decl|;
name|void
name|addConstantValue
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
specifier|const
name|ConstantInt
modifier|*
name|CI
parameter_list|,
name|bool
name|Unsigned
parameter_list|)
function_decl|;
name|void
name|addConstantValue
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
specifier|const
name|APInt
modifier|&
name|Val
parameter_list|,
name|bool
name|Unsigned
parameter_list|)
function_decl|;
comment|/// addConstantFPValue - Add constant value entry in variable DIE.
name|void
name|addConstantFPValue
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
specifier|const
name|MachineOperand
modifier|&
name|MO
parameter_list|)
function_decl|;
name|void
name|addConstantFPValue
parameter_list|(
name|DIE
modifier|*
name|Die
parameter_list|,
specifier|const
name|ConstantFP
modifier|*
name|CFP
parameter_list|)
function_decl|;
comment|/// addTemplateParams - Add template parameters in buffer.
name|void
name|addTemplateParams
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DIArray
name|TParams
parameter_list|)
function_decl|;
comment|/// addRegisterOp - Add register operand.
name|void
name|addRegisterOp
parameter_list|(
name|DIEBlock
modifier|*
name|TheDie
parameter_list|,
name|unsigned
name|Reg
parameter_list|)
function_decl|;
comment|/// addRegisterOffset - Add register offset.
name|void
name|addRegisterOffset
parameter_list|(
name|DIEBlock
modifier|*
name|TheDie
parameter_list|,
name|unsigned
name|Reg
parameter_list|,
name|int64_t
name|Offset
parameter_list|)
function_decl|;
comment|/// addComplexAddress - Start with the address based on the location provided,
comment|/// and generate the DWARF information necessary to find the actual variable
comment|/// (navigating the extra location information encoded in the type) based on
comment|/// the starting location.  Add the DWARF information to the die.
comment|///
name|void
name|addComplexAddress
argument_list|(
specifier|const
name|DbgVariable
operator|&
name|DV
argument_list|,
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
specifier|const
name|MachineLocation
operator|&
name|Location
argument_list|)
decl_stmt|;
comment|// FIXME: Should be reformulated in terms of addComplexAddress.
comment|/// addBlockByrefAddress - Start with the address based on the location
comment|/// provided, and generate the DWARF information necessary to find the
comment|/// actual Block variable (navigating the Block struct) based on the
comment|/// starting location.  Add the DWARF information to the die.  Obsolete,
comment|/// please use addComplexAddress instead.
comment|///
name|void
name|addBlockByrefAddress
argument_list|(
specifier|const
name|DbgVariable
operator|&
name|DV
argument_list|,
name|DIE
operator|*
name|Die
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
argument_list|,
specifier|const
name|MachineLocation
operator|&
name|Location
argument_list|)
decl_stmt|;
comment|/// addVariableAddress - Add DW_AT_location attribute for a
comment|/// DbgVariable based on provided MachineLocation.
name|void
name|addVariableAddress
parameter_list|(
specifier|const
name|DbgVariable
modifier|&
name|DV
parameter_list|,
name|DIE
modifier|*
name|Die
parameter_list|,
name|MachineLocation
name|Location
parameter_list|)
function_decl|;
comment|/// addType - Add a new type attribute to the specified entity. This takes
comment|/// and attribute parameter because DW_AT_friend attributes are also
comment|/// type references.
name|void
name|addType
argument_list|(
name|DIE
operator|*
name|Entity
argument_list|,
name|DIType
name|Ty
argument_list|,
name|dwarf
operator|::
name|Attribute
name|Attribute
operator|=
name|dwarf
operator|::
name|DW_AT_type
argument_list|)
decl_stmt|;
comment|/// getOrCreateNameSpace - Create a DIE for DINameSpace.
name|DIE
modifier|*
name|getOrCreateNameSpace
parameter_list|(
name|DINameSpace
name|NS
parameter_list|)
function_decl|;
comment|/// getOrCreateSubprogramDIE - Create new DIE using SP.
name|DIE
modifier|*
name|getOrCreateSubprogramDIE
parameter_list|(
name|DISubprogram
name|SP
parameter_list|)
function_decl|;
comment|/// getOrCreateTypeDIE - Find existing DIE or create new DIE for the
comment|/// given DIType.
name|DIE
modifier|*
name|getOrCreateTypeDIE
parameter_list|(
specifier|const
name|MDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|/// getOrCreateContextDIE - Get context owner's DIE.
name|DIE
modifier|*
name|getOrCreateContextDIE
parameter_list|(
name|DIScope
name|Context
parameter_list|)
function_decl|;
comment|/// createGlobalVariableDIE - create global variable DIE.
name|void
name|createGlobalVariableDIE
parameter_list|(
name|DIGlobalVariable
name|GV
parameter_list|)
function_decl|;
comment|/// constructContainingTypeDIEs - Construct DIEs for types that contain
comment|/// vtables.
name|void
name|constructContainingTypeDIEs
parameter_list|()
function_decl|;
comment|/// constructVariableDIE - Construct a DIE for the given DbgVariable.
name|DIE
modifier|*
name|constructVariableDIE
parameter_list|(
name|DbgVariable
modifier|&
name|DV
parameter_list|,
name|bool
name|isScopeAbstract
parameter_list|)
function_decl|;
comment|/// Create a DIE with the given Tag, add the DIE to its parent, and
comment|/// call insertDIE if MD is not null.
name|DIE
modifier|*
name|createAndAddDIE
parameter_list|(
name|unsigned
name|Tag
parameter_list|,
name|DIE
modifier|&
name|Parent
parameter_list|,
name|DIDescriptor
name|N
init|=
name|DIDescriptor
argument_list|()
parameter_list|)
function_decl|;
comment|/// Compute the size of a header for this unit, not including the initial
comment|/// length field.
name|unsigned
name|getHeaderSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|int16_t
argument_list|)
operator|+
comment|// DWARF version number
sizeof|sizeof
argument_list|(
name|int32_t
argument_list|)
operator|+
comment|// Offset Into Abbrev. Section
sizeof|sizeof
argument_list|(
name|int8_t
argument_list|)
return|;
comment|// Pointer Size (in bytes)
block|}
comment|/// Emit the header for this unit, not including the initial length field.
name|void
name|emitHeader
parameter_list|(
specifier|const
name|MCSection
modifier|*
name|ASection
parameter_list|,
specifier|const
name|MCSymbol
modifier|*
name|ASectionSym
parameter_list|)
function_decl|;
name|private
label|:
comment|/// constructTypeDIE - Construct basic type die from DIBasicType.
name|void
name|constructTypeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DIBasicType
name|BTy
parameter_list|)
function_decl|;
comment|/// constructTypeDIE - Construct derived type die from DIDerivedType.
name|void
name|constructTypeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DIDerivedType
name|DTy
parameter_list|)
function_decl|;
comment|/// constructTypeDIE - Construct type DIE from DICompositeType.
name|void
name|constructTypeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DICompositeType
name|CTy
parameter_list|)
function_decl|;
comment|/// constructSubrangeDIE - Construct subrange DIE from DISubrange.
name|void
name|constructSubrangeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DISubrange
name|SR
parameter_list|,
name|DIE
modifier|*
name|IndexTy
parameter_list|)
function_decl|;
comment|/// constructArrayTypeDIE - Construct array type DIE from DICompositeType.
name|void
name|constructArrayTypeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DICompositeType
name|CTy
parameter_list|)
function_decl|;
comment|/// constructEnumTypeDIE - Construct enum type DIE from DIEnumerator.
name|void
name|constructEnumTypeDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DICompositeType
name|CTy
parameter_list|)
function_decl|;
comment|/// constructMemberDIE - Construct member DIE from DIDerivedType.
name|void
name|constructMemberDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DIDerivedType
name|DT
parameter_list|)
function_decl|;
comment|/// constructTemplateTypeParameterDIE - Construct new DIE for the given
comment|/// DITemplateTypeParameter.
name|void
name|constructTemplateTypeParameterDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DITemplateTypeParameter
name|TP
parameter_list|)
function_decl|;
comment|/// constructTemplateValueParameterDIE - Construct new DIE for the given
comment|/// DITemplateValueParameter.
name|void
name|constructTemplateValueParameterDIE
parameter_list|(
name|DIE
modifier|&
name|Buffer
parameter_list|,
name|DITemplateValueParameter
name|TVP
parameter_list|)
function_decl|;
comment|/// getOrCreateStaticMemberDIE - Create new static data member DIE.
name|DIE
modifier|*
name|getOrCreateStaticMemberDIE
parameter_list|(
name|DIDerivedType
name|DT
parameter_list|)
function_decl|;
comment|/// Offset of the CUDie from beginning of debug info section.
name|unsigned
name|DebugInfoOffset
decl_stmt|;
comment|/// getLowerBoundDefault - Return the default lower bound for an array. If the
comment|/// DWARF version doesn't handle the language, return -1.
name|int64_t
name|getDefaultLowerBound
argument_list|()
specifier|const
expr_stmt|;
comment|/// getDIEEntry - Returns the debug information entry for the specified
comment|/// debug variable.
name|DIEEntry
modifier|*
name|getDIEEntry
argument_list|(
specifier|const
name|MDNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|MDNodeToDIEEntryMap
operator|.
name|lookup
argument_list|(
name|N
argument_list|)
return|;
block|}
comment|/// insertDIEEntry - Insert debug information entry into the map.
name|void
name|insertDIEEntry
parameter_list|(
specifier|const
name|MDNode
modifier|*
name|N
parameter_list|,
name|DIEEntry
modifier|*
name|E
parameter_list|)
block|{
name|MDNodeToDIEEntryMap
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|N
argument_list|,
name|E
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// getIndexTyDie - Get an anonymous type for index type.
name|DIE
modifier|*
name|getIndexTyDie
parameter_list|()
block|{
return|return
name|IndexTyDie
return|;
block|}
comment|// setIndexTyDie - Set D as anonymous type for index which can be reused
comment|// later.
name|void
name|setIndexTyDie
parameter_list|(
name|DIE
modifier|*
name|D
parameter_list|)
block|{
name|IndexTyDie
operator|=
name|D
expr_stmt|;
block|}
comment|/// createDIEEntry - Creates a new DIEEntry to be a proxy for a debug
comment|/// information entry.
name|DIEEntry
modifier|*
name|createDIEEntry
parameter_list|(
name|DIE
modifier|*
name|Entry
parameter_list|)
function_decl|;
comment|/// resolve - Look in the DwarfDebug map for the MDNode that
comment|/// corresponds to the reference.
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|resolve
argument_list|(
argument|DIRef<T> Ref
argument_list|)
specifier|const
block|{
return|return
name|DD
operator|->
name|resolve
argument_list|(
name|Ref
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

