begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGBuilder.h - Choose IRBuilder implementation  ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_CODEGEN_CGBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_CODEGEN_CGBUILDER_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IRBuilder.h"
end_include

begin_include
include|#
directive|include
file|"Address.h"
end_include

begin_include
include|#
directive|include
file|"CodeGenTypeCache.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|CodeGen
block|{
name|class
name|CodeGenFunction
decl_stmt|;
comment|/// \brief This is an IRBuilder insertion helper that forwards to
comment|/// CodeGenFunction::InsertHelper, which adds necessary metadata to
comment|/// instructions.
name|class
name|CGBuilderInserter
range|:
name|protected
name|llvm
operator|::
name|IRBuilderDefaultInserter
block|{
name|public
operator|:
name|CGBuilderInserter
argument_list|()
operator|=
expr|default
block|;
name|explicit
name|CGBuilderInserter
argument_list|(
name|CodeGenFunction
operator|*
name|CGF
argument_list|)
operator|:
name|CGF
argument_list|(
argument|CGF
argument_list|)
block|{}
name|protected
operator|:
comment|/// \brief This forwards to CodeGenFunction::InsertHelper.
name|void
name|InsertHelper
argument_list|(
argument|llvm::Instruction *I
argument_list|,
argument|const llvm::Twine&Name
argument_list|,
argument|llvm::BasicBlock *BB
argument_list|,
argument|llvm::BasicBlock::iterator InsertPt
argument_list|)
specifier|const
block|;
name|private
operator|:
name|CodeGenFunction
operator|*
name|CGF
operator|=
name|nullptr
block|; }
decl_stmt|;
typedef|typedef
name|CGBuilderInserter
name|CGBuilderInserterTy
typedef|;
typedef|typedef
name|llvm
operator|::
name|IRBuilder
operator|<
name|llvm
operator|::
name|ConstantFolder
operator|,
name|CGBuilderInserterTy
operator|>
name|CGBuilderBaseTy
expr_stmt|;
name|class
name|CGBuilderTy
range|:
name|public
name|CGBuilderBaseTy
block|{
comment|/// Storing a reference to the type cache here makes it a lot easier
comment|/// to build natural-feeling, target-specific IR.
specifier|const
name|CodeGenTypeCache
operator|&
name|TypeCache
block|;
name|public
operator|:
name|CGBuilderTy
argument_list|(
specifier|const
name|CodeGenTypeCache
operator|&
name|TypeCache
argument_list|,
name|llvm
operator|::
name|LLVMContext
operator|&
name|C
argument_list|)
operator|:
name|CGBuilderBaseTy
argument_list|(
name|C
argument_list|)
block|,
name|TypeCache
argument_list|(
argument|TypeCache
argument_list|)
block|{}
name|CGBuilderTy
argument_list|(
specifier|const
name|CodeGenTypeCache
operator|&
name|TypeCache
argument_list|,
name|llvm
operator|::
name|LLVMContext
operator|&
name|C
argument_list|,
specifier|const
name|llvm
operator|::
name|ConstantFolder
operator|&
name|F
argument_list|,
specifier|const
name|CGBuilderInserterTy
operator|&
name|Inserter
argument_list|)
operator|:
name|CGBuilderBaseTy
argument_list|(
name|C
argument_list|,
name|F
argument_list|,
name|Inserter
argument_list|)
block|,
name|TypeCache
argument_list|(
argument|TypeCache
argument_list|)
block|{}
name|CGBuilderTy
argument_list|(
specifier|const
name|CodeGenTypeCache
operator|&
name|TypeCache
argument_list|,
name|llvm
operator|::
name|Instruction
operator|*
name|I
argument_list|)
operator|:
name|CGBuilderBaseTy
argument_list|(
name|I
argument_list|)
block|,
name|TypeCache
argument_list|(
argument|TypeCache
argument_list|)
block|{}
name|CGBuilderTy
argument_list|(
specifier|const
name|CodeGenTypeCache
operator|&
name|TypeCache
argument_list|,
name|llvm
operator|::
name|BasicBlock
operator|*
name|BB
argument_list|)
operator|:
name|CGBuilderBaseTy
argument_list|(
name|BB
argument_list|)
block|,
name|TypeCache
argument_list|(
argument|TypeCache
argument_list|)
block|{}
name|llvm
operator|::
name|ConstantInt
operator|*
name|getSize
argument_list|(
argument|CharUnits N
argument_list|)
block|{
return|return
name|llvm
operator|::
name|ConstantInt
operator|::
name|get
argument_list|(
name|TypeCache
operator|.
name|SizeTy
argument_list|,
name|N
operator|.
name|getQuantity
argument_list|()
argument_list|)
return|;
block|}
name|llvm
operator|::
name|ConstantInt
operator|*
name|getSize
argument_list|(
argument|uint64_t N
argument_list|)
block|{
return|return
name|llvm
operator|::
name|ConstantInt
operator|::
name|get
argument_list|(
name|TypeCache
operator|.
name|SizeTy
argument_list|,
name|N
argument_list|)
return|;
block|}
comment|// Note that we intentionally hide the CreateLoad APIs that don't
comment|// take an alignment.
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateLoad
argument_list|(
argument|Address Addr
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateLoad
argument_list|(
argument|Address Addr
argument_list|,
argument|const char *Name
argument_list|)
block|{
comment|// This overload is required to prevent string literals from
comment|// ending up in the IsVolatile overload.
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateLoad
argument_list|(
argument|Address Addr
argument_list|,
argument|bool IsVolatile
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateAlignedLoad
block|;
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateAlignedLoad
argument_list|(
argument|llvm::Value *Addr
argument_list|,
argument|CharUnits Align
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateAlignedLoad
argument_list|(
argument|llvm::Value *Addr
argument_list|,
argument|CharUnits Align
argument_list|,
argument|const char *Name
argument_list|)
block|{
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateAlignedLoad
argument_list|(
argument|llvm::Type *Ty
argument_list|,
argument|llvm::Value *Addr
argument_list|,
argument|CharUnits Align
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Addr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|==
name|Ty
argument_list|)
block|;
return|return
name|CreateAlignedLoad
argument_list|(
name|Addr
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
comment|// Note that we intentionally hide the CreateStore APIs that don't
comment|// take an alignment.
name|llvm
operator|::
name|StoreInst
operator|*
name|CreateStore
argument_list|(
argument|llvm::Value *Val
argument_list|,
argument|Address Addr
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
return|return
name|CreateAlignedStore
argument_list|(
name|Val
argument_list|,
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateAlignedStore
block|;
name|llvm
operator|::
name|StoreInst
operator|*
name|CreateAlignedStore
argument_list|(
argument|llvm::Value *Val
argument_list|,
argument|llvm::Value *Addr
argument_list|,
argument|CharUnits Align
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
return|return
name|CreateAlignedStore
argument_list|(
name|Val
argument_list|,
name|Addr
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
comment|// FIXME: these "default-aligned" APIs should be removed,
comment|// but I don't feel like fixing all the builtin code right now.
name|llvm
operator|::
name|StoreInst
operator|*
name|CreateDefaultAlignedStore
argument_list|(
argument|llvm::Value *Val
argument_list|,
argument|llvm::Value *Addr
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
return|return
name|CGBuilderBaseTy
operator|::
name|CreateStore
argument_list|(
name|Val
argument_list|,
name|Addr
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
comment|/// Emit a load from an i1 flag variable.
name|llvm
operator|::
name|LoadInst
operator|*
name|CreateFlagLoad
argument_list|(
argument|llvm::Value *Addr
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Addr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|==
name|getInt1Ty
argument_list|()
argument_list|)
block|;
return|return
name|CreateAlignedLoad
argument_list|(
name|getInt1Ty
argument_list|()
argument_list|,
name|Addr
argument_list|,
name|CharUnits
operator|::
name|One
argument_list|()
argument_list|,
name|Name
argument_list|)
return|;
block|}
comment|/// Emit a store to an i1 flag variable.
name|llvm
operator|::
name|StoreInst
operator|*
name|CreateFlagStore
argument_list|(
argument|bool Value
argument_list|,
argument|llvm::Value *Addr
argument_list|)
block|{
name|assert
argument_list|(
name|Addr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|==
name|getInt1Ty
argument_list|()
argument_list|)
block|;
return|return
name|CreateAlignedStore
argument_list|(
name|getInt1
argument_list|(
name|Value
argument_list|)
argument_list|,
name|Addr
argument_list|,
name|CharUnits
operator|::
name|One
argument_list|()
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateBitCast
block|;
name|Address
name|CreateBitCast
argument_list|(
argument|Address Addr
argument_list|,
argument|llvm::Type *Ty
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Address
argument_list|(
name|CreateBitCast
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Ty
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
argument_list|)
return|;
block|}
comment|/// Cast the element type of the given address to a different type,
comment|/// preserving information like the alignment and address space.
name|Address
name|CreateElementBitCast
argument_list|(
argument|Address Addr
argument_list|,
argument|llvm::Type *Ty
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|auto
name|PtrTy
operator|=
name|Ty
operator|->
name|getPointerTo
argument_list|(
name|Addr
operator|.
name|getAddressSpace
argument_list|()
argument_list|)
block|;
return|return
name|CreateBitCast
argument_list|(
name|Addr
argument_list|,
name|PtrTy
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreatePointerBitCastOrAddrSpaceCast
block|;
name|Address
name|CreatePointerBitCastOrAddrSpaceCast
argument_list|(
argument|Address Addr
argument_list|,
argument|llvm::Type *Ty
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|llvm
operator|::
name|Value
operator|*
name|Ptr
operator|=
name|CreatePointerBitCastOrAddrSpaceCast
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Ty
argument_list|,
name|Name
argument_list|)
block|;
return|return
name|Address
argument_list|(
name|Ptr
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateStructGEP
block|;
name|Address
name|CreateStructGEP
argument_list|(
argument|Address Addr
argument_list|,
argument|unsigned Index
argument_list|,
argument|CharUnits Offset
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Address
argument_list|(
name|CreateStructGEP
argument_list|(
name|Addr
operator|.
name|getElementType
argument_list|()
argument_list|,
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Index
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Offset
argument_list|)
argument_list|)
return|;
block|}
name|Address
name|CreateStructGEP
argument_list|(
argument|Address Addr
argument_list|,
argument|unsigned Index
argument_list|,
argument|const llvm::StructLayout *Layout
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|auto
name|Offset
operator|=
name|CharUnits
operator|::
name|fromQuantity
argument_list|(
name|Layout
operator|->
name|getElementOffset
argument_list|(
name|Index
argument_list|)
argument_list|)
block|;
return|return
name|CreateStructGEP
argument_list|(
name|Addr
argument_list|,
name|Index
argument_list|,
name|Offset
argument_list|,
name|Name
argument_list|)
return|;
block|}
comment|/// Given
comment|///   %addr = [n x T]* ...
comment|/// produce
comment|///   %name = getelementptr inbounds %addr, i64 0, i64 index
comment|/// where i64 is actually the target word size.
comment|///
comment|/// This API assumes that drilling into an array like this is always
comment|/// an inbounds operation.
comment|///
comment|/// \param EltSize - the size of the type T in bytes
name|Address
name|CreateConstArrayGEP
argument_list|(
argument|Address Addr
argument_list|,
argument|uint64_t Index
argument_list|,
argument|CharUnits EltSize
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Address
argument_list|(
name|CreateInBoundsGEP
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
block|{
name|getSize
argument_list|(
name|CharUnits
operator|::
name|Zero
argument_list|()
argument_list|)
operator|,
name|getSize
argument_list|(
argument|Index
argument_list|)
block|}
argument_list|,
name|Name
argument_list|)
operator|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Index
operator|*
name|EltSize
argument_list|)
block|)
block|;   }
comment|/// Given
comment|///   %addr = T* ...
comment|/// produce
comment|///   %name = getelementptr inbounds %addr, i64 index
comment|/// where i64 is actually the target word size.
comment|///
comment|/// \param EltSize - the size of the type T in bytes
name|Address
name|CreateConstInBoundsGEP
argument_list|(
argument|Address Addr
argument_list|,
argument|uint64_t Index
argument_list|,
argument|CharUnits EltSize
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
return|return
name|Address
argument_list|(
name|CreateInBoundsGEP
argument_list|(
name|Addr
operator|.
name|getElementType
argument_list|()
argument_list|,
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|getSize
argument_list|(
name|Index
argument_list|)
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Index
operator|*
name|EltSize
argument_list|)
argument_list|)
return|;
block|}
comment|/// Given
comment|///   %addr = T* ...
comment|/// produce
comment|///   %name = getelementptr inbounds %addr, i64 index
comment|/// where i64 is actually the target word size.
comment|///
comment|/// \param EltSize - the size of the type T in bytes
name|Address
name|CreateConstGEP
argument_list|(
name|Address
name|Addr
argument_list|,
name|uint64_t
name|Index
argument_list|,
name|CharUnits
name|EltSize
argument_list|,
specifier|const
name|llvm
operator|::
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
return|return
name|Address
argument_list|(
name|CreateGEP
argument_list|(
name|Addr
operator|.
name|getElementType
argument_list|()
argument_list|,
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|getSize
argument_list|(
name|Index
argument_list|)
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Index
operator|*
name|EltSize
argument_list|)
argument_list|)
return|;
block|}
comment|/// Given a pointer to i8, adjust it by a given constant offset.
name|Address
name|CreateConstInBoundsByteGEP
argument_list|(
name|Address
name|Addr
argument_list|,
name|CharUnits
name|Offset
argument_list|,
specifier|const
name|llvm
operator|::
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Addr
operator|.
name|getElementType
argument_list|()
operator|==
name|TypeCache
operator|.
name|Int8Ty
argument_list|)
expr_stmt|;
return|return
name|Address
argument_list|(
name|CreateInBoundsGEP
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|getSize
argument_list|(
name|Offset
argument_list|)
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Offset
argument_list|)
argument_list|)
return|;
block|}
name|Address
name|CreateConstByteGEP
argument_list|(
name|Address
name|Addr
argument_list|,
name|CharUnits
name|Offset
argument_list|,
specifier|const
name|llvm
operator|::
name|Twine
operator|&
name|Name
operator|=
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Addr
operator|.
name|getElementType
argument_list|()
operator|==
name|TypeCache
operator|.
name|Int8Ty
argument_list|)
expr_stmt|;
return|return
name|Address
argument_list|(
name|CreateGEP
argument_list|(
name|Addr
operator|.
name|getPointer
argument_list|()
argument_list|,
name|getSize
argument_list|(
name|Offset
argument_list|)
argument_list|,
name|Name
argument_list|)
argument_list|,
name|Addr
operator|.
name|getAlignment
argument_list|()
operator|.
name|alignmentAtOffset
argument_list|(
name|Offset
argument_list|)
argument_list|)
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|CreateConstInBoundsByteGEP
argument_list|(
argument|llvm::Value *Ptr
argument_list|,
argument|CharUnits Offset
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Ptr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|==
name|TypeCache
operator|.
name|Int8Ty
argument_list|)
block|;
return|return
name|CreateInBoundsGEP
argument_list|(
name|Ptr
argument_list|,
name|getSize
argument_list|(
name|Offset
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|CreateConstByteGEP
argument_list|(
argument|llvm::Value *Ptr
argument_list|,
argument|CharUnits Offset
argument_list|,
argument|const llvm::Twine&Name =
literal|""
argument_list|)
block|{
name|assert
argument_list|(
name|Ptr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|==
name|TypeCache
operator|.
name|Int8Ty
argument_list|)
block|;
return|return
name|CreateGEP
argument_list|(
name|Ptr
argument_list|,
name|getSize
argument_list|(
name|Offset
argument_list|)
argument_list|,
name|Name
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateMemCpy
expr_stmt|;
name|llvm
operator|::
name|CallInst
operator|*
name|CreateMemCpy
argument_list|(
argument|Address Dest
argument_list|,
argument|Address Src
argument_list|,
argument|llvm::Value *Size
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
name|auto
name|Align
operator|=
name|std
operator|::
name|min
argument_list|(
name|Dest
operator|.
name|getAlignment
argument_list|()
argument_list|,
name|Src
operator|.
name|getAlignment
argument_list|()
argument_list|)
block|;
return|return
name|CreateMemCpy
argument_list|(
name|Dest
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Src
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Size
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
name|llvm
operator|::
name|CallInst
operator|*
name|CreateMemCpy
argument_list|(
argument|Address Dest
argument_list|,
argument|Address Src
argument_list|,
argument|uint64_t Size
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
name|auto
name|Align
operator|=
name|std
operator|::
name|min
argument_list|(
name|Dest
operator|.
name|getAlignment
argument_list|()
argument_list|,
name|Src
operator|.
name|getAlignment
argument_list|()
argument_list|)
block|;
return|return
name|CreateMemCpy
argument_list|(
name|Dest
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Src
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Size
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateMemMove
expr_stmt|;
name|llvm
operator|::
name|CallInst
operator|*
name|CreateMemMove
argument_list|(
argument|Address Dest
argument_list|,
argument|Address Src
argument_list|,
argument|llvm::Value *Size
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
name|auto
name|Align
operator|=
name|std
operator|::
name|min
argument_list|(
name|Dest
operator|.
name|getAlignment
argument_list|()
argument_list|,
name|Src
operator|.
name|getAlignment
argument_list|()
argument_list|)
block|;
return|return
name|CreateMemMove
argument_list|(
name|Dest
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Src
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Size
argument_list|,
name|Align
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
name|using
name|CGBuilderBaseTy
operator|::
name|CreateMemSet
expr_stmt|;
name|llvm
operator|::
name|CallInst
operator|*
name|CreateMemSet
argument_list|(
argument|Address Dest
argument_list|,
argument|llvm::Value *Value
argument_list|,
argument|llvm::Value *Size
argument_list|,
argument|bool IsVolatile = false
argument_list|)
block|{
return|return
name|CreateMemSet
argument_list|(
name|Dest
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Value
argument_list|,
name|Size
argument_list|,
name|Dest
operator|.
name|getAlignment
argument_list|()
operator|.
name|getQuantity
argument_list|()
argument_list|,
name|IsVolatile
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace CodeGen
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

