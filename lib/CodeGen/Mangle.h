begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Mangle.h - Mangle C++ Names ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Implements C++ name mangling according to the Itanium C++ ABI,
end_comment

begin_comment
comment|// which is used in GCC 3.2 and newer (and many compilers that are
end_comment

begin_comment
comment|// ABI-compatible with GCC):
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   http://www.codesourcery.com/public/cxx-abi/abi.html
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CODEGEN_MANGLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CODEGEN_MANGLE_H
end_define

begin_include
include|#
directive|include
file|"CGCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|CXXConstructorDecl
decl_stmt|;
name|class
name|CXXDestructorDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|class
name|MangleContext
block|{
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
name|AnonStructIds
expr_stmt|;
name|public
label|:
name|explicit
name|MangleContext
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|)
operator|:
name|Context
argument_list|(
argument|Context
argument_list|)
block|{ }
name|ASTContext
operator|&
name|getASTContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|uint64_t
name|getAnonymousStructId
parameter_list|(
specifier|const
name|TagDecl
modifier|*
name|TD
parameter_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|AnonStructIds
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|TD
argument_list|,
name|AnonStructIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|first
operator|->
name|second
return|;
block|}
block|}
empty_stmt|;
name|bool
name|mangleName
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|NamedDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleThunk
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|,
name|int64_t
name|n
argument_list|,
name|int64_t
name|vn
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCovariantThunk
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|,
name|int64_t
name|nv_t
argument_list|,
name|int64_t
name|v_t
argument_list|,
name|int64_t
name|nv_r
argument_list|,
name|int64_t
name|v_r
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleGuardVariable
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXVtable
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXVTT
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXCtorVtable
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|int64_t
name|Offset
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|Type
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXRtti
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
name|QualType
name|T
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXRttiName
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
name|QualType
name|T
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXCtor
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|CXXConstructorDecl
operator|*
name|D
argument_list|,
name|CXXCtorType
name|Type
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|mangleCXXDtor
argument_list|(
name|MangleContext
operator|&
name|Context
argument_list|,
specifier|const
name|CXXDestructorDecl
operator|*
name|D
argument_list|,
name|CXXDtorType
name|Type
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

