begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Mangle.h - Mangle C++ Names ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Implements C++ name mangling according to the Itanium C++ ABI,
end_comment

begin_comment
comment|// which is used in GCC 3.2 and newer (and many compilers that are
end_comment

begin_comment
comment|// ABI-compatible with GCC):
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   http://www.codesourcery.com/public/cxx-abi/abi.html
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CODEGEN_MANGLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CODEGEN_MANGLE_H
end_define

begin_include
include|#
directive|include
file|"CGCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|CXXConstructorDecl
decl_stmt|;
name|class
name|CXXDestructorDecl
decl_stmt|;
name|class
name|CXXMethodDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|namespace
name|CodeGen
block|{
struct_decl|struct
name|ThisAdjustment
struct_decl|;
struct_decl|struct
name|ThunkInfo
struct_decl|;
comment|/// MangleBuffer - a convenient class for storing a name which is
comment|/// either the result of a mangling or is a constant string with
comment|/// external memory ownership.
name|class
name|MangleBuffer
block|{
name|public
label|:
name|void
name|setString
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ref
argument_list|)
block|{
name|String
operator|=
name|Ref
expr_stmt|;
block|}
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|getBuffer
argument_list|()
block|{
return|return
name|Buffer
return|;
block|}
name|llvm
operator|::
name|StringRef
name|getString
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|String
operator|.
name|empty
argument_list|()
condition|)
return|return
name|String
return|;
return|return
name|Buffer
operator|.
name|str
argument_list|()
return|;
block|}
name|operator
name|llvm
operator|::
name|StringRef
argument_list|()
specifier|const
block|{
return|return
name|getString
argument_list|()
return|;
block|}
name|private
label|:
name|llvm
operator|::
name|StringRef
name|String
expr_stmt|;
name|llvm
operator|::
name|SmallString
operator|<
literal|256
operator|>
name|Buffer
expr_stmt|;
block|}
empty_stmt|;
comment|/// MangleContext - Context for tracking state which persists across multiple
comment|/// calls to the C++ name mangler.
name|class
name|MangleContext
block|{
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|Diagnostic
modifier|&
name|Diags
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
name|AnonStructIds
expr_stmt|;
name|unsigned
name|Discriminator
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|NamedDecl
operator|*
operator|,
name|unsigned
operator|>
name|Uniquifier
expr_stmt|;
name|public
label|:
name|explicit
name|MangleContext
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|Diagnostic
operator|&
name|Diags
argument_list|)
operator|:
name|Context
argument_list|(
name|Context
argument_list|)
operator|,
name|Diags
argument_list|(
argument|Diags
argument_list|)
block|{ }
name|ASTContext
operator|&
name|getASTContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|Diagnostic
operator|&
name|getDiags
argument_list|()
specifier|const
block|{
return|return
name|Diags
return|;
block|}
name|uint64_t
name|getAnonymousStructId
parameter_list|(
specifier|const
name|TagDecl
modifier|*
name|TD
parameter_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|AnonStructIds
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|TD
argument_list|,
name|AnonStructIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|first
operator|->
name|second
return|;
block|}
comment|/// @name Mangler Entry Points
comment|/// @{
name|bool
name|shouldMangleDeclName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|mangleName
argument_list|(
specifier|const
name|NamedDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleThunk
argument_list|(
specifier|const
name|CXXMethodDecl
operator|*
name|MD
argument_list|,
specifier|const
name|ThunkInfo
operator|&
name|Thunk
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXDtorThunk
argument_list|(
specifier|const
name|CXXDestructorDecl
operator|*
name|DD
argument_list|,
name|CXXDtorType
name|Type
argument_list|,
specifier|const
name|ThisAdjustment
operator|&
name|ThisAdjustment
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleGuardVariable
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXVTable
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXVTT
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXCtorVTable
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|int64_t
name|Offset
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|Type
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXRTTI
argument_list|(
name|QualType
name|T
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXRTTIName
argument_list|(
name|QualType
name|T
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXCtor
argument_list|(
specifier|const
name|CXXConstructorDecl
operator|*
name|D
argument_list|,
name|CXXCtorType
name|Type
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleCXXDtor
argument_list|(
specifier|const
name|CXXDestructorDecl
operator|*
name|D
argument_list|,
name|CXXDtorType
name|Type
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
argument_list|)
decl_stmt|;
name|void
name|mangleInitDiscriminator
parameter_list|()
block|{
name|Discriminator
operator|=
literal|0
expr_stmt|;
block|}
name|bool
name|getNextDiscriminator
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|ND
parameter_list|,
name|unsigned
modifier|&
name|disc
parameter_list|)
block|{
name|unsigned
modifier|&
name|discriminator
init|=
name|Uniquifier
index|[
name|ND
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|discriminator
condition|)
name|discriminator
operator|=
operator|++
name|Discriminator
expr_stmt|;
if|if
condition|(
name|discriminator
operator|==
literal|1
condition|)
return|return
name|false
return|;
name|disc
operator|=
name|discriminator
operator|-
literal|2
expr_stmt|;
return|return
name|true
return|;
block|}
comment|/// @}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

