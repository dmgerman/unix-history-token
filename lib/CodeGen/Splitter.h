begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/Splitter.h - Splitter -*- C++ -*----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_SPLITTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_SPLITTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineLoopInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SlotIndexes.h"
end_include

begin_include
include|#
directive|include
file|<deque>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LiveInterval
decl_stmt|;
name|class
name|LiveIntervals
decl_stmt|;
struct_decl|struct
name|LiveRange
struct_decl|;
name|class
name|LoopSplit
decl_stmt|;
name|class
name|MachineDominatorTree
decl_stmt|;
name|class
name|MachineRegisterInfo
decl_stmt|;
name|class
name|SlotIndexes
decl_stmt|;
name|class
name|TargetInstrInfo
decl_stmt|;
name|class
name|VNInfo
decl_stmt|;
name|class
name|LoopSplitter
range|:
name|public
name|MachineFunctionPass
block|{
name|friend
name|class
name|LoopSplit
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|LoopSplitter
argument_list|()
operator|:
name|MachineFunctionPass
argument_list|(
argument|ID
argument_list|)
block|{}
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&au
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|fn
argument_list|)
block|;
name|virtual
name|void
name|releaseMemory
argument_list|()
block|;
name|private
operator|:
name|MachineFunction
operator|*
name|mf
block|;
name|LiveIntervals
operator|*
name|lis
block|;
name|MachineLoopInfo
operator|*
name|mli
block|;
name|MachineRegisterInfo
operator|*
name|mri
block|;
name|MachineDominatorTree
operator|*
name|mdt
block|;
name|SlotIndexes
operator|*
name|sis
block|;
specifier|const
name|TargetInstrInfo
operator|*
name|tii
block|;
specifier|const
name|TargetRegisterInfo
operator|*
name|tri
block|;
name|std
operator|::
name|string
name|fqn
block|;
name|std
operator|::
name|deque
operator|<
name|LiveInterval
operator|*
operator|>
name|intervals
block|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|SlotIndex
operator|,
name|SlotIndex
operator|>
name|SlotPair
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|SlotPair
operator|>
name|LoopRanges
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|MachineLoop
operator|*
operator|,
name|LoopRanges
operator|>
name|LoopRangeMap
expr_stmt|;
name|LoopRangeMap
name|loopRangeMap
decl_stmt|;
name|void
name|dumpLoopInfo
parameter_list|(
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|void
name|dumpOddTerminators
parameter_list|()
function_decl|;
name|void
name|updateTerminators
parameter_list|(
name|MachineBasicBlock
modifier|&
name|mbb
parameter_list|)
function_decl|;
name|bool
name|canInsertPreHeader
parameter_list|(
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|MachineBasicBlock
modifier|&
name|insertPreHeader
parameter_list|(
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|bool
name|isCriticalEdge
argument_list|(
name|MachineLoop
operator|::
name|Edge
operator|&
name|edge
argument_list|)
decl_stmt|;
name|bool
name|canSplitEdge
argument_list|(
name|MachineLoop
operator|::
name|Edge
operator|&
name|edge
argument_list|)
decl_stmt|;
name|MachineBasicBlock
modifier|&
name|splitEdge
argument_list|(
name|MachineLoop
operator|::
name|Edge
operator|&
name|edge
argument_list|,
name|MachineLoop
operator|&
name|loop
argument_list|)
decl_stmt|;
name|LoopRanges
modifier|&
name|getLoopRanges
parameter_list|(
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|std
operator|::
name|pair
operator|<
name|bool
operator|,
name|SlotPair
operator|>
name|getLoopSubRange
argument_list|(
specifier|const
name|LiveRange
operator|&
name|lr
argument_list|,
name|MachineLoop
operator|&
name|loop
argument_list|)
expr_stmt|;
name|void
name|dumpLoopRanges
parameter_list|(
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|void
name|processHeader
parameter_list|(
name|LoopSplit
modifier|&
name|split
parameter_list|)
function_decl|;
name|void
name|processLoopExits
parameter_list|(
name|LoopSplit
modifier|&
name|split
parameter_list|)
function_decl|;
name|void
name|processLoopUses
parameter_list|(
name|LoopSplit
modifier|&
name|split
parameter_list|)
function_decl|;
name|bool
name|splitOverLoop
parameter_list|(
name|LiveInterval
modifier|&
name|li
parameter_list|,
name|MachineLoop
modifier|&
name|loop
parameter_list|)
function_decl|;
name|void
name|processInterval
parameter_list|(
name|LiveInterval
modifier|&
name|li
parameter_list|)
function_decl|;
name|void
name|processIntervals
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

