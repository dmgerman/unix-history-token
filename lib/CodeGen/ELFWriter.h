begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ELFWriter.h - Target-independent ELF writer support -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the ELFWriter class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ELFWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|ELFWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SetVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetAsmInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetELFWriterInfo.h"
end_include

begin_include
include|#
directive|include
file|"ELF.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BinaryObject
decl_stmt|;
name|class
name|ConstantStruct
decl_stmt|;
name|class
name|ELFCodeEmitter
decl_stmt|;
name|class
name|GlobalVariable
decl_stmt|;
name|class
name|Mangler
decl_stmt|;
name|class
name|MachineCodeEmitter
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// ELFWriter - This class implements the common target-independent code for
comment|/// writing ELF files.  Targets should derive a class from this to
comment|/// parameterize the output format.
comment|///
name|class
name|ELFWriter
range|:
name|public
name|MachineFunctionPass
block|{
name|friend
name|class
name|ELFCodeEmitter
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|MachineCodeEmitter
operator|&
name|getMachineCodeEmitter
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|MachineCodeEmitter
operator|*
operator|)
name|MCE
return|;
block|}
name|ELFWriter
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|,
name|TargetMachine
operator|&
name|TM
argument_list|)
block|;
operator|~
name|ELFWriter
argument_list|()
block|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|unsigned
name|char
operator|>
name|DataBuffer
expr_stmt|;
name|protected
operator|:
comment|/// Output stream to send the resultant object file to.
name|raw_ostream
operator|&
name|O
decl_stmt|;
comment|/// Target machine description.
name|TargetMachine
modifier|&
name|TM
decl_stmt|;
comment|/// Target Elf Writer description.
specifier|const
name|TargetELFWriterInfo
modifier|*
name|TEW
decl_stmt|;
comment|/// Mang - The object used to perform name mangling for this module.
name|Mangler
modifier|*
name|Mang
decl_stmt|;
comment|/// MCE - The MachineCodeEmitter object that we are exposing to emit machine
comment|/// code for functions to the .o file.
name|ELFCodeEmitter
modifier|*
name|MCE
decl_stmt|;
comment|/// TAI - Target Asm Info, provide information about section names for
comment|/// globals and other target specific stuff.
specifier|const
name|TargetAsmInfo
modifier|*
name|TAI
decl_stmt|;
comment|//===------------------------------------------------------------------===//
comment|// Properties inferred automatically from the target machine.
comment|//===------------------------------------------------------------------===//
comment|/// is64Bit/isLittleEndian - This information is inferred from the target
comment|/// machine directly, indicating whether to emit a 32- or 64-bit ELF file.
name|bool
name|is64Bit
decl_stmt|,
name|isLittleEndian
decl_stmt|;
comment|/// doInitialization - Emit the file header and all of the global variables
comment|/// for the module to the ELF file.
name|bool
name|doInitialization
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|bool
name|runOnMachineFunction
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
comment|/// doFinalization - Now that the module has been completely processed, emit
comment|/// the ELF file to 'O'.
name|bool
name|doFinalization
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|private
label|:
comment|/// Blob containing the Elf header
name|BinaryObject
name|ElfHdr
decl_stmt|;
comment|/// SectionList - This is the list of sections that we have emitted to the
comment|/// file.  Once the file has been completely built, the section header table
comment|/// is constructed from this info.
name|std
operator|::
name|list
operator|<
name|ELFSection
operator|>
name|SectionList
expr_stmt|;
name|unsigned
name|NumSections
decl_stmt|;
comment|// Always = SectionList.size()
comment|/// SectionLookup - This is a mapping from section name to section number in
comment|/// the SectionList.
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|ELFSection
operator|*
operator|>
name|SectionLookup
expr_stmt|;
comment|/// GblSymLookup - This is a mapping from global value to a symbol index
comment|/// in the symbol table. This is useful since relocations symbol references
comment|/// must be quickly mapped to a symbol table index
name|std
operator|::
name|map
operator|<
specifier|const
name|GlobalValue
operator|*
operator|,
name|uint32_t
operator|>
name|GblSymLookup
expr_stmt|;
comment|/// SymbolList - This is the list of symbols emitted to the symbol table
comment|/// Local symbols go to the front and Globals to the back.
name|std
operator|::
name|list
operator|<
name|ELFSym
operator|>
name|SymbolList
expr_stmt|;
comment|/// PendingGlobals - List of externally defined symbols that we have been
comment|/// asked to emit, but have not seen a reference to.  When a reference
comment|/// is seen, the symbol will move from this list to the SymbolList.
name|SetVector
operator|<
name|GlobalValue
operator|*
operator|>
name|PendingGlobals
expr_stmt|;
comment|/// getSection - Return the section with the specified name, creating a new
comment|/// section if one does not already exist.
name|ELFSection
modifier|&
name|getSection
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|unsigned
name|Type
argument_list|,
name|unsigned
name|Flags
operator|=
literal|0
argument_list|,
name|unsigned
name|Align
operator|=
literal|0
argument_list|)
block|{
name|ELFSection
modifier|*
modifier|&
name|SN
init|=
name|SectionLookup
index|[
name|Name
index|]
decl_stmt|;
if|if
condition|(
name|SN
condition|)
return|return
operator|*
name|SN
return|;
comment|// Remove tab from section name prefix. This is necessary becase TAI
comment|// sometimes return a section name prefixed with a "\t" char.
name|std
operator|::
name|string
name|SectionName
argument_list|(
name|Name
argument_list|)
expr_stmt|;
name|size_t
name|Pos
init|=
name|SectionName
operator|.
name|find
argument_list|(
literal|"\t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Pos
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
name|SectionName
operator|.
name|erase
argument_list|(
name|Pos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|SectionList
operator|.
name|push_back
argument_list|(
name|ELFSection
argument_list|(
name|SectionName
argument_list|,
name|isLittleEndian
argument_list|,
name|is64Bit
argument_list|)
argument_list|)
expr_stmt|;
name|SN
operator|=
operator|&
name|SectionList
operator|.
name|back
argument_list|()
expr_stmt|;
name|SN
operator|->
name|SectionIdx
operator|=
name|NumSections
operator|++
expr_stmt|;
name|SN
operator|->
name|Type
operator|=
name|Type
expr_stmt|;
name|SN
operator|->
name|Flags
operator|=
name|Flags
expr_stmt|;
name|SN
operator|->
name|Link
operator|=
name|ELFSection
operator|::
name|SHN_UNDEF
expr_stmt|;
name|SN
operator|->
name|Align
operator|=
name|Align
expr_stmt|;
return|return
operator|*
name|SN
return|;
block|}
comment|/// TODO: support mangled names here to emit the right .text section
comment|/// for c++ object files.
name|ELFSection
modifier|&
name|getTextSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".text"
argument_list|,
name|ELFSection
operator|::
name|SHT_PROGBITS
argument_list|,
name|ELFSection
operator|::
name|SHF_EXECINSTR
operator||
name|ELFSection
operator|::
name|SHF_ALLOC
argument_list|)
return|;
block|}
comment|/// Return the relocation section of section 'S'. 'RelA' is true
comment|/// if the relocation section contains entries with addends.
name|ELFSection
modifier|&
name|getRelocSection
argument_list|(
name|std
operator|::
name|string
name|SName
argument_list|,
name|bool
name|RelA
argument_list|)
block|{
name|std
operator|::
name|string
name|RelSName
argument_list|(
literal|".rel"
argument_list|)
expr_stmt|;
name|unsigned
name|SHdrTy
init|=
name|RelA
condition|?
name|ELFSection
operator|::
name|SHT_RELA
else|:
name|ELFSection
operator|::
name|SHT_REL
decl_stmt|;
if|if
condition|(
name|RelA
condition|)
name|RelSName
operator|.
name|append
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|RelSName
operator|.
name|append
argument_list|(
name|SName
argument_list|)
expr_stmt|;
return|return
name|getSection
argument_list|(
name|RelSName
argument_list|,
name|SHdrTy
argument_list|,
literal|0
argument_list|,
name|TEW
operator|->
name|getPrefELFAlignment
argument_list|()
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getNonExecStackSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".note.GNU-stack"
argument_list|,
name|ELFSection
operator|::
name|SHT_PROGBITS
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getSymbolTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".symtab"
argument_list|,
name|ELFSection
operator|::
name|SHT_SYMTAB
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getStringTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".strtab"
argument_list|,
name|ELFSection
operator|::
name|SHT_STRTAB
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getSectionHeaderStringTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".shstrtab"
argument_list|,
name|ELFSection
operator|::
name|SHT_STRTAB
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getDataSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".data"
argument_list|,
name|ELFSection
operator|::
name|SHT_PROGBITS
argument_list|,
name|ELFSection
operator|::
name|SHF_WRITE
operator||
name|ELFSection
operator|::
name|SHF_ALLOC
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getBSSSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".bss"
argument_list|,
name|ELFSection
operator|::
name|SHT_NOBITS
argument_list|,
name|ELFSection
operator|::
name|SHF_WRITE
operator||
name|ELFSection
operator|::
name|SHF_ALLOC
argument_list|,
literal|4
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getNullSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|""
argument_list|,
name|ELFSection
operator|::
name|SHT_NULL
argument_list|,
literal|0
argument_list|)
return|;
block|}
comment|// As we complete the ELF file, we need to update fields in the ELF header
comment|// (e.g. the location of the section table).  These members keep track of
comment|// the offset in ELFHeader of these various pieces to update and other
comment|// locations in the file.
name|unsigned
name|ELFHdr_e_shoff_Offset
decl_stmt|;
comment|// e_shoff    in ELF header.
name|unsigned
name|ELFHdr_e_shstrndx_Offset
decl_stmt|;
comment|// e_shstrndx in ELF header.
name|unsigned
name|ELFHdr_e_shnum_Offset
decl_stmt|;
comment|// e_shnum    in ELF header.
name|private
label|:
name|void
name|EmitFunctionDeclaration
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|void
name|EmitGlobalVar
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
parameter_list|)
function_decl|;
name|void
name|EmitGlobalConstant
parameter_list|(
specifier|const
name|Constant
modifier|*
name|C
parameter_list|,
name|ELFSection
modifier|&
name|GblS
parameter_list|)
function_decl|;
name|void
name|EmitGlobalConstantStruct
parameter_list|(
specifier|const
name|ConstantStruct
modifier|*
name|CVS
parameter_list|,
name|ELFSection
modifier|&
name|GblS
parameter_list|)
function_decl|;
name|unsigned
name|getGlobalELFLinkage
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
parameter_list|)
function_decl|;
name|ELFSection
modifier|&
name|getGlobalSymELFSection
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
parameter_list|,
name|ELFSym
modifier|&
name|Sym
parameter_list|)
function_decl|;
name|void
name|EmitRelocations
parameter_list|()
function_decl|;
name|void
name|EmitRelocation
parameter_list|(
name|BinaryObject
modifier|&
name|RelSec
parameter_list|,
name|ELFRelocation
modifier|&
name|Rel
parameter_list|,
name|bool
name|HasRelA
parameter_list|)
function_decl|;
name|void
name|EmitSectionHeader
parameter_list|(
name|BinaryObject
modifier|&
name|SHdrTab
parameter_list|,
specifier|const
name|ELFSection
modifier|&
name|SHdr
parameter_list|)
function_decl|;
name|void
name|EmitSectionTableStringTable
parameter_list|()
function_decl|;
name|void
name|EmitSymbol
parameter_list|(
name|BinaryObject
modifier|&
name|SymbolTable
parameter_list|,
name|ELFSym
modifier|&
name|Sym
parameter_list|)
function_decl|;
name|void
name|EmitSymbolTable
parameter_list|()
function_decl|;
name|void
name|EmitStringTable
parameter_list|()
function_decl|;
name|void
name|OutputSectionsAndSectionTable
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

