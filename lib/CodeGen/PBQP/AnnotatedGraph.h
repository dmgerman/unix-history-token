begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AnnotatedGraph.h - Annotated PBQP Graph -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Annotated PBQP Graph class. This class is used internally by the PBQP solver
end_comment

begin_comment
comment|// to cache information to speed up reduction.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_PBQP_ANNOTATEDGRAPH_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_PBQP_ANNOTATEDGRAPH_H
end_define

begin_include
include|#
directive|include
file|"GraphBase.h"
end_include

begin_decl_stmt
name|namespace
name|PBQP
block|{
name|template
operator|<
name|typename
name|NodeData
operator|,
name|typename
name|EdgeData
operator|>
name|class
name|AnnotatedEdge
expr_stmt|;
name|template
operator|<
name|typename
name|NodeData
operator|,
name|typename
name|EdgeData
operator|>
name|class
name|AnnotatedNode
operator|:
name|public
name|NodeBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
operator|,
name|AnnotatedEdge
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
expr|>
block|{
name|private
operator|:
name|NodeData
name|nodeData
block|;
name|public
operator|:
name|AnnotatedNode
argument_list|(
specifier|const
name|Vector
operator|&
name|costs
argument_list|,
specifier|const
name|NodeData
operator|&
name|nodeData
argument_list|)
operator|:
name|NodeBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
block|,
name|AnnotatedEdge
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
expr|>
operator|(
name|costs
operator|)
block|,
name|nodeData
argument_list|(
argument|nodeData
argument_list|)
block|{}
name|NodeData
operator|&
name|getNodeData
argument_list|()
block|{
return|return
name|nodeData
return|;
block|}
specifier|const
name|NodeData
operator|&
name|getNodeData
argument_list|()
specifier|const
block|{
return|return
name|nodeData
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|NodeData
block|,
name|typename
name|EdgeData
operator|>
name|class
name|AnnotatedEdge
operator|:
name|public
name|EdgeBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
block|,
name|AnnotatedEdge
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
expr|>
block|{
name|private
operator|:
typedef|typedef
name|typename
name|GraphBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
operator|,
name|AnnotatedEdge
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
expr|>
operator|::
name|NodeIterator
name|NodeIterator
expr_stmt|;
name|EdgeData
name|edgeData
block|;
name|public
operator|:
name|AnnotatedEdge
argument_list|(
specifier|const
name|NodeIterator
operator|&
name|node1Itr
argument_list|,
specifier|const
name|NodeIterator
operator|&
name|node2Itr
argument_list|,
specifier|const
name|Matrix
operator|&
name|costs
argument_list|,
specifier|const
name|EdgeData
operator|&
name|edgeData
argument_list|)
operator|:
name|EdgeBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
block|,
name|AnnotatedEdge
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
expr|>
operator|(
name|node1Itr
operator|,
name|node2Itr
operator|,
name|costs
operator|)
block|,
name|edgeData
argument_list|(
argument|edgeData
argument_list|)
block|{}
name|EdgeData
operator|&
name|getEdgeData
argument_list|()
block|{
return|return
name|edgeData
return|;
block|}
specifier|const
name|EdgeData
operator|&
name|getEdgeData
argument_list|()
specifier|const
block|{
return|return
name|edgeData
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|NodeData
block|,
name|typename
name|EdgeData
operator|>
name|class
name|AnnotatedGraph
operator|:
name|public
name|GraphBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
block|,
name|AnnotatedEdge
operator|<
name|NodeData
block|,
name|EdgeData
operator|>
expr|>
block|{
name|private
operator|:
typedef|typedef
name|GraphBase
operator|<
name|AnnotatedNode
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
operator|,
name|AnnotatedEdge
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
expr|>
name|PGraph
expr_stmt|;
typedef|typedef
name|AnnotatedNode
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
name|NodeEntry
expr_stmt|;
typedef|typedef
name|AnnotatedEdge
operator|<
name|NodeData
operator|,
name|EdgeData
operator|>
name|EdgeEntry
expr_stmt|;
name|void
name|copyFrom
parameter_list|(
specifier|const
name|AnnotatedGraph
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|areNodeIDsValid
argument_list|()
condition|)
block|{
name|other
operator|.
name|assignNodeIDs
argument_list|()
expr_stmt|;
block|}
name|std
operator|::
name|vector
operator|<
name|NodeIterator
operator|>
name|newNodeItrs
argument_list|(
name|other
operator|.
name|getNumNodes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ConstNodeIterator
name|nItr
init|=
name|other
operator|.
name|nodesBegin
argument_list|()
init|,
name|nEnd
init|=
name|other
operator|.
name|nodesEnd
argument_list|()
init|;
name|nItr
operator|!=
name|nEnd
condition|;
operator|++
name|nItr
control|)
block|{
name|newNodeItrs
index|[
name|other
operator|.
name|getNodeID
argument_list|(
name|nItr
argument_list|)
index|]
operator|=
name|addNode
argument_list|(
name|other
operator|.
name|getNodeCosts
argument_list|(
name|nItr
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConstEdgeIterator
name|eItr
init|=
name|other
operator|.
name|edgesBegin
argument_list|()
init|,
name|eEnd
init|=
name|other
operator|.
name|edgesEnd
argument_list|()
init|;
name|eItr
operator|!=
name|eEnd
condition|;
operator|++
name|eItr
control|)
block|{
name|unsigned
name|node1ID
init|=
name|other
operator|.
name|getNodeID
argument_list|(
name|other
operator|.
name|getEdgeNode1
argument_list|(
name|eItr
argument_list|)
argument_list|)
decl_stmt|,
name|node2ID
init|=
name|other
operator|.
name|getNodeID
argument_list|(
name|other
operator|.
name|getEdgeNode2
argument_list|(
name|eItr
argument_list|)
argument_list|)
decl_stmt|;
name|addEdge
argument_list|(
name|newNodeItrs
index|[
name|node1ID
index|]
argument_list|,
name|newNodeItrs
index|[
name|node2ID
index|]
argument_list|,
name|other
operator|.
name|getEdgeCosts
argument_list|(
name|eItr
argument_list|)
argument_list|,
name|other
operator|.
name|getEdgeData
argument_list|(
name|eItr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|public
label|:
typedef|typedef
name|typename
name|PGraph
operator|::
name|NodeIterator
name|NodeIterator
expr_stmt|;
typedef|typedef
name|typename
name|PGraph
operator|::
name|ConstNodeIterator
name|ConstNodeIterator
expr_stmt|;
typedef|typedef
name|typename
name|PGraph
operator|::
name|EdgeIterator
name|EdgeIterator
expr_stmt|;
typedef|typedef
name|typename
name|PGraph
operator|::
name|ConstEdgeIterator
name|ConstEdgeIterator
expr_stmt|;
name|AnnotatedGraph
argument_list|()
block|{}
name|AnnotatedGraph
argument_list|(
argument|const AnnotatedGraph&other
argument_list|)
block|{
name|copyFrom
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
name|AnnotatedGraph
modifier|&
name|operator
init|=
operator|(
specifier|const
name|AnnotatedGraph
operator|&
name|other
operator|)
block|{
name|PGraph
operator|::
name|clear
argument_list|()
block|;
name|copyFrom
argument_list|(
name|other
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|NodeIterator
name|addNode
parameter_list|(
specifier|const
name|Vector
modifier|&
name|costs
parameter_list|,
specifier|const
name|NodeData
modifier|&
name|data
parameter_list|)
block|{
return|return
name|PGraph
operator|::
name|addConstructedNode
argument_list|(
name|NodeEntry
argument_list|(
name|costs
argument_list|,
name|data
argument_list|)
argument_list|)
return|;
block|}
name|EdgeIterator
name|addEdge
parameter_list|(
specifier|const
name|NodeIterator
modifier|&
name|node1Itr
parameter_list|,
specifier|const
name|NodeIterator
modifier|&
name|node2Itr
parameter_list|,
specifier|const
name|Matrix
modifier|&
name|costs
parameter_list|,
specifier|const
name|EdgeData
modifier|&
name|data
parameter_list|)
block|{
return|return
name|PGraph
operator|::
name|addConstructedEdge
argument_list|(
name|EdgeEntry
argument_list|(
name|node1Itr
argument_list|,
name|node2Itr
argument_list|,
name|costs
argument_list|,
name|data
argument_list|)
argument_list|)
return|;
block|}
name|NodeData
modifier|&
name|getNodeData
parameter_list|(
specifier|const
name|NodeIterator
modifier|&
name|nodeItr
parameter_list|)
block|{
return|return
name|PGraph
operator|::
name|getNodeEntry
argument_list|(
name|nodeItr
argument_list|)
operator|.
name|getNodeData
argument_list|()
return|;
block|}
specifier|const
name|NodeData
modifier|&
name|getNodeData
argument_list|(
specifier|const
name|NodeIterator
operator|&
name|nodeItr
argument_list|)
decl|const
block|{
return|return
name|PGraph
operator|::
name|getNodeEntry
argument_list|(
name|nodeItr
argument_list|)
operator|.
name|getNodeData
argument_list|()
return|;
block|}
name|EdgeData
modifier|&
name|getEdgeData
parameter_list|(
specifier|const
name|EdgeIterator
modifier|&
name|edgeItr
parameter_list|)
block|{
return|return
name|PGraph
operator|::
name|getEdgeEntry
argument_list|(
name|edgeItr
argument_list|)
operator|.
name|getEdgeData
argument_list|()
return|;
block|}
specifier|const
name|EdgeEntry
modifier|&
name|getEdgeData
argument_list|(
specifier|const
name|EdgeIterator
operator|&
name|edgeItr
argument_list|)
decl|const
block|{
return|return
name|PGraph
operator|::
name|getEdgeEntry
argument_list|(
name|edgeItr
argument_list|)
operator|.
name|getEdgeData
argument_list|()
return|;
block|}
name|SimpleGraph
name|toSimpleGraph
argument_list|()
specifier|const
block|{
name|SimpleGraph
name|g
block|;
if|if
condition|(
operator|!
name|PGraph
operator|::
name|areNodeIDsValid
argument_list|()
condition|)
block|{
name|PGraph
operator|::
name|assignNodeIDs
argument_list|()
expr_stmt|;
block|}
name|std
operator|::
name|vector
operator|<
name|SimpleGraph
operator|::
name|NodeIterator
operator|>
name|newNodeItrs
argument_list|(
name|PGraph
operator|::
name|getNumNodes
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ConstNodeIterator
name|nItr
init|=
name|PGraph
operator|::
name|nodesBegin
argument_list|()
init|,
name|nEnd
init|=
name|PGraph
operator|::
name|nodesEnd
argument_list|()
init|;
name|nItr
operator|!=
name|nEnd
condition|;
operator|++
name|nItr
control|)
block|{
name|newNodeItrs
index|[
name|getNodeID
argument_list|(
name|nItr
argument_list|)
index|]
operator|=
name|g
operator|.
name|addNode
argument_list|(
name|getNodeCosts
argument_list|(
name|nItr
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConstEdgeIterator
name|eItr
init|=
name|PGraph
operator|::
name|edgesBegin
argument_list|()
init|,
name|eEnd
init|=
name|PGraph
operator|::
name|edgesEnd
argument_list|()
init|;
name|eItr
operator|!=
name|eEnd
condition|;
operator|++
name|eItr
control|)
block|{
name|unsigned
name|node1ID
init|=
name|getNodeID
argument_list|(
name|getEdgeNode1
argument_list|(
name|eItr
argument_list|)
argument_list|)
decl_stmt|,
name|node2ID
init|=
name|getNodeID
argument_list|(
name|getEdgeNode2
argument_list|(
name|eItr
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|addEdge
argument_list|(
name|newNodeItrs
index|[
name|node1ID
index|]
argument_list|,
name|newNodeItrs
index|[
name|node2ID
index|]
argument_list|,
name|getEdgeCosts
argument_list|(
name|eItr
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|g
return|;
block|}
end_decl_stmt

begin_endif
unit|};   }
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CODEGEN_PBQP_ANNOTATEDGRAPH_H
end_comment

end_unit

