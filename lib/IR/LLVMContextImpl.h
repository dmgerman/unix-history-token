begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LLVMContextImpl.h - The LLVMContextImpl opaque class ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file declares LLVMContextImpl, the opaque implementation
end_comment

begin_comment
comment|//  of LLVMContext.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_IR_LLVMCONTEXTIMPL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_IR_LLVMCONTEXTIMPL_H
end_define

begin_include
include|#
directive|include
file|"AttributeImpl.h"
end_include

begin_include
include|#
directive|include
file|"ConstantsContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APFloat.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Hashing.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DebugInfoMetadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/ValueHandle.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ConstantInt
decl_stmt|;
name|class
name|ConstantFP
decl_stmt|;
name|class
name|DiagnosticInfoOptimizationRemark
decl_stmt|;
name|class
name|DiagnosticInfoOptimizationRemarkMissed
decl_stmt|;
name|class
name|DiagnosticInfoOptimizationRemarkAnalysis
decl_stmt|;
name|class
name|GCStrategy
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
struct|struct
name|DenseMapAPIntKeyInfo
block|{
specifier|static
specifier|inline
name|APInt
name|getEmptyKey
parameter_list|()
block|{
name|APInt
name|V
argument_list|(
name|nullptr
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|V
operator|.
name|VAL
operator|=
literal|0
expr_stmt|;
return|return
name|V
return|;
block|}
specifier|static
specifier|inline
name|APInt
name|getTombstoneKey
parameter_list|()
block|{
name|APInt
name|V
argument_list|(
name|nullptr
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|V
operator|.
name|VAL
operator|=
literal|1
expr_stmt|;
return|return
name|V
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|APInt
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|hash_value
argument_list|(
name|Key
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|APInt
modifier|&
name|LHS
parameter_list|,
specifier|const
name|APInt
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|.
name|getBitWidth
argument_list|()
operator|==
name|RHS
operator|.
name|getBitWidth
argument_list|()
operator|&&
name|LHS
operator|==
name|RHS
return|;
block|}
block|}
struct|;
struct|struct
name|DenseMapAPFloatKeyInfo
block|{
specifier|static
specifier|inline
name|APFloat
name|getEmptyKey
parameter_list|()
block|{
return|return
name|APFloat
argument_list|(
name|APFloat
operator|::
name|Bogus
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|APFloat
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|APFloat
argument_list|(
name|APFloat
operator|::
name|Bogus
argument_list|,
literal|2
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|hash_value
argument_list|(
name|Key
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|LHS
parameter_list|,
specifier|const
name|APFloat
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|.
name|bitwiseIsEqual
argument_list|(
name|RHS
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|AnonStructTypeKeyInfo
block|{
struct|struct
name|KeyTy
block|{
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|ETypes
expr_stmt|;
name|bool
name|isPacked
decl_stmt|;
name|KeyTy
argument_list|(
argument|const ArrayRef<Type*>& E
argument_list|,
argument|bool P
argument_list|)
block|:
name|ETypes
argument_list|(
name|E
argument_list|)
operator|,
name|isPacked
argument_list|(
argument|P
argument_list|)
block|{}
name|KeyTy
argument_list|(
specifier|const
name|StructType
operator|*
name|ST
argument_list|)
operator|:
name|ETypes
argument_list|(
name|ST
operator|->
name|elements
argument_list|()
argument_list|)
operator|,
name|isPacked
argument_list|(
argument|ST->isPacked()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|isPacked
operator|!=
name|that
operator|.
name|isPacked
condition|)
return|return
name|false
return|;
if|if
condition|(
name|ETypes
operator|!=
name|that
operator|.
name|ETypes
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|KeyTy
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
block|}
struct|;
specifier|static
specifier|inline
name|StructType
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|StructType
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|StructType
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|StructType
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|hash_combine_range
argument_list|(
name|Key
operator|.
name|ETypes
operator|.
name|begin
argument_list|()
argument_list|,
name|Key
operator|.
name|ETypes
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|Key
operator|.
name|isPacked
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|StructType
modifier|*
name|ST
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|KeyTy
argument_list|(
name|ST
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|LHS
operator|==
name|KeyTy
argument_list|(
name|RHS
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|StructType
modifier|*
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|FunctionTypeKeyInfo
block|{
struct|struct
name|KeyTy
block|{
specifier|const
name|Type
modifier|*
name|ReturnType
decl_stmt|;
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|Params
expr_stmt|;
name|bool
name|isVarArg
decl_stmt|;
name|KeyTy
argument_list|(
argument|const Type* R
argument_list|,
argument|const ArrayRef<Type*>& P
argument_list|,
argument|bool V
argument_list|)
block|:
name|ReturnType
argument_list|(
name|R
argument_list|)
operator|,
name|Params
argument_list|(
name|P
argument_list|)
operator|,
name|isVarArg
argument_list|(
argument|V
argument_list|)
block|{}
name|KeyTy
argument_list|(
specifier|const
name|FunctionType
operator|*
name|FT
argument_list|)
operator|:
name|ReturnType
argument_list|(
name|FT
operator|->
name|getReturnType
argument_list|()
argument_list|)
operator|,
name|Params
argument_list|(
name|FT
operator|->
name|params
argument_list|()
argument_list|)
operator|,
name|isVarArg
argument_list|(
argument|FT->isVarArg()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|ReturnType
operator|!=
name|that
operator|.
name|ReturnType
condition|)
return|return
name|false
return|;
if|if
condition|(
name|isVarArg
operator|!=
name|that
operator|.
name|isVarArg
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Params
operator|!=
name|that
operator|.
name|Params
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|KeyTy
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|FunctionType
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|FunctionType
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|FunctionType
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|FunctionType
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|Key
operator|.
name|ReturnType
argument_list|,
name|hash_combine_range
argument_list|(
name|Key
operator|.
name|Params
operator|.
name|begin
argument_list|()
argument_list|,
name|Key
operator|.
name|Params
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|Key
operator|.
name|isVarArg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|FunctionType
modifier|*
name|FT
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|KeyTy
argument_list|(
name|FT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|FunctionType
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|LHS
operator|==
name|KeyTy
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|FunctionType
modifier|*
name|LHS
parameter_list|,
specifier|const
name|FunctionType
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
end_function

begin_comment
unit|};
comment|/// \brief Structure for hashing arbitrary MDNode operands.
end_comment

begin_decl_stmt
name|class
name|MDNodeOpsKey
block|{
name|ArrayRef
operator|<
name|Metadata
operator|*
operator|>
name|RawOps
expr_stmt|;
name|ArrayRef
operator|<
name|MDOperand
operator|>
name|Ops
expr_stmt|;
name|unsigned
name|Hash
decl_stmt|;
name|protected
label|:
name|MDNodeOpsKey
argument_list|(
name|ArrayRef
operator|<
name|Metadata
operator|*
operator|>
name|Ops
argument_list|)
operator|:
name|RawOps
argument_list|(
name|Ops
argument_list|)
operator|,
name|Hash
argument_list|(
argument|calculateHash(Ops)
argument_list|)
block|{}
name|template
operator|<
name|class
name|NodeTy
operator|>
name|MDNodeOpsKey
argument_list|(
argument|const NodeTy *N
argument_list|,
argument|unsigned Offset =
literal|0
argument_list|)
operator|:
name|Ops
argument_list|(
name|N
operator|->
name|op_begin
argument_list|()
operator|+
name|Offset
argument_list|,
name|N
operator|->
name|op_end
argument_list|()
argument_list|)
operator|,
name|Hash
argument_list|(
argument|N->getHash()
argument_list|)
block|{}
name|template
operator|<
name|class
name|NodeTy
operator|>
name|bool
name|compareOps
argument_list|(
argument|const NodeTy *RHS
argument_list|,
argument|unsigned Offset =
literal|0
argument_list|)
specifier|const
block|{
if|if
condition|(
name|getHash
argument_list|()
operator|!=
name|RHS
operator|->
name|getHash
argument_list|()
condition|)
return|return
name|false
return|;
name|assert
argument_list|(
operator|(
name|RawOps
operator|.
name|empty
argument_list|()
operator|||
name|Ops
operator|.
name|empty
argument_list|()
operator|)
operator|&&
literal|"Two sets of operands?"
argument_list|)
expr_stmt|;
return|return
name|RawOps
operator|.
name|empty
argument_list|()
condition|?
name|compareOps
argument_list|(
name|Ops
argument_list|,
name|RHS
argument_list|,
name|Offset
argument_list|)
else|:
name|compareOps
argument_list|(
name|RawOps
argument_list|,
name|RHS
argument_list|,
name|Offset
argument_list|)
return|;
block|}
end_decl_stmt

begin_function_decl
specifier|static
name|unsigned
name|calculateHash
parameter_list|(
name|MDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Offset
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|static
name|bool
name|compareOps
argument_list|(
argument|ArrayRef<T> Ops
argument_list|,
argument|const MDNode *RHS
argument_list|,
argument|unsigned Offset
argument_list|)
block|{
if|if
condition|(
name|Ops
operator|.
name|size
argument_list|()
operator|!=
name|RHS
operator|->
name|getNumOperands
argument_list|()
operator|-
name|Offset
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|equal
argument_list|(
name|Ops
operator|.
name|begin
argument_list|()
argument_list|,
name|Ops
operator|.
name|end
argument_list|()
argument_list|,
name|RHS
operator|->
name|op_begin
argument_list|()
operator|+
name|Offset
argument_list|)
return|;
end_return

begin_decl_stmt
unit|}    static
name|unsigned
name|calculateHash
argument_list|(
name|ArrayRef
operator|<
name|Metadata
operator|*
operator|>
name|Ops
argument_list|)
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|Hash
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|NodeTy
operator|>
expr|struct
name|MDNodeKeyImpl
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|NodeTy
operator|>
expr|struct
name|MDNodeInfo
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief DenseMapInfo for MDTuple.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Note that we don't need the is-function-local bit, since that's implicit in
end_comment

begin_comment
comment|/// the operands.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|MDTuple
operator|>
operator|:
name|MDNodeOpsKey
block|{
name|MDNodeKeyImpl
argument_list|(
name|ArrayRef
operator|<
name|Metadata
operator|*
operator|>
name|Ops
argument_list|)
operator|:
name|MDNodeOpsKey
argument_list|(
argument|Ops
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|MDTuple
operator|*
name|N
argument_list|)
operator|:
name|MDNodeOpsKey
argument_list|(
argument|N
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const MDTuple *RHS
argument_list|)
specifier|const
block|{
return|return
name|compareOps
argument_list|(
name|RHS
argument_list|)
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|getHash
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|unsigned
name|calculateHash
parameter_list|(
name|MDTuple
modifier|*
name|N
parameter_list|)
block|{
return|return
name|MDNodeOpsKey
operator|::
name|calculateHash
argument_list|(
name|N
argument_list|)
return|;
block|}
end_function

begin_comment
unit|};
comment|/// \brief DenseMapInfo for DILocation.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DILocation
operator|>
block|{
name|unsigned
name|Line
block|;
name|unsigned
name|Column
block|;
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|InlinedAt
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Line
argument_list|,
argument|unsigned Column
argument_list|,
argument|Metadata *Scope
argument_list|,
argument|Metadata *InlinedAt
argument_list|)
operator|:
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Column
argument_list|(
name|Column
argument_list|)
block|,
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|InlinedAt
argument_list|(
argument|InlinedAt
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DILocation
operator|*
name|L
argument_list|)
operator|:
name|Line
argument_list|(
name|L
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Column
argument_list|(
name|L
operator|->
name|getColumn
argument_list|()
argument_list|)
block|,
name|Scope
argument_list|(
name|L
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|InlinedAt
argument_list|(
argument|L->getRawInlinedAt()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DILocation *RHS
argument_list|)
specifier|const
block|{
return|return
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Column
operator|==
name|RHS
operator|->
name|getColumn
argument_list|()
operator|&&
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|InlinedAt
operator|==
name|RHS
operator|->
name|getRawInlinedAt
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Line
argument_list|,
name|Column
argument_list|,
name|Scope
argument_list|,
name|InlinedAt
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|/// \brief DenseMapInfo for GenericDINode.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|GenericDINode
operator|>
operator|:
name|MDNodeOpsKey
block|{
name|unsigned
name|Tag
block|;
name|StringRef
name|Header
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|StringRef Header
argument_list|,
argument|ArrayRef<Metadata *> DwarfOps
argument_list|)
operator|:
name|MDNodeOpsKey
argument_list|(
name|DwarfOps
argument_list|)
block|,
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Header
argument_list|(
argument|Header
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|GenericDINode
operator|*
name|N
argument_list|)
operator|:
name|MDNodeOpsKey
argument_list|(
name|N
argument_list|,
literal|1
argument_list|)
block|,
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Header
argument_list|(
argument|N->getHeader()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const GenericDINode *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Header
operator|==
name|RHS
operator|->
name|getHeader
argument_list|()
operator|&&
name|compareOps
argument_list|(
name|RHS
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|getHash
argument_list|()
argument_list|,
name|Tag
argument_list|,
name|Header
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|unsigned
name|calculateHash
parameter_list|(
name|GenericDINode
modifier|*
name|N
parameter_list|)
block|{
return|return
name|MDNodeOpsKey
operator|::
name|calculateHash
argument_list|(
name|N
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DISubrange
operator|>
block|{
name|int64_t
name|Count
block|;
name|int64_t
name|LowerBound
block|;
name|MDNodeKeyImpl
argument_list|(
argument|int64_t Count
argument_list|,
argument|int64_t LowerBound
argument_list|)
operator|:
name|Count
argument_list|(
name|Count
argument_list|)
block|,
name|LowerBound
argument_list|(
argument|LowerBound
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DISubrange
operator|*
name|N
argument_list|)
operator|:
name|Count
argument_list|(
name|N
operator|->
name|getCount
argument_list|()
argument_list|)
block|,
name|LowerBound
argument_list|(
argument|N->getLowerBound()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DISubrange *RHS
argument_list|)
specifier|const
block|{
return|return
name|Count
operator|==
name|RHS
operator|->
name|getCount
argument_list|()
operator|&&
name|LowerBound
operator|==
name|RHS
operator|->
name|getLowerBound
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Count
argument_list|,
name|LowerBound
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIEnumerator
operator|>
block|{
name|int64_t
name|Value
block|;
name|StringRef
name|Name
block|;
name|MDNodeKeyImpl
argument_list|(
argument|int64_t Value
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|Value
argument_list|(
name|Value
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIEnumerator
operator|*
name|N
argument_list|)
operator|:
name|Value
argument_list|(
name|N
operator|->
name|getValue
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
argument|N->getName()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIEnumerator *RHS
argument_list|)
specifier|const
block|{
return|return
name|Value
operator|==
name|RHS
operator|->
name|getValue
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Value
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIBasicType
operator|>
block|{
name|unsigned
name|Tag
block|;
name|StringRef
name|Name
block|;
name|uint64_t
name|SizeInBits
block|;
name|uint64_t
name|AlignInBits
block|;
name|unsigned
name|Encoding
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|StringRef Name
argument_list|,
argument|uint64_t SizeInBits
argument_list|,
argument|uint64_t AlignInBits
argument_list|,
argument|unsigned Encoding
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|SizeInBits
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|AlignInBits
argument_list|)
block|,
name|Encoding
argument_list|(
argument|Encoding
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIBasicType
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|N
operator|->
name|getSizeInBits
argument_list|()
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|N
operator|->
name|getAlignInBits
argument_list|()
argument_list|)
block|,
name|Encoding
argument_list|(
argument|N->getEncoding()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIBasicType *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|SizeInBits
operator|==
name|RHS
operator|->
name|getSizeInBits
argument_list|()
operator|&&
name|AlignInBits
operator|==
name|RHS
operator|->
name|getAlignInBits
argument_list|()
operator|&&
name|Encoding
operator|==
name|RHS
operator|->
name|getEncoding
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Name
argument_list|,
name|SizeInBits
argument_list|,
name|AlignInBits
argument_list|,
name|Encoding
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIDerivedType
operator|>
block|{
name|unsigned
name|Tag
block|;
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|BaseType
block|;
name|uint64_t
name|SizeInBits
block|;
name|uint64_t
name|AlignInBits
block|;
name|uint64_t
name|OffsetInBits
block|;
name|unsigned
name|Flags
block|;
name|Metadata
operator|*
name|ExtraData
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|StringRef Name
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|Metadata *Scope
argument_list|,
argument|Metadata *BaseType
argument_list|,
argument|uint64_t SizeInBits
argument_list|,
argument|uint64_t AlignInBits
argument_list|,
argument|uint64_t OffsetInBits
argument_list|,
argument|unsigned Flags
argument_list|,
argument|Metadata *ExtraData
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|BaseType
argument_list|(
name|BaseType
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|SizeInBits
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|AlignInBits
argument_list|)
block|,
name|OffsetInBits
argument_list|(
name|OffsetInBits
argument_list|)
block|,
name|Flags
argument_list|(
name|Flags
argument_list|)
block|,
name|ExtraData
argument_list|(
argument|ExtraData
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIDerivedType
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|BaseType
argument_list|(
name|N
operator|->
name|getRawBaseType
argument_list|()
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|N
operator|->
name|getSizeInBits
argument_list|()
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|N
operator|->
name|getAlignInBits
argument_list|()
argument_list|)
block|,
name|OffsetInBits
argument_list|(
name|N
operator|->
name|getOffsetInBits
argument_list|()
argument_list|)
block|,
name|Flags
argument_list|(
name|N
operator|->
name|getFlags
argument_list|()
argument_list|)
block|,
name|ExtraData
argument_list|(
argument|N->getRawExtraData()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIDerivedType *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|BaseType
operator|==
name|RHS
operator|->
name|getRawBaseType
argument_list|()
operator|&&
name|SizeInBits
operator|==
name|RHS
operator|->
name|getSizeInBits
argument_list|()
operator|&&
name|AlignInBits
operator|==
name|RHS
operator|->
name|getAlignInBits
argument_list|()
operator|&&
name|OffsetInBits
operator|==
name|RHS
operator|->
name|getOffsetInBits
argument_list|()
operator|&&
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
operator|&&
name|ExtraData
operator|==
name|RHS
operator|->
name|getRawExtraData
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Name
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Scope
argument_list|,
name|BaseType
argument_list|,
name|SizeInBits
argument_list|,
name|AlignInBits
argument_list|,
name|OffsetInBits
argument_list|,
name|Flags
argument_list|,
name|ExtraData
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DICompositeType
operator|>
block|{
name|unsigned
name|Tag
block|;
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|BaseType
block|;
name|uint64_t
name|SizeInBits
block|;
name|uint64_t
name|AlignInBits
block|;
name|uint64_t
name|OffsetInBits
block|;
name|unsigned
name|Flags
block|;
name|Metadata
operator|*
name|Elements
block|;
name|unsigned
name|RuntimeLang
block|;
name|Metadata
operator|*
name|VTableHolder
block|;
name|Metadata
operator|*
name|TemplateParams
block|;
name|StringRef
name|Identifier
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|StringRef Name
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|Metadata *Scope
argument_list|,
argument|Metadata *BaseType
argument_list|,
argument|uint64_t SizeInBits
argument_list|,
argument|uint64_t AlignInBits
argument_list|,
argument|uint64_t OffsetInBits
argument_list|,
argument|unsigned Flags
argument_list|,
argument|Metadata *Elements
argument_list|,
argument|unsigned RuntimeLang
argument_list|,
argument|Metadata *VTableHolder
argument_list|,
argument|Metadata *TemplateParams
argument_list|,
argument|StringRef Identifier
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|BaseType
argument_list|(
name|BaseType
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|SizeInBits
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|AlignInBits
argument_list|)
block|,
name|OffsetInBits
argument_list|(
name|OffsetInBits
argument_list|)
block|,
name|Flags
argument_list|(
name|Flags
argument_list|)
block|,
name|Elements
argument_list|(
name|Elements
argument_list|)
block|,
name|RuntimeLang
argument_list|(
name|RuntimeLang
argument_list|)
block|,
name|VTableHolder
argument_list|(
name|VTableHolder
argument_list|)
block|,
name|TemplateParams
argument_list|(
name|TemplateParams
argument_list|)
block|,
name|Identifier
argument_list|(
argument|Identifier
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DICompositeType
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|BaseType
argument_list|(
name|N
operator|->
name|getRawBaseType
argument_list|()
argument_list|)
block|,
name|SizeInBits
argument_list|(
name|N
operator|->
name|getSizeInBits
argument_list|()
argument_list|)
block|,
name|AlignInBits
argument_list|(
name|N
operator|->
name|getAlignInBits
argument_list|()
argument_list|)
block|,
name|OffsetInBits
argument_list|(
name|N
operator|->
name|getOffsetInBits
argument_list|()
argument_list|)
block|,
name|Flags
argument_list|(
name|N
operator|->
name|getFlags
argument_list|()
argument_list|)
block|,
name|Elements
argument_list|(
name|N
operator|->
name|getRawElements
argument_list|()
argument_list|)
block|,
name|RuntimeLang
argument_list|(
name|N
operator|->
name|getRuntimeLang
argument_list|()
argument_list|)
block|,
name|VTableHolder
argument_list|(
name|N
operator|->
name|getRawVTableHolder
argument_list|()
argument_list|)
block|,
name|TemplateParams
argument_list|(
name|N
operator|->
name|getRawTemplateParams
argument_list|()
argument_list|)
block|,
name|Identifier
argument_list|(
argument|N->getIdentifier()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DICompositeType *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|BaseType
operator|==
name|RHS
operator|->
name|getRawBaseType
argument_list|()
operator|&&
name|SizeInBits
operator|==
name|RHS
operator|->
name|getSizeInBits
argument_list|()
operator|&&
name|AlignInBits
operator|==
name|RHS
operator|->
name|getAlignInBits
argument_list|()
operator|&&
name|OffsetInBits
operator|==
name|RHS
operator|->
name|getOffsetInBits
argument_list|()
operator|&&
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
operator|&&
name|Elements
operator|==
name|RHS
operator|->
name|getRawElements
argument_list|()
operator|&&
name|RuntimeLang
operator|==
name|RHS
operator|->
name|getRuntimeLang
argument_list|()
operator|&&
name|VTableHolder
operator|==
name|RHS
operator|->
name|getRawVTableHolder
argument_list|()
operator|&&
name|TemplateParams
operator|==
name|RHS
operator|->
name|getRawTemplateParams
argument_list|()
operator|&&
name|Identifier
operator|==
name|RHS
operator|->
name|getIdentifier
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Name
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Scope
argument_list|,
name|BaseType
argument_list|,
name|SizeInBits
argument_list|,
name|AlignInBits
argument_list|,
name|OffsetInBits
argument_list|,
name|Flags
argument_list|,
name|Elements
argument_list|,
name|RuntimeLang
argument_list|,
name|VTableHolder
argument_list|,
name|TemplateParams
argument_list|,
name|Identifier
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DISubroutineType
operator|>
block|{
name|unsigned
name|Flags
block|;
name|Metadata
operator|*
name|TypeArray
block|;
name|MDNodeKeyImpl
argument_list|(
argument|int64_t Flags
argument_list|,
argument|Metadata *TypeArray
argument_list|)
operator|:
name|Flags
argument_list|(
name|Flags
argument_list|)
block|,
name|TypeArray
argument_list|(
argument|TypeArray
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DISubroutineType
operator|*
name|N
argument_list|)
operator|:
name|Flags
argument_list|(
name|N
operator|->
name|getFlags
argument_list|()
argument_list|)
block|,
name|TypeArray
argument_list|(
argument|N->getRawTypeArray()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DISubroutineType *RHS
argument_list|)
specifier|const
block|{
return|return
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
operator|&&
name|TypeArray
operator|==
name|RHS
operator|->
name|getRawTypeArray
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Flags
argument_list|,
name|TypeArray
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIFile
operator|>
block|{
name|StringRef
name|Filename
block|;
name|StringRef
name|Directory
block|;
name|MDNodeKeyImpl
argument_list|(
argument|StringRef Filename
argument_list|,
argument|StringRef Directory
argument_list|)
operator|:
name|Filename
argument_list|(
name|Filename
argument_list|)
block|,
name|Directory
argument_list|(
argument|Directory
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIFile
operator|*
name|N
argument_list|)
operator|:
name|Filename
argument_list|(
name|N
operator|->
name|getFilename
argument_list|()
argument_list|)
block|,
name|Directory
argument_list|(
argument|N->getDirectory()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIFile *RHS
argument_list|)
specifier|const
block|{
return|return
name|Filename
operator|==
name|RHS
operator|->
name|getFilename
argument_list|()
operator|&&
name|Directory
operator|==
name|RHS
operator|->
name|getDirectory
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Filename
argument_list|,
name|Directory
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DICompileUnit
operator|>
block|{
name|unsigned
name|SourceLanguage
block|;
name|Metadata
operator|*
name|File
block|;
name|StringRef
name|Producer
block|;
name|bool
name|IsOptimized
block|;
name|StringRef
name|Flags
block|;
name|unsigned
name|RuntimeVersion
block|;
name|StringRef
name|SplitDebugFilename
block|;
name|unsigned
name|EmissionKind
block|;
name|Metadata
operator|*
name|EnumTypes
block|;
name|Metadata
operator|*
name|RetainedTypes
block|;
name|Metadata
operator|*
name|Subprograms
block|;
name|Metadata
operator|*
name|GlobalVariables
block|;
name|Metadata
operator|*
name|ImportedEntities
block|;
name|uint64_t
name|DWOId
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned SourceLanguage
argument_list|,
argument|Metadata *File
argument_list|,
argument|StringRef Producer
argument_list|,
argument|bool IsOptimized
argument_list|,
argument|StringRef Flags
argument_list|,
argument|unsigned RuntimeVersion
argument_list|,
argument|StringRef SplitDebugFilename
argument_list|,
argument|unsigned EmissionKind
argument_list|,
argument|Metadata *EnumTypes
argument_list|,
argument|Metadata *RetainedTypes
argument_list|,
argument|Metadata *Subprograms
argument_list|,
argument|Metadata *GlobalVariables
argument_list|,
argument|Metadata *ImportedEntities
argument_list|,
argument|uint64_t DWOId
argument_list|)
operator|:
name|SourceLanguage
argument_list|(
name|SourceLanguage
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Producer
argument_list|(
name|Producer
argument_list|)
block|,
name|IsOptimized
argument_list|(
name|IsOptimized
argument_list|)
block|,
name|Flags
argument_list|(
name|Flags
argument_list|)
block|,
name|RuntimeVersion
argument_list|(
name|RuntimeVersion
argument_list|)
block|,
name|SplitDebugFilename
argument_list|(
name|SplitDebugFilename
argument_list|)
block|,
name|EmissionKind
argument_list|(
name|EmissionKind
argument_list|)
block|,
name|EnumTypes
argument_list|(
name|EnumTypes
argument_list|)
block|,
name|RetainedTypes
argument_list|(
name|RetainedTypes
argument_list|)
block|,
name|Subprograms
argument_list|(
name|Subprograms
argument_list|)
block|,
name|GlobalVariables
argument_list|(
name|GlobalVariables
argument_list|)
block|,
name|ImportedEntities
argument_list|(
name|ImportedEntities
argument_list|)
block|,
name|DWOId
argument_list|(
argument|DWOId
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DICompileUnit
operator|*
name|N
argument_list|)
operator|:
name|SourceLanguage
argument_list|(
name|N
operator|->
name|getSourceLanguage
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Producer
argument_list|(
name|N
operator|->
name|getProducer
argument_list|()
argument_list|)
block|,
name|IsOptimized
argument_list|(
name|N
operator|->
name|isOptimized
argument_list|()
argument_list|)
block|,
name|Flags
argument_list|(
name|N
operator|->
name|getFlags
argument_list|()
argument_list|)
block|,
name|RuntimeVersion
argument_list|(
name|N
operator|->
name|getRuntimeVersion
argument_list|()
argument_list|)
block|,
name|SplitDebugFilename
argument_list|(
name|N
operator|->
name|getSplitDebugFilename
argument_list|()
argument_list|)
block|,
name|EmissionKind
argument_list|(
name|N
operator|->
name|getEmissionKind
argument_list|()
argument_list|)
block|,
name|EnumTypes
argument_list|(
name|N
operator|->
name|getRawEnumTypes
argument_list|()
argument_list|)
block|,
name|RetainedTypes
argument_list|(
name|N
operator|->
name|getRawRetainedTypes
argument_list|()
argument_list|)
block|,
name|Subprograms
argument_list|(
name|N
operator|->
name|getRawSubprograms
argument_list|()
argument_list|)
block|,
name|GlobalVariables
argument_list|(
name|N
operator|->
name|getRawGlobalVariables
argument_list|()
argument_list|)
block|,
name|ImportedEntities
argument_list|(
name|N
operator|->
name|getRawImportedEntities
argument_list|()
argument_list|)
block|,
name|DWOId
argument_list|(
argument|N->getDWOId()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DICompileUnit *RHS
argument_list|)
specifier|const
block|{
return|return
name|SourceLanguage
operator|==
name|RHS
operator|->
name|getSourceLanguage
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Producer
operator|==
name|RHS
operator|->
name|getProducer
argument_list|()
operator|&&
name|IsOptimized
operator|==
name|RHS
operator|->
name|isOptimized
argument_list|()
operator|&&
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
operator|&&
name|RuntimeVersion
operator|==
name|RHS
operator|->
name|getRuntimeVersion
argument_list|()
operator|&&
name|SplitDebugFilename
operator|==
name|RHS
operator|->
name|getSplitDebugFilename
argument_list|()
operator|&&
name|EmissionKind
operator|==
name|RHS
operator|->
name|getEmissionKind
argument_list|()
operator|&&
name|EnumTypes
operator|==
name|RHS
operator|->
name|getRawEnumTypes
argument_list|()
operator|&&
name|RetainedTypes
operator|==
name|RHS
operator|->
name|getRawRetainedTypes
argument_list|()
operator|&&
name|Subprograms
operator|==
name|RHS
operator|->
name|getRawSubprograms
argument_list|()
operator|&&
name|GlobalVariables
operator|==
name|RHS
operator|->
name|getRawGlobalVariables
argument_list|()
operator|&&
name|ImportedEntities
operator|==
name|RHS
operator|->
name|getRawImportedEntities
argument_list|()
operator|&&
name|DWOId
operator|==
name|RHS
operator|->
name|getDWOId
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|SourceLanguage
argument_list|,
name|File
argument_list|,
name|Producer
argument_list|,
name|IsOptimized
argument_list|,
name|Flags
argument_list|,
name|RuntimeVersion
argument_list|,
name|SplitDebugFilename
argument_list|,
name|EmissionKind
argument_list|,
name|EnumTypes
argument_list|,
name|RetainedTypes
argument_list|,
name|Subprograms
argument_list|,
name|GlobalVariables
argument_list|,
name|ImportedEntities
argument_list|,
name|DWOId
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DISubprogram
operator|>
block|{
name|Metadata
operator|*
name|Scope
block|;
name|StringRef
name|Name
block|;
name|StringRef
name|LinkageName
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|Metadata
operator|*
name|Type
block|;
name|bool
name|IsLocalToUnit
block|;
name|bool
name|IsDefinition
block|;
name|unsigned
name|ScopeLine
block|;
name|Metadata
operator|*
name|ContainingType
block|;
name|unsigned
name|Virtuality
block|;
name|unsigned
name|VirtualIndex
block|;
name|unsigned
name|Flags
block|;
name|bool
name|IsOptimized
block|;
name|Metadata
operator|*
name|Function
block|;
name|Metadata
operator|*
name|TemplateParams
block|;
name|Metadata
operator|*
name|Declaration
block|;
name|Metadata
operator|*
name|Variables
block|;
name|MDNodeKeyImpl
argument_list|(
argument|Metadata *Scope
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef LinkageName
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|Metadata *Type
argument_list|,
argument|bool IsLocalToUnit
argument_list|,
argument|bool IsDefinition
argument_list|,
argument|unsigned ScopeLine
argument_list|,
argument|Metadata *ContainingType
argument_list|,
argument|unsigned Virtuality
argument_list|,
argument|unsigned VirtualIndex
argument_list|,
argument|unsigned Flags
argument_list|,
argument|bool IsOptimized
argument_list|,
argument|Metadata *Function
argument_list|,
argument|Metadata *TemplateParams
argument_list|,
argument|Metadata *Declaration
argument_list|,
argument|Metadata *Variables
argument_list|)
operator|:
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|LinkageName
argument_list|(
name|LinkageName
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|IsLocalToUnit
argument_list|(
name|IsLocalToUnit
argument_list|)
block|,
name|IsDefinition
argument_list|(
name|IsDefinition
argument_list|)
block|,
name|ScopeLine
argument_list|(
name|ScopeLine
argument_list|)
block|,
name|ContainingType
argument_list|(
name|ContainingType
argument_list|)
block|,
name|Virtuality
argument_list|(
name|Virtuality
argument_list|)
block|,
name|VirtualIndex
argument_list|(
name|VirtualIndex
argument_list|)
block|,
name|Flags
argument_list|(
name|Flags
argument_list|)
block|,
name|IsOptimized
argument_list|(
name|IsOptimized
argument_list|)
block|,
name|Function
argument_list|(
name|Function
argument_list|)
block|,
name|TemplateParams
argument_list|(
name|TemplateParams
argument_list|)
block|,
name|Declaration
argument_list|(
name|Declaration
argument_list|)
block|,
name|Variables
argument_list|(
argument|Variables
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DISubprogram
operator|*
name|N
argument_list|)
operator|:
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|LinkageName
argument_list|(
name|N
operator|->
name|getLinkageName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
name|N
operator|->
name|getRawType
argument_list|()
argument_list|)
block|,
name|IsLocalToUnit
argument_list|(
name|N
operator|->
name|isLocalToUnit
argument_list|()
argument_list|)
block|,
name|IsDefinition
argument_list|(
name|N
operator|->
name|isDefinition
argument_list|()
argument_list|)
block|,
name|ScopeLine
argument_list|(
name|N
operator|->
name|getScopeLine
argument_list|()
argument_list|)
block|,
name|ContainingType
argument_list|(
name|N
operator|->
name|getRawContainingType
argument_list|()
argument_list|)
block|,
name|Virtuality
argument_list|(
name|N
operator|->
name|getVirtuality
argument_list|()
argument_list|)
block|,
name|VirtualIndex
argument_list|(
name|N
operator|->
name|getVirtualIndex
argument_list|()
argument_list|)
block|,
name|Flags
argument_list|(
name|N
operator|->
name|getFlags
argument_list|()
argument_list|)
block|,
name|IsOptimized
argument_list|(
name|N
operator|->
name|isOptimized
argument_list|()
argument_list|)
block|,
name|Function
argument_list|(
name|N
operator|->
name|getRawFunction
argument_list|()
argument_list|)
block|,
name|TemplateParams
argument_list|(
name|N
operator|->
name|getRawTemplateParams
argument_list|()
argument_list|)
block|,
name|Declaration
argument_list|(
name|N
operator|->
name|getRawDeclaration
argument_list|()
argument_list|)
block|,
name|Variables
argument_list|(
argument|N->getRawVariables()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DISubprogram *RHS
argument_list|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|LinkageName
operator|==
name|RHS
operator|->
name|getLinkageName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
operator|&&
name|IsLocalToUnit
operator|==
name|RHS
operator|->
name|isLocalToUnit
argument_list|()
operator|&&
name|IsDefinition
operator|==
name|RHS
operator|->
name|isDefinition
argument_list|()
operator|&&
name|ScopeLine
operator|==
name|RHS
operator|->
name|getScopeLine
argument_list|()
operator|&&
name|ContainingType
operator|==
name|RHS
operator|->
name|getRawContainingType
argument_list|()
operator|&&
name|Virtuality
operator|==
name|RHS
operator|->
name|getVirtuality
argument_list|()
operator|&&
name|VirtualIndex
operator|==
name|RHS
operator|->
name|getVirtualIndex
argument_list|()
operator|&&
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
operator|&&
name|IsOptimized
operator|==
name|RHS
operator|->
name|isOptimized
argument_list|()
operator|&&
name|Function
operator|==
name|RHS
operator|->
name|getRawFunction
argument_list|()
operator|&&
name|TemplateParams
operator|==
name|RHS
operator|->
name|getRawTemplateParams
argument_list|()
operator|&&
name|Declaration
operator|==
name|RHS
operator|->
name|getRawDeclaration
argument_list|()
operator|&&
name|Variables
operator|==
name|RHS
operator|->
name|getRawVariables
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Scope
argument_list|,
name|Name
argument_list|,
name|LinkageName
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Type
argument_list|,
name|IsLocalToUnit
argument_list|,
name|IsDefinition
argument_list|,
name|ScopeLine
argument_list|,
name|ContainingType
argument_list|,
name|Virtuality
argument_list|,
name|VirtualIndex
argument_list|,
name|Flags
argument_list|,
name|IsOptimized
argument_list|,
name|Function
argument_list|,
name|TemplateParams
argument_list|,
name|Declaration
argument_list|,
name|Variables
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DILexicalBlock
operator|>
block|{
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|unsigned
name|Column
block|;
name|MDNodeKeyImpl
argument_list|(
argument|Metadata *Scope
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|unsigned Column
argument_list|)
operator|:
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Column
argument_list|(
argument|Column
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DILexicalBlock
operator|*
name|N
argument_list|)
operator|:
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Column
argument_list|(
argument|N->getColumn()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DILexicalBlock *RHS
argument_list|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Column
operator|==
name|RHS
operator|->
name|getColumn
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Scope
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Column
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DILexicalBlockFile
operator|>
block|{
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Discriminator
block|;
name|MDNodeKeyImpl
argument_list|(
argument|Metadata *Scope
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Discriminator
argument_list|)
operator|:
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Discriminator
argument_list|(
argument|Discriminator
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DILexicalBlockFile
operator|*
name|N
argument_list|)
operator|:
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Discriminator
argument_list|(
argument|N->getDiscriminator()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DILexicalBlockFile *RHS
argument_list|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Discriminator
operator|==
name|RHS
operator|->
name|getDiscriminator
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Scope
argument_list|,
name|File
argument_list|,
name|Discriminator
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DINamespace
operator|>
block|{
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|File
block|;
name|StringRef
name|Name
block|;
name|unsigned
name|Line
block|;
name|MDNodeKeyImpl
argument_list|(
argument|Metadata *Scope
argument_list|,
argument|Metadata *File
argument_list|,
argument|StringRef Name
argument_list|,
argument|unsigned Line
argument_list|)
operator|:
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|Line
argument_list|(
argument|Line
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DINamespace
operator|*
name|N
argument_list|)
operator|:
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
argument|N->getLine()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DINamespace *RHS
argument_list|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Scope
argument_list|,
name|File
argument_list|,
name|Name
argument_list|,
name|Line
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DITemplateTypeParameter
operator|>
block|{
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|Type
block|;
name|MDNodeKeyImpl
argument_list|(
argument|StringRef Name
argument_list|,
argument|Metadata *Type
argument_list|)
operator|:
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|Type
argument_list|(
argument|Type
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DITemplateTypeParameter
operator|*
name|N
argument_list|)
operator|:
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
argument|N->getRawType()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DITemplateTypeParameter *RHS
argument_list|)
specifier|const
block|{
return|return
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Name
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DITemplateValueParameter
operator|>
block|{
name|unsigned
name|Tag
block|;
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|Type
block|;
name|Metadata
operator|*
name|Value
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|StringRef Name
argument_list|,
argument|Metadata *Type
argument_list|,
argument|Metadata *Value
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Value
argument_list|(
argument|Value
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DITemplateValueParameter
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
name|N
operator|->
name|getRawType
argument_list|()
argument_list|)
block|,
name|Value
argument_list|(
argument|N->getValue()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DITemplateValueParameter *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
operator|&&
name|Value
operator|==
name|RHS
operator|->
name|getValue
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Name
argument_list|,
name|Type
argument_list|,
name|Value
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIGlobalVariable
operator|>
block|{
name|Metadata
operator|*
name|Scope
block|;
name|StringRef
name|Name
block|;
name|StringRef
name|LinkageName
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|Metadata
operator|*
name|Type
block|;
name|bool
name|IsLocalToUnit
block|;
name|bool
name|IsDefinition
block|;
name|Metadata
operator|*
name|Variable
block|;
name|Metadata
operator|*
name|StaticDataMemberDeclaration
block|;
name|MDNodeKeyImpl
argument_list|(
argument|Metadata *Scope
argument_list|,
argument|StringRef Name
argument_list|,
argument|StringRef LinkageName
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|Metadata *Type
argument_list|,
argument|bool IsLocalToUnit
argument_list|,
argument|bool IsDefinition
argument_list|,
argument|Metadata *Variable
argument_list|,
argument|Metadata *StaticDataMemberDeclaration
argument_list|)
operator|:
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|LinkageName
argument_list|(
name|LinkageName
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|IsLocalToUnit
argument_list|(
name|IsLocalToUnit
argument_list|)
block|,
name|IsDefinition
argument_list|(
name|IsDefinition
argument_list|)
block|,
name|Variable
argument_list|(
name|Variable
argument_list|)
block|,
name|StaticDataMemberDeclaration
argument_list|(
argument|StaticDataMemberDeclaration
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIGlobalVariable
operator|*
name|N
argument_list|)
operator|:
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|LinkageName
argument_list|(
name|N
operator|->
name|getLinkageName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
name|N
operator|->
name|getRawType
argument_list|()
argument_list|)
block|,
name|IsLocalToUnit
argument_list|(
name|N
operator|->
name|isLocalToUnit
argument_list|()
argument_list|)
block|,
name|IsDefinition
argument_list|(
name|N
operator|->
name|isDefinition
argument_list|()
argument_list|)
block|,
name|Variable
argument_list|(
name|N
operator|->
name|getRawVariable
argument_list|()
argument_list|)
block|,
name|StaticDataMemberDeclaration
argument_list|(
argument|N->getRawStaticDataMemberDeclaration()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIGlobalVariable *RHS
argument_list|)
specifier|const
block|{
return|return
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|LinkageName
operator|==
name|RHS
operator|->
name|getLinkageName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
operator|&&
name|IsLocalToUnit
operator|==
name|RHS
operator|->
name|isLocalToUnit
argument_list|()
operator|&&
name|IsDefinition
operator|==
name|RHS
operator|->
name|isDefinition
argument_list|()
operator|&&
name|Variable
operator|==
name|RHS
operator|->
name|getRawVariable
argument_list|()
operator|&&
name|StaticDataMemberDeclaration
operator|==
name|RHS
operator|->
name|getRawStaticDataMemberDeclaration
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Scope
argument_list|,
name|Name
argument_list|,
name|LinkageName
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Type
argument_list|,
name|IsLocalToUnit
argument_list|,
name|IsDefinition
argument_list|,
name|Variable
argument_list|,
name|StaticDataMemberDeclaration
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DILocalVariable
operator|>
block|{
name|unsigned
name|Tag
block|;
name|Metadata
operator|*
name|Scope
block|;
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|Metadata
operator|*
name|Type
block|;
name|unsigned
name|Arg
block|;
name|unsigned
name|Flags
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|Metadata *Scope
argument_list|,
argument|StringRef Name
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|Metadata *Type
argument_list|,
argument|unsigned Arg
argument_list|,
argument|unsigned Flags
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Type
argument_list|(
name|Type
argument_list|)
block|,
name|Arg
argument_list|(
name|Arg
argument_list|)
block|,
name|Flags
argument_list|(
argument|Flags
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DILocalVariable
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
name|N
operator|->
name|getRawType
argument_list|()
argument_list|)
block|,
name|Arg
argument_list|(
name|N
operator|->
name|getArg
argument_list|()
argument_list|)
block|,
name|Flags
argument_list|(
argument|N->getFlags()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DILocalVariable *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
operator|&&
name|Arg
operator|==
name|RHS
operator|->
name|getArg
argument_list|()
operator|&&
name|Flags
operator|==
name|RHS
operator|->
name|getFlags
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Scope
argument_list|,
name|Name
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|Type
argument_list|,
name|Arg
argument_list|,
name|Flags
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIExpression
operator|>
block|{
name|ArrayRef
operator|<
name|uint64_t
operator|>
name|Elements
block|;
name|MDNodeKeyImpl
argument_list|(
name|ArrayRef
operator|<
name|uint64_t
operator|>
name|Elements
argument_list|)
operator|:
name|Elements
argument_list|(
argument|Elements
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIExpression
operator|*
name|N
argument_list|)
operator|:
name|Elements
argument_list|(
argument|N->getElements()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIExpression *RHS
argument_list|)
specifier|const
block|{
return|return
name|Elements
operator|==
name|RHS
operator|->
name|getElements
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine_range
argument_list|(
name|Elements
operator|.
name|begin
argument_list|()
argument_list|,
name|Elements
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIObjCProperty
operator|>
block|{
name|StringRef
name|Name
block|;
name|Metadata
operator|*
name|File
block|;
name|unsigned
name|Line
block|;
name|StringRef
name|GetterName
block|;
name|StringRef
name|SetterName
block|;
name|unsigned
name|Attributes
block|;
name|Metadata
operator|*
name|Type
block|;
name|MDNodeKeyImpl
argument_list|(
argument|StringRef Name
argument_list|,
argument|Metadata *File
argument_list|,
argument|unsigned Line
argument_list|,
argument|StringRef GetterName
argument_list|,
argument|StringRef SetterName
argument_list|,
argument|unsigned Attributes
argument_list|,
argument|Metadata *Type
argument_list|)
operator|:
name|Name
argument_list|(
name|Name
argument_list|)
block|,
name|File
argument_list|(
name|File
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|GetterName
argument_list|(
name|GetterName
argument_list|)
block|,
name|SetterName
argument_list|(
name|SetterName
argument_list|)
block|,
name|Attributes
argument_list|(
name|Attributes
argument_list|)
block|,
name|Type
argument_list|(
argument|Type
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIObjCProperty
operator|*
name|N
argument_list|)
operator|:
name|Name
argument_list|(
name|N
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|File
argument_list|(
name|N
operator|->
name|getRawFile
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|GetterName
argument_list|(
name|N
operator|->
name|getGetterName
argument_list|()
argument_list|)
block|,
name|SetterName
argument_list|(
name|N
operator|->
name|getSetterName
argument_list|()
argument_list|)
block|,
name|Attributes
argument_list|(
name|N
operator|->
name|getAttributes
argument_list|()
argument_list|)
block|,
name|Type
argument_list|(
argument|N->getRawType()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIObjCProperty *RHS
argument_list|)
specifier|const
block|{
return|return
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
operator|&&
name|File
operator|==
name|RHS
operator|->
name|getRawFile
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|GetterName
operator|==
name|RHS
operator|->
name|getGetterName
argument_list|()
operator|&&
name|SetterName
operator|==
name|RHS
operator|->
name|getSetterName
argument_list|()
operator|&&
name|Attributes
operator|==
name|RHS
operator|->
name|getAttributes
argument_list|()
operator|&&
name|Type
operator|==
name|RHS
operator|->
name|getRawType
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Name
argument_list|,
name|File
argument_list|,
name|Line
argument_list|,
name|GetterName
argument_list|,
name|SetterName
argument_list|,
name|Attributes
argument_list|,
name|Type
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|MDNodeKeyImpl
operator|<
name|DIImportedEntity
operator|>
block|{
name|unsigned
name|Tag
block|;
name|Metadata
operator|*
name|Scope
block|;
name|Metadata
operator|*
name|Entity
block|;
name|unsigned
name|Line
block|;
name|StringRef
name|Name
block|;
name|MDNodeKeyImpl
argument_list|(
argument|unsigned Tag
argument_list|,
argument|Metadata *Scope
argument_list|,
argument|Metadata *Entity
argument_list|,
argument|unsigned Line
argument_list|,
argument|StringRef Name
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
block|,
name|Scope
argument_list|(
name|Scope
argument_list|)
block|,
name|Entity
argument_list|(
name|Entity
argument_list|)
block|,
name|Line
argument_list|(
name|Line
argument_list|)
block|,
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
name|MDNodeKeyImpl
argument_list|(
specifier|const
name|DIImportedEntity
operator|*
name|N
argument_list|)
operator|:
name|Tag
argument_list|(
name|N
operator|->
name|getTag
argument_list|()
argument_list|)
block|,
name|Scope
argument_list|(
name|N
operator|->
name|getRawScope
argument_list|()
argument_list|)
block|,
name|Entity
argument_list|(
name|N
operator|->
name|getRawEntity
argument_list|()
argument_list|)
block|,
name|Line
argument_list|(
name|N
operator|->
name|getLine
argument_list|()
argument_list|)
block|,
name|Name
argument_list|(
argument|N->getName()
argument_list|)
block|{}
name|bool
name|isKeyOf
argument_list|(
argument|const DIImportedEntity *RHS
argument_list|)
specifier|const
block|{
return|return
name|Tag
operator|==
name|RHS
operator|->
name|getTag
argument_list|()
operator|&&
name|Scope
operator|==
name|RHS
operator|->
name|getRawScope
argument_list|()
operator|&&
name|Entity
operator|==
name|RHS
operator|->
name|getRawEntity
argument_list|()
operator|&&
name|Line
operator|==
name|RHS
operator|->
name|getLine
argument_list|()
operator|&&
name|Name
operator|==
name|RHS
operator|->
name|getName
argument_list|()
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Tag
argument_list|,
name|Scope
argument_list|,
name|Entity
argument_list|,
name|Line
argument_list|,
name|Name
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|/// \brief DenseMapInfo for MDNode subclasses.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|NodeTy
operator|>
expr|struct
name|MDNodeInfo
block|{
typedef|typedef
name|MDNodeKeyImpl
operator|<
name|NodeTy
operator|>
name|KeyTy
expr_stmt|;
specifier|static
specifier|inline
name|NodeTy
operator|*
name|getEmptyKey
argument_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|NodeTy
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|NodeTy
operator|*
name|getTombstoneKey
argument_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|NodeTy
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const KeyTy&Key
argument_list|)
block|{
return|return
name|Key
operator|.
name|getHashValue
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const NodeTy *N
argument_list|)
block|{
return|return
name|KeyTy
argument_list|(
name|N
argument_list|)
operator|.
name|getHashValue
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|const KeyTy&LHS
argument_list|,
argument|const NodeTy *RHS
argument_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_return
return|return
name|LHS
operator|.
name|isKeyOf
argument_list|(
name|RHS
argument_list|)
return|;
end_return

begin_function
unit|}   static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|NodeTy
modifier|*
name|LHS
parameter_list|,
specifier|const
name|NodeTy
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
end_function

begin_define
unit|};
define|#
directive|define
name|HANDLE_MDNODE_LEAF
parameter_list|(
name|CLASS
parameter_list|)
value|typedef MDNodeInfo<CLASS> CLASS##Info;
end_define

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.def"
end_include

begin_comment
comment|/// \brief Map-like storage for metadata attachments.
end_comment

begin_decl_stmt
name|class
name|MDAttachmentMap
block|{
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|TrackingMDNodeRef
operator|>
operator|,
literal|2
operator|>
name|Attachments
expr_stmt|;
name|public
label|:
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Attachments
operator|.
name|empty
argument_list|()
return|;
block|}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Attachments
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \brief Get a particular attachment (if any).
name|MDNode
modifier|*
name|lookup
argument_list|(
name|unsigned
name|ID
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Set an attachment to a particular node.
comment|///
comment|/// Set the \c ID attachment to \c MD, replacing the current attachment at \c
comment|/// ID (if anyway).
name|void
name|set
parameter_list|(
name|unsigned
name|ID
parameter_list|,
name|MDNode
modifier|&
name|MD
parameter_list|)
function_decl|;
comment|/// \brief Remove an attachment.
comment|///
comment|/// Remove the attachment at \c ID, if any.
name|void
name|erase
parameter_list|(
name|unsigned
name|ID
parameter_list|)
function_decl|;
comment|/// \brief Copy out all the attachments.
comment|///
comment|/// Copies all the current attachments into \c Result, sorting by attachment
comment|/// ID.  This function does \em not clear \c Result.
name|void
name|getAll
argument_list|(
name|SmallVectorImpl
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|MDNode
operator|*
operator|>>
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Erase matching attachments.
comment|///
comment|/// Erases all attachments matching the \c shouldRemove predicate.
name|template
operator|<
name|class
name|PredTy
operator|>
name|void
name|remove_if
argument_list|(
argument|PredTy shouldRemove
argument_list|)
block|{
name|Attachments
operator|.
name|erase
argument_list|(
name|std
operator|::
name|remove_if
argument_list|(
name|Attachments
operator|.
name|begin
argument_list|()
argument_list|,
name|Attachments
operator|.
name|end
argument_list|()
argument_list|,
name|shouldRemove
argument_list|)
argument_list|,
name|Attachments
operator|.
name|end
argument_list|()
argument_list|)
block|;   }
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|LLVMContextImpl
block|{
name|public
label|:
comment|/// OwnedModules - The set of modules instantiated in this context, and which
comment|/// will be automatically deleted if this context is deleted.
name|SmallPtrSet
operator|<
name|Module
operator|*
operator|,
literal|4
operator|>
name|OwnedModules
expr_stmt|;
name|LLVMContext
operator|::
name|InlineAsmDiagHandlerTy
name|InlineAsmDiagHandler
expr_stmt|;
name|void
modifier|*
name|InlineAsmDiagContext
decl_stmt|;
name|LLVMContext
operator|::
name|DiagnosticHandlerTy
name|DiagnosticHandler
expr_stmt|;
name|void
modifier|*
name|DiagnosticContext
decl_stmt|;
name|bool
name|RespectDiagnosticFilters
decl_stmt|;
name|LLVMContext
operator|::
name|YieldCallbackTy
name|YieldCallback
expr_stmt|;
name|void
modifier|*
name|YieldOpaqueHandle
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|APInt
operator|,
name|ConstantInt
operator|*
operator|,
name|DenseMapAPIntKeyInfo
operator|>
name|IntMapTy
expr_stmt|;
name|IntMapTy
name|IntConstants
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|APFloat
operator|,
name|ConstantFP
operator|*
operator|,
name|DenseMapAPFloatKeyInfo
operator|>
name|FPMapTy
expr_stmt|;
name|FPMapTy
name|FPConstants
decl_stmt|;
name|FoldingSet
operator|<
name|AttributeImpl
operator|>
name|AttrsSet
expr_stmt|;
name|FoldingSet
operator|<
name|AttributeSetImpl
operator|>
name|AttrsLists
expr_stmt|;
name|FoldingSet
operator|<
name|AttributeSetNode
operator|>
name|AttrsSetNodes
expr_stmt|;
name|StringMap
operator|<
name|MDString
operator|>
name|MDStringCache
expr_stmt|;
name|DenseMap
operator|<
name|Value
operator|*
operator|,
name|ValueAsMetadata
operator|*
operator|>
name|ValuesAsMetadata
expr_stmt|;
name|DenseMap
operator|<
name|Metadata
operator|*
operator|,
name|MetadataAsValue
operator|*
operator|>
name|MetadataAsValues
expr_stmt|;
define|#
directive|define
name|HANDLE_MDNODE_LEAF
parameter_list|(
name|CLASS
parameter_list|)
value|DenseSet<CLASS *, CLASS##Info> CLASS##s;
include|#
directive|include
file|"llvm/IR/Metadata.def"
comment|// MDNodes may be uniqued or not uniqued.  When they're not uniqued, they
comment|// aren't in the MDNodeSet, but they're still shared between objects, so no
comment|// one object can destroy them.  This set allows us to at least destroy them
comment|// on Context destruction.
name|SmallPtrSet
operator|<
name|MDNode
operator|*
operator|,
literal|1
operator|>
name|DistinctMDNodes
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|ConstantAggregateZero
operator|*
operator|>
name|CAZConstants
expr_stmt|;
typedef|typedef
name|ConstantUniqueMap
operator|<
name|ConstantArray
operator|>
name|ArrayConstantsTy
expr_stmt|;
name|ArrayConstantsTy
name|ArrayConstants
decl_stmt|;
typedef|typedef
name|ConstantUniqueMap
operator|<
name|ConstantStruct
operator|>
name|StructConstantsTy
expr_stmt|;
name|StructConstantsTy
name|StructConstants
decl_stmt|;
typedef|typedef
name|ConstantUniqueMap
operator|<
name|ConstantVector
operator|>
name|VectorConstantsTy
expr_stmt|;
name|VectorConstantsTy
name|VectorConstants
decl_stmt|;
name|DenseMap
operator|<
name|PointerType
operator|*
operator|,
name|ConstantPointerNull
operator|*
operator|>
name|CPNConstants
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|UndefValue
operator|*
operator|>
name|UVConstants
expr_stmt|;
name|StringMap
operator|<
name|ConstantDataSequential
operator|*
operator|>
name|CDSConstants
expr_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|Function
operator|*
operator|,
specifier|const
name|BasicBlock
operator|*
operator|>
operator|,
name|BlockAddress
operator|*
operator|>
name|BlockAddresses
expr_stmt|;
name|ConstantUniqueMap
operator|<
name|ConstantExpr
operator|>
name|ExprConstants
expr_stmt|;
name|ConstantUniqueMap
operator|<
name|InlineAsm
operator|>
name|InlineAsms
expr_stmt|;
name|ConstantInt
modifier|*
name|TheTrueVal
decl_stmt|;
name|ConstantInt
modifier|*
name|TheFalseVal
decl_stmt|;
comment|// Basic type instances.
name|Type
name|VoidTy
decl_stmt|,
name|LabelTy
decl_stmt|,
name|HalfTy
decl_stmt|,
name|FloatTy
decl_stmt|,
name|DoubleTy
decl_stmt|,
name|MetadataTy
decl_stmt|;
name|Type
name|X86_FP80Ty
decl_stmt|,
name|FP128Ty
decl_stmt|,
name|PPC_FP128Ty
decl_stmt|,
name|X86_MMXTy
decl_stmt|;
name|IntegerType
name|Int1Ty
decl_stmt|,
name|Int8Ty
decl_stmt|,
name|Int16Ty
decl_stmt|,
name|Int32Ty
decl_stmt|,
name|Int64Ty
decl_stmt|,
name|Int128Ty
decl_stmt|;
comment|/// TypeAllocator - All dynamically allocated types are allocated from this.
comment|/// They live forever until the context is torn down.
name|BumpPtrAllocator
name|TypeAllocator
decl_stmt|;
name|DenseMap
operator|<
name|unsigned
operator|,
name|IntegerType
operator|*
operator|>
name|IntegerTypes
expr_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|FunctionType
operator|*
operator|,
name|FunctionTypeKeyInfo
operator|>
name|FunctionTypeSet
expr_stmt|;
name|FunctionTypeSet
name|FunctionTypes
decl_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|StructType
operator|*
operator|,
name|AnonStructTypeKeyInfo
operator|>
name|StructTypeSet
expr_stmt|;
name|StructTypeSet
name|AnonStructTypes
decl_stmt|;
name|StringMap
operator|<
name|StructType
operator|*
operator|>
name|NamedStructTypes
expr_stmt|;
name|unsigned
name|NamedStructTypesUniqueID
decl_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|uint64_t
operator|>
operator|,
name|ArrayType
operator|*
operator|>
name|ArrayTypes
expr_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
operator|,
name|VectorType
operator|*
operator|>
name|VectorTypes
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|PointerType
operator|*
operator|>
name|PointerTypes
expr_stmt|;
comment|// Pointers in AddrSpace = 0
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
operator|,
name|PointerType
operator|*
operator|>
name|ASPointerTypes
expr_stmt|;
comment|/// ValueHandles - This map keeps track of all of the value handles that are
comment|/// watching a Value*.  The Value::HasValueHandle bit is used to know
comment|/// whether or not a value has an entry in this map.
typedef|typedef
name|DenseMap
operator|<
name|Value
operator|*
operator|,
name|ValueHandleBase
operator|*
operator|>
name|ValueHandlesTy
expr_stmt|;
name|ValueHandlesTy
name|ValueHandles
decl_stmt|;
comment|/// CustomMDKindNames - Map to hold the metadata string to ID mapping.
name|StringMap
operator|<
name|unsigned
operator|>
name|CustomMDKindNames
expr_stmt|;
comment|/// Collection of per-instruction metadata used in this context.
name|DenseMap
operator|<
specifier|const
name|Instruction
operator|*
operator|,
name|MDAttachmentMap
operator|>
name|InstructionMetadata
expr_stmt|;
comment|/// Collection of per-function metadata used in this context.
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
operator|,
name|MDAttachmentMap
operator|>
name|FunctionMetadata
expr_stmt|;
comment|/// DiscriminatorTable - This table maps file:line locations to an
comment|/// integer representing the next DWARF path discriminator to assign to
comment|/// instructions in different blocks at the same location.
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|char
operator|*
operator|,
name|unsigned
operator|>
operator|,
name|unsigned
operator|>
name|DiscriminatorTable
expr_stmt|;
comment|/// \brief Mapping from a function to its prefix data, which is stored as the
comment|/// operand of an unparented ReturnInst so that the prefix data has a Use.
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
operator|,
name|ReturnInst
operator|*
operator|>
name|PrefixDataMapTy
expr_stmt|;
name|PrefixDataMapTy
name|PrefixDataMap
decl_stmt|;
comment|/// \brief Mapping from a function to its prologue data, which is stored as
comment|/// the operand of an unparented ReturnInst so that the prologue data has a
comment|/// Use.
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
operator|,
name|ReturnInst
operator|*
operator|>
name|PrologueDataMapTy
expr_stmt|;
name|PrologueDataMapTy
name|PrologueDataMap
decl_stmt|;
name|int
name|getOrAddScopeRecordIdxEntry
parameter_list|(
name|MDNode
modifier|*
name|N
parameter_list|,
name|int
name|ExistingIdx
parameter_list|)
function_decl|;
name|int
name|getOrAddScopeInlinedAtIdxEntry
parameter_list|(
name|MDNode
modifier|*
name|Scope
parameter_list|,
name|MDNode
modifier|*
name|IA
parameter_list|,
name|int
name|ExistingIdx
parameter_list|)
function_decl|;
name|LLVMContextImpl
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|)
expr_stmt|;
operator|~
name|LLVMContextImpl
argument_list|()
expr_stmt|;
comment|/// Destroy the ConstantArrays if they are not used.
name|void
name|dropTriviallyDeadConstantArrays
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

