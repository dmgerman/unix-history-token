begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LLVMContextImpl.h - The LLVMContextImpl opaque class ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file declares LLVMContextImpl, the opaque implementation
end_comment

begin_comment
comment|//  of LLVMContext.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LLVMCONTEXT_IMPL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LLVMCONTEXT_IMPL_H
end_define

begin_include
include|#
directive|include
file|"AttributeImpl.h"
end_include

begin_include
include|#
directive|include
file|"ConstantsContext.h"
end_include

begin_include
include|#
directive|include
file|"LeaksContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APFloat.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Hashing.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ValueHandle.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ConstantInt
decl_stmt|;
name|class
name|ConstantFP
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
struct|struct
name|DenseMapAPIntKeyInfo
block|{
struct|struct
name|KeyTy
block|{
name|APInt
name|val
decl_stmt|;
name|Type
modifier|*
name|type
decl_stmt|;
name|KeyTy
argument_list|(
specifier|const
name|APInt
operator|&
name|V
argument_list|,
name|Type
operator|*
name|Ty
argument_list|)
operator|:
name|val
argument_list|(
name|V
argument_list|)
operator|,
name|type
argument_list|(
argument|Ty
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
return|return
name|type
operator|==
name|that
operator|.
name|type
operator|&&
name|this
operator|->
name|val
operator|==
name|that
operator|.
name|val
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
name|friend
name|hash_code
name|hash_value
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|Key
operator|.
name|type
argument_list|,
name|Key
operator|.
name|val
argument_list|)
return|;
block|}
block|}
struct|;
specifier|static
specifier|inline
name|KeyTy
name|getEmptyKey
parameter_list|()
block|{
return|return
name|KeyTy
argument_list|(
name|APInt
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|KeyTy
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|KeyTy
argument_list|(
name|APInt
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|hash_value
argument_list|(
name|Key
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|KeyTy
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
block|}
struct|;
struct|struct
name|DenseMapAPFloatKeyInfo
block|{
struct|struct
name|KeyTy
block|{
name|APFloat
name|val
decl_stmt|;
name|KeyTy
argument_list|(
specifier|const
name|APFloat
operator|&
name|V
argument_list|)
operator|:
name|val
argument_list|(
argument|V
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
return|return
name|this
operator|->
name|val
operator|.
name|bitwiseIsEqual
argument_list|(
name|that
operator|.
name|val
argument_list|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
name|friend
name|hash_code
name|hash_value
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|Key
operator|.
name|val
argument_list|)
return|;
block|}
block|}
struct|;
specifier|static
specifier|inline
name|KeyTy
name|getEmptyKey
parameter_list|()
block|{
return|return
name|KeyTy
argument_list|(
name|APFloat
argument_list|(
name|APFloat
operator|::
name|Bogus
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|KeyTy
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|KeyTy
argument_list|(
name|APFloat
argument_list|(
name|APFloat
operator|::
name|Bogus
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|hash_value
argument_list|(
name|Key
argument_list|)
operator|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|KeyTy
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
block|}
struct|;
struct|struct
name|AnonStructTypeKeyInfo
block|{
struct|struct
name|KeyTy
block|{
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|ETypes
expr_stmt|;
name|bool
name|isPacked
decl_stmt|;
name|KeyTy
argument_list|(
argument|const ArrayRef<Type*>& E
argument_list|,
argument|bool P
argument_list|)
block|:
name|ETypes
argument_list|(
name|E
argument_list|)
operator|,
name|isPacked
argument_list|(
argument|P
argument_list|)
block|{}
name|KeyTy
argument_list|(
specifier|const
name|StructType
operator|*
name|ST
argument_list|)
operator|:
name|ETypes
argument_list|(
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
operator|(
name|ST
operator|->
name|element_begin
argument_list|()
operator|,
name|ST
operator|->
name|element_end
argument_list|()
operator|)
argument_list|)
operator|,
name|isPacked
argument_list|(
argument|ST->isPacked()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|isPacked
operator|!=
name|that
operator|.
name|isPacked
condition|)
return|return
name|false
return|;
if|if
condition|(
name|ETypes
operator|!=
name|that
operator|.
name|ETypes
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|KeyTy
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
block|}
struct|;
specifier|static
specifier|inline
name|StructType
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|StructType
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|StructType
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|StructType
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|hash_combine_range
argument_list|(
name|Key
operator|.
name|ETypes
operator|.
name|begin
argument_list|()
argument_list|,
name|Key
operator|.
name|ETypes
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|Key
operator|.
name|isPacked
argument_list|)
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|StructType
modifier|*
name|ST
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|KeyTy
argument_list|(
name|ST
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|LHS
operator|==
name|KeyTy
argument_list|(
name|RHS
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|StructType
modifier|*
name|LHS
parameter_list|,
specifier|const
name|StructType
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|FunctionTypeKeyInfo
block|{
struct|struct
name|KeyTy
block|{
specifier|const
name|Type
modifier|*
name|ReturnType
decl_stmt|;
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|Params
expr_stmt|;
name|bool
name|isVarArg
decl_stmt|;
name|KeyTy
argument_list|(
argument|const Type* R
argument_list|,
argument|const ArrayRef<Type*>& P
argument_list|,
argument|bool V
argument_list|)
block|:
name|ReturnType
argument_list|(
name|R
argument_list|)
operator|,
name|Params
argument_list|(
name|P
argument_list|)
operator|,
name|isVarArg
argument_list|(
argument|V
argument_list|)
block|{}
name|KeyTy
argument_list|(
specifier|const
name|FunctionType
operator|*
name|FT
argument_list|)
operator|:
name|ReturnType
argument_list|(
name|FT
operator|->
name|getReturnType
argument_list|()
argument_list|)
operator|,
name|Params
argument_list|(
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
operator|(
name|FT
operator|->
name|param_begin
argument_list|()
operator|,
name|FT
operator|->
name|param_end
argument_list|()
operator|)
argument_list|)
operator|,
name|isVarArg
argument_list|(
argument|FT->isVarArg()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|KeyTy
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|ReturnType
operator|!=
name|that
operator|.
name|ReturnType
condition|)
return|return
name|false
return|;
if|if
condition|(
name|isVarArg
operator|!=
name|that
operator|.
name|isVarArg
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Params
operator|!=
name|that
operator|.
name|Params
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|KeyTy
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
name|this
operator|->
name|operator
operator|==
operator|(
name|that
operator|)
return|;
block|}
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|FunctionType
modifier|*
name|getEmptyKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|FunctionType
operator|*
operator|>
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|FunctionType
modifier|*
name|getTombstoneKey
parameter_list|()
block|{
return|return
name|DenseMapInfo
operator|<
name|FunctionType
operator|*
operator|>
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|Key
operator|.
name|ReturnType
argument_list|,
name|hash_combine_range
argument_list|(
name|Key
operator|.
name|Params
operator|.
name|begin
argument_list|()
argument_list|,
name|Key
operator|.
name|Params
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|Key
operator|.
name|isVarArg
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|FunctionType
modifier|*
name|FT
parameter_list|)
block|{
return|return
name|getHashValue
argument_list|(
name|KeyTy
argument_list|(
name|FT
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|KeyTy
modifier|&
name|LHS
parameter_list|,
specifier|const
name|FunctionType
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|LHS
operator|==
name|KeyTy
argument_list|(
name|RHS
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|FunctionType
modifier|*
name|LHS
parameter_list|,
specifier|const
name|FunctionType
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
end_function

begin_comment
unit|};
comment|// Provide a FoldingSetTrait::Equals specialization for MDNode that can use a
end_comment

begin_comment
comment|// shortcut to avoid comparing all operands.
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|FoldingSetTrait
operator|<
name|MDNode
operator|>
operator|:
name|DefaultFoldingSetTrait
operator|<
name|MDNode
operator|>
block|{
specifier|static
name|bool
name|Equals
argument_list|(
argument|const MDNode&X
argument_list|,
argument|const FoldingSetNodeID&ID
argument_list|,
argument|unsigned IDHash
argument_list|,
argument|FoldingSetNodeID&TempID
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|X
operator|.
name|isNotUniqued
argument_list|()
operator|&&
literal|"Non-uniqued MDNode in FoldingSet?"
argument_list|)
block|;
comment|// First, check if the cached hashes match.  If they don't we can skip the
comment|// expensive operand walk.
if|if
condition|(
name|X
operator|.
name|Hash
operator|!=
name|IDHash
condition|)
return|return
name|false
return|;
comment|// If they match we have to compare the operands.
name|X
operator|.
name|Profile
argument_list|(
name|TempID
argument_list|)
block|;
return|return
name|TempID
operator|==
name|ID
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|unsigned
name|ComputeHash
parameter_list|(
specifier|const
name|MDNode
modifier|&
name|X
parameter_list|,
name|FoldingSetNodeID
modifier|&
parameter_list|)
block|{
return|return
name|X
operator|.
name|Hash
return|;
comment|// Return cached hash.
block|}
end_function

begin_comment
unit|};
comment|/// DebugRecVH - This is a CallbackVH used to keep the Scope -> index maps
end_comment

begin_comment
comment|/// up to date as MDNodes mutate.  This class is implemented in DebugLoc.cpp.
end_comment

begin_decl_stmt
name|class
name|DebugRecVH
range|:
name|public
name|CallbackVH
block|{
comment|/// Ctx - This is the LLVM Context being referenced.
name|LLVMContextImpl
operator|*
name|Ctx
block|;
comment|/// Idx - The index into either ScopeRecordIdx or ScopeInlinedAtRecords that
comment|/// this reference lives in.  If this is zero, then it represents a
comment|/// non-canonical entry that has no DenseMap value.  This can happen due to
comment|/// RAUW.
name|int
name|Idx
block|;
name|public
operator|:
name|DebugRecVH
argument_list|(
argument|MDNode *n
argument_list|,
argument|LLVMContextImpl *ctx
argument_list|,
argument|int idx
argument_list|)
operator|:
name|CallbackVH
argument_list|(
name|n
argument_list|)
block|,
name|Ctx
argument_list|(
name|ctx
argument_list|)
block|,
name|Idx
argument_list|(
argument|idx
argument_list|)
block|{}
name|MDNode
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|cast_or_null
operator|<
name|MDNode
operator|>
operator|(
name|getValPtr
argument_list|()
operator|)
return|;
block|}
name|virtual
name|void
name|deleted
argument_list|()
block|;
name|virtual
name|void
name|allUsesReplacedWith
argument_list|(
name|Value
operator|*
name|VNew
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|LLVMContextImpl
block|{
name|public
label|:
comment|/// OwnedModules - The set of modules instantiated in this context, and which
comment|/// will be automatically deleted if this context is deleted.
name|SmallPtrSet
operator|<
name|Module
operator|*
operator|,
literal|4
operator|>
name|OwnedModules
expr_stmt|;
name|LLVMContext
operator|::
name|InlineAsmDiagHandlerTy
name|InlineAsmDiagHandler
expr_stmt|;
name|void
modifier|*
name|InlineAsmDiagContext
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|DenseMapAPIntKeyInfo
operator|::
name|KeyTy
operator|,
name|ConstantInt
operator|*
operator|,
name|DenseMapAPIntKeyInfo
operator|>
name|IntMapTy
expr_stmt|;
name|IntMapTy
name|IntConstants
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|DenseMapAPFloatKeyInfo
operator|::
name|KeyTy
operator|,
name|ConstantFP
operator|*
operator|,
name|DenseMapAPFloatKeyInfo
operator|>
name|FPMapTy
expr_stmt|;
name|FPMapTy
name|FPConstants
decl_stmt|;
name|FoldingSet
operator|<
name|AttributeImpl
operator|>
name|AttrsSet
expr_stmt|;
name|FoldingSet
operator|<
name|AttributeSetImpl
operator|>
name|AttrsLists
expr_stmt|;
name|FoldingSet
operator|<
name|AttributeSetNode
operator|>
name|AttrsSetNodes
expr_stmt|;
name|StringMap
operator|<
name|Value
operator|*
operator|>
name|MDStringCache
expr_stmt|;
name|FoldingSet
operator|<
name|MDNode
operator|>
name|MDNodeSet
expr_stmt|;
comment|// MDNodes may be uniqued or not uniqued.  When they're not uniqued, they
comment|// aren't in the MDNodeSet, but they're still shared between objects, so no
comment|// one object can destroy them.  This set allows us to at least destroy them
comment|// on Context destruction.
name|SmallPtrSet
operator|<
name|MDNode
operator|*
operator|,
literal|1
operator|>
name|NonUniquedMDNodes
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|ConstantAggregateZero
operator|*
operator|>
name|CAZConstants
expr_stmt|;
typedef|typedef
name|ConstantAggrUniqueMap
operator|<
name|ArrayType
operator|,
name|ConstantArray
operator|>
name|ArrayConstantsTy
expr_stmt|;
name|ArrayConstantsTy
name|ArrayConstants
decl_stmt|;
typedef|typedef
name|ConstantAggrUniqueMap
operator|<
name|StructType
operator|,
name|ConstantStruct
operator|>
name|StructConstantsTy
expr_stmt|;
name|StructConstantsTy
name|StructConstants
decl_stmt|;
typedef|typedef
name|ConstantAggrUniqueMap
operator|<
name|VectorType
operator|,
name|ConstantVector
operator|>
name|VectorConstantsTy
expr_stmt|;
name|VectorConstantsTy
name|VectorConstants
decl_stmt|;
name|DenseMap
operator|<
name|PointerType
operator|*
operator|,
name|ConstantPointerNull
operator|*
operator|>
name|CPNConstants
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|UndefValue
operator|*
operator|>
name|UVConstants
expr_stmt|;
name|StringMap
operator|<
name|ConstantDataSequential
operator|*
operator|>
name|CDSConstants
expr_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Function
operator|*
operator|,
name|BasicBlock
operator|*
operator|>
operator|,
name|BlockAddress
operator|*
operator|>
name|BlockAddresses
expr_stmt|;
name|ConstantUniqueMap
operator|<
name|ExprMapKeyType
operator|,
specifier|const
name|ExprMapKeyType
operator|&
operator|,
name|Type
operator|,
name|ConstantExpr
operator|>
name|ExprConstants
expr_stmt|;
name|ConstantUniqueMap
operator|<
name|InlineAsmKeyType
operator|,
specifier|const
name|InlineAsmKeyType
operator|&
operator|,
name|PointerType
operator|,
name|InlineAsm
operator|>
name|InlineAsms
expr_stmt|;
name|ConstantInt
modifier|*
name|TheTrueVal
decl_stmt|;
name|ConstantInt
modifier|*
name|TheFalseVal
decl_stmt|;
name|LeakDetectorImpl
operator|<
name|Value
operator|>
name|LLVMObjects
expr_stmt|;
comment|// Basic type instances.
name|Type
name|VoidTy
decl_stmt|,
name|LabelTy
decl_stmt|,
name|HalfTy
decl_stmt|,
name|FloatTy
decl_stmt|,
name|DoubleTy
decl_stmt|,
name|MetadataTy
decl_stmt|;
name|Type
name|X86_FP80Ty
decl_stmt|,
name|FP128Ty
decl_stmt|,
name|PPC_FP128Ty
decl_stmt|,
name|X86_MMXTy
decl_stmt|;
name|IntegerType
name|Int1Ty
decl_stmt|,
name|Int8Ty
decl_stmt|,
name|Int16Ty
decl_stmt|,
name|Int32Ty
decl_stmt|,
name|Int64Ty
decl_stmt|;
comment|/// TypeAllocator - All dynamically allocated types are allocated from this.
comment|/// They live forever until the context is torn down.
name|BumpPtrAllocator
name|TypeAllocator
decl_stmt|;
name|DenseMap
operator|<
name|unsigned
operator|,
name|IntegerType
operator|*
operator|>
name|IntegerTypes
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|FunctionType
operator|*
operator|,
name|bool
operator|,
name|FunctionTypeKeyInfo
operator|>
name|FunctionTypeMap
expr_stmt|;
name|FunctionTypeMap
name|FunctionTypes
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|StructType
operator|*
operator|,
name|bool
operator|,
name|AnonStructTypeKeyInfo
operator|>
name|StructTypeMap
expr_stmt|;
name|StructTypeMap
name|AnonStructTypes
decl_stmt|;
name|StringMap
operator|<
name|StructType
operator|*
operator|>
name|NamedStructTypes
expr_stmt|;
name|unsigned
name|NamedStructTypesUniqueID
decl_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|uint64_t
operator|>
operator|,
name|ArrayType
operator|*
operator|>
name|ArrayTypes
expr_stmt|;
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
operator|,
name|VectorType
operator|*
operator|>
name|VectorTypes
expr_stmt|;
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|PointerType
operator|*
operator|>
name|PointerTypes
expr_stmt|;
comment|// Pointers in AddrSpace = 0
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
operator|,
name|PointerType
operator|*
operator|>
name|ASPointerTypes
expr_stmt|;
comment|/// ValueHandles - This map keeps track of all of the value handles that are
comment|/// watching a Value*.  The Value::HasValueHandle bit is used to know
comment|/// whether or not a value has an entry in this map.
typedef|typedef
name|DenseMap
operator|<
name|Value
operator|*
operator|,
name|ValueHandleBase
operator|*
operator|>
name|ValueHandlesTy
expr_stmt|;
name|ValueHandlesTy
name|ValueHandles
decl_stmt|;
comment|/// CustomMDKindNames - Map to hold the metadata string to ID mapping.
name|StringMap
operator|<
name|unsigned
operator|>
name|CustomMDKindNames
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|TrackingVH
operator|<
name|MDNode
operator|>
expr|>
name|MDPairTy
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|MDPairTy
operator|,
literal|2
operator|>
name|MDMapTy
expr_stmt|;
comment|/// MetadataStore - Collection of per-instruction metadata used in this
comment|/// context.
name|DenseMap
operator|<
specifier|const
name|Instruction
operator|*
operator|,
name|MDMapTy
operator|>
name|MetadataStore
expr_stmt|;
comment|/// ScopeRecordIdx - This is the index in ScopeRecords for an MDNode scope
comment|/// entry with no "inlined at" element.
name|DenseMap
operator|<
name|MDNode
operator|*
operator|,
name|int
operator|>
name|ScopeRecordIdx
expr_stmt|;
comment|/// ScopeRecords - These are the actual mdnodes (in a value handle) for an
comment|/// index.  The ValueHandle ensures that ScopeRecordIdx stays up to date if
comment|/// the MDNode is RAUW'd.
name|std
operator|::
name|vector
operator|<
name|DebugRecVH
operator|>
name|ScopeRecords
expr_stmt|;
comment|/// ScopeInlinedAtIdx - This is the index in ScopeInlinedAtRecords for an
comment|/// scope/inlined-at pair.
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|MDNode
operator|*
operator|,
name|MDNode
operator|*
operator|>
operator|,
name|int
operator|>
name|ScopeInlinedAtIdx
expr_stmt|;
comment|/// ScopeInlinedAtRecords - These are the actual mdnodes (in value handles)
comment|/// for an index.  The ValueHandle ensures that ScopeINlinedAtIdx stays up
comment|/// to date.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|DebugRecVH
operator|,
name|DebugRecVH
operator|>
expr|>
name|ScopeInlinedAtRecords
expr_stmt|;
comment|/// IntrinsicIDCache - Cache of intrinsic name (string) to numeric ID mappings
comment|/// requested in this context
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
operator|,
name|unsigned
operator|>
name|IntrinsicIDCacheTy
expr_stmt|;
name|IntrinsicIDCacheTy
name|IntrinsicIDCache
decl_stmt|;
comment|/// \brief Mapping from a function to its prefix data, which is stored as the
comment|/// operand of an unparented ReturnInst so that the prefix data has a Use.
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Function
operator|*
operator|,
name|ReturnInst
operator|*
operator|>
name|PrefixDataMapTy
expr_stmt|;
name|PrefixDataMapTy
name|PrefixDataMap
decl_stmt|;
name|int
name|getOrAddScopeRecordIdxEntry
parameter_list|(
name|MDNode
modifier|*
name|N
parameter_list|,
name|int
name|ExistingIdx
parameter_list|)
function_decl|;
name|int
name|getOrAddScopeInlinedAtIdxEntry
parameter_list|(
name|MDNode
modifier|*
name|Scope
parameter_list|,
name|MDNode
modifier|*
name|IA
parameter_list|,
name|int
name|ExistingIdx
parameter_list|)
function_decl|;
name|LLVMContextImpl
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|)
expr_stmt|;
operator|~
name|LLVMContextImpl
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

