begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2009 Sylvestre Gallon. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBUSB10_H__
end_ifndef

begin_define
define|#
directive|define
name|__LIBUSB10_H__
end_define

begin_comment
comment|/*  * The two following macros were taken from the original LibUSB v1.0  * for sake of compatibility:  */
end_comment

begin_define
define|#
directive|define
name|USB_LIST_INIT
parameter_list|(
name|entry
parameter_list|)
define|\
value|(entry)->prev = (entry)->next = entry;
end_define

begin_define
define|#
directive|define
name|USB_LIST_EMPTY
parameter_list|(
name|entry
parameter_list|)
define|\
value|((entry)->next = (entry))
end_define

begin_define
define|#
directive|define
name|LIST_ADD
parameter_list|(
name|entry
parameter_list|,
name|head
parameter_list|)
define|\
value|(entry)->next = (head)->next; \ 	(entry)->prev = (head); \ 	(head)->next->prev = (entry); \ 	(head)->next = (entry);
end_define

begin_define
define|#
directive|define
name|LIST_ADD_TAIL
parameter_list|(
name|entry
parameter_list|,
name|head
parameter_list|)
define|\
value|(entry)->next = (head); \ 	(entry)->prev = (head)->prev; \ 	(head)->prev->next = (entry); \ 	(head)->prev = (entry);
end_define

begin_define
define|#
directive|define
name|LIST_DEL
parameter_list|(
name|entry
parameter_list|)
define|\
value|(entry)->next->prev = (entry)->prev; \ 	(entry)->prev->next = (entry)->next;
end_define

begin_define
define|#
directive|define
name|LIST_ENT
parameter_list|(
name|ptr
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((type *)((char *)(ptr) - (unsigned long) (&((type*)0L)->member)))
end_define

begin_define
define|#
directive|define
name|LIST_FOREACH_ENTRY
parameter_list|(
name|pos
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = LIST_ENT((head)->next, typeof(*pos), member) ; \&pos->member != head ; \ 	    pos = LIST_ENT(pos->member.next, typeof(*pos), member))
end_define

begin_define
define|#
directive|define
name|LIST_FOREACH_ENTRY_SAFE
parameter_list|(
name|pos
parameter_list|,
name|n
parameter_list|,
name|head
parameter_list|,
name|member
parameter_list|)
define|\
value|for (pos = LIST_ENT((head)->next, typeof(*pos), member), \ 	    n = LIST_ENT(pos->member.next, typeof(*pos), member); \&pos->member != (head); \ 	    pos = n, n = LIST_ENT(n->member.next, typeof(*n), member))
end_define

begin_comment
comment|/* fetch libusb20_transfer from libusb20_device */
end_comment

begin_define
define|#
directive|define
name|GET_XFER
parameter_list|(
name|xfer
parameter_list|,
name|endpoint
parameter_list|,
name|pdev
parameter_list|)
define|\
value|xfer = libusb20_tr_get_pointer(pdev, \ 	    (2 *endpoint)|(endpoint/0x80)); \ 	if (xfer == NULL) \ 		return (LIBUSB_ERROR_OTHER);
end_define

begin_function_decl
specifier|static
name|int
name|get_next_timeout
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|,
name|struct
name|timeval
modifier|*
name|out
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|handle_timeouts
parameter_list|(
name|struct
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|int
name|handle_events
parameter_list|(
name|struct
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|libusb_context
modifier|*
name|usbi_default_context
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|pthread_mutex_t
name|libusb20_lock
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* if ctx is NULL use default context*/
end_comment

begin_define
define|#
directive|define
name|GET_CONTEXT
parameter_list|(
name|ctx
parameter_list|)
define|\
value|if (ctx == NULL) ctx = usbi_default_context;
end_define

begin_define
define|#
directive|define
name|MAX
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)>(b))?(a):(b))
end_define

begin_define
define|#
directive|define
name|USB_TIMED_OUT
value|(1<<0)
end_define

begin_function
specifier|static
specifier|inline
name|void
name|dprintf
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|int
name|debug
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|->
name|debug
operator|!=
name|debug
condition|)
return|return ;
switch|switch
condition|(
name|ctx
operator|->
name|debug
condition|)
block|{
case|case
name|LIBUSB_DEBUG_NO
case|:
break|break ;
case|case
name|LIBUSB_DEBUG_FUNCTION
case|:
name|printf
argument_list|(
literal|"LIBUSB FUNCTION : %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
break|break ;
case|case
name|LIBUSB_DEBUG_TRANSFER
case|:
name|printf
argument_list|(
literal|"LIBUSB TRANSFER : %s\n"
argument_list|,
name|str
argument_list|)
expr_stmt|;
break|break ;
default|default:
name|printf
argument_list|(
literal|"LIBUSB UNKNOW DEBUG\n"
argument_list|)
expr_stmt|;
break|break ;
block|}
return|return ;
block|}
end_function

begin_struct
struct|struct
name|usb_pollfd
block|{
name|struct
name|libusb_pollfd
name|pollfd
decl_stmt|;
name|struct
name|list_head
name|list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usb_transfer
block|{
name|int
name|num_iso_packets
decl_stmt|;
name|struct
name|list_head
name|list
decl_stmt|;
name|struct
name|timeval
name|timeout
decl_stmt|;
name|int
name|transferred
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|usb_add_pollfd
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|int
name|fd
parameter_list|,
name|short
name|events
parameter_list|)
block|{
name|struct
name|usb_pollfd
modifier|*
name|pollfd
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
name|NULL
condition|)
return|return
operator|(
name|LIBUSB_ERROR_INVALID_PARAM
operator|)
return|;
name|pollfd
operator|=
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
operator|*
name|pollfd
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pollfd
operator|==
name|NULL
condition|)
return|return
operator|(
name|LIBUSB_ERROR_NO_MEM
operator|)
return|;
name|pollfd
operator|->
name|pollfd
operator|.
name|fd
operator|=
name|fd
expr_stmt|;
name|pollfd
operator|->
name|pollfd
operator|.
name|events
operator|=
name|events
expr_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|ctx
operator|->
name|pollfds_lock
argument_list|)
expr_stmt|;
name|LIST_ADD_TAIL
argument_list|(
operator|&
name|pollfd
operator|->
name|list
argument_list|,
operator|&
name|ctx
operator|->
name|pollfds
argument_list|)
expr_stmt|;
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|pollfds_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|fd_added_cb
condition|)
name|ctx
operator|->
name|fd_added_cb
argument_list|(
name|fd
argument_list|,
name|events
argument_list|,
name|ctx
operator|->
name|fd_cb_user_data
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|usb_remove_pollfd
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|int
name|fd
parameter_list|)
block|{
name|struct
name|usb_pollfd
modifier|*
name|pollfd
decl_stmt|;
name|int
name|found
decl_stmt|;
name|found
operator|=
literal|0
expr_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|ctx
operator|->
name|pollfds_lock
argument_list|)
expr_stmt|;
name|LIST_FOREACH_ENTRY
argument_list|(
argument|pollfd
argument_list|,
argument|&ctx->pollfds
argument_list|,
argument|list
argument_list|)
block|{
if|if
condition|(
name|pollfd
operator|->
name|pollfd
operator|.
name|fd
operator|==
name|fd
condition|)
block|{
name|found
operator|=
literal|1
expr_stmt|;
break|break ;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|0
condition|)
block|{
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|pollfds_lock
argument_list|)
expr_stmt|;
return|return ;
block|}
name|LIST_DEL
argument_list|(
operator|&
name|pollfd
operator|->
name|list
argument_list|)
expr_stmt|;
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|pollfds_lock
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|pollfd
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctx
operator|->
name|fd_removed_cb
condition|)
name|ctx
operator|->
name|fd_removed_cb
argument_list|(
name|fd
argument_list|,
name|ctx
operator|->
name|fd_cb_user_data
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|usb_handle_transfer_completion
parameter_list|(
name|struct
name|usb_transfer
modifier|*
name|uxfer
parameter_list|,
name|enum
name|libusb_transfer_status
name|status
parameter_list|)
block|{
name|libusb_transfer
modifier|*
name|xfer
decl_stmt|;
name|libusb_context
modifier|*
name|ctx
decl_stmt|;
name|int
name|len
decl_stmt|;
name|xfer
operator|=
operator|(
expr|struct
name|libusb_transfer
operator|*
operator|)
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|uxfer
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|usb_transfer
argument_list|)
operator|)
expr_stmt|;
name|ctx
operator|=
name|xfer
operator|->
name|dev_handle
operator|->
name|dev
operator|->
name|ctx
expr_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|ctx
operator|->
name|flying_transfers_lock
argument_list|)
expr_stmt|;
name|LIST_DEL
argument_list|(
operator|&
name|uxfer
operator|->
name|list
argument_list|)
expr_stmt|;
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|flying_transfers_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|LIBUSB_TRANSFER_COMPLETED
operator|&&
name|xfer
operator|->
name|flags
operator|&
name|LIBUSB_TRANSFER_SHORT_NOT_OK
condition|)
block|{
name|len
operator|=
name|xfer
operator|->
name|length
expr_stmt|;
if|if
condition|(
name|xfer
operator|->
name|type
operator|==
name|LIBUSB_TRANSFER_TYPE_CONTROL
condition|)
name|len
operator|-=
sizeof|sizeof
argument_list|(
name|libusb_control_setup
argument_list|)
expr_stmt|;
if|if
condition|(
name|len
operator|!=
name|uxfer
operator|->
name|transferred
condition|)
block|{
name|status
operator|=
name|LIBUSB_TRANSFER_ERROR
expr_stmt|;
block|}
block|}
name|xfer
operator|->
name|status
operator|=
name|status
expr_stmt|;
name|xfer
operator|->
name|actual_length
operator|=
name|uxfer
operator|->
name|transferred
expr_stmt|;
if|if
condition|(
name|xfer
operator|->
name|callback
condition|)
name|xfer
operator|->
name|callback
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
if|if
condition|(
name|xfer
operator|->
name|flags
operator|&
name|LIBUSB_TRANSFER_FREE_TRANSFER
condition|)
name|libusb_free_transfer
argument_list|(
name|xfer
argument_list|)
expr_stmt|;
name|pthread_mutex_lock
argument_list|(
operator|&
name|ctx
operator|->
name|event_waiters_lock
argument_list|)
expr_stmt|;
name|pthread_cond_broadcast
argument_list|(
operator|&
name|ctx
operator|->
name|event_waiters_cond
argument_list|)
expr_stmt|;
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|event_waiters_lock
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|usb_handle_disconnect
parameter_list|(
name|struct
name|libusb_device_handle
modifier|*
name|devh
parameter_list|)
block|{
name|struct
name|libusb_context
modifier|*
name|ctx
decl_stmt|;
name|struct
name|libusb_transfer
modifier|*
name|xfer
decl_stmt|;
name|struct
name|usb_transfer
modifier|*
name|cur
decl_stmt|;
name|struct
name|usb_transfer
modifier|*
name|to_cancel
decl_stmt|;
name|ctx
operator|=
name|devh
operator|->
name|dev
operator|->
name|ctx
expr_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|pthread_mutex_lock
argument_list|(
operator|&
name|ctx
operator|->
name|flying_transfers_lock
argument_list|)
expr_stmt|;
name|to_cancel
operator|=
name|NULL
expr_stmt|;
name|LIST_FOREACH_ENTRY
argument_list|(
argument|cur
argument_list|,
argument|&ctx->flying_transfers
argument_list|,
argument|list
argument_list|)
block|{
name|xfer
operator|=
operator|(
expr|struct
name|libusb_transfer
operator|*
operator|)
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|cur
operator|+
sizeof|sizeof
argument_list|(
expr|struct
name|usb_transfer
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|xfer
operator|->
name|dev_handle
operator|==
name|devh
condition|)
block|{
name|to_cancel
operator|=
name|cur
expr_stmt|;
break|break ;
block|}
block|}
name|pthread_mutex_unlock
argument_list|(
operator|&
name|ctx
operator|->
name|flying_transfers_lock
argument_list|)
expr_stmt|;
if|if
condition|(
name|to_cancel
operator|==
name|NULL
condition|)
break|break ;
name|usb_handle_transfer_completion
argument_list|(
name|to_cancel
argument_list|,
name|LIBUSB_TRANSFER_NO_DEVICE
argument_list|)
expr_stmt|;
block|}
return|return ;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*__LIBUSB10_H__*/
end_comment

end_unit

