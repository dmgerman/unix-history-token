begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2009 Sylvestre Gallon. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBUSB_H__
end_ifndef

begin_define
define|#
directive|define
name|__LIBUSB_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|LIBUSB_GLOBAL_INCLUDE_FILE
end_ifndef

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|LIBUSB_CALL
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
literal|0
block|}
comment|/* indent fix */
endif|#
directive|endif
comment|/* libusb enums */
enum|enum
name|libusb_class_code
block|{
name|LIBUSB_CLASS_PER_INTERFACE
init|=
literal|0
block|,
name|LIBUSB_CLASS_AUDIO
init|=
literal|1
block|,
name|LIBUSB_CLASS_COMM
init|=
literal|2
block|,
name|LIBUSB_CLASS_HID
init|=
literal|3
block|,
name|LIBUSB_CLASS_PTP
init|=
literal|6
block|,
name|LIBUSB_CLASS_IMAGE
init|=
literal|6
block|,
name|LIBUSB_CLASS_PRINTER
init|=
literal|7
block|,
name|LIBUSB_CLASS_MASS_STORAGE
init|=
literal|8
block|,
name|LIBUSB_CLASS_HUB
init|=
literal|9
block|,
name|LIBUSB_CLASS_DATA
init|=
literal|10
block|,
name|LIBUSB_CLASS_SMART_CARD
init|=
literal|11
block|,
name|LIBUSB_CLASS_CONTENT_SECURITY
init|=
literal|13
block|,
name|LIBUSB_CLASS_VIDEO
init|=
literal|14
block|,
name|LIBUSB_CLASS_PERSONAL_HEALTHCARE
init|=
literal|15
block|,
name|LIBUSB_CLASS_DIAGNOSTIC_DEVICE
init|=
literal|0xdc
block|,
name|LIBUSB_CLASS_WIRELESS
init|=
literal|0xe0
block|,
name|LIBUSB_CLASS_APPLICATION
init|=
literal|0xfe
block|,
name|LIBUSB_CLASS_VENDOR_SPEC
init|=
literal|0xff
block|, }
enum|;
enum|enum
name|libusb_descriptor_type
block|{
name|LIBUSB_DT_DEVICE
init|=
literal|0x01
block|,
name|LIBUSB_DT_CONFIG
init|=
literal|0x02
block|,
name|LIBUSB_DT_STRING
init|=
literal|0x03
block|,
name|LIBUSB_DT_INTERFACE
init|=
literal|0x04
block|,
name|LIBUSB_DT_ENDPOINT
init|=
literal|0x05
block|,
name|LIBUSB_DT_HID
init|=
literal|0x21
block|,
name|LIBUSB_DT_REPORT
init|=
literal|0x22
block|,
name|LIBUSB_DT_PHYSICAL
init|=
literal|0x23
block|,
name|LIBUSB_DT_HUB
init|=
literal|0x29
block|,
name|LIBUSB_DT_BOS
init|=
literal|0x0f
block|,
name|LIBUSB_DT_DEVICE_CAPABILITY
init|=
literal|0x10
block|,
name|LIBUSB_DT_SS_ENDPOINT_COMPANION
init|=
literal|0x30
block|, }
enum|;
enum|enum
name|libusb_device_capability_type
block|{
name|LIBUSB_WIRELESS_USB_DEVICE_CAPABILITY
init|=
literal|0x1
block|,
name|LIBUSB_USB_2_0_EXTENSION_DEVICE_CAPABILITY
init|=
literal|0x2
block|,
name|LIBUSB_SS_USB_DEVICE_CAPABILITY
init|=
literal|0x3
block|,
name|LIBUSB_CONTAINER_ID_DEVICE_CAPABILITY
init|=
literal|0x4
block|, }
enum|;
define|#
directive|define
name|LIBUSB_DT_DEVICE_SIZE
value|18
define|#
directive|define
name|LIBUSB_DT_CONFIG_SIZE
value|9
define|#
directive|define
name|LIBUSB_DT_INTERFACE_SIZE
value|9
define|#
directive|define
name|LIBUSB_DT_ENDPOINT_SIZE
value|7
define|#
directive|define
name|LIBUSB_DT_ENDPOINT_AUDIO_SIZE
value|9
define|#
directive|define
name|LIBUSB_DT_HUB_NONVAR_SIZE
value|7
define|#
directive|define
name|LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE
value|6
define|#
directive|define
name|LIBUSB_DT_BOS_SIZE
value|5
define|#
directive|define
name|LIBUSB_USB_2_0_EXTENSION_DEVICE_CAPABILITY_SIZE
value|7
define|#
directive|define
name|LIBUSB_SS_USB_DEVICE_CAPABILITY_SIZE
value|10
define|#
directive|define
name|LIBUSB_ENDPOINT_ADDRESS_MASK
value|0x0f
define|#
directive|define
name|LIBUSB_ENDPOINT_DIR_MASK
value|0x80
enum|enum
name|libusb_endpoint_direction
block|{
name|LIBUSB_ENDPOINT_IN
init|=
literal|0x80
block|,
name|LIBUSB_ENDPOINT_OUT
init|=
literal|0x00
block|, }
enum|;
define|#
directive|define
name|LIBUSB_TRANSFER_TYPE_MASK
value|0x03
enum|enum
name|libusb_transfer_type
block|{
name|LIBUSB_TRANSFER_TYPE_CONTROL
init|=
literal|0
block|,
name|LIBUSB_TRANSFER_TYPE_ISOCHRONOUS
init|=
literal|1
block|,
name|LIBUSB_TRANSFER_TYPE_BULK
init|=
literal|2
block|,
name|LIBUSB_TRANSFER_TYPE_INTERRUPT
init|=
literal|3
block|, }
enum|;
enum|enum
name|libusb_standard_request
block|{
name|LIBUSB_REQUEST_GET_STATUS
init|=
literal|0x00
block|,
name|LIBUSB_REQUEST_CLEAR_FEATURE
init|=
literal|0x01
block|,
name|LIBUSB_REQUEST_SET_FEATURE
init|=
literal|0x03
block|,
name|LIBUSB_REQUEST_SET_ADDRESS
init|=
literal|0x05
block|,
name|LIBUSB_REQUEST_GET_DESCRIPTOR
init|=
literal|0x06
block|,
name|LIBUSB_REQUEST_SET_DESCRIPTOR
init|=
literal|0x07
block|,
name|LIBUSB_REQUEST_GET_CONFIGURATION
init|=
literal|0x08
block|,
name|LIBUSB_REQUEST_SET_CONFIGURATION
init|=
literal|0x09
block|,
name|LIBUSB_REQUEST_GET_INTERFACE
init|=
literal|0x0A
block|,
name|LIBUSB_REQUEST_SET_INTERFACE
init|=
literal|0x0B
block|,
name|LIBUSB_REQUEST_SYNCH_FRAME
init|=
literal|0x0C
block|, }
enum|;
enum|enum
name|libusb_request_type
block|{
name|LIBUSB_REQUEST_TYPE_STANDARD
init|=
operator|(
literal|0x00
operator|<<
literal|5
operator|)
block|,
name|LIBUSB_REQUEST_TYPE_CLASS
init|=
operator|(
literal|0x01
operator|<<
literal|5
operator|)
block|,
name|LIBUSB_REQUEST_TYPE_VENDOR
init|=
operator|(
literal|0x02
operator|<<
literal|5
operator|)
block|,
name|LIBUSB_REQUEST_TYPE_RESERVED
init|=
operator|(
literal|0x03
operator|<<
literal|5
operator|)
block|, }
enum|;
enum|enum
name|libusb_request_recipient
block|{
name|LIBUSB_RECIPIENT_DEVICE
init|=
literal|0x00
block|,
name|LIBUSB_RECIPIENT_INTERFACE
init|=
literal|0x01
block|,
name|LIBUSB_RECIPIENT_ENDPOINT
init|=
literal|0x02
block|,
name|LIBUSB_RECIPIENT_OTHER
init|=
literal|0x03
block|, }
enum|;
define|#
directive|define
name|LIBUSB_ISO_SYNC_TYPE_MASK
value|0x0C
enum|enum
name|libusb_iso_sync_type
block|{
name|LIBUSB_ISO_SYNC_TYPE_NONE
init|=
literal|0
block|,
name|LIBUSB_ISO_SYNC_TYPE_ASYNC
init|=
literal|1
block|,
name|LIBUSB_ISO_SYNC_TYPE_ADAPTIVE
init|=
literal|2
block|,
name|LIBUSB_ISO_SYNC_TYPE_SYNC
init|=
literal|3
block|, }
enum|;
define|#
directive|define
name|LIBUSB_ISO_USAGE_TYPE_MASK
value|0x30
enum|enum
name|libusb_iso_usage_type
block|{
name|LIBUSB_ISO_USAGE_TYPE_DATA
init|=
literal|0
block|,
name|LIBUSB_ISO_USAGE_TYPE_FEEDBACK
init|=
literal|1
block|,
name|LIBUSB_ISO_USAGE_TYPE_IMPLICIT
init|=
literal|2
block|, }
enum|;
enum|enum
name|libusb_error
block|{
name|LIBUSB_SUCCESS
init|=
literal|0
block|,
name|LIBUSB_ERROR_IO
init|=
operator|-
literal|1
block|,
name|LIBUSB_ERROR_INVALID_PARAM
init|=
operator|-
literal|2
block|,
name|LIBUSB_ERROR_ACCESS
init|=
operator|-
literal|3
block|,
name|LIBUSB_ERROR_NO_DEVICE
init|=
operator|-
literal|4
block|,
name|LIBUSB_ERROR_NOT_FOUND
init|=
operator|-
literal|5
block|,
name|LIBUSB_ERROR_BUSY
init|=
operator|-
literal|6
block|,
name|LIBUSB_ERROR_TIMEOUT
init|=
operator|-
literal|7
block|,
name|LIBUSB_ERROR_OVERFLOW
init|=
operator|-
literal|8
block|,
name|LIBUSB_ERROR_PIPE
init|=
operator|-
literal|9
block|,
name|LIBUSB_ERROR_INTERRUPTED
init|=
operator|-
literal|10
block|,
name|LIBUSB_ERROR_NO_MEM
init|=
operator|-
literal|11
block|,
name|LIBUSB_ERROR_NOT_SUPPORTED
init|=
operator|-
literal|12
block|,
name|LIBUSB_ERROR_OTHER
init|=
operator|-
literal|99
block|, }
enum|;
enum|enum
name|libusb_speed
block|{
name|LIBUSB_SPEED_UNKNOWN
init|=
literal|0
block|,
name|LIBUSB_SPEED_LOW
init|=
literal|1
block|,
name|LIBUSB_SPEED_FULL
init|=
literal|2
block|,
name|LIBUSB_SPEED_HIGH
init|=
literal|3
block|,
name|LIBUSB_SPEED_SUPER
init|=
literal|4
block|, }
enum|;
enum|enum
name|libusb_transfer_status
block|{
name|LIBUSB_TRANSFER_COMPLETED
block|,
name|LIBUSB_TRANSFER_ERROR
block|,
name|LIBUSB_TRANSFER_TIMED_OUT
block|,
name|LIBUSB_TRANSFER_CANCELLED
block|,
name|LIBUSB_TRANSFER_STALL
block|,
name|LIBUSB_TRANSFER_NO_DEVICE
block|,
name|LIBUSB_TRANSFER_OVERFLOW
block|, }
enum|;
enum|enum
name|libusb_transfer_flags
block|{
name|LIBUSB_TRANSFER_SHORT_NOT_OK
init|=
literal|1
operator|<<
literal|0
block|,
name|LIBUSB_TRANSFER_FREE_BUFFER
init|=
literal|1
operator|<<
literal|1
block|,
name|LIBUSB_TRANSFER_FREE_TRANSFER
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
enum|enum
name|libusb_log_level
block|{
name|LIBUSB_LOG_LEVEL_NONE
init|=
literal|0
block|,
name|LIBUSB_LOG_LEVEL_ERROR
block|,
name|LIBUSB_LOG_LEVEL_WARNING
block|,
name|LIBUSB_LOG_LEVEL_INFO
block|,
name|LIBUSB_LOG_LEVEL_DEBUG
block|}
enum|;
comment|/* XXX */
comment|/* libusb_set_debug should take parameters from libusb_log_level  * above according to  *   http://libusb.sourceforge.net/api-1.0/group__lib.html  */
enum|enum
name|libusb_debug_level
block|{
name|LIBUSB_DEBUG_NO
init|=
literal|0
block|,
name|LIBUSB_DEBUG_FUNCTION
init|=
literal|1
block|,
name|LIBUSB_DEBUG_TRANSFER
init|=
literal|2
block|, }
enum|;
comment|/* libusb structures */
struct_decl|struct
name|libusb_context
struct_decl|;
struct_decl|struct
name|libusb_device
struct_decl|;
struct_decl|struct
name|libusb_transfer
struct_decl|;
struct_decl|struct
name|libusb_device_handle
struct_decl|;
struct|struct
name|libusb_pollfd
block|{
name|int
name|fd
decl_stmt|;
name|short
name|events
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|libusb_context
name|libusb_context
typedef|;
typedef|typedef
name|struct
name|libusb_device
name|libusb_device
typedef|;
typedef|typedef
name|struct
name|libusb_device_handle
name|libusb_device_handle
typedef|;
typedef|typedef
name|struct
name|libusb_pollfd
name|libusb_pollfd
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|libusb_pollfd_added_cb
function_decl|)
parameter_list|(
name|int
name|fd
parameter_list|,
name|short
name|events
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|libusb_pollfd_removed_cb
function_decl|)
parameter_list|(
name|int
name|fd
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|libusb_device_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|bcdUSB
decl_stmt|;
name|uint8_t
name|bDeviceClass
decl_stmt|;
name|uint8_t
name|bDeviceSubClass
decl_stmt|;
name|uint8_t
name|bDeviceProtocol
decl_stmt|;
name|uint8_t
name|bMaxPacketSize0
decl_stmt|;
name|uint16_t
name|idVendor
decl_stmt|;
name|uint16_t
name|idProduct
decl_stmt|;
name|uint16_t
name|bcdDevice
decl_stmt|;
name|uint8_t
name|iManufacturer
decl_stmt|;
name|uint8_t
name|iProduct
decl_stmt|;
name|uint8_t
name|iSerialNumber
decl_stmt|;
name|uint8_t
name|bNumConfigurations
decl_stmt|;
block|}
name|libusb_device_descriptor
typedef|;
typedef|typedef
struct|struct
name|libusb_endpoint_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bEndpointAddress
decl_stmt|;
name|uint8_t
name|bmAttributes
decl_stmt|;
name|uint16_t
name|wMaxPacketSize
decl_stmt|;
name|uint8_t
name|bInterval
decl_stmt|;
name|uint8_t
name|bRefresh
decl_stmt|;
name|uint8_t
name|bSynchAddress
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
name|int
name|extra_length
decl_stmt|;
block|}
name|libusb_endpoint_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_ss_endpoint_companion_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bMaxBurst
decl_stmt|;
name|uint8_t
name|bmAttributes
decl_stmt|;
name|uint16_t
name|wBytesPerInterval
decl_stmt|;
block|}
name|libusb_ss_endpoint_companion_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_interface_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bInterfaceNumber
decl_stmt|;
name|uint8_t
name|bAlternateSetting
decl_stmt|;
name|uint8_t
name|bNumEndpoints
decl_stmt|;
name|uint8_t
name|bInterfaceClass
decl_stmt|;
name|uint8_t
name|bInterfaceSubClass
decl_stmt|;
name|uint8_t
name|bInterfaceProtocol
decl_stmt|;
name|uint8_t
name|iInterface
decl_stmt|;
name|struct
name|libusb_endpoint_descriptor
modifier|*
name|endpoint
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
name|int
name|extra_length
decl_stmt|;
block|}
name|libusb_interface_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_interface
block|{
name|struct
name|libusb_interface_descriptor
modifier|*
name|altsetting
decl_stmt|;
name|int
name|num_altsetting
decl_stmt|;
block|}
name|libusb_interface
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_config_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|wTotalLength
decl_stmt|;
name|uint8_t
name|bNumInterfaces
decl_stmt|;
name|uint8_t
name|bConfigurationValue
decl_stmt|;
name|uint8_t
name|iConfiguration
decl_stmt|;
name|uint8_t
name|bmAttributes
decl_stmt|;
name|uint8_t
name|MaxPower
decl_stmt|;
name|struct
name|libusb_interface
modifier|*
name|interface
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
name|int
name|extra_length
decl_stmt|;
block|}
name|libusb_config_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_usb_2_0_device_capability_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bDevCapabilityType
decl_stmt|;
name|uint32_t
name|bmAttributes
decl_stmt|;
define|#
directive|define
name|LIBUSB_USB_2_0_CAPABILITY_LPM_SUPPORT
value|(1<< 1)
block|}
name|libusb_usb_2_0_device_capability_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_ss_usb_device_capability_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bDevCapabilityType
decl_stmt|;
name|uint8_t
name|bmAttributes
decl_stmt|;
define|#
directive|define
name|LIBUSB_SS_USB_CAPABILITY_LPM_SUPPORT
value|(1<< 1)
name|uint16_t
name|wSpeedSupported
decl_stmt|;
define|#
directive|define
name|LIBUSB_CAPABILITY_LOW_SPEED_OPERATION
value|(1)
define|#
directive|define
name|LIBUSB_CAPABILITY_FULL_SPEED_OPERATION
value|(1<< 1)
define|#
directive|define
name|LIBUSB_CAPABILITY_HIGH_SPEED_OPERATION
value|(1<< 2)
define|#
directive|define
name|LIBUSB_CAPABILITY_5GBPS_OPERATION
value|(1<< 3)
name|uint8_t
name|bFunctionalitySupport
decl_stmt|;
name|uint8_t
name|bU1DevExitLat
decl_stmt|;
name|uint16_t
name|wU2DevExitLat
decl_stmt|;
block|}
name|libusb_ss_usb_device_capability_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_bos_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|wTotalLength
decl_stmt|;
name|uint8_t
name|bNumDeviceCapabilities
decl_stmt|;
name|struct
name|libusb_usb_2_0_device_capability_descriptor
modifier|*
name|usb_2_0_ext_cap
decl_stmt|;
name|struct
name|libusb_ss_usb_device_capability_descriptor
modifier|*
name|ss_usb_cap
decl_stmt|;
block|}
name|libusb_bos_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
struct|struct
name|libusb_control_setup
block|{
name|uint8_t
name|bmRequestType
decl_stmt|;
name|uint8_t
name|bRequest
decl_stmt|;
name|uint16_t
name|wValue
decl_stmt|;
name|uint16_t
name|wIndex
decl_stmt|;
name|uint16_t
name|wLength
decl_stmt|;
block|}
name|libusb_control_setup
typedef|;
define|#
directive|define
name|LIBUSB_CONTROL_SETUP_SIZE
value|8
comment|/* bytes */
typedef|typedef
struct|struct
name|libusb_iso_packet_descriptor
block|{
name|uint32_t
name|length
decl_stmt|;
name|uint32_t
name|actual_length
decl_stmt|;
name|enum
name|libusb_transfer_status
name|status
decl_stmt|;
block|}
name|libusb_iso_packet_descriptor
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
typedef|typedef
name|void
function_decl|(
modifier|*
name|libusb_transfer_cb_fn
function_decl|)
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|libusb_transfer
block|{
name|libusb_device_handle
modifier|*
name|dev_handle
decl_stmt|;
name|uint8_t
name|flags
decl_stmt|;
name|uint8_t
name|endpoint
decl_stmt|;
name|uint8_t
name|type
decl_stmt|;
name|uint32_t
name|timeout
decl_stmt|;
name|enum
name|libusb_transfer_status
name|status
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|actual_length
decl_stmt|;
name|libusb_transfer_cb_fn
name|callback
decl_stmt|;
name|void
modifier|*
name|user_data
decl_stmt|;
name|uint8_t
modifier|*
name|buffer
decl_stmt|;
name|int
name|num_iso_packets
decl_stmt|;
name|struct
name|libusb_iso_packet_descriptor
name|iso_packet_desc
index|[
literal|0
index|]
decl_stmt|;
block|}
name|libusb_transfer
name|__aligned
typedef|(sizeof(
name|void
modifier|*
typedef|));
comment|/* Library initialisation */
name|void
name|libusb_set_debug
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|libusb_strerror
parameter_list|(
name|int
name|code
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|libusb_error_name
parameter_list|(
name|int
name|code
parameter_list|)
function_decl|;
name|int
name|libusb_init
parameter_list|(
name|libusb_context
modifier|*
modifier|*
name|context
parameter_list|)
function_decl|;
name|void
name|libusb_exit
parameter_list|(
name|struct
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Device handling and enumeration */
name|ssize_t
name|libusb_get_device_list
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|libusb_device
modifier|*
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
name|void
name|libusb_free_device_list
parameter_list|(
name|libusb_device
modifier|*
modifier|*
name|list
parameter_list|,
name|int
name|unref_devices
parameter_list|)
function_decl|;
name|uint8_t
name|libusb_get_bus_number
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|libusb_get_port_numbers
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|uint8_t
name|bufsize
parameter_list|)
function_decl|;
name|int
name|libusb_get_port_path
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|uint8_t
name|bufsize
parameter_list|)
function_decl|;
name|uint8_t
name|libusb_get_device_address
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|enum
name|libusb_speed
name|libusb_get_device_speed
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|libusb_clear_halt
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|)
function_decl|;
name|int
name|libusb_get_max_packet_size
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|)
function_decl|;
name|int
name|libusb_get_max_iso_packet_size
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|)
function_decl|;
name|libusb_device
modifier|*
name|libusb_ref_device
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|libusb_unref_device
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|libusb_open
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|libusb_device_handle
modifier|*
modifier|*
name|devh
parameter_list|)
function_decl|;
name|libusb_device_handle
modifier|*
name|libusb_open_device_with_vid_pid
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|uint16_t
name|vendor_id
parameter_list|,
name|uint16_t
name|product_id
parameter_list|)
function_decl|;
name|void
name|libusb_close
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|)
function_decl|;
name|libusb_device
modifier|*
name|libusb_get_device
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|)
function_decl|;
name|int
name|libusb_get_configuration
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
name|libusb_set_configuration
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|configuration
parameter_list|)
function_decl|;
name|int
name|libusb_claim_interface
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface_number
parameter_list|)
function_decl|;
name|int
name|libusb_release_interface
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface_number
parameter_list|)
function_decl|;
name|int
name|libusb_reset_device
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|)
function_decl|;
name|int
name|libusb_check_connected
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|)
function_decl|;
name|int
name|libusb_kernel_driver_active
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|libusb_get_driver_np
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|)
function_decl|;
name|int
name|libusb_get_driver
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|)
function_decl|;
name|int
name|libusb_detach_kernel_driver_np
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|libusb_detach_kernel_driver
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|libusb_attach_kernel_driver
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|libusb_set_interface_alt_setting
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|int
name|interface_number
parameter_list|,
name|int
name|alternate_setting
parameter_list|)
function_decl|;
comment|/* USB Descriptors */
name|int
name|libusb_get_device_descriptor
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|struct
name|libusb_device_descriptor
modifier|*
name|desc
parameter_list|)
function_decl|;
name|int
name|libusb_get_active_config_descriptor
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|struct
name|libusb_config_descriptor
modifier|*
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
name|libusb_get_config_descriptor
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
name|config_index
parameter_list|,
name|struct
name|libusb_config_descriptor
modifier|*
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
name|libusb_get_config_descriptor_by_value
parameter_list|(
name|libusb_device
modifier|*
name|dev
parameter_list|,
name|uint8_t
name|bConfigurationValue
parameter_list|,
name|struct
name|libusb_config_descriptor
modifier|*
modifier|*
name|config
parameter_list|)
function_decl|;
name|void
name|libusb_free_config_descriptor
parameter_list|(
name|struct
name|libusb_config_descriptor
modifier|*
name|config
parameter_list|)
function_decl|;
name|int
name|libusb_get_string_descriptor
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|desc_index
parameter_list|,
name|uint16_t
name|langid
parameter_list|,
name|unsigned
name|char
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
name|int
name|libusb_get_string_descriptor_ascii
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|desc_index
parameter_list|,
name|uint8_t
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
name|int
name|libusb_get_descriptor
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|desc_type
parameter_list|,
name|uint8_t
name|desc_index
parameter_list|,
name|uint8_t
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
name|int
name|libusb_parse_ss_endpoint_comp
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|libusb_ss_endpoint_companion_descriptor
modifier|*
modifier|*
name|ep_comp
parameter_list|)
function_decl|;
name|void
name|libusb_free_ss_endpoint_comp
parameter_list|(
name|struct
name|libusb_ss_endpoint_companion_descriptor
modifier|*
name|ep_comp
parameter_list|)
function_decl|;
name|int
name|libusb_parse_bos_descriptor
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|,
name|struct
name|libusb_bos_descriptor
modifier|*
modifier|*
name|bos
parameter_list|)
function_decl|;
name|void
name|libusb_free_bos_descriptor
parameter_list|(
name|struct
name|libusb_bos_descriptor
modifier|*
name|bos
parameter_list|)
function_decl|;
comment|/* Asynchronous device I/O */
name|struct
name|libusb_transfer
modifier|*
name|libusb_alloc_transfer
parameter_list|(
name|int
name|iso_packets
parameter_list|)
function_decl|;
name|void
name|libusb_free_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
name|int
name|libusb_submit_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
name|int
name|libusb_cancel_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|libusb_get_iso_packet_buffer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|uint32_t
name|index
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|libusb_get_iso_packet_buffer_simple
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|uint32_t
name|index
parameter_list|)
function_decl|;
name|void
name|libusb_set_iso_packet_lengths
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|uint32_t
name|length
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|libusb_control_transfer_get_data
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
name|struct
name|libusb_control_setup
modifier|*
name|libusb_control_transfer_get_setup
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|)
function_decl|;
name|void
name|libusb_fill_control_setup
parameter_list|(
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|uint8_t
name|bmRequestType
parameter_list|,
name|uint8_t
name|bRequest
parameter_list|,
name|uint16_t
name|wValue
parameter_list|,
name|uint16_t
name|wIndex
parameter_list|,
name|uint16_t
name|wLength
parameter_list|)
function_decl|;
name|void
name|libusb_fill_control_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|libusb_transfer_cb_fn
name|callback
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
name|void
name|libusb_fill_bulk_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
name|libusb_transfer_cb_fn
name|callback
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
name|void
name|libusb_fill_interrupt_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
name|libusb_transfer_cb_fn
name|callback
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
name|void
name|libusb_fill_iso_transfer
parameter_list|(
name|struct
name|libusb_transfer
modifier|*
name|transfer
parameter_list|,
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|,
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|npacket
parameter_list|,
name|libusb_transfer_cb_fn
name|callback
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
comment|/* Polling and timing */
name|int
name|libusb_try_lock_events
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|libusb_lock_events
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|libusb_unlock_events
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|libusb_event_handling_ok
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|libusb_event_handler_active
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|libusb_lock_event_waiters
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
name|libusb_unlock_event_waiters
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|libusb_wait_for_event
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|int
name|libusb_handle_events_timeout_completed
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|,
name|int
modifier|*
name|completed
parameter_list|)
function_decl|;
name|int
name|libusb_handle_events_completed
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|int
modifier|*
name|completed
parameter_list|)
function_decl|;
name|int
name|libusb_handle_events_timeout
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|int
name|libusb_handle_events
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
name|libusb_handle_events_locked
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|int
name|libusb_get_next_timeout
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|void
name|libusb_set_pollfd_notifiers
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|,
name|libusb_pollfd_added_cb
name|added_cb
parameter_list|,
name|libusb_pollfd_removed_cb
name|removed_cb
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
specifier|const
name|struct
name|libusb_pollfd
modifier|*
modifier|*
name|libusb_get_pollfds
parameter_list|(
name|libusb_context
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|/* Synchronous device I/O */
name|int
name|libusb_control_transfer
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|bmRequestType
parameter_list|,
name|uint8_t
name|bRequest
parameter_list|,
name|uint16_t
name|wValue
parameter_list|,
name|uint16_t
name|wIndex
parameter_list|,
name|uint8_t
modifier|*
name|data
parameter_list|,
name|uint16_t
name|wLength
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
name|int
name|libusb_bulk_transfer
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|,
name|uint8_t
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|,
name|int
modifier|*
name|transferred
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
name|int
name|libusb_interrupt_transfer
parameter_list|(
name|libusb_device_handle
modifier|*
name|devh
parameter_list|,
name|uint8_t
name|endpoint
parameter_list|,
name|uint8_t
modifier|*
name|data
parameter_list|,
name|int
name|length
parameter_list|,
name|int
modifier|*
name|transferred
parameter_list|,
name|uint32_t
name|timeout
parameter_list|)
function_decl|;
comment|/* Byte-order */
name|uint16_t
name|libusb_cpu_to_le16
parameter_list|(
name|uint16_t
name|x
parameter_list|)
function_decl|;
name|uint16_t
name|libusb_le16_to_cpu
parameter_list|(
name|uint16_t
name|x
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|{
comment|/* indent fix */
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __LIBUSB_H__ */
end_comment

end_unit

