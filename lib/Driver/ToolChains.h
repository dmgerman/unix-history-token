begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ToolChains.h - ToolChain Implementations ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_define

begin_include
include|#
directive|include
file|"clang/Driver/Action.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/ToolChain.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"Tools.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|namespace
name|toolchains
block|{
comment|/// Generic_GCC - A tool chain using the 'gcc' command to perform
comment|/// all subcommands; this relies on gcc translating the majority of
comment|/// command line options.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Generic_GCC
range|:
name|public
name|ToolChain
block|{
name|protected
operator|:
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;
name|public
operator|:
name|Generic_GCC
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
operator|~
name|Generic_GCC
argument_list|()
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
block|; }
decl_stmt|;
comment|/// Darwin - The base Darwin tool chain.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Darwin
range|:
name|public
name|ToolChain
block|{
name|public
operator|:
comment|/// The host version.
name|unsigned
name|DarwinVersion
index|[
literal|3
index|]
block|;
name|private
operator|:
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;
comment|/// Whether the information on the target has been initialized.
comment|//
comment|// FIXME: This should be eliminated. What we want to do is make this part of
comment|// the "default target for arguments" selection process, once we get out of
comment|// the argument translation business.
name|mutable
name|bool
name|TargetInitialized
block|;
comment|/// Whether we are targetting iPhoneOS target.
name|mutable
name|bool
name|TargetIsIPhoneOS
block|;
comment|/// The OS version we are targetting.
name|mutable
name|unsigned
name|TargetVersion
index|[
literal|3
index|]
block|;
comment|/// The default macosx-version-min of this tool chain; empty until
comment|/// initialized.
name|std
operator|::
name|string
name|MacosxVersionMin
block|;
name|private
operator|:
name|void
name|AddDeploymentTarget
argument_list|(
argument|DerivedArgList&Args
argument_list|)
specifier|const
block|;
name|public
operator|:
name|Darwin
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
operator|~
name|Darwin
argument_list|()
block|;
name|std
operator|::
name|string
name|ComputeEffectiveClangTriple
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|;
comment|/// @name Darwin Specific Toolchain API
comment|/// {
comment|// FIXME: Eliminate these ...Target functions and derive separate tool chains
comment|// for these targets and put version in constructor.
name|void
name|setTarget
argument_list|(
argument|bool isIPhoneOS
argument_list|,
argument|unsigned Major
argument_list|,
argument|unsigned Minor
argument_list|,
argument|unsigned Micro
argument_list|)
specifier|const
block|{
comment|// FIXME: For now, allow reinitialization as long as values don't
comment|// change. This will go away when we move away from argument translation.
if|if
condition|(
name|TargetInitialized
operator|&&
name|TargetIsIPhoneOS
operator|==
name|isIPhoneOS
operator|&&
name|TargetVersion
index|[
literal|0
index|]
operator|==
name|Major
operator|&&
name|TargetVersion
index|[
literal|1
index|]
operator|==
name|Minor
operator|&&
name|TargetVersion
index|[
literal|2
index|]
operator|==
name|Micro
condition|)
return|return;
name|assert
argument_list|(
operator|!
name|TargetInitialized
operator|&&
literal|"Target already initialized!"
argument_list|)
block|;
name|TargetInitialized
operator|=
name|true
block|;
name|TargetIsIPhoneOS
operator|=
name|isIPhoneOS
block|;
name|TargetVersion
index|[
literal|0
index|]
operator|=
name|Major
block|;
name|TargetVersion
index|[
literal|1
index|]
operator|=
name|Minor
block|;
name|TargetVersion
index|[
literal|2
index|]
operator|=
name|Micro
block|;   }
name|bool
name|isTargetIPhoneOS
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|TargetInitialized
operator|&&
literal|"Target not initialized!"
argument_list|)
block|;
return|return
name|TargetIsIPhoneOS
return|;
block|}
name|bool
name|isTargetInitialized
argument_list|()
specifier|const
block|{
return|return
name|TargetInitialized
return|;
block|}
name|void
name|getTargetVersion
argument_list|(
name|unsigned
argument_list|(
operator|&
name|Res
argument_list|)
index|[
literal|3
index|]
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|TargetInitialized
operator|&&
literal|"Target not initialized!"
argument_list|)
expr_stmt|;
name|Res
index|[
literal|0
index|]
operator|=
name|TargetVersion
index|[
literal|0
index|]
expr_stmt|;
name|Res
index|[
literal|1
index|]
operator|=
name|TargetVersion
index|[
literal|1
index|]
expr_stmt|;
name|Res
index|[
literal|2
index|]
operator|=
name|TargetVersion
index|[
literal|2
index|]
expr_stmt|;
block|}
comment|/// getDarwinArchName - Get the "Darwin" arch name for a particular compiler
comment|/// invocation. For example, Darwin treats different ARM variations as
comment|/// distinct architectures.
name|llvm
operator|::
name|StringRef
name|getDarwinArchName
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
expr_stmt|;
specifier|static
name|bool
name|isVersionLT
argument_list|(
name|unsigned
argument_list|(
operator|&
name|A
argument_list|)
index|[
literal|3
index|]
argument_list|,
name|unsigned
argument_list|(
operator|&
name|B
argument_list|)
index|[
literal|3
index|]
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|A
index|[
name|i
index|]
operator|>
name|B
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
if|if
condition|(
name|A
index|[
name|i
index|]
operator|<
name|B
index|[
name|i
index|]
condition|)
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|isIPhoneOSVersionLT
argument_list|(
name|unsigned
name|V0
argument_list|,
name|unsigned
name|V1
operator|=
literal|0
argument_list|,
name|unsigned
name|V2
operator|=
literal|0
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|isTargetIPhoneOS
argument_list|()
operator|&&
literal|"Unexpected call for OS X target!"
argument_list|)
expr_stmt|;
name|unsigned
name|B
index|[
literal|3
index|]
init|=
block|{
name|V0
block|,
name|V1
block|,
name|V2
block|}
decl_stmt|;
return|return
name|isVersionLT
argument_list|(
name|TargetVersion
argument_list|,
name|B
argument_list|)
return|;
block|}
name|bool
name|isMacosxVersionLT
argument_list|(
name|unsigned
name|V0
argument_list|,
name|unsigned
name|V1
operator|=
literal|0
argument_list|,
name|unsigned
name|V2
operator|=
literal|0
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|!
name|isTargetIPhoneOS
argument_list|()
operator|&&
literal|"Unexpected call for iPhoneOS target!"
argument_list|)
expr_stmt|;
name|unsigned
name|B
index|[
literal|3
index|]
init|=
block|{
name|V0
block|,
name|V1
block|,
name|V2
block|}
decl_stmt|;
return|return
name|isVersionLT
argument_list|(
name|TargetVersion
argument_list|,
name|B
argument_list|)
return|;
block|}
comment|/// AddLinkSearchPathArgs - Add the linker search paths to \arg CmdArgs.
comment|///
comment|/// \param Args - The input argument list.
comment|/// \param CmdArgs [out] - The command argument list to append the paths
comment|/// (prefixed by -L) to.
name|virtual
name|void
name|AddLinkSearchPathArgs
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// AddLinkRuntimeLibArgs - Add the linker arguments to link the compiler
comment|/// runtime library.
name|virtual
name|void
name|AddLinkRuntimeLibArgs
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|/// }
comment|/// @name ToolChain Implementation
comment|/// {
name|virtual
name|types
operator|::
name|ID
name|LookupTypeForExtension
argument_list|(
argument|const char *Ext
argument_list|)
specifier|const
expr_stmt|;
name|virtual
name|DerivedArgList
modifier|*
name|TranslateArgs
argument_list|(
specifier|const
name|DerivedArgList
operator|&
name|Args
argument_list|,
specifier|const
name|char
operator|*
name|BoundArch
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|Tool
modifier|&
name|SelectTool
argument_list|(
specifier|const
name|Compilation
operator|&
name|C
argument_list|,
specifier|const
name|JobAction
operator|&
name|JA
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|IsBlocksDefault
argument_list|()
specifier|const
block|{
comment|// Always allow blocks on Darwin; users interested in versioning are
comment|// expected to use /usr/include/Blocks.h.
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|DISABLE_DEFAULT_INTEGRATED_ASSEMBLER
return|return
name|false
return|;
else|#
directive|else
comment|// Default integrated assembler to on for x86.
return|return
operator|(
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|==
name|llvm
operator|::
name|Triple
operator|::
name|x86
operator|||
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|==
name|llvm
operator|::
name|Triple
operator|::
name|x86_64
operator|)
return|;
endif|#
directive|endif
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
comment|// Non-fragile ABI is default for everything but i386.
return|return
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|!=
name|llvm
operator|::
name|Triple
operator|::
name|x86
return|;
block|}
name|virtual
name|bool
name|IsObjCLegacyDispatchDefault
argument_list|()
specifier|const
block|{
comment|// This is only used with the non-fragile ABI.
comment|// Legacy dispatch is used everywhere except on x86_64.
return|return
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|!=
name|llvm
operator|::
name|Triple
operator|::
name|x86_64
return|;
block|}
name|virtual
name|bool
name|UseObjCMixedDispatch
argument_list|()
specifier|const
block|{
comment|// This is only used with the non-fragile ABI and non-legacy dispatch.
comment|// Mixed dispatch is used everywhere except OS X before 10.6.
return|return
operator|!
operator|(
operator|!
name|isTargetIPhoneOS
argument_list|()
operator|&&
name|isMacosxVersionLT
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
operator|)
return|;
block|}
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|unsigned
name|GetDefaultStackProtectorLevel
argument_list|()
specifier|const
block|{
comment|// Stack protectors default to on for 10.6 and beyond.
return|return
operator|!
name|isTargetIPhoneOS
argument_list|()
operator|&&
operator|!
name|isMacosxVersionLT
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
return|;
block|}
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
expr_stmt|;
name|virtual
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|SupportsObjCGC
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|UseDwarfDebugFlags
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|UseSjLjExceptions
argument_list|()
specifier|const
expr_stmt|;
comment|/// }
block|}
empty_stmt|;
comment|/// DarwinClang - The Darwin toolchain used by Clang.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DarwinClang
range|:
name|public
name|Darwin
block|{
name|public
operator|:
name|DarwinClang
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
comment|/// @name Darwin ToolChain Implementation
comment|/// {
name|virtual
name|void
name|AddLinkSearchPathArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddLinkRuntimeLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
comment|/// }
block|}
decl_stmt|;
comment|/// DarwinGCC - The Darwin toolchain used by GCC.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DarwinGCC
range|:
name|public
name|Darwin
block|{
comment|/// GCC version to use.
name|unsigned
name|GCCVersion
index|[
literal|3
index|]
block|;
comment|/// The directory suffix for this tool chain.
name|std
operator|::
name|string
name|ToolChainDir
block|;
name|public
operator|:
name|DarwinGCC
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
comment|/// @name Darwin ToolChain Implementation
comment|/// {
name|virtual
name|void
name|AddLinkSearchPathArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddLinkRuntimeLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
comment|/// }
block|}
decl_stmt|;
comment|/// Darwin_Generic_GCC - Generic Darwin tool chain using gcc.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Darwin_Generic_GCC
range|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Darwin_Generic_GCC
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
operator|:
name|Generic_GCC
argument_list|(
argument|Host
argument_list|,
argument|Triple
argument_list|)
block|{}
name|std
operator|::
name|string
name|ComputeEffectiveClangTriple
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|{
return|return
literal|"pic"
return|;
block|}
expr|}
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|AuroraUX
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|AuroraUX
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|OpenBSD
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|OpenBSD
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|FreeBSD
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|FreeBSD
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Minix
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Minix
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DragonFly
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|DragonFly
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Linux
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Linux
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
comment|/// TCEToolChain - A tool chain using the llvm bitcode tools to perform
comment|/// all subcommands. See http://tce.cs.tut.fi for our peculiar target.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|TCEToolChain
operator|:
name|public
name|ToolChain
block|{
name|public
operator|:
name|TCEToolChain
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
operator|~
name|TCEToolChain
argument_list|()
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|;
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|;
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|;
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
block|;
name|private
operator|:
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;  }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Windows
operator|:
name|public
name|ToolChain
block|{
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;
name|public
operator|:
name|Windows
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
block|; }
block|;  }
comment|// end namespace toolchains
block|}
end_decl_stmt

begin_comment
comment|// end namespace driver
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

