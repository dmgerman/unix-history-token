begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ToolChains.h - ToolChain Implementations ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_define

begin_include
include|#
directive|include
file|"clang/Driver/Action.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/ToolChain.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"Tools.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|namespace
name|toolchains
block|{
comment|/// Generic_GCC - A tool chain using the 'gcc' command to perform
comment|/// all subcommands; this relies on gcc translating the majority of
comment|/// command line options.
name|class
name|VISIBILITY_HIDDEN
name|Generic_GCC
range|:
name|public
name|ToolChain
block|{
name|protected
operator|:
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;
name|public
operator|:
name|Generic_GCC
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
operator|~
name|Generic_GCC
argument_list|()
block|;
name|virtual
name|DerivedArgList
operator|*
name|TranslateArgs
argument_list|(
argument|InputArgList&Args
argument_list|)
specifier|const
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
block|; }
decl_stmt|;
comment|/// Darwin_X86 - Darwin tool chain for i386 an x86_64.
name|class
name|VISIBILITY_HIDDEN
name|Darwin_X86
range|:
name|public
name|ToolChain
block|{
name|mutable
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
block|,
name|Tool
operator|*
operator|>
name|Tools
block|;
comment|/// Darwin version of tool chain.
name|unsigned
name|DarwinVersion
index|[
literal|3
index|]
block|;
comment|/// GCC version to use.
name|unsigned
name|GCCVersion
index|[
literal|3
index|]
block|;
comment|/// The directory suffix for this tool chain.
name|std
operator|::
name|string
name|ToolChainDir
block|;
comment|/// The default macosx-version-min of this tool chain; empty until
comment|/// initialized.
name|mutable
name|std
operator|::
name|string
name|MacosxVersionMin
block|;
specifier|const
name|char
operator|*
name|getMacosxVersionMin
argument_list|()
specifier|const
block|;
name|public
operator|:
name|Darwin_X86
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|unsigned
argument_list|(
operator|&
name|DarwinVersion
argument_list|)
index|[
literal|3
index|]
argument_list|,
specifier|const
name|unsigned
argument_list|(
operator|&
name|GCCVersion
argument_list|)
index|[
literal|3
index|]
argument_list|)
block|;
operator|~
name|Darwin_X86
argument_list|()
block|;
name|void
name|getDarwinVersion
argument_list|(
argument|unsigned (&Res)[
literal|3
argument|]
argument_list|)
specifier|const
block|{
name|Res
index|[
literal|0
index|]
operator|=
name|DarwinVersion
index|[
literal|0
index|]
block|;
name|Res
index|[
literal|1
index|]
operator|=
name|DarwinVersion
index|[
literal|1
index|]
block|;
name|Res
index|[
literal|2
index|]
operator|=
name|DarwinVersion
index|[
literal|2
index|]
block|;   }
name|void
name|getMacosxVersion
argument_list|(
argument|unsigned (&Res)[
literal|3
argument|]
argument_list|)
specifier|const
block|{
name|Res
index|[
literal|0
index|]
operator|=
literal|10
block|;
name|Res
index|[
literal|1
index|]
operator|=
name|DarwinVersion
index|[
literal|0
index|]
operator|-
literal|4
block|;
name|Res
index|[
literal|2
index|]
operator|=
name|DarwinVersion
index|[
literal|1
index|]
block|;   }
specifier|const
name|char
operator|*
name|getMacosxVersionStr
argument_list|()
specifier|const
block|{
return|return
name|MacosxVersionMin
operator|.
name|c_str
argument_list|()
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getToolChainDir
argument_list|()
specifier|const
block|{
return|return
name|ToolChainDir
return|;
block|}
name|virtual
name|DerivedArgList
operator|*
name|TranslateArgs
argument_list|(
argument|InputArgList&Args
argument_list|)
specifier|const
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|;
name|virtual
specifier|const
name|char
operator|*
name|GetForcedPicModel
argument_list|()
specifier|const
block|; }
decl_stmt|;
comment|/// Darwin_GCC - Generic Darwin tool chain using gcc.
name|class
name|VISIBILITY_HIDDEN
name|Darwin_GCC
range|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Darwin_GCC
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
operator|:
name|Generic_GCC
argument_list|(
argument|Host
argument_list|,
argument|Triple
argument_list|)
block|{}
name|virtual
specifier|const
name|char
operator|*
name|GetDefaultRelocationModel
argument_list|()
specifier|const
block|{
return|return
literal|"pic"
return|;
block|}
expr|}
block|;
name|class
name|VISIBILITY_HIDDEN
name|FreeBSD
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|FreeBSD
argument_list|(
argument|const HostInfo&Host
argument_list|,
argument|const llvm::Triple& Triple
argument_list|,
argument|bool Lib32
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|VISIBILITY_HIDDEN
name|DragonFly
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|DragonFly
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|;
name|virtual
name|Tool
operator|&
name|SelectTool
argument_list|(
argument|const Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|)
specifier|const
block|; }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Linux
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Linux
argument_list|(
specifier|const
name|HostInfo
operator|&
name|Host
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
block|; }
block|;   }
comment|// end namespace toolchains
block|}
comment|// end namespace driver
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

