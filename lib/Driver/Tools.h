begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Tools.h - Tool Implementations -------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_TOOLS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_TOOLS_H_
end_define

begin_include
include|#
directive|include
file|"clang/Driver/Tool.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Types.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Util.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|class
name|Driver
decl_stmt|;
name|namespace
name|toolchains
block|{
name|class
name|Darwin
decl_stmt|;
block|}
name|namespace
name|tools
block|{
name|class
name|VISIBILITY_HIDDEN
name|Clang
range|:
name|public
name|Tool
block|{
name|void
name|AddPreprocessingOptions
argument_list|(
argument|const Driver&D
argument_list|,
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|)
specifier|const
block|;
name|void
name|AddARMTargetArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|void
name|AddX86TargetArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|public
operator|:
name|Clang
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"clang"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
decl_stmt|;
comment|/// gcc - Generic GCC tool implementations.
name|namespace
name|gcc
block|{
name|class
name|VISIBILITY_HIDDEN
name|Common
range|:
name|public
name|Tool
block|{
name|public
operator|:
name|Common
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|,
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
argument|Name
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;
comment|/// RenderExtraToolArgs - Render any arguments necessary to force
comment|/// the particular tool mode.
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
operator|=
literal|0
block|;   }
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|Preprocess
range|:
name|public
name|Common
block|{
name|public
operator|:
name|Preprocess
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Common
argument_list|(
literal|"gcc::Preprocess"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|Precompile
range|:
name|public
name|Common
block|{
name|public
operator|:
name|Precompile
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Common
argument_list|(
literal|"gcc::Precompile"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|Compile
range|:
name|public
name|Common
block|{
name|public
operator|:
name|Compile
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Common
argument_list|(
literal|"gcc::Compile"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|Assemble
range|:
name|public
name|Common
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Common
argument_list|(
literal|"gcc::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|Link
range|:
name|public
name|Common
block|{
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Common
argument_list|(
literal|"gcc::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|RenderExtraToolArgs
argument_list|(
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
block|}
comment|// end namespace gcc
name|namespace
name|darwin
block|{
name|class
name|VISIBILITY_HIDDEN
name|DarwinTool
range|:
name|public
name|Tool
block|{
name|protected
operator|:
name|void
name|AddDarwinArch
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
specifier|const
name|toolchains
operator|::
name|Darwin
operator|&
name|getDarwinToolChain
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|toolchains
operator|::
name|Darwin
operator|&
operator|>
operator|(
name|getToolChain
argument_list|()
operator|)
return|;
block|}
name|public
operator|:
name|DarwinTool
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|,
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
argument|Name
argument_list|,
argument|TC
argument_list|)
block|{}
expr|}
block|;
name|class
name|VISIBILITY_HIDDEN
name|CC1
operator|:
name|public
name|DarwinTool
block|{
name|public
operator|:
specifier|static
specifier|const
name|char
operator|*
name|getBaseInputName
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|InputInfoList
operator|&
name|Input
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getBaseInputStem
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|InputInfoList
operator|&
name|Input
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getDependencyFileName
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|InputInfoList
operator|&
name|Inputs
argument_list|)
block|;
name|protected
operator|:
specifier|const
name|char
operator|*
name|getCC1Name
argument_list|(
argument|types::ID Type
argument_list|)
specifier|const
block|;
name|void
name|AddCC1Args
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|void
name|AddCC1OptionsArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgStringList&OutputArgs
argument_list|)
specifier|const
block|;
name|void
name|AddCPPOptionsArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgStringList&OutputArgs
argument_list|)
specifier|const
block|;
name|void
name|AddCPPUniqueOptionsArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|,
argument|const InputInfoList&Inputs
argument_list|)
specifier|const
block|;
name|void
name|AddCPPArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|public
operator|:
name|CC1
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|,
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|DarwinTool
argument_list|(
argument|Name
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|class
name|VISIBILITY_HIDDEN
name|Preprocess
operator|:
name|public
name|CC1
block|{
name|public
operator|:
name|Preprocess
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|CC1
argument_list|(
literal|"darwin::Preprocess"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Compile
operator|:
name|public
name|CC1
block|{
name|public
operator|:
name|Compile
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|CC1
argument_list|(
literal|"darwin::Compile"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Assemble
operator|:
name|public
name|DarwinTool
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|DarwinTool
argument_list|(
literal|"darwin::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Link
operator|:
name|public
name|DarwinTool
block|{
name|void
name|AddLinkArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|DarwinTool
argument_list|(
literal|"darwin::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Lipo
operator|:
name|public
name|DarwinTool
block|{
name|public
operator|:
name|Lipo
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|DarwinTool
argument_list|(
literal|"darwin::Lipo"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|; }
comment|/// openbsd -- Directly call GNU Binutils assembler and linker
name|namespace
name|openbsd
block|{
name|class
name|VISIBILITY_HIDDEN
name|Assemble
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"openbsd::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Link
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"openbsd::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|; }
comment|// end namespace openbsd
comment|/// freebsd -- Directly call GNU Binutils assembler and linker
name|namespace
name|freebsd
block|{
name|class
name|VISIBILITY_HIDDEN
name|Assemble
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"freebsd::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Link
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"freebsd::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|; }
comment|// end namespace freebsd
comment|/// auroraux -- Directly call GNU Binutils assembler and linker
name|namespace
name|auroraux
block|{
name|class
name|VISIBILITY_HIDDEN
name|Assemble
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"auroraux::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Link
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"auroraux::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|; }
comment|// end namespace auroraux
comment|/// dragonfly -- Directly call GNU Binutils assembler and linker
name|namespace
name|dragonfly
block|{
name|class
name|VISIBILITY_HIDDEN
name|Assemble
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Assemble
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"dragonfly::Assemble"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|;
name|class
name|VISIBILITY_HIDDEN
name|Link
operator|:
name|public
name|Tool
block|{
name|public
operator|:
name|Link
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|)
operator|:
name|Tool
argument_list|(
literal|"dragonfly::Link"
argument_list|,
argument|TC
argument_list|)
block|{}
name|virtual
name|bool
name|acceptsPipedInput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|canPipeOutput
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|hasIntegratedCPP
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|ConstructJob
argument_list|(
argument|Compilation&C
argument_list|,
argument|const JobAction&JA
argument_list|,
argument|Job&Dest
argument_list|,
argument|const InputInfo&Output
argument_list|,
argument|const InputInfoList&Inputs
argument_list|,
argument|const ArgList&TCArgs
argument_list|,
argument|const char *LinkingOutput
argument_list|)
specifier|const
block|;   }
block|; }
comment|// end namespace dragonfly
block|}
comment|// end namespace toolchains
block|}
comment|// end namespace driver
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// CLANG_LIB_DRIVER_TOOLS_H_
end_comment

end_unit

