begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- smmintrin.h - SSE intrinsics -------------------------------------=== * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. * *===-----------------------------------------------------------------------=== */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SMMINTRIN_H
end_ifndef

begin_define
define|#
directive|define
name|_SMMINTRIN_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__SSE4_1__
end_ifndef

begin_error
error|#
directive|error
literal|"SSE4.1 instruction set not enabled"
end_error

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<tmmintrin.h>
end_include

begin_comment
comment|/* Type defines.  */
end_comment

begin_typedef
typedef|typedef
name|double
name|__v2df
name|__attribute__
typedef|((
name|__vector_size__
typedef|(16)));
end_typedef

begin_comment
comment|/* SSE4 Rounding macros. */
end_comment

begin_define
define|#
directive|define
name|_MM_FROUND_TO_NEAREST_INT
value|0x00
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_TO_NEG_INF
value|0x01
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_TO_POS_INF
value|0x02
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_TO_ZERO
value|0x03
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_CUR_DIRECTION
value|0x04
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_RAISE_EXC
value|0x00
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_NO_EXC
value|0x08
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_NINT
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEAREST_INT)
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_FLOOR
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_NEG_INF)
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_CEIL
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_POS_INF)
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_TRUNC
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_TO_ZERO)
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_RINT
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_CUR_DIRECTION)
end_define

begin_define
define|#
directive|define
name|_MM_FROUND_NEARBYINT
value|(_MM_FROUND_RAISE_EXC | _MM_FROUND_CUR_DIRECTION)
end_define

begin_define
define|#
directive|define
name|_mm_ceil_ps
parameter_list|(
name|X
parameter_list|)
value|_mm_round_ps((X), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm_ceil_pd
parameter_list|(
name|X
parameter_list|)
value|_mm_round_pd((X), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm_ceil_ss
parameter_list|(
name|X
parameter_list|,
name|Y
parameter_list|)
value|_mm_round_ss((X), (Y), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm_ceil_sd
parameter_list|(
name|X
parameter_list|,
name|Y
parameter_list|)
value|_mm_round_sd((X), (Y), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm_floor_ps
parameter_list|(
name|X
parameter_list|)
value|_mm_round_ps((X), _MM_FROUND_FLOOR)
end_define

begin_define
define|#
directive|define
name|_mm_floor_pd
parameter_list|(
name|X
parameter_list|)
value|_mm_round_pd((X), _MM_FROUND_FLOOR)
end_define

begin_define
define|#
directive|define
name|_mm_floor_ss
parameter_list|(
name|X
parameter_list|,
name|Y
parameter_list|)
value|_mm_round_ss((X), (Y), _MM_FROUND_FLOOR)
end_define

begin_define
define|#
directive|define
name|_mm_floor_sd
parameter_list|(
name|X
parameter_list|,
name|Y
parameter_list|)
value|_mm_round_sd((X), (Y), _MM_FROUND_FLOOR)
end_define

begin_comment
comment|/* SSE4 Rounding Intrinsics.  */
end_comment

begin_decl_stmt
specifier|static
specifier|inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_round_ps
argument_list|(
name|__m128
name|__V
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_roundps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__V
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_round_ss
argument_list|(
name|__m128
name|__V1
argument_list|,
name|__m128
name|__V2
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_roundss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__V1
argument_list|,
operator|(
name|__v4sf
operator|)
name|__V2
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_round_pd
argument_list|(
name|__m128d
name|__V
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_roundpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__V
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_round_sd
argument_list|(
name|__m128d
name|__V1
argument_list|,
name|__m128d
name|__V2
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_roundsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__V1
argument_list|,
operator|(
name|__v2df
operator|)
name|__V2
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* SSE4 Packed Blending Intrinsics.  */
end_comment

begin_decl_stmt
specifier|static
specifier|inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blend_pd
argument_list|(
name|__m128d
name|__V1
argument_list|,
name|__m128d
name|__V2
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_blendpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__V1
argument_list|,
operator|(
name|__v2df
operator|)
name|__V2
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blend_ps
argument_list|(
name|__m128
name|__V1
argument_list|,
name|__m128
name|__V2
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_blendps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__V1
argument_list|,
operator|(
name|__v4sf
operator|)
name|__V2
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blendv_pd
argument_list|(
name|__m128d
name|__V1
argument_list|,
name|__m128d
name|__V2
argument_list|,
name|__m128d
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_blendvpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__V1
argument_list|,
operator|(
name|__v2df
operator|)
name|__V2
argument_list|,
operator|(
name|__v2df
operator|)
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blendv_ps
argument_list|(
name|__m128
name|__V1
argument_list|,
name|__m128
name|__V2
argument_list|,
name|__m128
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_blendvps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__V1
argument_list|,
operator|(
name|__v4sf
operator|)
name|__V2
argument_list|,
operator|(
name|__v4sf
operator|)
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blendv_epi8
argument_list|(
name|__m128i
name|__V1
argument_list|,
name|__m128i
name|__V2
argument_list|,
name|__m128i
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pblendvb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__V1
argument_list|,
operator|(
name|__v16qi
operator|)
name|__V2
argument_list|,
operator|(
name|__v16qi
operator|)
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_blend_epi16
argument_list|(
name|__m128i
name|__V1
argument_list|,
name|__m128i
name|__V2
argument_list|,
specifier|const
name|int
name|__M
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pblendw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__V1
argument_list|,
operator|(
name|__v8hi
operator|)
name|__V2
argument_list|,
name|__M
argument_list|)
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSE4_1__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SMMINTRIN_H */
end_comment

end_unit

