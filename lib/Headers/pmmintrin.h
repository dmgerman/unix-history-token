begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- pmmintrin.h - SSE3 intrinsics ------------------------------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__PMMINTRIN_H
end_ifndef

begin_define
define|#
directive|define
name|__PMMINTRIN_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__SSE3__
end_ifndef

begin_error
error|#
directive|error
literal|"SSE3 instruction set not enabled"
end_error

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<emmintrin.h>
end_include

begin_decl_stmt
specifier|static
name|__inline__
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_lddqu_si128
argument_list|(
name|__m128i
specifier|const
operator|*
name|p
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_lddqu
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|p
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_addsub_ps
argument_list|(
name|__m128
name|a
argument_list|,
name|__m128
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_addsubps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_hadd_ps
argument_list|(
name|__m128
name|a
argument_list|,
name|__m128
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_haddps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_hsub_ps
argument_list|(
name|__m128
name|a
argument_list|,
name|__m128
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_hsubps
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_movehdup_ps
argument_list|(
name|__m128
name|a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_moveldup_ps
argument_list|(
name|__m128
name|a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_addsub_pd
argument_list|(
name|__m128d
name|a
argument_list|,
name|__m128d
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_addsubpd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_hadd_pd
argument_list|(
name|__m128d
name|a
argument_list|,
name|__m128d
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_haddpd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_hsub_pd
argument_list|(
name|__m128d
name|a
argument_list|,
name|__m128d
name|b
argument_list|)
block|{
return|return
name|__builtin_ia32_hsubpd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_loaddup_pd
argument_list|(
name|double
specifier|const
operator|*
name|dp
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
block|{
operator|*
name|dp
block|,
operator|*
name|dp
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_movedup_pd
argument_list|(
name|__m128d
name|a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|a
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_decl_stmt

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_ON
value|(0x0040)
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_OFF
value|(0x0000)
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_MASK
value|(0x0040)
end_define

begin_define
define|#
directive|define
name|_MM_GET_DENORMALS_ZERO_MODE
parameter_list|()
value|(_mm_getcsr()& _MM_DENORMALS_ZERO_MASK)
end_define

begin_define
define|#
directive|define
name|_MM_SET_DENORMALS_ZERO_MODE
parameter_list|(
name|x
parameter_list|)
value|(_mm_setcsr((_mm_getcsr()& ~_MM_DENORMALS_ZERO_MASK) | (x)))
end_define

begin_decl_stmt
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_monitor
argument_list|(
name|void
specifier|const
operator|*
name|p
argument_list|,
name|unsigned
name|extensions
argument_list|,
name|unsigned
name|hints
argument_list|)
block|{
name|__builtin_ia32_monitor
argument_list|(
operator|(
name|void
operator|*
operator|)
name|p
argument_list|,
name|extensions
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_mwait
argument_list|(
name|unsigned
name|extensions
argument_list|,
name|unsigned
name|hints
argument_list|)
block|{
name|__builtin_ia32_mwait
argument_list|(
name|extensions
argument_list|,
name|hints
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSE3__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __PMMINTRIN_H */
end_comment

end_unit

