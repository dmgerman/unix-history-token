begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===--- __clang_cuda_intrinsics.h - Device-side CUDA intrinsic wrappers ---===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CLANG_CUDA_INTRINSICS_H__
end_ifndef

begin_define
define|#
directive|define
name|__CLANG_CUDA_INTRINSICS_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__CUDA__
end_ifndef

begin_error
error|#
directive|error
literal|"This file is for CUDA compilation only."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// sm_30 intrinsics: __shfl_{up,down,xor}.
end_comment

begin_define
define|#
directive|define
name|__SM_30_INTRINSICS_H__
end_define

begin_define
define|#
directive|define
name|__SM_30_INTRINSICS_HPP__
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__CUDA_ARCH__
argument_list|)
operator|||
name|__CUDA_ARCH__
operator|>=
literal|300
end_if

begin_pragma
pragma|#
directive|pragma
name|push_macro
name|(
literal|"__MAKE_SHUFFLES"
name|)
end_pragma

begin_define
define|#
directive|define
name|__MAKE_SHUFFLES
parameter_list|(
name|__FnName
parameter_list|,
name|__IntIntrinsic
parameter_list|,
name|__FloatIntrinsic
parameter_list|,
name|__Mask
parameter_list|)
define|\
value|inline __device__ int __FnName(int __in, int __offset,                       \                                  int __width = warpSize) {                     \     return __IntIntrinsic(__in, __offset,                                      \                           ((warpSize - __width)<< 8) | (__Mask));             \   }                                                                            \   inline __device__ float __FnName(float __in, int __offset,                   \                                    int __width = warpSize) {                   \     return __FloatIntrinsic(__in, __offset,                                    \                             ((warpSize - __width)<< 8) | (__Mask));           \   }                                                                            \   inline __device__ unsigned int __FnName(unsigned int __in, int __offset,     \                                           int __width = warpSize) {            \     return static_cast<unsigned int>(                                          \         ::__FnName(static_cast<int>(__in), __offset, __width));                \   }                                                                            \   inline __device__ long long __FnName(long long __in, int __offset,           \                                        int __width = warpSize) {               \     struct __Bits {                                                            \       int __a, __b;                                                            \     };                                                                         \     _Static_assert(sizeof(__in) == sizeof(__Bits));                            \     _Static_assert(sizeof(__Bits) == 2 * sizeof(int));                         \     __Bits __tmp;                                                              \     memcpy(&__in,&__tmp, sizeof(__in));                                       \     __tmp.__a = ::__FnName(__tmp.__a, __offset, __width);                      \     __tmp.__b = ::__FnName(__tmp.__b, __offset, __width);                      \     long long __out;                                                           \     memcpy(&__out,&__tmp, sizeof(__tmp));                                     \     return __out;                                                              \   }                                                                            \   inline __device__ unsigned long long __FnName(                               \       unsigned long long __in, int __offset, int __width = warpSize) {         \     return static_cast<unsigned long long>(                                    \         ::__FnName(static_cast<unsigned long long>(__in), __offset, __width)); \   }                                                                            \   inline __device__ double __FnName(double __in, int __offset,                 \                                     int __width = warpSize) {                  \     long long __tmp;                                                           \     _Static_assert(sizeof(__tmp) == sizeof(__in));                             \     memcpy(&__tmp,&__in, sizeof(__in));                                       \     __tmp = ::__FnName(__tmp, __offset, __width);                              \     double __out;                                                              \     memcpy(&__out,&__tmp, sizeof(__out));                                     \     return __out;                                                              \   }
end_define

begin_expr_stmt
name|__MAKE_SHUFFLES
argument_list|(
name|__shfl
argument_list|,
name|__nvvm_shfl_idx_i32
argument_list|,
name|__nvvm_shfl_idx_f32
argument_list|,
literal|0x1f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// We use 0 rather than 31 as our mask, because shfl.up applies to lanes>=
end_comment

begin_comment
comment|// maxLane.
end_comment

begin_expr_stmt
name|__MAKE_SHUFFLES
argument_list|(
name|__shfl_up
argument_list|,
name|__nvvm_shfl_up_i32
argument_list|,
name|__nvvm_shfl_up_f32
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__MAKE_SHUFFLES
argument_list|(
name|__shfl_down
argument_list|,
name|__nvvm_shfl_down_i32
argument_list|,
name|__nvvm_shfl_down_f32
argument_list|,
literal|0x1f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__MAKE_SHUFFLES
argument_list|(
name|__shfl_xor
argument_list|,
name|__nvvm_shfl_bfly_i32
argument_list|,
name|__nvvm_shfl_bfly_f32
argument_list|,
literal|0x1f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_pragma
pragma|#
directive|pragma
name|pop_macro
name|(
literal|"__MAKE_SHUFFLES"
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(__CUDA_ARCH__) || __CUDA_ARCH__>= 300
end_comment

begin_comment
comment|// sm_32 intrinsics: __ldg and __funnelshift_{l,lc,r,rc}.
end_comment

begin_comment
comment|// Prevent the vanilla sm_32 intrinsics header from being included.
end_comment

begin_define
define|#
directive|define
name|__SM_32_INTRINSICS_H__
end_define

begin_define
define|#
directive|define
name|__SM_32_INTRINSICS_HPP__
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__CUDA_ARCH__
argument_list|)
operator|||
name|__CUDA_ARCH__
operator|>=
literal|320
end_if

begin_function
specifier|inline
name|__device__
name|char
name|__ldg
parameter_list|(
specifier|const
name|char
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_c
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|short
name|__ldg
parameter_list|(
specifier|const
name|short
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_s
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|int
name|__ldg
parameter_list|(
specifier|const
name|int
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_i
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|long
name|__ldg
parameter_list|(
specifier|const
name|long
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_l
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|long
name|long
name|__ldg
parameter_list|(
specifier|const
name|long
name|long
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_ll
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|char
name|__ldg
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_uc
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|short
name|__ldg
parameter_list|(
specifier|const
name|unsigned
name|short
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_us
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|int
name|__ldg
parameter_list|(
specifier|const
name|unsigned
name|int
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_ui
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|long
name|__ldg
parameter_list|(
specifier|const
name|unsigned
name|long
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_ul
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|long
name|long
name|__ldg
parameter_list|(
specifier|const
name|unsigned
name|long
name|long
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_ull
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|float
name|__ldg
parameter_list|(
specifier|const
name|float
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_f
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|double
name|__ldg
parameter_list|(
specifier|const
name|double
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|__nvvm_ldg_d
argument_list|(
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|char2
name|__ldg
parameter_list|(
specifier|const
name|char2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|char
name|c2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
comment|// We can assume that ptr is aligned at least to char2's alignment, but the
comment|// load will assume that ptr is aligned to char2's alignment.  This is only
comment|// safe if alignof(c2)<= alignof(char2).
name|c2
name|rv
init|=
name|__nvvm_ldg_c2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|c2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|char2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|char4
name|__ldg
parameter_list|(
specifier|const
name|char4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|char
name|c4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|c4
name|rv
init|=
name|__nvvm_ldg_c4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|c4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|char4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|short2
name|__ldg
parameter_list|(
specifier|const
name|short2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|short
name|s2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|s2
name|rv
init|=
name|__nvvm_ldg_s2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|s2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|short2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|short4
name|__ldg
parameter_list|(
specifier|const
name|short4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|short
name|s4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|s4
name|rv
init|=
name|__nvvm_ldg_s4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|s4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|short4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|int2
name|__ldg
parameter_list|(
specifier|const
name|int2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|int
name|i2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|i2
name|rv
init|=
name|__nvvm_ldg_i2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|i2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|int2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|int4
name|__ldg
parameter_list|(
specifier|const
name|int4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|int
name|i4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|i4
name|rv
init|=
name|__nvvm_ldg_i4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|i4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|int4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|longlong2
name|__ldg
parameter_list|(
specifier|const
name|longlong2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|long
name|long
name|ll2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|ll2
name|rv
init|=
name|__nvvm_ldg_ll2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|ll2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|longlong2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|uchar2
name|__ldg
parameter_list|(
specifier|const
name|uchar2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|char
name|uc2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|uc2
name|rv
init|=
name|__nvvm_ldg_uc2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|uc2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|uchar2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|uchar4
name|__ldg
parameter_list|(
specifier|const
name|uchar4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|char
name|uc4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|uc4
name|rv
init|=
name|__nvvm_ldg_uc4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|uc4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|uchar4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|ushort2
name|__ldg
parameter_list|(
specifier|const
name|ushort2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|short
name|us2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|us2
name|rv
init|=
name|__nvvm_ldg_us2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|us2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|ushort2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|ushort4
name|__ldg
parameter_list|(
specifier|const
name|ushort4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|short
name|us4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|us4
name|rv
init|=
name|__nvvm_ldg_us4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|us4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|ushort4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|uint2
name|__ldg
parameter_list|(
specifier|const
name|uint2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|int
name|ui2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|ui2
name|rv
init|=
name|__nvvm_ldg_ui2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|ui2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|uint2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|uint4
name|__ldg
parameter_list|(
specifier|const
name|uint4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|int
name|ui4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|ui4
name|rv
init|=
name|__nvvm_ldg_ui4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|ui4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|uint4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|ulonglong2
name|__ldg
parameter_list|(
specifier|const
name|ulonglong2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|unsigned
name|long
name|long
name|ull2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|ull2
name|rv
init|=
name|__nvvm_ldg_ull2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|ull2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|ulonglong2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|float2
name|__ldg
parameter_list|(
specifier|const
name|float2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|float
name|f2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|f2
name|rv
init|=
name|__nvvm_ldg_f2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|f2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|float2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|float4
name|__ldg
parameter_list|(
specifier|const
name|float4
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|float
name|f4
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(4)));
name|f4
name|rv
init|=
name|__nvvm_ldg_f4
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|f4
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|float4
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
name|ret
operator|.
name|z
operator|=
name|rv
index|[
literal|2
index|]
expr_stmt|;
name|ret
operator|.
name|w
operator|=
name|rv
index|[
literal|3
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|double2
name|__ldg
parameter_list|(
specifier|const
name|double2
modifier|*
name|ptr
parameter_list|)
block|{
typedef|typedef
name|double
name|d2
name|__attribute__
typedef|((
name|ext_vector_type
typedef|(2)));
name|d2
name|rv
init|=
name|__nvvm_ldg_d2
argument_list|(
name|reinterpret_cast
operator|<
specifier|const
name|d2
operator|*
operator|>
operator|(
name|ptr
operator|)
argument_list|)
decl_stmt|;
name|double2
name|ret
decl_stmt|;
name|ret
operator|.
name|x
operator|=
name|rv
index|[
literal|0
index|]
expr_stmt|;
name|ret
operator|.
name|y
operator|=
name|rv
index|[
literal|1
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_comment
comment|// TODO: Implement these as intrinsics, so the backend can work its magic on
end_comment

begin_comment
comment|// these.  Alternatively, we could implement these as plain C and try to get
end_comment

begin_comment
comment|// llvm to recognize the relevant patterns.
end_comment

begin_function
specifier|inline
name|__device__
name|unsigned
name|__funnelshift_l
parameter_list|(
name|unsigned
name|low32
parameter_list|,
name|unsigned
name|high32
parameter_list|,
name|unsigned
name|shiftWidth
parameter_list|)
block|{
name|unsigned
name|result
decl_stmt|;
asm|asm("shf.l.wrap.b32 %0, %1, %2, %3;"       : "=r"(result)       : "r"(low32), "r"(high32), "r"(shiftWidth));
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|__funnelshift_lc
parameter_list|(
name|unsigned
name|low32
parameter_list|,
name|unsigned
name|high32
parameter_list|,
name|unsigned
name|shiftWidth
parameter_list|)
block|{
name|unsigned
name|result
decl_stmt|;
asm|asm("shf.l.clamp.b32 %0, %1, %2, %3;"       : "=r"(result)       : "r"(low32), "r"(high32), "r"(shiftWidth));
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|__funnelshift_r
parameter_list|(
name|unsigned
name|low32
parameter_list|,
name|unsigned
name|high32
parameter_list|,
name|unsigned
name|shiftWidth
parameter_list|)
block|{
name|unsigned
name|result
decl_stmt|;
asm|asm("shf.r.wrap.b32 %0, %1, %2, %3;"       : "=r"(result)       : "r"(low32), "r"(high32), "r"(shiftWidth));
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|inline
name|__device__
name|unsigned
name|__funnelshift_rc
parameter_list|(
name|unsigned
name|low32
parameter_list|,
name|unsigned
name|high32
parameter_list|,
name|unsigned
name|shiftWidth
parameter_list|)
block|{
name|unsigned
name|ret
decl_stmt|;
asm|asm("shf.r.clamp.b32 %0, %1, %2, %3;"       : "=r"(ret)       : "r"(low32), "r"(high32), "r"(shiftWidth));
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// !defined(__CUDA_ARCH__) || __CUDA_ARCH__>= 320
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// defined(__CLANG_CUDA_INTRINSICS_H__)
end_comment

end_unit

