begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- __clang_cuda_complex_builtins - CUDA impls of runtime complex fns ---===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CLANG_CUDA_COMPLEX_BUILTINS
end_ifndef

begin_define
define|#
directive|define
name|__CLANG_CUDA_COMPLEX_BUILTINS
end_define

begin_comment
comment|// This header defines __muldc3, __mulsc3, __divdc3, and __divsc3.  These are
end_comment

begin_comment
comment|// libgcc functions that clang assumes are available when compiling c99 complex
end_comment

begin_comment
comment|// operations.  (These implementations come from libc++, and have been modified
end_comment

begin_comment
comment|// to work with CUDA.)
end_comment

begin_extern
extern|extern
literal|"C"
specifier|inline
name|__device__
name|double
specifier|_Complex
name|__muldc3
parameter_list|(
name|double
name|__a
parameter_list|,
name|double
name|__b
parameter_list|,
name|double
name|__c
parameter_list|,
name|double
name|__d
parameter_list|)
block|{
name|double
name|__ac
init|=
name|__a
operator|*
name|__c
decl_stmt|;
name|double
name|__bd
init|=
name|__b
operator|*
name|__d
decl_stmt|;
name|double
name|__ad
init|=
name|__a
operator|*
name|__d
decl_stmt|;
name|double
name|__bc
init|=
name|__b
operator|*
name|__c
decl_stmt|;
name|double
specifier|_Complex
name|z
decl_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__ac
operator|-
name|__bd
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__ad
operator|+
name|__bc
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__real__
argument_list|(
name|z
argument_list|)
argument_list|)
operator|&&
name|std
operator|::
name|isnan
argument_list|(
name|__imag__
argument_list|(
name|z
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|__recalc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|)
block|{
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__c
argument_list|)
condition|)
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__d
argument_list|)
condition|)
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|)
block|{
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
condition|)
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
condition|)
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|__recalc
operator|&&
operator|(
name|std
operator|::
name|isinf
argument_list|(
name|__ac
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__bd
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__ad
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__bc
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
condition|)
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
condition|)
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__c
argument_list|)
condition|)
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__d
argument_list|)
condition|)
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|__recalc
condition|)
block|{
comment|// Can't use std::numeric_limits<double>::infinity() -- that doesn't have
comment|// a device overload (and isn't constexpr before C++11, naturally).
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__c
operator|-
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__d
operator|+
name|__b
operator|*
name|__c
operator|)
expr_stmt|;
block|}
block|}
return|return
name|z
return|;
block|}
end_extern

begin_extern
extern|extern
literal|"C"
specifier|inline
name|__device__
name|float
specifier|_Complex
name|__mulsc3
parameter_list|(
name|float
name|__a
parameter_list|,
name|float
name|__b
parameter_list|,
name|float
name|__c
parameter_list|,
name|float
name|__d
parameter_list|)
block|{
name|float
name|__ac
init|=
name|__a
operator|*
name|__c
decl_stmt|;
name|float
name|__bd
init|=
name|__b
operator|*
name|__d
decl_stmt|;
name|float
name|__ad
init|=
name|__a
operator|*
name|__d
decl_stmt|;
name|float
name|__bc
init|=
name|__b
operator|*
name|__c
decl_stmt|;
name|float
specifier|_Complex
name|z
decl_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__ac
operator|-
name|__bd
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__ad
operator|+
name|__bc
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__real__
argument_list|(
name|z
argument_list|)
argument_list|)
operator|&&
name|std
operator|::
name|isnan
argument_list|(
name|__imag__
argument_list|(
name|z
argument_list|)
argument_list|)
condition|)
block|{
name|int
name|__recalc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|)
block|{
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__c
argument_list|)
condition|)
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__d
argument_list|)
condition|)
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|)
block|{
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
condition|)
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
condition|)
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|__recalc
operator|&&
operator|(
name|std
operator|::
name|isinf
argument_list|(
name|__ac
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__bd
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__ad
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__bc
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
condition|)
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
condition|)
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__c
argument_list|)
condition|)
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__d
argument_list|)
condition|)
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__recalc
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|__recalc
condition|)
block|{
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__c
operator|-
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__d
operator|+
name|__b
operator|*
name|__c
operator|)
expr_stmt|;
block|}
block|}
return|return
name|z
return|;
block|}
end_extern

begin_extern
extern|extern
literal|"C"
specifier|inline
name|__device__
name|double
specifier|_Complex
name|__divdc3
parameter_list|(
name|double
name|__a
parameter_list|,
name|double
name|__b
parameter_list|,
name|double
name|__c
parameter_list|,
name|double
name|__d
parameter_list|)
block|{
name|int
name|__ilogbw
init|=
literal|0
decl_stmt|;
comment|// Can't use std::max, because that's defined in<algorithm>, and we don't
comment|// want to pull that in for every compile.  The CUDA headers define
comment|// ::max(float, float) and ::max(double, double), which is sufficient for us.
name|double
name|__logbw
init|=
name|std
operator|::
name|logb
argument_list|(
name|max
argument_list|(
name|std
operator|::
name|abs
argument_list|(
name|__c
argument_list|)
argument_list|,
name|std
operator|::
name|abs
argument_list|(
name|__d
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|isfinite
argument_list|(
name|__logbw
argument_list|)
condition|)
block|{
name|__ilogbw
operator|=
operator|(
name|int
operator|)
name|__logbw
expr_stmt|;
name|__c
operator|=
name|std
operator|::
name|scalbn
argument_list|(
name|__c
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|scalbn
argument_list|(
name|__d
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
block|}
name|double
name|__denom
init|=
name|__c
operator|*
name|__c
operator|+
name|__d
operator|*
name|__d
decl_stmt|;
name|double
specifier|_Complex
name|z
decl_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|scalbn
argument_list|(
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
operator|/
name|__denom
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|scalbn
argument_list|(
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
operator|/
name|__denom
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__real__
argument_list|(
name|z
argument_list|)
argument_list|)
operator|&&
name|std
operator|::
name|isnan
argument_list|(
name|__imag__
argument_list|(
name|z
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|__denom
operator|==
literal|0.0
operator|)
operator|&&
operator|(
operator|!
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
operator|||
operator|!
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
operator|)
condition|)
block|{
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|__builtin_huge_valf
argument_list|()
argument_list|,
name|__c
argument_list|)
operator|*
name|__a
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|__builtin_huge_valf
argument_list|()
argument_list|,
name|__c
argument_list|)
operator|*
name|__b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
operator|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__c
argument_list|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__d
argument_list|)
condition|)
block|{
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
condition|?
literal|1.0
else|:
literal|0.0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|?
literal|1.0
else|:
literal|0.0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__logbw
argument_list|)
operator|&&
name|__logbw
operator|>
literal|0.0
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__a
argument_list|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__b
argument_list|)
condition|)
block|{
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
condition|?
literal|1.0
else|:
literal|0.0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|?
literal|1.0
else|:
literal|0.0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
literal|0.0
operator|*
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
literal|0.0
operator|*
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
expr_stmt|;
block|}
block|}
return|return
name|z
return|;
block|}
end_extern

begin_extern
extern|extern
literal|"C"
specifier|inline
name|__device__
name|float
specifier|_Complex
name|__divsc3
parameter_list|(
name|float
name|__a
parameter_list|,
name|float
name|__b
parameter_list|,
name|float
name|__c
parameter_list|,
name|float
name|__d
parameter_list|)
block|{
name|int
name|__ilogbw
init|=
literal|0
decl_stmt|;
name|float
name|__logbw
init|=
name|std
operator|::
name|logb
argument_list|(
name|max
argument_list|(
name|std
operator|::
name|abs
argument_list|(
name|__c
argument_list|)
argument_list|,
name|std
operator|::
name|abs
argument_list|(
name|__d
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|isfinite
argument_list|(
name|__logbw
argument_list|)
condition|)
block|{
name|__ilogbw
operator|=
operator|(
name|int
operator|)
name|__logbw
expr_stmt|;
name|__c
operator|=
name|std
operator|::
name|scalbn
argument_list|(
name|__c
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|scalbn
argument_list|(
name|__d
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
block|}
name|float
name|__denom
init|=
name|__c
operator|*
name|__c
operator|+
name|__d
operator|*
name|__d
decl_stmt|;
name|float
specifier|_Complex
name|z
decl_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|scalbn
argument_list|(
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
operator|/
name|__denom
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|scalbn
argument_list|(
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
operator|/
name|__denom
argument_list|,
operator|-
name|__ilogbw
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|__real__
argument_list|(
name|z
argument_list|)
argument_list|)
operator|&&
name|std
operator|::
name|isnan
argument_list|(
name|__imag__
argument_list|(
name|z
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|__denom
operator|==
literal|0
operator|)
operator|&&
operator|(
operator|!
name|std
operator|::
name|isnan
argument_list|(
name|__a
argument_list|)
operator|||
operator|!
name|std
operator|::
name|isnan
argument_list|(
name|__b
argument_list|)
operator|)
condition|)
block|{
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|__builtin_huge_valf
argument_list|()
argument_list|,
name|__c
argument_list|)
operator|*
name|__a
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|__builtin_huge_valf
argument_list|()
argument_list|,
name|__c
argument_list|)
operator|*
name|__b
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
operator|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__c
argument_list|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__d
argument_list|)
condition|)
block|{
name|__a
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__a
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__b
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__b
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__b
argument_list|)
expr_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
name|__builtin_huge_valf
argument_list|()
operator|*
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|__logbw
argument_list|)
operator|&&
name|__logbw
operator|>
literal|0
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__a
argument_list|)
operator|&&
name|std
operator|::
name|isfinite
argument_list|(
name|__b
argument_list|)
condition|)
block|{
name|__c
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__c
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__c
argument_list|)
expr_stmt|;
name|__d
operator|=
name|std
operator|::
name|copysign
argument_list|(
name|std
operator|::
name|isinf
argument_list|(
name|__d
argument_list|)
condition|?
literal|1
else|:
literal|0
argument_list|,
name|__d
argument_list|)
expr_stmt|;
name|__real__
argument_list|(
name|z
argument_list|)
operator|=
literal|0
operator|*
operator|(
name|__a
operator|*
name|__c
operator|+
name|__b
operator|*
name|__d
operator|)
expr_stmt|;
name|__imag__
argument_list|(
name|z
argument_list|)
operator|=
literal|0
operator|*
operator|(
name|__b
operator|*
name|__c
operator|-
name|__a
operator|*
name|__d
operator|)
expr_stmt|;
block|}
block|}
return|return
name|z
return|;
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __CLANG_CUDA_COMPLEX_BUILTINS
end_comment

end_unit

