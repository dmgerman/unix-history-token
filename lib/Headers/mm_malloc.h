begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- mm_malloc.h - Allocating and Freeing Aligned Memory Blocks -------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__MM_MALLOC_H
end_ifndef

begin_define
define|#
directive|define
name|__MM_MALLOC_H
end_define

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_decl_stmt
specifier|static
specifier|inline
name|void
modifier|*
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_malloc
argument_list|(
name|size_t
name|size
argument_list|,
name|size_t
name|align
argument_list|)
block|{
if|if
condition|(
name|align
operator|&
operator|(
name|align
operator|-
literal|1
operator|)
condition|)
block|{
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
literal|0
return|;
block|}
if|if
condition|(
operator|!
name|size
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|align
operator|<
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
condition|)
name|align
operator|=
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
expr_stmt|;
name|void
modifier|*
name|mallocedMemory
init|=
name|malloc
argument_list|(
name|size
operator|+
name|align
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mallocedMemory
condition|)
return|return
literal|0
return|;
name|void
modifier|*
name|alignedMemory
init|=
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
operator|(
name|size_t
operator|)
name|mallocedMemory
operator|+
name|align
operator|)
operator|&
operator|~
operator|(
operator|(
name|size_t
operator|)
name|align
operator|-
literal|1
operator|)
operator|)
decl_stmt|;
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|alignedMemory
operator|)
index|[
operator|-
literal|1
index|]
operator|=
name|mallocedMemory
expr_stmt|;
return|return
name|alignedMemory
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_free
argument_list|(
name|void
operator|*
name|p
argument_list|)
block|{
if|if
condition|(
name|p
condition|)
name|free
argument_list|(
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|p
operator|)
index|[
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __MM_MALLOC_H */
end_comment

end_unit

