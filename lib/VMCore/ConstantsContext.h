begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ConstantsContext.h - Constants-related Context Interals -----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines various helper methods and classes used by
end_comment

begin_comment
comment|// LLVMContextImpl for creating and managing constants.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CONSTANTSCONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CONSTANTSCONTEXT_H
end_define

begin_include
include|#
directive|include
file|"llvm/InlineAsm.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Operator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|class
name|ValType
operator|>
expr|struct
name|ConstantTraits
expr_stmt|;
comment|/// UnaryConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement unary constant exprs.
name|class
name|UnaryConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|UnaryConstantExpr
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|Constant *C
argument_list|,
argument|const Type *Ty
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|Ty
argument_list|,
argument|Opcode
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|1
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C
block|;   }
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// BinaryConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement binary constant exprs.
name|class
name|BinaryConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|BinaryConstantExpr
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|Constant *C1
argument_list|,
argument|Constant *C2
argument_list|,
argument|unsigned Flags
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C1->getType()
argument_list|,
argument|Opcode
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|2
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|SubclassOptionalData
operator|=
name|Flags
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// SelectConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement select constant exprs.
name|class
name|SelectConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|SelectConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C2->getType()
argument_list|,
argument|Instruction::Select
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ExtractElementConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// extractelement constant exprs.
name|class
name|ExtractElementConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|ExtractElementConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|cast<VectorType>(C1->getType())->getElementType()
argument_list|,
argument|Instruction::ExtractElement
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|2
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// InsertElementConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// insertelement constant exprs.
name|class
name|InsertElementConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|InsertElementConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C1->getType()
argument_list|,
argument|Instruction::InsertElement
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ShuffleVectorConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// shufflevector constant exprs.
name|class
name|ShuffleVectorConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|ShuffleVectorConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|VectorType::get(                    cast<VectorType>(C1->getType())->getElementType(),                    cast<VectorType>(C3->getType())->getNumElements())
argument_list|,
argument|Instruction::ShuffleVector
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ExtractValueConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// extractvalue constant exprs.
name|class
name|ExtractValueConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ExtractValueConstantExpr
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
specifier|const
name|SmallVector
operator|<
name|unsigned
argument_list|,
literal|4
operator|>
operator|&
name|IdxList
argument_list|,
specifier|const
name|Type
operator|*
name|DestTy
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|DestTy
argument_list|,
name|Instruction
operator|::
name|ExtractValue
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|1
argument_list|)
block|,
name|Indices
argument_list|(
argument|IdxList
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|Agg
block|;   }
comment|/// Indices - These identify which value to extract.
specifier|const
name|SmallVector
operator|<
name|unsigned
block|,
literal|4
operator|>
name|Indices
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// InsertValueConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// insertvalue constant exprs.
name|class
name|InsertValueConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
name|public
operator|:
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|InsertValueConstantExpr
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
name|Constant
operator|*
name|Val
argument_list|,
specifier|const
name|SmallVector
operator|<
name|unsigned
argument_list|,
literal|4
operator|>
operator|&
name|IdxList
argument_list|,
specifier|const
name|Type
operator|*
name|DestTy
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|DestTy
argument_list|,
name|Instruction
operator|::
name|InsertValue
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|2
argument_list|)
block|,
name|Indices
argument_list|(
argument|IdxList
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|Agg
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|Val
block|;   }
comment|/// Indices - These identify the position for the insertion.
specifier|const
name|SmallVector
operator|<
name|unsigned
block|,
literal|4
operator|>
name|Indices
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// GetElementPtrConstantExpr - This class is private to Constants.cpp, and is
comment|/// used behind the scenes to implement getelementpr constant exprs.
name|class
name|GetElementPtrConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|GetElementPtrConstantExpr
argument_list|(
name|Constant
operator|*
name|C
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
operator|&
name|IdxList
argument_list|,
specifier|const
name|Type
operator|*
name|DestTy
argument_list|)
block|;
name|public
operator|:
specifier|static
name|GetElementPtrConstantExpr
operator|*
name|Create
argument_list|(
argument|Constant *C
argument_list|,
argument|const std::vector<Constant*>&IdxList
argument_list|,
argument|const Type *DestTy
argument_list|,
argument|unsigned Flags
argument_list|)
block|{
name|GetElementPtrConstantExpr
operator|*
name|Result
operator|=
name|new
argument_list|(
argument|IdxList.size() +
literal|1
argument_list|)
name|GetElementPtrConstantExpr
argument_list|(
name|C
argument_list|,
name|IdxList
argument_list|,
name|DestTy
argument_list|)
block|;
name|Result
operator|->
name|SubclassOptionalData
operator|=
name|Flags
block|;
return|return
name|Result
return|;
block|}
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|// CompareConstantExpr - This class is private to Constants.cpp, and is used
comment|// behind the scenes to implement ICmp and FCmp constant expressions. This is
comment|// needed in order to store the predicate value for these instructions.
name|struct
name|CompareConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
block|;
comment|// DO NOT IMPLEMENT
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|unsigned
name|short
name|predicate
block|;
name|CompareConstantExpr
argument_list|(
argument|const Type *ty
argument_list|,
argument|Instruction::OtherOps opc
argument_list|,
argument|unsigned short pred
argument_list|,
argument|Constant* LHS
argument_list|,
argument|Constant* RHS
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|ty
argument_list|,
name|opc
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|2
argument_list|)
block|,
name|predicate
argument_list|(
argument|pred
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|LHS
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|RHS
block|;   }
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|UnaryConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|UnaryConstantExpr
operator|,
literal|1
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|UnaryConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|BinaryConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|BinaryConstantExpr
operator|,
literal|2
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|BinaryConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|SelectConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|SelectConstantExpr
operator|,
literal|3
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|SelectConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ExtractElementConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ExtractElementConstantExpr
operator|,
literal|2
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ExtractElementConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|InsertElementConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|InsertElementConstantExpr
operator|,
literal|3
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|InsertElementConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ShuffleVectorConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ShuffleVectorConstantExpr
operator|,
literal|3
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ShuffleVectorConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ExtractValueConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ExtractValueConstantExpr
operator|,
literal|1
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ExtractValueConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|InsertValueConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|InsertValueConstantExpr
operator|,
literal|2
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|InsertValueConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|GetElementPtrConstantExpr
operator|>
operator|:
name|public
name|VariadicOperandTraits
operator|<
name|GetElementPtrConstantExpr
operator|,
literal|1
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|GetElementPtrConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|CompareConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|CompareConstantExpr
operator|,
literal|2
operator|>
block|{ }
expr_stmt|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|CompareConstantExpr
argument_list|,
argument|Value
argument_list|)
struct|struct
name|ExprMapKeyType
block|{
typedef|typedef
name|SmallVector
operator|<
name|unsigned
operator|,
literal|4
operator|>
name|IndexList
expr_stmt|;
name|ExprMapKeyType
argument_list|(
argument|unsigned opc
argument_list|,
argument|const std::vector<Constant*>&ops
argument_list|,
argument|unsigned short flags =
literal|0
argument_list|,
argument|unsigned short optionalflags =
literal|0
argument_list|,
argument|const IndexList&inds = IndexList()
argument_list|)
block|:
name|opcode
argument_list|(
name|opc
argument_list|)
operator|,
name|subclassoptionaldata
argument_list|(
name|optionalflags
argument_list|)
operator|,
name|subclassdata
argument_list|(
name|flags
argument_list|)
operator|,
name|operands
argument_list|(
name|ops
argument_list|)
operator|,
name|indices
argument_list|(
argument|inds
argument_list|)
block|{}
name|uint8_t
name|opcode
expr_stmt|;
name|uint8_t
name|subclassoptionaldata
decl_stmt|;
name|uint16_t
name|subclassdata
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|operands
expr_stmt|;
name|IndexList
name|indices
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ExprMapKeyType
operator|&
name|that
operator|)
specifier|const
block|{
return|return
name|this
operator|->
name|opcode
operator|==
name|that
operator|.
name|opcode
operator|&&
name|this
operator|->
name|subclassdata
operator|==
name|that
operator|.
name|subclassdata
operator|&&
name|this
operator|->
name|subclassoptionaldata
operator|==
name|that
operator|.
name|subclassoptionaldata
operator|&&
name|this
operator|->
name|operands
operator|==
name|that
operator|.
name|operands
operator|&&
name|this
operator|->
name|indices
operator|==
name|that
operator|.
name|indices
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ExprMapKeyType
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|this
operator|->
name|opcode
operator|!=
name|that
operator|.
name|opcode
condition|)
return|return
name|this
operator|->
name|opcode
operator|<
name|that
operator|.
name|opcode
return|;
if|if
condition|(
name|this
operator|->
name|operands
operator|!=
name|that
operator|.
name|operands
condition|)
return|return
name|this
operator|->
name|operands
operator|<
name|that
operator|.
name|operands
return|;
if|if
condition|(
name|this
operator|->
name|subclassdata
operator|!=
name|that
operator|.
name|subclassdata
condition|)
return|return
name|this
operator|->
name|subclassdata
operator|<
name|that
operator|.
name|subclassdata
return|;
if|if
condition|(
name|this
operator|->
name|subclassoptionaldata
operator|!=
name|that
operator|.
name|subclassoptionaldata
condition|)
return|return
name|this
operator|->
name|subclassoptionaldata
operator|<
name|that
operator|.
name|subclassoptionaldata
return|;
if|if
condition|(
name|this
operator|->
name|indices
operator|!=
name|that
operator|.
name|indices
condition|)
return|return
name|this
operator|->
name|indices
operator|<
name|that
operator|.
name|indices
return|;
return|return
name|false
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|ExprMapKeyType
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|that
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|InlineAsmKeyType
block|{
name|InlineAsmKeyType
argument_list|(
argument|StringRef AsmString
argument_list|,
argument|StringRef Constraints
argument_list|,
argument|bool hasSideEffects
argument_list|,
argument|bool isAlignStack
argument_list|)
block|:
name|asm_string
argument_list|(
name|AsmString
argument_list|)
operator|,
name|constraints
argument_list|(
name|Constraints
argument_list|)
operator|,
name|has_side_effects
argument_list|(
name|hasSideEffects
argument_list|)
operator|,
name|is_align_stack
argument_list|(
argument|isAlignStack
argument_list|)
block|{}
name|std
operator|::
name|string
name|asm_string
expr_stmt|;
name|std
operator|::
name|string
name|constraints
expr_stmt|;
name|bool
name|has_side_effects
decl_stmt|;
name|bool
name|is_align_stack
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|InlineAsmKeyType
operator|&
name|that
operator|)
specifier|const
block|{
return|return
name|this
operator|->
name|asm_string
operator|==
name|that
operator|.
name|asm_string
operator|&&
name|this
operator|->
name|constraints
operator|==
name|that
operator|.
name|constraints
operator|&&
name|this
operator|->
name|has_side_effects
operator|==
name|that
operator|.
name|has_side_effects
operator|&&
name|this
operator|->
name|is_align_stack
operator|==
name|that
operator|.
name|is_align_stack
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|InlineAsmKeyType
operator|&
name|that
operator|)
specifier|const
block|{
if|if
condition|(
name|this
operator|->
name|asm_string
operator|!=
name|that
operator|.
name|asm_string
condition|)
return|return
name|this
operator|->
name|asm_string
operator|<
name|that
operator|.
name|asm_string
return|;
if|if
condition|(
name|this
operator|->
name|constraints
operator|!=
name|that
operator|.
name|constraints
condition|)
return|return
name|this
operator|->
name|constraints
operator|<
name|that
operator|.
name|constraints
return|;
if|if
condition|(
name|this
operator|->
name|has_side_effects
operator|!=
name|that
operator|.
name|has_side_effects
condition|)
return|return
name|this
operator|->
name|has_side_effects
operator|<
name|that
operator|.
name|has_side_effects
return|;
if|if
condition|(
name|this
operator|->
name|is_align_stack
operator|!=
name|that
operator|.
name|is_align_stack
condition|)
return|return
name|this
operator|->
name|is_align_stack
operator|<
name|that
operator|.
name|is_align_stack
return|;
return|return
name|false
return|;
block|}
name|bool
name|operator
decl|!=
argument_list|(
specifier|const
name|InlineAsmKeyType
operator|&
name|that
argument_list|)
decl|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|that
operator|)
return|;
block|}
end_struct

begin_comment
unit|};
comment|// The number of operands for each ConstantCreator::create method is
end_comment

begin_comment
comment|// determined by the ConstantTraits template.
end_comment

begin_comment
comment|// ConstantCreator - A class that is used to create constants by
end_comment

begin_comment
comment|// ConstantUniqueMap*.  This class should be partially specialized if there is
end_comment

begin_comment
comment|// something strange that needs to be done to interface to the ctor for the
end_comment

begin_comment
comment|// constant.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|Alloc
operator|>
expr|struct
name|ConstantTraits
operator|<
name|std
operator|::
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
expr|>
block|{
specifier|static
name|unsigned
name|uses
argument_list|(
argument|const std::vector<T
argument_list|,
argument|Alloc>& v
argument_list|)
block|{
return|return
name|v
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantTraits
operator|<
name|Constant
operator|*
operator|>
block|{
specifier|static
name|unsigned
name|uses
argument_list|(
argument|Constant * const& v
argument_list|)
block|{
return|return
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ConstantClass
operator|,
name|class
name|TypeClass
operator|,
name|class
name|ValType
operator|>
expr|struct
name|ConstantCreator
block|{
specifier|static
name|ConstantClass
operator|*
name|create
argument_list|(
argument|const TypeClass *Ty
argument_list|,
argument|const ValType&V
argument_list|)
block|{
return|return
name|new
argument_list|(
argument|ConstantTraits<ValType>::uses(V)
argument_list|)
name|ConstantClass
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ConstantClass
operator|>
expr|struct
name|ConstantKeyData
block|{
typedef|typedef
name|void
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantClass *C
argument_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Unknown Constant type!"
argument_list|)
block|;   }
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantCreator
operator|<
name|ConstantExpr
operator|,
name|Type
operator|,
name|ExprMapKeyType
operator|>
block|{
specifier|static
name|ConstantExpr
operator|*
name|create
argument_list|(
argument|const Type *Ty
argument_list|,
argument|const ExprMapKeyType&V
argument_list|,
argument|unsigned short pred =
literal|0
argument_list|)
block|{
if|if
condition|(
name|Instruction
operator|::
name|isCast
argument_list|(
name|V
operator|.
name|opcode
argument_list|)
condition|)
return|return
name|new
name|UnaryConstantExpr
argument_list|(
name|V
operator|.
name|opcode
argument_list|,
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|Ty
argument_list|)
return|;
if|if
condition|(
operator|(
name|V
operator|.
name|opcode
operator|>=
name|Instruction
operator|::
name|BinaryOpsBegin
operator|&&
name|V
operator|.
name|opcode
operator|<
name|Instruction
operator|::
name|BinaryOpsEnd
operator|)
condition|)
return|return
name|new
name|BinaryConstantExpr
argument_list|(
name|V
operator|.
name|opcode
argument_list|,
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|,
name|V
operator|.
name|subclassoptionaldata
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|Select
condition|)
return|return
name|new
name|SelectConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|2
index|]
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|ExtractElement
condition|)
return|return
name|new
name|ExtractElementConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|InsertElement
condition|)
return|return
name|new
name|InsertElementConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|2
index|]
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|ShuffleVector
condition|)
return|return
name|new
name|ShuffleVectorConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|2
index|]
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|InsertValue
condition|)
return|return
name|new
name|InsertValueConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|,
name|V
operator|.
name|indices
argument_list|,
name|Ty
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|ExtractValue
condition|)
return|return
name|new
name|ExtractValueConstantExpr
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|indices
argument_list|,
name|Ty
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|GetElementPtr
condition|)
block|{
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|IdxList
argument_list|(
name|V
operator|.
name|operands
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
name|V
operator|.
name|operands
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|GetElementPtrConstantExpr
operator|::
name|Create
argument_list|(
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|IdxList
argument_list|,
name|Ty
argument_list|,
name|V
operator|.
name|subclassoptionaldata
argument_list|)
return|;
block|}
end_if

begin_comment
comment|// The compare instructions are weird. We have to encode the predicate
end_comment

begin_comment
comment|// value and it is combined with the instruction opcode by multiplying
end_comment

begin_comment
comment|// the opcode by one hundred. We must decode this to get the predicate.
end_comment

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|ICmp
condition|)
return|return
name|new
name|CompareConstantExpr
argument_list|(
name|Ty
argument_list|,
name|Instruction
operator|::
name|ICmp
argument_list|,
name|V
operator|.
name|subclassdata
argument_list|,
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|)
return|;
end_if

begin_if
if|if
condition|(
name|V
operator|.
name|opcode
operator|==
name|Instruction
operator|::
name|FCmp
condition|)
return|return
name|new
name|CompareConstantExpr
argument_list|(
name|Ty
argument_list|,
name|Instruction
operator|::
name|FCmp
argument_list|,
name|V
operator|.
name|subclassdata
argument_list|,
name|V
operator|.
name|operands
index|[
literal|0
index|]
argument_list|,
name|V
operator|.
name|operands
index|[
literal|1
index|]
argument_list|)
return|;
end_if

begin_expr_stmt
name|llvm_unreachable
argument_list|(
literal|"Invalid ConstantExpr!"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantExpr
operator|>
block|{
typedef|typedef
name|ExprMapKeyType
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantExpr *CE
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|Operands
block|;
name|Operands
operator|.
name|reserve
argument_list|(
name|CE
operator|->
name|getNumOperands
argument_list|()
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|CE
operator|->
name|getNumOperands
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Operands
operator|.
name|push_back
argument_list|(
name|cast
operator|<
name|Constant
operator|>
operator|(
name|CE
operator|->
name|getOperand
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ExprMapKeyType
argument_list|(
name|CE
operator|->
name|getOpcode
argument_list|()
argument_list|,
name|Operands
argument_list|,
name|CE
operator|->
name|isCompare
argument_list|()
condition|?
name|CE
operator|->
name|getPredicate
argument_list|()
else|:
literal|0
argument_list|,
name|CE
operator|->
name|getRawSubclassOptionalData
argument_list|()
argument_list|,
name|CE
operator|->
name|hasIndices
argument_list|()
condition|?
name|CE
operator|->
name|getIndices
argument_list|()
else|:
name|SmallVector
operator|<
name|unsigned
argument_list|,
literal|4
operator|>
operator|(
operator|)
argument_list|)
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
comment|// ConstantAggregateZero does not take extra "value" argument...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ValType
operator|>
expr|struct
name|ConstantCreator
operator|<
name|ConstantAggregateZero
operator|,
name|Type
operator|,
name|ValType
operator|>
block|{
specifier|static
name|ConstantAggregateZero
operator|*
name|create
argument_list|(
argument|const Type *Ty
argument_list|,
argument|const ValType&V
argument_list|)
block|{
return|return
name|new
name|ConstantAggregateZero
argument_list|(
name|Ty
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantVector
operator|>
block|{
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|ValType
expr_stmt|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantVector *CP
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|Elements
block|;
name|Elements
operator|.
name|reserve
argument_list|(
name|CP
operator|->
name|getNumOperands
argument_list|()
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|CP
operator|->
name|getNumOperands
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Elements
operator|.
name|push_back
argument_list|(
name|CP
operator|->
name|getOperand
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Elements
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantAggregateZero
operator|>
block|{
typedef|typedef
name|char
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantAggregateZero *C
argument_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantArray
operator|>
block|{
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|ValType
expr_stmt|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantArray *CA
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|Elements
block|;
name|Elements
operator|.
name|reserve
argument_list|(
name|CA
operator|->
name|getNumOperands
argument_list|()
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|CA
operator|->
name|getNumOperands
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Elements
operator|.
name|push_back
argument_list|(
name|cast
operator|<
name|Constant
operator|>
operator|(
name|CA
operator|->
name|getOperand
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Elements
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantStruct
operator|>
block|{
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|ValType
expr_stmt|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantStruct *CS
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|Constant
operator|*
operator|>
name|Elements
block|;
name|Elements
operator|.
name|reserve
argument_list|(
name|CS
operator|->
name|getNumOperands
argument_list|()
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|CS
operator|->
name|getNumOperands
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Elements
operator|.
name|push_back
argument_list|(
name|cast
operator|<
name|Constant
operator|>
operator|(
name|CS
operator|->
name|getOperand
argument_list|(
name|i
argument_list|)
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Elements
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
comment|// ConstantPointerNull does not take extra "value" argument...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ValType
operator|>
expr|struct
name|ConstantCreator
operator|<
name|ConstantPointerNull
operator|,
name|PointerType
operator|,
name|ValType
operator|>
block|{
specifier|static
name|ConstantPointerNull
operator|*
name|create
argument_list|(
argument|const PointerType *Ty
argument_list|,
argument|const ValType&V
argument_list|)
block|{
return|return
name|new
name|ConstantPointerNull
argument_list|(
name|Ty
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|ConstantPointerNull
operator|>
block|{
typedef|typedef
name|char
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|ConstantPointerNull *C
argument_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// UndefValue does not take extra "value" argument...
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ValType
operator|>
expr|struct
name|ConstantCreator
operator|<
name|UndefValue
operator|,
name|Type
operator|,
name|ValType
operator|>
block|{
specifier|static
name|UndefValue
operator|*
name|create
argument_list|(
argument|const Type *Ty
argument_list|,
argument|const ValType&V
argument_list|)
block|{
return|return
name|new
name|UndefValue
argument_list|(
name|Ty
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|UndefValue
operator|>
block|{
typedef|typedef
name|char
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|UndefValue *C
argument_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|ConstantCreator
operator|<
name|InlineAsm
operator|,
name|PointerType
operator|,
name|InlineAsmKeyType
operator|>
block|{
specifier|static
name|InlineAsm
operator|*
name|create
argument_list|(
argument|const PointerType *Ty
argument_list|,
argument|const InlineAsmKeyType&Key
argument_list|)
block|{
return|return
name|new
name|InlineAsm
argument_list|(
name|Ty
argument_list|,
name|Key
operator|.
name|asm_string
argument_list|,
name|Key
operator|.
name|constraints
argument_list|,
name|Key
operator|.
name|has_side_effects
argument_list|,
name|Key
operator|.
name|is_align_stack
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|ConstantKeyData
operator|<
name|InlineAsm
operator|>
block|{
typedef|typedef
name|InlineAsmKeyType
name|ValType
typedef|;
specifier|static
name|ValType
name|getValType
argument_list|(
argument|InlineAsm *Asm
argument_list|)
block|{
return|return
name|InlineAsmKeyType
argument_list|(
name|Asm
operator|->
name|getAsmString
argument_list|()
argument_list|,
name|Asm
operator|->
name|getConstraintString
argument_list|()
argument_list|,
name|Asm
operator|->
name|hasSideEffects
argument_list|()
argument_list|,
name|Asm
operator|->
name|isAlignStack
argument_list|()
argument_list|)
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ValType
operator|,
name|class
name|TypeClass
operator|,
name|class
name|ConstantClass
operator|,
name|bool
name|HasLargeKey
operator|=
name|false
comment|/*true for arrays and structs*/
operator|>
name|class
name|ConstantUniqueMap
operator|:
name|public
name|AbstractTypeUser
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|TypeClass
operator|*
operator|,
name|ValType
operator|>
name|MapKey
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|MapKey
operator|,
name|ConstantClass
operator|*
operator|>
name|MapTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|ConstantClass
operator|*
operator|,
name|typename
name|MapTy
operator|::
name|iterator
operator|>
name|InverseMapTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|DerivedType
operator|*
operator|,
name|typename
name|MapTy
operator|::
name|iterator
operator|>
name|AbstractTypeMapTy
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_comment
comment|/// Map - This is the main map from the element descriptor to the Constants.
end_comment

begin_comment
comment|/// This is the primary way we avoid creating two of the same shape
end_comment

begin_comment
comment|/// constant.
end_comment

begin_decl_stmt
name|MapTy
name|Map
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// InverseMap - If "HasLargeKey" is true, this contains an inverse mapping
end_comment

begin_comment
comment|/// from the constants to their element in Map.  This is important for
end_comment

begin_comment
comment|/// removal of constants from the array, which would otherwise have to scan
end_comment

begin_comment
comment|/// through the map with very large keys.
end_comment

begin_decl_stmt
name|InverseMapTy
name|InverseMap
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// AbstractTypeMap - Map for abstract type constants.
end_comment

begin_comment
comment|///
end_comment

begin_decl_stmt
name|AbstractTypeMapTy
name|AbstractTypeMap
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|map_begin
argument_list|()
block|{
return|return
name|Map
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|map_end
argument_list|()
block|{
return|return
name|Map
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|freeConstants
parameter_list|()
block|{
for|for
control|(
name|typename
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|Map
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Map
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
comment|// Asserts that use_empty().
name|delete
name|I
operator|->
name|second
decl_stmt|;
block|}
block|}
end_function

begin_comment
comment|/// InsertOrGetItem - Return an iterator for the specified element.
end_comment

begin_comment
comment|/// If the element exists in the map, the returned iterator points to the
end_comment

begin_comment
comment|/// entry and Exists=true.  If not, the iterator points to the newly
end_comment

begin_comment
comment|/// inserted entry and returns Exists=false.  Newly inserted entries have
end_comment

begin_comment
comment|/// I->second == 0, and should be filled in.
end_comment

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|InsertOrGetItem
argument_list|(
argument|std::pair<MapKey
argument_list|,
argument|ConstantClass *>&InsertVal
argument_list|,
argument|bool&Exists
argument_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|typename
name|MapTy
operator|::
name|iterator
block|,
name|bool
operator|>
name|IP
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|InsertVal
argument_list|)
block|;
name|Exists
operator|=
operator|!
name|IP
operator|.
name|second
block|;
return|return
name|IP
operator|.
name|first
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|FindExistingElement
argument_list|(
argument|ConstantClass *CP
argument_list|)
block|{
if|if
condition|(
name|HasLargeKey
condition|)
block|{
name|typename
name|InverseMapTy
operator|::
name|iterator
name|IMI
operator|=
name|InverseMap
operator|.
name|find
argument_list|(
name|CP
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|IMI
operator|!=
name|InverseMap
operator|.
name|end
argument_list|()
operator|&&
name|IMI
operator|->
name|second
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
name|IMI
operator|->
name|second
operator|->
name|second
operator|==
name|CP
operator|&&
literal|"InverseMap corrupt!"
argument_list|)
expr_stmt|;
return|return
name|IMI
operator|->
name|second
return|;
block|}
name|typename
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|MapKey
argument_list|(
name|static_cast
operator|<
specifier|const
name|TypeClass
operator|*
operator|>
operator|(
name|CP
operator|->
name|getRawType
argument_list|()
operator|)
argument_list|,
name|ConstantKeyData
operator|<
name|ConstantClass
operator|>
operator|::
name|getValType
argument_list|(
name|CP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|I
operator|==
name|Map
operator|.
name|end
argument_list|()
operator|||
name|I
operator|->
name|second
operator|!=
name|CP
condition|)
block|{
comment|// FIXME: This should not use a linear scan.  If this gets to be a
comment|// performance problem, someone should look at this.
for|for
control|(
name|I
operator|=
name|Map
operator|.
name|begin
argument_list|()
init|;
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
name|I
operator|->
name|second
operator|!=
name|CP
condition|;
operator|++
name|I
control|)
comment|/* empty */
empty_stmt|;
block|}
end_if

begin_return
return|return
name|I
return|;
end_return

begin_macro
unit|}        void
name|AddAbstractTypeUser
argument_list|(
argument|const Type *Ty
argument_list|,
argument|typename MapTy::iterator I
argument_list|)
end_macro

begin_block
block|{
comment|// If the type of the constant is abstract, make sure that an entry
comment|// exists for it in the AbstractTypeMap.
if|if
condition|(
name|Ty
operator|->
name|isAbstract
argument_list|()
condition|)
block|{
specifier|const
name|DerivedType
modifier|*
name|DTy
init|=
name|static_cast
operator|<
specifier|const
name|DerivedType
operator|*
operator|>
operator|(
name|Ty
operator|)
decl_stmt|;
name|typename
name|AbstractTypeMapTy
operator|::
name|iterator
name|TI
operator|=
name|AbstractTypeMap
operator|.
name|find
argument_list|(
name|DTy
argument_list|)
expr_stmt|;
if|if
condition|(
name|TI
operator|==
name|AbstractTypeMap
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// Add ourselves to the ATU list of the type.
name|cast
operator|<
name|DerivedType
operator|>
operator|(
name|DTy
operator|)
operator|->
name|addAbstractTypeUser
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|AbstractTypeMap
operator|.
name|insert
argument_list|(
name|TI
argument_list|,
name|std
operator|::
name|make_pair
argument_list|(
name|DTy
argument_list|,
name|I
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_block

begin_decl_stmt
name|ConstantClass
modifier|*
name|Create
argument_list|(
specifier|const
name|TypeClass
operator|*
name|Ty
argument_list|,
specifier|const
name|ValType
operator|&
name|V
argument_list|,
name|typename
name|MapTy
operator|::
name|iterator
name|I
argument_list|)
block|{
name|ConstantClass
modifier|*
name|Result
init|=
name|ConstantCreator
operator|<
name|ConstantClass
decl_stmt|,
name|TypeClass
decl_stmt|,
name|ValType
decl|>::
name|create
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|Result
operator|->
name|getType
argument_list|()
operator|==
name|Ty
operator|&&
literal|"Type specified is not correct!"
argument_list|)
expr_stmt|;
name|I
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|I
argument_list|,
name|std
operator|::
name|make_pair
argument_list|(
name|MapKey
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|)
argument_list|,
name|Result
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|HasLargeKey
condition|)
comment|// Remember the reverse mapping if needed.
name|InverseMap
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Result
argument_list|,
name|I
argument_list|)
argument_list|)
expr_stmt|;
name|AddAbstractTypeUser
argument_list|(
name|Ty
argument_list|,
name|I
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|/// getOrCreate - Return the specified constant from the map, creating it if
end_comment

begin_comment
comment|/// necessary.
end_comment

begin_function
name|ConstantClass
modifier|*
name|getOrCreate
parameter_list|(
specifier|const
name|TypeClass
modifier|*
name|Ty
parameter_list|,
specifier|const
name|ValType
modifier|&
name|V
parameter_list|)
block|{
name|MapKey
name|Lookup
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|)
decl_stmt|;
name|ConstantClass
modifier|*
name|Result
init|=
literal|0
decl_stmt|;
name|typename
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Lookup
argument_list|)
expr_stmt|;
comment|// Is it in the map?
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
name|Result
operator|=
name|I
operator|->
name|second
expr_stmt|;
if|if
condition|(
operator|!
name|Result
condition|)
block|{
comment|// If no preexisting value, create one now...
name|Result
operator|=
name|Create
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|,
name|I
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
return|;
block|}
end_function

begin_decl_stmt
name|void
name|UpdateAbstractTypeMap
argument_list|(
specifier|const
name|DerivedType
operator|*
name|Ty
argument_list|,
name|typename
name|MapTy
operator|::
name|iterator
name|I
argument_list|)
block|{
name|assert
argument_list|(
name|AbstractTypeMap
operator|.
name|count
argument_list|(
name|Ty
argument_list|)
operator|&&
literal|"Abstract type not in AbstractTypeMap?"
argument_list|)
expr_stmt|;
name|typename
name|MapTy
operator|::
name|iterator
operator|&
name|ATMEntryIt
operator|=
name|AbstractTypeMap
index|[
name|Ty
index|]
expr_stmt|;
if|if
condition|(
name|ATMEntryIt
operator|==
name|I
condition|)
block|{
comment|// Yes, we are removing the representative entry for this type.
comment|// See if there are any other entries of the same type.
name|typename
name|MapTy
operator|::
name|iterator
name|TmpIt
operator|=
name|ATMEntryIt
expr_stmt|;
comment|// First check the entry before this one...
if|if
condition|(
name|TmpIt
operator|!=
name|Map
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|TmpIt
expr_stmt|;
if|if
condition|(
name|TmpIt
operator|->
name|first
operator|.
name|first
operator|!=
name|Ty
condition|)
comment|// Not the same type, move back...
operator|++
name|TmpIt
expr_stmt|;
block|}
comment|// If we didn't find the same type, try to move forward...
if|if
condition|(
name|TmpIt
operator|==
name|ATMEntryIt
condition|)
block|{
operator|++
name|TmpIt
expr_stmt|;
if|if
condition|(
name|TmpIt
operator|==
name|Map
operator|.
name|end
argument_list|()
operator|||
name|TmpIt
operator|->
name|first
operator|.
name|first
operator|!=
name|Ty
condition|)
operator|--
name|TmpIt
expr_stmt|;
comment|// No entry afterwards with the same type
block|}
comment|// If there is another entry in the map of the same abstract type,
comment|// update the AbstractTypeMap entry now.
if|if
condition|(
name|TmpIt
operator|!=
name|ATMEntryIt
condition|)
block|{
name|ATMEntryIt
operator|=
name|TmpIt
expr_stmt|;
block|}
else|else
block|{
comment|// Otherwise, we are removing the last instance of this type
comment|// from the table.  Remove from the ATM, and from user list.
name|cast
operator|<
name|DerivedType
operator|>
operator|(
name|Ty
operator|)
operator|->
name|removeAbstractTypeUser
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|AbstractTypeMap
operator|.
name|erase
argument_list|(
name|Ty
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_function
name|void
name|remove
parameter_list|(
name|ConstantClass
modifier|*
name|CP
parameter_list|)
block|{
name|typename
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|FindExistingElement
argument_list|(
name|CP
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
literal|"Constant not found in constant table!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|->
name|second
operator|==
name|CP
operator|&&
literal|"Didn't find correct element?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|HasLargeKey
condition|)
comment|// Remember the reverse mapping if needed.
name|InverseMap
operator|.
name|erase
argument_list|(
name|CP
argument_list|)
expr_stmt|;
comment|// Now that we found the entry, make sure this isn't the entry that
comment|// the AbstractTypeMap points to.
specifier|const
name|TypeClass
modifier|*
name|Ty
init|=
name|I
operator|->
name|first
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|Ty
operator|->
name|isAbstract
argument_list|()
condition|)
name|UpdateAbstractTypeMap
argument_list|(
name|static_cast
operator|<
specifier|const
name|DerivedType
operator|*
operator|>
operator|(
name|Ty
operator|)
argument_list|,
name|I
argument_list|)
expr_stmt|;
name|Map
operator|.
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/// MoveConstantToNewSlot - If we are about to change C to be the element
end_comment

begin_comment
comment|/// specified by I, update our internal data structures to reflect this
end_comment

begin_comment
comment|/// fact.
end_comment

begin_decl_stmt
name|void
name|MoveConstantToNewSlot
argument_list|(
name|ConstantClass
operator|*
name|C
argument_list|,
name|typename
name|MapTy
operator|::
name|iterator
name|I
argument_list|)
block|{
comment|// First, remove the old location of the specified constant in the map.
name|typename
name|MapTy
operator|::
name|iterator
name|OldI
operator|=
name|FindExistingElement
argument_list|(
name|C
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|OldI
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
literal|"Constant not found in constant table!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|OldI
operator|->
name|second
operator|==
name|C
operator|&&
literal|"Didn't find correct element?"
argument_list|)
expr_stmt|;
comment|// If this constant is the representative element for its abstract type,
comment|// update the AbstractTypeMap so that the representative element is I.
comment|//
comment|// This must use getRawType() because if the type is under refinement, we
comment|// will get the refineAbstractType callback below, and we don't want to
comment|// kick union find in on the constant.
if|if
condition|(
name|C
operator|->
name|getRawType
argument_list|()
operator|->
name|isAbstract
argument_list|()
condition|)
block|{
name|typename
name|AbstractTypeMapTy
operator|::
name|iterator
name|ATI
operator|=
name|AbstractTypeMap
operator|.
name|find
argument_list|(
name|cast
operator|<
name|DerivedType
operator|>
operator|(
name|C
operator|->
name|getRawType
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ATI
operator|!=
name|AbstractTypeMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Abstract type not in AbstractTypeMap?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ATI
operator|->
name|second
operator|==
name|OldI
condition|)
name|ATI
operator|->
name|second
operator|=
name|I
expr_stmt|;
block|}
comment|// Remove the old entry from the map.
name|Map
operator|.
name|erase
argument_list|(
name|OldI
argument_list|)
expr_stmt|;
comment|// Update the inverse map so that we know that this constant is now
comment|// located at descriptor I.
if|if
condition|(
name|HasLargeKey
condition|)
block|{
name|assert
argument_list|(
name|I
operator|->
name|second
operator|==
name|C
operator|&&
literal|"Bad inversemap entry!"
argument_list|)
expr_stmt|;
name|InverseMap
index|[
name|C
index|]
operator|=
name|I
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_function
name|void
name|refineAbstractType
parameter_list|(
specifier|const
name|DerivedType
modifier|*
name|OldTy
parameter_list|,
specifier|const
name|Type
modifier|*
name|NewTy
parameter_list|)
block|{
name|typename
name|AbstractTypeMapTy
operator|::
name|iterator
name|I
operator|=
name|AbstractTypeMap
operator|.
name|find
argument_list|(
name|OldTy
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|AbstractTypeMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Abstract type not in AbstractTypeMap?"
argument_list|)
expr_stmt|;
comment|// Convert a constant at a time until the last one is gone.  The last one
comment|// leaving will remove() itself, causing the AbstractTypeMapEntry to be
comment|// eliminated eventually.
do|do
block|{
name|ConstantClass
modifier|*
name|C
init|=
name|I
operator|->
name|second
operator|->
name|second
decl_stmt|;
name|MapKey
name|Key
argument_list|(
name|cast
operator|<
name|TypeClass
operator|>
operator|(
name|NewTy
operator|)
argument_list|,
name|ConstantKeyData
operator|<
name|ConstantClass
operator|>
operator|::
name|getValType
argument_list|(
name|C
argument_list|)
argument_list|)
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|typename
name|MapTy
operator|::
name|iterator
operator|,
name|bool
operator|>
name|IP
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Key
argument_list|,
name|C
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|IP
operator|.
name|second
condition|)
block|{
comment|// The map didn't previously have an appropriate constant in the
comment|// new type.
comment|// Remove the old entry.
name|typename
name|MapTy
operator|::
name|iterator
name|OldI
operator|=
name|Map
operator|.
name|find
argument_list|(
name|MapKey
argument_list|(
name|cast
operator|<
name|TypeClass
operator|>
operator|(
name|OldTy
operator|)
argument_list|,
name|IP
operator|.
name|first
operator|->
name|first
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|OldI
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
literal|"Constant not in map!"
argument_list|)
expr_stmt|;
name|UpdateAbstractTypeMap
argument_list|(
name|OldTy
argument_list|,
name|OldI
argument_list|)
expr_stmt|;
name|Map
operator|.
name|erase
argument_list|(
name|OldI
argument_list|)
expr_stmt|;
comment|// Set the constant's type. This is done in place!
name|setType
argument_list|(
name|C
argument_list|,
name|NewTy
argument_list|)
expr_stmt|;
comment|// Update the inverse map so that we know that this constant is now
comment|// located at descriptor I.
if|if
condition|(
name|HasLargeKey
condition|)
name|InverseMap
index|[
name|C
index|]
operator|=
name|IP
operator|.
name|first
expr_stmt|;
name|AddAbstractTypeUser
argument_list|(
name|NewTy
argument_list|,
name|IP
operator|.
name|first
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The map already had an appropriate constant in the new type, so
comment|// there's no longer a need for the old constant.
name|C
operator|->
name|uncheckedReplaceAllUsesWith
argument_list|(
name|IP
operator|.
name|first
operator|->
name|second
argument_list|)
expr_stmt|;
name|C
operator|->
name|destroyConstant
argument_list|()
expr_stmt|;
comment|// This constant is now dead, destroy it.
block|}
name|I
operator|=
name|AbstractTypeMap
operator|.
name|find
argument_list|(
name|OldTy
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|I
operator|!=
name|AbstractTypeMap
operator|.
name|end
argument_list|()
condition|)
do|;
block|}
end_function

begin_comment
comment|// If the type became concrete without being refined to any other existing
end_comment

begin_comment
comment|// type, we just remove ourselves from the ATU list.
end_comment

begin_function
name|void
name|typeBecameConcrete
parameter_list|(
specifier|const
name|DerivedType
modifier|*
name|AbsTy
parameter_list|)
block|{
name|AbsTy
operator|->
name|removeAbstractTypeUser
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|dump
argument_list|()
specifier|const
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Constant.cpp: ConstantUniqueMap\n"
argument_list|)
block|;   }
end_expr_stmt

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

