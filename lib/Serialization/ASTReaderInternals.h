begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ASTReaderInternals.h - AST Reader Internals ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file provides internal definitions used in the AST reader.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_SERIALIZATION_ASTREADERINTERNALS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_SERIALIZATION_ASTREADERINTERNALS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclarationName.h"
end_include

begin_include
include|#
directive|include
file|"clang/Serialization/ASTBitCodes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/TinyPtrVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/OnDiskHashTable.h"
end_include

begin_include
include|#
directive|include
file|"MultiOnDiskHashTable.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTReader
decl_stmt|;
name|class
name|HeaderSearch
decl_stmt|;
struct_decl|struct
name|HeaderFileInfo
struct_decl|;
name|class
name|FileEntry
decl_stmt|;
name|namespace
name|serialization
block|{
name|class
name|ModuleFile
decl_stmt|;
name|namespace
name|reader
block|{
comment|/// \brief Class that performs name lookup into a DeclContext stored
comment|/// in an AST file.
name|class
name|ASTDeclContextNameLookupTrait
block|{
name|ASTReader
modifier|&
name|Reader
decl_stmt|;
name|ModuleFile
modifier|&
name|F
decl_stmt|;
name|public
label|:
comment|// Maximum number of lookup tables we allow before condensing the tables.
specifier|static
specifier|const
name|int
name|MaxTables
init|=
literal|4
decl_stmt|;
comment|/// The lookup result is a list of global declaration IDs.
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|DeclID
operator|,
literal|4
operator|>
name|data_type
expr_stmt|;
struct|struct
name|data_type_builder
block|{
name|data_type
modifier|&
name|Data
decl_stmt|;
name|llvm
operator|::
name|DenseSet
operator|<
name|DeclID
operator|>
name|Found
expr_stmt|;
name|data_type_builder
argument_list|(
name|data_type
operator|&
name|D
argument_list|)
operator|:
name|Data
argument_list|(
argument|D
argument_list|)
block|{}
name|void
name|insert
argument_list|(
argument|DeclID ID
argument_list|)
block|{
comment|// Just use a linear scan unless we have more than a few IDs.
if|if
condition|(
name|Found
operator|.
name|empty
argument_list|()
operator|&&
operator|!
name|Data
operator|.
name|empty
argument_list|()
condition|)
block|{
if|if
condition|(
name|Data
operator|.
name|size
argument_list|()
operator|<=
literal|4
condition|)
block|{
for|for
control|(
name|auto
name|I
range|:
name|Found
control|)
if|if
condition|(
name|I
operator|==
name|ID
condition|)
return|return;
name|Data
operator|.
name|push_back
argument_list|(
name|ID
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Switch to tracking found IDs in the set.
name|Found
operator|.
name|insert
argument_list|(
name|Data
operator|.
name|begin
argument_list|()
argument_list|,
name|Data
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Found
operator|.
name|insert
argument_list|(
name|ID
argument_list|)
operator|.
name|second
condition|)
name|Data
operator|.
name|push_back
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
typedef|typedef
name|unsigned
name|hash_value_type
typedef|;
typedef|typedef
name|unsigned
name|offset_type
typedef|;
typedef|typedef
name|ModuleFile
modifier|*
name|file_type
typedef|;
typedef|typedef
name|DeclarationName
name|external_key_type
typedef|;
typedef|typedef
name|DeclarationNameKey
name|internal_key_type
typedef|;
name|explicit
name|ASTDeclContextNameLookupTrait
argument_list|(
name|ASTReader
operator|&
name|Reader
argument_list|,
name|ModuleFile
operator|&
name|F
argument_list|)
operator|:
name|Reader
argument_list|(
name|Reader
argument_list|)
operator|,
name|F
argument_list|(
argument|F
argument_list|)
block|{ }
specifier|static
name|bool
name|EqualKey
argument_list|(
argument|const internal_key_type&a
argument_list|,
argument|const internal_key_type&b
argument_list|)
block|{
return|return
name|a
operator|==
name|b
return|;
block|}
specifier|static
name|hash_value_type
name|ComputeHash
parameter_list|(
specifier|const
name|internal_key_type
modifier|&
name|Key
parameter_list|)
block|{
return|return
name|Key
operator|.
name|getHash
argument_list|()
return|;
block|}
specifier|static
name|internal_key_type
name|GetInternalKey
parameter_list|(
specifier|const
name|external_key_type
modifier|&
name|Name
parameter_list|)
block|{
return|return
name|Name
return|;
block|}
specifier|static
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|ReadKeyDataLength
argument_list|(
argument|const unsigned char *&d
argument_list|)
expr_stmt|;
name|internal_key_type
name|ReadKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
name|void
name|ReadDataInto
parameter_list|(
name|internal_key_type
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
name|DataLen
parameter_list|,
name|data_type_builder
modifier|&
name|Val
parameter_list|)
function_decl|;
specifier|static
name|void
name|MergeDataInto
parameter_list|(
specifier|const
name|data_type
modifier|&
name|From
parameter_list|,
name|data_type_builder
modifier|&
name|To
parameter_list|)
block|{
name|To
operator|.
name|Data
operator|.
name|reserve
argument_list|(
name|To
operator|.
name|Data
operator|.
name|size
argument_list|()
operator|+
name|From
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DeclID
name|ID
range|:
name|From
control|)
name|To
operator|.
name|insert
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
name|file_type
name|ReadFileRef
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
modifier|&
name|d
parameter_list|)
function_decl|;
block|}
empty_stmt|;
struct|struct
name|DeclContextLookupTable
block|{
name|MultiOnDiskHashTable
operator|<
name|ASTDeclContextNameLookupTrait
operator|>
name|Table
expr_stmt|;
comment|// These look redundant, but don't remove them -- they work around MSVC 2013's
comment|// inability to synthesize move operations. Without them, the
comment|// MultiOnDiskHashTable will be copied (despite being move-only!).
name|DeclContextLookupTable
argument_list|()
operator|:
name|Table
argument_list|()
block|{}
name|DeclContextLookupTable
argument_list|(
name|DeclContextLookupTable
operator|&&
name|O
argument_list|)
operator|:
name|Table
argument_list|(
argument|std::move(O.Table)
argument_list|)
block|{}
name|DeclContextLookupTable
operator|&
name|operator
operator|=
operator|(
name|DeclContextLookupTable
operator|&&
name|O
operator|)
block|{
name|Table
operator|=
name|std
operator|::
name|move
argument_list|(
name|O
operator|.
name|Table
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
struct|;
comment|/// \brief Base class for the trait describing the on-disk hash table for the
comment|/// identifiers in an AST file.
comment|///
comment|/// This class is not useful by itself; rather, it provides common
comment|/// functionality for accessing the on-disk hash table of identifiers
comment|/// in an AST file. Different subclasses customize that functionality
comment|/// based on what information they are interested in. Those subclasses
comment|/// must provide the \c data_type typedef and the ReadData operation,
comment|/// only.
name|class
name|ASTIdentifierLookupTraitBase
block|{
name|public
label|:
typedef|typedef
name|StringRef
name|external_key_type
typedef|;
typedef|typedef
name|StringRef
name|internal_key_type
typedef|;
typedef|typedef
name|unsigned
name|hash_value_type
typedef|;
typedef|typedef
name|unsigned
name|offset_type
typedef|;
specifier|static
name|bool
name|EqualKey
parameter_list|(
specifier|const
name|internal_key_type
modifier|&
name|a
parameter_list|,
specifier|const
name|internal_key_type
modifier|&
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
name|b
return|;
block|}
specifier|static
name|hash_value_type
name|ComputeHash
parameter_list|(
specifier|const
name|internal_key_type
modifier|&
name|a
parameter_list|)
function_decl|;
specifier|static
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|ReadKeyDataLength
argument_list|(
argument|const unsigned char*& d
argument_list|)
expr_stmt|;
comment|// This hopefully will just get inlined and removed by the optimizer.
specifier|static
specifier|const
name|internal_key_type
modifier|&
name|GetInternalKey
parameter_list|(
specifier|const
name|external_key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
return|;
block|}
comment|// This hopefully will just get inlined and removed by the optimizer.
specifier|static
specifier|const
name|external_key_type
modifier|&
name|GetExternalKey
parameter_list|(
specifier|const
name|internal_key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
return|;
block|}
specifier|static
name|internal_key_type
name|ReadKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
name|n
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// \brief Class that performs lookup for an identifier stored in an AST file.
name|class
name|ASTIdentifierLookupTrait
range|:
name|public
name|ASTIdentifierLookupTraitBase
block|{
name|ASTReader
operator|&
name|Reader
block|;
name|ModuleFile
operator|&
name|F
block|;
comment|// If we know the IdentifierInfo in advance, it is here and we will
comment|// not build a new one. Used when deserializing information about an
comment|// identifier that was constructed before the AST file was read.
name|IdentifierInfo
operator|*
name|KnownII
block|;
name|public
operator|:
typedef|typedef
name|IdentifierInfo
modifier|*
name|data_type
typedef|;
name|ASTIdentifierLookupTrait
argument_list|(
name|ASTReader
operator|&
name|Reader
argument_list|,
name|ModuleFile
operator|&
name|F
argument_list|,
name|IdentifierInfo
operator|*
name|II
operator|=
name|nullptr
argument_list|)
operator|:
name|Reader
argument_list|(
name|Reader
argument_list|)
block|,
name|F
argument_list|(
name|F
argument_list|)
block|,
name|KnownII
argument_list|(
argument|II
argument_list|)
block|{ }
name|data_type
name|ReadData
argument_list|(
argument|const internal_key_type& k
argument_list|,
argument|const unsigned char* d
argument_list|,
argument|unsigned DataLen
argument_list|)
decl_stmt|;
name|IdentID
name|ReadIdentifierID
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|)
function_decl|;
name|ASTReader
operator|&
name|getReader
argument_list|()
specifier|const
block|{
return|return
name|Reader
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief The on-disk hash table used to contain information about
comment|/// all of the identifiers in the program.
typedef|typedef
name|llvm
operator|::
name|OnDiskIterableChainedHashTable
operator|<
name|ASTIdentifierLookupTrait
operator|>
name|ASTIdentifierLookupTable
expr_stmt|;
comment|/// \brief Class that performs lookup for a selector's entries in the global
comment|/// method pool stored in an AST file.
name|class
name|ASTSelectorLookupTrait
block|{
name|ASTReader
modifier|&
name|Reader
decl_stmt|;
name|ModuleFile
modifier|&
name|F
decl_stmt|;
name|public
label|:
struct|struct
name|data_type
block|{
name|SelectorID
name|ID
decl_stmt|;
name|unsigned
name|InstanceBits
decl_stmt|;
name|unsigned
name|FactoryBits
decl_stmt|;
name|bool
name|InstanceHasMoreThanOneDecl
decl_stmt|;
name|bool
name|FactoryHasMoreThanOneDecl
decl_stmt|;
name|SmallVector
operator|<
name|ObjCMethodDecl
operator|*
operator|,
literal|2
operator|>
name|Instance
expr_stmt|;
name|SmallVector
operator|<
name|ObjCMethodDecl
operator|*
operator|,
literal|2
operator|>
name|Factory
expr_stmt|;
block|}
struct|;
typedef|typedef
name|Selector
name|external_key_type
typedef|;
typedef|typedef
name|external_key_type
name|internal_key_type
typedef|;
typedef|typedef
name|unsigned
name|hash_value_type
typedef|;
typedef|typedef
name|unsigned
name|offset_type
typedef|;
name|ASTSelectorLookupTrait
argument_list|(
name|ASTReader
operator|&
name|Reader
argument_list|,
name|ModuleFile
operator|&
name|F
argument_list|)
operator|:
name|Reader
argument_list|(
name|Reader
argument_list|)
operator|,
name|F
argument_list|(
argument|F
argument_list|)
block|{ }
specifier|static
name|bool
name|EqualKey
argument_list|(
argument|const internal_key_type& a
argument_list|,
argument|const internal_key_type& b
argument_list|)
block|{
return|return
name|a
operator|==
name|b
return|;
block|}
specifier|static
name|hash_value_type
name|ComputeHash
parameter_list|(
name|Selector
name|Sel
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|internal_key_type
modifier|&
name|GetInternalKey
parameter_list|(
specifier|const
name|external_key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
return|;
block|}
specifier|static
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|ReadKeyDataLength
argument_list|(
argument|const unsigned char*& d
argument_list|)
expr_stmt|;
name|internal_key_type
name|ReadKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
name|data_type
name|ReadData
parameter_list|(
name|Selector
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
name|DataLen
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// \brief The on-disk hash table used for the global method pool.
typedef|typedef
name|llvm
operator|::
name|OnDiskChainedHashTable
operator|<
name|ASTSelectorLookupTrait
operator|>
name|ASTSelectorLookupTable
expr_stmt|;
comment|/// \brief Trait class used to search the on-disk hash table containing all of
comment|/// the header search information.
comment|///
comment|/// The on-disk hash table contains a mapping from each header path to
comment|/// information about that header (how many times it has been included, its
comment|/// controlling macro, etc.). Note that we actually hash based on the size
comment|/// and mtime, and support "deep" comparisons of file names based on current
comment|/// inode numbers, so that the search can cope with non-normalized path names
comment|/// and symlinks.
name|class
name|HeaderFileInfoTrait
block|{
name|ASTReader
modifier|&
name|Reader
decl_stmt|;
name|ModuleFile
modifier|&
name|M
decl_stmt|;
name|HeaderSearch
modifier|*
name|HS
decl_stmt|;
specifier|const
name|char
modifier|*
name|FrameworkStrings
decl_stmt|;
name|public
label|:
typedef|typedef
specifier|const
name|FileEntry
modifier|*
name|external_key_type
typedef|;
struct|struct
name|internal_key_type
block|{
name|off_t
name|Size
decl_stmt|;
name|time_t
name|ModTime
decl_stmt|;
specifier|const
name|char
modifier|*
name|Filename
decl_stmt|;
name|bool
name|Imported
decl_stmt|;
block|}
struct|;
typedef|typedef
specifier|const
name|internal_key_type
modifier|&
name|internal_key_ref
typedef|;
typedef|typedef
name|HeaderFileInfo
name|data_type
typedef|;
typedef|typedef
name|unsigned
name|hash_value_type
typedef|;
typedef|typedef
name|unsigned
name|offset_type
typedef|;
name|HeaderFileInfoTrait
argument_list|(
name|ASTReader
operator|&
name|Reader
argument_list|,
name|ModuleFile
operator|&
name|M
argument_list|,
name|HeaderSearch
operator|*
name|HS
argument_list|,
specifier|const
name|char
operator|*
name|FrameworkStrings
argument_list|)
operator|:
name|Reader
argument_list|(
name|Reader
argument_list|)
operator|,
name|M
argument_list|(
name|M
argument_list|)
operator|,
name|HS
argument_list|(
name|HS
argument_list|)
operator|,
name|FrameworkStrings
argument_list|(
argument|FrameworkStrings
argument_list|)
block|{ }
specifier|static
name|hash_value_type
name|ComputeHash
argument_list|(
argument|internal_key_ref ikey
argument_list|)
expr_stmt|;
name|internal_key_type
name|GetInternalKey
parameter_list|(
specifier|const
name|FileEntry
modifier|*
name|FE
parameter_list|)
function_decl|;
name|bool
name|EqualKey
parameter_list|(
name|internal_key_ref
name|a
parameter_list|,
name|internal_key_ref
name|b
parameter_list|)
function_decl|;
specifier|static
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|ReadKeyDataLength
argument_list|(
argument|const unsigned char*& d
argument_list|)
expr_stmt|;
specifier|static
name|internal_key_type
name|ReadKey
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
name|data_type
name|ReadData
parameter_list|(
name|internal_key_ref
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|unsigned
name|DataLen
parameter_list|)
function_decl|;
block|}
empty_stmt|;
comment|/// \brief The on-disk hash table used for known header files.
typedef|typedef
name|llvm
operator|::
name|OnDiskChainedHashTable
operator|<
name|HeaderFileInfoTrait
operator|>
name|HeaderFileInfoLookupTable
expr_stmt|;
block|}
comment|// end namespace clang::serialization::reader
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang::serialization
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

