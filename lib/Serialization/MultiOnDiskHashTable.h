begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- MultiOnDiskHashTable.h - Merged set of hash tables -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file provides a hash table data structure suitable for incremental and
end_comment

begin_comment
comment|//  distributed storage across a set of files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Multiple hash tables from different files are implicitly merged to improve
end_comment

begin_comment
comment|//  performance, and on reload the merged table will override those from other
end_comment

begin_comment
comment|//  files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_SERIALIZATION_MULTIONDISKHASHTABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_SERIALIZATION_MULTIONDISKHASHTABLE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/EndianStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/OnDiskHashTable.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|serialization
block|{
name|class
name|ModuleFile
decl_stmt|;
comment|/// \brief A collection of on-disk hash tables, merged when relevant for performance.
name|template
operator|<
name|typename
name|Info
operator|>
name|class
name|MultiOnDiskHashTable
block|{
name|public
operator|:
comment|/// A handle to a file, used when overriding tables.
typedef|typedef
name|typename
name|Info
operator|::
name|file_type
name|file_type
expr_stmt|;
comment|/// A pointer to an on-disk representation of the hash table.
typedef|typedef
specifier|const
name|unsigned
name|char
modifier|*
name|storage_type
typedef|;
typedef|typedef
name|typename
name|Info
operator|::
name|external_key_type
name|external_key_type
expr_stmt|;
typedef|typedef
name|typename
name|Info
operator|::
name|internal_key_type
name|internal_key_type
expr_stmt|;
typedef|typedef
name|typename
name|Info
operator|::
name|data_type
name|data_type
expr_stmt|;
typedef|typedef
name|typename
name|Info
operator|::
name|data_type_builder
name|data_type_builder
expr_stmt|;
typedef|typedef
name|unsigned
name|hash_value_type
typedef|;
name|private
label|:
comment|/// \brief A hash table stored on disk.
struct|struct
name|OnDiskTable
block|{
typedef|typedef
name|llvm
operator|::
name|OnDiskIterableChainedHashTable
operator|<
name|Info
operator|>
name|HashTable
expr_stmt|;
name|file_type
name|File
decl_stmt|;
name|HashTable
name|Table
decl_stmt|;
name|OnDiskTable
argument_list|(
argument|file_type File
argument_list|,
argument|unsigned NumBuckets
argument_list|,
argument|unsigned NumEntries
argument_list|,
argument|storage_type Buckets
argument_list|,
argument|storage_type Payload
argument_list|,
argument|storage_type Base
argument_list|,
argument|const Info&InfoObj
argument_list|)
block|:
name|File
argument_list|(
name|File
argument_list|)
operator|,
name|Table
argument_list|(
argument|NumBuckets
argument_list|,
argument|NumEntries
argument_list|,
argument|Buckets
argument_list|,
argument|Payload
argument_list|,
argument|Base
argument_list|,
argument|InfoObj
argument_list|)
block|{}
block|}
struct|;
struct|struct
name|MergedTable
block|{
name|std
operator|::
name|vector
operator|<
name|file_type
operator|>
name|Files
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|internal_key_type
operator|,
name|data_type
operator|>
name|Data
expr_stmt|;
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|PointerUnion
operator|<
name|OnDiskTable
operator|*
operator|,
name|MergedTable
operator|*
operator|>
name|Table
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|TinyPtrVector
operator|<
name|void
operator|*
operator|>
name|TableVector
expr_stmt|;
comment|/// \brief The current set of on-disk and merged tables.
comment|/// We manually store the opaque value of the Table because TinyPtrVector
comment|/// can't cope with holding a PointerUnion directly.
comment|/// There can be at most one MergedTable in this vector, and if present,
comment|/// it is the first table.
name|TableVector
name|Tables
decl_stmt|;
comment|/// \brief Files corresponding to overridden tables that we've not yet
comment|/// discarded.
name|llvm
operator|::
name|TinyPtrVector
operator|<
name|file_type
operator|>
name|PendingOverrides
expr_stmt|;
struct|struct
name|AsOnDiskTable
block|{
typedef|typedef
name|OnDiskTable
modifier|*
name|result_type
typedef|;
name|result_type
name|operator
argument_list|()
operator|(
name|void
operator|*
name|P
operator|)
specifier|const
block|{
return|return
name|Table
operator|::
name|getFromOpaqueValue
argument_list|(
name|P
argument_list|)
operator|.
name|template
name|get
operator|<
name|OnDiskTable
operator|*
operator|>
operator|(
operator|)
return|;
block|}
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|mapped_iterator
operator|<
name|TableVector
operator|::
name|iterator
operator|,
name|AsOnDiskTable
operator|>
name|table_iterator
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|iterator_range
operator|<
name|table_iterator
operator|>
name|table_range
expr_stmt|;
comment|/// \brief The current set of on-disk tables.
name|table_range
name|tables
parameter_list|()
block|{
name|auto
name|Begin
init|=
name|Tables
operator|.
name|begin
argument_list|()
decl_stmt|,
name|End
init|=
name|Tables
operator|.
name|end
argument_list|()
decl_stmt|;
if|if
condition|(
name|getMergedTable
argument_list|()
condition|)
operator|++
name|Begin
expr_stmt|;
return|return
name|llvm
operator|::
name|make_range
argument_list|(
name|llvm
operator|::
name|map_iterator
argument_list|(
name|Begin
argument_list|,
name|AsOnDiskTable
argument_list|()
argument_list|)
argument_list|,
name|llvm
operator|::
name|map_iterator
argument_list|(
name|End
argument_list|,
name|AsOnDiskTable
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|MergedTable
operator|*
name|getMergedTable
argument_list|()
specifier|const
block|{
comment|// If we already have a merged table, it's the first one.
return|return
name|Tables
operator|.
name|empty
argument_list|()
operator|?
name|nullptr
operator|:
name|Table
operator|::
name|getFromOpaqueValue
argument_list|(
operator|*
name|Tables
operator|.
name|begin
argument_list|()
argument_list|)
operator|.
name|template
name|dyn_cast
operator|<
name|MergedTable
operator|*
operator|>
operator|(
operator|)
return|;
block|}
comment|/// \brief Delete all our current on-disk tables.
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|auto
operator|*
name|T
operator|:
name|tables
argument_list|()
control|)
name|delete
name|T
decl_stmt|;
if|if
condition|(
name|auto
operator|*
name|M
operator|=
name|getMergedTable
argument_list|()
condition|)
name|delete
name|M
decl_stmt|;
name|Tables
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|removeOverriddenTables
parameter_list|()
block|{
name|llvm
operator|::
name|DenseSet
operator|<
name|file_type
operator|>
name|Files
expr_stmt|;
name|Files
operator|.
name|insert
argument_list|(
name|PendingOverrides
operator|.
name|begin
argument_list|()
argument_list|,
name|PendingOverrides
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
comment|// Explicitly capture Files to work around an MSVC 2015 rejects-valid bug.
name|auto
name|ShouldRemove
init|=
index|[
operator|&
name|Files
index|]
operator|(
name|void
operator|*
name|T
operator|)
operator|->
name|bool
block|{
name|auto
operator|*
name|ODT
operator|=
name|Table
operator|::
name|getFromOpaqueValue
argument_list|(
name|T
argument_list|)
operator|.
name|template
name|get
operator|<
name|OnDiskTable
operator|*
operator|>
operator|(
operator|)
block|;
name|bool
name|Remove
operator|=
name|Files
operator|.
name|count
argument_list|(
name|ODT
operator|->
name|File
argument_list|)
block|;
if|if
condition|(
name|Remove
condition|)
name|delete
name|ODT
decl_stmt|;
return|return
name|Remove
return|;
block|}
empty_stmt|;
name|Tables
operator|.
name|erase
argument_list|(
name|std
operator|::
name|remove_if
argument_list|(
name|tables
argument_list|()
operator|.
name|begin
argument_list|()
operator|.
name|getCurrent
argument_list|()
argument_list|,
name|Tables
operator|.
name|end
argument_list|()
argument_list|,
name|ShouldRemove
argument_list|)
argument_list|,
name|Tables
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|PendingOverrides
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|condense
parameter_list|()
block|{
name|MergedTable
modifier|*
name|Merged
init|=
name|getMergedTable
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Merged
condition|)
name|Merged
operator|=
name|new
name|MergedTable
expr_stmt|;
comment|// Read in all the tables and merge them together.
comment|// FIXME: Be smarter about which tables we merge.
for|for
control|(
name|auto
operator|*
name|ODT
operator|:
name|tables
argument_list|()
control|)
block|{
name|auto
operator|&
name|HT
operator|=
name|ODT
operator|->
name|Table
expr_stmt|;
name|Info
modifier|&
name|InfoObj
init|=
name|HT
operator|.
name|getInfoObj
argument_list|()
decl_stmt|;
for|for
control|(
name|auto
name|I
init|=
name|HT
operator|.
name|data_begin
argument_list|()
init|,
name|E
init|=
name|HT
operator|.
name|data_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|auto
operator|*
name|LocalPtr
operator|=
name|I
operator|.
name|getItem
argument_list|()
expr_stmt|;
comment|// FIXME: Don't rely on the OnDiskHashTable format here.
name|auto
name|L
init|=
name|InfoObj
operator|.
name|ReadKeyDataLength
argument_list|(
name|LocalPtr
argument_list|)
decl_stmt|;
specifier|const
name|internal_key_type
modifier|&
name|Key
init|=
name|InfoObj
operator|.
name|ReadKey
argument_list|(
name|LocalPtr
argument_list|,
name|L
operator|.
name|first
argument_list|)
decl_stmt|;
name|data_type_builder
name|ValueBuilder
argument_list|(
name|Merged
operator|->
name|Data
index|[
name|Key
index|]
argument_list|)
decl_stmt|;
name|InfoObj
operator|.
name|ReadDataInto
argument_list|(
name|Key
argument_list|,
name|LocalPtr
operator|+
name|L
operator|.
name|first
argument_list|,
name|L
operator|.
name|second
argument_list|,
name|ValueBuilder
argument_list|)
expr_stmt|;
block|}
name|Merged
operator|->
name|Files
operator|.
name|push_back
argument_list|(
name|ODT
operator|->
name|File
argument_list|)
expr_stmt|;
name|delete
name|ODT
decl_stmt|;
block|}
name|Tables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Tables
operator|.
name|push_back
argument_list|(
name|Table
argument_list|(
name|Merged
argument_list|)
operator|.
name|getOpaqueValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/// The generator is permitted to read our merged table.
name|template
operator|<
name|typename
name|ReaderInfo
operator|,
name|typename
name|WriterInfo
operator|>
name|friend
name|class
name|MultiOnDiskHashTableGenerator
expr_stmt|;
name|public
label|:
name|MultiOnDiskHashTable
argument_list|()
block|{}
name|MultiOnDiskHashTable
argument_list|(
name|MultiOnDiskHashTable
operator|&&
name|O
argument_list|)
operator|:
name|Tables
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|O
operator|.
name|Tables
argument_list|)
argument_list|)
operator|,
name|PendingOverrides
argument_list|(
argument|std::move(O.PendingOverrides)
argument_list|)
block|{
name|O
operator|.
name|Tables
operator|.
name|clear
argument_list|()
block|;   }
name|MultiOnDiskHashTable
operator|&
name|operator
operator|=
operator|(
name|MultiOnDiskHashTable
operator|&&
name|O
operator|)
block|{
if|if
condition|(
operator|&
name|O
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
name|clear
argument_list|()
expr_stmt|;
name|Tables
operator|=
name|std
operator|::
name|move
argument_list|(
name|O
operator|.
name|Tables
argument_list|)
expr_stmt|;
name|O
operator|.
name|Tables
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PendingOverrides
operator|=
name|std
operator|::
name|move
argument_list|(
name|O
operator|.
name|PendingOverrides
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
operator|~
name|MultiOnDiskHashTable
argument_list|()
block|{
name|clear
argument_list|()
block|; }
comment|/// \brief Add the table \p Data loaded from file \p File.
name|void
name|add
argument_list|(
argument|file_type File
argument_list|,
argument|storage_type Data
argument_list|,
argument|Info InfoObj = Info()
argument_list|)
block|{
name|using
name|namespace
name|llvm
operator|::
name|support
block|;
name|storage_type
name|Ptr
operator|=
name|Data
block|;
name|uint32_t
name|BucketOffset
operator|=
name|endian
operator|::
name|readNext
operator|<
name|uint32_t
block|,
name|little
block|,
name|unaligned
operator|>
operator|(
name|Ptr
operator|)
block|;
comment|// Read the list of overridden files.
name|uint32_t
name|NumFiles
operator|=
name|endian
operator|::
name|readNext
operator|<
name|uint32_t
block|,
name|little
block|,
name|unaligned
operator|>
operator|(
name|Ptr
operator|)
block|;
comment|// FIXME: Add a reserve() to TinyPtrVector so that we don't need to make
comment|// an additional copy.
name|llvm
operator|::
name|SmallVector
operator|<
name|file_type
block|,
literal|16
operator|>
name|OverriddenFiles
block|;
name|OverriddenFiles
operator|.
name|reserve
argument_list|(
name|NumFiles
argument_list|)
block|;
for|for
control|(
comment|/**/
init|;
name|NumFiles
operator|!=
literal|0
condition|;
operator|--
name|NumFiles
control|)
name|OverriddenFiles
operator|.
name|push_back
argument_list|(
name|InfoObj
operator|.
name|ReadFileRef
argument_list|(
name|Ptr
argument_list|)
argument_list|)
expr_stmt|;
name|PendingOverrides
operator|.
name|insert
argument_list|(
name|PendingOverrides
operator|.
name|end
argument_list|()
argument_list|,
name|OverriddenFiles
operator|.
name|begin
argument_list|()
argument_list|,
name|OverriddenFiles
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Read the OnDiskChainedHashTable header.
end_comment

begin_decl_stmt
name|storage_type
name|Buckets
init|=
name|Data
operator|+
name|BucketOffset
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|auto
name|NumBucketsAndEntries
init|=
name|OnDiskTable
operator|::
name|HashTable
operator|::
name|readNumBucketsAndEntries
argument_list|(
name|Buckets
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Register the table.
end_comment

begin_decl_stmt
name|Table
name|NewTable
init|=
name|new
name|OnDiskTable
argument_list|(
name|File
argument_list|,
name|NumBucketsAndEntries
operator|.
name|first
argument_list|,
name|NumBucketsAndEntries
operator|.
name|second
argument_list|,
name|Buckets
argument_list|,
name|Ptr
argument_list|,
name|Data
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|InfoObj
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Tables
operator|.
name|push_back
argument_list|(
name|NewTable
operator|.
name|getOpaqueValue
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/// \brief Find and read the lookup results for \p EKey.
end_comment

begin_macro
unit|data_type
name|find
argument_list|(
argument|const external_key_type&EKey
argument_list|)
end_macro

begin_block
block|{
name|data_type
name|Result
decl_stmt|;
if|if
condition|(
operator|!
name|PendingOverrides
operator|.
name|empty
argument_list|()
condition|)
name|removeOverriddenTables
argument_list|()
expr_stmt|;
if|if
condition|(
name|Tables
operator|.
name|size
argument_list|()
operator|>
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|Info
operator|::
name|MaxTables
operator|)
condition|)
name|condense
argument_list|()
expr_stmt|;
name|internal_key_type
name|Key
init|=
name|Info
operator|::
name|GetInternalKey
argument_list|(
name|EKey
argument_list|)
decl_stmt|;
name|auto
name|KeyHash
init|=
name|Info
operator|::
name|ComputeHash
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|MergedTable
modifier|*
name|M
init|=
name|getMergedTable
argument_list|()
condition|)
block|{
name|auto
name|It
init|=
name|M
operator|->
name|Data
operator|.
name|find
argument_list|(
name|Key
argument_list|)
decl_stmt|;
if|if
condition|(
name|It
operator|!=
name|M
operator|->
name|Data
operator|.
name|end
argument_list|()
condition|)
name|Result
operator|=
name|It
operator|->
name|second
expr_stmt|;
block|}
name|data_type_builder
name|ResultBuilder
parameter_list|(
name|Result
parameter_list|)
function_decl|;
for|for
control|(
name|auto
operator|*
name|ODT
operator|:
name|tables
argument_list|()
control|)
block|{
name|auto
operator|&
name|HT
operator|=
name|ODT
operator|->
name|Table
expr_stmt|;
name|auto
name|It
init|=
name|HT
operator|.
name|find_hashed
argument_list|(
name|Key
argument_list|,
name|KeyHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|It
operator|!=
name|HT
operator|.
name|end
argument_list|()
condition|)
name|HT
operator|.
name|getInfoObj
argument_list|()
operator|.
name|ReadDataInto
argument_list|(
name|Key
argument_list|,
name|It
operator|.
name|getDataPtr
argument_list|()
argument_list|,
name|It
operator|.
name|getDataLen
argument_list|()
argument_list|,
name|ResultBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
return|;
block|}
end_block

begin_comment
comment|/// \brief Read all the lookup results into a single value. This only makes
end_comment

begin_comment
comment|/// sense if merging values across keys is meaningful.
end_comment

begin_function
name|data_type
name|findAll
parameter_list|()
block|{
name|data_type
name|Result
decl_stmt|;
name|data_type_builder
name|ResultBuilder
argument_list|(
name|Result
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PendingOverrides
operator|.
name|empty
argument_list|()
condition|)
name|removeOverriddenTables
argument_list|()
expr_stmt|;
if|if
condition|(
name|MergedTable
modifier|*
name|M
init|=
name|getMergedTable
argument_list|()
condition|)
block|{
for|for
control|(
name|auto
operator|&
name|KV
operator|:
name|M
operator|->
name|Data
control|)
name|Info
operator|::
name|MergeDataInto
argument_list|(
name|KV
operator|.
name|second
argument_list|,
name|ResultBuilder
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|auto
operator|*
name|ODT
operator|:
name|tables
argument_list|()
control|)
block|{
name|auto
operator|&
name|HT
operator|=
name|ODT
operator|->
name|Table
expr_stmt|;
name|Info
modifier|&
name|InfoObj
init|=
name|HT
operator|.
name|getInfoObj
argument_list|()
decl_stmt|;
for|for
control|(
name|auto
name|I
init|=
name|HT
operator|.
name|data_begin
argument_list|()
init|,
name|E
init|=
name|HT
operator|.
name|data_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|auto
operator|*
name|LocalPtr
operator|=
name|I
operator|.
name|getItem
argument_list|()
expr_stmt|;
comment|// FIXME: Don't rely on the OnDiskHashTable format here.
name|auto
name|L
init|=
name|InfoObj
operator|.
name|ReadKeyDataLength
argument_list|(
name|LocalPtr
argument_list|)
decl_stmt|;
specifier|const
name|internal_key_type
modifier|&
name|Key
init|=
name|InfoObj
operator|.
name|ReadKey
argument_list|(
name|LocalPtr
argument_list|,
name|L
operator|.
name|first
argument_list|)
decl_stmt|;
name|InfoObj
operator|.
name|ReadDataInto
argument_list|(
name|Key
argument_list|,
name|LocalPtr
operator|+
name|L
operator|.
name|first
argument_list|,
name|L
operator|.
name|second
argument_list|,
name|ResultBuilder
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Result
return|;
block|}
end_function

begin_comment
unit|};
comment|/// \brief Writer for the on-disk hash table.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|ReaderInfo
operator|,
name|typename
name|WriterInfo
operator|>
name|class
name|MultiOnDiskHashTableGenerator
block|{
typedef|typedef
name|MultiOnDiskHashTable
operator|<
name|ReaderInfo
operator|>
name|BaseTable
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|OnDiskChainedHashTableGenerator
operator|<
name|WriterInfo
operator|>
name|Generator
expr_stmt|;
end_typedef

begin_decl_stmt
name|Generator
name|Gen
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|MultiOnDiskHashTableGenerator
argument_list|()
operator|:
name|Gen
argument_list|()
block|{}
name|void
name|insert
argument_list|(
argument|typename WriterInfo::key_type_ref Key
argument_list|,
argument|typename WriterInfo::data_type_ref Data
argument_list|,
argument|WriterInfo&Info
argument_list|)
block|{
name|Gen
operator|.
name|insert
argument_list|(
name|Key
argument_list|,
name|Data
argument_list|,
name|Info
argument_list|)
block|;   }
name|void
name|emit
argument_list|(
argument|llvm::SmallVectorImpl<char>&Out
argument_list|,
argument|WriterInfo&Info
argument_list|,
argument|const BaseTable *Base
argument_list|)
block|{
name|using
name|namespace
name|llvm
operator|::
name|support
block|;
name|llvm
operator|::
name|raw_svector_ostream
name|OutStream
argument_list|(
name|Out
argument_list|)
block|;
comment|// Write our header information.
block|{
name|endian
operator|::
name|Writer
operator|<
name|little
operator|>
name|Writer
argument_list|(
name|OutStream
argument_list|)
block|;
comment|// Reserve four bytes for the bucket offset.
name|Writer
operator|.
name|write
operator|<
name|uint32_t
operator|>
operator|(
literal|0
operator|)
block|;
if|if
condition|(
name|auto
operator|*
name|Merged
operator|=
name|Base
condition|?
name|Base
operator|->
name|getMergedTable
argument_list|()
else|:
name|nullptr
condition|)
block|{
comment|// Write list of overridden files.
name|Writer
operator|.
name|write
operator|<
name|uint32_t
operator|>
operator|(
name|Merged
operator|->
name|Files
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|F
range|:
name|Merged
operator|->
name|Files
control|)
name|Info
operator|.
name|EmitFileRef
argument_list|(
name|OutStream
argument_list|,
name|F
argument_list|)
expr_stmt|;
comment|// Add all merged entries from Base to the generator.
for|for
control|(
name|auto
operator|&
name|KV
operator|:
name|Merged
operator|->
name|Data
control|)
block|{
if|if
condition|(
operator|!
name|Gen
operator|.
name|contains
argument_list|(
name|KV
operator|.
name|first
argument_list|,
name|Info
argument_list|)
condition|)
name|Gen
operator|.
name|insert
argument_list|(
name|KV
operator|.
name|first
argument_list|,
name|Info
operator|.
name|ImportData
argument_list|(
name|KV
operator|.
name|second
argument_list|)
argument_list|,
name|Info
argument_list|)
expr_stmt|;
block|}
block|}
end_expr_stmt

begin_else
else|else
block|{
name|Writer
operator|.
name|write
operator|<
name|uint32_t
operator|>
operator|(
literal|0
operator|)
expr_stmt|;
block|}
end_else

begin_comment
unit|}
comment|// Write the table itself.
end_comment

begin_expr_stmt
unit|uint32_t
name|BucketOffset
operator|=
name|Gen
operator|.
name|Emit
argument_list|(
name|OutStream
argument_list|,
name|Info
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Replace the first four bytes with the bucket offset.
end_comment

begin_expr_stmt
name|endian
operator|::
name|write32le
argument_list|(
name|Out
operator|.
name|data
argument_list|()
argument_list|,
name|BucketOffset
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace clang::serialization
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

