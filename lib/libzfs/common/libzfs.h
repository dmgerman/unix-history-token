begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright 2011 Nexenta Systems, Inc. All rights reserved.  * Copyright (c) 2012 by Delphix. All rights reserved.  * Copyright (c) 2012, Joyent, Inc. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBZFS_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBZFS_H
end_define

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<libnvpair.h>
end_include

begin_include
include|#
directive|include
file|<sys/mnttab.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/varargs.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/avl.h>
end_include

begin_include
include|#
directive|include
file|<ucred.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Miscellaneous ZFS constants  */
define|#
directive|define
name|ZFS_MAXNAMELEN
value|MAXNAMELEN
define|#
directive|define
name|ZPOOL_MAXNAMELEN
value|MAXNAMELEN
define|#
directive|define
name|ZFS_MAXPROPLEN
value|MAXPATHLEN
define|#
directive|define
name|ZPOOL_MAXPROPLEN
value|MAXPATHLEN
comment|/*  * libzfs errors  */
typedef|typedef
enum|enum
name|zfs_error
block|{
name|EZFS_SUCCESS
init|=
literal|0
block|,
comment|/* no error -- success */
name|EZFS_NOMEM
init|=
literal|2000
block|,
comment|/* out of memory */
name|EZFS_BADPROP
block|,
comment|/* invalid property value */
name|EZFS_PROPREADONLY
block|,
comment|/* cannot set readonly property */
name|EZFS_PROPTYPE
block|,
comment|/* property does not apply to dataset type */
name|EZFS_PROPNONINHERIT
block|,
comment|/* property is not inheritable */
name|EZFS_PROPSPACE
block|,
comment|/* bad quota or reservation */
name|EZFS_BADTYPE
block|,
comment|/* dataset is not of appropriate type */
name|EZFS_BUSY
block|,
comment|/* pool or dataset is busy */
name|EZFS_EXISTS
block|,
comment|/* pool or dataset already exists */
name|EZFS_NOENT
block|,
comment|/* no such pool or dataset */
name|EZFS_BADSTREAM
block|,
comment|/* bad backup stream */
name|EZFS_DSREADONLY
block|,
comment|/* dataset is readonly */
name|EZFS_VOLTOOBIG
block|,
comment|/* volume is too large for 32-bit system */
name|EZFS_INVALIDNAME
block|,
comment|/* invalid dataset name */
name|EZFS_BADRESTORE
block|,
comment|/* unable to restore to destination */
name|EZFS_BADBACKUP
block|,
comment|/* backup failed */
name|EZFS_BADTARGET
block|,
comment|/* bad attach/detach/replace target */
name|EZFS_NODEVICE
block|,
comment|/* no such device in pool */
name|EZFS_BADDEV
block|,
comment|/* invalid device to add */
name|EZFS_NOREPLICAS
block|,
comment|/* no valid replicas */
name|EZFS_RESILVERING
block|,
comment|/* currently resilvering */
name|EZFS_BADVERSION
block|,
comment|/* unsupported version */
name|EZFS_POOLUNAVAIL
block|,
comment|/* pool is currently unavailable */
name|EZFS_DEVOVERFLOW
block|,
comment|/* too many devices in one vdev */
name|EZFS_BADPATH
block|,
comment|/* must be an absolute path */
name|EZFS_CROSSTARGET
block|,
comment|/* rename or clone across pool or dataset */
name|EZFS_ZONED
block|,
comment|/* used improperly in local zone */
name|EZFS_MOUNTFAILED
block|,
comment|/* failed to mount dataset */
name|EZFS_UMOUNTFAILED
block|,
comment|/* failed to unmount dataset */
name|EZFS_UNSHARENFSFAILED
block|,
comment|/* unshare(1M) failed */
name|EZFS_SHARENFSFAILED
block|,
comment|/* share(1M) failed */
name|EZFS_PERM
block|,
comment|/* permission denied */
name|EZFS_NOSPC
block|,
comment|/* out of space */
name|EZFS_FAULT
block|,
comment|/* bad address */
name|EZFS_IO
block|,
comment|/* I/O error */
name|EZFS_INTR
block|,
comment|/* signal received */
name|EZFS_ISSPARE
block|,
comment|/* device is a hot spare */
name|EZFS_INVALCONFIG
block|,
comment|/* invalid vdev configuration */
name|EZFS_RECURSIVE
block|,
comment|/* recursive dependency */
name|EZFS_NOHISTORY
block|,
comment|/* no history object */
name|EZFS_POOLPROPS
block|,
comment|/* couldn't retrieve pool props */
name|EZFS_POOL_NOTSUP
block|,
comment|/* ops not supported for this type of pool */
name|EZFS_POOL_INVALARG
block|,
comment|/* invalid argument for this pool operation */
name|EZFS_NAMETOOLONG
block|,
comment|/* dataset name is too long */
name|EZFS_OPENFAILED
block|,
comment|/* open of device failed */
name|EZFS_NOCAP
block|,
comment|/* couldn't get capacity */
name|EZFS_LABELFAILED
block|,
comment|/* write of label failed */
name|EZFS_BADWHO
block|,
comment|/* invalid permission who */
name|EZFS_BADPERM
block|,
comment|/* invalid permission */
name|EZFS_BADPERMSET
block|,
comment|/* invalid permission set name */
name|EZFS_NODELEGATION
block|,
comment|/* delegated administration is disabled */
name|EZFS_UNSHARESMBFAILED
block|,
comment|/* failed to unshare over smb */
name|EZFS_SHARESMBFAILED
block|,
comment|/* failed to share over smb */
name|EZFS_BADCACHE
block|,
comment|/* bad cache file */
name|EZFS_ISL2CACHE
block|,
comment|/* device is for the level 2 ARC */
name|EZFS_VDEVNOTSUP
block|,
comment|/* unsupported vdev type */
name|EZFS_NOTSUP
block|,
comment|/* ops not supported on this dataset */
name|EZFS_ACTIVE_SPARE
block|,
comment|/* pool has active shared spare devices */
name|EZFS_UNPLAYED_LOGS
block|,
comment|/* log device has unplayed logs */
name|EZFS_REFTAG_RELE
block|,
comment|/* snapshot release: tag not found */
name|EZFS_REFTAG_HOLD
block|,
comment|/* snapshot hold: tag already exists */
name|EZFS_TAGTOOLONG
block|,
comment|/* snapshot hold/rele: tag too long */
name|EZFS_PIPEFAILED
block|,
comment|/* pipe create failed */
name|EZFS_THREADCREATEFAILED
block|,
comment|/* thread create failed */
name|EZFS_POSTSPLIT_ONLINE
block|,
comment|/* onlining a disk after splitting it */
name|EZFS_SCRUBBING
block|,
comment|/* currently scrubbing */
name|EZFS_NO_SCRUB
block|,
comment|/* no active scrub */
name|EZFS_DIFF
block|,
comment|/* general failure of zfs diff */
name|EZFS_DIFFDATA
block|,
comment|/* bad zfs diff data */
name|EZFS_POOLREADONLY
block|,
comment|/* pool is in read-only mode */
name|EZFS_UNKNOWN
block|}
name|zfs_error_t
typedef|;
comment|/*  * The following data structures are all part  * of the zfs_allow_t data structure which is  * used for printing 'allow' permissions.  * It is a linked list of zfs_allow_t's which  * then contain avl tree's for user/group/sets/...  * and each one of the entries in those trees have  * avl tree's for the permissions they belong to and  * whether they are local,descendent or local+descendent  * permissions.  The AVL trees are used primarily for  * sorting purposes, but also so that we can quickly find  * a given user and or permission.  */
typedef|typedef
struct|struct
name|zfs_perm_node
block|{
name|avl_node_t
name|z_node
decl_stmt|;
name|char
name|z_pname
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
block|}
name|zfs_perm_node_t
typedef|;
typedef|typedef
struct|struct
name|zfs_allow_node
block|{
name|avl_node_t
name|z_node
decl_stmt|;
name|char
name|z_key
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
comment|/* name, such as joe */
name|avl_tree_t
name|z_localdescend
decl_stmt|;
comment|/* local+descendent perms */
name|avl_tree_t
name|z_local
decl_stmt|;
comment|/* local permissions */
name|avl_tree_t
name|z_descend
decl_stmt|;
comment|/* descendent permissions */
block|}
name|zfs_allow_node_t
typedef|;
typedef|typedef
struct|struct
name|zfs_allow
block|{
name|struct
name|zfs_allow
modifier|*
name|z_next
decl_stmt|;
name|char
name|z_setpoint
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
name|avl_tree_t
name|z_sets
decl_stmt|;
name|avl_tree_t
name|z_crperms
decl_stmt|;
name|avl_tree_t
name|z_user
decl_stmt|;
name|avl_tree_t
name|z_group
decl_stmt|;
name|avl_tree_t
name|z_everyone
decl_stmt|;
block|}
name|zfs_allow_t
typedef|;
comment|/*  * Basic handle types  */
typedef|typedef
name|struct
name|zfs_handle
name|zfs_handle_t
typedef|;
typedef|typedef
name|struct
name|zpool_handle
name|zpool_handle_t
typedef|;
typedef|typedef
name|struct
name|libzfs_handle
name|libzfs_handle_t
typedef|;
comment|/*  * Library initialization  */
specifier|extern
name|libzfs_handle_t
modifier|*
name|libzfs_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_fini
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|libzfs_handle_t
modifier|*
name|zpool_get_handle
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|libzfs_handle_t
modifier|*
name|zfs_get_handle
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_print_on_error
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_save_arguments
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_log_history
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|libzfs_errno
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_error_action
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_error_description
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_mnttab_init
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_mnttab_fini
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_mnttab_cache
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|libzfs_mnttab_find
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|mnttab
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_mnttab_add
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_mnttab_remove
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Basic handle functions  */
specifier|extern
name|zpool_handle_t
modifier|*
name|zpool_open
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zpool_handle_t
modifier|*
name|zpool_open_canfail
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_close
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_get_name
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_state
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|zpool_state_to_name
parameter_list|(
name|vdev_state_t
parameter_list|,
name|vdev_aux_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_free_handles
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Iterate over all active pools in the system.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|zpool_iter_f
function_decl|)
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_iter
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zpool_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to create and destroy pools  */
specifier|extern
name|int
name|zpool_create
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_destroy
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_add
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|splitflags
block|{
comment|/* do not split, but return the config that would be split off */
name|int
name|dryrun
range|:
literal|1
decl_stmt|;
comment|/* after splitting, import the pool */
name|int
name|import
range|:
literal|1
decl_stmt|;
block|}
name|splitflags_t
typedef|;
comment|/*  * Functions to manipulate pool and vdev state  */
specifier|extern
name|int
name|zpool_scan
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|pool_scan_func_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_clear
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_reguid
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_reopen
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_online
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|vdev_state_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_offline
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_attach
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_detach
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_remove
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_split
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|splitflags_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_fault
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|vdev_aux_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_degrade
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|vdev_aux_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_clear
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_vdev
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_vdev_by_physpath
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_label_disk
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to manage pool properties  */
specifier|extern
name|int
name|zpool_set_prop
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_prop
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|zpool_prop_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
name|proplen
parameter_list|,
name|zprop_source_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_get_prop_int
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|zpool_prop_t
parameter_list|,
name|zprop_source_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_to_name
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_values
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
comment|/*  * Pool health statistics.  */
typedef|typedef
enum|enum
block|{
comment|/* 	 * The following correspond to faults as defined in the (fault.fs.zfs.*) 	 * event namespace.  Each is associated with a corresponding message ID. 	 */
name|ZPOOL_STATUS_CORRUPT_CACHE
block|,
comment|/* corrupt /kernel/drv/zpool.cache */
name|ZPOOL_STATUS_MISSING_DEV_R
block|,
comment|/* missing device with replicas */
name|ZPOOL_STATUS_MISSING_DEV_NR
block|,
comment|/* missing device with no replicas */
name|ZPOOL_STATUS_CORRUPT_LABEL_R
block|,
comment|/* bad device label with replicas */
name|ZPOOL_STATUS_CORRUPT_LABEL_NR
block|,
comment|/* bad device label with no replicas */
name|ZPOOL_STATUS_BAD_GUID_SUM
block|,
comment|/* sum of device guids didn't match */
name|ZPOOL_STATUS_CORRUPT_POOL
block|,
comment|/* pool metadata is corrupted */
name|ZPOOL_STATUS_CORRUPT_DATA
block|,
comment|/* data errors in user (meta)data */
name|ZPOOL_STATUS_FAILING_DEV
block|,
comment|/* device experiencing errors */
name|ZPOOL_STATUS_VERSION_NEWER
block|,
comment|/* newer on-disk version */
name|ZPOOL_STATUS_HOSTID_MISMATCH
block|,
comment|/* last accessed by another system */
name|ZPOOL_STATUS_IO_FAILURE_WAIT
block|,
comment|/* failed I/O, failmode 'wait' */
name|ZPOOL_STATUS_IO_FAILURE_CONTINUE
block|,
comment|/* failed I/O, failmode 'continue' */
name|ZPOOL_STATUS_BAD_LOG
block|,
comment|/* cannot read log chain(s) */
comment|/* 	 * If the pool has unsupported features but can still be opened in 	 * read-only mode, its status is ZPOOL_STATUS_UNSUP_FEAT_WRITE. If the 	 * pool has unsupported features but cannot be opened at all, its 	 * status is ZPOOL_STATUS_UNSUP_FEAT_READ. 	 */
name|ZPOOL_STATUS_UNSUP_FEAT_READ
block|,
comment|/* unsupported features for read */
name|ZPOOL_STATUS_UNSUP_FEAT_WRITE
block|,
comment|/* unsupported features for write */
comment|/* 	 * These faults have no corresponding message ID.  At the time we are 	 * checking the status, the original reason for the FMA fault (I/O or 	 * checksum errors) has been lost. 	 */
name|ZPOOL_STATUS_FAULTED_DEV_R
block|,
comment|/* faulted device with replicas */
name|ZPOOL_STATUS_FAULTED_DEV_NR
block|,
comment|/* faulted device with no replicas */
comment|/* 	 * The following are not faults per se, but still an error possibly 	 * requiring administrative attention.  There is no corresponding 	 * message ID. 	 */
name|ZPOOL_STATUS_VERSION_OLDER
block|,
comment|/* older legacy on-disk version */
name|ZPOOL_STATUS_FEAT_DISABLED
block|,
comment|/* supported features are disabled */
name|ZPOOL_STATUS_RESILVERING
block|,
comment|/* device being resilvered */
name|ZPOOL_STATUS_OFFLINE_DEV
block|,
comment|/* device online */
name|ZPOOL_STATUS_REMOVED_DEV
block|,
comment|/* removed device */
comment|/* 	 * Finally, the following indicates a healthy pool. 	 */
name|ZPOOL_STATUS_OK
block|}
name|zpool_status_t
typedef|;
specifier|extern
name|zpool_status_t
name|zpool_get_status
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zpool_status_t
name|zpool_import_status
parameter_list|(
name|nvlist_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_dump_ddt
parameter_list|(
specifier|const
name|ddt_stat_t
modifier|*
name|dds
parameter_list|,
specifier|const
name|ddt_histogram_t
modifier|*
name|ddh
parameter_list|)
function_decl|;
comment|/*  * Statistics and configuration functions.  */
specifier|extern
name|nvlist_t
modifier|*
name|zpool_get_config
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_get_features
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_refresh_stats
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_errlog
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Import and export functions  */
specifier|extern
name|int
name|zpool_export
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_export_force
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_import
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
name|altroot
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_import_props
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_print_unsup_feat
parameter_list|(
name|nvlist_t
modifier|*
name|config
parameter_list|)
function_decl|;
comment|/*  * Search for pools to import  */
typedef|typedef
struct|struct
name|importargs
block|{
name|char
modifier|*
modifier|*
name|path
decl_stmt|;
comment|/* a list of paths to search		*/
name|int
name|paths
decl_stmt|;
comment|/* number of paths to search		*/
name|char
modifier|*
name|poolname
decl_stmt|;
comment|/* name of a pool to find		*/
name|uint64_t
name|guid
decl_stmt|;
comment|/* guid of a pool to find		*/
name|char
modifier|*
name|cachefile
decl_stmt|;
comment|/* cachefile to use for import		*/
name|int
name|can_be_active
range|:
literal|1
decl_stmt|;
comment|/* can the pool be active?		*/
name|int
name|unique
range|:
literal|1
decl_stmt|;
comment|/* does 'poolname' already exist?	*/
name|int
name|exists
range|:
literal|1
decl_stmt|;
comment|/* set on return if pool already exists	*/
block|}
name|importargs_t
typedef|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_search_import
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|importargs_t
modifier|*
parameter_list|)
function_decl|;
comment|/* legacy pool search routines */
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_import
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_import_cached
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|/*  * Miscellaneous pool functions  */
struct_decl|struct
name|zfs_cmd
struct_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_history_event_names
index|[]
decl_stmt|;
specifier|extern
name|char
modifier|*
name|zpool_vdev_name
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|boolean_t
name|verbose
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_upgrade
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_history
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_history_unpack
parameter_list|(
name|char
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
modifier|*
parameter_list|,
name|uint_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_obj_to_path
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_ioctl
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|zfs_cmd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_physpath
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_explain_recover
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Basic handle manipulations.  These functions do not create or destroy the  * underlying datasets, only the references to them.  */
specifier|extern
name|zfs_handle_t
modifier|*
name|zfs_open
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|zfs_handle_t
modifier|*
name|zfs_handle_dup
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_close
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zfs_type_t
name|zfs_get_type
parameter_list|(
specifier|const
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_get_name
parameter_list|(
specifier|const
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zpool_handle_t
modifier|*
name|zfs_get_pool_handle
parameter_list|(
specifier|const
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Property management functions.  Some functions are shared with the kernel,  * and are found in sys/fs/zfs.h.  */
comment|/*  * zfs dataset property management  */
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_default_string
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_prop_default_numeric
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_column_name
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_prop_align_right
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zfs_valid_proplist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_to_name
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_set
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|zprop_source_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_recvd
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_numeric
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|uint64_t
modifier|*
parameter_list|,
name|zprop_source_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_userquota_int
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|uint64_t
modifier|*
name|propvalue
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_userquota
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|char
modifier|*
name|propbuf
parameter_list|,
name|int
name|proplen
parameter_list|,
name|boolean_t
name|literal
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_written_int
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|uint64_t
modifier|*
name|propvalue
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_written
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|char
modifier|*
name|propbuf
parameter_list|,
name|int
name|proplen
parameter_list|,
name|boolean_t
name|literal
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_feature
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_prop_get_int
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_inherit
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_values
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_is_string
parameter_list|(
name|zfs_prop_t
name|prop
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zfs_get_user_props
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zfs_get_recvd_props
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zfs_get_clones_nvl
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zprop_list
block|{
name|int
name|pl_prop
decl_stmt|;
name|char
modifier|*
name|pl_user_prop
decl_stmt|;
name|struct
name|zprop_list
modifier|*
name|pl_next
decl_stmt|;
name|boolean_t
name|pl_all
decl_stmt|;
name|size_t
name|pl_width
decl_stmt|;
name|size_t
name|pl_recvd_width
decl_stmt|;
name|boolean_t
name|pl_fixed
decl_stmt|;
block|}
name|zprop_list_t
typedef|;
specifier|extern
name|int
name|zfs_expand_proplist
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zprop_list_t
modifier|*
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_prune_proplist
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|uint8_t
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|ZFS_MOUNTPOINT_NONE
value|"none"
define|#
directive|define
name|ZFS_MOUNTPOINT_LEGACY
value|"legacy"
define|#
directive|define
name|ZFS_FEATURE_DISABLED
value|"disabled"
define|#
directive|define
name|ZFS_FEATURE_ENABLED
value|"enabled"
define|#
directive|define
name|ZFS_FEATURE_ACTIVE
value|"active"
define|#
directive|define
name|ZFS_UNSUPPORTED_INACTIVE
value|"inactive"
define|#
directive|define
name|ZFS_UNSUPPORTED_READONLY
value|"readonly"
comment|/*  * zpool property management  */
specifier|extern
name|int
name|zpool_expand_proplist
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|zprop_list_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_prop_get_feature
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_default_string
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_prop_default_numeric
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_column_name
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zpool_prop_align_right
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
comment|/*  * Functions shared by zfs and zpool property management.  */
specifier|extern
name|int
name|zprop_iter
parameter_list|(
name|zprop_func
name|func
parameter_list|,
name|void
modifier|*
name|cb
parameter_list|,
name|boolean_t
name|show_all
parameter_list|,
name|boolean_t
name|ordered
parameter_list|,
name|zfs_type_t
name|type
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zprop_get_list
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|zprop_list_t
modifier|*
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zprop_free_list
parameter_list|(
name|zprop_list_t
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|ZFS_GET_NCOLS
value|5
typedef|typedef
enum|enum
block|{
name|GET_COL_NONE
block|,
name|GET_COL_NAME
block|,
name|GET_COL_PROPERTY
block|,
name|GET_COL_VALUE
block|,
name|GET_COL_RECVD
block|,
name|GET_COL_SOURCE
block|}
name|zfs_get_column_t
typedef|;
comment|/*  * Functions for printing zfs or zpool properties  */
typedef|typedef
struct|struct
name|zprop_get_cbdata
block|{
name|int
name|cb_sources
decl_stmt|;
name|zfs_get_column_t
name|cb_columns
index|[
name|ZFS_GET_NCOLS
index|]
decl_stmt|;
name|int
name|cb_colwidths
index|[
name|ZFS_GET_NCOLS
operator|+
literal|1
index|]
decl_stmt|;
name|boolean_t
name|cb_scripted
decl_stmt|;
name|boolean_t
name|cb_literal
decl_stmt|;
name|boolean_t
name|cb_first
decl_stmt|;
name|zprop_list_t
modifier|*
name|cb_proplist
decl_stmt|;
name|zfs_type_t
name|cb_type
decl_stmt|;
block|}
name|zprop_get_cbdata_t
typedef|;
name|void
name|zprop_print_one_property
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_get_cbdata_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zprop_source_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Iterator functions.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|zfs_iter_f
function_decl|)
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_root
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_children
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_dependents
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_filesystems
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_snapshots
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_snapshots_sorted
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_snapspec
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|get_all_cb
block|{
name|zfs_handle_t
modifier|*
modifier|*
name|cb_handles
decl_stmt|;
name|size_t
name|cb_alloc
decl_stmt|;
name|size_t
name|cb_used
decl_stmt|;
name|boolean_t
name|cb_verbose
decl_stmt|;
name|int
function_decl|(
modifier|*
name|cb_getone
function_decl|)
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
name|get_all_cb_t
typedef|;
name|void
name|libzfs_add_handle
parameter_list|(
name|get_all_cb_t
modifier|*
parameter_list|,
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|libzfs_dataset_cmp
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to create and destroy datasets.  */
specifier|extern
name|int
name|zfs_create
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_create_ancestors
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_destroy
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_destroy_snaps
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_destroy_snaps_nvl
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_clone
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_snapshot
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_snapshot_nvl
parameter_list|(
name|libzfs_handle_t
modifier|*
name|hdl
parameter_list|,
name|nvlist_t
modifier|*
name|snaps
parameter_list|,
name|nvlist_t
modifier|*
name|props
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_rollback
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_rename
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|sendflags
block|{
comment|/* print informational messages (ie, -v was specified) */
name|boolean_t
name|verbose
decl_stmt|;
comment|/* recursive send  (ie, -R) */
name|boolean_t
name|replicate
decl_stmt|;
comment|/* for incrementals, do all intermediate snapshots */
name|boolean_t
name|doall
decl_stmt|;
comment|/* if dataset is a clone, do incremental from its origin */
name|boolean_t
name|fromorigin
decl_stmt|;
comment|/* do deduplication */
name|boolean_t
name|dedup
decl_stmt|;
comment|/* send properties (ie, -p) */
name|boolean_t
name|props
decl_stmt|;
comment|/* do not send (no-op, ie. -n) */
name|boolean_t
name|dryrun
decl_stmt|;
comment|/* parsable verbose output (ie. -P) */
name|boolean_t
name|parsable
decl_stmt|;
comment|/* show progress (ie. -v) */
name|boolean_t
name|progress
decl_stmt|;
block|}
name|sendflags_t
typedef|;
typedef|typedef
name|boolean_t
function_decl|(
name|snapfilter_cb_t
function_decl|)
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_send
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|sendflags_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|snapfilter_cb_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_promote
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_hold
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_release
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_get_holds
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zvol_volsize_to_reservation
parameter_list|(
name|uint64_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|zfs_userspace_cb_t
function_decl|)
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|,
specifier|const
name|char
modifier|*
name|domain
parameter_list|,
name|uid_t
name|rid
parameter_list|,
name|uint64_t
name|space
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_userspace
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_userquota_prop_t
parameter_list|,
name|zfs_userspace_cb_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_get_fsacl
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_set_fsacl
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|recvflags
block|{
comment|/* print informational messages (ie, -v was specified) */
name|boolean_t
name|verbose
decl_stmt|;
comment|/* the destination is a prefix, not the exact fs (ie, -d) */
name|boolean_t
name|isprefix
decl_stmt|;
comment|/* 	 * Only the tail of the sent snapshot path is appended to the 	 * destination to determine the received snapshot name (ie, -e). 	 */
name|boolean_t
name|istail
decl_stmt|;
comment|/* do not actually do the recv, just check if it would work (ie, -n) */
name|boolean_t
name|dryrun
decl_stmt|;
comment|/* rollback/destroy filesystems as necessary (eg, -F) */
name|boolean_t
name|force
decl_stmt|;
comment|/* set "canmount=off" on all modified filesystems */
name|boolean_t
name|canmountoff
decl_stmt|;
comment|/* byteswap flag is used internally; callers need not specify */
name|boolean_t
name|byteswap
decl_stmt|;
comment|/* do not mount file systems as they are extracted (private) */
name|boolean_t
name|nomount
decl_stmt|;
block|}
name|recvflags_t
typedef|;
specifier|extern
name|int
name|zfs_receive
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|recvflags_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|avl_tree_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
enum|enum
name|diff_flags
block|{
name|ZFS_DIFF_PARSEABLE
init|=
literal|0x1
block|,
name|ZFS_DIFF_TIMESTAMP
init|=
literal|0x2
block|,
name|ZFS_DIFF_CLASSIFY
init|=
literal|0x4
block|}
name|diff_flags_t
typedef|;
specifier|extern
name|int
name|zfs_show_diffs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/*  * Miscellaneous functions.  */
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_type_to_name
parameter_list|(
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_refresh_properties
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_name_valid
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|zfs_handle_t
modifier|*
name|zfs_path_to_zhandle
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_dataset_exists
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_spa_version
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Mount support functions.  */
specifier|extern
name|boolean_t
name|is_mounted
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|special
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_is_mounted
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_mount
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unmount
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unmountall
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/*  * Share support functions.  */
specifier|extern
name|boolean_t
name|zfs_is_shared
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Protocol-specific share support functions.  */
specifier|extern
name|boolean_t
name|zfs_is_shared_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_is_shared_smb
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share_smb
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_shareall
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare_smb
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshareall_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshareall_smb
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshareall_bypath
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshareall
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_deleg_share_nfs
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|zfs_share_op_t
parameter_list|)
function_decl|;
comment|/*  * When dealing with nvlists, verify() is extremely useful  */
ifdef|#
directive|ifdef
name|NDEBUG
define|#
directive|define
name|verify
parameter_list|(
name|EX
parameter_list|)
value|((void)(EX))
else|#
directive|else
define|#
directive|define
name|verify
parameter_list|(
name|EX
parameter_list|)
value|assert(EX)
endif|#
directive|endif
comment|/*  * Utility function to convert a number to a human-readable form.  */
specifier|extern
name|void
name|zfs_nicenum
parameter_list|(
name|uint64_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_nicestrtonum
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Given a device or file, determine if it is part of a pool.  */
specifier|extern
name|int
name|zpool_in_use
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pool_state_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Label manipulation.  */
specifier|extern
name|int
name|zpool_read_label
parameter_list|(
name|int
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_clear_label
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* is this zvol valid for use as a dump device? */
specifier|extern
name|int
name|zvol_check_dump_config
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Management interfaces for SMB ACL files  */
name|int
name|zfs_smb_acl_add
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_smb_acl_remove
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_smb_acl_purge
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_smb_acl_rename
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Enable and disable datasets within a pool by mounting/unmounting and  * sharing/unsharing them.  */
specifier|extern
name|int
name|zpool_enable_datasets
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_disable_datasets
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
comment|/*  * Mappings between vdev and FRU.  */
specifier|extern
name|void
name|libzfs_fru_refresh
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_fru_lookup
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_fru_devpath
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|libzfs_fru_compare
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|libzfs_fru_notself
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_fru_set
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBZFS_H */
end_comment

end_unit

