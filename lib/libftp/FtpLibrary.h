begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* 		      Library for ftpd clients.(libftp) 			Copyright by Oleg Orel 			 All rights reserved. 			 This  library is desined  for  free,  non-commercial  software  creation.  It is changeable and can be improved. The author would greatly appreciate  any  advises, new  components  and  patches  of  the  existing  programs. Commercial  usage is  also  possible  with  participation of it's author.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__FTPLIBRARY_H
end_ifndef

begin_define
define|#
directive|define
name|__FTPLIBRARY_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<string.h>
include|#
directive|include
file|<stdlib.h>
include|#
directive|include
file|<sys/types.h>
include|#
directive|include
file|<sys/time.h>
include|#
directive|include
file|<sys/timeb.h>
include|#
directive|include
file|<sys/socket.h>
include|#
directive|include
file|<arpa/ftp.h>
include|#
directive|include
file|<netinet/in.h>
include|#
directive|include
file|<netdb.h>
include|#
directive|include
file|<arpa/telnet.h>
include|#
directive|include
file|<sys/stat.h>
ifndef|#
directive|ifndef
name|__FreeBSD__
specifier|extern
name|char
modifier|*
name|sys_errlist
index|[]
decl_stmt|;
specifier|extern
name|int
name|errno
decl_stmt|;
else|#
directive|else
include|#
directive|include
file|<errno.h>
endif|#
directive|endif
comment|/* Standard Macros& Definitions */
define|#
directive|define
name|EXIT
parameter_list|(
name|con
parameter_list|,
name|e
parameter_list|)
define|\
value|( con -> errno = e,  \     ((e==QUIT||e==LQUIT)&&(con->IO != NULL))?(*(con->IO))(con,e,sys_errlist[errno]):0,\    ((con->error != NULL)&& (e< 0) )?(*(con->error))(con,e,FtpMessage(e)):0,\    e)
define|#
directive|define
name|MAX_ANSWERS
value|10
comment|/* Number of known goodest answers for reqest */
define|#
directive|define
name|NFDS
value|64
define|#
directive|define
name|FTPBUFSIZ
value|BUFSIZ
define|#
directive|define
name|LQUIT
value|(-6)
define|#
directive|define
name|QUIT
value|(-5)
comment|/* Few time ago QUIT character been  		     equivalence to zero, changed for clear 		     conflicts with reading functions */
define|#
directive|define
name|Ctrl
parameter_list|(
name|x
parameter_list|)
value|((x) - '@')
define|#
directive|define
name|FREE
parameter_list|(
name|x
parameter_list|)
value|memset (&(x) , '\0' , sizeof (x) )
define|#
directive|define
name|CUT
parameter_list|(
name|x
parameter_list|)
value|((x)&0xff)
define|#
directive|define
name|FtpError
parameter_list|(
name|x
parameter_list|)
value|((x)<0)
define|#
directive|define
name|FtpAssert
parameter_list|(
name|ftp
parameter_list|,
name|x
parameter_list|)
value|if (FtpError(x)) return EXIT((ftp),(ftp)->errno);
typedef|typedef
name|int
name|STATUS
typedef|;
typedef|typedef
name|char
name|String
index|[
literal|256
index|]
typedef|;
ifdef|#
directive|ifdef
name|__GNUC__
define|#
directive|define
name|INLINE
value|inline
else|#
directive|else
define|#
directive|define
name|INLINE
endif|#
directive|endif
comment|/* Common Information Structure */
typedef|typedef
struct|struct
comment|/* All structure initialize from edited struct FtpInit */
block|{
name|FILE
modifier|*
name|sock
decl_stmt|;
comment|/* Command stream to server */
define|#
directive|define
name|FTPDATA
parameter_list|(
name|x
parameter_list|)
value|((x)->data)
define|#
directive|define
name|FTPCMD
parameter_list|(
name|x
parameter_list|)
value|((x)->sock)
name|FILE
modifier|*
name|data
decl_stmt|;
comment|/* Data stream to server */
name|char
name|mode
decl_stmt|;
comment|/* Binary, Ascii, ......... */
name|int
name|errno
decl_stmt|;
comment|/* Last error code */
name|int
name|ch
decl_stmt|;
comment|/* Help character for ascii streams */
name|STATUS
function_decl|(
modifier|*
name|error
function_decl|)
parameter_list|()
function_decl|;
name|STATUS
function_decl|(
modifier|*
name|debug
function_decl|)
parameter_list|()
function_decl|;
name|STATUS
function_decl|(
modifier|*
name|IO
function_decl|)
parameter_list|()
function_decl|;
name|STATUS
function_decl|(
modifier|*
name|hash
function_decl|)
parameter_list|()
function_decl|;
comment|/* Call with reading/writing next "int" characters 			 from stream */
name|int
name|seek
decl_stmt|;
comment|/* 		     Warning! If server not supported REST-command, 		     then seek variable automaticaly turn to zero 		   */
name|int
name|flags
decl_stmt|;
comment|/* FTP_REST,  		      FTP_NOEXIT */
name|struct
name|timeval
name|timeout
decl_stmt|;
comment|/* How long must be waiting next character  		      from server */
name|int
name|port
decl_stmt|;
name|String
name|title
decl_stmt|;
comment|/* Using for FtpLog, FtpConnect lets hostname */
name|unsigned
name|long
name|counter
decl_stmt|;
comment|/* Using by FtpHash */
block|}
name|FTP
typedef|;
typedef|typedef
struct|struct
block|{
name|struct
name|tm
name|createtime
decl_stmt|;
name|unsigned
name|long
name|size
decl_stmt|;
name|String
name|host
decl_stmt|;
name|String
name|file
decl_stmt|;
block|}
name|ARCHIE
typedef|;
enum|enum
block|{
name|FTP_REST
init|=
literal|1
block|,
name|FTP_NOEXIT
init|=
literal|2
block|}
enum|;
enum|enum
block|{
name|no
block|,
name|yes
block|}
enum|;
enum|enum
block|{
name|off
block|,
name|on
block|}
enum|;
enum|enum
block|{
name|false
block|,
name|true
block|}
enum|;
specifier|extern
name|FTP
name|FtpInit
decl_stmt|;
comment|/* Options defines */
define|#
directive|define
name|FtpSetFlag
parameter_list|(
name|ftp
parameter_list|,
name|flag
parameter_list|)
value|((ftp)->flags|=(flag))
define|#
directive|define
name|FtpClearFlag
parameter_list|(
name|ftp
parameter_list|,
name|flag
parameter_list|)
value|((ftp)->flags&= (~(flag)) )
define|#
directive|define
name|FtpTestFlag
parameter_list|(
name|ftp
parameter_list|,
name|flag
parameter_list|)
value|((ftp)->flags&(flag)==flag)
define|#
directive|define
name|FtpSetTimeout
parameter_list|(
name|ftp
parameter_list|,
name|tim
parameter_list|)
define|\
value|((ftp)->timeout.tv_sec=tim,(ftp)->timeout.tv_usec=0)
define|#
directive|define
name|FtpSetPort
parameter_list|(
name|ftp
parameter_list|,
name|prt
parameter_list|)
value|((ftp)->port=(prt))
comment|/* Connect& disconnect */
name|STATUS
name|FtpConnect
parameter_list|(
name|FTP
modifier|*
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|hostname
parameter_list|)
function_decl|;
define|#
directive|define
name|FtpUser
parameter_list|(
name|ftp
parameter_list|,
name|user
parameter_list|)
value|FtpCommand(ftp,"USER %s",user,230,331,332,EOF)
define|#
directive|define
name|FtpPassword
parameter_list|(
name|ftp
parameter_list|,
name|pas
parameter_list|)
value|FtpCommand(ftp,"PASS %s",pas,230,332,EOF)
define|#
directive|define
name|FtpAccount
parameter_list|(
name|ftp
parameter_list|,
name|acc
parameter_list|)
value|FtpCommand(ftp,"ACCT %s",acc,230,EOF)
name|STATUS
name|FtpLogin
parameter_list|(
name|FTP
modifier|*
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|host
parameter_list|,
name|char
modifier|*
name|user
parameter_list|,
name|char
modifier|*
name|pass
parameter_list|,
name|char
modifier|*
name|acct
parameter_list|)
function_decl|;
name|STATUS
name|FtpBye
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|)
function_decl|;
name|STATUS
name|FtpQuickBye
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|)
function_decl|;
name|STATUS
name|FtpAbort
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|)
function_decl|;
comment|/* Set type of transfer */
name|STATUS
name|FtpType
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|,
name|char
name|type
parameter_list|)
function_decl|;
define|#
directive|define
name|FtpAscii
parameter_list|(
name|ftp
parameter_list|)
value|FtpType(ftp,'A')
define|#
directive|define
name|FtpBinary
parameter_list|(
name|ftp
parameter_list|)
value|FtpType(ftp,'I')
comment|/* Send/Receive and handling Procedure(s) */
name|STATUS
name|FtpCopy
parameter_list|(
name|FTP
modifier|*
name|ftp1
parameter_list|,
name|FTP
modifier|*
name|ftp2
parameter_list|,
name|char
modifier|*
name|in
parameter_list|,
name|char
modifier|*
name|out
parameter_list|)
function_decl|;
name|STATUS
name|FtpPassiveTransfer
parameter_list|(
name|FTP
modifier|*
name|ftp1
parameter_list|,
name|FTP
modifier|*
name|ftp2
parameter_list|,
name|char
modifier|*
name|in
parameter_list|,
name|char
modifier|*
name|out
parameter_list|)
function_decl|;
name|STATUS
name|FtpRetr
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|command
parameter_list|,
name|char
modifier|*
name|inp
parameter_list|,
name|char
modifier|*
name|out
parameter_list|)
function_decl|;
define|#
directive|define
name|FtpGet
parameter_list|(
name|ftp
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
value|FtpRetr(ftp,"RETR %s",in,out)
define|#
directive|define
name|FtpDirectory
parameter_list|(
name|ftp
parameter_list|,
name|pat
parameter_list|,
name|out
parameter_list|)
value|FtpRetr(ftp,"LIST %s",pat,out)
define|#
directive|define
name|FtpDir
parameter_list|(
name|ftp
parameter_list|,
name|out
parameter_list|)
value|FtpRetr(ftp,"LIST","",out)
name|STATUS
name|FtpStor
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|command
parameter_list|,
name|char
modifier|*
name|inp
parameter_list|,
name|char
modifier|*
name|out
parameter_list|)
function_decl|;
define|#
directive|define
name|FtpPut
parameter_list|(
name|ftp
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
value|FtpStor(ftp,"STOR %s",in,out)
name|STATUS
name|FtpData
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|command
parameter_list|,
name|char
modifier|*
name|param
parameter_list|,
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|STATUS
name|FtpPort
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
define|#
directive|define
name|FtpOpenRead
parameter_list|(
name|ftp
parameter_list|,
name|file
parameter_list|)
value|FtpData(ftp,"RETR %s",file,"r")
define|#
directive|define
name|FtpOpenWrite
parameter_list|(
name|ftp
parameter_list|,
name|file
parameter_list|)
value|FtpData(ftp,"STOR %s",file,"w")
define|#
directive|define
name|FtpOpenAppend
parameter_list|(
name|ftp
parameter_list|,
name|file
parameter_list|)
value|FtpData(ftp,"APPE %s",file,"r")
name|STATUS
name|FtpOpenDir
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|files
parameter_list|)
function_decl|;
name|STATUS
name|FtpClose
parameter_list|(
name|FTP
modifier|*
parameter_list|)
function_decl|;
name|STATUS
name|FtpReadBlock
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|STATUS
name|FtpWriteBlock
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
comment|/* Command for hand transfer */
name|STATUS
name|FtpRead
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|)
function_decl|;
name|STATUS
name|FtpWrite
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
name|c
parameter_list|)
function_decl|;
name|int
name|FtpGetc
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
name|STATUS
name|FtpPutc
parameter_list|(
name|FTP
modifier|*
name|ftp
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|,
name|char
name|c
parameter_list|)
function_decl|;
comment|/* Manipulation commands for remote server */
name|STATUS
name|FtpCommand
parameter_list|()
function_decl|;
define|#
directive|define
name|FtpChdir
parameter_list|(
name|ftp
parameter_list|,
name|dir
parameter_list|)
value|FtpCommand(ftp,"CWD %s",dir,200,250,EOF)
define|#
directive|define
name|FtpMkdir
parameter_list|(
name|ftp
parameter_list|,
name|dir
parameter_list|)
value|FtpCommand(ftp,"MKD %s",dir,200,257,EOF)
define|#
directive|define
name|FtpRm
parameter_list|(
name|ftp
parameter_list|,
name|dir
parameter_list|)
value|FtpCommand(ftp,"DELE %s",dir,200,250,EOF)
name|char
modifier|*
name|FtpPwd
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|)
function_decl|;
name|int
name|FtpSize
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
name|STATUS
name|FtpMove
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|old
parameter_list|,
name|char
modifier|*
name|new
parameter_list|)
function_decl|;
comment|/* Procedures for dialog with remote server */
name|STATUS
name|FtpInitMessageList
parameter_list|()
function_decl|;
name|STATUS
name|FtpSendMessage
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|int
name|FtpGetMessage
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|char
modifier|*
name|FtpMessage
parameter_list|(
name|int
name|Number
parameter_list|)
function_decl|;
name|int
name|FtpNumber
parameter_list|(
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
comment|/* Debug */
define|#
directive|define
name|FtpSetErrorHandler
parameter_list|(
name|con
parameter_list|,
name|f
parameter_list|)
value|(con)->error = f
define|#
directive|define
name|FtpSetDebugHandler
parameter_list|(
name|con
parameter_list|,
name|f
parameter_list|)
value|(con)->debug = f
define|#
directive|define
name|FtpSetIOHandler
parameter_list|(
name|con
parameter_list|,
name|f
parameter_list|)
value|(con)->IO =f
define|#
directive|define
name|FtpSetHashHandler
parameter_list|(
name|con
parameter_list|,
name|f
parameter_list|)
value|(con)->hash =f
define|#
directive|define
name|FtplibDebug
parameter_list|(
name|t
parameter_list|)
value|FtpDebug(&FtpInit)
name|STATUS
name|FtpDebugDebug
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|int
name|errno
parameter_list|,
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|STATUS
name|FtpDebugError
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|int
name|errno
parameter_list|,
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|STATUS
name|FtpDebugIO
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|int
name|errno
parameter_list|,
name|char
modifier|*
name|Message
parameter_list|)
function_decl|;
name|STATUS
name|FtpLog
parameter_list|(
name|char
modifier|*
name|progtitle
parameter_list|,
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
name|STATUS
name|FtpHash
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|,
name|unsigned
name|long
name|number_of_bytes
parameter_list|)
function_decl|;
name|void
name|FtpDebug
parameter_list|(
name|FTP
modifier|*
name|con
parameter_list|)
function_decl|;
name|STATUS
name|FtpBadReply550
parameter_list|(
name|char
modifier|*
name|message
parameter_list|)
function_decl|;
comment|/* Other Procedures */
name|FTP
modifier|*
name|FtpCreateObject
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|FtpFullOpen
parameter_list|(
name|char
modifier|*
name|file
parameter_list|,
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|STATUS
name|FtpFullSyntax
parameter_list|(
name|String
parameter_list|,
name|String
parameter_list|,
name|String
parameter_list|,
name|String
parameter_list|,
name|String
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|Ftpfopen
parameter_list|(
name|char
modifier|*
name|filename
parameter_list|,
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|STATUS
name|Ftpfclose
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|STATUS
name|FtpFullClose
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|STATUS
name|FtpGood
parameter_list|()
function_decl|;
name|STATUS
name|FtpGood1
parameter_list|(
name|int
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
name|struct
name|hostent
modifier|*
name|FtpGetHost
parameter_list|(
name|char
modifier|*
name|host
parameter_list|)
function_decl|;
name|STATUS
name|FtpFilenameChecher
parameter_list|(
name|char
modifier|*
name|input
parameter_list|,
name|char
modifier|*
name|output
parameter_list|)
function_decl|;
name|STATUS
name|FtpLink
parameter_list|(
name|FTP
modifier|*
parameter_list|,
name|FTP
modifier|*
parameter_list|)
function_decl|;
name|int
name|FtpArchie
parameter_list|(
name|char
modifier|*
name|what
parameter_list|,
name|ARCHIE
modifier|*
parameter_list|,
name|int
name|number
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Additional definitions */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_AIX
end_ifdef

begin_function_decl
name|int
name|accept
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr_in
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|bcopy
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bind
parameter_list|(
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|connect
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr_in
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|gethostname
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|getsockname
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr_in
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|getpeername
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr_in
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|getsockopt
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|listen
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|setsockopt
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|socket
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|malloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __FTPLIBRARYH_ */
end_comment

end_unit

