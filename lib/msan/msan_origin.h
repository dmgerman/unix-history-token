begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- msan_origin.h ----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Origin id utils.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MSAN_ORIGIN_H
end_ifndef

begin_define
define|#
directive|define
name|MSAN_ORIGIN_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_stackdepot.h"
end_include

begin_include
include|#
directive|include
file|"msan_chained_origin_depot.h"
end_include

begin_decl_stmt
name|namespace
name|__msan
block|{
comment|// Origin handling.
comment|//
comment|// Origin is a 32-bit identifier that is attached to any uninitialized value in
comment|// the program and describes, more or less exactly, how this memory came to be
comment|// uninitialized.
comment|//
comment|// There are 3 kinds of origin ids:
comment|// 1xxx xxxx xxxx xxxx   heap origin id
comment|// 0000 xxxx xxxx xxxx   stack origin id
comment|// 0zzz xxxx xxxx xxxx   chained origin id
comment|//
comment|// Heap origin id describes a heap memory allocation and contains (in the xxx
comment|// part) a value of StackDepot.
comment|//
comment|// Stack origin id describes a stack memory allocation and contains (in the xxx
comment|// part) an index into StackOriginDescr and StackOriginPC. We don't store a
comment|// stack trace for such origins for performance reasons.
comment|//
comment|// Chained origin id describes an event of storing an uninitialized value to
comment|// memory. The xxx part is a value of ChainedOriginDepot, which is a mapping of
comment|// (stack_id, prev_id) -> id, where
comment|//  * stack_id describes the event.
comment|//    StackDepot keeps a mapping between those and corresponding stack traces.
comment|//  * prev_id is another origin id that describes the earlier part of the
comment|//    uninitialized value history.
comment|// Following a chain of prev_id provides the full recorded history of an
comment|// uninitialized value.
comment|//
comment|// This, effectively, defines a tree (or 2 trees, see below) where nodes are
comment|// points in value history marked with origin ids, and edges are events that are
comment|// marked with stack_id.
comment|//
comment|// The "zzz" bits of chained origin id are used to store the length (or depth)
comment|// of the origin chain.
name|class
name|Origin
block|{
name|public
label|:
specifier|static
name|bool
name|isValidId
parameter_list|(
name|u32
name|id
parameter_list|)
block|{
return|return
name|id
operator|!=
literal|0
operator|&&
name|id
operator|!=
operator|(
name|u32
operator|)
operator|-
literal|1
return|;
block|}
name|u32
name|raw_id
argument_list|()
specifier|const
block|{
return|return
name|raw_id_
return|;
block|}
name|bool
name|isHeapOrigin
argument_list|()
specifier|const
block|{
comment|// 1xxx xxxx xxxx xxxx
return|return
name|raw_id_
operator|>>
name|kHeapShift
operator|==
literal|0
return|;
block|}
name|bool
name|isStackOrigin
argument_list|()
specifier|const
block|{
comment|// 1000 xxxx xxxx xxxx
return|return
operator|(
name|raw_id_
operator|>>
name|kDepthShift
operator|)
operator|==
operator|(
literal|1
operator|<<
name|kDepthBits
operator|)
return|;
block|}
name|bool
name|isChainedOrigin
argument_list|()
specifier|const
block|{
comment|// 1zzz xxxx xxxx xxxx, zzz != 000
return|return
operator|(
name|raw_id_
operator|>>
name|kDepthShift
operator|)
operator|>
operator|(
literal|1
operator|<<
name|kDepthBits
operator|)
return|;
block|}
name|u32
name|getChainedId
argument_list|()
specifier|const
block|{
name|CHECK
argument_list|(
name|isChainedOrigin
argument_list|()
argument_list|)
block|;
return|return
name|raw_id_
operator|&
name|kChainedIdMask
return|;
block|}
name|u32
name|getStackId
argument_list|()
specifier|const
block|{
name|CHECK
argument_list|(
name|isStackOrigin
argument_list|()
argument_list|)
block|;
return|return
name|raw_id_
operator|&
name|kChainedIdMask
return|;
block|}
name|u32
name|getHeapId
argument_list|()
specifier|const
block|{
name|CHECK
argument_list|(
name|isHeapOrigin
argument_list|()
argument_list|)
block|;
return|return
name|raw_id_
operator|&
name|kHeapIdMask
return|;
block|}
comment|// Returns the next origin in the chain and the current stack trace.
name|Origin
name|getNextChainedOrigin
argument_list|(
name|StackTrace
operator|*
name|stack
argument_list|)
decl|const
block|{
name|CHECK
argument_list|(
name|isChainedOrigin
argument_list|()
argument_list|)
expr_stmt|;
name|u32
name|prev_id
decl_stmt|;
name|u32
name|stack_id
init|=
name|ChainedOriginDepotGet
argument_list|(
name|getChainedId
argument_list|()
argument_list|,
operator|&
name|prev_id
argument_list|)
decl_stmt|;
operator|*
name|stack
operator|=
name|StackDepotGet
argument_list|(
name|stack_id
argument_list|)
expr_stmt|;
return|return
name|Origin
argument_list|(
name|prev_id
argument_list|)
return|;
block|}
name|StackTrace
name|getStackTraceForHeapOrigin
argument_list|()
specifier|const
block|{
return|return
name|StackDepotGet
argument_list|(
name|getHeapId
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|Origin
name|CreateStackOrigin
parameter_list|(
name|u32
name|id
parameter_list|)
block|{
name|CHECK
argument_list|(
operator|(
name|id
operator|&
name|kStackIdMask
operator|)
operator|==
name|id
argument_list|)
expr_stmt|;
return|return
name|Origin
argument_list|(
operator|(
literal|1
operator|<<
name|kHeapShift
operator|)
operator||
name|id
argument_list|)
return|;
block|}
specifier|static
name|Origin
name|CreateHeapOrigin
parameter_list|(
name|StackTrace
modifier|*
name|stack
parameter_list|)
block|{
name|u32
name|stack_id
init|=
name|StackDepotPut
argument_list|(
operator|*
name|stack
argument_list|)
decl_stmt|;
name|CHECK
argument_list|(
name|stack_id
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
operator|(
name|stack_id
operator|&
name|kHeapIdMask
operator|)
operator|==
name|stack_id
argument_list|)
expr_stmt|;
return|return
name|Origin
argument_list|(
name|stack_id
argument_list|)
return|;
block|}
specifier|static
name|Origin
name|CreateChainedOrigin
parameter_list|(
name|Origin
name|prev
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
block|{
name|int
name|depth
init|=
name|prev
operator|.
name|isChainedOrigin
argument_list|()
condition|?
name|prev
operator|.
name|depth
argument_list|()
else|:
literal|0
decl_stmt|;
comment|// depth is the length of the chain minus 1.
comment|// origin_history_size of 0 means unlimited depth.
if|if
condition|(
name|flags
argument_list|()
operator|->
name|origin_history_size
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|depth
operator|+
literal|1
operator|>=
name|flags
argument_list|()
operator|->
name|origin_history_size
condition|)
block|{
return|return
name|prev
return|;
block|}
else|else
block|{
operator|++
name|depth
expr_stmt|;
name|CHECK
argument_list|(
name|depth
operator|<
operator|(
literal|1
operator|<<
name|kDepthBits
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|StackDepotHandle
name|h
init|=
name|StackDepotPut_WithHandle
argument_list|(
operator|*
name|stack
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|h
operator|.
name|valid
argument_list|()
condition|)
return|return
name|prev
return|;
if|if
condition|(
name|flags
argument_list|()
operator|->
name|origin_history_per_stack_limit
operator|>
literal|0
condition|)
block|{
name|int
name|use_count
init|=
name|h
operator|.
name|use_count
argument_list|()
decl_stmt|;
if|if
condition|(
name|use_count
operator|>
name|flags
argument_list|()
operator|->
name|origin_history_per_stack_limit
condition|)
return|return
name|prev
return|;
block|}
name|u32
name|chained_id
decl_stmt|;
name|bool
name|inserted
init|=
name|ChainedOriginDepotPut
argument_list|(
name|h
operator|.
name|id
argument_list|()
argument_list|,
name|prev
operator|.
name|raw_id
argument_list|()
argument_list|,
operator|&
name|chained_id
argument_list|)
decl_stmt|;
name|CHECK
argument_list|(
operator|(
name|chained_id
operator|&
name|kChainedIdMask
operator|)
operator|==
name|chained_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|inserted
operator|&&
name|flags
argument_list|()
operator|->
name|origin_history_per_stack_limit
operator|>
literal|0
condition|)
name|h
operator|.
name|inc_use_count_unsafe
argument_list|()
expr_stmt|;
return|return
name|Origin
argument_list|(
operator|(
literal|1
operator|<<
name|kHeapShift
operator|)
operator||
operator|(
name|depth
operator|<<
name|kDepthShift
operator|)
operator||
name|chained_id
argument_list|)
return|;
block|}
specifier|static
name|Origin
name|FromRawId
parameter_list|(
name|u32
name|id
parameter_list|)
block|{
return|return
name|Origin
argument_list|(
name|id
argument_list|)
return|;
block|}
name|private
label|:
specifier|static
specifier|const
name|int
name|kDepthBits
init|=
literal|3
decl_stmt|;
specifier|static
specifier|const
name|int
name|kDepthShift
init|=
literal|32
operator|-
name|kDepthBits
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|const
name|int
name|kHeapShift
init|=
literal|31
decl_stmt|;
specifier|static
specifier|const
name|u32
name|kChainedIdMask
init|=
operator|(
operator|(
name|u32
operator|)
operator|-
literal|1
operator|)
operator|>>
operator|(
literal|32
operator|-
name|kDepthShift
operator|)
decl_stmt|;
specifier|static
specifier|const
name|u32
name|kStackIdMask
init|=
operator|(
operator|(
name|u32
operator|)
operator|-
literal|1
operator|)
operator|>>
operator|(
literal|32
operator|-
name|kDepthShift
operator|)
decl_stmt|;
specifier|static
specifier|const
name|u32
name|kHeapIdMask
init|=
operator|(
operator|(
name|u32
operator|)
operator|-
literal|1
operator|)
operator|>>
operator|(
literal|32
operator|-
name|kHeapShift
operator|)
decl_stmt|;
name|u32
name|raw_id_
decl_stmt|;
name|explicit
name|Origin
argument_list|(
argument|u32 raw_id
argument_list|)
block|:
name|raw_id_
argument_list|(
argument|raw_id
argument_list|)
block|{}
name|int
name|depth
argument_list|()
specifier|const
block|{
name|CHECK
argument_list|(
name|isChainedOrigin
argument_list|()
argument_list|)
block|;
return|return
operator|(
name|raw_id_
operator|>>
name|kDepthShift
operator|)
operator|&
operator|(
operator|(
literal|1
operator|<<
name|kDepthBits
operator|)
operator|-
literal|1
operator|)
return|;
block|}
name|public
label|:
specifier|static
specifier|const
name|int
name|kMaxDepth
init|=
operator|(
literal|1
operator|<<
name|kDepthBits
operator|)
operator|-
literal|1
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __msan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// MSAN_ORIGIN_H
end_comment

end_unit

