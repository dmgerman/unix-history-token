begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=-- lsan_allocator.h ----------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of LeakSanitizer.
end_comment

begin_comment
comment|// Allocator for standalone LSan.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LSAN_ALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LSAN_ALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_allocator.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"lsan_common.h"
end_include

begin_decl_stmt
name|namespace
name|__lsan
block|{
name|void
modifier|*
name|Allocate
parameter_list|(
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|,
name|uptr
name|size
parameter_list|,
name|uptr
name|alignment
parameter_list|,
name|bool
name|cleared
parameter_list|)
function_decl|;
name|void
name|Deallocate
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
modifier|*
name|Reallocate
parameter_list|(
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|uptr
name|new_size
parameter_list|,
name|uptr
name|alignment
parameter_list|)
function_decl|;
name|uptr
name|GetMallocUsableSize
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|Callable
operator|>
name|void
name|ForEachChunk
argument_list|(
specifier|const
name|Callable
operator|&
name|callback
argument_list|)
expr_stmt|;
name|void
name|GetAllocatorCacheRange
parameter_list|(
name|uptr
modifier|*
name|begin
parameter_list|,
name|uptr
modifier|*
name|end
parameter_list|)
function_decl|;
name|void
name|AllocatorThreadFinish
parameter_list|()
function_decl|;
name|void
name|InitializeAllocator
parameter_list|()
function_decl|;
specifier|const
name|bool
name|kAlwaysClearMemory
init|=
name|true
decl_stmt|;
struct|struct
name|ChunkMetadata
block|{
name|u8
name|allocated
range|:
literal|8
decl_stmt|;
comment|// Must be first.
name|ChunkTag
name|tag
range|:
literal|2
decl_stmt|;
if|#
directive|if
name|SANITIZER_WORDSIZE
operator|==
literal|64
name|uptr
name|requested_size
range|:
literal|54
decl_stmt|;
else|#
directive|else
name|uptr
name|requested_size
range|:
literal|32
decl_stmt|;
name|uptr
name|padding
range|:
literal|22
decl_stmt|;
endif|#
directive|endif
name|u32
name|stack_trace_id
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|defined
argument_list|(
name|__mips64
argument_list|)
operator|||
name|defined
argument_list|(
name|__aarch64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|__arm__
argument_list|)
specifier|static
specifier|const
name|uptr
name|kRegionSizeLog
init|=
literal|20
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kNumRegions
init|=
name|SANITIZER_MMAP_RANGE_SIZE
operator|>>
name|kRegionSizeLog
decl_stmt|;
typedef|typedef
name|TwoLevelByteMap
operator|<
operator|(
name|kNumRegions
operator|>>
literal|12
operator|)
operator|,
literal|1
operator|<<
literal|12
operator|>
name|ByteMap
expr_stmt|;
typedef|typedef
name|CompactSizeClassMap
name|SizeClassMap
typedef|;
typedef|typedef
name|SizeClassAllocator32
operator|<
literal|0
operator|,
name|SANITIZER_MMAP_RANGE_SIZE
operator|,
sizeof|sizeof
argument_list|(
name|ChunkMetadata
argument_list|)
operator|,
name|SizeClassMap
operator|,
name|kRegionSizeLog
operator|,
name|ByteMap
operator|>
name|PrimaryAllocator
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|__x86_64__
argument_list|)
struct|struct
name|AP64
block|{
comment|// Allocator64 parameters. Deliberately using a short name.
specifier|static
specifier|const
name|uptr
name|kSpaceBeg
init|=
literal|0x600000000000ULL
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kSpaceSize
init|=
literal|0x40000000000ULL
decl_stmt|;
comment|// 4T.
specifier|static
specifier|const
name|uptr
name|kMetadataSize
init|=
sizeof|sizeof
argument_list|(
name|ChunkMetadata
argument_list|)
decl_stmt|;
typedef|typedef
name|DefaultSizeClassMap
name|SizeClassMap
typedef|;
typedef|typedef
name|NoOpMapUnmapCallback
name|MapUnmapCallback
typedef|;
specifier|static
specifier|const
name|uptr
name|kFlags
init|=
literal|0
decl_stmt|;
block|}
struct|;
typedef|typedef
name|SizeClassAllocator64
operator|<
name|AP64
operator|>
name|PrimaryAllocator
expr_stmt|;
endif|#
directive|endif
typedef|typedef
name|SizeClassAllocatorLocalCache
operator|<
name|PrimaryAllocator
operator|>
name|AllocatorCache
expr_stmt|;
name|AllocatorCache
modifier|*
name|GetAllocatorCache
parameter_list|()
function_decl|;
name|void
modifier|*
name|lsan_memalign
parameter_list|(
name|uptr
name|alignment
parameter_list|,
name|uptr
name|size
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|lsan_malloc
parameter_list|(
name|uptr
name|size
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|)
function_decl|;
name|void
name|lsan_free
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
modifier|*
name|lsan_realloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|uptr
name|size
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|lsan_calloc
parameter_list|(
name|uptr
name|nmemb
parameter_list|,
name|uptr
name|size
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|lsan_valloc
parameter_list|(
name|uptr
name|size
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|stack
parameter_list|)
function_decl|;
name|uptr
name|lsan_mz_size
parameter_list|(
specifier|const
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __lsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LSAN_ALLOCATOR_H
end_comment

end_unit

