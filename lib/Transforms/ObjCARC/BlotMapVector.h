begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- BlotMapVector.h - A MapVector with the blot operation -*- C++ -*----===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// \brief An associative container with fast insertion-order (deterministic)
comment|/// iteration over its elements. Plus the special blot operation.
name|template
operator|<
name|class
name|KeyT
operator|,
name|class
name|ValueT
operator|>
name|class
name|BlotMapVector
block|{
comment|/// Map keys to indices in Vector.
typedef|typedef
name|DenseMap
operator|<
name|KeyT
operator|,
name|size_t
operator|>
name|MapTy
expr_stmt|;
name|MapTy
name|Map
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|KeyT
operator|,
name|ValueT
operator|>>
name|VectorTy
expr_stmt|;
comment|/// Keys and values.
name|VectorTy
name|Vector
decl_stmt|;
name|public
label|:
typedef|typedef
name|typename
name|VectorTy
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|typename
name|VectorTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|EXPENSIVE_CHECKS
operator|~
name|BlotMapVector
argument_list|()
block|{
name|assert
argument_list|(
name|Vector
operator|.
name|size
argument_list|()
operator|>=
name|Map
operator|.
name|size
argument_list|()
argument_list|)
block|;
comment|// May differ due to blotting.
for|for
control|(
name|typename
name|MapTy
operator|::
name|const_iterator
name|I
operator|=
name|Map
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Map
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|assert
argument_list|(
name|I
operator|->
name|second
operator|<
name|Vector
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Vector
index|[
name|I
operator|->
name|second
index|]
operator|.
name|first
operator|==
name|I
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|typename
name|VectorTy
operator|::
name|const_iterator
name|I
operator|=
name|Vector
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Vector
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|assert
argument_list|(
operator|!
name|I
operator|->
name|first
operator|||
operator|(
name|Map
operator|.
name|count
argument_list|(
name|I
operator|->
name|first
argument_list|)
operator|&&
name|Map
index|[
name|I
operator|->
name|first
index|]
operator|==
name|size_t
argument_list|(
name|I
operator|-
name|Vector
operator|.
name|begin
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|ValueT
modifier|&
name|operator
function|[]
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Arg
parameter_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|typename
name|MapTy
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Pair
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Arg
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Pair
operator|.
name|second
condition|)
block|{
name|size_t
name|Num
init|=
name|Vector
operator|.
name|size
argument_list|()
decl_stmt|;
name|Pair
operator|.
name|first
operator|->
name|second
operator|=
name|Num
expr_stmt|;
name|Vector
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Arg
argument_list|,
name|ValueT
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Vector
index|[
name|Num
index|]
operator|.
name|second
return|;
block|}
return|return
name|Vector
index|[
name|Pair
operator|.
name|first
operator|->
name|second
index|]
operator|.
name|second
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|const std::pair<KeyT
argument_list|,
argument|ValueT>&InsertPair
argument_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|typename
name|MapTy
operator|::
name|iterator
block|,
name|bool
operator|>
name|Pair
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|InsertPair
operator|.
name|first
argument_list|,
name|size_t
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|Pair
operator|.
name|second
condition|)
block|{
name|size_t
name|Num
init|=
name|Vector
operator|.
name|size
argument_list|()
decl_stmt|;
name|Pair
operator|.
name|first
operator|->
name|second
operator|=
name|Num
expr_stmt|;
name|Vector
operator|.
name|push_back
argument_list|(
name|InsertPair
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|Num
argument_list|,
name|true
argument_list|)
return|;
block|}
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|Pair
operator|.
name|first
operator|->
name|second
argument_list|,
name|false
argument_list|)
return|;
block|}
name|iterator
name|find
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
name|typename
name|MapTy
operator|::
name|iterator
name|It
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
if|if
condition|(
name|It
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
return|return
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|It
operator|->
name|second
return|;
block|}
name|const_iterator
name|find
argument_list|(
specifier|const
name|KeyT
operator|&
name|Key
argument_list|)
decl|const
block|{
name|typename
name|MapTy
operator|::
name|const_iterator
name|It
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
if|if
condition|(
name|It
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|Vector
operator|.
name|end
argument_list|()
return|;
return|return
name|Vector
operator|.
name|begin
argument_list|()
operator|+
name|It
operator|->
name|second
return|;
block|}
comment|/// This is similar to erase, but instead of removing the element from the
comment|/// vector, it just zeros out the key in the vector. This leaves iterators
comment|/// intact, but clients must be prepared for zeroed-out keys when iterating.
name|void
name|blot
parameter_list|(
specifier|const
name|KeyT
modifier|&
name|Key
parameter_list|)
block|{
name|typename
name|MapTy
operator|::
name|iterator
name|It
operator|=
name|Map
operator|.
name|find
argument_list|(
name|Key
argument_list|)
expr_stmt|;
if|if
condition|(
name|It
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return;
name|Vector
index|[
name|It
operator|->
name|second
index|]
operator|.
name|first
operator|=
name|KeyT
argument_list|()
expr_stmt|;
name|Map
operator|.
name|erase
argument_list|(
name|It
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Map
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Vector
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Map
operator|.
name|empty
argument_list|()
operator|==
name|Vector
operator|.
name|empty
argument_list|()
argument_list|)
block|;
return|return
name|Map
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|//
end_comment

end_unit

