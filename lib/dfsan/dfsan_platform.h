begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- dfsan_platform.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of DataFlowSanitizer.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Platform specific information for DFSan.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DFSAN_PLATFORM_H
end_ifndef

begin_define
define|#
directive|define
name|DFSAN_PLATFORM_H
end_define

begin_decl_stmt
name|namespace
name|__dfsan
block|{
if|#
directive|if
name|defined
argument_list|(
name|__x86_64__
argument_list|)
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kShadowAddr
init|=
literal|0x10000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kUnionTableAddr
init|=
literal|0x200000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppAddr
init|=
literal|0x700000008000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowMask
init|=
operator|~
literal|0x700000000000
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|defined
argument_list|(
name|__mips64
argument_list|)
struct|struct
name|Mapping
block|{
specifier|static
specifier|const
name|uptr
name|kShadowAddr
init|=
literal|0x10000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kUnionTableAddr
init|=
literal|0x2000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppAddr
init|=
literal|0xF000008000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowMask
init|=
operator|~
literal|0xF000000000
decl_stmt|;
block|}
struct|;
elif|#
directive|elif
name|defined
argument_list|(
name|__aarch64__
argument_list|)
struct|struct
name|Mapping39
block|{
specifier|static
specifier|const
name|uptr
name|kShadowAddr
init|=
literal|0x10000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kUnionTableAddr
init|=
literal|0x1000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppAddr
init|=
literal|0x7000008000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowMask
init|=
operator|~
literal|0x7800000000
decl_stmt|;
block|}
struct|;
struct|struct
name|Mapping42
block|{
specifier|static
specifier|const
name|uptr
name|kShadowAddr
init|=
literal|0x10000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kUnionTableAddr
init|=
literal|0x8000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppAddr
init|=
literal|0x3ff00008000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowMask
init|=
operator|~
literal|0x3c000000000
decl_stmt|;
block|}
struct|;
struct|struct
name|Mapping48
block|{
specifier|static
specifier|const
name|uptr
name|kShadowAddr
init|=
literal|0x10000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kUnionTableAddr
init|=
literal|0x8000000000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kAppAddr
init|=
literal|0xffff00008000
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kShadowMask
init|=
operator|~
literal|0xfffff0000000
decl_stmt|;
block|}
struct|;
specifier|extern
name|int
name|vmaSize
decl_stmt|;
define|#
directive|define
name|DFSAN_RUNTIME_VMA
value|1
else|#
directive|else
error|#
directive|error
literal|"DFSan not supported for this platform!"
endif|#
directive|endif
enum|enum
name|MappingType
block|{
name|MAPPING_SHADOW_ADDR
block|,
name|MAPPING_UNION_TABLE_ADDR
block|,
name|MAPPING_APP_ADDR
block|,
name|MAPPING_SHADOW_MASK
block|}
enum|;
name|template
operator|<
name|typename
name|Mapping
operator|,
name|int
name|Type
operator|>
name|uptr
name|MappingImpl
argument_list|(
argument|void
argument_list|)
block|{
switch|switch
condition|(
name|Type
condition|)
block|{
case|case
name|MAPPING_SHADOW_ADDR
case|:
return|return
name|Mapping
operator|::
name|kShadowAddr
return|;
case|case
name|MAPPING_UNION_TABLE_ADDR
case|:
return|return
name|Mapping
operator|::
name|kUnionTableAddr
return|;
case|case
name|MAPPING_APP_ADDR
case|:
return|return
name|Mapping
operator|::
name|kAppAddr
return|;
case|case
name|MAPPING_SHADOW_MASK
case|:
return|return
name|Mapping
operator|::
name|kShadowMask
return|;
block|}
block|}
name|template
operator|<
name|int
name|Type
operator|>
name|uptr
name|MappingArchImpl
argument_list|(
argument|void
argument_list|)
block|{
ifdef|#
directive|ifdef
name|__aarch64__
switch|switch
condition|(
name|vmaSize
condition|)
block|{
case|case
literal|39
case|:
return|return
name|MappingImpl
operator|<
name|Mapping39
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
case|case
literal|42
case|:
return|return
name|MappingImpl
operator|<
name|Mapping42
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
case|case
literal|48
case|:
return|return
name|MappingImpl
operator|<
name|Mapping48
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
block|}
name|DCHECK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
else|#
directive|else
return|return
name|MappingImpl
operator|<
name|Mapping
operator|,
name|Type
operator|>
operator|(
operator|)
return|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_function
name|ALWAYS_INLINE
name|uptr
name|ShadowAddr
parameter_list|()
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_SHADOW_ADDR
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|UnionTableAddr
parameter_list|()
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_UNION_TABLE_ADDR
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|AppAddr
parameter_list|()
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_APP_ADDR
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_function
name|ALWAYS_INLINE
name|uptr
name|ShadowMask
parameter_list|()
block|{
return|return
name|MappingArchImpl
operator|<
name|MAPPING_SHADOW_MASK
operator|>
operator|(
operator|)
return|;
block|}
end_function

begin_comment
unit|}
comment|// namespace __dfsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

