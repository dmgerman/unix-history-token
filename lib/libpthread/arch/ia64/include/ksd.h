begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2003 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_KSD_H_
end_ifndef

begin_define
define|#
directive|define
name|_KSD_H_
end_define

begin_struct_decl
struct_decl|struct
name|kse
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pthread
struct_decl|;
end_struct_decl

begin_function
specifier|register
name|struct
name|kse
modifier|*
name|_tp
asm|__asm("%r13");
specifier|static
name|__inline
name|int
name|_ksd_create
parameter_list|(
name|struct
name|ksd
modifier|*
name|ksd
parameter_list|,
name|void
modifier|*
name|base
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|ksd
operator|->
name|ksd_base
operator|=
name|base
expr_stmt|;
name|ksd
operator|->
name|ksd_size
operator|=
name|size
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|kse
operator|*
name|_ksd_curkse
argument_list|()
block|{
comment|/* XXX why not simply return _tp? */
return|return
operator|(
operator|(
expr|struct
name|kse
operator|*
operator|)
name|_tp
operator|->
name|k_mbx
operator|.
name|km_udata
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|pthread
operator|*
name|_ksd_curthread
argument_list|()
block|{
return|return
operator|(
name|_tp
operator|->
name|k_curthread
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|__inline
name|void
name|_ksd_destroy
parameter_list|(
name|struct
name|ksd
modifier|*
name|ksd
parameter_list|)
block|{ }
end_function

begin_function
specifier|static
name|__inline
name|kse_critical_t
name|_ksd_get_tmbx
parameter_list|()
block|{
return|return
operator|(
name|_tp
operator|->
name|k_mbx
operator|.
name|km_curthread
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|kse_critical_t
name|_ksd_readandclear_tmbx
parameter_list|()
block|{
name|kse_critical_t
name|crit
decl_stmt|;
asm|__asm("xchg8    %0=[%1],r0" : "=r"(crit)
block|:
literal|"r"
operator|(
operator|&
name|_tp
operator|->
name|k_mbx
operator|.
name|km_curthread
operator|)
block|)
function|;
end_function

begin_return
return|return
operator|(
name|crit
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|_ksd_set_tmbx
parameter_list|(
name|kse_critical_t
name|crit
parameter_list|)
block|{
name|_tp
operator|->
name|k_mbx
operator|.
name|km_curthread
operator|=
name|crit
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_ksd_setprivate
parameter_list|(
name|struct
name|ksd
modifier|*
name|ksd
parameter_list|)
block|{
name|_tp
operator|=
operator|(
expr|struct
name|kse
operator|*
operator|)
name|ksd
operator|->
name|ksd_base
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _KSD_H_ */
end_comment

end_unit

