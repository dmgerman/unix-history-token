begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2010 The FreeBSD Foundation  * All rights reserved.  *  * This software was developed by Rui Paulo under sponsorship from the  * FreeBSD Foundation.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_RTLD_DB_H_
end_ifndef

begin_define
define|#
directive|define
name|_RTLD_DB_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_define
define|#
directive|define
name|RD_VERSION
value|1
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|RD_OK
block|,
name|RD_ERR
block|,
name|RD_DBERR
block|,
name|RD_NOCAPAB
block|,
name|RD_NODYNAM
block|,
name|RD_NOBASE
block|,
name|RD_NOMAPS
block|}
name|rd_err_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rd_agent
block|{
name|struct
name|proc_handle
modifier|*
name|rda_php
decl_stmt|;
name|uintptr_t
name|rda_dlactivity_addr
decl_stmt|;
name|uintptr_t
name|rda_preinit_addr
decl_stmt|;
name|uintptr_t
name|rda_postinit_addr
decl_stmt|;
block|}
name|rd_agent_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rd_loadobj
block|{
name|uintptr_t
name|rdl_saddr
decl_stmt|;
comment|/* start address */
name|uintptr_t
name|rdl_eaddr
decl_stmt|;
comment|/* end address */
name|uint32_t
name|rdl_offset
decl_stmt|;
name|uint8_t
name|rdl_prot
decl_stmt|;
define|#
directive|define
name|RD_RDL_R
value|0x01
define|#
directive|define
name|RD_RDL_W
value|0x02
define|#
directive|define
name|RD_RDL_X
value|0x04
enum|enum
block|{
name|RDL_TYPE_NONE
init|=
literal|0
block|,
name|RDL_TYPE_DEF
block|,
name|RDL_TYPE_VNODE
block|,
name|RDL_TYPE_SWAP
block|,
name|RDL_TYPE_DEV
block|,
comment|/* XXX some types missing */
name|RDL_TYPE_UNKNOWN
init|=
literal|255
block|}
name|rdl_type
enum|;
name|unsigned
name|char
name|rdl_path
index|[
name|PATH_MAX
index|]
decl_stmt|;
block|}
name|rd_loadobj_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RD_NONE
init|=
literal|0
block|,
name|RD_PREINIT
block|,
name|RD_POSTINIT
block|,
name|RD_DLACTIVITY
block|}
name|rd_event_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RD_NOTIFY_BPT
block|,
name|RD_NOTIFY_AUTOBPT
block|,
name|RD_NOTIFY_SYSCALL
block|}
name|rd_notify_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rd_notify
block|{
name|rd_notify_e
name|type
decl_stmt|;
union|union
block|{
name|uintptr_t
name|bptaddr
decl_stmt|;
name|long
name|syscallno
decl_stmt|;
block|}
name|u
union|;
block|}
name|rd_notify_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RD_NOSTATE
init|=
literal|0
block|,
name|RD_CONSISTENT
block|,
name|RD_ADD
block|,
name|RD_DELETE
block|}
name|rd_state_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rd_event_msg
block|{
name|rd_event_e
name|type
decl_stmt|;
union|union
block|{
name|rd_state_e
name|state
decl_stmt|;
block|}
name|u
union|;
block|}
name|rd_event_msg_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|RD_RESOLVE_NONE
block|,
name|RD_RESOLVE_STEP
block|,
name|RD_RESOLVE_TARGET
block|,
name|RD_RESOLVE_TARGET_STEP
block|}
name|rd_skip_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|rd_plt_info
block|{
name|rd_skip_e
name|pi_skip_method
decl_stmt|;
name|long
name|pi_nstep
decl_stmt|;
name|uintptr_t
name|pi_target
decl_stmt|;
name|uintptr_t
name|pi_baddr
decl_stmt|;
name|unsigned
name|int
name|pi_flags
decl_stmt|;
block|}
name|rd_plt_info_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|RD_FLG_PI_PLTBOUND
value|0x0001
end_define

begin_macro
name|__BEGIN_DECLS
end_macro

begin_struct_decl
struct_decl|struct
name|proc_handle
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|rd_delete
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|rd_errstr
parameter_list|(
name|rd_err_e
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_event_addr
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|rd_event_e
parameter_list|,
name|rd_notify_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_event_enable
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_event_getmsg
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|rd_event_msg_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_init
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|int
name|rl_iter_f
parameter_list|(
specifier|const
name|rd_loadobj_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|rd_err_e
name|rd_loadobj_iter
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|rl_iter_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rd_log
parameter_list|(
specifier|const
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_agent_t
modifier|*
name|rd_new
parameter_list|(
name|struct
name|proc_handle
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_objpad_enable
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|proc
struct_decl|;
end_struct_decl

begin_function_decl
name|rd_err_e
name|rd_plt_resolution
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|,
name|uintptr_t
parameter_list|,
name|struct
name|proc
modifier|*
parameter_list|,
name|uintptr_t
parameter_list|,
name|rd_plt_info_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|rd_err_e
name|rd_reset
parameter_list|(
name|rd_agent_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _RTLD_DB_H_ */
end_comment

end_unit

