begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- IndexingContext.h - Indexing context data ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_INDEX_INDEXINGCONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_INDEX_INDEXINGCONTEXT_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"clang/Index/IndexSymbol.h"
end_include

begin_include
include|#
directive|include
file|"clang/Index/IndexingAction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|DeclGroupRef
decl_stmt|;
name|class
name|ImportDecl
decl_stmt|;
name|class
name|TagDecl
decl_stmt|;
name|class
name|TypeSourceInfo
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|DeclContext
decl_stmt|;
name|class
name|NestedNameSpecifierLoc
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|TypeLoc
decl_stmt|;
name|class
name|SourceLocation
decl_stmt|;
name|namespace
name|index
block|{
name|class
name|IndexDataConsumer
decl_stmt|;
name|class
name|IndexingContext
block|{
name|IndexingOptions
name|IndexOpts
decl_stmt|;
name|IndexDataConsumer
modifier|&
name|DataConsumer
decl_stmt|;
name|ASTContext
modifier|*
name|Ctx
init|=
name|nullptr
decl_stmt|;
name|public
label|:
name|IndexingContext
argument_list|(
argument|IndexingOptions IndexOpts
argument_list|,
argument|IndexDataConsumer&DataConsumer
argument_list|)
block|:
name|IndexOpts
argument_list|(
name|IndexOpts
argument_list|)
operator|,
name|DataConsumer
argument_list|(
argument|DataConsumer
argument_list|)
block|{}
specifier|const
name|IndexingOptions
operator|&
name|getIndexOpts
argument_list|()
specifier|const
block|{
return|return
name|IndexOpts
return|;
block|}
name|IndexDataConsumer
modifier|&
name|getDataConsumer
parameter_list|()
block|{
return|return
name|DataConsumer
return|;
block|}
name|void
name|setASTContext
parameter_list|(
name|ASTContext
modifier|&
name|ctx
parameter_list|)
block|{
name|Ctx
operator|=
operator|&
name|ctx
expr_stmt|;
block|}
name|bool
name|shouldSuppressRefs
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|bool
name|shouldIndexFunctionLocalSymbols
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|shouldIndexImplicitTemplateInsts
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|isTemplateImplicitInstantiation
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|handleDecl
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|SymbolRoleSet
name|Roles
operator|=
name|SymbolRoleSet
argument_list|()
argument_list|,
name|ArrayRef
operator|<
name|SymbolRelation
operator|>
name|Relations
operator|=
name|None
argument_list|)
decl_stmt|;
name|bool
name|handleDecl
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|SymbolRoleSet
name|Roles
operator|=
name|SymbolRoleSet
argument_list|()
argument_list|,
name|ArrayRef
operator|<
name|SymbolRelation
operator|>
name|Relations
operator|=
name|None
argument_list|,
specifier|const
name|DeclContext
operator|*
name|DC
operator|=
name|nullptr
argument_list|)
decl_stmt|;
name|bool
name|handleReference
argument_list|(
specifier|const
name|NamedDecl
operator|*
name|D
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
specifier|const
name|NamedDecl
operator|*
name|Parent
argument_list|,
specifier|const
name|DeclContext
operator|*
name|DC
argument_list|,
name|SymbolRoleSet
name|Roles
operator|=
name|SymbolRoleSet
argument_list|()
argument_list|,
name|ArrayRef
operator|<
name|SymbolRelation
operator|>
name|Relations
operator|=
name|None
argument_list|,
specifier|const
name|Expr
operator|*
name|RefE
operator|=
name|nullptr
argument_list|,
specifier|const
name|Decl
operator|*
name|RefD
operator|=
name|nullptr
argument_list|)
decl_stmt|;
name|bool
name|importedModule
parameter_list|(
specifier|const
name|ImportDecl
modifier|*
name|ImportD
parameter_list|)
function_decl|;
name|bool
name|indexDecl
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|indexTagDecl
parameter_list|(
specifier|const
name|TagDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|indexTypeSourceInfo
parameter_list|(
name|TypeSourceInfo
modifier|*
name|TInfo
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|Parent
parameter_list|,
specifier|const
name|DeclContext
modifier|*
name|DC
init|=
name|nullptr
parameter_list|,
name|bool
name|isBase
init|=
name|false
parameter_list|,
name|bool
name|isIBType
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|indexTypeLoc
parameter_list|(
name|TypeLoc
name|TL
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|Parent
parameter_list|,
specifier|const
name|DeclContext
modifier|*
name|DC
init|=
name|nullptr
parameter_list|,
name|bool
name|isBase
init|=
name|false
parameter_list|,
name|bool
name|isIBType
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|indexNestedNameSpecifierLoc
parameter_list|(
name|NestedNameSpecifierLoc
name|NNS
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|Parent
parameter_list|,
specifier|const
name|DeclContext
modifier|*
name|DC
init|=
name|nullptr
parameter_list|)
function_decl|;
name|bool
name|indexDeclContext
parameter_list|(
specifier|const
name|DeclContext
modifier|*
name|DC
parameter_list|)
function_decl|;
name|void
name|indexBody
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|Parent
parameter_list|,
specifier|const
name|DeclContext
modifier|*
name|DC
init|=
name|nullptr
parameter_list|)
function_decl|;
name|bool
name|indexTopLevelDecl
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|indexDeclGroupRef
parameter_list|(
name|DeclGroupRef
name|DG
parameter_list|)
function_decl|;
name|private
label|:
name|bool
name|shouldIgnoreIfImplicit
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|bool
name|handleDeclOccurrence
argument_list|(
specifier|const
name|Decl
operator|*
name|D
argument_list|,
name|SourceLocation
name|Loc
argument_list|,
name|bool
name|IsRef
argument_list|,
specifier|const
name|Decl
operator|*
name|Parent
argument_list|,
name|SymbolRoleSet
name|Roles
argument_list|,
name|ArrayRef
operator|<
name|SymbolRelation
operator|>
name|Relations
argument_list|,
specifier|const
name|Expr
operator|*
name|RefE
argument_list|,
specifier|const
name|Decl
operator|*
name|RefD
argument_list|,
specifier|const
name|DeclContext
operator|*
name|ContainerDC
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace index
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

