begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ASTVisitor.h - Visitor for an ASTContext ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the ASTVisitor interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_INDEX_ASTVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_INDEX_ASTVISITOR_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/StmtVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TypeLocVisitor.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|idx
block|{
comment|/// \brief Traverses the full AST, both Decls and Stmts.
name|template
operator|<
name|typename
name|ImplClass
operator|>
name|class
name|ASTVisitor
operator|:
name|public
name|DeclVisitor
operator|<
name|ImplClass
operator|>
operator|,
name|public
name|StmtVisitor
operator|<
name|ImplClass
operator|>
operator|,
name|public
name|TypeLocVisitor
operator|<
name|ImplClass
operator|>
block|{
name|public
operator|:
name|ASTVisitor
argument_list|()
operator|:
name|CurrentDecl
argument_list|(
literal|0
argument_list|)
block|{ }
name|Decl
operator|*
name|CurrentDecl
block|;
typedef|typedef
name|ASTVisitor
operator|<
name|ImplClass
operator|>
name|Base
expr_stmt|;
typedef|typedef
name|DeclVisitor
operator|<
name|ImplClass
operator|>
name|BaseDeclVisitor
expr_stmt|;
typedef|typedef
name|StmtVisitor
operator|<
name|ImplClass
operator|>
name|BaseStmtVisitor
expr_stmt|;
typedef|typedef
name|TypeLocVisitor
operator|<
name|ImplClass
operator|>
name|BaseTypeLocVisitor
expr_stmt|;
name|using
name|BaseStmtVisitor
operator|::
name|Visit
expr_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// DeclVisitor
comment|//===--------------------------------------------------------------------===//
name|void
name|Visit
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|Decl
modifier|*
name|PrevDecl
init|=
name|CurrentDecl
decl_stmt|;
name|CurrentDecl
operator|=
name|D
expr_stmt|;
name|BaseDeclVisitor
operator|::
name|Visit
argument_list|(
name|D
argument_list|)
expr_stmt|;
name|CurrentDecl
operator|=
name|PrevDecl
expr_stmt|;
block|}
name|void
name|VisitDeclaratorDecl
parameter_list|(
name|DeclaratorDecl
modifier|*
name|D
parameter_list|)
block|{
name|BaseDeclVisitor
operator|::
name|VisitDeclaratorDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|TypeSourceInfo
modifier|*
name|TInfo
init|=
name|D
operator|->
name|getTypeSourceInfo
argument_list|()
condition|)
name|Visit
argument_list|(
name|TInfo
operator|->
name|getTypeLoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitFunctionDecl
parameter_list|(
name|FunctionDecl
modifier|*
name|D
parameter_list|)
block|{
name|BaseDeclVisitor
operator|::
name|VisitFunctionDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|D
operator|->
name|isThisDeclarationADefinition
argument_list|()
condition|)
name|Visit
argument_list|(
name|D
operator|->
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitObjCMethodDecl
parameter_list|(
name|ObjCMethodDecl
modifier|*
name|D
parameter_list|)
block|{
name|BaseDeclVisitor
operator|::
name|VisitObjCMethodDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|D
operator|->
name|getBody
argument_list|()
condition|)
name|Visit
argument_list|(
name|D
operator|->
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitBlockDecl
parameter_list|(
name|BlockDecl
modifier|*
name|D
parameter_list|)
block|{
name|BaseDeclVisitor
operator|::
name|VisitBlockDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
name|Visit
argument_list|(
name|D
operator|->
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitVarDecl
parameter_list|(
name|VarDecl
modifier|*
name|D
parameter_list|)
block|{
name|BaseDeclVisitor
operator|::
name|VisitVarDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expr
modifier|*
name|Init
init|=
name|D
operator|->
name|getInit
argument_list|()
condition|)
name|Visit
argument_list|(
name|Init
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitDecl
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
block|{
if|if
condition|(
name|isa
operator|<
name|FunctionDecl
operator|>
operator|(
name|D
operator|)
operator|||
name|isa
operator|<
name|ObjCMethodDecl
operator|>
operator|(
name|D
operator|)
operator|||
name|isa
operator|<
name|BlockDecl
operator|>
operator|(
name|D
operator|)
condition|)
return|return;
if|if
condition|(
name|DeclContext
modifier|*
name|DC
init|=
name|dyn_cast
operator|<
name|DeclContext
operator|>
operator|(
name|D
operator|)
condition|)
name|static_cast
operator|<
name|ImplClass
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|VisitDeclContext
argument_list|(
name|DC
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitDeclContext
parameter_list|(
name|DeclContext
modifier|*
name|DC
parameter_list|)
block|{
for|for
control|(
name|DeclContext
operator|::
name|decl_iterator
name|I
operator|=
name|DC
operator|->
name|decls_begin
argument_list|()
operator|,
name|E
operator|=
name|DC
operator|->
name|decls_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|Visit
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// StmtVisitor
comment|//===--------------------------------------------------------------------===//
name|void
name|VisitDeclStmt
parameter_list|(
name|DeclStmt
modifier|*
name|Node
parameter_list|)
block|{
for|for
control|(
name|DeclStmt
operator|::
name|decl_iterator
name|I
operator|=
name|Node
operator|->
name|decl_begin
argument_list|()
operator|,
name|E
operator|=
name|Node
operator|->
name|decl_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|Visit
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitBlockExpr
parameter_list|(
name|BlockExpr
modifier|*
name|Node
parameter_list|)
block|{
comment|// The BlockDecl is also visited by 'VisitDeclContext()'.  No need to visit it twice.
block|}
name|void
name|VisitStmt
parameter_list|(
name|Stmt
modifier|*
name|Node
parameter_list|)
block|{
for|for
control|(
name|Stmt
operator|::
name|child_iterator
name|I
operator|=
name|Node
operator|->
name|child_begin
argument_list|()
operator|,
name|E
operator|=
name|Node
operator|->
name|child_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
operator|*
name|I
condition|)
name|Visit
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// TypeLocVisitor
comment|//===--------------------------------------------------------------------===//
name|void
name|Visit
parameter_list|(
name|TypeLoc
name|TL
parameter_list|)
block|{
for|for
control|(
init|;
name|TL
condition|;
name|TL
operator|=
name|TL
operator|.
name|getNextTypeLoc
argument_list|()
control|)
name|BaseTypeLocVisitor
operator|::
name|Visit
argument_list|(
name|TL
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitArrayLoc
parameter_list|(
name|ArrayTypeLoc
name|TL
parameter_list|)
block|{
name|BaseTypeLocVisitor
operator|::
name|VisitArrayTypeLoc
argument_list|(
name|TL
argument_list|)
expr_stmt|;
if|if
condition|(
name|TL
operator|.
name|getSizeExpr
argument_list|()
condition|)
name|Visit
argument_list|(
name|TL
operator|.
name|getSizeExpr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|VisitFunctionTypeLoc
parameter_list|(
name|FunctionTypeLoc
name|TL
parameter_list|)
block|{
name|BaseTypeLocVisitor
operator|::
name|VisitFunctionTypeLoc
argument_list|(
name|TL
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|TL
operator|.
name|getNumArgs
argument_list|()
condition|;
operator|++
name|i
control|)
name|Visit
argument_list|(
name|TL
operator|.
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace idx
end_comment

begin_comment
unit|}
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

