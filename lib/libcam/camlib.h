begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997, 1998 Kenneth D. Merry.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Buffer encoding/decoding routines taken from the original FreeBSD SCSI  * library and slightly modified.  The original header file had the following  * copyright:  */
end_comment

begin_comment
comment|/* Copyright (c) 1994 HD Associates (hd@world.std.com)  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  * This product includes software developed by HD Associates  * 4. Neither the name of the HD Associaates nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY HD ASSOCIATES``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL HD ASSOCIATES OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAMLIB_H
end_ifndef

begin_define
define|#
directive|define
name|_CAMLIB_H
end_define

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam.h>
end_include

begin_include
include|#
directive|include
file|<cam/cam_ccb.h>
end_include

begin_define
define|#
directive|define
name|CAM_ERRBUF_SIZE
value|2048
end_define

begin_comment
comment|/* sizeof the CAM libarary error string  */
end_comment

begin_comment
comment|/*  * Right now we hard code the transport layer device, but this will change  * if we ever get more than one transport layer.  */
end_comment

begin_define
define|#
directive|define
name|XPT_DEVICE
value|"/dev/xpt0"
end_define

begin_decl_stmt
specifier|extern
name|char
name|cam_errbuf
index|[]
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|cam_device
block|{
name|char
name|device_path
index|[
name|MAXPATHLEN
index|]
decl_stmt|;
comment|/* 						   * Pathname of the device  						   * given by the user. This 						   * may be null if the 						   * user states the device 						   * name and unit number 						   * separately. 						   */
name|char
name|given_dev_name
index|[
name|DEV_IDLEN
operator|+
literal|1
index|]
decl_stmt|;
comment|/* 						     * Device name given by 						     * the user. 						     */
name|u_int32_t
name|given_unit_number
decl_stmt|;
comment|/* 						     * Unit number given by 						     * the user. 						     */
name|char
name|device_name
index|[
name|DEV_IDLEN
operator|+
literal|1
index|]
decl_stmt|;
comment|/*  						  * Name of the device,  						  * e.g. 'pass'  						  */
name|u_int32_t
name|dev_unit_num
decl_stmt|;
comment|/* Unit number of the passthrough 					 * device associated with this 					 * particular device. 					 */
name|char
name|sim_name
index|[
name|SIM_IDLEN
operator|+
literal|1
index|]
decl_stmt|;
comment|/* Controller name, e.g. 'ahc' */
name|u_int32_t
name|sim_unit_number
decl_stmt|;
comment|/* Controller unit number */
name|u_int32_t
name|bus_id
decl_stmt|;
comment|/* Controller bus number */
name|lun_id_t
name|target_lun
decl_stmt|;
comment|/* Logical Unit Number */
name|target_id_t
name|target_id
decl_stmt|;
comment|/* Target ID */
name|path_id_t
name|path_id
decl_stmt|;
comment|/* System SCSI bus number */
name|u_int16_t
name|pd_type
decl_stmt|;
comment|/* type of peripheral device */
name|struct
name|scsi_inquiry_data
name|inq_data
decl_stmt|;
comment|/* SCSI Inquiry data */
name|u_int8_t
name|serial_num
index|[
literal|252
index|]
decl_stmt|;
comment|/* device serial number */
name|u_int8_t
name|serial_num_len
decl_stmt|;
comment|/* length of the serial number */
name|u_int8_t
name|sync_period
decl_stmt|;
comment|/* Negotiated sync period */
name|u_int8_t
name|sync_offset
decl_stmt|;
comment|/* Negotiated sync offset */
name|u_int8_t
name|bus_width
decl_stmt|;
comment|/* Negotiated bus width */
name|int
name|fd
decl_stmt|;
comment|/* file descriptor for device */
block|}
struct|;
end_struct

begin_function_decl
name|__BEGIN_DECLS
comment|/* Basic utility commands */
name|struct
name|cam_device
modifier|*
name|cam_open_device
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_close_device
parameter_list|(
name|struct
name|cam_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_close_spec_device
parameter_list|(
name|struct
name|cam_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_device
modifier|*
name|cam_open_spec_device
parameter_list|(
specifier|const
name|char
modifier|*
name|dev_name
parameter_list|,
name|int
name|unit
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|cam_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_device
modifier|*
name|cam_open_btl
parameter_list|(
name|path_id_t
name|path_id
parameter_list|,
name|target_id_t
name|target_id
parameter_list|,
name|lun_id_t
name|target_lun
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|cam_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_device
modifier|*
name|cam_open_pass
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|cam_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|union
name|ccb
modifier|*
name|cam_getccb
parameter_list|(
name|struct
name|cam_device
modifier|*
name|dev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_freeccb
parameter_list|(
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_send_ccb
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|cam_path_string
parameter_list|(
name|struct
name|cam_device
modifier|*
name|dev
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cam_device
modifier|*
name|cam_device_dup
parameter_list|(
name|struct
name|cam_device
modifier|*
name|device
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cam_device_copy
parameter_list|(
name|struct
name|cam_device
modifier|*
name|src
parameter_list|,
name|struct
name|cam_device
modifier|*
name|dst
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|cam_get_device
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|dev_name
parameter_list|,
name|int
name|devnamelen
parameter_list|,
name|int
modifier|*
name|unit
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Buffer encoding/decoding routines, from the old SCSI library.  */
end_comment

begin_function_decl
name|int
name|csio_decode
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|2
operator|,
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|csio_decode_visit
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|void
function_decl|(
modifier|*
name|arg_put
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|puthook
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|buff_decode
parameter_list|(
name|u_int8_t
modifier|*
name|buff
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|3
operator|,
function_decl|4
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|buff_decode_visit
parameter_list|(
name|u_int8_t
modifier|*
name|buff
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|void
function_decl|(
modifier|*
name|arg_put
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|puthook
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|csio_build
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int32_t
name|flags
parameter_list|,
name|int
name|retry_count
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|char
modifier|*
name|cmd_spec
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|csio_build_visit
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
name|u_int8_t
modifier|*
name|data_ptr
parameter_list|,
name|u_int32_t
name|dxfer_len
parameter_list|,
name|u_int32_t
name|flags
parameter_list|,
name|int
name|retry_count
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|char
modifier|*
name|cmd_spec
parameter_list|,
name|int
function_decl|(
modifier|*
name|arg_get
function_decl|)
parameter_list|(
name|void
modifier|*
name|hook
parameter_list|,
name|char
modifier|*
name|field_name
parameter_list|)
parameter_list|,
name|void
modifier|*
name|gethook
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|csio_encode
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|__printflike
parameter_list|(
function_decl|2
operator|,
function_decl|3
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|int
name|buff_encode_visit
parameter_list|(
name|u_int8_t
modifier|*
name|buff
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|int
function_decl|(
modifier|*
name|arg_get
function_decl|)
parameter_list|(
name|void
modifier|*
name|hook
parameter_list|,
name|char
modifier|*
name|field_name
parameter_list|)
parameter_list|,
name|void
modifier|*
name|gethook
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|csio_encode_visit
parameter_list|(
name|struct
name|ccb_scsiio
modifier|*
name|csio
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|int
function_decl|(
modifier|*
name|arg_get
function_decl|)
parameter_list|(
name|void
modifier|*
name|hook
parameter_list|,
name|char
modifier|*
name|field_name
parameter_list|)
parameter_list|,
name|void
modifier|*
name|gethook
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAMLIB_H */
end_comment

end_unit

