begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AMDGPU.h - MachineFunction passes hw codegen --------------*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_AMDGPU_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_AMDGPU_H
end_define

begin_include
include|#
directive|include
file|"MCTargetDesc/AMDGPUMCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AMDGPUTargetMachine
decl_stmt|;
name|class
name|FunctionPass
decl_stmt|;
name|class
name|GCNTargetMachine
decl_stmt|;
name|class
name|ModulePass
decl_stmt|;
name|class
name|Pass
decl_stmt|;
name|class
name|Target
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
name|class
name|PassRegistry
decl_stmt|;
name|class
name|Module
decl_stmt|;
comment|// R600 Passes
name|FunctionPass
modifier|*
name|createR600VectorRegMerger
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createR600ExpandSpecialInstrsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createR600EmitClauseMarkers
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createR600ClauseMergePass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createR600Packetizer
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createR600ControlFlowFinalizer
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createAMDGPUCFGStructurizerPass
parameter_list|()
function_decl|;
comment|// SI Passes
name|FunctionPass
modifier|*
name|createSITypeRewriter
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIAnnotateControlFlowPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIFoldOperandsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIPeepholeSDWAPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSILowerI1CopiesPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIShrinkInstructionsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSILoadStoreOptimizerPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIWholeQuadModePass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIFixControlFlowLiveIntervalsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIFixSGPRCopiesPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIDebuggerInsertNopsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIInsertWaitsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createSIInsertWaitcntsPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createAMDGPUCodeGenPreparePass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createAMDGPUMachineCFGStructurizerPass
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPUMachineCFGStructurizerPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUMachineCFGStructurizerID
decl_stmt|;
name|void
name|initializeAMDGPUAlwaysInlinePass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
name|ModulePass
modifier|*
name|createAMDGPUAnnotateKernelFeaturesPass
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPUAnnotateKernelFeaturesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUAnnotateKernelFeaturesID
decl_stmt|;
name|ModulePass
modifier|*
name|createAMDGPULowerIntrinsicsPass
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPULowerIntrinsicsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPULowerIntrinsicsID
decl_stmt|;
name|void
name|initializeSIFoldOperandsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIFoldOperandsID
decl_stmt|;
name|void
name|initializeSIPeepholeSDWAPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIPeepholeSDWAID
decl_stmt|;
name|void
name|initializeSIShrinkInstructionsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIShrinkInstructionsID
decl_stmt|;
name|void
name|initializeSIFixSGPRCopiesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIFixSGPRCopiesID
decl_stmt|;
name|void
name|initializeSIFixVGPRCopiesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIFixVGPRCopiesID
decl_stmt|;
name|void
name|initializeSILowerI1CopiesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SILowerI1CopiesID
decl_stmt|;
name|void
name|initializeSILoadStoreOptimizerPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SILoadStoreOptimizerID
decl_stmt|;
name|void
name|initializeSIWholeQuadModePass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIWholeQuadModeID
decl_stmt|;
name|void
name|initializeSILowerControlFlowPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SILowerControlFlowID
decl_stmt|;
name|void
name|initializeSIInsertSkipsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIInsertSkipsPassID
decl_stmt|;
name|void
name|initializeSIOptimizeExecMaskingPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIOptimizeExecMaskingID
decl_stmt|;
comment|// Passes common to R600 and SI
name|FunctionPass
modifier|*
name|createAMDGPUPromoteAlloca
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPUPromoteAllocaPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUPromoteAllocaID
decl_stmt|;
name|Pass
modifier|*
name|createAMDGPUStructurizeCFGPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createAMDGPUISelDag
argument_list|(
name|TargetMachine
operator|&
name|TM
argument_list|,
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|)
decl_stmt|;
name|ModulePass
modifier|*
name|createAMDGPUAlwaysInlinePass
parameter_list|(
name|bool
name|GlobalOpt
init|=
name|true
parameter_list|)
function_decl|;
name|ModulePass
modifier|*
name|createAMDGPUOpenCLImageTypeLoweringPass
parameter_list|()
function_decl|;
name|FunctionPass
modifier|*
name|createAMDGPUAnnotateUniformValues
parameter_list|()
function_decl|;
name|ModulePass
modifier|*
name|createAMDGPUUnifyMetadataPass
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPUUnifyMetadataPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUUnifyMetadataID
decl_stmt|;
name|void
name|initializeSIFixControlFlowLiveIntervalsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIFixControlFlowLiveIntervalsID
decl_stmt|;
name|void
name|initializeAMDGPUAnnotateUniformValuesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUAnnotateUniformValuesPassID
decl_stmt|;
name|void
name|initializeAMDGPUCodeGenPreparePass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUCodeGenPrepareID
decl_stmt|;
name|void
name|initializeSIAnnotateControlFlowPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIAnnotateControlFlowPassID
decl_stmt|;
name|void
name|initializeSIDebuggerInsertNopsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIDebuggerInsertNopsID
decl_stmt|;
name|void
name|initializeSIInsertWaitsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIInsertWaitsID
decl_stmt|;
name|void
name|initializeSIInsertWaitcntsPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|SIInsertWaitcntsID
decl_stmt|;
name|void
name|initializeAMDGPUUnifyDivergentExitNodesPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|&
name|AMDGPUUnifyDivergentExitNodesID
decl_stmt|;
name|ImmutablePass
modifier|*
name|createAMDGPUAAWrapperPass
parameter_list|()
function_decl|;
name|void
name|initializeAMDGPUAAWrapperPassPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
name|Target
modifier|&
name|getTheAMDGPUTarget
parameter_list|()
function_decl|;
name|Target
modifier|&
name|getTheGCNTarget
parameter_list|()
function_decl|;
name|namespace
name|AMDGPU
block|{
enum|enum
name|TargetIndex
block|{
name|TI_CONSTDATA_START
block|,
name|TI_SCRATCH_RSRC_DWORD0
block|,
name|TI_SCRATCH_RSRC_DWORD1
block|,
name|TI_SCRATCH_RSRC_DWORD2
block|,
name|TI_SCRATCH_RSRC_DWORD3
block|}
enum|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// End namespace llvm
end_comment

begin_comment
comment|/// OpenCL uses address spaces to differentiate between
end_comment

begin_comment
comment|/// various memory regions on the hardware. On the CPU
end_comment

begin_comment
comment|/// all of the address spaces point to the same memory,
end_comment

begin_comment
comment|/// however on the GPU, each address space points to
end_comment

begin_comment
comment|/// a separate piece of memory that is unique from other
end_comment

begin_comment
comment|/// memory locations.
end_comment

begin_struct
struct|struct
name|AMDGPUAS
block|{
comment|// The following address space values depend on the triple environment.
name|unsigned
name|PRIVATE_ADDRESS
decl_stmt|;
comment|///< Address space for private memory.
name|unsigned
name|FLAT_ADDRESS
decl_stmt|;
comment|///< Address space for flat memory.
name|unsigned
name|REGION_ADDRESS
decl_stmt|;
comment|///< Address space for region memory.
comment|// The maximum value for flat, generic, local, private, constant and region.
specifier|const
specifier|static
name|unsigned
name|MAX_COMMON_ADDRESS
init|=
literal|5
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|GLOBAL_ADDRESS
init|=
literal|1
decl_stmt|;
comment|///< Address space for global memory (RAT0, VTX0).
specifier|const
specifier|static
name|unsigned
name|CONSTANT_ADDRESS
init|=
literal|2
decl_stmt|;
comment|///< Address space for constant memory (VTX2)
specifier|const
specifier|static
name|unsigned
name|LOCAL_ADDRESS
init|=
literal|3
decl_stmt|;
comment|///< Address space for local memory.
specifier|const
specifier|static
name|unsigned
name|PARAM_D_ADDRESS
init|=
literal|6
decl_stmt|;
comment|///< Address space for direct addressible parameter memory (CONST0)
specifier|const
specifier|static
name|unsigned
name|PARAM_I_ADDRESS
init|=
literal|7
decl_stmt|;
comment|///< Address space for indirect addressible parameter memory (VTX1)
comment|// Do not re-order the CONSTANT_BUFFER_* enums.  Several places depend on this
comment|// order to be able to dynamically index a constant buffer, for example:
comment|//
comment|// ConstantBufferAS = CONSTANT_BUFFER_0 + CBIdx
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_0
init|=
literal|8
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_1
init|=
literal|9
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_2
init|=
literal|10
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_3
init|=
literal|11
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_4
init|=
literal|12
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_5
init|=
literal|13
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_6
init|=
literal|14
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_7
init|=
literal|15
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_8
init|=
literal|16
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_9
init|=
literal|17
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_10
init|=
literal|18
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_11
init|=
literal|19
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_12
init|=
literal|20
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_13
init|=
literal|21
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_14
init|=
literal|22
decl_stmt|;
specifier|const
specifier|static
name|unsigned
name|CONSTANT_BUFFER_15
init|=
literal|23
decl_stmt|;
comment|// Some places use this if the address space can't be determined.
specifier|const
specifier|static
name|unsigned
name|UNKNOWN_ADDRESS_SPACE
init|=
operator|~
literal|0u
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|AMDGPU
block|{
name|AMDGPUAS
name|getAMDGPUAS
parameter_list|(
specifier|const
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|AMDGPUAS
name|getAMDGPUAS
parameter_list|(
specifier|const
name|TargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|AMDGPUAS
name|getAMDGPUAS
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
block|}
comment|// namespace AMDGPU
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

