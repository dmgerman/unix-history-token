begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AMDGPUTargetTransformInfo.h - AMDGPU specific TTI -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file a TargetTransformInfo::Concept conforming object specific to the
end_comment

begin_comment
comment|/// AMDGPU target machine. It uses the target's detailed information to
end_comment

begin_comment
comment|/// provide more precise answers to certain TTI queries, while letting the
end_comment

begin_comment
comment|/// target independent and default TTI implementations handle the rest.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_AMDGPUTARGETTRANSFORMINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_AMDGPUTARGETTRANSFORMINFO_H
end_define

begin_include
include|#
directive|include
file|"AMDGPU.h"
end_include

begin_include
include|#
directive|include
file|"AMDGPUTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/TargetTransformInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/BasicTTIImpl.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AMDGPUTargetLowering
decl_stmt|;
name|class
name|AMDGPUTTIImpl
name|final
range|:
name|public
name|BasicTTIImplBase
operator|<
name|AMDGPUTTIImpl
operator|>
block|{
typedef|typedef
name|BasicTTIImplBase
operator|<
name|AMDGPUTTIImpl
operator|>
name|BaseT
expr_stmt|;
typedef|typedef
name|TargetTransformInfo
name|TTI
typedef|;
name|friend
name|BaseT
decl_stmt|;
specifier|const
name|AMDGPUSubtarget
modifier|*
name|ST
decl_stmt|;
specifier|const
name|AMDGPUTargetLowering
modifier|*
name|TLI
decl_stmt|;
name|bool
name|IsGraphicsShader
decl_stmt|;
specifier|const
name|AMDGPUSubtarget
operator|*
name|getST
argument_list|()
specifier|const
block|{
return|return
name|ST
return|;
block|}
specifier|const
name|AMDGPUTargetLowering
operator|*
name|getTLI
argument_list|()
specifier|const
block|{
return|return
name|TLI
return|;
block|}
specifier|static
specifier|inline
name|int
name|getFullRateInstrCost
parameter_list|()
block|{
return|return
name|TargetTransformInfo
operator|::
name|TCC_Basic
return|;
block|}
specifier|static
specifier|inline
name|int
name|getHalfRateInstrCost
parameter_list|()
block|{
return|return
literal|2
operator|*
name|TargetTransformInfo
operator|::
name|TCC_Basic
return|;
block|}
comment|// TODO: The size is usually 8 bytes, but takes 4x as many cycles. Maybe
comment|// should be 2 or 4.
specifier|static
specifier|inline
name|int
name|getQuarterRateInstrCost
parameter_list|()
block|{
return|return
literal|3
operator|*
name|TargetTransformInfo
operator|::
name|TCC_Basic
return|;
block|}
comment|// On some parts, normal fp64 operations are half rate, and others
comment|// quarter. This also applies to some integer operations.
specifier|inline
name|int
name|get64BitInstrCost
argument_list|()
specifier|const
block|{
return|return
name|ST
operator|->
name|hasHalfRate64Ops
argument_list|()
operator|?
name|getHalfRateInstrCost
argument_list|()
operator|:
name|getQuarterRateInstrCost
argument_list|()
return|;
block|}
name|public
label|:
name|explicit
name|AMDGPUTTIImpl
argument_list|(
specifier|const
name|AMDGPUTargetMachine
operator|*
name|TM
argument_list|,
specifier|const
name|Function
operator|&
name|F
argument_list|)
operator|:
name|BaseT
argument_list|(
name|TM
argument_list|,
name|F
operator|.
name|getParent
argument_list|()
operator|->
name|getDataLayout
argument_list|()
argument_list|)
operator|,
name|ST
argument_list|(
name|TM
operator|->
name|getSubtargetImpl
argument_list|(
name|F
argument_list|)
argument_list|)
operator|,
name|TLI
argument_list|(
name|ST
operator|->
name|getTargetLowering
argument_list|()
argument_list|)
operator|,
name|IsGraphicsShader
argument_list|(
argument|AMDGPU::isShader(F.getCallingConv())
argument_list|)
block|{}
name|bool
name|hasBranchDivergence
argument_list|()
block|{
return|return
name|true
return|;
block|}
name|void
name|getUnrollingPreferences
argument_list|(
name|Loop
operator|*
name|L
argument_list|,
name|TTI
operator|::
name|UnrollingPreferences
operator|&
name|UP
argument_list|)
decl_stmt|;
name|TTI
operator|::
name|PopcntSupportKind
name|getPopcntSupport
argument_list|(
argument|unsigned TyWidth
argument_list|)
block|{
name|assert
argument_list|(
name|isPowerOf2_32
argument_list|(
name|TyWidth
argument_list|)
operator|&&
literal|"Ty width must be power of 2"
argument_list|)
block|;
return|return
name|TTI
operator|::
name|PSK_FastHardware
return|;
block|}
name|unsigned
name|getNumberOfRegisters
parameter_list|(
name|bool
name|Vector
parameter_list|)
function_decl|;
name|unsigned
name|getRegisterBitWidth
parameter_list|(
name|bool
name|Vector
parameter_list|)
function_decl|;
name|unsigned
name|getLoadStoreVecRegBitWidth
argument_list|(
name|unsigned
name|AddrSpace
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLegalToVectorizeMemChain
argument_list|(
name|unsigned
name|ChainSizeInBytes
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddrSpace
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLegalToVectorizeLoadChain
argument_list|(
name|unsigned
name|ChainSizeInBytes
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddrSpace
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isLegalToVectorizeStoreChain
argument_list|(
name|unsigned
name|ChainSizeInBytes
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddrSpace
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getMaxInterleaveFactor
parameter_list|(
name|unsigned
name|VF
parameter_list|)
function_decl|;
name|int
name|getArithmeticInstrCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd1Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd2Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd1PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd2PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|Value
operator|*
operator|>
name|Args
operator|=
name|ArrayRef
operator|<
specifier|const
name|Value
operator|*
operator|>
operator|(
operator|)
argument_list|)
decl_stmt|;
name|unsigned
name|getCFInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|)
function_decl|;
name|int
name|getVectorInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|ValTy
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
name|bool
name|isSourceOfDivergence
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getFlatAddressSpace
argument_list|()
specifier|const
block|{
comment|// Don't bother running InferAddressSpaces pass on graphics shaders which
comment|// don't use flat addressing.
if|if
condition|(
name|IsGraphicsShader
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|ST
operator|->
name|hasFlatAddressSpace
argument_list|()
condition|?
name|ST
operator|->
name|getAMDGPUAS
argument_list|()
operator|.
name|FLAT_ADDRESS
else|:
name|ST
operator|->
name|getAMDGPUAS
argument_list|()
operator|.
name|UNKNOWN_ADDRESS_SPACE
return|;
block|}
end_decl_stmt

begin_function
name|unsigned
name|getVectorSplitCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function

begin_decl_stmt
name|unsigned
name|getShuffleCost
argument_list|(
name|TTI
operator|::
name|ShuffleKind
name|Kind
argument_list|,
name|Type
operator|*
name|Tp
argument_list|,
name|int
name|Index
argument_list|,
name|Type
operator|*
name|SubTp
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

