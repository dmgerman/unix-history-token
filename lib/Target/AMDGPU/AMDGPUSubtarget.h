begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- AMDGPUSubtarget.h - Define Subtarget for AMDGPU ------*- C++ -*-====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//==-----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief AMDGPU specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_AMDGPUSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_AMDGPUSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"AMDGPU.h"
end_include

begin_include
include|#
directive|include
file|"AMDGPUFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"AMDGPUInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"AMDGPUISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"AMDGPUSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"Utils/AMDGPUBaseInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"AMDGPUGenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SIMachineFunctionInfo
decl_stmt|;
name|class
name|AMDGPUSubtarget
range|:
name|public
name|AMDGPUGenSubtargetInfo
block|{
name|public
operator|:
expr|enum
name|Generation
block|{
name|R600
operator|=
literal|0
block|,
name|R700
block|,
name|EVERGREEN
block|,
name|NORTHERN_ISLANDS
block|,
name|SOUTHERN_ISLANDS
block|,
name|SEA_ISLANDS
block|,
name|VOLCANIC_ISLANDS
block|,   }
block|;    enum
block|{
name|FIXED_SGPR_COUNT_FOR_INIT_BUG
operator|=
literal|80
block|}
block|;    enum
block|{
name|ISAVersion0_0_0
block|,
name|ISAVersion7_0_0
block|,
name|ISAVersion7_0_1
block|,
name|ISAVersion8_0_0
block|,
name|ISAVersion8_0_1
block|}
block|;
name|private
operator|:
name|std
operator|::
name|string
name|DevName
block|;
name|bool
name|Is64bit
block|;
name|bool
name|DumpCode
block|;
name|bool
name|R600ALUInst
block|;
name|bool
name|HasVertexCache
block|;
name|short
name|TexVTXClauseSize
block|;
name|Generation
name|Gen
block|;
name|bool
name|FP64
block|;
name|bool
name|FP64Denormals
block|;
name|bool
name|FP32Denormals
block|;
name|bool
name|FastFMAF32
block|;
name|bool
name|CaymanISA
block|;
name|bool
name|FlatAddressSpace
block|;
name|bool
name|FlatForGlobal
block|;
name|bool
name|EnableIRStructurizer
block|;
name|bool
name|EnablePromoteAlloca
block|;
name|bool
name|EnableIfCvt
block|;
name|bool
name|EnableLoadStoreOpt
block|;
name|bool
name|EnableUnsafeDSOffsetFolding
block|;
name|unsigned
name|WavefrontSize
block|;
name|bool
name|CFALUBug
block|;
name|int
name|LocalMemorySize
block|;
name|bool
name|EnableVGPRSpilling
block|;
name|bool
name|SGPRInitBug
block|;
name|bool
name|IsGCN
block|;
name|bool
name|GCN1Encoding
block|;
name|bool
name|GCN3Encoding
block|;
name|bool
name|CIInsts
block|;
name|bool
name|FeatureDisable
block|;
name|int
name|LDSBankCount
block|;
name|unsigned
name|IsaVersion
block|;
name|bool
name|EnableHugeScratchBuffer
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|AMDGPUFrameLowering
operator|>
name|FrameLowering
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|AMDGPUTargetLowering
operator|>
name|TLInfo
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|AMDGPUInstrInfo
operator|>
name|InstrInfo
block|;
name|InstrItineraryData
name|InstrItins
block|;
name|Triple
name|TargetTriple
block|;
name|public
operator|:
name|AMDGPUSubtarget
argument_list|(
argument|const Triple&TT
argument_list|,
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|,
argument|TargetMachine&TM
argument_list|)
block|;
name|AMDGPUSubtarget
operator|&
name|initializeSubtargetDependencies
argument_list|(
argument|const Triple&TT
argument_list|,
argument|StringRef GPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
specifier|const
name|AMDGPUFrameLowering
operator|*
name|getFrameLowering
argument_list|()
specifier|const
name|override
block|{
return|return
name|FrameLowering
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|AMDGPUInstrInfo
operator|*
name|getInstrInfo
argument_list|()
specifier|const
name|override
block|{
return|return
name|InstrInfo
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|AMDGPURegisterInfo
operator|*
name|getRegisterInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
operator|->
name|getRegisterInfo
argument_list|()
return|;
block|}
name|AMDGPUTargetLowering
operator|*
name|getTargetLowering
argument_list|()
specifier|const
name|override
block|{
return|return
name|TLInfo
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|InstrItineraryData
operator|*
name|getInstrItineraryData
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrItins
return|;
block|}
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|bool
name|is64bit
argument_list|()
specifier|const
block|{
return|return
name|Is64bit
return|;
block|}
name|bool
name|hasVertexCache
argument_list|()
specifier|const
block|{
return|return
name|HasVertexCache
return|;
block|}
name|short
name|getTexVTXClauseSize
argument_list|()
specifier|const
block|{
return|return
name|TexVTXClauseSize
return|;
block|}
name|Generation
name|getGeneration
argument_list|()
specifier|const
block|{
return|return
name|Gen
return|;
block|}
name|bool
name|hasHWFP64
argument_list|()
specifier|const
block|{
return|return
name|FP64
return|;
block|}
name|bool
name|hasCaymanISA
argument_list|()
specifier|const
block|{
return|return
name|CaymanISA
return|;
block|}
name|bool
name|hasFP32Denormals
argument_list|()
specifier|const
block|{
return|return
name|FP32Denormals
return|;
block|}
name|bool
name|hasFP64Denormals
argument_list|()
specifier|const
block|{
return|return
name|FP64Denormals
return|;
block|}
name|bool
name|hasFastFMAF32
argument_list|()
specifier|const
block|{
return|return
name|FastFMAF32
return|;
block|}
name|bool
name|hasFlatAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|FlatAddressSpace
return|;
block|}
name|bool
name|useFlatForGlobal
argument_list|()
specifier|const
block|{
return|return
name|FlatForGlobal
return|;
block|}
name|bool
name|hasBFE
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
name|bool
name|hasBFI
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
name|bool
name|hasBFM
argument_list|()
specifier|const
block|{
return|return
name|hasBFE
argument_list|()
return|;
block|}
name|bool
name|hasBCNT
argument_list|(
argument|unsigned Size
argument_list|)
specifier|const
block|{
if|if
condition|(
name|Size
operator|==
literal|32
condition|)
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
if|if
condition|(
name|Size
operator|==
literal|64
condition|)
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|SOUTHERN_ISLANDS
operator|)
return|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|hasMulU24
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasMulI24
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|SOUTHERN_ISLANDS
operator|||
name|hasCaymanISA
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasFFBL
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasFFBH
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasCARRY
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasBORROW
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getGeneration
argument_list|()
operator|>=
name|EVERGREEN
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|IsIRStructurizerEnabled
argument_list|()
specifier|const
block|{
return|return
name|EnableIRStructurizer
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isPromoteAllocaEnabled
argument_list|()
specifier|const
block|{
return|return
name|EnablePromoteAlloca
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isIfCvtEnabled
argument_list|()
specifier|const
block|{
return|return
name|EnableIfCvt
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|loadStoreOptEnabled
argument_list|()
specifier|const
block|{
return|return
name|EnableLoadStoreOpt
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|unsafeDSOffsetFoldingEnabled
argument_list|()
specifier|const
block|{
return|return
name|EnableUnsafeDSOffsetFolding
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getWavefrontSize
argument_list|()
specifier|const
block|{
return|return
name|WavefrontSize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getStackEntrySize
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|hasCFAluBug
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getGeneration
argument_list|()
operator|<=
name|NORTHERN_ISLANDS
argument_list|)
block|;
return|return
name|CFALUBug
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|int
name|getLocalMemorySize
argument_list|()
specifier|const
block|{
return|return
name|LocalMemorySize
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasSGPRInitBug
argument_list|()
specifier|const
block|{
return|return
name|SGPRInitBug
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|int
name|getLDSBankCount
argument_list|()
specifier|const
block|{
return|return
name|LDSBankCount
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getAmdKernelCodeChipID
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|AMDGPU
operator|::
name|IsaVersion
name|getIsaVersion
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|enableMachineScheduler
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|overrideSchedPolicy
argument_list|(
name|MachineSchedPolicy
operator|&
name|Policy
argument_list|,
name|MachineInstr
operator|*
name|begin
argument_list|,
name|MachineInstr
operator|*
name|end
argument_list|,
name|unsigned
name|NumRegionInstrs
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Helper functions to simplify if statements
end_comment

begin_expr_stmt
name|bool
name|isTargetELF
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|StringRef
name|getDeviceName
argument_list|()
specifier|const
block|{
return|return
name|DevName
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|enableHugeScratchBuffer
argument_list|()
specifier|const
block|{
return|return
name|EnableHugeScratchBuffer
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|dumpCode
argument_list|()
specifier|const
block|{
return|return
name|DumpCode
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|r600ALUEncoding
argument_list|()
specifier|const
block|{
return|return
name|R600ALUInst
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isAmdHsaOS
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|getOS
argument_list|()
operator|==
name|Triple
operator|::
name|AMDHSA
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|isVGPRSpillingEnabled
argument_list|(
specifier|const
name|SIMachineFunctionInfo
operator|*
name|MFI
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|unsigned
name|getMaxWavesPerCU
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getGeneration
argument_list|()
operator|>=
name|AMDGPUSubtarget
operator|::
name|SOUTHERN_ISLANDS
condition|)
return|return
literal|10
return|;
comment|// FIXME: Not sure what this is for other subtagets.
name|llvm_unreachable
argument_list|(
literal|"do not know max waves per CU for this subtarget."
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    bool
name|enableSubRegLiveness
argument_list|()
end_macro

begin_expr_stmt
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Returns the offset in bytes from the start of the input buffer
end_comment

begin_comment
comment|///        of the first explicit kernel argument.
end_comment

begin_expr_stmt
name|unsigned
name|getExplicitKernelArgOffset
argument_list|()
specifier|const
block|{
return|return
name|isAmdHsaOS
argument_list|()
operator|?
literal|0
operator|:
literal|36
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getMaxNumUserSGPRs
argument_list|()
specifier|const
block|{
return|return
literal|16
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

