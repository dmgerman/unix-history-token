begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------- GCNRegPressure.h -*- C++ -*--------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_GCNREGPRESSURE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_GCNREGPRESSURE_H
end_define

begin_include
include|#
directive|include
file|"AMDGPUSubtarget.h"
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
struct|struct
name|GCNRegPressure
block|{
enum|enum
name|RegKind
block|{
name|SGPR32
block|,
name|SGPR_TUPLE
block|,
name|VGPR32
block|,
name|VGPR_TUPLE
block|,
name|TOTAL_KINDS
block|}
enum|;
name|GCNRegPressure
argument_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|getSGPRNum
argument_list|()
operator|==
literal|0
operator|&&
name|getVGPRNum
argument_list|()
operator|==
literal|0
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|std
operator|::
name|fill
argument_list|(
operator|&
name|Value
index|[
literal|0
index|]
argument_list|,
operator|&
name|Value
index|[
name|TOTAL_KINDS
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|getSGPRNum
argument_list|()
specifier|const
block|{
return|return
name|Value
index|[
name|SGPR32
index|]
return|;
block|}
name|unsigned
name|getVGPRNum
argument_list|()
specifier|const
block|{
return|return
name|Value
index|[
name|VGPR32
index|]
return|;
block|}
name|unsigned
name|getVGPRTuplesWeight
argument_list|()
specifier|const
block|{
return|return
name|Value
index|[
name|VGPR_TUPLE
index|]
return|;
block|}
name|unsigned
name|getSGPRTuplesWeight
argument_list|()
specifier|const
block|{
return|return
name|Value
index|[
name|SGPR_TUPLE
index|]
return|;
block|}
name|unsigned
name|getOccupancy
argument_list|(
specifier|const
name|SISubtarget
operator|&
name|ST
argument_list|)
decl|const
block|{
return|return
name|std
operator|::
name|min
argument_list|(
name|ST
operator|.
name|getOccupancyWithNumSGPRs
argument_list|(
name|getSGPRNum
argument_list|()
argument_list|)
argument_list|,
name|ST
operator|.
name|getOccupancyWithNumVGPRs
argument_list|(
name|getVGPRNum
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|void
name|inc
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|LaneBitmask
name|PrevMask
parameter_list|,
name|LaneBitmask
name|NewMask
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|)
function_decl|;
name|bool
name|higherOccupancy
argument_list|(
specifier|const
name|SISubtarget
operator|&
name|ST
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|O
argument_list|)
decl|const
block|{
return|return
name|getOccupancy
argument_list|(
name|ST
argument_list|)
operator|>
name|O
operator|.
name|getOccupancy
argument_list|(
name|ST
argument_list|)
return|;
block|}
name|bool
name|less
argument_list|(
specifier|const
name|SISubtarget
operator|&
name|ST
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|O
argument_list|,
name|unsigned
name|MaxOccupancy
operator|=
name|std
operator|::
name|numeric_limits
operator|<
name|unsigned
operator|>
operator|::
name|max
argument_list|()
argument_list|)
decl|const
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|GCNRegPressure
operator|&
name|O
operator|)
specifier|const
block|{
return|return
name|std
operator|::
name|equal
argument_list|(
operator|&
name|Value
index|[
literal|0
index|]
argument_list|,
operator|&
name|Value
index|[
name|TOTAL_KINDS
index|]
argument_list|,
name|O
operator|.
name|Value
argument_list|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|GCNRegPressure
operator|&
name|O
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|O
operator|)
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|SISubtarget
operator|*
name|ST
operator|=
name|nullptr
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
block|{
name|print
argument_list|(
name|dbgs
argument_list|()
argument_list|)
block|; }
name|private
operator|:
name|unsigned
name|Value
index|[
name|TOTAL_KINDS
index|]
expr_stmt|;
specifier|static
name|unsigned
name|getRegKind
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|)
function_decl|;
name|friend
name|GCNRegPressure
name|max
parameter_list|(
specifier|const
name|GCNRegPressure
modifier|&
name|P1
parameter_list|,
specifier|const
name|GCNRegPressure
modifier|&
name|P2
parameter_list|)
function_decl|;
block|}
struct|;
specifier|inline
name|GCNRegPressure
name|max
parameter_list|(
specifier|const
name|GCNRegPressure
modifier|&
name|P1
parameter_list|,
specifier|const
name|GCNRegPressure
modifier|&
name|P2
parameter_list|)
block|{
name|GCNRegPressure
name|Res
decl_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|;
name|I
operator|<
name|GCNRegPressure
operator|::
name|TOTAL_KINDS
condition|;
operator|++
name|I
control|)
name|Res
operator|.
name|Value
index|[
name|I
index|]
operator|=
name|std
operator|::
name|max
argument_list|(
name|P1
operator|.
name|Value
index|[
name|I
index|]
argument_list|,
name|P2
operator|.
name|Value
index|[
name|I
index|]
argument_list|)
expr_stmt|;
return|return
name|Res
return|;
block|}
name|class
name|GCNRPTracker
block|{
name|public
label|:
typedef|typedef
name|DenseMap
operator|<
name|unsigned
operator|,
name|LaneBitmask
operator|>
name|LiveRegSet
expr_stmt|;
name|protected
label|:
specifier|const
name|LiveIntervals
modifier|&
name|LIS
decl_stmt|;
name|LiveRegSet
name|LiveRegs
decl_stmt|;
name|GCNRegPressure
name|CurPressure
decl_stmt|,
name|MaxPressure
decl_stmt|;
specifier|const
name|MachineInstr
modifier|*
name|LastTrackedMI
init|=
name|nullptr
decl_stmt|;
name|mutable
specifier|const
name|MachineRegisterInfo
modifier|*
name|MRI
init|=
name|nullptr
decl_stmt|;
name|GCNRPTracker
argument_list|(
specifier|const
name|LiveIntervals
operator|&
name|LIS_
argument_list|)
operator|:
name|LIS
argument_list|(
argument|LIS_
argument_list|)
block|{}
name|LaneBitmask
name|getDefRegMask
argument_list|(
argument|const MachineOperand&MO
argument_list|)
specifier|const
expr_stmt|;
name|LaneBitmask
name|getUsedRegMask
argument_list|(
specifier|const
name|MachineOperand
operator|&
name|MO
argument_list|)
decl|const
decl_stmt|;
name|public
label|:
comment|// live regs for the current state
specifier|const
name|decltype
argument_list|(
name|LiveRegs
argument_list|)
operator|&
name|getLiveRegs
argument_list|()
specifier|const
block|{
return|return
name|LiveRegs
return|;
block|}
specifier|const
name|MachineInstr
operator|*
name|getLastTrackedMI
argument_list|()
specifier|const
block|{
return|return
name|LastTrackedMI
return|;
block|}
name|void
name|clearMaxPressure
parameter_list|()
block|{
name|MaxPressure
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// returns MaxPressure, resetting it
name|decltype
argument_list|(
argument|MaxPressure
argument_list|)
name|moveMaxPressure
argument_list|()
block|{
name|auto
name|Res
init|=
name|MaxPressure
decl_stmt|;
name|MaxPressure
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|Res
return|;
block|}
name|decltype
argument_list|(
argument|LiveRegs
argument_list|)
name|moveLiveRegs
argument_list|()
block|{
return|return
name|std
operator|::
name|move
argument_list|(
name|LiveRegs
argument_list|)
return|;
block|}
specifier|static
name|void
name|printLiveRegs
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
specifier|const
name|LiveRegSet
modifier|&
name|LiveRegs
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|GCNUpwardRPTracker
range|:
name|public
name|GCNRPTracker
block|{
name|public
operator|:
name|GCNUpwardRPTracker
argument_list|(
specifier|const
name|LiveIntervals
operator|&
name|LIS_
argument_list|)
operator|:
name|GCNRPTracker
argument_list|(
argument|LIS_
argument_list|)
block|{}
comment|// reset tracker to the point just below MI
comment|// filling live regs upon this point using LIS
name|void
name|reset
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|LiveRegSet
operator|*
name|LiveRegs
operator|=
name|nullptr
argument_list|)
block|;
comment|// move to the state just above the MI
name|void
name|recede
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|)
block|;
comment|// checks whether the tracker's state after receding MI corresponds
comment|// to reported by LIS
name|bool
name|isValid
argument_list|()
specifier|const
block|; }
decl_stmt|;
name|class
name|GCNDownwardRPTracker
range|:
name|public
name|GCNRPTracker
block|{
comment|// Last position of reset or advanceBeforeNext
name|MachineBasicBlock
operator|::
name|const_iterator
name|NextMI
block|;
name|MachineBasicBlock
operator|::
name|const_iterator
name|MBBEnd
block|;
name|public
operator|:
name|GCNDownwardRPTracker
argument_list|(
specifier|const
name|LiveIntervals
operator|&
name|LIS_
argument_list|)
operator|:
name|GCNRPTracker
argument_list|(
argument|LIS_
argument_list|)
block|{}
specifier|const
name|MachineBasicBlock
operator|::
name|const_iterator
name|getNext
argument_list|()
specifier|const
block|{
return|return
name|NextMI
return|;
block|}
comment|// Reset tracker to the point before the MI
comment|// filling live regs upon this point using LIS.
comment|// Returns false if block is empty except debug values.
name|bool
name|reset
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|LiveRegSet
operator|*
name|LiveRegs
operator|=
name|nullptr
argument_list|)
block|;
comment|// Move to the state right before the next MI. Returns false if reached
comment|// end of the block.
name|bool
name|advanceBeforeNext
argument_list|()
block|;
comment|// Move to the state at the MI, advanceBeforeNext has to be called first.
name|void
name|advanceToNext
argument_list|()
block|;
comment|// Move to the state at the next MI. Returns false if reached end of block.
name|bool
name|advance
argument_list|()
block|;
comment|// Advance instructions until before End.
name|bool
name|advance
argument_list|(
argument|MachineBasicBlock::const_iterator End
argument_list|)
block|;
comment|// Reset to Begin and advance to End.
name|bool
name|advance
argument_list|(
argument|MachineBasicBlock::const_iterator Begin
argument_list|,
argument|MachineBasicBlock::const_iterator End
argument_list|,
argument|const LiveRegSet *LiveRegsCopy = nullptr
argument_list|)
block|; }
decl_stmt|;
name|LaneBitmask
name|getLiveLaneMask
parameter_list|(
name|unsigned
name|Reg
parameter_list|,
name|SlotIndex
name|SI
parameter_list|,
specifier|const
name|LiveIntervals
modifier|&
name|LIS
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|)
function_decl|;
name|GCNRPTracker
operator|::
name|LiveRegSet
name|getLiveRegs
argument_list|(
argument|SlotIndex SI
argument_list|,
argument|const LiveIntervals&LIS
argument_list|,
argument|const MachineRegisterInfo&MRI
argument_list|)
expr_stmt|;
specifier|inline
name|GCNRPTracker
operator|::
name|LiveRegSet
name|getLiveRegsAfter
argument_list|(
argument|const MachineInstr&MI
argument_list|,
argument|const LiveIntervals&LIS
argument_list|)
block|{
return|return
name|getLiveRegs
argument_list|(
name|LIS
operator|.
name|getInstructionIndex
argument_list|(
name|MI
argument_list|)
operator|.
name|getDeadSlot
argument_list|()
argument_list|,
name|LIS
argument_list|,
name|MI
operator|.
name|getParent
argument_list|()
operator|->
name|getParent
argument_list|()
operator|->
name|getRegInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|inline
name|GCNRPTracker
operator|::
name|LiveRegSet
name|getLiveRegsBefore
argument_list|(
argument|const MachineInstr&MI
argument_list|,
argument|const LiveIntervals&LIS
argument_list|)
block|{
return|return
name|getLiveRegs
argument_list|(
name|LIS
operator|.
name|getInstructionIndex
argument_list|(
name|MI
argument_list|)
operator|.
name|getBaseIndex
argument_list|()
argument_list|,
name|LIS
argument_list|,
name|MI
operator|.
name|getParent
argument_list|()
operator|->
name|getParent
argument_list|()
operator|->
name|getRegInfo
argument_list|()
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|Range
operator|>
name|GCNRegPressure
name|getRegPressure
argument_list|(
argument|const MachineRegisterInfo&MRI
argument_list|,
argument|Range&&LiveRegs
argument_list|)
block|{
name|GCNRegPressure
name|Res
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|RM
range|:
name|LiveRegs
control|)
name|Res
operator|.
name|inc
argument_list|(
name|RM
operator|.
name|first
argument_list|,
name|LaneBitmask
operator|::
name|getNone
argument_list|()
argument_list|,
name|RM
operator|.
name|second
argument_list|,
name|MRI
argument_list|)
expr_stmt|;
return|return
name|Res
return|;
block|}
end_decl_stmt

begin_function_decl
name|void
name|printLivesAt
parameter_list|(
name|SlotIndex
name|SI
parameter_list|,
specifier|const
name|LiveIntervals
modifier|&
name|LIS
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_AMDGPU_GCNREGPRESSURE_H
end_comment

end_unit

