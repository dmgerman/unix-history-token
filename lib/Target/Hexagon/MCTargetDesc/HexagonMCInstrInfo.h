begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- HexagonMCInstrInfo.cpp - Hexagon sub-class of MCInst ---------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Utility functions for Hexagon specific MCInst queries
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_HEXAGON_MCTARGETDESC_HEXAGONMCINSTRINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_HEXAGON_MCTARGETDESC_HEXAGONMCINSTRINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|<bitset>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCInstrDesc
decl_stmt|;
name|class
name|MCInstrInfo
decl_stmt|;
name|class
name|MCInst
decl_stmt|;
name|class
name|MCOperand
decl_stmt|;
name|namespace
name|HexagonII
block|{
name|enum
name|class
name|MemAccessSize
decl_stmt|;
block|}
name|namespace
name|HexagonMCInstrInfo
block|{
name|void
name|AppendImplicitOperands
parameter_list|(
name|MCInst
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return memory access size
name|HexagonII
operator|::
name|MemAccessSize
name|getAccessSize
argument_list|(
name|MCInstrInfo
specifier|const
operator|&
name|MCII
argument_list|,
name|MCInst
specifier|const
operator|&
name|MCI
argument_list|)
expr_stmt|;
comment|// Return number of bits in the constant extended operand.
name|unsigned
name|getBitCount
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return constant extended operand number.
name|unsigned
name|short
name|getCExtOpNum
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
name|MCInstrDesc
specifier|const
modifier|&
name|getDesc
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return the implicit alignment of the extendable operand
name|unsigned
name|getExtentAlignment
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return the number of logical bits of the extendable operand
name|unsigned
name|getExtentBits
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
name|std
operator|::
name|bitset
operator|<
literal|16
operator|>
name|GetImplicitBits
argument_list|(
name|MCInst
specifier|const
operator|&
name|MCI
argument_list|)
expr_stmt|;
comment|// Return the max value that a constant extendable operand can have
comment|// without being extended.
name|int
name|getMaxValue
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return the min value that a constant extendable operand can have
comment|// without being extended.
name|int
name|getMinValue
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return instruction name
name|char
specifier|const
modifier|*
name|getName
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return the operand that consumes or produces a new value.
name|MCOperand
specifier|const
modifier|&
name|getNewValue
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return the Hexagon ISA class for the insn.
name|unsigned
name|getType
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the instruction is a legal new-value producer.
name|bool
name|hasNewValue
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the insn is an actual insn.
name|bool
name|isCanon
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the instruction needs to be constant extended.
name|bool
name|isConstExtended
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return true if the insn may be extended based on the operand value.
name|bool
name|isExtendable
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the instruction must be always extended.
name|bool
name|isExtended
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the insn is a new-value consumer.
name|bool
name|isNewValue
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return true if the operand can be constant extended.
name|bool
name|isOperandExtended
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|,
name|unsigned
name|short
name|OperandNum
parameter_list|)
function_decl|;
name|bool
name|isPacketBegin
parameter_list|(
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
name|bool
name|isPacketEnd
parameter_list|(
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the insn is a prefix.
name|bool
name|isPrefix
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
comment|// Return whether the insn is solo, i.e., cannot be in a packet.
name|bool
name|isSolo
parameter_list|(
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|size_t
name|packetBeginIndex
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|packetEndIndex
init|=
literal|1
decl_stmt|;
name|void
name|resetPacket
parameter_list|(
name|MCInst
modifier|&
name|MCI
parameter_list|)
function_decl|;
specifier|inline
name|void
name|SanityCheckImplicitOperands
parameter_list|(
name|MCInst
specifier|const
modifier|&
name|MCI
parameter_list|)
block|{
name|assert
argument_list|(
name|MCI
operator|.
name|getNumOperands
argument_list|()
operator|>=
literal|2
operator|&&
literal|"At least the two implicit operands"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|MCI
operator|.
name|getOperand
argument_list|(
name|MCI
operator|.
name|getNumOperands
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|isInst
argument_list|()
operator|&&
literal|"Implicit bits and flags"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|MCI
operator|.
name|getOperand
argument_list|(
name|MCI
operator|.
name|getNumOperands
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|isImm
argument_list|()
operator|&&
literal|"Parent pointer"
argument_list|)
expr_stmt|;
block|}
name|void
name|SetImplicitBits
argument_list|(
name|MCInst
operator|&
name|MCI
argument_list|,
name|std
operator|::
name|bitset
operator|<
literal|16
operator|>
name|Bits
argument_list|)
decl_stmt|;
name|void
name|setPacketBegin
parameter_list|(
name|MCInst
modifier|&
name|MCI
parameter_list|,
name|bool
name|Y
parameter_list|)
function_decl|;
name|void
name|setPacketEnd
parameter_list|(
name|MCInst
modifier|&
name|MCI
parameter_list|,
name|bool
name|Y
parameter_list|)
function_decl|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_HEXAGON_MCTARGETDESC_HEXAGONMCINSTRINFO_H
end_comment

end_unit

