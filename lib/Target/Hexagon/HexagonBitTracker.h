begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- HexagonBitTracker.h ----------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGONBITTRACKER_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGONBITTRACKER_H
end_define

begin_include
include|#
directive|include
file|"BitTracker.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|HexagonInstrInfo
decl_stmt|;
name|class
name|HexagonRegisterInfo
decl_stmt|;
name|struct
name|HexagonEvaluator
range|:
name|public
name|BitTracker
operator|::
name|MachineEvaluator
block|{
typedef|typedef
name|BitTracker
operator|::
name|CellMapType
name|CellMapType
expr_stmt|;
typedef|typedef
name|BitTracker
operator|::
name|RegisterRef
name|RegisterRef
expr_stmt|;
typedef|typedef
name|BitTracker
operator|::
name|RegisterCell
name|RegisterCell
expr_stmt|;
typedef|typedef
name|BitTracker
operator|::
name|BranchTargetList
name|BranchTargetList
expr_stmt|;
name|HexagonEvaluator
argument_list|(
specifier|const
name|HexagonRegisterInfo
operator|&
name|tri
argument_list|,
name|MachineRegisterInfo
operator|&
name|mri
argument_list|,
specifier|const
name|HexagonInstrInfo
operator|&
name|tii
argument_list|,
name|MachineFunction
operator|&
name|mf
argument_list|)
expr_stmt|;
name|bool
name|evaluate
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|CellMapType
operator|&
name|Inputs
argument_list|,
name|CellMapType
operator|&
name|Outputs
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|evaluate
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|BI
argument_list|,
specifier|const
name|CellMapType
operator|&
name|Inputs
argument_list|,
name|BranchTargetList
operator|&
name|Targets
argument_list|,
name|bool
operator|&
name|FallsThru
argument_list|)
decl|const
name|override
decl_stmt|;
name|BitTracker
operator|::
name|BitMask
name|mask
argument_list|(
argument|unsigned Reg
argument_list|,
argument|unsigned Sub
argument_list|)
specifier|const
name|override
expr_stmt|;
name|MachineFunction
modifier|&
name|MF
decl_stmt|;
name|MachineFrameInfo
modifier|&
name|MFI
decl_stmt|;
specifier|const
name|HexagonInstrInfo
modifier|&
name|TII
decl_stmt|;
name|private
label|:
name|bool
name|evaluateLoad
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|CellMapType
operator|&
name|Inputs
argument_list|,
name|CellMapType
operator|&
name|Outputs
argument_list|)
decl|const
decl_stmt|;
name|bool
name|evaluateFormalCopy
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|CellMapType
operator|&
name|Inputs
argument_list|,
name|CellMapType
operator|&
name|Outputs
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getNextPhysReg
argument_list|(
name|unsigned
name|PReg
argument_list|,
name|unsigned
name|Width
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getVirtRegFor
argument_list|(
name|unsigned
name|PReg
argument_list|)
decl|const
decl_stmt|;
comment|// Type of formal parameter extension.
struct|struct
name|ExtType
block|{
enum|enum
block|{
name|SExt
block|,
name|ZExt
block|}
enum|;
name|char
name|Type
decl_stmt|;
name|uint16_t
name|Width
decl_stmt|;
name|ExtType
argument_list|()
operator|:
name|Type
argument_list|(
literal|0
argument_list|)
operator|,
name|Width
argument_list|(
literal|0
argument_list|)
block|{}
name|ExtType
argument_list|(
argument|char t
argument_list|,
argument|uint16_t w
argument_list|)
operator|:
name|Type
argument_list|(
name|t
argument_list|)
operator|,
name|Width
argument_list|(
argument|w
argument_list|)
block|{}
block|}
struct|;
comment|// Map VR -> extension type.
typedef|typedef
name|DenseMap
operator|<
name|unsigned
operator|,
name|ExtType
operator|>
name|RegExtMap
expr_stmt|;
name|RegExtMap
name|VRX
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

