begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RDFRegisters.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_HEXAGON_RDFREGISTERS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_HEXAGON_RDFREGISTERS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<unordered_map>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|rdf
block|{
typedef|typedef
name|uint32_t
name|RegisterId
typedef|;
comment|// Template class for a map translating uint32_t into arbitrary types.
comment|// The map will act like an indexed set: upon insertion of a new object,
comment|// it will automatically assign a new index to it. Index of 0 is treated
comment|// as invalid and is never allocated.
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
name|N
operator|=
literal|32
operator|>
expr|struct
name|IndexedSet
block|{
name|IndexedSet
argument_list|()
operator|:
name|Map
argument_list|()
block|{
name|Map
operator|.
name|reserve
argument_list|(
name|N
argument_list|)
block|; }
name|T
name|get
argument_list|(
argument|uint32_t Idx
argument_list|)
specifier|const
block|{
comment|// Index Idx corresponds to Map[Idx-1].
name|assert
argument_list|(
name|Idx
operator|!=
literal|0
operator|&&
operator|!
name|Map
operator|.
name|empty
argument_list|()
operator|&&
name|Idx
operator|-
literal|1
operator|<
name|Map
operator|.
name|size
argument_list|()
argument_list|)
block|;
return|return
name|Map
index|[
name|Idx
operator|-
literal|1
index|]
return|;
block|}
name|uint32_t
name|insert
argument_list|(
argument|T Val
argument_list|)
block|{
comment|// Linear search.
name|auto
name|F
operator|=
name|llvm
operator|::
name|find
argument_list|(
name|Map
argument_list|,
name|Val
argument_list|)
block|;
if|if
condition|(
name|F
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|F
operator|-
name|Map
operator|.
name|begin
argument_list|()
operator|+
literal|1
return|;
name|Map
operator|.
name|push_back
argument_list|(
name|Val
argument_list|)
block|;
return|return
name|Map
operator|.
name|size
argument_list|()
return|;
comment|// Return actual_index + 1.
block|}
name|uint32_t
name|find
argument_list|(
name|T
name|Val
argument_list|)
decl|const
block|{
name|auto
name|F
init|=
name|llvm
operator|::
name|find
argument_list|(
name|Map
argument_list|,
name|Val
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|F
operator|!=
name|Map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|F
operator|-
name|Map
operator|.
name|begin
argument_list|()
operator|+
literal|1
return|;
block|}
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|T
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Map
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Map
operator|.
name|end
argument_list|()
return|;
block|}
name|private
label|:
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|Map
expr_stmt|;
block|}
empty_stmt|;
struct|struct
name|RegisterRef
block|{
name|RegisterId
name|Reg
init|=
literal|0
decl_stmt|;
name|LaneBitmask
name|Mask
init|=
name|LaneBitmask
operator|::
name|getNone
argument_list|()
decl_stmt|;
name|RegisterRef
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|RegisterRef
argument_list|(
argument|RegisterId R
argument_list|,
argument|LaneBitmask M = LaneBitmask::getAll()
argument_list|)
block|:
name|Reg
argument_list|(
name|R
argument_list|)
operator|,
name|Mask
argument_list|(
argument|R !=
literal|0
argument|? M : LaneBitmask::getNone()
argument_list|)
block|{}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|Reg
operator|!=
literal|0
operator|&&
name|Mask
operator|.
name|any
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|RegisterRef
operator|&
name|RR
operator|)
specifier|const
block|{
return|return
name|Reg
operator|==
name|RR
operator|.
name|Reg
operator|&&
name|Mask
operator|==
name|RR
operator|.
name|Mask
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|RegisterRef
operator|&
name|RR
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|RR
operator|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|RegisterRef
operator|&
name|RR
operator|)
specifier|const
block|{
return|return
name|Reg
operator|<
name|RR
operator|.
name|Reg
operator|||
operator|(
name|Reg
operator|==
name|RR
operator|.
name|Reg
operator|&&
name|Mask
operator|<
name|RR
operator|.
name|Mask
operator|)
return|;
block|}
block|}
struct|;
struct|struct
name|PhysicalRegisterInfo
block|{
name|PhysicalRegisterInfo
argument_list|(
specifier|const
name|TargetRegisterInfo
operator|&
name|tri
argument_list|,
specifier|const
name|MachineFunction
operator|&
name|mf
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|isRegMaskId
parameter_list|(
name|RegisterId
name|R
parameter_list|)
block|{
return|return
name|TargetRegisterInfo
operator|::
name|isStackSlot
argument_list|(
name|R
argument_list|)
return|;
block|}
name|RegisterId
name|getRegMaskId
argument_list|(
specifier|const
name|uint32_t
operator|*
name|RM
argument_list|)
decl|const
block|{
return|return
name|TargetRegisterInfo
operator|::
name|index2StackSlot
argument_list|(
name|RegMasks
operator|.
name|find
argument_list|(
name|RM
argument_list|)
argument_list|)
return|;
block|}
specifier|const
name|uint32_t
modifier|*
name|getRegMaskBits
argument_list|(
name|RegisterId
name|R
argument_list|)
decl|const
block|{
return|return
name|RegMasks
operator|.
name|get
argument_list|(
name|TargetRegisterInfo
operator|::
name|stackSlot2Index
argument_list|(
name|R
argument_list|)
argument_list|)
return|;
block|}
name|RegisterRef
name|normalize
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|bool
name|alias
argument_list|(
name|RegisterRef
name|RA
argument_list|,
name|RegisterRef
name|RB
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|isRegMaskId
argument_list|(
name|RA
operator|.
name|Reg
argument_list|)
condition|)
return|return
operator|!
name|isRegMaskId
argument_list|(
name|RB
operator|.
name|Reg
argument_list|)
condition|?
name|aliasRR
argument_list|(
name|RA
argument_list|,
name|RB
argument_list|)
else|:
name|aliasRM
argument_list|(
name|RA
argument_list|,
name|RB
argument_list|)
return|;
return|return
operator|!
name|isRegMaskId
argument_list|(
name|RB
operator|.
name|Reg
argument_list|)
condition|?
name|aliasRM
argument_list|(
name|RB
argument_list|,
name|RA
argument_list|)
else|:
name|aliasMM
argument_list|(
name|RA
argument_list|,
name|RB
argument_list|)
return|;
block|}
name|std
operator|::
name|set
operator|<
name|RegisterId
operator|>
name|getAliasSet
argument_list|(
argument|RegisterId Reg
argument_list|)
specifier|const
expr_stmt|;
name|RegisterRef
name|getRefForUnit
argument_list|(
name|uint32_t
name|U
argument_list|)
decl|const
block|{
return|return
name|RegisterRef
argument_list|(
name|UnitInfos
index|[
name|U
index|]
operator|.
name|Reg
argument_list|,
name|UnitInfos
index|[
name|U
index|]
operator|.
name|Mask
argument_list|)
return|;
block|}
specifier|const
name|TargetRegisterInfo
operator|&
name|getTRI
argument_list|()
specifier|const
block|{
return|return
name|TRI
return|;
block|}
name|private
label|:
struct|struct
name|RegInfo
block|{
specifier|const
name|TargetRegisterClass
modifier|*
name|RegClass
init|=
name|nullptr
decl_stmt|;
block|}
struct|;
struct|struct
name|UnitInfo
block|{
name|RegisterId
name|Reg
init|=
literal|0
decl_stmt|;
name|LaneBitmask
name|Mask
decl_stmt|;
block|}
struct|;
specifier|const
name|TargetRegisterInfo
modifier|&
name|TRI
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|RegInfo
operator|>
name|RegInfos
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|UnitInfo
operator|>
name|UnitInfos
expr_stmt|;
name|IndexedSet
operator|<
specifier|const
name|uint32_t
operator|*
operator|>
name|RegMasks
expr_stmt|;
name|bool
name|aliasRR
argument_list|(
name|RegisterRef
name|RA
argument_list|,
name|RegisterRef
name|RB
argument_list|)
decl|const
decl_stmt|;
name|bool
name|aliasRM
argument_list|(
name|RegisterRef
name|RR
argument_list|,
name|RegisterRef
name|RM
argument_list|)
decl|const
decl_stmt|;
name|bool
name|aliasMM
argument_list|(
name|RegisterRef
name|RM
argument_list|,
name|RegisterRef
name|RN
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
struct|struct
name|RegisterAggr
block|{
name|RegisterAggr
argument_list|(
specifier|const
name|PhysicalRegisterInfo
operator|&
name|pri
argument_list|)
operator|:
name|Units
argument_list|(
name|pri
operator|.
name|getTRI
argument_list|()
operator|.
name|getNumRegUnits
argument_list|()
argument_list|)
operator|,
name|PRI
argument_list|(
argument|pri
argument_list|)
block|{}
name|RegisterAggr
argument_list|(
specifier|const
name|RegisterAggr
operator|&
name|RG
argument_list|)
operator|=
expr|default
expr_stmt|;
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Units
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|hasAliasOf
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|bool
name|hasCoverOf
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|isCoverOf
parameter_list|(
name|RegisterRef
name|RA
parameter_list|,
name|RegisterRef
name|RB
parameter_list|,
specifier|const
name|PhysicalRegisterInfo
modifier|&
name|PRI
parameter_list|)
block|{
return|return
name|RegisterAggr
argument_list|(
name|PRI
argument_list|)
operator|.
name|insert
argument_list|(
name|RA
argument_list|)
operator|.
name|hasCoverOf
argument_list|(
name|RB
argument_list|)
return|;
block|}
name|RegisterAggr
modifier|&
name|insert
parameter_list|(
name|RegisterRef
name|RR
parameter_list|)
function_decl|;
name|RegisterAggr
modifier|&
name|insert
parameter_list|(
specifier|const
name|RegisterAggr
modifier|&
name|RG
parameter_list|)
function_decl|;
name|RegisterAggr
modifier|&
name|intersect
parameter_list|(
name|RegisterRef
name|RR
parameter_list|)
function_decl|;
name|RegisterAggr
modifier|&
name|intersect
parameter_list|(
specifier|const
name|RegisterAggr
modifier|&
name|RG
parameter_list|)
function_decl|;
name|RegisterAggr
modifier|&
name|clear
parameter_list|(
name|RegisterRef
name|RR
parameter_list|)
function_decl|;
name|RegisterAggr
modifier|&
name|clear
parameter_list|(
specifier|const
name|RegisterAggr
modifier|&
name|RG
parameter_list|)
function_decl|;
name|RegisterRef
name|intersectWith
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|RegisterRef
name|clearIn
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|RegisterRef
name|makeRegRef
argument_list|()
specifier|const
expr_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
struct|struct
name|rr_iterator
block|{
typedef|typedef
name|std
operator|::
name|map
operator|<
name|RegisterId
operator|,
name|LaneBitmask
operator|>
name|MapType
expr_stmt|;
name|private
label|:
name|MapType
name|Masks
decl_stmt|;
name|MapType
operator|::
name|iterator
name|Pos
expr_stmt|;
name|unsigned
name|Index
decl_stmt|;
specifier|const
name|RegisterAggr
modifier|*
name|Owner
decl_stmt|;
name|public
label|:
name|rr_iterator
argument_list|(
argument|const RegisterAggr&RG
argument_list|,
argument|bool End
argument_list|)
empty_stmt|;
name|RegisterRef
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|RegisterRef
argument_list|(
name|Pos
operator|->
name|first
argument_list|,
name|Pos
operator|->
name|second
argument_list|)
return|;
block|}
name|rr_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|Pos
block|;
operator|++
name|Index
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|rr_iterator
operator|&
name|I
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|Owner
operator|==
name|I
operator|.
name|Owner
argument_list|)
block|;
return|return
name|Index
operator|==
name|I
operator|.
name|Index
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|rr_iterator
operator|&
name|I
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|I
operator|)
return|;
block|}
block|}
struct|;
name|rr_iterator
name|rr_begin
argument_list|()
specifier|const
block|{
return|return
name|rr_iterator
argument_list|(
operator|*
name|this
argument_list|,
name|false
argument_list|)
return|;
block|}
name|rr_iterator
name|rr_end
argument_list|()
specifier|const
block|{
return|return
name|rr_iterator
argument_list|(
operator|*
name|this
argument_list|,
name|true
argument_list|)
return|;
block|}
name|private
label|:
name|BitVector
name|Units
decl_stmt|;
specifier|const
name|PhysicalRegisterInfo
modifier|&
name|PRI
decl_stmt|;
block|}
struct|;
comment|// Optionally print the lane mask, if it is not ~0.
struct|struct
name|PrintLaneMaskOpt
block|{
name|PrintLaneMaskOpt
argument_list|(
argument|LaneBitmask M
argument_list|)
block|:
name|Mask
argument_list|(
argument|M
argument_list|)
block|{}
name|LaneBitmask
name|Mask
decl_stmt|;
block|}
struct|;
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|PrintLaneMaskOpt
operator|&
name|P
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace rdf
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

