begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- HexagonInstrInfo.h - Hexagon Instruction Information -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the Hexagon implementation of the TargetInstrInfo class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_HEXAGON_HEXAGONINSTRINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_HEXAGON_HEXAGONINSTRINFO_H
end_define

begin_include
include|#
directive|include
file|"HexagonRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"MCTargetDesc/HexagonBaseInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBranchProbabilityInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetInstrInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_INSTRINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"HexagonGenInstrInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
struct_decl|struct
name|EVT
struct_decl|;
name|class
name|HexagonSubtarget
decl_stmt|;
name|class
name|HexagonInstrInfo
range|:
name|public
name|HexagonGenInstrInfo
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
specifier|const
name|HexagonRegisterInfo
name|RI
block|;
specifier|const
name|HexagonSubtarget
operator|&
name|Subtarget
block|;
name|public
operator|:
typedef|typedef
name|unsigned
name|Opcode_t
typedef|;
name|explicit
name|HexagonInstrInfo
argument_list|(
name|HexagonSubtarget
operator|&
name|ST
argument_list|)
decl_stmt|;
comment|/// getRegisterInfo - TargetInstrInfo is a superset of MRegister info.  As
comment|/// such, whenever a client has an instance of instruction info, it should
comment|/// always be able to get register info as well (through this method).
comment|///
specifier|const
name|HexagonRegisterInfo
operator|&
name|getRegisterInfo
argument_list|()
specifier|const
block|{
return|return
name|RI
return|;
block|}
comment|/// isLoadFromStackSlot - If the specified machine instruction is a direct
comment|/// load from a stack slot, return the virtual or physical register number of
comment|/// the destination along with the FrameIndex of the loaded stack slot.  If
comment|/// not, return 0.  This predicate must return 0 if the instruction has
comment|/// any side effects other than loading from the stack slot.
name|unsigned
name|isLoadFromStackSlot
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
name|int
operator|&
name|FrameIndex
argument_list|)
decl|const
name|override
decl_stmt|;
comment|/// isStoreToStackSlot - If the specified machine instruction is a direct
comment|/// store to a stack slot, return the virtual or physical register number of
comment|/// the source reg along with the FrameIndex of the loaded stack slot.  If
comment|/// not, return 0.  This predicate must return 0 if the instruction has
comment|/// any side effects other than storing to the stack slot.
name|unsigned
name|isStoreToStackSlot
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
name|int
operator|&
name|FrameIndex
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|AnalyzeBranch
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|MachineBasicBlock
operator|*
operator|&
name|TBB
argument_list|,
name|MachineBasicBlock
operator|*
operator|&
name|FBB
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|,
name|bool
name|AllowModify
argument_list|)
decl|const
name|override
decl_stmt|;
name|unsigned
name|RemoveBranch
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|)
decl|const
name|override
decl_stmt|;
name|unsigned
name|InsertBranch
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|MachineBasicBlock
operator|*
name|TBB
argument_list|,
name|MachineBasicBlock
operator|*
name|FBB
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|,
name|DebugLoc
name|DL
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|analyzeCompare
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
name|unsigned
operator|&
name|SrcReg
argument_list|,
name|unsigned
operator|&
name|SrcReg2
argument_list|,
name|int
operator|&
name|Mask
argument_list|,
name|int
operator|&
name|Value
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|copyPhysReg
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|I
argument_list|,
name|DebugLoc
name|DL
argument_list|,
name|unsigned
name|DestReg
argument_list|,
name|unsigned
name|SrcReg
argument_list|,
name|bool
name|KillSrc
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|storeRegToStackSlot
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|MBBI
argument_list|,
name|unsigned
name|SrcReg
argument_list|,
name|bool
name|isKill
argument_list|,
name|int
name|FrameIndex
argument_list|,
specifier|const
name|TargetRegisterClass
operator|*
name|RC
argument_list|,
specifier|const
name|TargetRegisterInfo
operator|*
name|TRI
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|storeRegToAddr
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|unsigned
name|SrcReg
argument_list|,
name|bool
name|isKill
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Addr
argument_list|,
specifier|const
name|TargetRegisterClass
operator|*
name|RC
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineInstr
operator|*
operator|>
operator|&
name|NewMIs
argument_list|)
decl|const
decl_stmt|;
name|void
name|loadRegFromStackSlot
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|MBBI
argument_list|,
name|unsigned
name|DestReg
argument_list|,
name|int
name|FrameIndex
argument_list|,
specifier|const
name|TargetRegisterClass
operator|*
name|RC
argument_list|,
specifier|const
name|TargetRegisterInfo
operator|*
name|TRI
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|loadRegFromAddr
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|unsigned
name|DestReg
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Addr
argument_list|,
specifier|const
name|TargetRegisterClass
operator|*
name|RC
argument_list|,
name|SmallVectorImpl
operator|<
name|MachineInstr
operator|*
operator|>
operator|&
name|NewMIs
argument_list|)
decl|const
decl_stmt|;
comment|/// expandPostRAPseudo - This function is called for all pseudo instructions
comment|/// that remain after register allocation. Many pseudo instructions are
comment|/// created to help register allocation. This is the place to convert them
comment|/// into real instructions. The target can edit MI in place, or it can insert
comment|/// new instructions and erase MI. The function should return true if
comment|/// anything was changed.
name|bool
name|expandPostRAPseudo
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|MI
argument_list|)
decl|const
name|override
decl_stmt|;
name|MachineInstr
modifier|*
name|foldMemoryOperandImpl
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|MachineInstr
operator|*
name|MI
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Ops
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|InsertPt
argument_list|,
name|int
name|FrameIndex
argument_list|)
decl|const
name|override
decl_stmt|;
name|MachineInstr
modifier|*
name|foldMemoryOperandImpl
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|MachineInstr
operator|*
name|MI
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Ops
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|InsertPt
argument_list|,
name|MachineInstr
operator|*
name|LoadMI
argument_list|)
decl|const
name|override
block|{
return|return
name|nullptr
return|;
block|}
name|unsigned
name|createVR
argument_list|(
name|MachineFunction
operator|*
name|MF
argument_list|,
name|MVT
name|VT
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isBranch
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPredicable
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|PredicateInstruction
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isProfitableToIfCvt
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|unsigned
name|NumCycles
argument_list|,
name|unsigned
name|ExtraPredCycles
argument_list|,
specifier|const
name|BranchProbability
operator|&
name|Probability
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isProfitableToIfCvt
argument_list|(
name|MachineBasicBlock
operator|&
name|TMBB
argument_list|,
name|unsigned
name|NumTCycles
argument_list|,
name|unsigned
name|ExtraTCycles
argument_list|,
name|MachineBasicBlock
operator|&
name|FMBB
argument_list|,
name|unsigned
name|NumFCycles
argument_list|,
name|unsigned
name|ExtraFCycles
argument_list|,
specifier|const
name|BranchProbability
operator|&
name|Probability
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isPredicated
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isPredicated
argument_list|(
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPredicatedTrue
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPredicatedTrue
argument_list|(
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPredicatedNew
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPredicatedNew
argument_list|(
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|DefinesPredicate
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|std
operator|::
name|vector
operator|<
name|MachineOperand
operator|>
operator|&
name|Pred
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|SubsumesPredicate
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Pred1
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Pred2
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|ReverseBranchCondition
argument_list|(
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isProfitableToDupForIfCvt
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
name|unsigned
name|NumCycles
argument_list|,
specifier|const
name|BranchProbability
operator|&
name|Probability
argument_list|)
decl|const
name|override
decl_stmt|;
name|DFAPacketizer
modifier|*
name|CreateTargetScheduleState
argument_list|(
specifier|const
name|TargetSubtargetInfo
operator|&
name|STI
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isSchedulingBoundary
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
specifier|const
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
specifier|const
name|MachineFunction
operator|&
name|MF
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isValidOffset
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|int
name|Offset
argument_list|,
name|bool
name|Extend
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isValidAutoIncImm
argument_list|(
specifier|const
name|EVT
name|VT
argument_list|,
specifier|const
name|int
name|Offset
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isMemOp
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isSpillPredRegOp
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isU6_3Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isU6_2Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isU6_1Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isU6_0Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS4_3Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS4_2Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS4_1Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS4_0Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS12_Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isU6_Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS8_Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isS6_Immediate
argument_list|(
specifier|const
name|int
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isSaveCalleeSavedRegsCall
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConditionalTransfer
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConditionalALU32
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConditionalLoad
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConditionalStore
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueInst
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValue
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValue
argument_list|(
name|Opcode_t
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDotNewInst
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|int
name|GetDotOldOp
argument_list|(
specifier|const
name|int
name|opc
argument_list|)
decl|const
decl_stmt|;
name|int
name|GetDotNewOp
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|int
name|GetDotNewPredOp
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
specifier|const
name|MachineBranchProbabilityInfo
operator|*
name|MBPI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|mayBeNewStore
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isDeallocRet
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getInvertedPredicatedOpcode
argument_list|(
specifier|const
name|int
name|Opc
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isExtendable
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isExtended
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isPostIncrement
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueStore
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueStore
argument_list|(
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueJump
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueJump
argument_list|(
name|Opcode_t
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNewValueJumpCandidate
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|void
name|immediateExtend
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConstExtended
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getSize
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|int
name|getDotNewPredJumpOp
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
specifier|const
name|MachineBranchProbabilityInfo
operator|*
name|MBPI
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getAddrMode
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isOperandExtended
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
name|unsigned
name|short
name|OperandNum
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|short
name|getCExtOpNum
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|int
name|getMinValue
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|int
name|getMaxValue
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|NonExtEquivalentExists
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|short
name|getNonExtOpcode
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|PredOpcodeHasJMP_c
argument_list|(
name|Opcode_t
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|predOpcodeHasNot
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isEndLoopN
argument_list|(
name|Opcode_t
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|bool
name|getPredReg
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|MachineOperand
operator|>
operator|&
name|Cond
argument_list|,
name|unsigned
operator|&
name|PredReg
argument_list|,
name|unsigned
operator|&
name|PredRegPos
argument_list|,
name|unsigned
operator|&
name|PredRegFlags
argument_list|)
decl|const
decl_stmt|;
name|int
name|getCondOpcode
argument_list|(
name|int
name|Opc
argument_list|,
name|bool
name|sense
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

