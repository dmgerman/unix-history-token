begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- MipsSubtarget.h - Define Subtarget for the Mips -----*- C++ -*--====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the Mips specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MIPSSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|MIPSSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MipsSubtarget
range|:
name|public
name|TargetSubtarget
block|{
name|public
operator|:
expr|enum
name|MipsABIEnum
block|{
name|O32
block|,
name|O64
block|,
name|N32
block|,
name|N64
block|,
name|EABI
block|}
block|;
name|protected
operator|:
expr|enum
name|MipsArchEnum
block|{
name|Mips1
block|,
name|Mips2
block|,
name|Mips3
block|,
name|Mips4
block|,
name|Mips32
block|,
name|Mips32r2
block|,
name|Mips64
block|,
name|Mips64r2
block|}
block|;
comment|// Mips architecture version
name|MipsArchEnum
name|MipsArchVersion
block|;
comment|// Mips supported ABIs
name|MipsABIEnum
name|MipsABI
block|;
comment|// IsLittle - The target is Little Endian
name|bool
name|IsLittle
block|;
comment|// IsSingleFloat - The target only supports single precision float
comment|// point operations. This enable the target to use all 32 32-bit
comment|// floating point registers instead of only using even ones.
name|bool
name|IsSingleFloat
block|;
comment|// IsFP64bit - The target processor has 64-bit floating point registers.
name|bool
name|IsFP64bit
block|;
comment|// IsFP64bit - General-purpose registers are 64 bits wide
name|bool
name|IsGP64bit
block|;
comment|// HasVFPU - Processor has a vector floating point unit.
name|bool
name|HasVFPU
block|;
comment|// isLinux - Target system is Linux. Is false we consider ELFOS for now.
name|bool
name|IsLinux
block|;
comment|/// Features related to the presence of specific instructions.
comment|// HasSEInReg - SEB and SEH (signext in register) instructions.
name|bool
name|HasSEInReg
block|;
comment|// HasCondMov - Conditional mov (MOVZ, MOVN) instructions.
name|bool
name|HasCondMov
block|;
comment|// HasMulDivAdd - Multiply add and sub (MADD, MADDu, MSUB, MSUBu)
comment|// instructions.
name|bool
name|HasMulDivAdd
block|;
comment|// HasMinMax - MIN and MAX instructions.
name|bool
name|HasMinMax
block|;
comment|// HasSwap - Byte and half swap instructions.
name|bool
name|HasSwap
block|;
comment|// HasBitCount - Count leading '1' and '0' bits.
name|bool
name|HasBitCount
block|;
name|InstrItineraryData
name|InstrItins
block|;
name|public
operator|:
comment|/// Only O32 and EABI supported right now.
name|bool
name|isABI_EABI
argument_list|()
specifier|const
block|{
return|return
name|MipsABI
operator|==
name|EABI
return|;
block|}
name|bool
name|isABI_O32
argument_list|()
specifier|const
block|{
return|return
name|MipsABI
operator|==
name|O32
return|;
block|}
name|unsigned
name|getTargetABI
argument_list|()
specifier|const
block|{
return|return
name|MipsABI
return|;
block|}
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
name|MipsSubtarget
argument_list|(
argument|const std::string&TT
argument_list|,
argument|const std::string&FS
argument_list|,
argument|bool little
argument_list|)
block|;
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|std
operator|::
name|string
name|ParseSubtargetFeatures
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|)
block|;
name|bool
name|isMips1
argument_list|()
specifier|const
block|{
return|return
name|MipsArchVersion
operator|==
name|Mips1
return|;
block|}
name|bool
name|isLittle
argument_list|()
specifier|const
block|{
return|return
name|IsLittle
return|;
block|}
name|bool
name|isFP64bit
argument_list|()
specifier|const
block|{
return|return
name|IsFP64bit
return|;
block|}
block|;
name|bool
name|isGP64bit
argument_list|()
specifier|const
block|{
return|return
name|IsGP64bit
return|;
block|}
block|;
name|bool
name|isGP32bit
argument_list|()
specifier|const
block|{
return|return
operator|!
name|IsGP64bit
return|;
block|}
block|;
name|bool
name|isSingleFloat
argument_list|()
specifier|const
block|{
return|return
name|IsSingleFloat
return|;
block|}
block|;
name|bool
name|isNotSingleFloat
argument_list|()
specifier|const
block|{
return|return
operator|!
name|IsSingleFloat
return|;
block|}
block|;
name|bool
name|hasVFPU
argument_list|()
specifier|const
block|{
return|return
name|HasVFPU
return|;
block|}
block|;
name|bool
name|isLinux
argument_list|()
specifier|const
block|{
return|return
name|IsLinux
return|;
block|}
block|;
comment|/// Features related to the presence of specific instructions.
name|bool
name|hasSEInReg
argument_list|()
specifier|const
block|{
return|return
name|HasSEInReg
return|;
block|}
block|;
name|bool
name|hasCondMov
argument_list|()
specifier|const
block|{
return|return
name|HasCondMov
return|;
block|}
block|;
name|bool
name|hasMulDivAdd
argument_list|()
specifier|const
block|{
return|return
name|HasMulDivAdd
return|;
block|}
block|;
name|bool
name|hasMinMax
argument_list|()
specifier|const
block|{
return|return
name|HasMinMax
return|;
block|}
block|;
name|bool
name|hasSwap
argument_list|()
specifier|const
block|{
return|return
name|HasSwap
return|;
block|}
block|;
name|bool
name|hasBitCount
argument_list|()
specifier|const
block|{
return|return
name|HasBitCount
return|;
block|}
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

