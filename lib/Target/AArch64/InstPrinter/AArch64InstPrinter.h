begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AArch64InstPrinter.h - Convert AArch64 MCInst to assembly syntax --===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints an AArch64 MCInst to a .s file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AARCH64_INSTPRINTER_AARCH64INSTPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AARCH64_INSTPRINTER_AARCH64INSTPRINTER_H
end_define

begin_include
include|#
directive|include
file|"MCTargetDesc/AArch64MCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSubtargetInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperand
decl_stmt|;
name|class
name|AArch64InstPrinter
range|:
name|public
name|MCInstPrinter
block|{
name|public
operator|:
name|AArch64InstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|)
block|;
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|)
name|override
block|;
name|void
name|printRegName
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|unsigned RegNo
argument_list|)
specifier|const
name|override
block|;
comment|// Autogenerated by tblgen.
name|virtual
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|virtual
name|bool
name|printAliasInstr
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|virtual
name|void
name|printCustomAliasOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpIdx
argument_list|,
argument|unsigned PrintMethodIdx
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|virtual
name|StringRef
name|getRegName
argument_list|(
argument|unsigned RegNo
argument_list|)
specifier|const
block|{
return|return
name|getRegisterName
argument_list|(
name|RegNo
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|,
argument|unsigned AltIdx = AArch64::NoRegAltName
argument_list|)
block|;
name|protected
operator|:
name|bool
name|printSysAlias
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
comment|// Operand printers
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printHexImm
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printPostIncOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|unsigned Imm
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|int
name|Amount
operator|>
name|void
name|printPostIncOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printPostIncOperand
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|Amount
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printVRegOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSysCROperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printAddSubImm
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printLogicalImm32
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printLogicalImm64
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printShifter
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printShiftedRegister
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printExtendedRegister
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printArithExtend
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMemExtend
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|char SrcRegKind
argument_list|,
argument|unsigned Width
argument_list|)
block|;
name|template
operator|<
name|char
name|SrcRegKind
block|,
name|unsigned
name|Width
operator|>
name|void
name|printMemExtend
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printMemExtend
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|,
name|SrcRegKind
argument_list|,
name|Width
argument_list|)
block|;   }
name|void
name|printCondCode
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printInverseCondCode
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printAlignedLabel
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printUImm12Offset
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|unsigned Scale
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printAMIndexedWB
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|unsigned Scale
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|int
name|Scale
operator|>
name|void
name|printUImm12Offset
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printUImm12Offset
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|Scale
argument_list|,
name|O
argument_list|)
block|;   }
name|template
operator|<
name|int
name|BitWidth
operator|>
name|void
name|printAMIndexedWB
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printAMIndexedWB
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|BitWidth
operator|/
literal|8
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printAMNoIndex
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|int
name|Scale
operator|>
name|void
name|printImmScale
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printPrefetchOp
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printFPImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printVectorList
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef LayoutSuffix
argument_list|)
block|;
comment|/// Print a list of vector registers where the type suffix is implicit
comment|/// (i.e. attached to the instruction rather than the registers).
name|void
name|printImplicitlyTypedVectorList
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|unsigned
name|NumLanes
block|,
name|char
name|LaneKind
operator|>
name|void
name|printTypedVectorList
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printVectorIndex
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printAdrpLabel
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBarrierOption
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMSRSystemRegister
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMRSSystemRegister
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSystemPStateField
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSIMDType10Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
block|; }
decl_stmt|;
name|class
name|AArch64AppleInstPrinter
range|:
name|public
name|AArch64InstPrinter
block|{
name|public
operator|:
name|AArch64AppleInstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|)
block|;
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|)
name|override
block|;
name|void
name|printInstruction
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
name|override
block|;
name|bool
name|printAliasInstr
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
name|override
block|;
name|void
name|printCustomAliasOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpIdx
argument_list|,
argument|unsigned PrintMethodIdx
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|,
argument|raw_ostream&O
argument_list|)
name|override
block|;
name|StringRef
name|getRegName
argument_list|(
argument|unsigned RegNo
argument_list|)
specifier|const
name|override
block|{
return|return
name|getRegisterName
argument_list|(
name|RegNo
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|,
argument|unsigned AltIdx = AArch64::NoRegAltName
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

