begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MSILWriter.h - TargetMachine for the MSIL ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MSILWriter that is used by the MSIL.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MSILWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|MSILWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/CallingConv.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IntrinsicInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/PassManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/FindUsedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/LoopInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormattedStream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/GetElementPtrTypeIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetData.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Mangler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
specifier|extern
name|Target
name|TheMSILTarget
decl_stmt|;
name|class
name|MSILModule
range|:
name|public
name|ModulePass
block|{
name|Module
operator|*
name|ModulePtr
block|;
specifier|const
name|std
operator|::
name|set
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|*
operator|&
name|UsedTypes
block|;
specifier|const
name|TargetData
operator|*
operator|&
name|TD
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|MSILModule
argument_list|(
specifier|const
name|std
operator|::
name|set
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|*
operator|&
name|_UsedTypes
argument_list|,
specifier|const
name|TargetData
operator|*
operator|&
name|_TD
argument_list|)
operator|:
name|ModulePass
argument_list|(
operator|&
name|ID
argument_list|)
block|,
name|UsedTypes
argument_list|(
name|_UsedTypes
argument_list|)
block|,
name|TD
argument_list|(
argument|_TD
argument_list|)
block|{}
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
block|{
name|AU
operator|.
name|addRequired
operator|<
name|FindUsedTypes
operator|>
operator|(
operator|)
block|;
name|AU
operator|.
name|addRequired
operator|<
name|TargetData
operator|>
operator|(
operator|)
block|;     }
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"MSIL backend definitions"
return|;
block|}
name|virtual
name|bool
name|runOnModule
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;    }
decl_stmt|;
name|class
name|MSILWriter
range|:
name|public
name|FunctionPass
block|{     struct
name|StaticInitializer
block|{
specifier|const
name|Constant
operator|*
name|constant
block|;
name|uint64_t
name|offset
block|;
name|StaticInitializer
argument_list|()
operator|:
name|constant
argument_list|(
literal|0
argument_list|)
block|,
name|offset
argument_list|(
literal|0
argument_list|)
block|{}
name|StaticInitializer
argument_list|(
argument|const Constant* _constant
argument_list|,
argument|uint64_t _offset
argument_list|)
operator|:
name|constant
argument_list|(
name|_constant
argument_list|)
block|,
name|offset
argument_list|(
argument|_offset
argument_list|)
block|{}
block|}
block|;
name|uint64_t
name|UniqID
block|;
name|uint64_t
name|getUniqID
argument_list|()
block|{
return|return
operator|++
name|UniqID
return|;
block|}
name|public
operator|:
name|formatted_raw_ostream
operator|&
name|Out
block|;
name|Module
operator|*
name|ModulePtr
block|;
specifier|const
name|TargetData
operator|*
name|TD
block|;
name|Mangler
operator|*
name|Mang
block|;
name|LoopInfo
operator|*
name|LInfo
block|;
name|std
operator|::
name|vector
operator|<
name|StaticInitializer
operator|>
operator|*
name|InitListPtr
block|;
name|std
operator|::
name|map
operator|<
specifier|const
name|GlobalVariable
operator|*
block|,
name|std
operator|::
name|vector
operator|<
name|StaticInitializer
operator|>
expr|>
name|StaticInitList
block|;
specifier|const
name|std
operator|::
name|set
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|*
name|UsedTypes
block|;
specifier|static
name|char
name|ID
block|;
name|DenseMap
operator|<
specifier|const
name|Value
operator|*
block|,
name|unsigned
operator|>
name|AnonValueNumbers
block|;
name|unsigned
name|NextAnonValueNumber
block|;
name|MSILWriter
argument_list|(
name|formatted_raw_ostream
operator|&
name|o
argument_list|)
operator|:
name|FunctionPass
argument_list|(
operator|&
name|ID
argument_list|)
block|,
name|Out
argument_list|(
name|o
argument_list|)
block|,
name|NextAnonValueNumber
argument_list|(
literal|0
argument_list|)
block|{
name|UniqID
operator|=
literal|0
block|;     }
expr|enum
name|ValueType
block|{
name|UndefVT
block|,
name|GlobalVT
block|,
name|InternalVT
block|,
name|ArgumentVT
block|,
name|LocalVT
block|,
name|ConstVT
block|,
name|ConstExprVT
block|}
block|;
name|bool
name|isVariable
argument_list|(
argument|ValueType V
argument_list|)
block|{
return|return
name|V
operator|==
name|GlobalVT
operator|||
name|V
operator|==
name|InternalVT
operator|||
name|V
operator|==
name|ArgumentVT
operator|||
name|V
operator|==
name|LocalVT
return|;
block|}
name|bool
name|isConstValue
argument_list|(
argument|ValueType V
argument_list|)
block|{
return|return
name|V
operator|==
name|ConstVT
operator|||
name|V
operator|==
name|ConstExprVT
return|;
block|}
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"MSIL backend"
return|;
block|}
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
block|{
name|AU
operator|.
name|addRequired
operator|<
name|LoopInfo
operator|>
operator|(
operator|)
block|;
name|AU
operator|.
name|setPreservesAll
argument_list|()
block|;     }
name|bool
name|runOnFunction
argument_list|(
name|Function
operator|&
name|F
argument_list|)
block|;
name|virtual
name|bool
name|doInitialization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
name|virtual
name|bool
name|doFinalization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
name|void
name|printModuleStartup
argument_list|()
block|;
name|bool
name|isZeroValue
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|std
operator|::
name|string
name|getValueName
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|std
operator|::
name|string
name|getLabelName
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|std
operator|::
name|string
name|getLabelName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|;
name|std
operator|::
name|string
name|getConvModopt
argument_list|(
argument|CallingConv::ID CallingConvID
argument_list|)
block|;
name|std
operator|::
name|string
name|getArrayTypeName
argument_list|(
argument|Type::TypeID TyID
argument_list|,
argument|const Type* Ty
argument_list|)
block|;
name|std
operator|::
name|string
name|getPrimitiveTypeName
argument_list|(
argument|const Type* Ty
argument_list|,
argument|bool isSigned
argument_list|)
block|;
name|std
operator|::
name|string
name|getFunctionTypeName
argument_list|(
specifier|const
name|Type
operator|*
name|Ty
argument_list|)
block|;
name|std
operator|::
name|string
name|getPointerTypeName
argument_list|(
specifier|const
name|Type
operator|*
name|Ty
argument_list|)
block|;
name|std
operator|::
name|string
name|getTypeName
argument_list|(
argument|const Type* Ty
argument_list|,
argument|bool isSigned = false
argument_list|,
argument|bool isNested = false
argument_list|)
block|;
name|ValueType
name|getValueLocation
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|std
operator|::
name|string
name|getTypePostfix
argument_list|(
argument|const Type* Ty
argument_list|,
argument|bool Expand
argument_list|,
argument|bool isSigned = false
argument_list|)
block|;
name|void
name|printConvToPtr
argument_list|()
block|;
name|void
name|printPtrLoad
argument_list|(
argument|uint64_t N
argument_list|)
block|;
name|void
name|printValuePtrLoad
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|void
name|printConstLoad
argument_list|(
specifier|const
name|Constant
operator|*
name|C
argument_list|)
block|;
name|void
name|printValueLoad
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|void
name|printValueSave
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|void
name|printBinaryInstruction
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|,
specifier|const
name|Value
operator|*
name|Left
argument_list|,
specifier|const
name|Value
operator|*
name|Right
argument_list|)
block|;
name|void
name|printSimpleInstruction
argument_list|(
specifier|const
name|char
operator|*
name|Inst
argument_list|,
specifier|const
name|char
operator|*
name|Operand
operator|=
name|NULL
argument_list|)
block|;
name|void
name|printPHICopy
argument_list|(
specifier|const
name|BasicBlock
operator|*
name|Src
argument_list|,
specifier|const
name|BasicBlock
operator|*
name|Dst
argument_list|)
block|;
name|void
name|printBranchToBlock
argument_list|(
specifier|const
name|BasicBlock
operator|*
name|CurrBB
argument_list|,
specifier|const
name|BasicBlock
operator|*
name|TrueBB
argument_list|,
specifier|const
name|BasicBlock
operator|*
name|FalseBB
argument_list|)
block|;
name|void
name|printBranchInstruction
argument_list|(
specifier|const
name|BranchInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printSelectInstruction
argument_list|(
specifier|const
name|Value
operator|*
name|Cond
argument_list|,
specifier|const
name|Value
operator|*
name|VTrue
argument_list|,
specifier|const
name|Value
operator|*
name|VFalse
argument_list|)
block|;
name|void
name|printIndirectLoad
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
block|;
name|void
name|printIndirectSave
argument_list|(
specifier|const
name|Value
operator|*
name|Ptr
argument_list|,
specifier|const
name|Value
operator|*
name|Val
argument_list|)
block|;
name|void
name|printIndirectSave
argument_list|(
specifier|const
name|Type
operator|*
name|Ty
argument_list|)
block|;
name|void
name|printCastInstruction
argument_list|(
argument|unsigned int Op
argument_list|,
argument|const Value* V
argument_list|,
argument|const Type* Ty
argument_list|,
argument|const Type* SrcTy=
literal|0
argument_list|)
block|;
name|void
name|printGepInstruction
argument_list|(
argument|const Value* V
argument_list|,
argument|gep_type_iterator I
argument_list|,
argument|gep_type_iterator E
argument_list|)
block|;
name|std
operator|::
name|string
name|getCallSignature
argument_list|(
argument|const FunctionType* Ty
argument_list|,
argument|const Instruction* Inst
argument_list|,
argument|std::string Name
argument_list|)
block|;
name|void
name|printFunctionCall
argument_list|(
specifier|const
name|Value
operator|*
name|FnVal
argument_list|,
specifier|const
name|Instruction
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printIntrinsicCall
argument_list|(
specifier|const
name|IntrinsicInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printCallInstruction
argument_list|(
specifier|const
name|Instruction
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printICmpInstruction
argument_list|(
argument|unsigned Predicate
argument_list|,
argument|const Value* Left
argument_list|,
argument|const Value* Right
argument_list|)
block|;
name|void
name|printFCmpInstruction
argument_list|(
argument|unsigned Predicate
argument_list|,
argument|const Value* Left
argument_list|,
argument|const Value* Right
argument_list|)
block|;
name|void
name|printInvokeInstruction
argument_list|(
specifier|const
name|InvokeInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printSwitchInstruction
argument_list|(
specifier|const
name|SwitchInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printVAArgInstruction
argument_list|(
specifier|const
name|VAArgInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printAllocaInstruction
argument_list|(
specifier|const
name|AllocaInst
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printInstruction
argument_list|(
specifier|const
name|Instruction
operator|*
name|Inst
argument_list|)
block|;
name|void
name|printLoop
argument_list|(
specifier|const
name|Loop
operator|*
name|L
argument_list|)
block|;
name|void
name|printBasicBlock
argument_list|(
specifier|const
name|BasicBlock
operator|*
name|BB
argument_list|)
block|;
name|void
name|printLocalVariables
argument_list|(
specifier|const
name|Function
operator|&
name|F
argument_list|)
block|;
name|void
name|printFunctionBody
argument_list|(
specifier|const
name|Function
operator|&
name|F
argument_list|)
block|;
name|void
name|printConstantExpr
argument_list|(
specifier|const
name|ConstantExpr
operator|*
name|CE
argument_list|)
block|;
name|void
name|printStaticInitializerList
argument_list|()
block|;
name|void
name|printFunction
argument_list|(
specifier|const
name|Function
operator|&
name|F
argument_list|)
block|;
name|void
name|printDeclarations
argument_list|(
specifier|const
name|TypeSymbolTable
operator|&
name|ST
argument_list|)
block|;
name|unsigned
name|int
name|getBitWidth
argument_list|(
specifier|const
name|Type
operator|*
name|Ty
argument_list|)
block|;
name|void
name|printStaticConstant
argument_list|(
specifier|const
name|Constant
operator|*
name|C
argument_list|,
name|uint64_t
operator|&
name|Offset
argument_list|)
block|;
name|void
name|printStaticInitializer
argument_list|(
specifier|const
name|Constant
operator|*
name|C
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|;
name|void
name|printVariableDefinition
argument_list|(
specifier|const
name|GlobalVariable
operator|*
name|G
argument_list|)
block|;
name|void
name|printGlobalVariables
argument_list|()
block|;
specifier|const
name|char
operator|*
name|getLibraryName
argument_list|(
specifier|const
name|Function
operator|*
name|F
argument_list|)
block|;
specifier|const
name|char
operator|*
name|getLibraryName
argument_list|(
specifier|const
name|GlobalVariable
operator|*
name|GV
argument_list|)
block|;
specifier|const
name|char
operator|*
name|getLibraryForSymbol
argument_list|(
argument|const StringRef&Name
argument_list|,
argument|bool isFunction
argument_list|,
argument|CallingConv::ID CallingConv
argument_list|)
block|;
name|void
name|printExternals
argument_list|()
block|;   }
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

