begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- PPCSubtarget.h - Define Subtarget for the PPC -------*- C++ -*--====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the PowerPC specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|POWERPCSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|POWERPCSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetInstrItineraries.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtarget.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// GCC #defines PPC on Linux but we use it as our namespace name
end_comment

begin_undef
undef|#
directive|undef
name|PPC
end_undef

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|PPC
block|{
comment|// -m directive values.
enum|enum
block|{
name|DIR_NONE
block|,
name|DIR_32
block|,
name|DIR_601
block|,
name|DIR_602
block|,
name|DIR_603
block|,
name|DIR_7400
block|,
name|DIR_750
block|,
name|DIR_970
block|,
name|DIR_64
block|}
enum|;
block|}
name|class
name|Module
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
name|class
name|PPCSubtarget
range|:
name|public
name|TargetSubtarget
block|{
name|public
operator|:
expr|enum
name|AsmWriterFlavorTy
block|{
name|OldMnemonic
block|,
name|NewMnemonic
block|,
name|Unset
block|}
block|;
name|protected
operator|:
specifier|const
name|TargetMachine
operator|&
name|TM
block|;
comment|/// stackAlignment - The minimum alignment known to hold of the stack frame on
comment|/// entry to the function and which must be maintained by every function.
name|unsigned
name|StackAlignment
block|;
comment|/// Selected instruction itineraries (one entry per itinerary class.)
name|InstrItineraryData
name|InstrItins
block|;
comment|/// Which cpu directive was used.
name|unsigned
name|DarwinDirective
block|;
comment|/// AsmFlavor - Which PPC asm dialect to use.
name|AsmWriterFlavorTy
name|AsmFlavor
block|;
comment|/// Used by the ISel to turn in optimizations for POWER4-derived architectures
name|bool
name|IsGigaProcessor
block|;
name|bool
name|Has64BitSupport
block|;
name|bool
name|Use64BitRegs
block|;
name|bool
name|IsPPC64
block|;
name|bool
name|HasAltivec
block|;
name|bool
name|HasFSQRT
block|;
name|bool
name|HasSTFIWX
block|;
name|bool
name|HasLazyResolverStubs
block|;
comment|/// DarwinVers - Nonzero if this is a darwin platform.  Otherwise, the numeric
comment|/// version of the platform, e.g. 8 = 10.4 (Tiger), 9 = 10.5 (Leopard), etc.
name|unsigned
name|char
name|DarwinVers
block|;
comment|// Is any darwin-ppc platform.
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified module.
comment|///
name|PPCSubtarget
argument_list|(
argument|const TargetMachine&TM
argument_list|,
argument|const Module&M
argument_list|,
argument|const std::string&FS
argument_list|,
argument|bool is64Bit
argument_list|)
block|;
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|std
operator|::
name|string
name|ParseSubtargetFeatures
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|)
block|;
comment|/// SetJITMode - This is called to inform the subtarget info that we are
comment|/// producing code for the JIT.
name|void
name|SetJITMode
argument_list|()
block|;
comment|/// getStackAlignment - Returns the minimum alignment known to hold of the
comment|/// stack frame on entry to the function and which must be maintained by every
comment|/// function for this subtarget.
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
block|{
return|return
name|StackAlignment
return|;
block|}
comment|/// getDarwinDirective - Returns the -m directive specified for the cpu.
comment|///
name|unsigned
name|getDarwinDirective
argument_list|()
specifier|const
block|{
return|return
name|DarwinDirective
return|;
block|}
comment|/// getInstrItins - Return the instruction itineraies based on subtarget
comment|/// selection.
specifier|const
name|InstrItineraryData
operator|&
name|getInstrItineraryData
argument_list|()
specifier|const
block|{
return|return
name|InstrItins
return|;
block|}
comment|/// getTargetDataString - Return the pointer size and type alignment
comment|/// properties of this subtarget.
specifier|const
name|char
operator|*
name|getTargetDataString
argument_list|()
specifier|const
block|{
comment|// Note, the alignment values for f64 and i64 on ppc64 in Darwin
comment|// documentation are wrong; these are correct (i.e. "what gcc does").
return|return
name|isPPC64
argument_list|()
operator|?
literal|"E-p:64:64-f64:64:64-i64:64:64-f128:64:128"
operator|:
literal|"E-p:32:32-f64:32:64-i64:32:64-f128:64:128"
return|;
block|}
comment|/// isPPC64 - Return true if we are generating code for 64-bit pointer mode.
comment|///
name|bool
name|isPPC64
argument_list|()
specifier|const
block|{
return|return
name|IsPPC64
return|;
block|}
comment|/// has64BitSupport - Return true if the selected CPU supports 64-bit
comment|/// instructions, regardless of whether we are in 32-bit or 64-bit mode.
name|bool
name|has64BitSupport
argument_list|()
specifier|const
block|{
return|return
name|Has64BitSupport
return|;
block|}
comment|/// use64BitRegs - Return true if in 64-bit mode or if we should use 64-bit
comment|/// registers in 32-bit mode when possible.  This can only true if
comment|/// has64BitSupport() returns true.
name|bool
name|use64BitRegs
argument_list|()
specifier|const
block|{
return|return
name|Use64BitRegs
return|;
block|}
comment|/// hasLazyResolverStub - Return true if accesses to the specified global have
comment|/// to go through a dyld lazy resolution stub.  This means that an extra load
comment|/// is required to get the address of the global.
name|bool
name|hasLazyResolverStub
argument_list|(
argument|const GlobalValue *GV
argument_list|)
specifier|const
block|;
comment|// Specific obvious features.
name|bool
name|hasFSQRT
argument_list|()
specifier|const
block|{
return|return
name|HasFSQRT
return|;
block|}
name|bool
name|hasSTFIWX
argument_list|()
specifier|const
block|{
return|return
name|HasSTFIWX
return|;
block|}
name|bool
name|hasAltivec
argument_list|()
specifier|const
block|{
return|return
name|HasAltivec
return|;
block|}
name|bool
name|isGigaProcessor
argument_list|()
specifier|const
block|{
return|return
name|IsGigaProcessor
return|;
block|}
comment|/// isDarwin - True if this is any darwin platform.
name|bool
name|isDarwin
argument_list|()
specifier|const
block|{
return|return
name|DarwinVers
operator|!=
literal|0
return|;
block|}
comment|/// isDarwin - True if this is darwin9 (leopard, 10.5) or above.
name|bool
name|isDarwin9
argument_list|()
specifier|const
block|{
return|return
name|DarwinVers
operator|>=
literal|9
return|;
block|}
comment|/// getDarwinVers - Return the darwin version number, 8 = tiger, 9 = leopard.
name|unsigned
name|getDarwinVers
argument_list|()
specifier|const
block|{
return|return
name|DarwinVers
return|;
block|}
name|bool
name|isMachoABI
argument_list|()
specifier|const
block|{
return|return
name|isDarwin
argument_list|()
operator|||
name|IsPPC64
return|;
block|}
name|bool
name|isELF32_ABI
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isDarwin
argument_list|()
operator|&&
operator|!
name|IsPPC64
return|;
block|}
name|unsigned
name|getAsmFlavor
argument_list|()
specifier|const
block|{
return|return
name|AsmFlavor
operator|!=
name|Unset
condition|?
name|unsigned
argument_list|(
name|AsmFlavor
argument_list|)
else|:
literal|0
return|;
block|}
expr|}
block|; }
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

