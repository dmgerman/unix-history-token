begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ARMLegalizerInfo ------------------------------------------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file declares the targeting of the Machinelegalizer class for ARM.
end_comment

begin_comment
comment|/// \todo This should be generated by TableGen.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMMACHINELEGALIZER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMMACHINELEGALIZER_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/LegalizerInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ARMSubtarget
decl_stmt|;
comment|/// This class provides the information for the target register banks.
name|class
name|ARMLegalizerInfo
range|:
name|public
name|LegalizerInfo
block|{
name|public
operator|:
name|ARMLegalizerInfo
argument_list|(
specifier|const
name|ARMSubtarget
operator|&
name|ST
argument_list|)
block|;
name|bool
name|legalizeCustom
argument_list|(
argument|MachineInstr&MI
argument_list|,
argument|MachineRegisterInfo&MRI
argument_list|,
argument|MachineIRBuilder&MIRBuilder
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

