begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARMSubtarget.h - Define Subtarget for the ARM ----------*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the ARM specific subclass of TargetSubtargetInfo.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"ARMBaseInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"ARMBaseRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"ARMFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"ARMISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"ARMSelectionDAGInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/GISelAccessor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrItineraries.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSchedule.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetOptions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"ARMGenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ARMBaseTargetMachine
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|ARMSubtarget
range|:
name|public
name|ARMGenSubtargetInfo
block|{
name|protected
operator|:
expr|enum
name|ARMProcFamilyEnum
block|{
name|Others
block|,
name|CortexA12
block|,
name|CortexA15
block|,
name|CortexA17
block|,
name|CortexA32
block|,
name|CortexA35
block|,
name|CortexA5
block|,
name|CortexA53
block|,
name|CortexA57
block|,
name|CortexA7
block|,
name|CortexA72
block|,
name|CortexA73
block|,
name|CortexA8
block|,
name|CortexA9
block|,
name|CortexM3
block|,
name|CortexR4
block|,
name|CortexR4F
block|,
name|CortexR5
block|,
name|CortexR52
block|,
name|CortexR7
block|,
name|ExynosM1
block|,
name|Krait
block|,
name|Kryo
block|,
name|Swift
block|}
block|;   enum
name|ARMProcClassEnum
block|{
name|None
block|,
name|AClass
block|,
name|MClass
block|,
name|RClass
block|}
block|;   enum
name|ARMArchEnum
block|{
name|ARMv2
block|,
name|ARMv2a
block|,
name|ARMv3
block|,
name|ARMv3m
block|,
name|ARMv4
block|,
name|ARMv4t
block|,
name|ARMv5
block|,
name|ARMv5t
block|,
name|ARMv5te
block|,
name|ARMv5tej
block|,
name|ARMv6
block|,
name|ARMv6k
block|,
name|ARMv6kz
block|,
name|ARMv6m
block|,
name|ARMv6sm
block|,
name|ARMv6t2
block|,
name|ARMv7a
block|,
name|ARMv7em
block|,
name|ARMv7m
block|,
name|ARMv7r
block|,
name|ARMv7ve
block|,
name|ARMv81a
block|,
name|ARMv82a
block|,
name|ARMv8a
block|,
name|ARMv8mBaseline
block|,
name|ARMv8mMainline
block|,
name|ARMv8r
block|}
block|;
name|public
operator|:
comment|/// What kind of timing do load multiple/store multiple instructions have.
expr|enum
name|ARMLdStMultipleTiming
block|{
comment|/// Can load/store 2 registers/cycle.
name|DoubleIssue
block|,
comment|/// Can load/store 2 registers/cycle, but needs an extra cycle if the access
comment|/// is not 64-bit aligned.
name|DoubleIssueCheckUnalignedAccess
block|,
comment|/// Can load/store 1 register/cycle.
name|SingleIssue
block|,
comment|/// Can load/store 1 register/cycle, but needs an extra cycle for address
comment|/// computation and potentially also for register writeback.
name|SingleIssuePlusExtras
block|,   }
block|;
name|protected
operator|:
comment|/// ARMProcFamily - ARM processor family: Cortex-A8, Cortex-A9, and others.
name|ARMProcFamilyEnum
name|ARMProcFamily
operator|=
name|Others
block|;
comment|/// ARMProcClass - ARM processor class: None, AClass, RClass or MClass.
name|ARMProcClassEnum
name|ARMProcClass
operator|=
name|None
block|;
comment|/// ARMArch - ARM architecture
name|ARMArchEnum
name|ARMArch
operator|=
name|ARMv4t
block|;
comment|/// HasV4TOps, HasV5TOps, HasV5TEOps,
comment|/// HasV6Ops, HasV6MOps, HasV6KOps, HasV6T2Ops, HasV7Ops, HasV8Ops -
comment|/// Specify whether target support specific ARM ISA variants.
name|bool
name|HasV4TOps
operator|=
name|false
block|;
name|bool
name|HasV5TOps
operator|=
name|false
block|;
name|bool
name|HasV5TEOps
operator|=
name|false
block|;
name|bool
name|HasV6Ops
operator|=
name|false
block|;
name|bool
name|HasV6MOps
operator|=
name|false
block|;
name|bool
name|HasV6KOps
operator|=
name|false
block|;
name|bool
name|HasV6T2Ops
operator|=
name|false
block|;
name|bool
name|HasV7Ops
operator|=
name|false
block|;
name|bool
name|HasV8Ops
operator|=
name|false
block|;
name|bool
name|HasV8_1aOps
operator|=
name|false
block|;
name|bool
name|HasV8_2aOps
operator|=
name|false
block|;
name|bool
name|HasV8MBaselineOps
operator|=
name|false
block|;
name|bool
name|HasV8MMainlineOps
operator|=
name|false
block|;
comment|/// HasVFPv2, HasVFPv3, HasVFPv4, HasFPARMv8, HasNEON - Specify what
comment|/// floating point ISAs are supported.
name|bool
name|HasVFPv2
operator|=
name|false
block|;
name|bool
name|HasVFPv3
operator|=
name|false
block|;
name|bool
name|HasVFPv4
operator|=
name|false
block|;
name|bool
name|HasFPARMv8
operator|=
name|false
block|;
name|bool
name|HasNEON
operator|=
name|false
block|;
comment|/// UseNEONForSinglePrecisionFP - if the NEONFP attribute has been
comment|/// specified. Use the method useNEONForSinglePrecisionFP() to
comment|/// determine if NEON should actually be used.
name|bool
name|UseNEONForSinglePrecisionFP
operator|=
name|false
block|;
comment|/// UseMulOps - True if non-microcoded fused integer multiply-add and
comment|/// multiply-subtract instructions should be used.
name|bool
name|UseMulOps
operator|=
name|false
block|;
comment|/// SlowFPVMLx - If the VFP2 / NEON instructions are available, indicates
comment|/// whether the FP VML[AS] instructions are slow (if so, don't use them).
name|bool
name|SlowFPVMLx
operator|=
name|false
block|;
comment|/// HasVMLxForwarding - If true, NEON has special multiplier accumulator
comment|/// forwarding to allow mul + mla being issued back to back.
name|bool
name|HasVMLxForwarding
operator|=
name|false
block|;
comment|/// SlowFPBrcc - True if floating point compare + branch is slow.
name|bool
name|SlowFPBrcc
operator|=
name|false
block|;
comment|/// InThumbMode - True if compiling for Thumb, false for ARM.
name|bool
name|InThumbMode
operator|=
name|false
block|;
comment|/// UseSoftFloat - True if we're using software floating point features.
name|bool
name|UseSoftFloat
operator|=
name|false
block|;
comment|/// HasThumb2 - True if Thumb2 instructions are supported.
name|bool
name|HasThumb2
operator|=
name|false
block|;
comment|/// NoARM - True if subtarget does not support ARM mode execution.
name|bool
name|NoARM
operator|=
name|false
block|;
comment|/// ReserveR9 - True if R9 is not available as a general purpose register.
name|bool
name|ReserveR9
operator|=
name|false
block|;
comment|/// NoMovt - True if MOVT / MOVW pairs are not used for materialization of
comment|/// 32-bit imms (including global addresses).
name|bool
name|NoMovt
operator|=
name|false
block|;
comment|/// SupportsTailCall - True if the OS supports tail call. The dynamic linker
comment|/// must be able to synthesize call stubs for interworking between ARM and
comment|/// Thumb.
name|bool
name|SupportsTailCall
operator|=
name|false
block|;
comment|/// HasFP16 - True if subtarget supports half-precision FP conversions
name|bool
name|HasFP16
operator|=
name|false
block|;
comment|/// HasFullFP16 - True if subtarget supports half-precision FP operations
name|bool
name|HasFullFP16
operator|=
name|false
block|;
comment|/// HasD16 - True if subtarget is limited to 16 double precision
comment|/// FP registers for VFPv3.
name|bool
name|HasD16
operator|=
name|false
block|;
comment|/// HasHardwareDivide - True if subtarget supports [su]div in Thumb mode
name|bool
name|HasHardwareDivideInThumb
operator|=
name|false
block|;
comment|/// HasHardwareDivideInARM - True if subtarget supports [su]div in ARM mode
name|bool
name|HasHardwareDivideInARM
operator|=
name|false
block|;
comment|/// HasDataBarrier - True if the subtarget supports DMB / DSB data barrier
comment|/// instructions.
name|bool
name|HasDataBarrier
operator|=
name|false
block|;
comment|/// HasV7Clrex - True if the subtarget supports CLREX instructions
name|bool
name|HasV7Clrex
operator|=
name|false
block|;
comment|/// HasAcquireRelease - True if the subtarget supports v8 atomics (LDA/LDAEX etc)
comment|/// instructions
name|bool
name|HasAcquireRelease
operator|=
name|false
block|;
comment|/// Pref32BitThumb - If true, codegen would prefer 32-bit Thumb instructions
comment|/// over 16-bit ones.
name|bool
name|Pref32BitThumb
operator|=
name|false
block|;
comment|/// AvoidCPSRPartialUpdate - If true, codegen would avoid using instructions
comment|/// that partially update CPSR and add false dependency on the previous
comment|/// CPSR setting instruction.
name|bool
name|AvoidCPSRPartialUpdate
operator|=
name|false
block|;
comment|/// AvoidMOVsShifterOperand - If true, codegen should avoid using flag setting
comment|/// movs with shifter operand (i.e. asr, lsl, lsr).
name|bool
name|AvoidMOVsShifterOperand
operator|=
name|false
block|;
comment|/// HasRetAddrStack - Some processors perform return stack prediction. CodeGen should
comment|/// avoid issue "normal" call instructions to callees which do not return.
name|bool
name|HasRetAddrStack
operator|=
name|false
block|;
comment|/// HasMPExtension - True if the subtarget supports Multiprocessing
comment|/// extension (ARMv7 only).
name|bool
name|HasMPExtension
operator|=
name|false
block|;
comment|/// HasVirtualization - True if the subtarget supports the Virtualization
comment|/// extension.
name|bool
name|HasVirtualization
operator|=
name|false
block|;
comment|/// FPOnlySP - If true, the floating point unit only supports single
comment|/// precision.
name|bool
name|FPOnlySP
operator|=
name|false
block|;
comment|/// If true, the processor supports the Performance Monitor Extensions. These
comment|/// include a generic cycle-counter as well as more fine-grained (often
comment|/// implementation-specific) events.
name|bool
name|HasPerfMon
operator|=
name|false
block|;
comment|/// HasTrustZone - if true, processor supports TrustZone security extensions
name|bool
name|HasTrustZone
operator|=
name|false
block|;
comment|/// Has8MSecExt - if true, processor supports ARMv8-M Security Extensions
name|bool
name|Has8MSecExt
operator|=
name|false
block|;
comment|/// HasCrypto - if true, processor supports Cryptography extensions
name|bool
name|HasCrypto
operator|=
name|false
block|;
comment|/// HasCRC - if true, processor supports CRC instructions
name|bool
name|HasCRC
operator|=
name|false
block|;
comment|/// HasRAS - if true, the processor supports RAS extensions
name|bool
name|HasRAS
operator|=
name|false
block|;
comment|/// If true, the instructions "vmov.i32 d0, #0" and "vmov.i32 q0, #0" are
comment|/// particularly effective at zeroing a VFP register.
name|bool
name|HasZeroCycleZeroing
operator|=
name|false
block|;
comment|/// HasFPAO - if true, processor  does positive address offset computation faster
name|bool
name|HasFPAO
operator|=
name|false
block|;
comment|/// If true, if conversion may decide to leave some instructions unpredicated.
name|bool
name|IsProfitableToUnpredicate
operator|=
name|false
block|;
comment|/// If true, VMOV will be favored over VGETLNi32.
name|bool
name|HasSlowVGETLNi32
operator|=
name|false
block|;
comment|/// If true, VMOV will be favored over VDUP.
name|bool
name|HasSlowVDUP32
operator|=
name|false
block|;
comment|/// If true, VMOVSR will be favored over VMOVDRR.
name|bool
name|PreferVMOVSR
operator|=
name|false
block|;
comment|/// If true, ISHST barriers will be used for Release semantics.
name|bool
name|PreferISHST
operator|=
name|false
block|;
comment|/// If true, a VLDM/VSTM starting with an odd register number is considered to
comment|/// take more microops than single VLDRS/VSTRS.
name|bool
name|SlowOddRegister
operator|=
name|false
block|;
comment|/// If true, loading into a D subregister will be penalized.
name|bool
name|SlowLoadDSubregister
operator|=
name|false
block|;
comment|/// If true, the AGU and NEON/FPU units are multiplexed.
name|bool
name|HasMuxedUnits
operator|=
name|false
block|;
comment|/// If true, VMOVS will never be widened to VMOVD
name|bool
name|DontWidenVMOVS
operator|=
name|false
block|;
comment|/// If true, run the MLx expansion pass.
name|bool
name|ExpandMLx
operator|=
name|false
block|;
comment|/// If true, VFP/NEON VMLA/VMLS have special RAW hazards.
name|bool
name|HasVMLxHazards
operator|=
name|false
block|;
comment|/// If true, VMOVRS, VMOVSR and VMOVS will be converted from VFP to NEON.
name|bool
name|UseNEONForFPMovs
operator|=
name|false
block|;
comment|/// If true, VLDn instructions take an extra cycle for unaligned accesses.
name|bool
name|CheckVLDnAlign
operator|=
name|false
block|;
comment|/// If true, VFP instructions are not pipelined.
name|bool
name|NonpipelinedVFP
operator|=
name|false
block|;
comment|/// StrictAlign - If true, the subtarget disallows unaligned memory
comment|/// accesses for some types.  For details, see
comment|/// ARMTargetLowering::allowsMisalignedMemoryAccesses().
name|bool
name|StrictAlign
operator|=
name|false
block|;
comment|/// RestrictIT - If true, the subtarget disallows generation of deprecated IT
comment|///  blocks to conform to ARMv8 rule.
name|bool
name|RestrictIT
operator|=
name|false
block|;
comment|/// HasDSP - If true, the subtarget supports the DSP (saturating arith
comment|/// and such) instructions.
name|bool
name|HasDSP
operator|=
name|false
block|;
comment|/// NaCl TRAP instruction is generated instead of the regular TRAP.
name|bool
name|UseNaClTrap
operator|=
name|false
block|;
comment|/// Generate calls via indirect call instructions.
name|bool
name|GenLongCalls
operator|=
name|false
block|;
comment|/// Generate code that does not contain data access to code sections.
name|bool
name|GenExecuteOnly
operator|=
name|false
block|;
comment|/// Target machine allowed unsafe FP math (such as use of NEON fp)
name|bool
name|UnsafeFPMath
operator|=
name|false
block|;
comment|/// UseSjLjEH - If true, the target uses SjLj exception handling (e.g. iOS).
name|bool
name|UseSjLjEH
operator|=
name|false
block|;
comment|/// Implicitly convert an instruction to a different one if its immediates
comment|/// cannot be encoded. For example, ADD r0, r1, #FFFFFFFF -> SUB r0, r1, #1.
name|bool
name|NegativeImmediates
operator|=
name|true
block|;
comment|/// stackAlignment - The minimum alignment known to hold of the stack frame on
comment|/// entry to the function and which must be maintained by every function.
name|unsigned
name|stackAlignment
operator|=
literal|4
block|;
comment|/// CPUString - String name of used CPU.
name|std
operator|::
name|string
name|CPUString
block|;
name|unsigned
name|MaxInterleaveFactor
operator|=
literal|1
block|;
comment|/// Clearance before partial register updates (in number of instructions)
name|unsigned
name|PartialUpdateClearance
operator|=
literal|0
block|;
comment|/// What kind of timing do load multiple/store multiple have (double issue,
comment|/// single issue etc).
name|ARMLdStMultipleTiming
name|LdStMultipleTiming
operator|=
name|SingleIssue
block|;
comment|/// The adjustment that we need to apply to get the operand latency from the
comment|/// operand cycle returned by the itinerary data for pre-ISel operands.
name|int
name|PreISelOperandLatencyAdjustment
operator|=
literal|2
block|;
comment|/// IsLittle - The target is Little Endian
name|bool
name|IsLittle
block|;
comment|/// TargetTriple - What processor and OS we're targeting.
name|Triple
name|TargetTriple
block|;
comment|/// SchedModel - Processor specific instruction costs.
name|MCSchedModel
name|SchedModel
block|;
comment|/// Selected instruction itineraries (one entry per itinerary class.)
name|InstrItineraryData
name|InstrItins
block|;
comment|/// Options passed via command line that could influence the target
specifier|const
name|TargetOptions
operator|&
name|Options
block|;
specifier|const
name|ARMBaseTargetMachine
operator|&
name|TM
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
comment|///
name|ARMSubtarget
argument_list|(
argument|const Triple&TT
argument_list|,
argument|const std::string&CPU
argument_list|,
argument|const std::string&FS
argument_list|,
argument|const ARMBaseTargetMachine&TM
argument_list|,
argument|bool IsLittle
argument_list|)
block|;
comment|/// This object will take onwership of \p GISelAccessor.
name|void
name|setGISelAccessor
argument_list|(
argument|GISelAccessor&GISel
argument_list|)
block|{
name|this
operator|->
name|GISel
operator|.
name|reset
argument_list|(
operator|&
name|GISel
argument_list|)
block|; }
comment|/// getMaxInlineSizeThreshold - Returns the maximum memset / memcpy size
comment|/// that still makes it profitable to inline the call.
name|unsigned
name|getMaxInlineSizeThreshold
argument_list|()
specifier|const
block|{
return|return
literal|64
return|;
block|}
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
comment|/// initializeSubtargetDependencies - Initializes using a CPU and feature string
comment|/// so that we can use initializer lists for subtarget initialization.
name|ARMSubtarget
operator|&
name|initializeSubtargetDependencies
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
specifier|const
name|ARMSelectionDAGInfo
operator|*
name|getSelectionDAGInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TSInfo
return|;
block|}
specifier|const
name|ARMBaseInstrInfo
operator|*
name|getInstrInfo
argument_list|()
specifier|const
name|override
block|{
return|return
name|InstrInfo
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|ARMTargetLowering
operator|*
name|getTargetLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TLInfo
return|;
block|}
specifier|const
name|ARMFrameLowering
operator|*
name|getFrameLowering
argument_list|()
specifier|const
name|override
block|{
return|return
name|FrameLowering
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|ARMBaseRegisterInfo
operator|*
name|getRegisterInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
operator|->
name|getRegisterInfo
argument_list|()
return|;
block|}
specifier|const
name|CallLowering
operator|*
name|getCallLowering
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|InstructionSelector
operator|*
name|getInstructionSelector
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|LegalizerInfo
operator|*
name|getLegalizerInfo
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|RegisterBankInfo
operator|*
name|getRegBankInfo
argument_list|()
specifier|const
name|override
block|;
name|private
operator|:
name|ARMSelectionDAGInfo
name|TSInfo
block|;
comment|// Either Thumb1FrameLowering or ARMFrameLowering.
name|std
operator|::
name|unique_ptr
operator|<
name|ARMFrameLowering
operator|>
name|FrameLowering
block|;
comment|// Either Thumb1InstrInfo or Thumb2InstrInfo.
name|std
operator|::
name|unique_ptr
operator|<
name|ARMBaseInstrInfo
operator|>
name|InstrInfo
block|;
name|ARMTargetLowering
name|TLInfo
block|;
comment|/// Gather the accessor points to GlobalISel-related APIs.
comment|/// This is used to avoid ifndefs spreading around while GISel is
comment|/// an optional library.
name|std
operator|::
name|unique_ptr
operator|<
name|GISelAccessor
operator|>
name|GISel
block|;
name|void
name|initializeEnvironment
argument_list|()
block|;
name|void
name|initSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|ARMFrameLowering
operator|*
name|initializeFrameLowering
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|public
operator|:
name|void
name|computeIssueWidth
argument_list|()
block|;
name|bool
name|hasV4TOps
argument_list|()
specifier|const
block|{
return|return
name|HasV4TOps
return|;
block|}
name|bool
name|hasV5TOps
argument_list|()
specifier|const
block|{
return|return
name|HasV5TOps
return|;
block|}
name|bool
name|hasV5TEOps
argument_list|()
specifier|const
block|{
return|return
name|HasV5TEOps
return|;
block|}
name|bool
name|hasV6Ops
argument_list|()
specifier|const
block|{
return|return
name|HasV6Ops
return|;
block|}
name|bool
name|hasV6MOps
argument_list|()
specifier|const
block|{
return|return
name|HasV6MOps
return|;
block|}
name|bool
name|hasV6KOps
argument_list|()
specifier|const
block|{
return|return
name|HasV6KOps
return|;
block|}
name|bool
name|hasV6T2Ops
argument_list|()
specifier|const
block|{
return|return
name|HasV6T2Ops
return|;
block|}
name|bool
name|hasV7Ops
argument_list|()
specifier|const
block|{
return|return
name|HasV7Ops
return|;
block|}
name|bool
name|hasV8Ops
argument_list|()
specifier|const
block|{
return|return
name|HasV8Ops
return|;
block|}
name|bool
name|hasV8_1aOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8_1aOps
return|;
block|}
name|bool
name|hasV8_2aOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8_2aOps
return|;
block|}
name|bool
name|hasV8MBaselineOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8MBaselineOps
return|;
block|}
name|bool
name|hasV8MMainlineOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8MMainlineOps
return|;
block|}
comment|/// @{
comment|/// These functions are obsolete, please consider adding subtarget features
comment|/// or properties instead of calling them.
name|bool
name|isCortexA5
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexA5
return|;
block|}
name|bool
name|isCortexA7
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexA7
return|;
block|}
name|bool
name|isCortexA8
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexA8
return|;
block|}
name|bool
name|isCortexA9
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexA9
return|;
block|}
name|bool
name|isCortexA15
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexA15
return|;
block|}
name|bool
name|isSwift
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|Swift
return|;
block|}
name|bool
name|isCortexM3
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexM3
return|;
block|}
name|bool
name|isLikeA9
argument_list|()
specifier|const
block|{
return|return
name|isCortexA9
argument_list|()
operator|||
name|isCortexA15
argument_list|()
operator|||
name|isKrait
argument_list|()
return|;
block|}
name|bool
name|isCortexR5
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|CortexR5
return|;
block|}
name|bool
name|isKrait
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
operator|==
name|Krait
return|;
block|}
comment|/// @}
name|bool
name|hasARMOps
argument_list|()
specifier|const
block|{
return|return
operator|!
name|NoARM
return|;
block|}
name|bool
name|hasVFP2
argument_list|()
specifier|const
block|{
return|return
name|HasVFPv2
return|;
block|}
name|bool
name|hasVFP3
argument_list|()
specifier|const
block|{
return|return
name|HasVFPv3
return|;
block|}
name|bool
name|hasVFP4
argument_list|()
specifier|const
block|{
return|return
name|HasVFPv4
return|;
block|}
name|bool
name|hasFPARMv8
argument_list|()
specifier|const
block|{
return|return
name|HasFPARMv8
return|;
block|}
name|bool
name|hasNEON
argument_list|()
specifier|const
block|{
return|return
name|HasNEON
return|;
block|}
name|bool
name|hasCrypto
argument_list|()
specifier|const
block|{
return|return
name|HasCrypto
return|;
block|}
name|bool
name|hasCRC
argument_list|()
specifier|const
block|{
return|return
name|HasCRC
return|;
block|}
name|bool
name|hasRAS
argument_list|()
specifier|const
block|{
return|return
name|HasRAS
return|;
block|}
name|bool
name|hasVirtualization
argument_list|()
specifier|const
block|{
return|return
name|HasVirtualization
return|;
block|}
name|bool
name|useNEONForSinglePrecisionFP
argument_list|()
specifier|const
block|{
return|return
name|hasNEON
argument_list|()
operator|&&
name|UseNEONForSinglePrecisionFP
return|;
block|}
name|bool
name|hasDivideInThumbMode
argument_list|()
specifier|const
block|{
return|return
name|HasHardwareDivideInThumb
return|;
block|}
name|bool
name|hasDivideInARMMode
argument_list|()
specifier|const
block|{
return|return
name|HasHardwareDivideInARM
return|;
block|}
name|bool
name|hasDataBarrier
argument_list|()
specifier|const
block|{
return|return
name|HasDataBarrier
return|;
block|}
name|bool
name|hasV7Clrex
argument_list|()
specifier|const
block|{
return|return
name|HasV7Clrex
return|;
block|}
name|bool
name|hasAcquireRelease
argument_list|()
specifier|const
block|{
return|return
name|HasAcquireRelease
return|;
block|}
name|bool
name|hasAnyDataBarrier
argument_list|()
specifier|const
block|{
return|return
name|HasDataBarrier
operator|||
operator|(
name|hasV6Ops
argument_list|()
operator|&&
operator|!
name|isThumb
argument_list|()
operator|)
return|;
block|}
name|bool
name|useMulOps
argument_list|()
specifier|const
block|{
return|return
name|UseMulOps
return|;
block|}
name|bool
name|useFPVMLx
argument_list|()
specifier|const
block|{
return|return
operator|!
name|SlowFPVMLx
return|;
block|}
name|bool
name|hasVMLxForwarding
argument_list|()
specifier|const
block|{
return|return
name|HasVMLxForwarding
return|;
block|}
name|bool
name|isFPBrccSlow
argument_list|()
specifier|const
block|{
return|return
name|SlowFPBrcc
return|;
block|}
name|bool
name|isFPOnlySP
argument_list|()
specifier|const
block|{
return|return
name|FPOnlySP
return|;
block|}
name|bool
name|hasPerfMon
argument_list|()
specifier|const
block|{
return|return
name|HasPerfMon
return|;
block|}
name|bool
name|hasTrustZone
argument_list|()
specifier|const
block|{
return|return
name|HasTrustZone
return|;
block|}
name|bool
name|has8MSecExt
argument_list|()
specifier|const
block|{
return|return
name|Has8MSecExt
return|;
block|}
name|bool
name|hasZeroCycleZeroing
argument_list|()
specifier|const
block|{
return|return
name|HasZeroCycleZeroing
return|;
block|}
name|bool
name|hasFPAO
argument_list|()
specifier|const
block|{
return|return
name|HasFPAO
return|;
block|}
name|bool
name|isProfitableToUnpredicate
argument_list|()
specifier|const
block|{
return|return
name|IsProfitableToUnpredicate
return|;
block|}
name|bool
name|hasSlowVGETLNi32
argument_list|()
specifier|const
block|{
return|return
name|HasSlowVGETLNi32
return|;
block|}
name|bool
name|hasSlowVDUP32
argument_list|()
specifier|const
block|{
return|return
name|HasSlowVDUP32
return|;
block|}
name|bool
name|preferVMOVSR
argument_list|()
specifier|const
block|{
return|return
name|PreferVMOVSR
return|;
block|}
name|bool
name|preferISHSTBarriers
argument_list|()
specifier|const
block|{
return|return
name|PreferISHST
return|;
block|}
name|bool
name|expandMLx
argument_list|()
specifier|const
block|{
return|return
name|ExpandMLx
return|;
block|}
name|bool
name|hasVMLxHazards
argument_list|()
specifier|const
block|{
return|return
name|HasVMLxHazards
return|;
block|}
name|bool
name|hasSlowOddRegister
argument_list|()
specifier|const
block|{
return|return
name|SlowOddRegister
return|;
block|}
name|bool
name|hasSlowLoadDSubregister
argument_list|()
specifier|const
block|{
return|return
name|SlowLoadDSubregister
return|;
block|}
name|bool
name|hasMuxedUnits
argument_list|()
specifier|const
block|{
return|return
name|HasMuxedUnits
return|;
block|}
name|bool
name|dontWidenVMOVS
argument_list|()
specifier|const
block|{
return|return
name|DontWidenVMOVS
return|;
block|}
name|bool
name|useNEONForFPMovs
argument_list|()
specifier|const
block|{
return|return
name|UseNEONForFPMovs
return|;
block|}
name|bool
name|checkVLDnAccessAlignment
argument_list|()
specifier|const
block|{
return|return
name|CheckVLDnAlign
return|;
block|}
name|bool
name|nonpipelinedVFP
argument_list|()
specifier|const
block|{
return|return
name|NonpipelinedVFP
return|;
block|}
name|bool
name|prefers32BitThumb
argument_list|()
specifier|const
block|{
return|return
name|Pref32BitThumb
return|;
block|}
name|bool
name|avoidCPSRPartialUpdate
argument_list|()
specifier|const
block|{
return|return
name|AvoidCPSRPartialUpdate
return|;
block|}
name|bool
name|avoidMOVsShifterOperand
argument_list|()
specifier|const
block|{
return|return
name|AvoidMOVsShifterOperand
return|;
block|}
name|bool
name|hasRetAddrStack
argument_list|()
specifier|const
block|{
return|return
name|HasRetAddrStack
return|;
block|}
name|bool
name|hasMPExtension
argument_list|()
specifier|const
block|{
return|return
name|HasMPExtension
return|;
block|}
name|bool
name|hasDSP
argument_list|()
specifier|const
block|{
return|return
name|HasDSP
return|;
block|}
name|bool
name|useNaClTrap
argument_list|()
specifier|const
block|{
return|return
name|UseNaClTrap
return|;
block|}
name|bool
name|useSjLjEH
argument_list|()
specifier|const
block|{
return|return
name|UseSjLjEH
return|;
block|}
name|bool
name|genLongCalls
argument_list|()
specifier|const
block|{
return|return
name|GenLongCalls
return|;
block|}
name|bool
name|genExecuteOnly
argument_list|()
specifier|const
block|{
return|return
name|GenExecuteOnly
return|;
block|}
name|bool
name|hasFP16
argument_list|()
specifier|const
block|{
return|return
name|HasFP16
return|;
block|}
name|bool
name|hasD16
argument_list|()
specifier|const
block|{
return|return
name|HasD16
return|;
block|}
name|bool
name|hasFullFP16
argument_list|()
specifier|const
block|{
return|return
name|HasFullFP16
return|;
block|}
specifier|const
name|Triple
operator|&
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
return|;
block|}
name|bool
name|isTargetDarwin
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSDarwin
argument_list|()
return|;
block|}
name|bool
name|isTargetIOS
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isiOS
argument_list|()
return|;
block|}
name|bool
name|isTargetWatchOS
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isWatchOS
argument_list|()
return|;
block|}
name|bool
name|isTargetWatchABI
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isWatchABI
argument_list|()
return|;
block|}
name|bool
name|isTargetLinux
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSLinux
argument_list|()
return|;
block|}
name|bool
name|isTargetNaCl
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSNaCl
argument_list|()
return|;
block|}
name|bool
name|isTargetNetBSD
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSNetBSD
argument_list|()
return|;
block|}
name|bool
name|isTargetWindows
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSWindows
argument_list|()
return|;
block|}
name|bool
name|isTargetCOFF
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatCOFF
argument_list|()
return|;
block|}
name|bool
name|isTargetELF
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatELF
argument_list|()
return|;
block|}
name|bool
name|isTargetMachO
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatMachO
argument_list|()
return|;
block|}
comment|// ARM EABI is the bare-metal EABI described in ARM ABI documents and
comment|// can be accessed via -target arm-none-eabi. This is NOT GNUEABI.
comment|// FIXME: Add a flag for bare-metal for that target and set Triple::EABI
comment|// even for GNUEABI, so we can make a distinction here and still conform to
comment|// the EABI on GNU (and Android) mode. This requires change in Clang, too.
comment|// FIXME: The Darwin exception is temporary, while we move users to
comment|// "*-*-*-macho" triples as quickly as possible.
name|bool
name|isTargetAEABI
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|EABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|EABIHF
operator|)
operator|&&
operator|!
name|isTargetDarwin
argument_list|()
operator|&&
operator|!
name|isTargetWindows
argument_list|()
return|;
block|}
name|bool
name|isTargetGNUAEABI
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|GNUEABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|GNUEABIHF
operator|)
operator|&&
operator|!
name|isTargetDarwin
argument_list|()
operator|&&
operator|!
name|isTargetWindows
argument_list|()
return|;
block|}
name|bool
name|isTargetMuslAEABI
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|MuslEABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|MuslEABIHF
operator|)
operator|&&
operator|!
name|isTargetDarwin
argument_list|()
operator|&&
operator|!
name|isTargetWindows
argument_list|()
return|;
block|}
comment|// ARM Targets that support EHABI exception handling standard
comment|// Darwin uses SjLj. Other targets might need more checks.
name|bool
name|isTargetEHABICompatible
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|EABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|GNUEABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|MuslEABI
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|EABIHF
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|GNUEABIHF
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|MuslEABIHF
operator|||
name|isTargetAndroid
argument_list|()
operator|)
operator|&&
operator|!
name|isTargetDarwin
argument_list|()
operator|&&
operator|!
name|isTargetWindows
argument_list|()
return|;
block|}
name|bool
name|isTargetHardFloat
argument_list|()
specifier|const
block|{
comment|// FIXME: this is invalid for WindowsCE
return|return
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|GNUEABIHF
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|MuslEABIHF
operator|||
name|TargetTriple
operator|.
name|getEnvironment
argument_list|()
operator|==
name|Triple
operator|::
name|EABIHF
operator|||
name|isTargetWindows
argument_list|()
operator|||
name|isAAPCS16_ABI
argument_list|()
return|;
block|}
name|bool
name|isTargetAndroid
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isAndroid
argument_list|()
return|;
block|}
name|bool
name|isXRaySupported
argument_list|()
specifier|const
name|override
block|;
name|bool
name|isAPCS_ABI
argument_list|()
specifier|const
block|;
name|bool
name|isAAPCS_ABI
argument_list|()
specifier|const
block|;
name|bool
name|isAAPCS16_ABI
argument_list|()
specifier|const
block|;
name|bool
name|isROPI
argument_list|()
specifier|const
block|;
name|bool
name|isRWPI
argument_list|()
specifier|const
block|;
name|bool
name|useSoftFloat
argument_list|()
specifier|const
block|{
return|return
name|UseSoftFloat
return|;
block|}
name|bool
name|isThumb
argument_list|()
specifier|const
block|{
return|return
name|InThumbMode
return|;
block|}
name|bool
name|isThumb1Only
argument_list|()
specifier|const
block|{
return|return
name|InThumbMode
operator|&&
operator|!
name|HasThumb2
return|;
block|}
name|bool
name|isThumb2
argument_list|()
specifier|const
block|{
return|return
name|InThumbMode
operator|&&
name|HasThumb2
return|;
block|}
name|bool
name|hasThumb2
argument_list|()
specifier|const
block|{
return|return
name|HasThumb2
return|;
block|}
name|bool
name|isMClass
argument_list|()
specifier|const
block|{
return|return
name|ARMProcClass
operator|==
name|MClass
return|;
block|}
name|bool
name|isRClass
argument_list|()
specifier|const
block|{
return|return
name|ARMProcClass
operator|==
name|RClass
return|;
block|}
name|bool
name|isAClass
argument_list|()
specifier|const
block|{
return|return
name|ARMProcClass
operator|==
name|AClass
return|;
block|}
name|bool
name|isR9Reserved
argument_list|()
specifier|const
block|{
return|return
name|isTargetMachO
argument_list|()
operator|?
operator|(
name|ReserveR9
operator|||
operator|!
name|HasV6Ops
operator|)
operator|:
name|ReserveR9
return|;
block|}
name|bool
name|useR7AsFramePointer
argument_list|()
specifier|const
block|{
return|return
name|isTargetDarwin
argument_list|()
operator|||
operator|(
operator|!
name|isTargetWindows
argument_list|()
operator|&&
name|isThumb
argument_list|()
operator|)
return|;
block|}
comment|/// Returns true if the frame setup is split into two separate pushes (first
comment|/// r0-r7,lr then r8-r11), principally so that the frame pointer is adjacent
comment|/// to lr. This is always required on Thumb1-only targets, as the push and
comment|/// pop instructions can't access the high registers.
name|bool
name|splitFramePushPop
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|{
return|return
operator|(
name|useR7AsFramePointer
argument_list|()
operator|&&
name|MF
operator|.
name|getTarget
argument_list|()
operator|.
name|Options
operator|.
name|DisableFramePointerElim
argument_list|(
name|MF
argument_list|)
operator|)
operator|||
name|isThumb1Only
argument_list|()
return|;
block|}
name|bool
name|useStride4VFPs
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|;
name|bool
name|useMovt
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|;
name|bool
name|supportsTailCall
argument_list|()
specifier|const
block|{
return|return
name|SupportsTailCall
return|;
block|}
name|bool
name|allowsUnalignedMem
argument_list|()
specifier|const
block|{
return|return
operator|!
name|StrictAlign
return|;
block|}
name|bool
name|restrictIT
argument_list|()
specifier|const
block|{
return|return
name|RestrictIT
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getCPUString
argument_list|()
specifier|const
block|{
return|return
name|CPUString
return|;
block|}
name|bool
name|isLittle
argument_list|()
specifier|const
block|{
return|return
name|IsLittle
return|;
block|}
name|unsigned
name|getMispredictionPenalty
argument_list|()
specifier|const
block|;
comment|/// This function returns true if the target has sincos() routine in its
comment|/// compiler runtime or math libraries.
name|bool
name|hasSinCos
argument_list|()
specifier|const
block|;
comment|/// Returns true if machine scheduler should be enabled.
name|bool
name|enableMachineScheduler
argument_list|()
specifier|const
name|override
block|;
comment|/// True for some subtargets at> -O0.
name|bool
name|enablePostRAScheduler
argument_list|()
specifier|const
name|override
block|;
comment|// enableAtomicExpand- True if we need to expand our atomics.
name|bool
name|enableAtomicExpand
argument_list|()
specifier|const
name|override
block|;
comment|/// getInstrItins - Return the instruction itineraries based on subtarget
comment|/// selection.
specifier|const
name|InstrItineraryData
operator|*
name|getInstrItineraryData
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrItins
return|;
block|}
comment|/// getStackAlignment - Returns the minimum alignment known to hold of the
comment|/// stack frame on entry to the function and which must be maintained by every
comment|/// function for this subtarget.
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
block|{
return|return
name|stackAlignment
return|;
block|}
name|unsigned
name|getMaxInterleaveFactor
argument_list|()
specifier|const
block|{
return|return
name|MaxInterleaveFactor
return|;
block|}
name|unsigned
name|getPartialUpdateClearance
argument_list|()
specifier|const
block|{
return|return
name|PartialUpdateClearance
return|;
block|}
name|ARMLdStMultipleTiming
name|getLdStMultipleTiming
argument_list|()
specifier|const
block|{
return|return
name|LdStMultipleTiming
return|;
block|}
name|int
name|getPreISelOperandLatencyAdjustment
argument_list|()
specifier|const
block|{
return|return
name|PreISelOperandLatencyAdjustment
return|;
block|}
comment|/// True if the GV will be accessed via an indirect symbol.
name|bool
name|isGVIndirectSymbol
argument_list|(
argument|const GlobalValue *GV
argument_list|)
specifier|const
block|;
comment|/// True if fast-isel is used.
name|bool
name|useFastISel
argument_list|()
specifier|const
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_ARM_ARMSUBTARGET_H
end_comment

end_unit

