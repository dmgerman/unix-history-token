begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARM.h - Top-level interface for ARM representation---- --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the entry points for global functions defined in the LLVM
end_comment

begin_comment
comment|// ARM back-end.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TARGET_ARM_H
end_ifndef

begin_define
define|#
directive|define
name|TARGET_ARM_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ARMBaseTargetMachine
decl_stmt|;
name|class
name|FunctionPass
decl_stmt|;
name|class
name|MachineCodeEmitter
decl_stmt|;
name|class
name|JITCodeEmitter
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|// Enums corresponding to ARM condition codes
name|namespace
name|ARMCC
block|{
comment|// The CondCodes constants map directly to the 4-bit encoding of the
comment|// condition field for predicated instructions.
enum|enum
name|CondCodes
block|{
name|EQ
block|,
name|NE
block|,
name|HS
block|,
name|LO
block|,
name|MI
block|,
name|PL
block|,
name|VS
block|,
name|VC
block|,
name|HI
block|,
name|LS
block|,
name|GE
block|,
name|LT
block|,
name|GT
block|,
name|LE
block|,
name|AL
block|}
enum|;
specifier|inline
specifier|static
name|CondCodes
name|getOppositeCondition
parameter_list|(
name|CondCodes
name|CC
parameter_list|)
block|{
switch|switch
condition|(
name|CC
condition|)
block|{
default|default:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|EQ
case|:
return|return
name|NE
return|;
case|case
name|NE
case|:
return|return
name|EQ
return|;
case|case
name|HS
case|:
return|return
name|LO
return|;
case|case
name|LO
case|:
return|return
name|HS
return|;
case|case
name|MI
case|:
return|return
name|PL
return|;
case|case
name|PL
case|:
return|return
name|MI
return|;
case|case
name|VS
case|:
return|return
name|VC
return|;
case|case
name|VC
case|:
return|return
name|VS
return|;
case|case
name|HI
case|:
return|return
name|LS
return|;
case|case
name|LS
case|:
return|return
name|HI
return|;
case|case
name|GE
case|:
return|return
name|LT
return|;
case|case
name|LT
case|:
return|return
name|GE
return|;
case|case
name|GT
case|:
return|return
name|LE
return|;
case|case
name|LE
case|:
return|return
name|GT
return|;
block|}
block|}
block|}
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|ARMCondCodeToString
argument_list|(
name|ARMCC
operator|::
name|CondCodes
name|CC
argument_list|)
block|{
switch|switch
condition|(
name|CC
condition|)
block|{
default|default:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|ARMCC
operator|::
name|EQ
case|:
return|return
literal|"eq"
return|;
case|case
name|ARMCC
operator|::
name|NE
case|:
return|return
literal|"ne"
return|;
case|case
name|ARMCC
operator|::
name|HS
case|:
return|return
literal|"hs"
return|;
case|case
name|ARMCC
operator|::
name|LO
case|:
return|return
literal|"lo"
return|;
case|case
name|ARMCC
operator|::
name|MI
case|:
return|return
literal|"mi"
return|;
case|case
name|ARMCC
operator|::
name|PL
case|:
return|return
literal|"pl"
return|;
case|case
name|ARMCC
operator|::
name|VS
case|:
return|return
literal|"vs"
return|;
case|case
name|ARMCC
operator|::
name|VC
case|:
return|return
literal|"vc"
return|;
case|case
name|ARMCC
operator|::
name|HI
case|:
return|return
literal|"hi"
return|;
case|case
name|ARMCC
operator|::
name|LS
case|:
return|return
literal|"ls"
return|;
case|case
name|ARMCC
operator|::
name|GE
case|:
return|return
literal|"ge"
return|;
case|case
name|ARMCC
operator|::
name|LT
case|:
return|return
literal|"lt"
return|;
case|case
name|ARMCC
operator|::
name|GT
case|:
return|return
literal|"gt"
return|;
case|case
name|ARMCC
operator|::
name|LE
case|:
return|return
literal|"le"
return|;
case|case
name|ARMCC
operator|::
name|AL
case|:
return|return
literal|"al"
return|;
block|}
block|}
name|FunctionPass
modifier|*
name|createARMISelDag
parameter_list|(
name|ARMBaseTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMCodePrinterPass
parameter_list|(
name|raw_ostream
modifier|&
name|O
parameter_list|,
name|ARMBaseTargetMachine
modifier|&
name|TM
parameter_list|,
name|bool
name|Verbose
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMCodeEmitterPass
parameter_list|(
name|ARMBaseTargetMachine
modifier|&
name|TM
parameter_list|,
name|MachineCodeEmitter
modifier|&
name|MCE
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMCodeEmitterPass
parameter_list|(
name|ARMBaseTargetMachine
modifier|&
name|TM
parameter_list|,
name|MachineCodeEmitter
modifier|&
name|MCE
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMJITCodeEmitterPass
parameter_list|(
name|ARMBaseTargetMachine
modifier|&
name|TM
parameter_list|,
name|JITCodeEmitter
modifier|&
name|JCE
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMLoadStoreOptimizationPass
parameter_list|(
name|bool
name|PreAlloc
init|=
name|false
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createARMConstantIslandPass
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm;
end_comment

begin_comment
comment|// Defines symbolic names for ARM registers.  This defines a mapping from
end_comment

begin_comment
comment|// register name to register number.
end_comment

begin_comment
comment|//
end_comment

begin_include
include|#
directive|include
file|"ARMGenRegisterNames.inc"
end_include

begin_comment
comment|// Defines symbolic names for the ARM instructions.
end_comment

begin_comment
comment|//
end_comment

begin_include
include|#
directive|include
file|"ARMGenInstrNames.inc"
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

