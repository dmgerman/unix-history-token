begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LanaiAluCode.h - ALU operator encoding ----------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The encoding for ALU operators used in RM and RRM operands
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_LANAI_LANAIALUCODE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_LANAI_LANAIALUCODE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/ISDOpcodes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|LPAC
block|{
enum|enum
name|AluCode
block|{
name|ADD
init|=
literal|0x00
block|,
name|ADDC
init|=
literal|0x01
block|,
name|SUB
init|=
literal|0x02
block|,
name|SUBB
init|=
literal|0x03
block|,
name|AND
init|=
literal|0x04
block|,
name|OR
init|=
literal|0x05
block|,
name|XOR
init|=
literal|0x06
block|,
name|SPECIAL
init|=
literal|0x07
block|,
comment|// Shift instructions are treated as SPECIAL when encoding the machine
comment|// instruction, but kept distinct until lowering. The constant values are
comment|// chosen to ease lowering.
name|SHL
init|=
literal|0x17
block|,
name|SRL
init|=
literal|0x27
block|,
name|SRA
init|=
literal|0x37
block|,
comment|// Indicates an unknown/unsupported operator
name|UNKNOWN
init|=
literal|0xFF
block|, }
enum|;
comment|// Bits indicating post- and pre-operators should be tested and set using Is*
comment|// and Make* utility functions
name|constexpr
name|int
name|Lanai_PRE_OP
init|=
literal|0x40
decl_stmt|;
name|constexpr
name|int
name|Lanai_POST_OP
init|=
literal|0x80
decl_stmt|;
specifier|inline
specifier|static
name|unsigned
name|encodeLanaiAluCode
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
name|unsigned
specifier|const
name|OP_ENCODING_MASK
init|=
literal|0x07
decl_stmt|;
return|return
name|AluOp
operator|&
name|OP_ENCODING_MASK
return|;
block|}
specifier|inline
specifier|static
name|unsigned
name|getAluOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
name|unsigned
specifier|const
name|ALU_MASK
init|=
literal|0x3F
decl_stmt|;
return|return
name|AluOp
operator|&
name|ALU_MASK
return|;
block|}
specifier|inline
specifier|static
name|bool
name|isPreOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
return|return
name|AluOp
operator|&
name|Lanai_PRE_OP
return|;
block|}
specifier|inline
specifier|static
name|bool
name|isPostOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
return|return
name|AluOp
operator|&
name|Lanai_POST_OP
return|;
block|}
specifier|inline
specifier|static
name|unsigned
name|makePreOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isPostOp
argument_list|(
name|AluOp
argument_list|)
operator|&&
literal|"Operator can't be a post- and pre-op"
argument_list|)
expr_stmt|;
return|return
name|AluOp
operator||
name|Lanai_PRE_OP
return|;
block|}
specifier|inline
specifier|static
name|unsigned
name|makePostOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isPreOp
argument_list|(
name|AluOp
argument_list|)
operator|&&
literal|"Operator can't be a post- and pre-op"
argument_list|)
expr_stmt|;
return|return
name|AluOp
operator||
name|Lanai_POST_OP
return|;
block|}
specifier|inline
specifier|static
name|bool
name|modifiesOp
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
return|return
name|isPreOp
argument_list|(
name|AluOp
argument_list|)
operator||
name|isPostOp
argument_list|(
name|AluOp
argument_list|)
return|;
block|}
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|lanaiAluCodeToString
parameter_list|(
name|unsigned
name|AluOp
parameter_list|)
block|{
switch|switch
condition|(
name|getAluOp
argument_list|(
name|AluOp
argument_list|)
condition|)
block|{
case|case
name|ADD
case|:
return|return
literal|"add"
return|;
case|case
name|ADDC
case|:
return|return
literal|"addc"
return|;
case|case
name|SUB
case|:
return|return
literal|"sub"
return|;
case|case
name|SUBB
case|:
return|return
literal|"subb"
return|;
case|case
name|AND
case|:
return|return
literal|"and"
return|;
case|case
name|OR
case|:
return|return
literal|"or"
return|;
case|case
name|XOR
case|:
return|return
literal|"xor"
return|;
case|case
name|SHL
case|:
return|return
literal|"sh"
return|;
case|case
name|SRL
case|:
return|return
literal|"sh"
return|;
case|case
name|SRA
case|:
return|return
literal|"sha"
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid ALU code."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
specifier|static
name|AluCode
name|stringToLanaiAluCode
parameter_list|(
name|StringRef
name|S
parameter_list|)
block|{
return|return
name|StringSwitch
operator|<
name|AluCode
operator|>
operator|(
name|S
operator|)
operator|.
name|Case
argument_list|(
literal|"add"
argument_list|,
name|ADD
argument_list|)
operator|.
name|Case
argument_list|(
literal|"addc"
argument_list|,
name|ADDC
argument_list|)
operator|.
name|Case
argument_list|(
literal|"sub"
argument_list|,
name|SUB
argument_list|)
operator|.
name|Case
argument_list|(
literal|"subb"
argument_list|,
name|SUBB
argument_list|)
operator|.
name|Case
argument_list|(
literal|"and"
argument_list|,
name|AND
argument_list|)
operator|.
name|Case
argument_list|(
literal|"or"
argument_list|,
name|OR
argument_list|)
operator|.
name|Case
argument_list|(
literal|"xor"
argument_list|,
name|XOR
argument_list|)
operator|.
name|Case
argument_list|(
literal|"sh"
argument_list|,
name|SHL
argument_list|)
operator|.
name|Case
argument_list|(
literal|"srl"
argument_list|,
name|SRL
argument_list|)
operator|.
name|Case
argument_list|(
literal|"sha"
argument_list|,
name|SRA
argument_list|)
operator|.
name|Default
argument_list|(
name|UNKNOWN
argument_list|)
return|;
block|}
specifier|inline
specifier|static
name|AluCode
name|isdToLanaiAluCode
argument_list|(
name|ISD
operator|::
name|NodeType
name|Node_type
argument_list|)
block|{
switch|switch
condition|(
name|Node_type
condition|)
block|{
case|case
name|ISD
operator|::
name|ADD
case|:
return|return
name|AluCode
operator|::
name|ADD
return|;
case|case
name|ISD
operator|::
name|ADDE
case|:
return|return
name|AluCode
operator|::
name|ADDC
return|;
case|case
name|ISD
operator|::
name|SUB
case|:
return|return
name|AluCode
operator|::
name|SUB
return|;
case|case
name|ISD
operator|::
name|SUBE
case|:
return|return
name|AluCode
operator|::
name|SUBB
return|;
case|case
name|ISD
operator|::
name|AND
case|:
return|return
name|AluCode
operator|::
name|AND
return|;
case|case
name|ISD
operator|::
name|OR
case|:
return|return
name|AluCode
operator|::
name|OR
return|;
case|case
name|ISD
operator|::
name|XOR
case|:
return|return
name|AluCode
operator|::
name|XOR
return|;
case|case
name|ISD
operator|::
name|SHL
case|:
return|return
name|AluCode
operator|::
name|SHL
return|;
case|case
name|ISD
operator|::
name|SRL
case|:
return|return
name|AluCode
operator|::
name|SRL
return|;
case|case
name|ISD
operator|::
name|SRA
case|:
return|return
name|AluCode
operator|::
name|SRA
return|;
default|default:
return|return
name|AluCode
operator|::
name|UNKNOWN
return|;
block|}
block|}
block|}
comment|// namespace LPAC
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_LANAI_LANAIALUCODE_H
end_comment

end_unit

