begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The encoding used for conditional codes used in BR instructions
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_LANAI_LANAICONDCODE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_LANAI_LANAICONDCODE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|LPCC
block|{
enum|enum
name|CondCode
block|{
name|ICC_T
init|=
literal|0
block|,
comment|//  true
name|ICC_F
init|=
literal|1
block|,
comment|//  false
name|ICC_HI
init|=
literal|2
block|,
comment|//  high
name|ICC_UGT
init|=
literal|2
block|,
comment|//  unsigned greater than
name|ICC_LS
init|=
literal|3
block|,
comment|//  low or same
name|ICC_ULE
init|=
literal|3
block|,
comment|//  unsigned less than or equal
name|ICC_CC
init|=
literal|4
block|,
comment|//  carry cleared
name|ICC_ULT
init|=
literal|4
block|,
comment|//  unsigned less than
name|ICC_CS
init|=
literal|5
block|,
comment|//  carry set
name|ICC_UGE
init|=
literal|5
block|,
comment|//  unsigned greater than or equal
name|ICC_NE
init|=
literal|6
block|,
comment|//  not equal
name|ICC_EQ
init|=
literal|7
block|,
comment|//  equal
name|ICC_VC
init|=
literal|8
block|,
comment|//  oVerflow cleared
name|ICC_VS
init|=
literal|9
block|,
comment|//  oVerflow set
name|ICC_PL
init|=
literal|10
block|,
comment|//  plus
name|ICC_MI
init|=
literal|11
block|,
comment|//  minus
name|ICC_GE
init|=
literal|12
block|,
comment|//  greater than or equal
name|ICC_LT
init|=
literal|13
block|,
comment|//  less than
name|ICC_GT
init|=
literal|14
block|,
comment|//  greater than
name|ICC_LE
init|=
literal|15
block|,
comment|//  less than or equal
name|UNKNOWN
block|}
enum|;
specifier|inline
specifier|static
name|StringRef
name|lanaiCondCodeToString
argument_list|(
name|LPCC
operator|::
name|CondCode
name|CC
argument_list|)
block|{
switch|switch
condition|(
name|CC
condition|)
block|{
case|case
name|LPCC
operator|::
name|ICC_T
case|:
return|return
literal|"t"
return|;
comment|// true
case|case
name|LPCC
operator|::
name|ICC_F
case|:
return|return
literal|"f"
return|;
comment|// false
case|case
name|LPCC
operator|::
name|ICC_NE
case|:
return|return
literal|"ne"
return|;
comment|// not equal
case|case
name|LPCC
operator|::
name|ICC_EQ
case|:
return|return
literal|"eq"
return|;
comment|// equal
case|case
name|LPCC
operator|::
name|ICC_VC
case|:
return|return
literal|"vc"
return|;
comment|// oVerflow cleared
case|case
name|LPCC
operator|::
name|ICC_VS
case|:
return|return
literal|"vs"
return|;
comment|// oVerflow set
case|case
name|LPCC
operator|::
name|ICC_PL
case|:
return|return
literal|"pl"
return|;
comment|// plus
case|case
name|LPCC
operator|::
name|ICC_MI
case|:
return|return
literal|"mi"
return|;
comment|// minus
case|case
name|LPCC
operator|::
name|ICC_GE
case|:
return|return
literal|"ge"
return|;
comment|// greater than or equal
case|case
name|LPCC
operator|::
name|ICC_LT
case|:
return|return
literal|"lt"
return|;
comment|// less than
case|case
name|LPCC
operator|::
name|ICC_GT
case|:
return|return
literal|"gt"
return|;
comment|// greater than
case|case
name|LPCC
operator|::
name|ICC_LE
case|:
return|return
literal|"le"
return|;
comment|// less than or equal
case|case
name|LPCC
operator|::
name|ICC_UGT
case|:
return|return
literal|"ugt"
return|;
comment|// high | unsigned greater than
case|case
name|LPCC
operator|::
name|ICC_ULE
case|:
return|return
literal|"ule"
return|;
comment|// low or same | unsigned less or equal
case|case
name|LPCC
operator|::
name|ICC_ULT
case|:
return|return
literal|"ult"
return|;
comment|// carry cleared | unsigned less than
case|case
name|LPCC
operator|::
name|ICC_UGE
case|:
return|return
literal|"uge"
return|;
comment|// carry set | unsigned than or equal
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid cond code"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
specifier|static
name|CondCode
name|suffixToLanaiCondCode
parameter_list|(
name|StringRef
name|S
parameter_list|)
block|{
return|return
name|StringSwitch
operator|<
name|CondCode
operator|>
operator|(
name|S
operator|)
operator|.
name|EndsWith
argument_list|(
literal|"f"
argument_list|,
name|LPCC
operator|::
name|ICC_F
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"hi"
argument_list|,
name|LPCC
operator|::
name|ICC_HI
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ugt"
argument_list|,
name|LPCC
operator|::
name|ICC_UGT
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ls"
argument_list|,
name|LPCC
operator|::
name|ICC_LS
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ule"
argument_list|,
name|LPCC
operator|::
name|ICC_ULE
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"cc"
argument_list|,
name|LPCC
operator|::
name|ICC_CC
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ult"
argument_list|,
name|LPCC
operator|::
name|ICC_ULT
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"cs"
argument_list|,
name|LPCC
operator|::
name|ICC_CS
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"uge"
argument_list|,
name|LPCC
operator|::
name|ICC_UGE
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ne"
argument_list|,
name|LPCC
operator|::
name|ICC_NE
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"eq"
argument_list|,
name|LPCC
operator|::
name|ICC_EQ
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"vc"
argument_list|,
name|LPCC
operator|::
name|ICC_VC
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"vs"
argument_list|,
name|LPCC
operator|::
name|ICC_VS
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"pl"
argument_list|,
name|LPCC
operator|::
name|ICC_PL
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"mi"
argument_list|,
name|LPCC
operator|::
name|ICC_MI
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"ge"
argument_list|,
name|LPCC
operator|::
name|ICC_GE
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"lt"
argument_list|,
name|LPCC
operator|::
name|ICC_LT
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"gt"
argument_list|,
name|LPCC
operator|::
name|ICC_GT
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"le"
argument_list|,
name|LPCC
operator|::
name|ICC_LE
argument_list|)
operator|.
name|EndsWith
argument_list|(
literal|"t"
argument_list|,
name|LPCC
operator|::
name|ICC_T
argument_list|)
comment|// Has to be after others with suffix t
operator|.
name|Default
argument_list|(
name|LPCC
operator|::
name|UNKNOWN
argument_list|)
return|;
block|}
block|}
comment|// namespace LPCC
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_LANAI_LANAICONDCODE_H
end_comment

end_unit

