begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- NVPTXSubtarget.h - Define Subtarget for the NVPTX ---*- C++ -*--====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the NVPTX specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_NVPTX_NVPTXSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_NVPTX_NVPTXSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSelectionDAGInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"NVPTXGenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|NVPTXSubtarget
range|:
name|public
name|NVPTXGenSubtargetInfo
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|std
operator|::
name|string
name|TargetName
block|;
comment|// PTX version x.y is represented as 10*x+y, e.g. 3.1 == 31
name|unsigned
name|PTXVersion
block|;
comment|// SM version x.y is represented as 10*x+y, e.g. 3.1 == 31
name|unsigned
name|int
name|SmVersion
block|;
specifier|const
name|NVPTXTargetMachine
operator|&
name|TM
block|;
name|NVPTXInstrInfo
name|InstrInfo
block|;
name|NVPTXTargetLowering
name|TLInfo
block|;
name|TargetSelectionDAGInfo
name|TSInfo
block|;
comment|// NVPTX does not have any call stack frame, but need a NVPTX specific
comment|// FrameLowering class because TargetFrameLowering is abstract.
name|NVPTXFrameLowering
name|FrameLowering
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified module.
comment|///
name|NVPTXSubtarget
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|TT
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|,
specifier|const
name|NVPTXTargetMachine
operator|&
name|TM
argument_list|)
block|;
specifier|const
name|TargetFrameLowering
operator|*
name|getFrameLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|FrameLowering
return|;
block|}
specifier|const
name|NVPTXInstrInfo
operator|*
name|getInstrInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
return|;
block|}
specifier|const
name|NVPTXRegisterInfo
operator|*
name|getRegisterInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
operator|.
name|getRegisterInfo
argument_list|()
return|;
block|}
specifier|const
name|NVPTXTargetLowering
operator|*
name|getTargetLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TLInfo
return|;
block|}
specifier|const
name|TargetSelectionDAGInfo
operator|*
name|getSelectionDAGInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TSInfo
return|;
block|}
name|bool
name|hasBrkPt
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|11
return|;
block|}
name|bool
name|hasAtomRedG32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|11
return|;
block|}
name|bool
name|hasAtomRedS32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasAtomRedG64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasAtomRedS64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomRedGen32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomRedGen64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomAddF32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasVote
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasDouble
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|13
return|;
block|}
name|bool
name|reqPTX20
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasF32FTZ
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasFMAF32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasFMAF64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|13
return|;
block|}
name|bool
name|hasLDG
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|32
return|;
block|}
name|bool
name|hasLDU
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|SmVersion
operator|>=
literal|20
operator|)
operator|&&
operator|(
name|SmVersion
operator|<
literal|30
operator|)
operator|)
return|;
block|}
name|bool
name|hasGenericLdSt
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
specifier|inline
name|bool
name|hasHWROT32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|32
return|;
block|}
specifier|inline
name|bool
name|hasSWROT32
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|SmVersion
operator|>=
literal|20
operator|)
operator|&&
operator|(
name|SmVersion
operator|<
literal|32
operator|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|hasROT32
argument_list|()
specifier|const
block|{
return|return
name|hasHWROT32
argument_list|()
operator|||
name|hasSWROT32
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|hasROT64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasImageHandles
argument_list|()
specifier|const
block|;
name|unsigned
name|int
name|getSmVersion
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
return|;
block|}
name|std
operator|::
name|string
name|getTargetName
argument_list|()
specifier|const
block|{
return|return
name|TargetName
return|;
block|}
name|unsigned
name|getPTXVersion
argument_list|()
specifier|const
block|{
return|return
name|PTXVersion
return|;
block|}
name|NVPTXSubtarget
operator|&
name|initializeSubtargetDependencies
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

