begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- NVPTXISelDAGToDAG.h - A dag to dag inst selector for NVPTX --------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines an instruction selector for the NVPTX target.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"nvptx-isel"
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAGISel.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Intrinsics.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|using
name|namespace
name|llvm
decl_stmt|;
end_decl_stmt

begin_macro
name|namespace
end_macro

begin_block
block|{
name|class
name|LLVM_LIBRARY_VISIBILITY
name|NVPTXDAGToDAGISel
range|:
name|public
name|SelectionDAGISel
block|{
comment|// If true, generate corresponding FPCONTRACT. This is
comment|// language dependent (i.e. CUDA and OpenCL works differently).
name|bool
name|doFMADF32
block|;
name|bool
name|doFMAF64
block|;
name|bool
name|doFMAF32
block|;
name|bool
name|doFMAF64AGG
block|;
name|bool
name|doFMAF32AGG
block|;
name|bool
name|allowFMA
block|;
comment|// 0: use div.approx
comment|// 1: use div.full
comment|// 2: For sm_20 and later, ieee-compliant div.rnd.f32 can be generated;
comment|//    Otherwise, use div.full
name|int
name|do_DIVF32_PREC
block|;
comment|// If true, add .ftz to f32 instructions.
comment|// This is only meaningful for sm_20 and later, as the default
comment|// is not ftz.
comment|// For sm earlier than sm_20, f32 denorms are always ftz by the
comment|// hardware.
comment|// We always add the .ftz modifier regardless of the sm value
comment|// when Use32FTZ is true.
name|bool
name|UseF32FTZ
block|;
comment|// If true, generate mul.wide from sext and mul
name|bool
name|doMulWide
block|;
name|public
operator|:
name|explicit
name|NVPTXDAGToDAGISel
argument_list|(
argument|NVPTXTargetMachine&tm
argument_list|,
argument|CodeGenOpt::Level OptLevel
argument_list|)
block|;
comment|// Pass Name
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"NVPTX DAG->DAG Pattern Instruction Selection"
return|;
block|}
specifier|const
name|NVPTXSubtarget
operator|&
name|Subtarget
block|;
name|virtual
name|bool
name|SelectInlineAsmMemoryOperand
argument_list|(
argument|const SDValue&Op
argument_list|,
argument|char ConstraintCode
argument_list|,
argument|std::vector<SDValue>&OutOps
argument_list|)
block|;
name|private
operator|:
comment|// Include the pieces autogenerated from the target description.
include|#
directive|include
file|"NVPTXGenDAGISel.inc"
name|SDNode
operator|*
name|Select
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|SDNode
operator|*
name|SelectLoad
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|SDNode
operator|*
name|SelectLoadVector
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|SDNode
operator|*
name|SelectLDGLDUVector
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|SDNode
operator|*
name|SelectStore
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|SDNode
operator|*
name|SelectStoreVector
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
specifier|inline
name|SDValue
name|getI32Imm
argument_list|(
argument|unsigned Imm
argument_list|)
block|{
return|return
name|CurDAG
operator|->
name|getTargetConstant
argument_list|(
name|Imm
argument_list|,
name|MVT
operator|::
name|i32
argument_list|)
return|;
block|}
comment|// Match direct address complex pattern.
name|bool
name|SelectDirectAddr
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Address
argument_list|)
block|;
name|bool
name|SelectADDRri_imp
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|,
argument|MVT mvt
argument_list|)
block|;
name|bool
name|SelectADDRri
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRri64
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRsi_imp
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|,
argument|MVT mvt
argument_list|)
block|;
name|bool
name|SelectADDRsi
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRsi64
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|ChkMemSDNodeAddressSpace
argument_list|(
argument|SDNode *N
argument_list|,
argument|unsigned int spN
argument_list|)
specifier|const
block|;
name|bool
name|UndefOrImm
argument_list|(
argument|SDValue Op
argument_list|,
argument|SDValue N
argument_list|,
argument|SDValue&Retval
argument_list|)
block|;  }
decl_stmt|;
block|}
end_block

end_unit

