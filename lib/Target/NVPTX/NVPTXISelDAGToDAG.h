begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- NVPTXISelDAGToDAG.h - A dag to dag inst selector for NVPTX --------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines an instruction selector for the NVPTX target.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_NVPTX_NVPTXISELDAGTODAG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_NVPTX_NVPTXISELDAGTODAG_H
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAGISel.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Intrinsics.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LLVM_LIBRARY_VISIBILITY
name|NVPTXDAGToDAGISel
range|:
name|public
name|SelectionDAGISel
block|{
specifier|const
name|NVPTXTargetMachine
operator|&
name|TM
block|;
comment|// If true, generate mul.wide from sext and mul
name|bool
name|doMulWide
block|;
name|int
name|getDivF32Level
argument_list|()
specifier|const
block|;
name|bool
name|usePrecSqrtF32
argument_list|()
specifier|const
block|;
name|bool
name|useF32FTZ
argument_list|()
specifier|const
block|;
name|bool
name|allowFMA
argument_list|()
specifier|const
block|;
name|public
operator|:
name|explicit
name|NVPTXDAGToDAGISel
argument_list|(
argument|NVPTXTargetMachine&tm
argument_list|,
argument|CodeGenOpt::Level   OptLevel
argument_list|)
block|;
comment|// Pass Name
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"NVPTX DAG->DAG Pattern Instruction Selection"
return|;
block|}
name|bool
name|runOnMachineFunction
argument_list|(
argument|MachineFunction&MF
argument_list|)
name|override
block|;
specifier|const
name|NVPTXSubtarget
operator|*
name|Subtarget
block|;
name|bool
name|SelectInlineAsmMemoryOperand
argument_list|(
argument|const SDValue&Op
argument_list|,
argument|unsigned ConstraintID
argument_list|,
argument|std::vector<SDValue>&OutOps
argument_list|)
name|override
block|;
name|private
operator|:
comment|// Include the pieces autogenerated from the target description.
include|#
directive|include
file|"NVPTXGenDAGISel.inc"
name|void
name|Select
argument_list|(
argument|SDNode *N
argument_list|)
name|override
block|;
name|bool
name|tryIntrinsicNoChain
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryIntrinsicChain
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|void
name|SelectTexSurfHandle
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryLoad
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryLoadVector
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryLDGLDU
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryStore
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryStoreVector
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryLoadParam
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryStoreRetval
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryStoreParam
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|void
name|SelectAddrSpaceCast
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryTextureIntrinsic
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|trySurfaceIntrinsic
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
name|bool
name|tryBFE
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
block|;
specifier|inline
name|SDValue
name|getI32Imm
argument_list|(
argument|unsigned Imm
argument_list|,
argument|const SDLoc&DL
argument_list|)
block|{
return|return
name|CurDAG
operator|->
name|getTargetConstant
argument_list|(
name|Imm
argument_list|,
name|DL
argument_list|,
name|MVT
operator|::
name|i32
argument_list|)
return|;
block|}
comment|// Match direct address complex pattern.
name|bool
name|SelectDirectAddr
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Address
argument_list|)
block|;
name|bool
name|SelectADDRri_imp
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|,
argument|MVT mvt
argument_list|)
block|;
name|bool
name|SelectADDRri
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRri64
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRsi_imp
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|,
argument|MVT mvt
argument_list|)
block|;
name|bool
name|SelectADDRsi
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|SelectADDRsi64
argument_list|(
argument|SDNode *OpNode
argument_list|,
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
block|;
name|bool
name|ChkMemSDNodeAddressSpace
argument_list|(
argument|SDNode *N
argument_list|,
argument|unsigned int spN
argument_list|)
specifier|const
block|;
specifier|static
name|unsigned
name|GetConvertOpcode
argument_list|(
argument|MVT DestTy
argument_list|,
argument|MVT SrcTy
argument_list|,
argument|bool IsSigned
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

