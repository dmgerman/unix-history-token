begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- X86IntelAsmPrinter.h - Convert X86 LLVM code to Intel assembly ----===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Intel assembly code printer class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|X86INTELASMPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|X86INTELASMPRINTER_H
end_define

begin_include
include|#
directive|include
file|"../X86.h"
end_include

begin_include
include|#
directive|include
file|"../X86MachineFunctionInfo.h"
end_include

begin_include
include|#
directive|include
file|"../X86TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/AsmPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|struct
name|VISIBILITY_HIDDEN
name|X86IntelAsmPrinter
range|:
name|public
name|AsmPrinter
block|{
name|explicit
name|X86IntelAsmPrinter
argument_list|(
argument|raw_ostream&O
argument_list|,
argument|X86TargetMachine&TM
argument_list|,
argument|const TargetAsmInfo *T
argument_list|,
argument|CodeGenOpt::Level OL
argument_list|,
argument|bool V
argument_list|)
operator|:
name|AsmPrinter
argument_list|(
argument|O
argument_list|,
argument|TM
argument_list|,
argument|T
argument_list|,
argument|OL
argument_list|,
argument|V
argument_list|)
block|{}
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"X86 Intel-Style Assembly Printer"
return|;
block|}
comment|/// printInstruction - This method is automatically generated by tablegen
comment|/// from the instruction set description.  This method returns true if the
comment|/// machine instruction was sufficiently described to print it, otherwise it
comment|/// returns false.
name|bool
name|printInstruction
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
block|;
comment|// This method is used by the tablegen'erated instruction printer.
name|void
name|printOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|const char *Modifier =
literal|0
argument_list|)
block|{
specifier|const
name|MachineOperand
operator|&
name|MO
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
block|;
if|if
condition|(
name|MO
operator|.
name|isReg
argument_list|()
condition|)
block|{
name|assert
argument_list|(
name|TargetRegisterInfo
operator|::
name|isPhysicalRegister
argument_list|(
name|MO
operator|.
name|getReg
argument_list|()
argument_list|)
operator|&&
literal|"Not physreg??"
argument_list|)
expr_stmt|;
name|O
operator|<<
name|TM
operator|.
name|getRegisterInfo
argument_list|()
operator|->
name|get
argument_list|(
name|MO
operator|.
name|getReg
argument_list|()
argument_list|)
operator|.
name|Name
expr_stmt|;
comment|// Capitalized names
block|}
else|else
block|{
name|printOp
argument_list|(
name|MO
argument_list|,
name|Modifier
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|print_pcrel_imm
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|;
name|void
name|printi8mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"BYTE PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printi16mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"WORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printi32mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"DWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printi64mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printi128mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"XMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printf32mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"DWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printf64mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printf80mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"XWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printf128mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"XMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printlea32mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"DWORD PTR "
block|;
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printlea64mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
block|;   }
name|void
name|printlea64_32mem
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
literal|"subreg64"
argument_list|)
block|;   }
name|bool
name|printAsmMRegister
argument_list|(
argument|const MachineOperand&MO
argument_list|,
argument|const char Mode
argument_list|)
block|;
name|bool
name|PrintAsmOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|unsigned AsmVariant
argument_list|,
argument|const char *ExtraCode
argument_list|)
block|;
name|bool
name|PrintAsmMemoryOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|unsigned AsmVariant
argument_list|,
argument|const char *ExtraCode
argument_list|)
block|;
name|void
name|printMachineInstruction
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
block|;
name|void
name|printOp
argument_list|(
specifier|const
name|MachineOperand
operator|&
name|MO
argument_list|,
specifier|const
name|char
operator|*
name|Modifier
operator|=
literal|0
argument_list|)
block|;
name|void
name|printSSECC
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned Op
argument_list|)
block|;
name|void
name|printMemReference
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned Op
argument_list|,
argument|const char *Modifier=NULL
argument_list|)
block|;
name|void
name|printLeaMemReference
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned Op
argument_list|,
argument|const char *Modifier=NULL
argument_list|)
block|;
name|void
name|printPICJumpTableSetLabel
argument_list|(
argument|unsigned uid
argument_list|,
argument|const MachineBasicBlock *MBB
argument_list|)
specifier|const
block|;
name|void
name|printPICJumpTableSetLabel
argument_list|(
argument|unsigned uid
argument_list|,
argument|unsigned uid2
argument_list|,
argument|const MachineBasicBlock *MBB
argument_list|)
specifier|const
block|{
name|AsmPrinter
operator|::
name|printPICJumpTableSetLabel
argument_list|(
name|uid
argument_list|,
name|uid2
argument_list|,
name|MBB
argument_list|)
block|;   }
name|void
name|printPICLabel
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned Op
argument_list|)
block|;
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|F
argument_list|)
block|;
name|bool
name|doInitialization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
name|bool
name|doFinalization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
comment|// We have to propagate some information about MachineFunction to
comment|// AsmPrinter. It's ok, when we're printing the function, since we have
comment|// access to MachineFunction and can get the appropriate MachineFunctionInfo.
comment|// Unfortunately, this is not possible when we're printing reference to
comment|// Function (e.g. calling it and so on). Even more, there is no way to get the
comment|// corresponding MachineFunctions: it can even be not created at all. That's
comment|// why we should use additional structure, when we're collecting all necessary
comment|// information.
comment|//
comment|// This structure is using e.g. for name decoration for stdcall& fastcall'ed
comment|// function, since we have to use arguments' size for decoration.
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|X86MachineFunctionInfo
operator|>
name|FMFInfoMap
expr_stmt|;
name|FMFInfoMap
name|FunctionInfoMap
decl_stmt|;
name|void
name|decorateName
argument_list|(
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
specifier|const
name|GlobalValue
operator|*
name|GV
argument_list|)
decl_stmt|;
name|virtual
name|void
name|EmitString
argument_list|(
specifier|const
name|ConstantArray
operator|*
name|CVA
argument_list|)
decl|const
decl_stmt|;
comment|// Necessary for dllexport support
name|StringSet
operator|<
operator|>
name|DLLExportedFns
operator|,
name|DLLExportedGVs
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

