begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- X86ATTAsmPrinter.h - Convert X86 LLVM code to AT&T assembly -------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// AT&T assembly code printer class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|X86ATTASMPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|X86ATTASMPRINTER_H
end_define

begin_include
include|#
directive|include
file|"../X86.h"
end_include

begin_include
include|#
directive|include
file|"../X86MachineFunctionInfo.h"
end_include

begin_include
include|#
directive|include
file|"../X86TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/AsmPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/DwarfWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineModuleInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/ValueTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineJumpTableInfo
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MCInst
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|VISIBILITY_HIDDEN
name|X86ATTAsmPrinter
range|:
name|public
name|AsmPrinter
block|{
specifier|const
name|X86Subtarget
operator|*
name|Subtarget
block|;
name|MCContext
operator|*
name|Context
block|;
name|MCStreamer
operator|*
name|Streamer
block|;
name|public
operator|:
name|explicit
name|X86ATTAsmPrinter
argument_list|(
argument|raw_ostream&O
argument_list|,
argument|X86TargetMachine&TM
argument_list|,
argument|const TargetAsmInfo *T
argument_list|,
argument|CodeGenOpt::Level OL
argument_list|,
argument|bool V
argument_list|)
operator|:
name|AsmPrinter
argument_list|(
argument|O
argument_list|,
argument|TM
argument_list|,
argument|T
argument_list|,
argument|OL
argument_list|,
argument|V
argument_list|)
block|{
name|Subtarget
operator|=
operator|&
name|TM
operator|.
name|getSubtarget
operator|<
name|X86Subtarget
operator|>
operator|(
operator|)
block|;
name|Context
operator|=
literal|0
block|;
name|Streamer
operator|=
literal|0
block|;   }
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"X86 AT&T-Style Assembly Printer"
return|;
block|}
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
block|{
name|AU
operator|.
name|setPreservesAll
argument_list|()
block|;
if|if
condition|(
name|Subtarget
operator|->
name|isTargetDarwin
argument_list|()
operator|||
name|Subtarget
operator|->
name|isTargetELF
argument_list|()
operator|||
name|Subtarget
operator|->
name|isTargetCygMing
argument_list|()
condition|)
block|{
name|AU
operator|.
name|addRequired
operator|<
name|MachineModuleInfo
operator|>
operator|(
operator|)
expr_stmt|;
block|}
name|AU
operator|.
name|addRequired
operator|<
name|DwarfWriter
operator|>
operator|(
operator|)
expr_stmt|;
name|AsmPrinter
operator|::
name|getAnalysisUsage
argument_list|(
name|AU
argument_list|)
block|;   }
name|bool
name|doInitialization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
decl_stmt|;
name|bool
name|doFinalization
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// printInstruction - This method is automatically generated by tablegen
comment|/// from the instruction set description.  This method returns true if the
comment|/// machine instruction was sufficiently described to print it, otherwise it
comment|/// returns false.
name|bool
name|printInstruction
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|)
function_decl|;
comment|// New MCInst printing stuff.
name|bool
name|printInstruction
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|)
function_decl|;
name|void
name|printOperand
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|,
specifier|const
name|char
modifier|*
name|Modifier
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|printMemReference
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|printLeaMemReference
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|printSSECC
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|printPICLabel
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|print_pcrel_imm
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|void
name|printi8mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi16mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi32mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi64mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi128mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf32mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf64mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf80mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf128mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea32mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea64mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea64_32mem
parameter_list|(
specifier|const
name|MCInst
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
comment|// These methods are used by the tablegen'erated instruction printer.
name|void
name|printOperand
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|,
specifier|const
name|char
modifier|*
name|Modifier
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|print_pcrel_imm
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|void
name|printi8mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi16mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi32mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi64mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printi128mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf32mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf64mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf80mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printf128mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea32mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea64mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|)
expr_stmt|;
block|}
name|void
name|printlea64_32mem
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
block|{
name|printLeaMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
literal|"subreg64"
argument_list|)
expr_stmt|;
block|}
name|bool
name|printAsmMRegister
parameter_list|(
specifier|const
name|MachineOperand
modifier|&
name|MO
parameter_list|,
name|char
name|Mode
parameter_list|)
function_decl|;
name|bool
name|PrintAsmOperand
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|,
name|unsigned
name|AsmVariant
parameter_list|,
specifier|const
name|char
modifier|*
name|ExtraCode
parameter_list|)
function_decl|;
name|bool
name|PrintAsmMemoryOperand
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|OpNo
parameter_list|,
name|unsigned
name|AsmVariant
parameter_list|,
specifier|const
name|char
modifier|*
name|ExtraCode
parameter_list|)
function_decl|;
name|void
name|printMachineInstruction
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|)
function_decl|;
name|void
name|printSSECC
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|printMemReference
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|,
specifier|const
name|char
modifier|*
name|Modifier
init|=
name|NULL
parameter_list|)
function_decl|;
name|void
name|printLeaMemReference
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|,
specifier|const
name|char
modifier|*
name|Modifier
init|=
name|NULL
parameter_list|)
function_decl|;
name|void
name|printPICJumpTableSetLabel
argument_list|(
name|unsigned
name|uid
argument_list|,
specifier|const
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
decl_stmt|;
name|void
name|printPICJumpTableSetLabel
argument_list|(
name|unsigned
name|uid
argument_list|,
name|unsigned
name|uid2
argument_list|,
specifier|const
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
block|{
name|AsmPrinter
operator|::
name|printPICJumpTableSetLabel
argument_list|(
name|uid
argument_list|,
name|uid2
argument_list|,
name|MBB
argument_list|)
expr_stmt|;
block|}
name|void
name|printPICJumpTableEntry
argument_list|(
specifier|const
name|MachineJumpTableInfo
operator|*
name|MJTI
argument_list|,
specifier|const
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|unsigned
name|uid
argument_list|)
decl|const
decl_stmt|;
name|void
name|printPICLabel
parameter_list|(
specifier|const
name|MachineInstr
modifier|*
name|MI
parameter_list|,
name|unsigned
name|Op
parameter_list|)
function_decl|;
name|void
name|printModuleLevelGV
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GVar
parameter_list|)
function_decl|;
name|void
name|PrintPICBaseSymbol
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|runOnMachineFunction
parameter_list|(
name|MachineFunction
modifier|&
name|F
parameter_list|)
function_decl|;
name|void
name|emitFunctionHeader
parameter_list|(
specifier|const
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
comment|// Necessary for Darwin to print out the apprioriate types of linker stubs
name|StringSet
operator|<
operator|>
name|FnStubs
operator|,
name|GVStubs
operator|,
name|HiddenGVStubs
expr_stmt|;
comment|// Necessary for dllexport support
name|StringSet
operator|<
operator|>
name|DLLExportedFns
operator|,
name|DLLExportedGVs
expr_stmt|;
comment|// We have to propagate some information about MachineFunction to
comment|// AsmPrinter. It's ok, when we're printing the function, since we have
comment|// access to MachineFunction and can get the appropriate MachineFunctionInfo.
comment|// Unfortunately, this is not possible when we're printing reference to
comment|// Function (e.g. calling it and so on). Even more, there is no way to get the
comment|// corresponding MachineFunctions: it can even be not created at all. That's
comment|// why we should use additional structure, when we're collecting all necessary
comment|// information.
comment|//
comment|// This structure is using e.g. for name decoration for stdcall& fastcall'ed
comment|// function, since we have to use arguments' size for decoration.
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|Function
operator|*
operator|,
name|X86MachineFunctionInfo
operator|>
name|FMFInfoMap
expr_stmt|;
name|FMFInfoMap
name|FunctionInfoMap
decl_stmt|;
name|void
name|decorateName
argument_list|(
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
specifier|const
name|GlobalValue
operator|*
name|GV
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

