begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SPU.h - Top-level interface for Cell SPU Target ----------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the entry points for global functions defined in the LLVM
end_comment

begin_comment
comment|// Cell SPU back-end.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TARGET_IBMCELLSPU_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TARGET_IBMCELLSPU_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SPUTargetMachine
decl_stmt|;
name|class
name|FunctionPass
decl_stmt|;
name|class
name|formatted_raw_ostream
decl_stmt|;
name|FunctionPass
modifier|*
name|createSPUISelDag
parameter_list|(
name|SPUTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
comment|/*--== Utility functions/predicates/etc used all over the place: --==*/
comment|//! Predicate test for a signed 10-bit value
comment|/*!     \param Value The input value to be tested      This predicate tests for a signed 10-bit value, returning the 10-bit value     as a short if true.    */
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|isS10Constant
argument_list|(
argument|T Value
argument_list|)
expr_stmt|;
name|template
operator|<
operator|>
specifier|inline
name|bool
name|isS10Constant
operator|<
name|short
operator|>
operator|(
name|short
name|Value
operator|)
block|{
name|int
name|SExtValue
operator|=
operator|(
operator|(
name|int
operator|)
name|Value
operator|<<
operator|(
literal|32
operator|-
literal|10
operator|)
operator|)
operator|>>
operator|(
literal|32
operator|-
literal|10
operator|)
block|;
return|return
operator|(
operator|(
name|Value
operator|>
literal|0
operator|&&
name|Value
operator|<=
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|-
literal|1
operator|)
operator|||
operator|(
name|Value
operator|<
literal|0
operator|&&
operator|(
name|short
operator|)
name|SExtValue
operator|==
name|Value
operator|)
operator|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|bool
name|isS10Constant
operator|<
name|int
operator|>
operator|(
name|int
name|Value
operator|)
block|{
return|return
operator|(
name|Value
operator|>=
operator|-
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|&&
name|Value
operator|<=
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|-
literal|1
operator|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|bool
name|isS10Constant
operator|<
name|uint32_t
operator|>
operator|(
name|uint32_t
name|Value
operator|)
block|{
return|return
operator|(
name|Value
operator|<=
operator|(
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|-
literal|1
operator|)
operator|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|bool
name|isS10Constant
operator|<
name|int64_t
operator|>
operator|(
name|int64_t
name|Value
operator|)
block|{
return|return
operator|(
name|Value
operator|>=
operator|-
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|&&
name|Value
operator|<=
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|-
literal|1
operator|)
return|;
block|}
name|template
operator|<
operator|>
specifier|inline
name|bool
name|isS10Constant
operator|<
name|uint64_t
operator|>
operator|(
name|uint64_t
name|Value
operator|)
block|{
return|return
operator|(
name|Value
operator|<=
operator|(
operator|(
literal|1
operator|<<
literal|9
operator|)
operator|-
literal|1
operator|)
operator|)
return|;
block|}
comment|//! Predicate test for an unsigned 10-bit value
comment|/*!     \param Value The input value to be tested      This predicate tests for an unsigned 10-bit value, returning the 10-bit value     as a short if true.    */
specifier|inline
name|bool
name|isU10Constant
parameter_list|(
name|short
name|Value
parameter_list|)
block|{
return|return
operator|(
name|Value
operator|==
operator|(
name|Value
operator|&
literal|0x3ff
operator|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|isU10Constant
parameter_list|(
name|int
name|Value
parameter_list|)
block|{
return|return
operator|(
name|Value
operator|==
operator|(
name|Value
operator|&
literal|0x3ff
operator|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|isU10Constant
parameter_list|(
name|uint32_t
name|Value
parameter_list|)
block|{
return|return
operator|(
name|Value
operator|==
operator|(
name|Value
operator|&
literal|0x3ff
operator|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|isU10Constant
parameter_list|(
name|int64_t
name|Value
parameter_list|)
block|{
return|return
operator|(
name|Value
operator|==
operator|(
name|Value
operator|&
literal|0x3ff
operator|)
operator|)
return|;
block|}
specifier|inline
name|bool
name|isU10Constant
parameter_list|(
name|uint64_t
name|Value
parameter_list|)
block|{
return|return
operator|(
name|Value
operator|==
operator|(
name|Value
operator|&
literal|0x3ff
operator|)
operator|)
return|;
block|}
specifier|extern
name|Target
name|TheCellSPUTarget
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// Defines symbolic names for the SPU instructions.
end_comment

begin_comment
comment|//
end_comment

begin_include
include|#
directive|include
file|"SPUGenInstrNames.inc"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_TARGET_IBMCELLSPU_H */
end_comment

end_unit

