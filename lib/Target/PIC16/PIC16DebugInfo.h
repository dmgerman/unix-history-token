begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- PIC16DebugInfo.h - Interfaces for PIC16 Debug Information ============//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the helper functions for representing debug information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PIC16DBG_H
end_ifndef

begin_define
define|#
directive|define
name|PIC16DBG_H
end_define

begin_include
include|#
directive|include
file|"llvm/Analysis/DebugInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineFunction
decl_stmt|;
name|class
name|DebugLoc
decl_stmt|;
name|namespace
name|PIC16Dbg
block|{
enum|enum
name|VarType
block|{
name|T_NULL
block|,
name|T_VOID
block|,
name|T_CHAR
block|,
name|T_SHORT
block|,
name|T_INT
block|,
name|T_LONG
block|,
name|T_FLOAT
block|,
name|T_DOUBLE
block|,
name|T_STRUCT
block|,
name|T_UNION
block|,
name|T_ENUM
block|,
name|T_MOE
block|,
name|T_UCHAR
block|,
name|T_USHORT
block|,
name|T_UINT
block|,
name|T_ULONG
block|}
enum|;
enum|enum
name|DerivedType
block|{
name|DT_NONE
block|,
name|DT_PTR
block|,
name|DT_FCN
block|,
name|DT_ARY
block|}
enum|;
enum|enum
name|TypeSize
block|{
name|S_BASIC
init|=
literal|5
block|,
name|S_DERIVED
init|=
literal|3
block|}
enum|;
enum|enum
name|DbgClass
block|{
name|C_NULL
block|,
name|C_AUTO
block|,
name|C_EXT
block|,
name|C_STAT
block|,
name|C_REG
block|,
name|C_EXTDEF
block|,
name|C_LABEL
block|,
name|C_ULABEL
block|,
name|C_MOS
block|,
name|C_ARG
block|,
name|C_STRTAG
block|,
name|C_MOU
block|,
name|C_UNTAG
block|,
name|C_TPDEF
block|,
name|C_USTATIC
block|,
name|C_ENTAG
block|,
name|C_MOE
block|,
name|C_REGPARM
block|,
name|C_FIELD
block|,
name|C_AUTOARG
block|,
name|C_LASTENT
block|,
name|C_BLOCK
init|=
literal|100
block|,
name|C_FCN
block|,
name|C_EOS
block|,
name|C_FILE
block|,
name|C_LINE
block|,
name|C_ALIAS
block|,
name|C_HIDDEN
block|,
name|C_EOF
block|,
name|C_LIST
block|,
name|C_SECTION
block|,
name|C_EFCN
init|=
literal|255
block|}
enum|;
enum|enum
name|SymbolSize
block|{
name|AuxSize
init|=
literal|20
block|}
enum|;
block|}
name|class
name|formatted_raw_ostream
decl_stmt|;
name|class
name|PIC16DbgInfo
block|{
name|formatted_raw_ostream
modifier|&
name|O
decl_stmt|;
specifier|const
name|MCAsmInfo
modifier|*
name|MAI
decl_stmt|;
name|std
operator|::
name|string
name|CurFile
expr_stmt|;
name|unsigned
name|CurLine
decl_stmt|;
comment|// EmitDebugDirectives is set if debug information is available. Default
comment|// value for it is false.
name|bool
name|EmitDebugDirectives
decl_stmt|;
name|public
label|:
name|PIC16DbgInfo
argument_list|(
name|formatted_raw_ostream
operator|&
name|o
argument_list|,
specifier|const
name|MCAsmInfo
operator|*
name|T
argument_list|)
operator|:
name|O
argument_list|(
name|o
argument_list|)
operator|,
name|MAI
argument_list|(
argument|T
argument_list|)
block|{
name|CurFile
operator|=
literal|""
block|;
name|CurLine
operator|=
literal|0
block|;
name|EmitDebugDirectives
operator|=
name|false
block|;      }
name|void
name|BeginModule
argument_list|(
name|Module
operator|&
name|M
argument_list|)
expr_stmt|;
name|void
name|BeginFunction
parameter_list|(
specifier|const
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|void
name|ChangeDebugLoc
parameter_list|(
specifier|const
name|MachineFunction
modifier|&
name|MF
parameter_list|,
specifier|const
name|DebugLoc
modifier|&
name|DL
parameter_list|,
name|bool
name|IsInBeginFunction
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|EndFunction
parameter_list|(
specifier|const
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|void
name|EndModule
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|SwitchToCU
parameter_list|(
name|MDNode
modifier|*
name|CU
parameter_list|)
function_decl|;
name|void
name|SwitchToLine
parameter_list|(
name|unsigned
name|Line
parameter_list|,
name|bool
name|IsInBeginFunction
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|PopulateDebugInfo
argument_list|(
name|DIType
name|Ty
argument_list|,
name|unsigned
name|short
operator|&
name|TypeNo
argument_list|,
name|bool
operator|&
name|HasAux
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|std
operator|::
name|string
operator|&
name|TypeName
argument_list|)
decl_stmt|;
name|void
name|PopulateBasicTypeInfo
parameter_list|(
name|DIType
name|Ty
parameter_list|,
name|unsigned
name|short
modifier|&
name|TypeNo
parameter_list|)
function_decl|;
name|void
name|PopulateDerivedTypeInfo
argument_list|(
name|DIType
name|Ty
argument_list|,
name|unsigned
name|short
operator|&
name|TypeNo
argument_list|,
name|bool
operator|&
name|HasAux
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|std
operator|::
name|string
operator|&
name|TypeName
argument_list|)
decl_stmt|;
name|void
name|PopulateCompositeTypeInfo
argument_list|(
name|DIType
name|Ty
argument_list|,
name|unsigned
name|short
operator|&
name|TypeNo
argument_list|,
name|bool
operator|&
name|HasAux
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|std
operator|::
name|string
operator|&
name|TypeName
argument_list|)
decl_stmt|;
name|void
name|PopulateArrayTypeInfo
argument_list|(
name|DIType
name|Ty
argument_list|,
name|unsigned
name|short
operator|&
name|TypeNo
argument_list|,
name|bool
operator|&
name|HasAux
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|std
operator|::
name|string
operator|&
name|TypeName
argument_list|)
decl_stmt|;
name|void
name|PopulateStructOrUnionTypeInfo
argument_list|(
name|DIType
name|Ty
argument_list|,
name|unsigned
name|short
operator|&
name|TypeNo
argument_list|,
name|bool
operator|&
name|HasAux
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|std
operator|::
name|string
operator|&
name|TypeName
argument_list|)
decl_stmt|;
name|void
name|PopulateEnumTypeInfo
parameter_list|(
name|DIType
name|Ty
parameter_list|,
name|unsigned
name|short
modifier|&
name|TypeNo
parameter_list|)
function_decl|;
name|unsigned
name|GetTypeDebugNumber
argument_list|(
name|std
operator|::
name|string
operator|&
name|Type
argument_list|)
decl_stmt|;
name|short
name|getStorageClass
parameter_list|(
name|DIGlobalVariable
name|DIGV
parameter_list|)
function_decl|;
name|void
name|EmitFunctBeginDI
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|void
name|EmitCompositeTypeDecls
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|void
name|EmitCompositeTypeElements
argument_list|(
name|DICompositeType
name|CTy
argument_list|,
name|std
operator|::
name|string
name|Suffix
argument_list|)
decl_stmt|;
name|void
name|EmitFunctEndDI
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
name|unsigned
name|Line
parameter_list|)
function_decl|;
name|void
name|EmitAuxEntry
argument_list|(
specifier|const
name|std
operator|::
name|string
name|VarName
argument_list|,
name|int
name|Aux
index|[]
argument_list|,
name|int
name|num
operator|=
name|PIC16Dbg
operator|::
name|AuxSize
argument_list|,
name|std
operator|::
name|string
name|TagName
operator|=
literal|""
argument_list|)
decl_stmt|;
specifier|inline
name|void
name|EmitSymbol
argument_list|(
name|std
operator|::
name|string
name|Name
argument_list|,
name|short
name|Class
argument_list|,
name|unsigned
name|short
name|Type
operator|=
name|PIC16Dbg
operator|::
name|T_NULL
argument_list|,
name|unsigned
name|long
name|Value
operator|=
literal|0
argument_list|)
decl_stmt|;
name|void
name|EmitVarDebugInfo
parameter_list|(
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
name|void
name|EmitEOF
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm;
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

