begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- PIC16.h - Top-level interface for PIC16 representation --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the entry points for global functions defined in
end_comment

begin_comment
comment|// the LLVM PIC16 back-end.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TARGET_PIC16_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TARGET_PIC16_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<iosfwd>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<sstream>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|PIC16TargetMachine
decl_stmt|;
name|class
name|FunctionPass
decl_stmt|;
name|class
name|MachineCodeEmitter
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|namespace
name|PIC16CC
block|{
enum|enum
name|CondCodes
block|{
name|EQ
block|,
name|NE
block|,
name|LT
block|,
name|LE
block|,
name|GT
block|,
name|GE
block|,
name|ULT
block|,
name|UGT
block|,
name|ULE
block|,
name|UGE
block|}
enum|;
block|}
comment|// A Central class to manage all ABI naming conventions.
comment|// PAN - [P]ic16 [A]BI [N]ames
name|class
name|PAN
block|{
name|public
label|:
comment|// Map the name of the symbol to its section name.
comment|// Current ABI:
comment|// -----------------------------------------------------
comment|// ALL Names are prefixed with the symobl '@'.
comment|// ------------------------------------------------------
comment|// Global variables do not have any '.' in their names.
comment|// These are maily function names and global variable names.
comment|// Example - @foo,  @i
comment|// -------------------------------------------------------
comment|// Functions and auto variables.
comment|// Names are mangled as<prefix><funcname>.<tag>.<varname>
comment|// Where<prefix> is '@' and<tag> is any one of
comment|// the following
comment|// .auto. - an automatic var of a function.
comment|// .temp. - temproray data of a function.
comment|// .ret.  - return value label for a function.
comment|// .frame. - Frame label for a function where retval, args
comment|//           and temps are stored.
comment|// .args. - Label used to pass arguments to a direct call.
comment|// Example - Function name:   @foo
comment|//           Its frame:       @foo.frame.
comment|//           Its retval:      @foo.ret.
comment|//           Its local vars:  @foo.auto.a
comment|//           Its temp data:   @foo.temp.
comment|//           Its arg passing: @foo.args.
comment|//----------------------------------------------
comment|// Libcall - compiler generated libcall names must start with .lib.
comment|//           This id will be used to emit extern decls for libcalls.
comment|// Example - libcall name:   @.lib.sra.i8
comment|//           To pass args:   @.lib.sra.i8.args.
comment|//           To return val:  @.lib.sra.i8.ret.
comment|//----------------------------------------------
comment|// SECTION Names
comment|// uninitialized globals - @udata.<num>.#
comment|// initialized globals - @idata.<num>.#
comment|// Function frame - @<func>.frame_section.
comment|// Function autos - @<func>.autos_section.
comment|// Declarations - @section.0
comment|//----------------------------------------------------------
comment|// Tags used to mangle different names.
enum|enum
name|TAGS
block|{
name|PREFIX_SYMBOL
block|,
name|GLOBAL
block|,
name|STATIC_LOCAL
block|,
name|AUTOS_LABEL
block|,
name|FRAME_LABEL
block|,
name|RET_LABEL
block|,
name|ARGS_LABEL
block|,
name|TEMPS_LABEL
block|,
name|LIBCALL
block|,
name|FRAME_SECTION
block|,
name|AUTOS_SECTION
block|,
name|CODE_SECTION
block|}
enum|;
comment|// Textual names of the tags.
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|getTagName
parameter_list|(
name|TAGS
name|tag
parameter_list|)
block|{
switch|switch
condition|(
name|tag
condition|)
block|{
default|default:
return|return
literal|""
return|;
case|case
name|PREFIX_SYMBOL
case|:
return|return
literal|"@"
return|;
case|case
name|AUTOS_LABEL
case|:
return|return
literal|".auto."
return|;
case|case
name|FRAME_LABEL
case|:
return|return
literal|".frame."
return|;
case|case
name|TEMPS_LABEL
case|:
return|return
literal|".temp."
return|;
case|case
name|ARGS_LABEL
case|:
return|return
literal|".args."
return|;
case|case
name|RET_LABEL
case|:
return|return
literal|".ret."
return|;
case|case
name|LIBCALL
case|:
return|return
literal|".lib."
return|;
case|case
name|FRAME_SECTION
case|:
return|return
literal|".frame_section."
return|;
case|case
name|AUTOS_SECTION
case|:
return|return
literal|".autos_section."
return|;
case|case
name|CODE_SECTION
case|:
return|return
literal|".code_section."
return|;
block|}
block|}
comment|// Get tag type for the Symbol.
specifier|inline
specifier|static
name|TAGS
name|getSymbolTag
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Sym
argument_list|)
block|{
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|TEMPS_LABEL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|TEMPS_LABEL
return|;
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|FRAME_LABEL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|FRAME_LABEL
return|;
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|RET_LABEL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|RET_LABEL
return|;
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|ARGS_LABEL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|ARGS_LABEL
return|;
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|AUTOS_LABEL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|AUTOS_LABEL
return|;
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
name|getTagName
argument_list|(
name|LIBCALL
argument_list|)
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|LIBCALL
return|;
comment|// It does not have any Tag. So its a true global or static local.
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
literal|"."
argument_list|)
operator|==
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|GLOBAL
return|;
comment|// If a . is there, then it may be static local.
comment|// We should mangle these as well in clang.
if|if
condition|(
name|Sym
operator|.
name|find
argument_list|(
literal|"."
argument_list|)
operator|!=
name|std
operator|::
name|string
operator|::
name|npos
condition|)
return|return
name|STATIC_LOCAL
return|;
name|assert
argument_list|(
literal|0
operator|&&
literal|"Could not determine Symbol's tag"
argument_list|)
expr_stmt|;
block|}
comment|// addPrefix - add prefix symbol to a name if there isn't one already.
specifier|inline
specifier|static
name|std
operator|::
name|string
name|addPrefix
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|std
operator|::
name|string
name|prefix
operator|=
name|getTagName
argument_list|(
name|PREFIX_SYMBOL
argument_list|)
block|;
comment|// If this name already has a prefix, nothing to do.
if|if
condition|(
name|Name
operator|.
name|compare
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|size
argument_list|()
argument_list|,
name|prefix
argument_list|)
operator|==
literal|0
condition|)
return|return
name|Name
return|;
return|return
name|prefix
operator|+
name|Name
return|;
block|}
comment|// Get mangled func name from a mangled sym name.
comment|// In all cases func name is the first component before a '.'.
specifier|static
specifier|inline
name|std
operator|::
name|string
name|getFuncNameForSym
argument_list|(
argument|const std::string&Sym1
argument_list|)
block|{
name|assert
argument_list|(
name|getSymbolTag
argument_list|(
name|Sym1
argument_list|)
operator|!=
name|GLOBAL
operator|&&
literal|"not belongs to a function"
argument_list|)
block|;
name|std
operator|::
name|string
name|Sym
operator|=
name|addPrefix
argument_list|(
name|Sym1
argument_list|)
block|;
comment|// Position of the . after func name. That's where func name ends.
name|size_t
name|func_name_end
operator|=
name|Sym
operator|.
name|find
argument_list|(
literal|'.'
argument_list|)
block|;
return|return
name|Sym
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|func_name_end
argument_list|)
return|;
block|}
comment|// Get Frame start label for a func.
specifier|static
name|std
operator|::
name|string
name|getFrameLabel
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|FRAME_LABEL
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getRetvalLabel
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|RET_LABEL
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getArgsLabel
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|ARGS_LABEL
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getTempdataLabel
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|TEMPS_LABEL
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getFrameSectionName
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|FRAME_SECTION
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
operator|+
literal|"# UDATA_OVR"
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getAutosSectionName
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|AUTOS_SECTION
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
operator|+
literal|"# UDATA_OVR"
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getCodeSectionName
argument_list|(
argument|const std::string&Func
argument_list|)
block|{
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
block|;
name|std
operator|::
name|string
name|tag
operator|=
name|getTagName
argument_list|(
name|CODE_SECTION
argument_list|)
block|;
return|return
name|Func1
operator|+
name|tag
operator|+
literal|"# CODE"
return|;
block|}
comment|// udata and idata section names are generated by a given number.
comment|// @udata.<num>.#
specifier|static
name|std
operator|::
name|string
name|getUdataSectionName
argument_list|(
argument|unsigned num
argument_list|)
block|{
name|std
operator|::
name|ostringstream
name|o
block|;
name|o
operator|<<
name|getTagName
argument_list|(
name|PREFIX_SYMBOL
argument_list|)
operator|<<
literal|"udata."
operator|<<
name|num
operator|<<
literal|".# UDATA"
block|;
return|return
name|o
operator|.
name|str
argument_list|()
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|getIdataSectionName
argument_list|(
argument|unsigned num
argument_list|)
block|{
name|std
operator|::
name|ostringstream
name|o
block|;
name|o
operator|<<
name|getTagName
argument_list|(
name|PREFIX_SYMBOL
argument_list|)
operator|<<
literal|"idata."
operator|<<
name|num
operator|<<
literal|".# IDATA"
block|;
return|return
name|o
operator|.
name|str
argument_list|()
return|;
block|}
specifier|inline
specifier|static
name|bool
name|isLocalName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|{
if|if
condition|(
name|getSymbolTag
argument_list|(
name|Name
argument_list|)
operator|==
name|AUTOS_LABEL
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
specifier|inline
specifier|static
name|bool
name|isLocalToFunc
argument_list|(
name|std
operator|::
name|string
operator|&
name|Func
argument_list|,
name|std
operator|::
name|string
operator|&
name|Var
argument_list|)
block|{
if|if
condition|(
operator|!
name|isLocalName
argument_list|(
name|Var
argument_list|)
condition|)
return|return
name|false
return|;
name|std
operator|::
name|string
name|Func1
operator|=
name|addPrefix
argument_list|(
name|Func
argument_list|)
expr_stmt|;
comment|// Extract func name of the varilable.
specifier|const
name|std
operator|::
name|string
operator|&
name|fname
operator|=
name|getFuncNameForSym
argument_list|(
name|Var
argument_list|)
expr_stmt|;
if|if
condition|(
name|fname
operator|.
name|compare
argument_list|(
name|Func1
argument_list|)
operator|==
literal|0
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
comment|// Get the section for the given external symbol names.
comment|// This tries to find the type (Tag) of the symbol from its mangled name
comment|// and return appropriate section name for it.
specifier|static
specifier|inline
name|std
operator|::
name|string
name|getSectionNameForSym
argument_list|(
argument|const std::string&Sym1
argument_list|)
block|{
name|std
operator|::
name|string
name|Sym
operator|=
name|addPrefix
argument_list|(
name|Sym1
argument_list|)
block|;
name|std
operator|::
name|string
name|SectionName
block|;
name|std
operator|::
name|string
name|Fname
operator|=
name|getFuncNameForSym
argument_list|(
name|Sym
argument_list|)
block|;
name|TAGS
name|id
operator|=
name|getSymbolTag
argument_list|(
name|Sym
argument_list|)
block|;
switch|switch
condition|(
name|id
condition|)
block|{
default|default :
name|assert
argument_list|(
literal|0
operator|&&
literal|"Could not determine external symbol type"
argument_list|)
expr_stmt|;
case|case
name|FRAME_LABEL
case|:
case|case
name|RET_LABEL
case|:
case|case
name|TEMPS_LABEL
case|:
case|case
name|ARGS_LABEL
case|:
block|{
return|return
name|getFrameSectionName
argument_list|(
name|Fname
argument_list|)
return|;
block|}
case|case
name|AUTOS_LABEL
case|:
block|{
return|return
name|getAutosSectionName
argument_list|(
name|Fname
argument_list|)
return|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
unit|};
comment|// class PAN.
end_comment

begin_comment
comment|// External symbol names require memory to live till the program end.
end_comment

begin_comment
comment|// So we have to allocate it and keep.
end_comment

begin_decl_stmt
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|createESName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
block|{
name|char
modifier|*
name|tmpName
init|=
name|new
name|char
index|[
name|name
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
name|strcpy
argument_list|(
name|tmpName
argument_list|,
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tmpName
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|PIC16CondCodeToString
argument_list|(
name|PIC16CC
operator|::
name|CondCodes
name|CC
argument_list|)
block|{
switch|switch
condition|(
name|CC
condition|)
block|{
default|default:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|PIC16CC
operator|::
name|NE
case|:
return|return
literal|"ne"
return|;
case|case
name|PIC16CC
operator|::
name|EQ
case|:
return|return
literal|"eq"
return|;
case|case
name|PIC16CC
operator|::
name|LT
case|:
return|return
literal|"lt"
return|;
case|case
name|PIC16CC
operator|::
name|ULT
case|:
return|return
literal|"lt"
return|;
case|case
name|PIC16CC
operator|::
name|LE
case|:
return|return
literal|"le"
return|;
case|case
name|PIC16CC
operator|::
name|GT
case|:
return|return
literal|"gt"
return|;
case|case
name|PIC16CC
operator|::
name|UGT
case|:
return|return
literal|"gt"
return|;
case|case
name|PIC16CC
operator|::
name|GE
case|:
return|return
literal|"ge"
return|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|inline
specifier|static
name|bool
name|isSignedComparison
argument_list|(
name|PIC16CC
operator|::
name|CondCodes
name|CC
argument_list|)
block|{
switch|switch
condition|(
name|CC
condition|)
block|{
default|default:
name|assert
argument_list|(
literal|0
operator|&&
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|PIC16CC
operator|::
name|NE
case|:
case|case
name|PIC16CC
operator|::
name|EQ
case|:
case|case
name|PIC16CC
operator|::
name|LT
case|:
case|case
name|PIC16CC
operator|::
name|LE
case|:
case|case
name|PIC16CC
operator|::
name|GE
case|:
case|case
name|PIC16CC
operator|::
name|GT
case|:
return|return
name|true
return|;
case|case
name|PIC16CC
operator|::
name|ULT
case|:
case|case
name|PIC16CC
operator|::
name|UGT
case|:
case|case
name|PIC16CC
operator|::
name|ULE
case|:
case|case
name|PIC16CC
operator|::
name|UGE
case|:
return|return
name|false
return|;
comment|// condition codes for unsigned comparison.
block|}
block|}
end_decl_stmt

begin_function_decl
name|FunctionPass
modifier|*
name|createPIC16ISelDag
parameter_list|(
name|PIC16TargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|FunctionPass
modifier|*
name|createPIC16CodePrinterPass
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|PIC16TargetMachine
operator|&
name|TM
argument_list|,
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|,
name|bool
name|Verbose
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Banksel optimzer pass.
end_comment

begin_function_decl
name|FunctionPass
modifier|*
name|createPIC16MemSelOptimizerPass
parameter_list|()
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// end namespace llvm;
end_comment

begin_comment
comment|// Defines symbolic names for PIC16 registers.  This defines a mapping from
end_comment

begin_comment
comment|// register name to register number.
end_comment

begin_include
include|#
directive|include
file|"PIC16GenRegisterNames.inc"
end_include

begin_comment
comment|// Defines symbolic names for the PIC16 instructions.
end_comment

begin_include
include|#
directive|include
file|"PIC16GenInstrNames.inc"
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

