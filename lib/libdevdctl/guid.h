begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2012, 2013 Spectra Logic Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * Authors: Alan Somers         (Spectra Logic Corporation)  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/**  * \file devdctl_guid.h  *  * Definition of the Guid class.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEVDCTL_GUID_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEVDCTL_GUID_H_
end_define

begin_comment
comment|/*============================ Namespace Control =============================*/
end_comment

begin_decl_stmt
name|namespace
name|DevdCtl
block|{
comment|/*============================= Class Definitions ============================*/
comment|/*----------------------------------- Guid -----------------------------------*/
comment|/**  * \brief Object that represents guids.  *  * It can generally be manipulated as a uint64_t, but with a special  * value INVALID_GUID that does not equal any valid guid.  *  * As of this writing, this class is only used to represent ZFS  * guids in events and spa_generate_guid() in spa_misc.c explicitly  * refuses to return a guid of 0.  So this class uses 0 as the value  * for INVALID_GUID.  In the future, if 0 is allowed to be a valid  * guid, the implementation of this class must change.  */
name|class
name|Guid
block|{
name|public
label|:
comment|/* Constructors */
name|Guid
argument_list|(
argument|uint64_t guid
argument_list|)
empty_stmt|;
name|Guid
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|guid
argument_list|)
expr_stmt|;
specifier|static
name|Guid
name|InvalidGuid
parameter_list|()
function_decl|;
comment|/* Assignment */
name|Guid
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
decl_stmt|;
comment|/* Test the validity of this guid. */
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
comment|/* Comparison to other Guid operators */
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
comment|/* Integer conversion operators */
name|operator
name|uint64_t
argument_list|()
specifier|const
expr_stmt|;
name|operator
name|bool
argument_list|()
specifier|const
expr_stmt|;
name|protected
label|:
specifier|static
specifier|const
name|uint64_t
name|INVALID_GUID
init|=
literal|0
decl_stmt|;
comment|/* The integer value of the GUID. */
name|uint64_t
name|m_GUID
decl_stmt|;
block|}
empty_stmt|;
comment|//- Guid Inline Public Methods ------------------------------------------------
specifier|inline
name|Guid
operator|::
name|Guid
argument_list|(
argument|uint64_t guid
argument_list|)
operator|:
name|m_GUID
argument_list|(
argument|guid
argument_list|)
block|{ }
specifier|inline
name|Guid
name|Guid
operator|::
name|InvalidGuid
argument_list|()
block|{
return|return
operator|(
name|Guid
argument_list|(
name|INVALID_GUID
argument_list|)
operator|)
return|;
block|}
specifier|inline
name|Guid
operator|&
name|Guid
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
block|{
name|m_GUID
operator|=
name|rhs
operator|.
name|m_GUID
block|;
return|return
operator|(
operator|*
name|this
operator|)
return|;
block|}
specifier|inline
name|bool
name|Guid
operator|::
name|IsValid
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_GUID
operator|!=
name|INVALID_GUID
operator|)
return|;
block|}
specifier|inline
name|bool
name|Guid
operator|::
name|operator
operator|==
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|(
name|m_GUID
operator|==
name|rhs
operator|.
name|m_GUID
operator|)
return|;
block|}
specifier|inline
name|bool
name|Guid
operator|::
name|operator
operator|!=
operator|(
specifier|const
name|Guid
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|(
name|m_GUID
operator|!=
name|rhs
operator|.
name|m_GUID
operator|)
return|;
block|}
specifier|inline
name|Guid
operator|::
name|operator
name|uint64_t
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_GUID
operator|)
return|;
block|}
specifier|inline
name|Guid
operator|::
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_GUID
operator|!=
name|INVALID_GUID
operator|)
return|;
block|}
comment|/** Convert the GUID into its string representation */
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|out
operator|,
name|Guid
name|g
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace DevdCtl
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEVDCTL_GUID_H_ */
end_comment

end_unit

