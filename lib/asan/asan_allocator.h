begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- asan_allocator.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of AddressSanitizer, an address sanity checker.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ASan-private header for asan_allocator2.cc.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ASAN_ALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|ASAN_ALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|"asan_internal.h"
end_include

begin_include
include|#
directive|include
file|"asan_interceptors.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_list.h"
end_include

begin_decl_stmt
name|namespace
name|__asan
block|{
enum|enum
name|AllocType
block|{
name|FROM_MALLOC
init|=
literal|1
block|,
comment|// Memory block came from malloc, calloc, realloc, etc.
name|FROM_NEW
init|=
literal|2
block|,
comment|// Memory block came from operator new.
name|FROM_NEW_BR
init|=
literal|3
comment|// Memory block came from operator new [ ]
block|}
enum|;
specifier|static
specifier|const
name|uptr
name|kNumberOfSizeClasses
init|=
literal|255
decl_stmt|;
struct_decl|struct
name|AsanChunk
struct_decl|;
name|void
name|InitializeAllocator
parameter_list|()
function_decl|;
name|class
name|AsanChunkView
block|{
name|public
label|:
name|explicit
name|AsanChunkView
argument_list|(
name|AsanChunk
operator|*
name|chunk
argument_list|)
operator|:
name|chunk_
argument_list|(
argument|chunk
argument_list|)
block|{}
name|bool
name|IsValid
argument_list|()
block|{
return|return
name|chunk_
operator|!=
literal|0
return|;
block|}
name|uptr
name|Beg
parameter_list|()
function_decl|;
comment|// first byte of user memory.
name|uptr
name|End
parameter_list|()
function_decl|;
comment|// last byte of user memory.
name|uptr
name|UsedSize
parameter_list|()
function_decl|;
comment|// size requested by the user.
name|uptr
name|AllocTid
parameter_list|()
function_decl|;
name|uptr
name|FreeTid
parameter_list|()
function_decl|;
name|void
name|GetAllocStack
parameter_list|(
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
name|GetFreeStack
parameter_list|(
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|bool
name|AddrIsInside
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|sptr
modifier|*
name|offset
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|>=
name|Beg
argument_list|()
operator|&&
operator|(
name|addr
operator|+
name|access_size
operator|)
operator|<=
name|End
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|addr
operator|-
name|Beg
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|AddrIsAtLeft
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|sptr
modifier|*
name|offset
parameter_list|)
block|{
operator|(
name|void
operator|)
name|access_size
expr_stmt|;
if|if
condition|(
name|addr
operator|<
name|Beg
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|Beg
argument_list|()
operator|-
name|addr
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|AddrIsAtRight
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|sptr
modifier|*
name|offset
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|+
name|access_size
operator|>
name|End
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|addr
operator|-
name|End
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|private
label|:
name|AsanChunk
modifier|*
specifier|const
name|chunk_
decl_stmt|;
block|}
empty_stmt|;
name|AsanChunkView
name|FindHeapChunkByAddress
parameter_list|(
name|uptr
name|address
parameter_list|)
function_decl|;
comment|// List of AsanChunks with total size.
name|class
name|AsanChunkFifoList
range|:
name|public
name|IntrusiveList
operator|<
name|AsanChunk
operator|>
block|{
name|public
operator|:
name|explicit
name|AsanChunkFifoList
argument_list|(
argument|LinkerInitialized
argument_list|)
block|{ }
name|AsanChunkFifoList
argument_list|()
block|{
name|clear
argument_list|()
block|; }
name|void
name|Push
argument_list|(
name|AsanChunk
operator|*
name|n
argument_list|)
block|;
name|void
name|PushList
argument_list|(
name|AsanChunkFifoList
operator|*
name|q
argument_list|)
block|;
name|AsanChunk
operator|*
name|Pop
argument_list|()
block|;
name|uptr
name|size
argument_list|()
block|{
return|return
name|size_
return|;
block|}
name|void
name|clear
argument_list|()
block|{
name|IntrusiveList
operator|<
name|AsanChunk
operator|>
operator|::
name|clear
argument_list|()
block|;
name|size_
operator|=
literal|0
block|;   }
name|private
operator|:
name|uptr
name|size_
block|; }
decl_stmt|;
struct|struct
name|AsanThreadLocalMallocStorage
block|{
name|explicit
name|AsanThreadLocalMallocStorage
parameter_list|(
name|LinkerInitialized
name|x
parameter_list|)
block|{ }
name|AsanThreadLocalMallocStorage
argument_list|()
block|{
name|CHECK
argument_list|(
name|REAL
argument_list|(
name|memset
argument_list|)
argument_list|)
expr_stmt|;
name|REAL
argument_list|(
name|memset
argument_list|)
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|AsanThreadLocalMallocStorage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|uptr
name|quarantine_cache
index|[
literal|16
index|]
decl_stmt|;
name|uptr
name|allocator2_cache
index|[
literal|96
operator|*
operator|(
literal|512
operator|*
literal|8
operator|+
literal|16
operator|)
index|]
decl_stmt|;
comment|// Opaque.
name|void
name|CommitBack
parameter_list|()
function_decl|;
block|}
struct|;
name|void
modifier|*
name|asan_memalign
parameter_list|(
name|uptr
name|alignment
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|,
name|AllocType
name|alloc_type
parameter_list|)
function_decl|;
name|void
name|asan_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|,
name|AllocType
name|alloc_type
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_malloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_calloc
parameter_list|(
name|uptr
name|nmemb
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_realloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_valloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_pvalloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|int
name|asan_posix_memalign
parameter_list|(
name|void
modifier|*
modifier|*
name|memptr
parameter_list|,
name|uptr
name|alignment
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|uptr
name|asan_malloc_usable_size
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|uptr
name|asan_mz_size
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|void
name|asan_mz_force_lock
parameter_list|()
function_decl|;
name|void
name|asan_mz_force_unlock
parameter_list|()
function_decl|;
name|void
name|PrintInternalAllocatorStats
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __asan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ASAN_ALLOCATOR_H
end_comment

end_unit

