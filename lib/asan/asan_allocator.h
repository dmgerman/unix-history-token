begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- asan_allocator.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of AddressSanitizer, an address sanity checker.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ASan-private header for asan_allocator.cc.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ASAN_ALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|ASAN_ALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|"asan_internal.h"
end_include

begin_include
include|#
directive|include
file|"asan_interceptors.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_list.h"
end_include

begin_comment
comment|// We are in the process of transitioning from the old allocator (version 1)
end_comment

begin_comment
comment|// to a new one (version 2). The change is quite intrusive so both allocators
end_comment

begin_comment
comment|// will co-exist in the source base for a while. The actual allocator is chosen
end_comment

begin_comment
comment|// at build time by redefining this macro.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ASAN_ALLOCATOR_VERSION
end_ifndef

begin_if
if|#
directive|if
name|ASAN_LINUX
operator|&&
operator|!
name|ASAN_ANDROID
end_if

begin_define
define|#
directive|define
name|ASAN_ALLOCATOR_VERSION
value|2
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ASAN_ALLOCATOR_VERSION
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ASAN_ALLOCATOR_VERSION
end_comment

begin_decl_stmt
name|namespace
name|__asan
block|{
enum|enum
name|AllocType
block|{
name|FROM_MALLOC
init|=
literal|1
block|,
comment|// Memory block came from malloc, calloc, realloc, etc.
name|FROM_NEW
init|=
literal|2
block|,
comment|// Memory block came from operator new.
name|FROM_NEW_BR
init|=
literal|3
comment|// Memory block came from operator new [ ]
block|}
enum|;
specifier|static
specifier|const
name|uptr
name|kNumberOfSizeClasses
init|=
literal|255
decl_stmt|;
struct_decl|struct
name|AsanChunk
struct_decl|;
name|class
name|AsanChunkView
block|{
name|public
label|:
name|explicit
name|AsanChunkView
argument_list|(
name|AsanChunk
operator|*
name|chunk
argument_list|)
operator|:
name|chunk_
argument_list|(
argument|chunk
argument_list|)
block|{}
name|bool
name|IsValid
argument_list|()
block|{
return|return
name|chunk_
operator|!=
literal|0
return|;
block|}
name|uptr
name|Beg
parameter_list|()
function_decl|;
comment|// first byte of user memory.
name|uptr
name|End
parameter_list|()
function_decl|;
comment|// last byte of user memory.
name|uptr
name|UsedSize
parameter_list|()
function_decl|;
comment|// size requested by the user.
name|uptr
name|AllocTid
parameter_list|()
function_decl|;
name|uptr
name|FreeTid
parameter_list|()
function_decl|;
name|void
name|GetAllocStack
parameter_list|(
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
name|GetFreeStack
parameter_list|(
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|bool
name|AddrIsInside
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|uptr
modifier|*
name|offset
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|>=
name|Beg
argument_list|()
operator|&&
operator|(
name|addr
operator|+
name|access_size
operator|)
operator|<=
name|End
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|addr
operator|-
name|Beg
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|AddrIsAtLeft
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|uptr
modifier|*
name|offset
parameter_list|)
block|{
operator|(
name|void
operator|)
name|access_size
expr_stmt|;
if|if
condition|(
name|addr
operator|<
name|Beg
argument_list|()
condition|)
block|{
operator|*
name|offset
operator|=
name|Beg
argument_list|()
operator|-
name|addr
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|AddrIsAtRight
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|access_size
parameter_list|,
name|uptr
modifier|*
name|offset
parameter_list|)
block|{
if|if
condition|(
name|addr
operator|+
name|access_size
operator|>=
name|End
argument_list|()
condition|)
block|{
if|if
condition|(
name|addr
operator|<=
name|End
argument_list|()
condition|)
operator|*
name|offset
operator|=
literal|0
expr_stmt|;
else|else
operator|*
name|offset
operator|=
name|addr
operator|-
name|End
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|private
label|:
name|AsanChunk
modifier|*
specifier|const
name|chunk_
decl_stmt|;
block|}
empty_stmt|;
name|AsanChunkView
name|FindHeapChunkByAddress
parameter_list|(
name|uptr
name|address
parameter_list|)
function_decl|;
comment|// List of AsanChunks with total size.
name|class
name|AsanChunkFifoList
range|:
name|public
name|IntrusiveList
operator|<
name|AsanChunk
operator|>
block|{
name|public
operator|:
name|explicit
name|AsanChunkFifoList
argument_list|(
argument|LinkerInitialized
argument_list|)
block|{ }
name|AsanChunkFifoList
argument_list|()
block|{
name|clear
argument_list|()
block|; }
name|void
name|Push
argument_list|(
name|AsanChunk
operator|*
name|n
argument_list|)
block|;
name|void
name|PushList
argument_list|(
name|AsanChunkFifoList
operator|*
name|q
argument_list|)
block|;
name|AsanChunk
operator|*
name|Pop
argument_list|()
block|;
name|uptr
name|size
argument_list|()
block|{
return|return
name|size_
return|;
block|}
name|void
name|clear
argument_list|()
block|{
name|IntrusiveList
operator|<
name|AsanChunk
operator|>
operator|::
name|clear
argument_list|()
block|;
name|size_
operator|=
literal|0
block|;   }
name|private
operator|:
name|uptr
name|size_
block|; }
decl_stmt|;
struct|struct
name|AsanThreadLocalMallocStorage
block|{
name|explicit
name|AsanThreadLocalMallocStorage
argument_list|(
argument|LinkerInitialized x
argument_list|)
if|#
directive|if
name|ASAN_ALLOCATOR_VERSION
operator|==
literal|1
block|:
name|quarantine_
argument_list|(
argument|x
argument_list|)
endif|#
directive|endif
block|{ }
name|AsanThreadLocalMallocStorage
argument_list|()
block|{
name|CHECK
argument_list|(
name|REAL
argument_list|(
name|memset
argument_list|)
argument_list|)
expr_stmt|;
name|REAL
argument_list|(
name|memset
argument_list|)
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|AsanThreadLocalMallocStorage
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|ASAN_ALLOCATOR_VERSION
operator|==
literal|1
name|AsanChunkFifoList
name|quarantine_
decl_stmt|;
name|AsanChunk
modifier|*
name|free_lists_
index|[
name|kNumberOfSizeClasses
index|]
decl_stmt|;
else|#
directive|else
name|uptr
name|quarantine_cache
index|[
literal|16
index|]
decl_stmt|;
name|uptr
name|allocator2_cache
index|[
literal|96
operator|*
operator|(
literal|512
operator|*
literal|8
operator|+
literal|16
operator|)
index|]
decl_stmt|;
comment|// Opaque.
endif|#
directive|endif
name|void
name|CommitBack
parameter_list|()
function_decl|;
block|}
struct|;
comment|// Fake stack frame contains local variables of one function.
comment|// This struct should fit into a stack redzone (32 bytes).
struct|struct
name|FakeFrame
block|{
name|uptr
name|magic
decl_stmt|;
comment|// Modified by the instrumented code.
name|uptr
name|descr
decl_stmt|;
comment|// Modified by the instrumented code.
name|FakeFrame
modifier|*
name|next
decl_stmt|;
name|u64
name|real_stack
range|:
literal|48
decl_stmt|;
name|u64
name|size_minus_one
range|:
literal|16
decl_stmt|;
block|}
struct|;
struct|struct
name|FakeFrameFifo
block|{
name|public
label|:
name|void
name|FifoPush
parameter_list|(
name|FakeFrame
modifier|*
name|node
parameter_list|)
function_decl|;
name|FakeFrame
modifier|*
name|FifoPop
parameter_list|()
function_decl|;
name|private
label|:
name|FakeFrame
modifier|*
name|first_
decl_stmt|,
modifier|*
name|last_
decl_stmt|;
block|}
struct|;
name|class
name|FakeFrameLifo
block|{
name|public
label|:
name|void
name|LifoPush
parameter_list|(
name|FakeFrame
modifier|*
name|node
parameter_list|)
block|{
name|node
operator|->
name|next
operator|=
name|top_
expr_stmt|;
name|top_
operator|=
name|node
expr_stmt|;
block|}
name|void
name|LifoPop
parameter_list|()
block|{
name|CHECK
argument_list|(
name|top_
argument_list|)
expr_stmt|;
name|top_
operator|=
name|top_
operator|->
name|next
expr_stmt|;
block|}
name|FakeFrame
modifier|*
name|top
parameter_list|()
block|{
return|return
name|top_
return|;
block|}
name|private
label|:
name|FakeFrame
modifier|*
name|top_
decl_stmt|;
block|}
empty_stmt|;
comment|// For each thread we create a fake stack and place stack objects on this fake
comment|// stack instead of the real stack. The fake stack is not really a stack but
comment|// a fast malloc-like allocator so that when a function exits the fake stack
comment|// is not poped but remains there for quite some time until gets used again.
comment|// So, we poison the objects on the fake stack when function returns.
comment|// It helps us find use-after-return bugs.
comment|// We can not rely on __asan_stack_free being called on every function exit,
comment|// so we maintain a lifo list of all current fake frames and update it on every
comment|// call to __asan_stack_malloc.
name|class
name|FakeStack
block|{
name|public
label|:
name|FakeStack
argument_list|()
expr_stmt|;
name|explicit
name|FakeStack
parameter_list|(
name|LinkerInitialized
parameter_list|)
block|{}
name|void
name|Init
parameter_list|(
name|uptr
name|stack_size
parameter_list|)
function_decl|;
name|void
name|StopUsingFakeStack
parameter_list|()
block|{
name|alive_
operator|=
name|false
expr_stmt|;
block|}
name|void
name|Cleanup
parameter_list|()
function_decl|;
name|uptr
name|AllocateStack
parameter_list|(
name|uptr
name|size
parameter_list|,
name|uptr
name|real_stack
parameter_list|)
function_decl|;
specifier|static
name|void
name|OnFree
parameter_list|(
name|uptr
name|ptr
parameter_list|,
name|uptr
name|size
parameter_list|,
name|uptr
name|real_stack
parameter_list|)
function_decl|;
comment|// Return the bottom of the maped region.
name|uptr
name|AddrIsInFakeStack
parameter_list|(
name|uptr
name|addr
parameter_list|)
function_decl|;
name|bool
name|StackSize
parameter_list|()
block|{
return|return
name|stack_size_
return|;
block|}
name|private
label|:
specifier|static
specifier|const
name|uptr
name|kMinStackFrameSizeLog
init|=
literal|9
decl_stmt|;
comment|// Min frame is 512B.
specifier|static
specifier|const
name|uptr
name|kMaxStackFrameSizeLog
init|=
literal|16
decl_stmt|;
comment|// Max stack frame is 64K.
specifier|static
specifier|const
name|uptr
name|kMaxStackMallocSize
init|=
literal|1
operator|<<
name|kMaxStackFrameSizeLog
decl_stmt|;
specifier|static
specifier|const
name|uptr
name|kNumberOfSizeClasses
init|=
name|kMaxStackFrameSizeLog
operator|-
name|kMinStackFrameSizeLog
operator|+
literal|1
decl_stmt|;
name|bool
name|AddrIsInSizeClass
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|size_class
parameter_list|)
function_decl|;
comment|// Each size class should be large enough to hold all frames.
name|uptr
name|ClassMmapSize
parameter_list|(
name|uptr
name|size_class
parameter_list|)
function_decl|;
name|uptr
name|ClassSize
parameter_list|(
name|uptr
name|size_class
parameter_list|)
block|{
return|return
literal|1UL
operator|<<
operator|(
name|size_class
operator|+
name|kMinStackFrameSizeLog
operator|)
return|;
block|}
name|void
name|DeallocateFrame
parameter_list|(
name|FakeFrame
modifier|*
name|fake_frame
parameter_list|)
function_decl|;
name|uptr
name|ComputeSizeClass
parameter_list|(
name|uptr
name|alloc_size
parameter_list|)
function_decl|;
name|void
name|AllocateOneSizeClass
parameter_list|(
name|uptr
name|size_class
parameter_list|)
function_decl|;
name|uptr
name|stack_size_
decl_stmt|;
name|bool
name|alive_
decl_stmt|;
name|uptr
name|allocated_size_classes_
index|[
name|kNumberOfSizeClasses
index|]
decl_stmt|;
name|FakeFrameFifo
name|size_classes_
index|[
name|kNumberOfSizeClasses
index|]
decl_stmt|;
name|FakeFrameLifo
name|call_stack_
decl_stmt|;
block|}
empty_stmt|;
name|void
modifier|*
name|asan_memalign
parameter_list|(
name|uptr
name|alignment
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|,
name|AllocType
name|alloc_type
parameter_list|)
function_decl|;
name|void
name|asan_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|,
name|AllocType
name|alloc_type
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_malloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_calloc
parameter_list|(
name|uptr
name|nmemb
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_realloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_valloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
modifier|*
name|asan_pvalloc
parameter_list|(
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|int
name|asan_posix_memalign
parameter_list|(
name|void
modifier|*
modifier|*
name|memptr
parameter_list|,
name|uptr
name|alignment
parameter_list|,
name|uptr
name|size
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|uptr
name|asan_malloc_usable_size
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|uptr
name|asan_mz_size
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
name|void
name|asan_mz_force_lock
parameter_list|()
function_decl|;
name|void
name|asan_mz_force_unlock
parameter_list|()
function_decl|;
name|void
name|PrintInternalAllocatorStats
parameter_list|()
function_decl|;
comment|// Log2 and RoundUpToPowerOfTwo should be inlined for performance.
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__clang__
argument_list|)
extern|extern
literal|"C"
block|{
name|unsigned
name|char
name|_BitScanForward
parameter_list|(
name|unsigned
name|long
modifier|*
name|index
parameter_list|,
name|unsigned
name|long
name|mask
parameter_list|)
function_decl|;
comment|// NOLINT
name|unsigned
name|char
name|_BitScanReverse
parameter_list|(
name|unsigned
name|long
modifier|*
name|index
parameter_list|,
name|unsigned
name|long
name|mask
parameter_list|)
function_decl|;
comment|// NOLINT
if|#
directive|if
name|defined
argument_list|(
name|_WIN64
argument_list|)
name|unsigned
name|char
name|_BitScanForward64
parameter_list|(
name|unsigned
name|long
modifier|*
name|index
parameter_list|,
name|unsigned
name|__int64
name|mask
parameter_list|)
function_decl|;
comment|// NOLINT
name|unsigned
name|char
name|_BitScanReverse64
parameter_list|(
name|unsigned
name|long
modifier|*
name|index
parameter_list|,
name|unsigned
name|__int64
name|mask
parameter_list|)
function_decl|;
comment|// NOLINT
endif|#
directive|endif
block|}
endif|#
directive|endif
specifier|static
specifier|inline
name|uptr
name|Log2
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
name|CHECK
argument_list|(
name|IsPowerOfTwo
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|__clang__
argument_list|)
return|return
name|__builtin_ctzl
argument_list|(
name|x
argument_list|)
return|;
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN64
argument_list|)
name|unsigned
name|long
name|ret
decl_stmt|;
comment|// NOLINT
name|_BitScanForward64
argument_list|(
operator|&
name|ret
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
else|#
directive|else
name|unsigned
name|long
name|ret
decl_stmt|;
comment|// NOLINT
name|_BitScanForward
argument_list|(
operator|&
name|ret
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
endif|#
directive|endif
block|}
specifier|static
specifier|inline
name|uptr
name|RoundUpToPowerOfTwo
parameter_list|(
name|uptr
name|size
parameter_list|)
block|{
name|CHECK
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|IsPowerOfTwo
argument_list|(
name|size
argument_list|)
condition|)
return|return
name|size
return|;
name|unsigned
name|long
name|up
decl_stmt|;
comment|// NOLINT
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|__clang__
argument_list|)
name|up
operator|=
name|SANITIZER_WORDSIZE
operator|-
literal|1
operator|-
name|__builtin_clzl
argument_list|(
name|size
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN64
argument_list|)
name|_BitScanReverse64
argument_list|(
operator|&
name|up
argument_list|,
name|size
argument_list|)
expr_stmt|;
else|#
directive|else
name|_BitScanReverse
argument_list|(
operator|&
name|up
argument_list|,
name|size
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|CHECK
argument_list|(
name|size
operator|<
operator|(
literal|1ULL
operator|<<
operator|(
name|up
operator|+
literal|1
operator|)
operator|)
argument_list|)
expr_stmt|;
name|CHECK
argument_list|(
name|size
operator|>
operator|(
literal|1ULL
operator|<<
name|up
operator|)
argument_list|)
expr_stmt|;
return|return
literal|1UL
operator|<<
operator|(
name|up
operator|+
literal|1
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace __asan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ASAN_ALLOCATOR_H
end_comment

end_unit

