begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-2-Clause-FreeBSD  *  * Copyright (c) 2005 David Xu<davidxu@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_THR_FBSD_UMTX_H_
end_ifndef

begin_define
define|#
directive|define
name|_THR_FBSD_UMTX_H_
end_define

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_include
include|#
directive|include
file|<sys/umtx.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__LP64__
end_ifdef

begin_define
define|#
directive|define
name|DEFAULT_UMUTEX
value|{0,0,{0,0},0,{0,0}}
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DEFAULT_UMUTEX
value|{0,0,{0,0},0,0,{0,0}}
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|DEFAULT_URWLOCK
value|{0,0,0,0,{0,0,0,0}}
end_define

begin_decl_stmt
name|int
name|_umtx_op_err
argument_list|(
name|void
operator|*
argument_list|,
name|int
name|op
argument_list|,
name|u_long
argument_list|,
name|void
operator|*
argument_list|,
name|void
operator|*
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_lock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
name|uint32_t
name|id
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_lock_spin
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
name|uint32_t
name|id
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_timedlock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
name|uint32_t
name|id
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_unlock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_trylock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_set_ceiling
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
name|uint32_t
name|ceiling
argument_list|,
name|uint32_t
operator|*
name|oldceiling
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_umutex_init
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_urwlock_init
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwl
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wait
argument_list|(
specifier|volatile
name|long
operator|*
name|mtx
argument_list|,
name|long
name|exp
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wait_uint
argument_list|(
specifier|volatile
name|u_int
operator|*
name|mtx
argument_list|,
name|u_int
name|exp
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|,
name|int
name|shared
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_timedwait_uint
argument_list|(
specifier|volatile
name|u_int
operator|*
name|mtx
argument_list|,
name|u_int
name|exp
argument_list|,
name|int
name|clockid
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|,
name|int
name|shared
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wake
argument_list|(
specifier|volatile
name|void
operator|*
name|mtx
argument_list|,
name|int
name|count
argument_list|,
name|int
name|shared
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_wait
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|,
expr|struct
name|umutex
operator|*
name|m
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|,
name|int
name|flags
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_ucond_init
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_signal
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_broadcast
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_rwlock_rdlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|,
name|int
name|flags
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|tsp
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_rwlock_wrlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|tsp
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_rwlock_unlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Internal used only */
end_comment

begin_decl_stmt
name|void
name|_thr_rwl_rdlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_rwl_wrlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_rwl_unlock
argument_list|(
expr|struct
name|urwlock
operator|*
name|rwlock
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_trylock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
name|__predict_false
argument_list|(
operator|(
name|uint32_t
operator|)
name|mtx
operator|->
name|m_owner
operator|==
name|UMUTEX_RB_OWNERDEAD
argument_list|)
operator|&&
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_RB_OWNERDEAD
argument_list|,
name|id
operator||
name|UMUTEX_CONTESTED
argument_list|)
condition|)
return|return
operator|(
name|EOWNERDEAD
operator|)
return|;
if|if
condition|(
name|__predict_false
argument_list|(
operator|(
name|uint32_t
operator|)
name|mtx
operator|->
name|m_owner
operator|==
name|UMUTEX_RB_NOTRECOV
argument_list|)
condition|)
return|return
operator|(
name|ENOTRECOVERABLE
operator|)
return|;
if|if
condition|(
operator|(
name|mtx
operator|->
name|m_flags
operator|&
name|UMUTEX_PRIO_PROTECT
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
name|EBUSY
operator|)
return|;
return|return
operator|(
name|__thr_umutex_trylock
argument_list|(
name|mtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_trylock2
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
operator|(
name|uint32_t
operator|)
name|mtx
operator|->
name|m_owner
operator|==
name|UMUTEX_CONTESTED
operator|&&
name|__predict_true
argument_list|(
operator|(
name|mtx
operator|->
name|m_flags
operator|&
operator|(
name|UMUTEX_PRIO_PROTECT
operator||
name|UMUTEX_PRIO_INHERIT
operator|)
operator|)
operator|==
literal|0
argument_list|)
operator|&&
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_CONTESTED
argument_list|,
name|id
operator||
name|UMUTEX_CONTESTED
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
name|__predict_false
argument_list|(
operator|(
name|uint32_t
operator|)
name|mtx
operator|->
name|m_owner
operator|==
name|UMUTEX_RB_OWNERDEAD
argument_list|)
operator|&&
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_RB_OWNERDEAD
argument_list|,
name|id
operator||
name|UMUTEX_CONTESTED
argument_list|)
condition|)
return|return
operator|(
name|EOWNERDEAD
operator|)
return|;
if|if
condition|(
name|__predict_false
argument_list|(
operator|(
name|uint32_t
operator|)
name|mtx
operator|->
name|m_owner
operator|==
name|UMUTEX_RB_NOTRECOV
argument_list|)
condition|)
return|return
operator|(
name|ENOTRECOVERABLE
operator|)
return|;
return|return
operator|(
name|EBUSY
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_lock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|_thr_umutex_trylock2
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_lock
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_lock_spin
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|_thr_umutex_trylock2
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_lock_spin
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_timedlock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|_thr_umutex_trylock2
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_timedlock
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|,
name|timeout
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_unlock2
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|,
name|int
modifier|*
name|defer
parameter_list|)
block|{
name|uint32_t
name|flags
decl_stmt|,
name|owner
decl_stmt|;
name|bool
name|noncst
decl_stmt|;
name|flags
operator|=
name|mtx
operator|->
name|m_flags
expr_stmt|;
name|noncst
operator|=
operator|(
name|flags
operator|&
name|UMUTEX_NONCONSISTENT
operator|)
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
operator|(
name|UMUTEX_PRIO_PROTECT
operator||
name|UMUTEX_PRIO_INHERIT
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|atomic_cmpset_rel_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|id
argument_list|,
name|noncst
condition|?
name|UMUTEX_RB_NOTRECOV
else|:
name|UMUTEX_UNOWNED
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_unlock
argument_list|(
name|mtx
argument_list|)
operator|)
return|;
block|}
do|do
block|{
name|owner
operator|=
name|mtx
operator|->
name|m_owner
expr_stmt|;
if|if
condition|(
name|__predict_false
argument_list|(
operator|(
name|owner
operator|&
operator|~
name|UMUTEX_CONTESTED
operator|)
operator|!=
name|id
argument_list|)
condition|)
return|return
operator|(
name|EPERM
operator|)
return|;
block|}
do|while
condition|(
name|__predict_false
argument_list|(
operator|!
name|atomic_cmpset_rel_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|owner
argument_list|,
name|noncst
condition|?
name|UMUTEX_RB_NOTRECOV
else|:
name|UMUTEX_UNOWNED
argument_list|)
argument_list|)
condition|)
do|;
if|if
condition|(
operator|(
name|owner
operator|&
name|UMUTEX_CONTESTED
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|defer
operator|==
name|NULL
operator|||
name|noncst
condition|)
operator|(
name|void
operator|)
name|_umtx_op_err
argument_list|(
name|mtx
argument_list|,
name|UMTX_OP_MUTEX_WAKE2
argument_list|,
name|flags
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
operator|*
name|defer
operator|=
literal|1
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_unlock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
return|return
operator|(
name|_thr_umutex_unlock2
argument_list|(
name|mtx
argument_list|,
name|id
argument_list|,
name|NULL
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_rwlock_tryrdlock
parameter_list|(
name|struct
name|urwlock
modifier|*
name|rwlock
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|int32_t
name|state
decl_stmt|,
name|wrflags
decl_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|URWLOCK_PREFER_READER
operator|)
operator|!=
literal|0
operator|||
operator|(
name|rwlock
operator|->
name|rw_flags
operator|&
name|URWLOCK_PREFER_READER
operator|)
operator|!=
literal|0
condition|)
name|wrflags
operator|=
name|URWLOCK_WRITE_OWNER
expr_stmt|;
else|else
name|wrflags
operator|=
name|URWLOCK_WRITE_OWNER
operator||
name|URWLOCK_WRITE_WAITERS
expr_stmt|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
while|while
condition|(
operator|!
operator|(
name|state
operator|&
name|wrflags
operator|)
condition|)
block|{
if|if
condition|(
name|__predict_false
argument_list|(
name|URWLOCK_READER_COUNT
argument_list|(
name|state
argument_list|)
operator|==
name|URWLOCK_MAX_READERS
argument_list|)
condition|)
return|return
operator|(
name|EAGAIN
operator|)
return|;
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|rwlock
operator|->
name|rw_state
argument_list|,
name|state
argument_list|,
name|state
operator|+
literal|1
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
block|}
return|return
operator|(
name|EBUSY
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_rwlock_trywrlock
parameter_list|(
name|struct
name|urwlock
modifier|*
name|rwlock
parameter_list|)
block|{
name|int32_t
name|state
decl_stmt|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
while|while
condition|(
operator|(
name|state
operator|&
name|URWLOCK_WRITE_OWNER
operator|)
operator|==
literal|0
operator|&&
name|URWLOCK_READER_COUNT
argument_list|(
name|state
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|rwlock
operator|->
name|rw_state
argument_list|,
name|state
argument_list|,
name|state
operator||
name|URWLOCK_WRITE_OWNER
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
block|}
return|return
operator|(
name|EBUSY
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_rwlock_rdlock
parameter_list|(
name|struct
name|urwlock
modifier|*
name|rwlock
parameter_list|,
name|int
name|flags
parameter_list|,
name|struct
name|timespec
modifier|*
name|tsp
parameter_list|)
block|{
if|if
condition|(
name|_thr_rwlock_tryrdlock
argument_list|(
name|rwlock
argument_list|,
name|flags
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_rwlock_rdlock
argument_list|(
name|rwlock
argument_list|,
name|flags
argument_list|,
name|tsp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_rwlock_wrlock
parameter_list|(
name|struct
name|urwlock
modifier|*
name|rwlock
parameter_list|,
name|struct
name|timespec
modifier|*
name|tsp
parameter_list|)
block|{
if|if
condition|(
name|_thr_rwlock_trywrlock
argument_list|(
name|rwlock
argument_list|)
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_rwlock_wrlock
argument_list|(
name|rwlock
argument_list|,
name|tsp
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_rwlock_unlock
parameter_list|(
name|struct
name|urwlock
modifier|*
name|rwlock
parameter_list|)
block|{
name|int32_t
name|state
decl_stmt|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
if|if
condition|(
operator|(
name|state
operator|&
name|URWLOCK_WRITE_OWNER
operator|)
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|atomic_cmpset_rel_32
argument_list|(
operator|&
name|rwlock
operator|->
name|rw_state
argument_list|,
name|URWLOCK_WRITE_OWNER
argument_list|,
literal|0
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
block|}
else|else
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|__predict_false
argument_list|(
name|URWLOCK_READER_COUNT
argument_list|(
name|state
argument_list|)
operator|==
literal|0
argument_list|)
condition|)
return|return
operator|(
name|EPERM
operator|)
return|;
if|if
condition|(
operator|!
operator|(
operator|(
name|state
operator|&
operator|(
name|URWLOCK_WRITE_WAITERS
operator||
name|URWLOCK_READ_WAITERS
operator|)
operator|)
operator|!=
literal|0
operator|&&
name|URWLOCK_READER_COUNT
argument_list|(
name|state
argument_list|)
operator|==
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|atomic_cmpset_rel_32
argument_list|(
operator|&
name|rwlock
operator|->
name|rw_state
argument_list|,
name|state
argument_list|,
name|state
operator|-
literal|1
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|state
operator|=
name|rwlock
operator|->
name|rw_state
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
return|return
operator|(
name|__thr_rwlock_unlock
argument_list|(
name|rwlock
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

