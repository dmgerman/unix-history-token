begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005 David Xu<davidxu@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_THR_FBSD_UMTX_H_
end_ifndef

begin_define
define|#
directive|define
name|_THR_FBSD_UMTX_H_
end_define

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_include
include|#
directive|include
file|<sys/umtx.h>
end_include

begin_define
define|#
directive|define
name|DEFAULT_UMUTEX
value|{0,0, {0,0},{0,0,0,0}}
end_define

begin_decl_stmt
name|int
name|__thr_umutex_lock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_timedlock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_unlock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_trylock
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__thr_umutex_set_ceiling
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|,
name|uint32_t
name|ceiling
argument_list|,
name|uint32_t
operator|*
name|oldceiling
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_umutex_init
argument_list|(
expr|struct
name|umutex
operator|*
name|mtx
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wait
argument_list|(
specifier|volatile
name|long
operator|*
name|mtx
argument_list|,
name|long
name|exp
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wait_uint
argument_list|(
specifier|volatile
name|u_int
operator|*
name|mtx
argument_list|,
name|u_int
name|exp
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_umtx_wake
argument_list|(
specifier|volatile
name|void
operator|*
name|mtx
argument_list|,
name|int
name|count
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_wait
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|,
expr|struct
name|umutex
operator|*
name|m
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|timeout
argument_list|,
name|int
name|check_unpaking
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|_thr_ucond_init
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_signal
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|_thr_ucond_broadcast
argument_list|(
expr|struct
name|ucond
operator|*
name|cv
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_trylock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
operator|(
name|mtx
operator|->
name|m_flags
operator|&
name|UMUTEX_PRIO_PROTECT
operator|)
operator|==
literal|0
condition|)
return|return
operator|(
name|EBUSY
operator|)
return|;
return|return
operator|(
name|__thr_umutex_trylock
argument_list|(
name|mtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_trylock2
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|EBUSY
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_lock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_lock
argument_list|(
name|mtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_timedlock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_acq_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|UMUTEX_UNOWNED
argument_list|,
name|id
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_timedlock
argument_list|(
name|mtx
argument_list|,
name|timeout
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|_thr_umutex_unlock
parameter_list|(
name|struct
name|umutex
modifier|*
name|mtx
parameter_list|,
name|uint32_t
name|id
parameter_list|)
block|{
if|if
condition|(
name|atomic_cmpset_rel_32
argument_list|(
operator|&
name|mtx
operator|->
name|m_owner
argument_list|,
name|id
argument_list|,
name|UMUTEX_UNOWNED
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|__thr_umutex_unlock
argument_list|(
name|mtx
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

