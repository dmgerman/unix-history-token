begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1995  *	Paul Richards.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer,   *    verbatim and that no modifications are made prior to this   *    point in the file.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by Paul Richards.  * 4. The name Paul Richards may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY PAUL RICHARDS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL PAUL RICHARDS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FORMS_H_
end_ifndef

begin_define
define|#
directive|define
name|_FORMS_H_
end_define

begin_include
include|#
directive|include
file|<ncurses.h>
end_include

begin_include
include|#
directive|include
file|<strhash.h>
end_include

begin_define
define|#
directive|define
name|F_DEFATTR
value|0
end_define

begin_define
define|#
directive|define
name|F_SELATTR
value|A_REVERSE
end_define

begin_comment
comment|/* Status values */
end_comment

begin_define
define|#
directive|define
name|ST_ERROR
value|-1
end_define

begin_define
define|#
directive|define
name|ST_OK
value|0
end_define

begin_define
define|#
directive|define
name|ST_DONE
value|1
end_define

begin_define
define|#
directive|define
name|ST_CANCEL
value|2
end_define

begin_define
define|#
directive|define
name|ST_NOBIND
value|3
end_define

begin_define
define|#
directive|define
name|ST_RUNNING
value|4
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|TT_ANY
block|,
name|TT_OBJ_INST
block|,
name|TT_OBJ_DEF
block|,
name|TT_FUNC
block|,
name|TT_DISPLAY
block|,
name|TT_ATTR
block|}
name|TupleType
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|DT_ANY
block|,
name|DT_NCURSES
block|,
name|DT_X
block|,
name|DT_VGA
block|}
name|DisplayType
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|OT_ACTION
block|,
name|OT_COMPOUND
block|,
name|OT_FUNCTION
block|,
name|OT_INPUT
block|,
name|OT_MENU
block|,
name|OT_SHADOW
block|,
name|OT_TEXT
block|}
name|ObjectType
typedef|;
end_typedef

begin_define
define|#
directive|define
name|FUNCP
value|void(*)(void *)
end_define

begin_typedef
typedef|typedef
struct|struct
name|Tuple
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|type
decl_stmt|;
name|void
function_decl|(
modifier|*
name|addr
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
name|TUPLE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|NcursesDevice
block|{
name|char
modifier|*
name|ttyname
decl_stmt|;
name|char
modifier|*
name|input
decl_stmt|;
name|char
modifier|*
name|output
decl_stmt|;
name|SCREEN
modifier|*
name|screen
decl_stmt|;
block|}
name|NCURSDEV
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|NcursesWindow
block|{
name|WINDOW
modifier|*
name|win
decl_stmt|;
block|}
name|NCURSES_WINDOW
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|Display
block|{
name|DisplayType
name|type
decl_stmt|;
name|int
name|height
decl_stmt|;
name|int
name|width
decl_stmt|;
name|int
name|virt_height
decl_stmt|;
name|int
name|virt_width
decl_stmt|;
union|union
block|{
name|NCURSDEV
modifier|*
name|ncurses
decl_stmt|;
block|}
name|device
union|;
name|hash_table
modifier|*
name|bind
decl_stmt|;
block|}
name|DISPLAY
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ActionObject
block|{
name|char
modifier|*
name|text
decl_stmt|;
name|char
modifier|*
name|action
decl_stmt|;
block|}
name|ACTION_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|CompoundObject
block|{
name|char
modifier|*
name|defobj
decl_stmt|;
block|}
name|COMPOUND_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|FunctionObject
block|{
name|char
modifier|*
name|fn
decl_stmt|;
block|}
name|FUNCTION_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|InputObject
block|{
name|int
name|lbl_flag
decl_stmt|;
name|char
modifier|*
name|label
decl_stmt|;
name|char
modifier|*
name|input
decl_stmt|;
name|int
name|limit
decl_stmt|;
block|}
name|INPUT_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|MenuObject
block|{
name|int
name|selected
decl_stmt|;
name|int
name|no_options
decl_stmt|;
name|char
modifier|*
modifier|*
name|options
decl_stmt|;
block|}
name|MENU_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|TextObject
block|{
name|char
modifier|*
name|text
decl_stmt|;
block|}
name|TEXT_OBJECT
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|NCURSES_WINDOW
modifier|*
name|ncurses
decl_stmt|;
block|}
name|WIN
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
block|{
name|ACTION_OBJECT
modifier|*
name|action
decl_stmt|;
name|COMPOUND_OBJECT
modifier|*
name|compound
decl_stmt|;
name|FUNCTION_OBJECT
modifier|*
name|function
decl_stmt|;
name|INPUT_OBJECT
modifier|*
name|input
decl_stmt|;
name|MENU_OBJECT
modifier|*
name|menu
decl_stmt|;
name|TEXT_OBJECT
modifier|*
name|text
decl_stmt|;
block|}
name|OBJ_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|Object
block|{
name|ObjectType
name|type
decl_stmt|;
name|int
name|status
decl_stmt|;
name|struct
name|Object
modifier|*
name|parent
decl_stmt|;
name|int
name|y
decl_stmt|;
name|int
name|x
decl_stmt|;
name|int
name|height
decl_stmt|;
name|int
name|width
decl_stmt|;
name|char
modifier|*
name|attributes
decl_stmt|;
name|char
modifier|*
name|highlight
decl_stmt|;
name|char
modifier|*
name|lnext
decl_stmt|;
name|char
modifier|*
name|lup
decl_stmt|;
name|char
modifier|*
name|ldown
decl_stmt|;
name|char
modifier|*
name|lleft
decl_stmt|;
name|char
modifier|*
name|lright
decl_stmt|;
name|char
modifier|*
name|UserDrawFunc
decl_stmt|;
name|char
modifier|*
name|UserProcFunc
decl_stmt|;
name|char
modifier|*
name|OnEntry
decl_stmt|;
name|char
modifier|*
name|OnExit
decl_stmt|;
name|OBJ_TYPE
name|object
decl_stmt|;
name|hash_table
modifier|*
name|bind
decl_stmt|;
name|struct
name|Display
modifier|*
name|display
decl_stmt|;
name|WIN
name|window
decl_stmt|;
block|}
name|OBJECT
typedef|;
end_typedef

begin_comment
comment|/* Externally visible variables */
end_comment

begin_decl_stmt
specifier|extern
name|hash_table
modifier|*
name|root_table
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Function declarations */
end_comment

begin_function_decl
name|__inline
name|struct
name|Tuple
modifier|*
name|get_tuple
parameter_list|(
name|hash_table
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|TupleType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|TUPLE
modifier|*
name|tuple_search
parameter_list|(
name|OBJECT
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|TupleType
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bind_tuple
parameter_list|(
name|hash_table
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|TupleType
parameter_list|,
name|void
function_decl|(
modifier|*
name|fn
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|add_menu_option
parameter_list|(
name|MENU_OBJECT
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|draw_box
parameter_list|(
name|OBJECT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|draw_shadow
parameter_list|(
name|OBJECT
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _FORMS_H_ */
end_comment

end_unit

