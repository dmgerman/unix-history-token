begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * bluetooth.h  */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2001-2009 Maksim Yevmenkin<m_evmenkin@yahoo.com>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: bluetooth.h,v 1.5 2003/09/14 23:28:42 max Exp $  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BLUETOOTH_H_
end_ifndef

begin_define
define|#
directive|define
name|_BLUETOOTH_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/bitstring.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/uio.h>
end_include

begin_include
include|#
directive|include
file|<sys/un.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<netdb.h>
end_include

begin_include
include|#
directive|include
file|<netgraph/ng_message.h>
end_include

begin_include
include|#
directive|include
file|<netgraph/bluetooth/include/ng_hci.h>
end_include

begin_include
include|#
directive|include
file|<netgraph/bluetooth/include/ng_l2cap.h>
end_include

begin_include
include|#
directive|include
file|<netgraph/bluetooth/include/ng_btsocket.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_function_decl
name|__BEGIN_DECLS
comment|/*  * Linux BlueZ compatibility  */
define|#
directive|define
name|bacmp
parameter_list|(
name|ba1
parameter_list|,
name|ba2
parameter_list|)
value|memcmp((ba1), (ba2), sizeof(bdaddr_t))
define|#
directive|define
name|bacpy
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|)
value|memcpy((dst), (src), sizeof(bdaddr_t))
define|#
directive|define
name|ba2str
parameter_list|(
name|ba
parameter_list|,
name|str
parameter_list|)
value|bt_ntoa((ba), (str))
define|#
directive|define
name|str2ba
parameter_list|(
name|str
parameter_list|,
name|ba
parameter_list|)
value|(bt_aton((str), (ba)) == 1? 0 : -1)
comment|/*  * Interface to the outside world  */
name|struct
name|hostent
modifier|*
name|bt_gethostbyname
parameter_list|(
name|char
specifier|const
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostent
modifier|*
name|bt_gethostbyaddr
parameter_list|(
name|char
specifier|const
modifier|*
name|addr
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostent
modifier|*
name|bt_gethostent
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_sethostent
parameter_list|(
name|int
name|stayopen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_endhostent
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|protoent
modifier|*
name|bt_getprotobyname
parameter_list|(
name|char
specifier|const
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|protoent
modifier|*
name|bt_getprotobynumber
parameter_list|(
name|int
name|proto
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|protoent
modifier|*
name|bt_getprotoent
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_setprotoent
parameter_list|(
name|int
name|stayopen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_endprotoent
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
specifier|const
modifier|*
name|bt_ntoa
parameter_list|(
name|bdaddr_t
specifier|const
modifier|*
name|ba
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_aton
parameter_list|(
name|char
specifier|const
modifier|*
name|str
parameter_list|,
name|bdaddr_t
modifier|*
name|ba
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* bt_devXXXX() functions (inspired by NetBSD) */
end_comment

begin_function_decl
name|int
name|bt_devaddr
parameter_list|(
name|char
specifier|const
modifier|*
name|devname
parameter_list|,
name|bdaddr_t
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devname
parameter_list|(
name|char
modifier|*
name|devname
parameter_list|,
name|bdaddr_t
specifier|const
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*   * Bluetooth HCI functions  */
end_comment

begin_define
define|#
directive|define
name|HCI_DEVMAX
value|32
end_define

begin_comment
comment|/* arbitrary */
end_comment

begin_define
define|#
directive|define
name|HCI_DEVNAME_SIZE
value|NG_NODESIZ
end_define

begin_define
define|#
directive|define
name|HCI_DEVFEATURES_SIZE
value|NG_HCI_FEATURES_SIZE
end_define

begin_struct
struct|struct
name|bt_devinfo
block|{
name|char
name|devname
index|[
name|HCI_DEVNAME_SIZE
index|]
decl_stmt|;
name|uint32_t
name|state
decl_stmt|;
comment|/* device/implementation specific */
name|bdaddr_t
name|bdaddr
decl_stmt|;
name|uint16_t
name|_reserved0
decl_stmt|;
name|uint8_t
name|features
index|[
name|HCI_DEVFEATURES_SIZE
index|]
decl_stmt|;
comment|/* buffer info */
name|uint16_t
name|_reserved1
decl_stmt|;
name|uint16_t
name|cmd_free
decl_stmt|;
name|uint16_t
name|sco_size
decl_stmt|;
name|uint16_t
name|sco_pkts
decl_stmt|;
name|uint16_t
name|sco_free
decl_stmt|;
name|uint16_t
name|acl_size
decl_stmt|;
name|uint16_t
name|acl_pkts
decl_stmt|;
name|uint16_t
name|acl_free
decl_stmt|;
comment|/* stats */
name|uint32_t
name|cmd_sent
decl_stmt|;
name|uint32_t
name|evnt_recv
decl_stmt|;
name|uint32_t
name|acl_recv
decl_stmt|;
name|uint32_t
name|acl_sent
decl_stmt|;
name|uint32_t
name|sco_recv
decl_stmt|;
name|uint32_t
name|sco_sent
decl_stmt|;
name|uint32_t
name|bytes_recv
decl_stmt|;
name|uint32_t
name|bytes_sent
decl_stmt|;
comment|/* misc/specific */
name|uint16_t
name|link_policy_info
decl_stmt|;
name|uint16_t
name|packet_type_info
decl_stmt|;
name|uint16_t
name|role_switch_info
decl_stmt|;
name|uint16_t
name|debug
decl_stmt|;
name|uint8_t
name|_padding
index|[
literal|20
index|]
decl_stmt|;
comment|/* leave space for future additions */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bt_devreq
block|{
name|uint16_t
name|opcode
decl_stmt|;
name|uint8_t
name|event
decl_stmt|;
name|void
modifier|*
name|cparam
decl_stmt|;
name|size_t
name|clen
decl_stmt|;
name|void
modifier|*
name|rparam
decl_stmt|;
name|size_t
name|rlen
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bt_devfilter
block|{
name|bitstr_t
name|bit_decl
argument_list|(
name|packet_mask
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|bitstr_t
name|bit_decl
argument_list|(
name|event_mask
argument_list|,
literal|256
argument_list|)
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bt_devinquiry
block|{
name|bdaddr_t
name|bdaddr
decl_stmt|;
name|uint8_t
name|pscan_rep_mode
decl_stmt|;
name|uint8_t
name|pscan_period_mode
decl_stmt|;
name|uint8_t
name|dev_class
index|[
literal|3
index|]
decl_stmt|;
name|uint16_t
name|clock_offset
decl_stmt|;
name|int8_t
name|rssi
decl_stmt|;
name|uint8_t
name|data
index|[
literal|240
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
function_decl|(
name|bt_devenum_cb_t
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|struct
name|bt_devinfo
specifier|const
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|int
name|bt_devopen
parameter_list|(
name|char
specifier|const
modifier|*
name|devname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devclose
parameter_list|(
name|int
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devsend
parameter_list|(
name|int
name|s
parameter_list|,
name|uint16_t
name|opcode
parameter_list|,
name|void
modifier|*
name|param
parameter_list|,
name|size_t
name|plen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|bt_devrecv
parameter_list|(
name|int
name|s
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|,
name|time_t
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devreq
parameter_list|(
name|int
name|s
parameter_list|,
name|struct
name|bt_devreq
modifier|*
name|r
parameter_list|,
name|time_t
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devfilter
parameter_list|(
name|int
name|s
parameter_list|,
name|struct
name|bt_devfilter
specifier|const
modifier|*
name|new
parameter_list|,
name|struct
name|bt_devfilter
modifier|*
name|old
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_devfilter_pkt_set
parameter_list|(
name|struct
name|bt_devfilter
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_devfilter_pkt_clr
parameter_list|(
name|struct
name|bt_devfilter
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devfilter_pkt_tst
parameter_list|(
name|struct
name|bt_devfilter
specifier|const
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_devfilter_evt_set
parameter_list|(
name|struct
name|bt_devfilter
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bt_devfilter_evt_clr
parameter_list|(
name|struct
name|bt_devfilter
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devfilter_evt_tst
parameter_list|(
name|struct
name|bt_devfilter
specifier|const
modifier|*
name|filter
parameter_list|,
name|uint8_t
name|event
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devinquiry
parameter_list|(
name|char
specifier|const
modifier|*
name|devname
parameter_list|,
name|time_t
name|length
parameter_list|,
name|int
name|num_rsp
parameter_list|,
name|struct
name|bt_devinquiry
modifier|*
modifier|*
name|ii
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devinfo
parameter_list|(
name|struct
name|bt_devinfo
modifier|*
name|di
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bt_devenum
parameter_list|(
name|bt_devenum_cb_t
modifier|*
name|cb
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * bdaddr utility functions (from NetBSD)  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|bdaddr_same
parameter_list|(
specifier|const
name|bdaddr_t
modifier|*
name|a
parameter_list|,
specifier|const
name|bdaddr_t
modifier|*
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|->
name|b
index|[
literal|0
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|0
index|]
operator|&&
name|a
operator|->
name|b
index|[
literal|1
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|1
index|]
operator|&&
name|a
operator|->
name|b
index|[
literal|2
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|2
index|]
operator|&&
name|a
operator|->
name|b
index|[
literal|3
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|3
index|]
operator|&&
name|a
operator|->
name|b
index|[
literal|4
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|4
index|]
operator|&&
name|a
operator|->
name|b
index|[
literal|5
index|]
operator|==
name|b
operator|->
name|b
index|[
literal|5
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|bdaddr_any
parameter_list|(
specifier|const
name|bdaddr_t
modifier|*
name|a
parameter_list|)
block|{
return|return
operator|(
name|a
operator|->
name|b
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|a
operator|->
name|b
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|a
operator|->
name|b
index|[
literal|2
index|]
operator|==
literal|0
operator|&&
name|a
operator|->
name|b
index|[
literal|3
index|]
operator|==
literal|0
operator|&&
name|a
operator|->
name|b
index|[
literal|4
index|]
operator|==
literal|0
operator|&&
name|a
operator|->
name|b
index|[
literal|5
index|]
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|bdaddr_copy
parameter_list|(
name|bdaddr_t
modifier|*
name|d
parameter_list|,
specifier|const
name|bdaddr_t
modifier|*
name|s
parameter_list|)
block|{
name|d
operator|->
name|b
index|[
literal|0
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|0
index|]
expr_stmt|;
name|d
operator|->
name|b
index|[
literal|1
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|1
index|]
expr_stmt|;
name|d
operator|->
name|b
index|[
literal|2
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|2
index|]
expr_stmt|;
name|d
operator|->
name|b
index|[
literal|3
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|3
index|]
expr_stmt|;
name|d
operator|->
name|b
index|[
literal|4
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|4
index|]
expr_stmt|;
name|d
operator|->
name|b
index|[
literal|5
index|]
operator|=
name|s
operator|->
name|b
index|[
literal|5
index|]
expr_stmt|;
block|}
end_function

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ndef _BLUETOOTH_H_ */
end_comment

end_unit

