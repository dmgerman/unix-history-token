begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2004 Tim Kientzle  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer  *    in this position and unchanged.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_ENTRY_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_ENTRY_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_comment
comment|/* for wchar_t */
end_comment

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Description of an archive entry.  *  * Basically, a "struct stat" with a few text fields added in.  *  * TODO: Add "comment", "charset", and possibly other entries that are  * supported by "pax interchange" format.  However, GNU, ustar, cpio,  * and other variants don't support these features, so they're not an  * excruciatingly high priority right now.  *  * TODO: "pax interchange" format allows essentially arbitrary  * key/value attributes to be attached to any entry.  Supporting  * such extensions may make this library useful for special  * applications (e.g., a package manager could attach special  * package-management attributes to each entry).  */
struct_decl|struct
name|archive_entry
struct_decl|;
comment|/*  * Basic object manipulation  */
name|struct
name|archive_entry
modifier|*
name|archive_entry_clear
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* The 'clone' function does a deep copy; all of the strings are copied too. */
name|struct
name|archive_entry
modifier|*
name|archive_entry_clone
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_free
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|struct
name|archive_entry
modifier|*
name|archive_entry_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Retrieve fields from an archive_entry.  */
name|time_t
name|archive_entry_atime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|long
name|archive_entry_atime_nsec
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|time_t
name|archive_entry_ctime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|long
name|archive_entry_ctime_nsec
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|dev_t
name|archive_entry_dev
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_fflags
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|unsigned
name|long
modifier|*
name|set
parameter_list|,
name|unsigned
name|long
modifier|*
name|clear
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_fflags_text
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|gid_t
name|archive_entry_gid
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_gname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|wchar_t
modifier|*
name|archive_entry_gname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_hardlink
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|wchar_t
modifier|*
name|archive_entry_hardlink_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|ino_t
name|archive_entry_ino
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|mode_t
name|archive_entry_mode
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|time_t
name|archive_entry_mtime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|long
name|archive_entry_mtime_nsec
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_pathname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|wchar_t
modifier|*
name|archive_entry_pathname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|dev_t
name|archive_entry_rdev
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|dev_t
name|archive_entry_rdevmajor
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|dev_t
name|archive_entry_rdevminor
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|int64_t
name|archive_entry_size
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|struct
name|stat
modifier|*
name|archive_entry_stat
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_symlink
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|wchar_t
modifier|*
name|archive_entry_symlink_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|uid_t
name|archive_entry_uid
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|archive_entry_uname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|wchar_t
modifier|*
name|archive_entry_uname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Set fields in an archive_entry.  *  * Note that string 'set' functions do not copy the string, only the pointer.  * In contrast, 'copy' functions do copy the object pointed to.  */
name|void
name|archive_entry_copy_stat
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|struct
name|stat
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_atime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|time_t
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_ctime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|time_t
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_fflags
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|unsigned
name|long
name|set
parameter_list|,
name|unsigned
name|long
name|clear
parameter_list|)
function_decl|;
comment|/* Returns pointer to start of first invalid token, or NULL if none. */
comment|/* Note that all recognized tokens are processed, regardless. */
specifier|const
name|wchar_t
modifier|*
name|archive_entry_copy_fflags_text_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_gid
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|gid_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_gname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_gname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_hardlink
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_hardlink
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_hardlink_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_link
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_mode
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|mode_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_mtime
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|time_t
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_pathname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_pathname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_pathname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_rdevmajor
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|dev_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_rdevminor
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|dev_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_size
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_symlink
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_symlink_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_uid
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|uid_t
parameter_list|)
function_decl|;
name|void
name|archive_entry_set_uname
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_copy_uname_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * ACL routines.  This used to simply store and return text-format ACL  * strings, but that proved insufficient for a number of reasons:  *   = clients need control over uname/uid and gname/gid mappings  *   = there are many different ACL text formats  *   = would like to be able to read/convert archives containing ACLs  *     on platforms that lack ACL libraries  */
comment|/*  * Permission bits mimic POSIX.1e.  Note that I've not followed POSIX.1e's  * "permset"/"perm" abstract type nonsense.  A permset is just a simple  * bitmap, following long-standing Unix tradition.  */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_EXECUTE
value|1
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_WRITE
value|2
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_READ
value|4
comment|/* We need to be able to specify either or both of these. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_TYPE_ACCESS
value|256
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_TYPE_DEFAULT
value|512
comment|/* Tag values mimic POSIX.1e */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_USER
value|10001
comment|/* Specified user. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_USER_OBJ
value|10002
comment|/* User who owns the file. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_GROUP
value|10003
comment|/* Specified group. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_GROUP_OBJ
value|10004
comment|/* Group who owns the file. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_MASK
value|10005
comment|/* Modify group access. */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_OTHER
value|10006
comment|/* Public. */
comment|/*  * Set the ACL by clearing it and adding entries one at a time.  * Unlike the POSIX.1e ACL routines, you must specify the type  * (access/default) for each entry.  Internally, the ACL data is just  * a soup of entries.  API calls here allow you to retrieve just the  * entries of interest.  This design (which goes against the spirit of  * POSIX.1e) is useful for handling archive formats that combine  * default and access information in a single ACL list.  */
name|void
name|archive_entry_acl_clear
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|void
name|archive_entry_acl_add_entry
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|permset
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|qual
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|archive_entry_acl_add_entry_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|permset
parameter_list|,
name|int
name|tag
parameter_list|,
name|int
name|qual
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/*  * To retrieve the ACL, first "reset", then repeatedly ask for the  * "next" entry.  The want_type parameter allows you to request only  * access entries or only default entries.  */
name|int
name|archive_entry_acl_reset
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|want_type
parameter_list|)
function_decl|;
name|int
name|archive_entry_acl_next
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|want_type
parameter_list|,
name|int
modifier|*
name|type
parameter_list|,
name|int
modifier|*
name|permset
parameter_list|,
name|int
modifier|*
name|tag
parameter_list|,
name|int
modifier|*
name|qual
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|name
parameter_list|)
function_decl|;
name|int
name|archive_entry_acl_next_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|want_type
parameter_list|,
name|int
modifier|*
name|type
parameter_list|,
name|int
modifier|*
name|permset
parameter_list|,
name|int
modifier|*
name|tag
parameter_list|,
name|int
modifier|*
name|qual
parameter_list|,
specifier|const
name|wchar_t
modifier|*
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/*  * Construct a text-format ACL.  The flags argument is a bitmask that  * can include any of the following:  *  * ARCHIVE_ENTRY_ACL_TYPE_ACCESS - Include access entries.  * ARCHIVE_ENTRY_ACL_TYPE_DEFAULT - Include default entries.  * ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID - Include extra numeric ID field in  *    each ACL entry.  (As used by 'star'.)  * ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT - Include "default:" before each  *    default ACL entry.  */
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID
value|1024
define|#
directive|define
name|ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT
value|2048
specifier|const
name|wchar_t
modifier|*
name|archive_entry_acl_text_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* Return a count of entries matching 'want_type' */
name|int
name|archive_entry_acl_count
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|want_type
parameter_list|)
function_decl|;
comment|/*  * Private ACL parser.  This is private because it handles some  * very weird formats that clients should not be messing with.  * Clients should only deal with their platform-native formats.  * Because of the need to support many formats cleanly, new arguments  * are likely to get added on a regular basis.  Clients who try to use  * this interface are likely to be surprised when it changes.  *  * You were warned!  */
name|int
name|__archive_entry_acl_parse_w
parameter_list|(
name|struct
name|archive_entry
modifier|*
parameter_list|,
specifier|const
name|wchar_t
modifier|*
parameter_list|,
name|int
name|type
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ARCHIVE_ENTRY_H_INCLUDED */
end_comment

end_unit

