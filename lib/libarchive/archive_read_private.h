begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2007 Tim Kientzle  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_READ_PRIVATE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_READ_PRIVATE_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|"archive.h"
end_include

begin_include
include|#
directive|include
file|"archive_string.h"
end_include

begin_include
include|#
directive|include
file|"archive_private.h"
end_include

begin_struct
struct|struct
name|archive_read
block|{
name|struct
name|archive
name|archive
decl_stmt|;
name|struct
name|archive_entry
modifier|*
name|entry
decl_stmt|;
comment|/* Dev/ino of the archive being read/written. */
name|dev_t
name|skip_file_dev
decl_stmt|;
name|ino_t
name|skip_file_ino
decl_stmt|;
comment|/* Utility:  Pointer to a block of nulls. */
specifier|const
name|unsigned
name|char
modifier|*
name|nulls
decl_stmt|;
name|size_t
name|null_length
decl_stmt|;
comment|/* 	 * Used by archive_read_data() to track blocks and copy 	 * data to client buffers, filling gaps with zero bytes. 	 */
specifier|const
name|char
modifier|*
name|read_data_block
decl_stmt|;
name|off_t
name|read_data_offset
decl_stmt|;
name|off_t
name|read_data_output_offset
decl_stmt|;
name|size_t
name|read_data_remaining
decl_stmt|;
comment|/* Callbacks to open/read/write/close archive stream. */
name|archive_open_callback
modifier|*
name|client_opener
decl_stmt|;
name|archive_read_callback
modifier|*
name|client_reader
decl_stmt|;
name|archive_skip_callback
modifier|*
name|client_skipper
decl_stmt|;
name|archive_write_callback
modifier|*
name|client_writer
decl_stmt|;
name|archive_close_callback
modifier|*
name|client_closer
decl_stmt|;
name|void
modifier|*
name|client_data
decl_stmt|;
comment|/* 	 * Blocking information.  Note that bytes_in_last_block is 	 * misleadingly named; I should find a better name.  These 	 * control the final output from all compressors, including 	 * compression_none. 	 */
name|int
name|bytes_per_block
decl_stmt|;
name|int
name|bytes_in_last_block
decl_stmt|;
comment|/* 	 * These control whether data within a gzip/bzip2 compressed 	 * stream gets padded or not.  If pad_uncompressed is set, 	 * the data will be padded to a full block before being 	 * compressed.  The pad_uncompressed_byte determines the value 	 * that will be used for padding.  Note that these have no 	 * effect on compression "none." 	 */
name|int
name|pad_uncompressed
decl_stmt|;
name|int
name|pad_uncompressed_byte
decl_stmt|;
comment|/* TODO: Support this. */
comment|/* File offset of beginning of most recently-read header. */
name|off_t
name|header_position
decl_stmt|;
comment|/* 	 * Decompressors have a very specific lifecycle: 	 *    public setup function initializes a slot in this table 	 *    'config' holds minimal configuration data 	 *    bid() examines a block of data and returns a bid [1] 	 *    init() is called for successful bidder 	 *    'data' is initialized by init() 	 *    read() returns a pointer to the next block of data 	 *    consume() indicates how much data is used 	 *    skip() ignores bytes of data 	 *    finish() cleans up and frees 'data' and 'config' 	 * 	 * [1] General guideline: bid the number of bits that you actually 	 * test, e.g., 16 if you test a 2-byte magic value. 	 */
struct|struct
name|decompressor_t
block|{
name|void
modifier|*
name|config
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|finish
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|read_ahead
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|consume
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|off_t
function_decl|(
modifier|*
name|skip
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|off_t
parameter_list|)
function_decl|;
block|}
name|decompressors
index|[
literal|4
index|]
struct|;
comment|/* Pointer to current decompressor. */
name|struct
name|decompressor_t
modifier|*
name|decompressor
decl_stmt|;
comment|/* 	 * Format detection is mostly the same as compression 	 * detection, with two significant differences: The bidders 	 * use the read_ahead calls above to examine the stream rather 	 * than having the supervisor hand them a block of data to 	 * examine, and the auction is repeated for every header. 	 * Winning bidders should set the archive_format and 	 * archive_format_name appropriately.  Bid routines should 	 * check archive_format and decline to bid if the format of 	 * the last header was incompatible. 	 * 	 * Again, write support is considerably simpler because there's 	 * no need for an auction. 	 */
struct|struct
name|archive_format_descriptor
block|{
name|void
modifier|*
name|data
decl_stmt|;
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_header
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|off_t
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_data_skip
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
block|}
name|formats
index|[
literal|8
index|]
struct|;
name|struct
name|archive_format_descriptor
modifier|*
name|format
decl_stmt|;
comment|/* Active format. */
comment|/* 	 * Pointers to format-specific functions for writing.  They're 	 * initialized by archive_write_set_format_XXX() calls. 	 */
name|int
function_decl|(
modifier|*
name|format_init
function_decl|)
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Only used on write. */
name|int
function_decl|(
modifier|*
name|format_finish
function_decl|)
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_finish_entry
function_decl|)
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|format_write_header
function_decl|)
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
name|ssize_t
function_decl|(
modifier|*
name|format_write_data
function_decl|)
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/* 	 * Various information needed by archive_extract. 	 */
name|struct
name|extract
modifier|*
name|extract
decl_stmt|;
name|int
function_decl|(
modifier|*
name|cleanup_archive_extract
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|__archive_read_register_format
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|format_data
parameter_list|,
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_header
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_data
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|off_t
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|read_data_skip
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|cleanup
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|decompressor_t
modifier|*
name|__archive_read_register_compression
parameter_list|(
name|struct
name|archive_read
modifier|*
name|a
parameter_list|,
name|int
function_decl|(
modifier|*
name|bid
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|,
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|void
modifier|*
name|__archive_read_ahead
parameter_list|(
name|struct
name|archive_read
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

