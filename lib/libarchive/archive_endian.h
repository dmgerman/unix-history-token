begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002 Thomas Moestl<tmm@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  * Borrowed from FreeBSD's<sys/endian.h>  */
end_comment

begin_comment
comment|/* Note:  This is a purely internal header! */
end_comment

begin_comment
comment|/* Do not use this outside of libarchive internal code! */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_ENDIAN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_ENDIAN_H_INCLUDED
end_define

begin_comment
comment|/*  * Disabling inline keyword for compilers known to choke on it:  * - Watcom C++ in C code.  (For any version?)  * - SGI MIPSpro  * - Microsoft Visual C++ 6.0 (supposedly newer versions too)  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__WATCOMC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|||
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
end_if

begin_define
define|#
directive|define
name|inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Alignment-agnostic encode/decode bytestream to/from little/big endian. */
end_comment

begin_function
specifier|static
specifier|inline
name|uint16_t
name|archive_be16dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
name|p
index|[
literal|0
index|]
operator|<<
literal|8
operator|)
operator||
name|p
index|[
literal|1
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|archive_be32dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
name|p
index|[
literal|0
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
name|p
index|[
literal|1
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|p
index|[
literal|2
index|]
operator|<<
literal|8
operator|)
operator||
name|p
index|[
literal|3
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|archive_be64dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|archive_be32dec
argument_list|(
name|p
argument_list|)
operator|<<
literal|32
operator|)
operator||
name|archive_be32dec
argument_list|(
name|p
operator|+
literal|4
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|archive_le16dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
name|p
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|p
index|[
literal|0
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|archive_le32dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
name|p
index|[
literal|3
index|]
operator|<<
literal|24
operator|)
operator||
operator|(
name|p
index|[
literal|2
index|]
operator|<<
literal|16
operator|)
operator||
operator|(
name|p
index|[
literal|1
index|]
operator|<<
literal|8
operator|)
operator||
name|p
index|[
literal|0
index|]
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|archive_le64dec
parameter_list|(
specifier|const
name|void
modifier|*
name|pp
parameter_list|)
block|{
name|unsigned
name|char
specifier|const
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
specifier|const
operator|*
operator|)
name|pp
decl_stmt|;
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|archive_le32dec
argument_list|(
name|p
operator|+
literal|4
argument_list|)
operator|<<
literal|32
operator|)
operator||
name|archive_le32dec
argument_list|(
name|p
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_be16enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint16_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|p
index|[
literal|0
index|]
operator|=
operator|(
name|u
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|1
index|]
operator|=
name|u
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_be32enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint32_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|p
index|[
literal|0
index|]
operator|=
operator|(
name|u
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|1
index|]
operator|=
operator|(
name|u
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|2
index|]
operator|=
operator|(
name|u
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|3
index|]
operator|=
name|u
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_be64enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint64_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|archive_be32enc
argument_list|(
name|p
argument_list|,
name|u
operator|>>
literal|32
argument_list|)
expr_stmt|;
name|archive_be32enc
argument_list|(
name|p
operator|+
literal|4
argument_list|,
name|u
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_le16enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint16_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|p
index|[
literal|0
index|]
operator|=
name|u
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|1
index|]
operator|=
operator|(
name|u
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_le32enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint32_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|p
index|[
literal|0
index|]
operator|=
name|u
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|1
index|]
operator|=
operator|(
name|u
operator|>>
literal|8
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|2
index|]
operator|=
operator|(
name|u
operator|>>
literal|16
operator|)
operator|&
literal|0xff
expr_stmt|;
name|p
index|[
literal|3
index|]
operator|=
operator|(
name|u
operator|>>
literal|24
operator|)
operator|&
literal|0xff
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|archive_le64enc
parameter_list|(
name|void
modifier|*
name|pp
parameter_list|,
name|uint64_t
name|u
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|p
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|pp
decl_stmt|;
name|archive_le32enc
argument_list|(
name|p
argument_list|,
name|u
operator|&
literal|0xffffffff
argument_list|)
expr_stmt|;
name|archive_le32enc
argument_list|(
name|p
operator|+
literal|4
argument_list|,
name|u
operator|>>
literal|32
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

