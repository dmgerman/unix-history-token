begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003-2007 Tim Kientzle  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARCHIVE_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|ARCHIVE_H_INCLUDED
end_define

begin_comment
comment|/*  * Note: archive.h is for use outside of libarchive; the configuration  * headers (config.h, archive_platform.h, etc.) are purely internal.  * Do NOT use HAVE_XXX configuration macros to control the behavior of  * this header!  If you must conditionalize, use predefined compiler and/or  * platform macros.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
operator|&&
name|__BORLANDC__
operator|>=
literal|0x560
end_if

begin_define
define|#
directive|define
name|__LA_STDINT_H
value|<stdint.h>
end_define

begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|__WATCOMC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__INTERIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
end_elif

begin_define
define|#
directive|define
name|__LA_STDINT_H
value|<inttypes.h>
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_comment
comment|/* Linux requires this for off_t */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__LA_STDINT_H
end_ifdef

begin_include
include|#
directive|include
include|__LA_STDINT_H
end_include

begin_comment
comment|/* int64_t, etc. */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/* For FILE * */
end_comment

begin_comment
comment|/* Get appropriate definitions of standard POSIX-style types. */
end_comment

begin_comment
comment|/* These should match the types used in 'struct stat' */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__LA_INT64_T
value|__int64
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_SSIZE_T_DEFINED
argument_list|)
end_if

begin_define
define|#
directive|define
name|__LA_SSIZE_T
value|ssize_t
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN64
argument_list|)
end_elif

begin_define
define|#
directive|define
name|__LA_SSIZE_T
value|__int64
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__LA_SSIZE_T
value|long
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__LA_UID_T
value|uid_t
end_define

begin_define
define|#
directive|define
name|__LA_GID_T
value|gid_t
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__LA_UID_T
value|short
end_define

begin_define
define|#
directive|define
name|__LA_GID_T
value|short
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_comment
comment|/* ssize_t, uid_t, and gid_t */
end_comment

begin_define
define|#
directive|define
name|__LA_INT64_T
value|int64_t
end_define

begin_define
define|#
directive|define
name|__LA_SSIZE_T
value|ssize_t
end_define

begin_define
define|#
directive|define
name|__LA_UID_T
value|uid_t
end_define

begin_define
define|#
directive|define
name|__LA_GID_T
value|gid_t
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * On Windows, define LIBARCHIVE_STATIC if you're building or using a  * .lib.  The default here assumes you're building a DLL.  Only  * libarchive source should ever define __LIBARCHIVE_BUILD.  */
end_comment

begin_if
if|#
directive|if
operator|(
operator|(
name|defined
name|__WIN32__
operator|)
operator|||
operator|(
name|defined
name|_WIN32
operator|)
operator|||
name|defined
argument_list|(
name|__CYGWIN__
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|defined
name|LIBARCHIVE_STATIC
operator|)
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|__LIBARCHIVE_BUILD
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_define
define|#
directive|define
name|__LA_DECL
value|__attribute__((dllexport)) extern
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__LA_DECL
value|__declspec(dllexport)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_define
define|#
directive|define
name|__LA_DECL
value|__attribute__((dllimport)) extern
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__LA_DECL
value|__declspec(dllimport)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* Static libraries or non-Windows needs no special declaration. */
end_comment

begin_define
define|#
directive|define
name|__LA_DECL
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * The version number is provided as both a macro and a function.  * The macro identifies the installed header; the function identifies  * the library version (which may not be the same if you're using a  * dynamically-linked version of the library).  Of course, if the  * header and library are very different, you should expect some  * strangeness.  Don't do that.  */
comment|/*  * The version number is expressed as a single integer that makes it  * easy to compare versions at build time: for version a.b.c, the  * version number is printf("%d%03d%03d",a,b,c).  For example, if you  * know your application requires version 2.12.108 or later, you can  * assert that ARCHIVE_VERSION>= 2012108.  *  * This single-number format was introduced with libarchive 1.9.0 in  * the libarchive 1.x family and libarchive 2.2.4 in the libarchive  * 2.x family.  The following may be useful if you really want to do  * feature detection for earlier libarchive versions (which defined  * ARCHIVE_API_VERSION and ARCHIVE_API_FEATURE instead):  *  * #ifndef ARCHIVE_VERSION_NUMBER  * #define ARCHIVE_VERSION_NUMBER	\  *             (ARCHIVE_API_VERSION * 1000000 + ARCHIVE_API_FEATURE * 1000)  * #endif  */
define|#
directive|define
name|ARCHIVE_VERSION_NUMBER
value|2008004
name|__LA_DECL
name|int
name|archive_version_number
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * Textual name/version of the library, useful for version displays.  */
define|#
directive|define
name|ARCHIVE_VERSION_STRING
value|"libarchive 2.8.4"
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_version_string
parameter_list|(
name|void
parameter_list|)
function_decl|;
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
comment|/*  * Deprecated; these are older names that will be removed in favor of  * the simpler definitions above.  */
define|#
directive|define
name|ARCHIVE_VERSION_STAMP
value|ARCHIVE_VERSION_NUMBER
name|__LA_DECL
name|int
name|archive_version_stamp
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|ARCHIVE_LIBRARY_VERSION
value|ARCHIVE_VERSION_STRING
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|ARCHIVE_API_VERSION
value|(ARCHIVE_VERSION_NUMBER / 1000000)
name|__LA_DECL
name|int
name|archive_api_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|ARCHIVE_API_FEATURE
value|((ARCHIVE_VERSION_NUMBER / 1000) % 1000)
name|__LA_DECL
name|int
name|archive_api_feature
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
comment|/* This should never have been here in the first place. */
comment|/* Legacy of old tar assumptions, will be removed in libarchive 3.0. */
define|#
directive|define
name|ARCHIVE_BYTES_PER_RECORD
value|512
define|#
directive|define
name|ARCHIVE_DEFAULT_BYTES_PER_BLOCK
value|10240
endif|#
directive|endif
comment|/* Declare our basic types. */
struct_decl|struct
name|archive
struct_decl|;
struct_decl|struct
name|archive_entry
struct_decl|;
comment|/*  * Error codes: Use archive_errno() and archive_error_string()  * to retrieve details.  Unless specified otherwise, all functions  * that return 'int' use these codes.  */
define|#
directive|define
name|ARCHIVE_EOF
value|1
comment|/* Found end of archive. */
define|#
directive|define
name|ARCHIVE_OK
value|0
comment|/* Operation was successful. */
define|#
directive|define
name|ARCHIVE_RETRY
value|(-10)
comment|/* Retry might succeed. */
define|#
directive|define
name|ARCHIVE_WARN
value|(-20)
comment|/* Partial success. */
comment|/* For example, if write_header "fails", then you can't push data. */
define|#
directive|define
name|ARCHIVE_FAILED
value|(-25)
comment|/* Current operation cannot complete. */
comment|/* But if write_header is "fatal," then this archive is dead and useless. */
define|#
directive|define
name|ARCHIVE_FATAL
value|(-30)
comment|/* No more operations are possible. */
comment|/*  * As far as possible, archive_errno returns standard platform errno codes.  * Of course, the details vary by platform, so the actual definitions  * here are stored in "archive_platform.h".  The symbols are listed here  * for reference; as a rule, clients should not need to know the exact  * platform-dependent error code.  */
comment|/* Unrecognized or invalid file format. */
comment|/* #define	ARCHIVE_ERRNO_FILE_FORMAT */
comment|/* Illegal usage of the library. */
comment|/* #define	ARCHIVE_ERRNO_PROGRAMMER_ERROR */
comment|/* Unknown or unclassified error. */
comment|/* #define	ARCHIVE_ERRNO_MISC */
comment|/*  * Callbacks are invoked to automatically read/skip/write/open/close the  * archive. You can provide your own for complex tasks (like breaking  * archives across multiple tapes) or use standard ones built into the  * library.  */
comment|/* Returns pointer and size of next block of data from archive. */
typedef|typedef
name|__LA_SSIZE_T
name|archive_read_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|_buffer
parameter_list|)
function_decl|;
comment|/* Skips at most request bytes from archive and returns the skipped amount */
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|2000000
comment|/* Libarchive 1.0 used ssize_t for the return, which is only 32 bits  * on most 32-bit platforms; not large enough. */
typedef|typedef
name|__LA_SSIZE_T
name|archive_skip_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
name|size_t
name|request
parameter_list|)
function_decl|;
elif|#
directive|elif
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
comment|/* Libarchive 2.0 used off_t here, but that is a bad idea on Linux and a  * few other platforms where off_t varies with build settings. */
typedef|typedef
name|off_t
name|archive_skip_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
name|off_t
name|request
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* Libarchive 3.0 uses int64_t here, which is actually guaranteed to be  * 64 bits on every platform. */
typedef|typedef
name|__LA_INT64_T
name|archive_skip_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
name|__LA_INT64_T
name|request
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* Returns size actually written, zero on EOF, -1 on error. */
typedef|typedef
name|__LA_SSIZE_T
name|archive_write_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
specifier|const
name|void
modifier|*
name|_buffer
parameter_list|,
name|size_t
name|_length
parameter_list|)
function_decl|;
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
comment|/* Open callback is actually never needed; remove it in libarchive 3.0. */
typedef|typedef
name|int
name|archive_open_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|)
function_decl|;
endif|#
directive|endif
typedef|typedef
name|int
name|archive_close_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|)
function_decl|;
comment|/*  * Codes for archive_compression.  */
define|#
directive|define
name|ARCHIVE_COMPRESSION_NONE
value|0
define|#
directive|define
name|ARCHIVE_COMPRESSION_GZIP
value|1
define|#
directive|define
name|ARCHIVE_COMPRESSION_BZIP2
value|2
define|#
directive|define
name|ARCHIVE_COMPRESSION_COMPRESS
value|3
define|#
directive|define
name|ARCHIVE_COMPRESSION_PROGRAM
value|4
define|#
directive|define
name|ARCHIVE_COMPRESSION_LZMA
value|5
define|#
directive|define
name|ARCHIVE_COMPRESSION_XZ
value|6
define|#
directive|define
name|ARCHIVE_COMPRESSION_UU
value|7
define|#
directive|define
name|ARCHIVE_COMPRESSION_RPM
value|8
comment|/*  * Codes returned by archive_format.  *  * Top 16 bits identifies the format family (e.g., "tar"); lower  * 16 bits indicate the variant.  This is updated by read_next_header.  * Note that the lower 16 bits will often vary from entry to entry.  * In some cases, this variation occurs as libarchive learns more about  * the archive (for example, later entries might utilize extensions that  * weren't necessary earlier in the archive; in this case, libarchive  * will change the format code to indicate the extended format that  * was used).  In other cases, it's because different tools have  * modified the archive and so different parts of the archive  * actually have slightly different formts.  (Both tar and cpio store  * format codes in each entry, so it is quite possible for each  * entry to be in a different format.)  */
define|#
directive|define
name|ARCHIVE_FORMAT_BASE_MASK
value|0xff0000
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO
value|0x10000
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO_POSIX
value|(ARCHIVE_FORMAT_CPIO | 1)
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO_BIN_LE
value|(ARCHIVE_FORMAT_CPIO | 2)
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO_BIN_BE
value|(ARCHIVE_FORMAT_CPIO | 3)
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO_SVR4_NOCRC
value|(ARCHIVE_FORMAT_CPIO | 4)
define|#
directive|define
name|ARCHIVE_FORMAT_CPIO_SVR4_CRC
value|(ARCHIVE_FORMAT_CPIO | 5)
define|#
directive|define
name|ARCHIVE_FORMAT_SHAR
value|0x20000
define|#
directive|define
name|ARCHIVE_FORMAT_SHAR_BASE
value|(ARCHIVE_FORMAT_SHAR | 1)
define|#
directive|define
name|ARCHIVE_FORMAT_SHAR_DUMP
value|(ARCHIVE_FORMAT_SHAR | 2)
define|#
directive|define
name|ARCHIVE_FORMAT_TAR
value|0x30000
define|#
directive|define
name|ARCHIVE_FORMAT_TAR_USTAR
value|(ARCHIVE_FORMAT_TAR | 1)
define|#
directive|define
name|ARCHIVE_FORMAT_TAR_PAX_INTERCHANGE
value|(ARCHIVE_FORMAT_TAR | 2)
define|#
directive|define
name|ARCHIVE_FORMAT_TAR_PAX_RESTRICTED
value|(ARCHIVE_FORMAT_TAR | 3)
define|#
directive|define
name|ARCHIVE_FORMAT_TAR_GNUTAR
value|(ARCHIVE_FORMAT_TAR | 4)
define|#
directive|define
name|ARCHIVE_FORMAT_ISO9660
value|0x40000
define|#
directive|define
name|ARCHIVE_FORMAT_ISO9660_ROCKRIDGE
value|(ARCHIVE_FORMAT_ISO9660 | 1)
define|#
directive|define
name|ARCHIVE_FORMAT_ZIP
value|0x50000
define|#
directive|define
name|ARCHIVE_FORMAT_EMPTY
value|0x60000
define|#
directive|define
name|ARCHIVE_FORMAT_AR
value|0x70000
define|#
directive|define
name|ARCHIVE_FORMAT_AR_GNU
value|(ARCHIVE_FORMAT_AR | 1)
define|#
directive|define
name|ARCHIVE_FORMAT_AR_BSD
value|(ARCHIVE_FORMAT_AR | 2)
define|#
directive|define
name|ARCHIVE_FORMAT_MTREE
value|0x80000
define|#
directive|define
name|ARCHIVE_FORMAT_RAW
value|0x90000
define|#
directive|define
name|ARCHIVE_FORMAT_XAR
value|0xA0000
comment|/*-  * Basic outline for reading an archive:  *   1) Ask archive_read_new for an archive reader object.  *   2) Update any global properties as appropriate.  *      In particular, you'll certainly want to call appropriate  *      archive_read_support_XXX functions.  *   3) Call archive_read_open_XXX to open the archive  *   4) Repeatedly call archive_read_next_header to get information about  *      successive archive entries.  Call archive_read_data to extract  *      data for entries of interest.  *   5) Call archive_read_finish to end processing.  */
name|__LA_DECL
name|struct
name|archive
modifier|*
name|archive_read_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * The archive_read_support_XXX calls enable auto-detect for this  * archive handle.  They also link in the necessary support code.  * For example, if you don't want bzlib linked in, don't invoke  * support_compression_bzip2().  The "all" functions provide the  * obvious shorthand.  */
name|__LA_DECL
name|int
name|archive_read_support_compression_all
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_bzip2
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_compress
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_gzip
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_lzma
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_none
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_program
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|command
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_program_signature
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
comment|/* match */
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_rpm
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_uu
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_compression_xz
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_all
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_ar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_cpio
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_empty
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_gnutar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_iso9660
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_mtree
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_raw
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_tar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_xar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_support_format_zip
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Open the archive using callbacks for archive I/O. */
name|__LA_DECL
name|int
name|archive_read_open
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
name|archive_open_callback
modifier|*
parameter_list|,
name|archive_read_callback
modifier|*
parameter_list|,
name|archive_close_callback
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_open2
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_client_data
parameter_list|,
name|archive_open_callback
modifier|*
parameter_list|,
name|archive_read_callback
modifier|*
parameter_list|,
name|archive_skip_callback
modifier|*
parameter_list|,
name|archive_close_callback
modifier|*
parameter_list|)
function_decl|;
comment|/*  * A variety of shortcuts that invoke archive_read_open() with  * canned callbacks suitable for common situations.  The ones that  * accept a block size handle tape blocking correctly.  */
comment|/* Use this if you know the filename.  Note: NULL indicates stdin. */
name|__LA_DECL
name|int
name|archive_read_open_filename
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|_filename
parameter_list|,
name|size_t
name|_block_size
parameter_list|)
function_decl|;
comment|/* archive_read_open_file() is a deprecated synonym for ..._open_filename(). */
name|__LA_DECL
name|int
name|archive_read_open_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|_filename
parameter_list|,
name|size_t
name|_block_size
parameter_list|)
function_decl|;
comment|/* Read an archive that's stored in memory. */
name|__LA_DECL
name|int
name|archive_read_open_memory
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
comment|/* A more involved version that is only used for internal testing. */
name|__LA_DECL
name|int
name|archive_read_open_memory2
parameter_list|(
name|struct
name|archive
modifier|*
name|a
parameter_list|,
name|void
modifier|*
name|buff
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|read_size
parameter_list|)
function_decl|;
comment|/* Read an archive that's already open, using the file descriptor. */
name|__LA_DECL
name|int
name|archive_read_open_fd
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|_fd
parameter_list|,
name|size_t
name|_block_size
parameter_list|)
function_decl|;
comment|/* Read an archive that's already open, using a FILE *. */
comment|/* Note: DO NOT use this with tape drives. */
name|__LA_DECL
name|int
name|archive_read_open_FILE
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|FILE
modifier|*
name|_file
parameter_list|)
function_decl|;
comment|/* Parses and returns next entry header. */
name|__LA_DECL
name|int
name|archive_read_next_header
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Parses and returns next entry header using the archive_entry passed in */
name|__LA_DECL
name|int
name|archive_read_next_header2
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Retrieve the byte offset in UNCOMPRESSED data where last-read  * header started.  */
name|__LA_DECL
name|__LA_INT64_T
name|archive_read_header_position
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Read data from the body of an entry.  Similar to read(2). */
name|__LA_DECL
name|__LA_SSIZE_T
name|archive_read_data
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/*  * A zero-copy version of archive_read_data that also exposes the file offset  * of each returned block.  Note that the client has no way to specify  * the desired size of the block.  The API does guarantee that offsets will  * be strictly increasing and that returned blocks will not overlap.  */
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
name|__LA_DECL
name|int
name|archive_read_data_block
parameter_list|(
name|struct
name|archive
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|buff
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|,
name|off_t
modifier|*
name|offset
parameter_list|)
function_decl|;
else|#
directive|else
name|__LA_DECL
name|int
name|archive_read_data_block
parameter_list|(
name|struct
name|archive
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|buff
parameter_list|,
name|size_t
modifier|*
name|size
parameter_list|,
name|__LA_INT64_T
modifier|*
name|offset
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*-  * Some convenience functions that are built on archive_read_data:  *  'skip': skips entire entry  *  'into_buffer': writes data into memory buffer that you provide  *  'into_fd': writes data to specified filedes  */
name|__LA_DECL
name|int
name|archive_read_data_skip
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_data_into_buffer
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|buffer
parameter_list|,
name|__LA_SSIZE_T
name|len
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_data_into_fd
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
comment|/*  * Set read options.  */
comment|/* Apply option string to the format only. */
name|__LA_DECL
name|int
name|archive_read_set_format_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* Apply option string to the filter only. */
name|__LA_DECL
name|int
name|archive_read_set_filter_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* Apply option string to both the format and the filter. */
name|__LA_DECL
name|int
name|archive_read_set_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/*-  * Convenience function to recreate the current entry (whose header  * has just been read) on disk.  *  * This does quite a bit more than just copy data to disk. It also:  *  - Creates intermediate directories as required.  *  - Manages directory permissions:  non-writable directories will  *    be initially created with write permission enabled; when the  *    archive is closed, dir permissions are edited to the values specified  *    in the archive.  *  - Checks hardlinks:  hardlinks will not be extracted unless the  *    linked-to file was also extracted within the same session. (TODO)  */
comment|/* The "flags" argument selects optional behavior, 'OR' the flags you want. */
comment|/* Default: Do not try to set owner/group. */
define|#
directive|define
name|ARCHIVE_EXTRACT_OWNER
value|(0x0001)
comment|/* Default: Do obey umask, do not restore SUID/SGID/SVTX bits. */
define|#
directive|define
name|ARCHIVE_EXTRACT_PERM
value|(0x0002)
comment|/* Default: Do not restore mtime/atime. */
define|#
directive|define
name|ARCHIVE_EXTRACT_TIME
value|(0x0004)
comment|/* Default: Replace existing files. */
define|#
directive|define
name|ARCHIVE_EXTRACT_NO_OVERWRITE
value|(0x0008)
comment|/* Default: Try create first, unlink only if create fails with EEXIST. */
define|#
directive|define
name|ARCHIVE_EXTRACT_UNLINK
value|(0x0010)
comment|/* Default: Do not restore ACLs. */
define|#
directive|define
name|ARCHIVE_EXTRACT_ACL
value|(0x0020)
comment|/* Default: Do not restore fflags. */
define|#
directive|define
name|ARCHIVE_EXTRACT_FFLAGS
value|(0x0040)
comment|/* Default: Do not restore xattrs. */
define|#
directive|define
name|ARCHIVE_EXTRACT_XATTR
value|(0x0080)
comment|/* Default: Do not try to guard against extracts redirected by symlinks. */
comment|/* Note: With ARCHIVE_EXTRACT_UNLINK, will remove any intermediate symlink. */
define|#
directive|define
name|ARCHIVE_EXTRACT_SECURE_SYMLINKS
value|(0x0100)
comment|/* Default: Do not reject entries with '..' as path elements. */
define|#
directive|define
name|ARCHIVE_EXTRACT_SECURE_NODOTDOT
value|(0x0200)
comment|/* Default: Create parent directories as needed. */
define|#
directive|define
name|ARCHIVE_EXTRACT_NO_AUTODIR
value|(0x0400)
comment|/* Default: Overwrite files, even if one on disk is newer. */
define|#
directive|define
name|ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER
value|(0x0800)
comment|/* Detect blocks of 0 and write holes instead. */
define|#
directive|define
name|ARCHIVE_EXTRACT_SPARSE
value|(0x1000)
name|__LA_DECL
name|int
name|archive_read_extract
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_extract2
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|struct
name|archive
modifier|*
comment|/* dest */
parameter_list|)
function_decl|;
name|__LA_DECL
name|void
name|archive_read_extract_set_progress_callback
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|_progress_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|_user_data
parameter_list|)
function_decl|;
comment|/* Record the dev/ino of a file that will not be written.  This is  * generally set to the dev/ino of the archive being read. */
name|__LA_DECL
name|void
name|archive_read_extract_set_skip_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|dev_t
parameter_list|,
name|ino_t
parameter_list|)
function_decl|;
comment|/* Close the file and release most resources. */
name|__LA_DECL
name|int
name|archive_read_close
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Release all resources and destroy the object. */
comment|/* Note that archive_read_free will call archive_read_close for you. */
name|__LA_DECL
name|int
name|archive_read_free
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|4000000
comment|/* Synonym for archive_read_free() for backwards compatibility. */
name|__LA_DECL
name|int
name|archive_read_finish
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*-  * To create an archive:  *   1) Ask archive_write_new for a archive writer object.  *   2) Set any global properties.  In particular, you should set  *      the compression and format to use.  *   3) Call archive_write_open to open the file (most people  *       will use archive_write_open_file or archive_write_open_fd,  *       which provide convenient canned I/O callbacks for you).  *   4) For each entry:  *      - construct an appropriate struct archive_entry structure  *      - archive_write_header to write the header  *      - archive_write_data to write the entry data  *   5) archive_write_close to close the output  *   6) archive_write_free to cleanup the writer and release resources  */
name|__LA_DECL
name|struct
name|archive
modifier|*
name|archive_write_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_bytes_per_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|bytes_per_block
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_get_bytes_per_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* XXX This is badly misnamed; suggestions appreciated. XXX */
name|__LA_DECL
name|int
name|archive_write_set_bytes_in_last_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|bytes_in_last_block
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_get_bytes_in_last_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* The dev/ino of a file that won't be archived.  This is used  * to avoid recursively adding an archive to itself. */
name|__LA_DECL
name|int
name|archive_write_set_skip_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|dev_t
parameter_list|,
name|ino_t
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_bzip2
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_compress
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_gzip
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_lzma
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_none
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_program
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|cmd
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_compression_xz
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* A convenience function to set the format based on the code or name. */
name|__LA_DECL
name|int
name|archive_write_set_format
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|format_code
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_by_name
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/* To minimize link pollution, use one or more of the following. */
name|__LA_DECL
name|int
name|archive_write_set_format_ar_bsd
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_ar_svr4
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_cpio
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_cpio_newc
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_mtree
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* TODO: int archive_write_set_format_old_tar(struct archive *); */
name|__LA_DECL
name|int
name|archive_write_set_format_pax
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_pax_restricted
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_shar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_shar_dump
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_ustar
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_set_format_zip
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_open
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|archive_open_callback
modifier|*
parameter_list|,
name|archive_write_callback
modifier|*
parameter_list|,
name|archive_close_callback
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_open_fd
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|_fd
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_open_filename
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|_file
parameter_list|)
function_decl|;
comment|/* A deprecated synonym for archive_write_open_filename() */
name|__LA_DECL
name|int
name|archive_write_open_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|_file
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_open_FILE
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
comment|/* _buffSize is the size of the buffer, _used refers to a variable that  * will be updated after each write into the buffer. */
name|__LA_DECL
name|int
name|archive_write_open_memory
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
name|_buffer
parameter_list|,
name|size_t
name|_buffSize
parameter_list|,
name|size_t
modifier|*
name|_used
parameter_list|)
function_decl|;
comment|/*  * Note that the library will truncate writes beyond the size provided  * to archive_write_header or pad if the provided data is short.  */
name|__LA_DECL
name|int
name|archive_write_header
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|2000000
comment|/* This was erroneously declared to return "int" in libarchive 1.x. */
name|__LA_DECL
name|int
name|archive_write_data
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* Libarchive 2.0 and later return ssize_t here. */
name|__LA_DECL
name|__LA_SSIZE_T
name|archive_write_data
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|3000000
comment|/* Libarchive 1.x and 2.x use off_t for the argument, but that's not  * stable on Linux. */
name|__LA_DECL
name|__LA_SSIZE_T
name|archive_write_data_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|off_t
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* Libarchive 3.0 uses explicit int64_t to ensure consistent 64-bit support. */
name|__LA_DECL
name|__LA_SSIZE_T
name|archive_write_data_block
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|__LA_INT64_T
parameter_list|)
function_decl|;
endif|#
directive|endif
name|__LA_DECL
name|int
name|archive_write_finish_entry
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_close
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* This can fail if the archive wasn't already closed, in which case  * archive_write_free() will implicitly call archive_write_close(). */
name|__LA_DECL
name|int
name|archive_write_free
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
if|#
directive|if
name|ARCHIVE_VERSION_NUMBER
operator|<
literal|4000000
comment|/* Synonym for archive_write_free() for backwards compatibility. */
name|__LA_DECL
name|int
name|archive_write_finish
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*  * Set write options.  */
comment|/* Apply option string to the format only. */
name|__LA_DECL
name|int
name|archive_write_set_format_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* Apply option string to the compressor only. */
name|__LA_DECL
name|int
name|archive_write_set_compressor_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/* Apply option string to both the format and the compressor. */
name|__LA_DECL
name|int
name|archive_write_set_options
parameter_list|(
name|struct
name|archive
modifier|*
name|_a
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
comment|/*-  * ARCHIVE_WRITE_DISK API  *  * To create objects on disk:  *   1) Ask archive_write_disk_new for a new archive_write_disk object.  *   2) Set any global properties.  In particular, you probably  *      want to set the options.  *   3) For each entry:  *      - construct an appropriate struct archive_entry structure  *      - archive_write_header to create the file/dir/etc on disk  *      - archive_write_data to write the entry data  *   4) archive_write_free to cleanup the writer and release resources  *  * In particular, you can use this in conjunction with archive_read()  * to pull entries out of an archive and create them on disk.  */
name|__LA_DECL
name|struct
name|archive
modifier|*
name|archive_write_disk_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* This file will not be overwritten. */
name|__LA_DECL
name|int
name|archive_write_disk_set_skip_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|dev_t
parameter_list|,
name|ino_t
parameter_list|)
function_decl|;
comment|/* Set flags to control how the next item gets created.  * This accepts a bitmask of ARCHIVE_EXTRACT_XXX flags defined above. */
name|__LA_DECL
name|int
name|archive_write_disk_set_options
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
comment|/*  * The lookup functions are given uname/uid (or gname/gid) pairs and  * return a uid (gid) suitable for this system.  These are used for  * restoring ownership and for setting ACLs.  The default functions  * are naive, they just return the uid/gid.  These are small, so reasonable  * for applications that don't need to preserve ownership; they  * are probably also appropriate for applications that are doing  * same-system backup and restore.  */
comment|/*  * The "standard" lookup functions use common system calls to lookup  * the uname/gname, falling back to the uid/gid if the names can't be  * found.  They cache lookups and are reasonably fast, but can be very  * large, so they are not used unless you ask for them.  In  * particular, these match the specifications of POSIX "pax" and old  * POSIX "tar".  */
name|__LA_DECL
name|int
name|archive_write_disk_set_standard_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/*  * If neither the default (naive) nor the standard (big) functions suit  * your needs, you can write your own and register them.  Be sure to  * include a cleanup function if you have allocated private data.  */
name|__LA_DECL
name|int
name|archive_write_disk_set_group_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* private_data */
parameter_list|,
name|__LA_GID_T
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|__LA_GID_T
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
comment|/* cleanup */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_write_disk_set_user_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* private_data */
parameter_list|,
name|__LA_UID_T
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|__LA_UID_T
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
comment|/* cleanup */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/*  * ARCHIVE_READ_DISK API  *  * This is still evolving and somewhat experimental.  */
name|__LA_DECL
name|struct
name|archive
modifier|*
name|archive_read_disk_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* The names for symlink modes here correspond to an old BSD  * command-line argument convention: -L, -P, -H */
comment|/* Follow all symlinks. */
name|__LA_DECL
name|int
name|archive_read_disk_set_symlink_logical
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Follow no symlinks. */
name|__LA_DECL
name|int
name|archive_read_disk_set_symlink_physical
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Follow symlink initially, then not. */
name|__LA_DECL
name|int
name|archive_read_disk_set_symlink_hybrid
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* TODO: Handle Linux stat32/stat64 ugliness.<sigh> */
name|__LA_DECL
name|int
name|archive_read_disk_entry_from_file
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|struct
name|archive_entry
modifier|*
parameter_list|,
name|int
comment|/* fd */
parameter_list|,
specifier|const
name|struct
name|stat
modifier|*
parameter_list|)
function_decl|;
comment|/* Look up gname for gid or uname for uid. */
comment|/* Default implementations are very, very stupid. */
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_read_disk_gname
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|__LA_GID_T
parameter_list|)
function_decl|;
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_read_disk_uname
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|__LA_UID_T
parameter_list|)
function_decl|;
comment|/* "Standard" implementation uses getpwuid_r, getgrgid_r and caches the  * results for performance. */
name|__LA_DECL
name|int
name|archive_read_disk_set_standard_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* You can install your own lookups if you like. */
name|__LA_DECL
name|int
name|archive_read_disk_set_gname_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* private_data */
parameter_list|,
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
comment|/* lookup_fn */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|__LA_GID_T
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
comment|/* cleanup_fn */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_read_disk_set_uname_lookup
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|void
modifier|*
comment|/* private_data */
parameter_list|,
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
comment|/* lookup_fn */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|__LA_UID_T
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
comment|/* cleanup_fn */
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/*  * Accessor functions to read/set various information in  * the struct archive object:  */
comment|/* Bytes written after compression or read before decompression. */
name|__LA_DECL
name|__LA_INT64_T
name|archive_position_compressed
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
comment|/* Bytes written to compressor or read from decompressor. */
name|__LA_DECL
name|__LA_INT64_T
name|archive_position_uncompressed
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_compression_name
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_compression
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_errno
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_error_string
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
specifier|const
name|char
modifier|*
name|archive_format_name
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_format
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|void
name|archive_clear_error
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
name|__LA_DECL
name|void
name|archive_set_error
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|,
name|int
name|_err
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|__LA_DECL
name|void
name|archive_copy_error
parameter_list|(
name|struct
name|archive
modifier|*
name|dest
parameter_list|,
name|struct
name|archive
modifier|*
name|src
parameter_list|)
function_decl|;
name|__LA_DECL
name|int
name|archive_file_count
parameter_list|(
name|struct
name|archive
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* These are meaningless outside of this header. */
end_comment

begin_undef
undef|#
directive|undef
name|__LA_DECL
end_undef

begin_undef
undef|#
directive|undef
name|__LA_GID_T
end_undef

begin_undef
undef|#
directive|undef
name|__LA_UID_T
end_undef

begin_comment
comment|/* These need to remain defined because they're used in the  * callback type definitions.  XXX Fix this.  This is ugly. XXX */
end_comment

begin_comment
comment|/* #undef __LA_INT64_T */
end_comment

begin_comment
comment|/* #undef __LA_SSIZE_T */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !ARCHIVE_H_INCLUDED */
end_comment

end_unit

