begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1995 - 2000 Kungliga Tekniska HÃ¶gskolan  * (Royal Institute of Technology, Stockholm, Sweden).  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * 3. Neither the name of the Institute nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OTP_H
end_ifndef

begin_define
define|#
directive|define
name|_OTP_H
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_enum
enum|enum
block|{
name|OTPKEYSIZE
init|=
literal|8
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|unsigned
name|char
name|OtpKey
index|[
name|OTPKEYSIZE
index|]
typedef|;
end_typedef

begin_define
define|#
directive|define
name|OTP_MIN_PASSPHRASE
value|10
end_define

begin_define
define|#
directive|define
name|OTP_MAX_PASSPHRASE
value|63
end_define

begin_define
define|#
directive|define
name|OTP_USER_TIMEOUT
value|120
end_define

begin_define
define|#
directive|define
name|OTP_DB_TIMEOUT
value|60
end_define

begin_define
define|#
directive|define
name|OTP_HEXPREFIX
value|"hex:"
end_define

begin_define
define|#
directive|define
name|OTP_WORDPREFIX
value|"word:"
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|OTP_ALG_MD4
block|,
name|OTP_ALG_MD5
block|,
name|OTP_ALG_SHA
block|}
name|OtpAlgID
typedef|;
end_typedef

begin_define
define|#
directive|define
name|OTP_ALG_DEFAULT
value|"md5"
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|OtpAlgID
name|id
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|hashsize
decl_stmt|;
name|int
function_decl|(
modifier|*
name|hash
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|OtpKey
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|next
function_decl|)
parameter_list|(
name|OtpKey
parameter_list|)
function_decl|;
block|}
name|OtpAlgorithm
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|user
decl_stmt|;
name|OtpAlgorithm
modifier|*
name|alg
decl_stmt|;
name|unsigned
name|n
decl_stmt|;
name|char
name|seed
index|[
literal|17
index|]
decl_stmt|;
name|OtpKey
name|key
decl_stmt|;
name|int
name|challengep
decl_stmt|;
name|time_t
name|lock_time
decl_stmt|;
name|char
modifier|*
name|err
decl_stmt|;
block|}
name|OtpContext
typedef|;
end_typedef

begin_function_decl
name|OtpAlgorithm
modifier|*
name|otp_find_alg
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|otp_print_stddict
parameter_list|(
name|OtpKey
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|otp_print_hex
parameter_list|(
name|OtpKey
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|otp_print_stddict_extended
parameter_list|(
name|OtpKey
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|otp_print_hex_extended
parameter_list|(
name|OtpKey
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|otp_checksum
parameter_list|(
name|OtpKey
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_parse_hex
parameter_list|(
name|OtpKey
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_parse_stddict
parameter_list|(
name|OtpKey
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_parse_altdict
parameter_list|(
name|OtpKey
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|OtpAlgorithm
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_parse
parameter_list|(
name|OtpKey
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|OtpAlgorithm
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_challenge
parameter_list|(
name|OtpContext
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_verify_user
parameter_list|(
name|OtpContext
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_verify_user_1
parameter_list|(
name|OtpContext
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|otp_error
parameter_list|(
name|OtpContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|otp_db_open
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|otp_db_close
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_put
parameter_list|(
name|void
modifier|*
parameter_list|,
name|OtpContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_get
parameter_list|(
name|void
modifier|*
parameter_list|,
name|OtpContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_simple_get
parameter_list|(
name|void
modifier|*
parameter_list|,
name|OtpContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|otp_delete
parameter_list|(
name|void
modifier|*
parameter_list|,
name|OtpContext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _OTP_H */
end_comment

end_unit

