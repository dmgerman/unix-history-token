begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MPIFunctionClassifier.h - classifies MPI functions ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file defines functionality to identify and classify MPI functions.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIFUNCTIONCLASSIFIER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_STATICANALYZER_CHECKERS_MPICHECKER_MPIFUNCTIONCLASSIFIER_H
end_define

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|namespace
name|mpi
block|{
name|class
name|MPIFunctionClassifier
block|{
name|public
label|:
name|MPIFunctionClassifier
argument_list|(
argument|ASTContext&ASTCtx
argument_list|)
block|{
name|identifierInit
argument_list|(
name|ASTCtx
argument_list|)
expr_stmt|;
block|}
comment|// general identifiers
name|bool
name|isMPIType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isNonBlockingType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
comment|// point-to-point identifiers
name|bool
name|isPointToPointType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
comment|// collective identifiers
name|bool
name|isCollectiveType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isCollToColl
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isScatterType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isGatherType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isAllgatherType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isAlltoallType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isReduceType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isBcastType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
comment|// additional identifiers
name|bool
name|isMPI_Wait
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isMPI_Waitall
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isWaitType
argument_list|(
specifier|const
name|IdentifierInfo
operator|*
specifier|const
name|IdentInfo
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
comment|// Initializes function identifiers, to recognize them during analysis.
name|void
name|identifierInit
parameter_list|(
name|ASTContext
modifier|&
name|ASTCtx
parameter_list|)
function_decl|;
name|void
name|initPointToPointIdentifiers
parameter_list|(
name|ASTContext
modifier|&
name|ASTCtx
parameter_list|)
function_decl|;
name|void
name|initCollectiveIdentifiers
parameter_list|(
name|ASTContext
modifier|&
name|ASTCtx
parameter_list|)
function_decl|;
name|void
name|initAdditionalIdentifiers
parameter_list|(
name|ASTContext
modifier|&
name|ASTCtx
parameter_list|)
function_decl|;
comment|// The containers are used, to enable classification of MPI-functions during
comment|// analysis.
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|12
operator|>
name|MPINonBlockingTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|10
operator|>
name|MPIPointToPointTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|16
operator|>
name|MPICollectiveTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|4
operator|>
name|MPIPointToCollTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|4
operator|>
name|MPICollToPointTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|6
operator|>
name|MPICollToCollTypes
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|IdentifierInfo
operator|*
operator|,
literal|32
operator|>
name|MPIType
expr_stmt|;
comment|// point-to-point functions
name|IdentifierInfo
modifier|*
name|IdentInfo_MPI_Send
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Isend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Ssend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Issend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Bsend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Ibsend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Rsend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Irsend
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Recv
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Irecv
init|=
name|nullptr
decl_stmt|;
comment|// collective functions
name|IdentifierInfo
modifier|*
name|IdentInfo_MPI_Scatter
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Iscatter
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Gather
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Igather
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Allgather
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Iallgather
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Bcast
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Ibcast
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Reduce
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Ireduce
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Allreduce
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Iallreduce
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Alltoall
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Ialltoall
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Barrier
init|=
name|nullptr
decl_stmt|;
comment|// additional functions
name|IdentifierInfo
modifier|*
name|IdentInfo_MPI_Comm_rank
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Comm_size
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Wait
init|=
name|nullptr
decl_stmt|,
modifier|*
name|IdentInfo_MPI_Waitall
init|=
name|nullptr
decl_stmt|;
block|}
empty_stmt|;
block|}
comment|// end of namespace: mpi
block|}
comment|// end of namespace: ento
block|}
end_decl_stmt

begin_comment
comment|// end of namespace: clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

