begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1991, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)extern.h	8.1 (Berkeley) 6/4/93  */
end_comment

begin_decl_stmt
name|BUFHEAD
modifier|*
name|__add_ovflpage
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__addel
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__big_delete
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__big_insert
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__big_keydata
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|DBT
operator|*
operator|,
name|DBT
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__big_return
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|int
operator|,
name|DBT
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__big_split
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|int
operator|,
name|u_int
operator|,
name|SPLIT_RETURN
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__buf_free
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|__buf_init
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int
name|__call_hash
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__delpair
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__expand_table
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__find_bigpair
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_short
name|__find_last_page
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|__free_ovflpage
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BUFHEAD
modifier|*
name|__get_buf
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|u_int
operator|,
name|BUFHEAD
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__get_page
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|char
operator|*
operator|,
name|u_int
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__init_bitmap
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int
name|__log2
name|__P
argument_list|(
operator|(
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__put_page
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|char
operator|*
operator|,
name|u_int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|__reclaim_buf
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|BUFHEAD
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__split_page
name|__P
argument_list|(
operator|(
name|HTAB
operator|*
operator|,
name|u_int
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Default hash routine. */
end_comment

begin_extern
extern|extern int	(*__default_hash
end_extern

begin_expr_stmt
unit|)
name|__P
argument_list|(
operator|(
name|u_char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|HASH_STATISTICS
end_ifdef

begin_decl_stmt
specifier|extern
name|long
name|hash_accesses
decl_stmt|,
name|hash_collisions
decl_stmt|,
name|hash_expansions
decl_stmt|,
name|hash_overflows
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

