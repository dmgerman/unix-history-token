begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1991, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)extern.h	8.1 (Berkeley) 6/4/93  */
end_comment

begin_include
include|#
directive|include
file|"../btree/extern.h"
end_include

begin_decl_stmt
name|int
name|__rec_close
name|__P
argument_list|(
operator|(
name|DB
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_delete
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_dleaf
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|PAGE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_fd
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_fmap
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_fout
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_fpipe
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_get
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|,
name|DBT
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_iput
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|,
specifier|const
name|DBT
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_put
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
name|dbp
operator|,
name|DBT
operator|*
operator|,
specifier|const
name|DBT
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_ret
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|EPG
operator|*
operator|,
name|recno_t
operator|,
name|DBT
operator|*
operator|,
name|DBT
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EPG
modifier|*
name|__rec_search
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|,
expr|enum
name|SRCHOP
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_seq
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
operator|,
name|DBT
operator|*
operator|,
name|DBT
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_sync
name|__P
argument_list|(
operator|(
specifier|const
name|DB
operator|*
operator|,
name|u_int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_vmap
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_vout
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__rec_vpipe
name|__P
argument_list|(
operator|(
name|BTREE
operator|*
operator|,
name|recno_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

