begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2015 Nuxi, https://nuxi.nl/  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSEARCH_PATH_H
end_ifndef

begin_define
define|#
directive|define
name|TSEARCH_PATH_H
end_define

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|/*  * Bookkeeping for storing a path in a balanced binary search tree from  * the root to a leaf node.  *  * For an AVL tree we know that its maximum height of a tree is bounded  * by approximately 1.44 * log2(n) - 0.328. Given that the number of  * entries of the tree is constrained by the size of the address space,  * two uintptr_t's provide sufficient space to store the path from the  * root to any leaf.  */
end_comment

begin_struct
struct|struct
name|path
block|{
name|uintptr_t
name|steps
index|[
literal|2
index|]
decl_stmt|;
name|unsigned
name|int
name|nsteps
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Initializes the path structure with a zero-length path. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|path_init
parameter_list|(
name|struct
name|path
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|nsteps
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_define
define|#
directive|define
name|STEPS_BIT
value|(sizeof(uintptr_t) * CHAR_BIT)
end_define

begin_comment
comment|/* Pushes a step to the left to the end of the path. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|path_taking_left
parameter_list|(
name|struct
name|path
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|steps
index|[
name|p
operator|->
name|nsteps
operator|/
name|STEPS_BIT
index|]
operator||=
operator|(
name|uintptr_t
operator|)
literal|1
operator|<<
operator|(
name|p
operator|->
name|nsteps
operator|%
name|STEPS_BIT
operator|)
expr_stmt|;
operator|++
name|p
operator|->
name|nsteps
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Pushes a step to the right to the end of the path. */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|path_taking_right
parameter_list|(
name|struct
name|path
modifier|*
name|p
parameter_list|)
block|{
name|p
operator|->
name|steps
index|[
name|p
operator|->
name|nsteps
operator|/
name|STEPS_BIT
index|]
operator|&=
operator|~
operator|(
operator|(
name|uintptr_t
operator|)
literal|1
operator|<<
operator|(
name|p
operator|->
name|nsteps
operator|%
name|STEPS_BIT
operator|)
operator|)
expr_stmt|;
operator|++
name|p
operator|->
name|nsteps
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Pops the first step from the path and returns whether it was a step  * to the left.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|path_took_left
parameter_list|(
name|struct
name|path
modifier|*
name|p
parameter_list|)
block|{
name|bool
name|result
decl_stmt|;
name|result
operator|=
name|p
operator|->
name|steps
index|[
literal|0
index|]
operator|&
literal|0x1
expr_stmt|;
name|p
operator|->
name|steps
index|[
literal|0
index|]
operator|=
operator|(
name|p
operator|->
name|steps
index|[
literal|0
index|]
operator|>>
literal|1
operator|)
operator||
operator|(
name|p
operator|->
name|steps
index|[
literal|1
index|]
operator|<<
operator|(
name|STEPS_BIT
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
name|p
operator|->
name|steps
index|[
literal|1
index|]
operator|>>=
literal|1
expr_stmt|;
return|return
operator|(
name|result
operator|)
return|;
block|}
end_function

begin_undef
undef|#
directive|undef
name|STEPS_BIT
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

