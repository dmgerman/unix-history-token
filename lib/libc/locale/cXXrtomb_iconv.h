begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013 Ed Schouten<ed@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_include
include|#
directive|include
file|<sys/queue.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<langinfo.h>
end_include

begin_include
include|#
directive|include
file|<uchar.h>
end_include

begin_include
include|#
directive|include
file|"../iconv/citrus_hash.h"
end_include

begin_include
include|#
directive|include
file|"../iconv/citrus_module.h"
end_include

begin_include
include|#
directive|include
file|"../iconv/citrus_iconv.h"
end_include

begin_include
include|#
directive|include
file|"xlocale_private.h"
end_include

begin_typedef
typedef|typedef
struct|struct
block|{
name|bool
name|initialized
decl_stmt|;
name|struct
name|_citrus_iconv
name|iconv
decl_stmt|;
union|union
block|{
name|charXX_t
name|widechar
index|[
name|SRCBUF_LEN
index|]
decl_stmt|;
name|char
name|bytes
index|[
sizeof|sizeof
argument_list|(
name|charXX_t
argument_list|)
operator|*
name|SRCBUF_LEN
index|]
decl_stmt|;
block|}
name|srcbuf
union|;
name|size_t
name|srcbuf_len
decl_stmt|;
block|}
name|_ConversionState
typedef|;
end_typedef

begin_assert
assert|_Static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|_ConversionState
argument_list|)
operator|<=
sizeof|sizeof
argument_list|(
name|mbstate_t
argument_list|)
argument_list|,
literal|"Size of _ConversionState must not exceed mbstate_t's size."
argument_list|)
assert|;
end_assert

begin_function
name|size_t
name|cXXrtomb_l
parameter_list|(
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|charXX_t
name|c
parameter_list|,
name|mbstate_t
modifier|*
name|__restrict
name|ps
parameter_list|,
name|locale_t
name|locale
parameter_list|)
block|{
name|_ConversionState
modifier|*
name|cs
decl_stmt|;
name|struct
name|_citrus_iconv
modifier|*
name|handle
decl_stmt|;
specifier|const
name|char
modifier|*
name|src
decl_stmt|;
name|char
modifier|*
name|dst
decl_stmt|;
name|size_t
name|srcleft
decl_stmt|,
name|dstleft
decl_stmt|,
name|invlen
decl_stmt|;
name|int
name|err
decl_stmt|;
name|FIX_LOCALE
argument_list|(
name|locale
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|==
name|NULL
condition|)
name|ps
operator|=
operator|&
name|locale
operator|->
name|cXXrtomb
expr_stmt|;
name|cs
operator|=
operator|(
name|_ConversionState
operator|*
operator|)
name|ps
expr_stmt|;
name|handle
operator|=
operator|&
name|cs
operator|->
name|iconv
expr_stmt|;
comment|/* Reinitialize mbstate_t. */
if|if
condition|(
name|s
operator|==
name|NULL
operator|||
operator|!
name|cs
operator|->
name|initialized
condition|)
block|{
if|if
condition|(
name|_citrus_iconv_open
argument_list|(
operator|&
name|handle
argument_list|,
name|UTF_XX_INTERNAL
argument_list|,
name|nl_langinfo_l
argument_list|(
name|CODESET
argument_list|,
name|locale
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|cs
operator|->
name|initialized
operator|=
name|false
expr_stmt|;
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
name|handle
operator|->
name|cv_shared
operator|->
name|ci_discard_ilseq
operator|=
name|true
expr_stmt|;
name|handle
operator|->
name|cv_shared
operator|->
name|ci_hooks
operator|=
name|NULL
expr_stmt|;
name|cs
operator|->
name|srcbuf_len
operator|=
literal|0
expr_stmt|;
name|cs
operator|->
name|initialized
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|s
operator|==
name|NULL
condition|)
return|return
operator|(
literal|1
operator|)
return|;
block|}
name|assert
argument_list|(
name|cs
operator|->
name|srcbuf_len
operator|<
sizeof|sizeof
argument_list|(
name|cs
operator|->
name|srcbuf
operator|.
name|widechar
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|charXX_t
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|->
name|srcbuf
operator|.
name|widechar
index|[
name|cs
operator|->
name|srcbuf_len
operator|++
index|]
operator|=
name|c
expr_stmt|;
comment|/* Perform conversion. */
name|src
operator|=
name|cs
operator|->
name|srcbuf
operator|.
name|bytes
expr_stmt|;
name|srcleft
operator|=
name|cs
operator|->
name|srcbuf_len
operator|*
sizeof|sizeof
argument_list|(
name|charXX_t
argument_list|)
expr_stmt|;
name|dst
operator|=
name|s
expr_stmt|;
name|dstleft
operator|=
name|MB_CUR_MAX_L
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|err
operator|=
name|_citrus_iconv_convert
argument_list|(
name|handle
argument_list|,
operator|&
name|src
argument_list|,
operator|&
name|srcleft
argument_list|,
operator|&
name|dst
argument_list|,
operator|&
name|dstleft
argument_list|,
literal|0
argument_list|,
operator|&
name|invlen
argument_list|)
expr_stmt|;
comment|/* Character is part of a surrogate pair. We need more input. */
if|if
condition|(
name|err
operator|==
name|EINVAL
condition|)
return|return
operator|(
literal|0
operator|)
return|;
name|cs
operator|->
name|srcbuf_len
operator|=
literal|0
expr_stmt|;
comment|/* Illegal sequence. */
if|if
condition|(
name|dst
operator|==
name|s
condition|)
block|{
name|errno
operator|=
name|EILSEQ
expr_stmt|;
return|return
operator|(
operator|(
name|size_t
operator|)
operator|-
literal|1
operator|)
return|;
block|}
return|return
operator|(
name|dst
operator|-
name|s
operator|)
return|;
block|}
end_function

begin_function
name|size_t
name|cXXrtomb
parameter_list|(
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|charXX_t
name|c
parameter_list|,
name|mbstate_t
modifier|*
name|__restrict
name|ps
parameter_list|)
block|{
return|return
operator|(
name|cXXrtomb_l
argument_list|(
name|s
argument_list|,
name|c
argument_list|,
name|ps
argument_list|,
name|__get_locale
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_function

end_unit

