begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_stdenc_template.h,v 1.4 2008/02/09 14:56:20 junyoung Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_include
include|#
directive|include
file|<iconv.h>
end_include

begin_comment
comment|/*  * CAUTION: THIS IS NOT STANDALONE FILE  *  * function templates of iconv standard encoding handler for each encodings.  *  */
end_comment

begin_comment
comment|/*  * macros  */
end_comment

begin_undef
undef|#
directive|undef
name|_TO_EI
end_undef

begin_undef
undef|#
directive|undef
name|_CE_TO_EI
end_undef

begin_undef
undef|#
directive|undef
name|_TO_STATE
end_undef

begin_define
define|#
directive|define
name|_TO_EI
parameter_list|(
name|_cl_
parameter_list|)
value|((_ENCODING_INFO*)(_cl_))
end_define

begin_define
define|#
directive|define
name|_CE_TO_EI
parameter_list|(
name|_ce_
parameter_list|)
value|(_TO_EI((_ce_)->ce_closure))
end_define

begin_define
define|#
directive|define
name|_TO_STATE
parameter_list|(
name|_ps_
parameter_list|)
value|((_ENCODING_STATE*)(_ps_))
end_define

begin_comment
comment|/* ----------------------------------------------------------------------  * templates for public functions  */
end_comment

begin_function
name|int
name|_FUNCNAME
function|(
name|stdenc_getops
function|)
parameter_list|(
name|struct
name|_citrus_stdenc_ops
modifier|*
name|ops
parameter_list|,
name|size_t
name|lenops
name|__unused
parameter_list|)
block|{
name|memcpy
argument_list|(
name|ops
argument_list|,
operator|&
name|_FUNCNAME
argument_list|(
name|stdenc_ops
argument_list|)
argument_list|,
sizeof|sizeof
argument_list|(
name|_FUNCNAME
argument_list|(
name|stdenc_ops
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_init
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
specifier|const
name|void
modifier|*
name|__restrict
name|var
parameter_list|,
name|size_t
name|lenvar
parameter_list|,
name|struct
name|_citrus_stdenc_traits
modifier|*
name|__restrict
name|et
parameter_list|)
block|{
name|_ENCODING_INFO
modifier|*
name|ei
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|ei
operator|=
name|NULL
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|_ENCODING_INFO
argument_list|)
operator|>
literal|0
condition|)
block|{
name|ei
operator|=
name|calloc
argument_list|(
literal|1
argument_list|,
sizeof|sizeof
argument_list|(
name|_ENCODING_INFO
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ei
operator|==
name|NULL
condition|)
return|return
operator|(
name|errno
operator|)
return|;
block|}
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|encoding_module_init
argument_list|)
argument_list|(
name|ei
argument_list|,
name|var
argument_list|,
name|lenvar
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
condition|)
block|{
name|free
argument_list|(
operator|(
name|void
operator|*
operator|)
name|ei
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
name|ce
operator|->
name|ce_closure
operator|=
name|ei
expr_stmt|;
name|et
operator|->
name|et_state_size
operator|=
sizeof|sizeof
argument_list|(
name|_ENCODING_STATE
argument_list|)
expr_stmt|;
name|et
operator|->
name|et_mb_cur_max
operator|=
name|_ENCODING_MB_CUR_MAX
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|_FUNCNAME
function|(
name|stdenc_uninit
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|)
block|{
if|if
condition|(
name|ce
condition|)
block|{
name|_FUNCNAME
argument_list|(
name|encoding_module_uninit
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|ce
operator|->
name|ce_closure
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_init_state
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|)
block|{
name|_FUNCNAME
argument_list|(
name|init_state
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_mbtocs
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|_citrus_csid_t
modifier|*
name|__restrict
name|csid
parameter_list|,
name|_citrus_index_t
modifier|*
name|__restrict
name|idx
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
parameter_list|)
block|{
name|wchar_t
name|wc
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|mbrtowc_priv
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
operator|&
name|wc
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
name|nresult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ret
operator|==
literal|0
operator|)
operator|&&
operator|*
name|nresult
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|2
condition|)
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|stdenc_wctocs
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|csid
argument_list|,
name|idx
argument_list|,
name|wc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ret
operator|==
literal|0
operator|)
operator|&&
operator|(
name|hooks
operator|!=
name|NULL
operator|)
operator|&&
operator|(
name|hooks
operator|->
name|uc_hook
operator|!=
name|NULL
operator|)
condition|)
name|hooks
operator|->
name|uc_hook
argument_list|(
operator|(
name|unsigned
name|int
operator|)
operator|*
name|idx
argument_list|,
name|hooks
operator|->
name|data
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_cstomb
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|_citrus_csid_t
name|csid
parameter_list|,
name|_citrus_index_t
name|idx
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
name|__unused
parameter_list|)
block|{
name|wchar_t
name|wc
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|wc
operator|=
name|ret
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|csid
operator|!=
name|_CITRUS_CSID_INVALID
condition|)
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|stdenc_cstowc
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
operator|&
name|wc
argument_list|,
name|csid
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|wcrtomb_priv
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|wc
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
name|nresult
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_mbtowc
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|_citrus_wc_t
modifier|*
name|__restrict
name|wc
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|mbrtowc_priv
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|wc
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
name|nresult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|ret
operator|==
literal|0
operator|)
operator|&&
operator|(
name|hooks
operator|!=
name|NULL
operator|)
operator|&&
operator|(
name|hooks
operator|->
name|wc_hook
operator|!=
name|NULL
operator|)
condition|)
name|hooks
operator|->
name|wc_hook
argument_list|(
operator|*
name|wc
argument_list|,
name|hooks
operator|->
name|data
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_wctomb
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|_citrus_wc_t
name|wc
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
name|__unused
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|wcrtomb_priv
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|wc
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
name|nresult
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_put_state_reset
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
name|__unused
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
name|__unused
parameter_list|,
name|size_t
name|n
name|__unused
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
name|__unused
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|)
block|{
if|#
directive|if
name|_ENCODING_IS_STATE_DEPENDENT
return|return
operator|(
operator|(
name|_FUNCNAME
argument_list|(
name|put_state_reset
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
name|nresult
argument_list|)
operator|)
operator|)
return|;
else|#
directive|else
operator|*
name|nresult
operator|=
literal|0
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|int
name|_FUNCNAME
function|(
name|stdenc_get_state_desc
function|)
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|int
name|id
parameter_list|,
name|struct
name|_citrus_stdenc_state_desc
modifier|*
name|__restrict
name|d
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
switch|switch
condition|(
name|id
condition|)
block|{
case|case
name|_STDENC_SDID_GENERIC
case|:
name|ret
operator|=
name|_FUNCNAME
argument_list|(
name|stdenc_get_state_desc_generic
argument_list|)
argument_list|(
name|_CE_TO_EI
argument_list|(
name|ce
argument_list|)
argument_list|,
name|_TO_STATE
argument_list|(
name|ps
argument_list|)
argument_list|,
operator|&
name|d
operator|->
name|u
operator|.
name|generic
operator|.
name|state
argument_list|)
expr_stmt|;
break|break;
default|default:
name|ret
operator|=
name|EOPNOTSUPP
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

end_unit

