begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_mapper.h,v 1.3 2003/07/12 15:39:19 tshiozak Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_MAPPER_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_MAPPER_H_
end_define

begin_struct_decl
struct_decl|struct
name|_citrus_mapper_area
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|_citrus_mapper
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|_citrus_mapper_ops
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|_citrus_mapper_traits
struct_decl|;
end_struct_decl

begin_function_decl
name|__BEGIN_DECLS
name|int
name|_citrus_mapper_create_area
parameter_list|(
name|struct
name|_citrus_mapper_area
modifier|*
name|__restrict
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_mapper_open
parameter_list|(
name|struct
name|_citrus_mapper_area
modifier|*
name|__restrict
parameter_list|,
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_mapper_open_direct
parameter_list|(
name|struct
name|_citrus_mapper_area
modifier|*
name|__restrict
parameter_list|,
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_mapper_close
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_mapper_set_persistent
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|__END_DECLS
include|#
directive|include
file|"citrus_mapper_local.h"
comment|/* return values of _citrus_mapper_convert */
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_SUCCESS
value|(0)
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_NONIDENTICAL
value|(1)
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_SRC_MORE
value|(2)
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_DST_MORE
value|(3)
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_ILSEQ
value|(4)
define|#
directive|define
name|_CITRUS_MAPPER_CONVERT_FATAL
value|(5)
comment|/*  * _citrus_mapper_convert:  *	convert an index.  *	- if the converter supports M:1 converter, the function may return  *	  _CITRUS_MAPPER_CONVERT_SRC_MORE and the storage pointed by dst  *	  may be unchanged in this case, although the internal status of  *	  the mapper is affected.  *	- if the converter supports 1:N converter, the function may return  *	  _CITRUS_MAPPER_CONVERT_DST_MORE. In this case, the contiguous  *	  call of this function ignores src and changes the storage pointed  *	  by dst.  *	- if the converter supports M:N converter, the function may behave  *	  the combination of the above.  *  */
specifier|static
name|__inline
name|int
name|_citrus_mapper_convert
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
name|cm
parameter_list|,
name|_citrus_index_t
modifier|*
name|__restrict
name|dst
parameter_list|,
name|_citrus_index_t
name|src
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|cm
operator|->
name|cm_ops
operator|->
name|mo_convert
call|)
argument_list|(
name|cm
argument_list|,
name|dst
argument_list|,
name|src
argument_list|,
name|ps
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * _citrus_mapper_init_state:  *	initialize the state.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_citrus_mapper_init_state
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
name|cm
parameter_list|)
block|{
call|(
modifier|*
name|cm
operator|->
name|cm_ops
operator|->
name|mo_init_state
call|)
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * _citrus_mapper_get_state_size:  *	get the size of state storage.  */
end_comment

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_mapper_get_state_size
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
name|cm
parameter_list|)
block|{
return|return
operator|(
name|cm
operator|->
name|cm_traits
operator|->
name|mt_state_size
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * _citrus_mapper_get_src_max:  *	get the maximum number of suspended sources.  */
end_comment

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_mapper_get_src_max
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
name|cm
parameter_list|)
block|{
return|return
operator|(
name|cm
operator|->
name|cm_traits
operator|->
name|mt_src_max
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * _citrus_mapper_get_dst_max:  *	get the maximum number of suspended destinations.  */
end_comment

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_mapper_get_dst_max
parameter_list|(
name|struct
name|_citrus_mapper
modifier|*
name|__restrict
name|cm
parameter_list|)
block|{
return|return
operator|(
name|cm
operator|->
name|cm_traits
operator|->
name|mt_dst_max
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

