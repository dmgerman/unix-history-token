begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: _strtol.h,v 1.2 2009/05/20 22:03:29 christos Exp $ */
end_comment

begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-3-Clause  *  * Copyright (c) 1990, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Original version ID:  * NetBSD: src/lib/libc/locale/_wcstol.h,v 1.2 2003/08/07 16:43:03 agc Exp  */
end_comment

begin_comment
comment|/*  * function template for strtol, strtoll and strtoimax.  *  * parameters:  *	_FUNCNAME : function name  *      __INT     : return type  *      __INT_MIN : lower limit of the return type  *      __INT_MAX : upper limit of the return type  */
end_comment

begin_function
name|__INT
name|_FUNCNAME
parameter_list|(
specifier|const
name|char
modifier|*
name|nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|endptr
parameter_list|,
name|int
name|base
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|s
decl_stmt|;
name|__INT
name|acc
decl_stmt|,
name|cutoff
decl_stmt|;
name|unsigned
name|char
name|c
decl_stmt|;
name|int
name|any
decl_stmt|,
name|cutlim
decl_stmt|,
name|i
decl_stmt|,
name|neg
decl_stmt|;
comment|/* check base value */
if|if
condition|(
name|base
operator|&&
operator|(
name|base
operator|<
literal|2
operator|||
name|base
operator|>
literal|36
operator|)
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_STANDALONE
argument_list|)
name|errno
operator|=
name|EINVAL
expr_stmt|;
if|if
condition|(
name|endptr
operator|!=
name|NULL
condition|)
comment|/* LINTED interface specification */
operator|*
name|endptr
operator|=
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|nptr
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
else|#
directive|else
name|panic
argument_list|(
literal|"%s: invalid base %d"
argument_list|,
name|__func__
argument_list|,
name|base
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
comment|/* 	 * Skip white space and pick up leading +/- sign if any. 	 * If base is 0, allow 0x for hex and 0 for octal, else 	 * assume decimal; if base is already 16, allow 0x. 	 */
name|s
operator|=
name|nptr
expr_stmt|;
do|do
block|{
name|c
operator|=
operator|*
name|s
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|isspace
argument_list|(
name|c
argument_list|)
condition|)
do|;
if|if
condition|(
name|c
operator|==
literal|'-'
condition|)
block|{
name|neg
operator|=
literal|1
expr_stmt|;
name|c
operator|=
operator|*
name|s
operator|++
expr_stmt|;
block|}
else|else
block|{
name|neg
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'+'
condition|)
name|c
operator|=
operator|*
name|s
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|base
operator|==
literal|0
operator|||
name|base
operator|==
literal|16
operator|)
operator|&&
name|c
operator|==
literal|'0'
operator|&&
operator|(
operator|*
name|s
operator|==
literal|'x'
operator|||
operator|*
name|s
operator|==
literal|'X'
operator|)
condition|)
block|{
name|c
operator|=
name|s
index|[
literal|1
index|]
expr_stmt|;
name|s
operator|+=
literal|2
expr_stmt|;
name|base
operator|=
literal|16
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|==
literal|0
condition|)
name|base
operator|=
operator|(
name|c
operator|==
literal|'0'
condition|?
literal|8
else|:
literal|10
operator|)
expr_stmt|;
comment|/* 	 * Compute the cutoff value between legal numbers and illegal 	 * numbers.  That is the largest legal value, divided by the 	 * base.  An input number that is greater than this value, if 	 * followed by a legal input character, is too big.  One that 	 * is equal to this value may be valid or not; the limit 	 * between valid and invalid numbers is then based on the last 	 * digit.  For instance, if the range for longs is 	 * [-2147483648..2147483647] and the input base is 10, 	 * cutoff will be set to 214748364 and cutlim to either 	 * 7 (neg==0) or 8 (neg==1), meaning that if we have accumulated 	 * a value> 214748364, or equal but the next digit is> 7 (or 8), 	 * the number is too big, and we will return a range error. 	 * 	 * Set any if any `digits' consumed; make it negative to indicate 	 * overflow. 	 */
name|cutoff
operator|=
operator|(
name|neg
condition|?
name|__INT_MIN
else|:
name|__INT_MAX
operator|)
expr_stmt|;
name|cutlim
operator|=
call|(
name|int
call|)
argument_list|(
name|cutoff
operator|%
name|base
argument_list|)
expr_stmt|;
name|cutoff
operator|/=
name|base
expr_stmt|;
if|if
condition|(
name|neg
condition|)
block|{
if|if
condition|(
name|cutlim
operator|>
literal|0
condition|)
block|{
name|cutlim
operator|-=
name|base
expr_stmt|;
name|cutoff
operator|+=
literal|1
expr_stmt|;
block|}
name|cutlim
operator|=
operator|-
name|cutlim
expr_stmt|;
block|}
for|for
control|(
name|acc
operator|=
literal|0
operator|,
name|any
operator|=
literal|0
init|;
condition|;
name|c
operator|=
operator|*
name|s
operator|++
control|)
block|{
if|if
condition|(
name|isdigit
argument_list|(
name|c
argument_list|)
condition|)
name|i
operator|=
name|c
operator|-
literal|'0'
expr_stmt|;
elseif|else
if|if
condition|(
name|isalpha
argument_list|(
name|c
argument_list|)
condition|)
name|i
operator|=
name|c
operator|-
operator|(
name|isupper
argument_list|(
name|c
argument_list|)
condition|?
literal|'A'
operator|-
literal|10
else|:
literal|'a'
operator|-
literal|10
operator|)
expr_stmt|;
else|else
break|break;
if|if
condition|(
name|i
operator|>=
name|base
condition|)
break|break;
if|if
condition|(
name|any
operator|<
literal|0
condition|)
continue|continue;
if|if
condition|(
name|neg
condition|)
block|{
if|if
condition|(
name|acc
operator|<
name|cutoff
operator|||
operator|(
name|acc
operator|==
name|cutoff
operator|&&
name|i
operator|>
name|cutlim
operator|)
condition|)
block|{
name|acc
operator|=
name|__INT_MIN
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_STANDALONE
argument_list|)
name|any
operator|=
operator|-
literal|1
expr_stmt|;
name|errno
operator|=
name|ERANGE
expr_stmt|;
else|#
directive|else
name|any
operator|=
literal|0
expr_stmt|;
break|break;
endif|#
directive|endif
block|}
else|else
block|{
name|any
operator|=
literal|1
expr_stmt|;
name|acc
operator|*=
name|base
expr_stmt|;
name|acc
operator|-=
name|i
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|acc
operator|>
name|cutoff
operator|||
operator|(
name|acc
operator|==
name|cutoff
operator|&&
name|i
operator|>
name|cutlim
operator|)
condition|)
block|{
name|acc
operator|=
name|__INT_MAX
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_KERNEL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_STANDALONE
argument_list|)
name|any
operator|=
operator|-
literal|1
expr_stmt|;
name|errno
operator|=
name|ERANGE
expr_stmt|;
else|#
directive|else
name|any
operator|=
literal|0
expr_stmt|;
break|break;
endif|#
directive|endif
block|}
else|else
block|{
name|any
operator|=
literal|1
expr_stmt|;
name|acc
operator|*=
name|base
expr_stmt|;
name|acc
operator|+=
name|i
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|endptr
operator|!=
name|NULL
condition|)
comment|/* LINTED interface specification */
operator|*
name|endptr
operator|=
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|any
condition|?
name|s
operator|-
literal|1
else|:
name|nptr
argument_list|)
expr_stmt|;
return|return
operator|(
name|acc
operator|)
return|;
block|}
end_function

end_unit

