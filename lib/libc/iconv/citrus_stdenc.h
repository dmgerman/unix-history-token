begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_stdenc.h,v 1.4 2005/10/29 18:02:04 tshiozak Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_STDENC_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_STDENC_H_
end_define

begin_struct_decl
struct_decl|struct
name|_citrus_stdenc
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|_citrus_stdenc_ops
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|_citrus_stdenc_traits
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|_CITRUS_STDENC_SDID_GENERIC
value|0
end_define

begin_struct
struct|struct
name|_citrus_stdenc_state_desc
block|{
union|union
block|{
struct|struct
block|{
name|int
name|state
decl_stmt|;
define|#
directive|define
name|_CITRUS_STDENC_SDGEN_UNKNOWN
value|0
define|#
directive|define
name|_CITRUS_STDENC_SDGEN_INITIAL
value|1
define|#
directive|define
name|_CITRUS_STDENC_SDGEN_STABLE
value|2
define|#
directive|define
name|_CITRUS_STDENC_SDGEN_INCOMPLETE_CHAR
value|3
define|#
directive|define
name|_CITRUS_STDENC_SDGEN_INCOMPLETE_SHIFT
value|4
block|}
name|generic
struct|;
block|}
name|u
union|;
block|}
struct|;
end_struct

begin_include
include|#
directive|include
file|"citrus_stdenc_local.h"
end_include

begin_function_decl
name|__BEGIN_DECLS
name|int
name|_citrus_stdenc_open
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
modifier|*
name|__restrict
parameter_list|,
name|char
specifier|const
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|void
modifier|*
name|__restrict
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_stdenc_close
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|__END_DECLS
specifier|static
name|__inline
name|int
name|_citrus_stdenc_init_state
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_init_state
call|)
argument_list|(
name|ce
argument_list|,
name|ps
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_stdenc_mbtocs
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|_citrus_csid_t
modifier|*
name|__restrict
name|csid
parameter_list|,
name|_citrus_index_t
modifier|*
name|__restrict
name|idx
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_mbtocs
call|)
argument_list|(
name|ce
argument_list|,
name|csid
argument_list|,
name|idx
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|ps
argument_list|,
name|nresult
argument_list|,
name|hooks
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_stdenc_cstomb
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|_citrus_csid_t
name|csid
parameter_list|,
name|_citrus_index_t
name|idx
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_cstomb
call|)
argument_list|(
name|ce
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|csid
argument_list|,
name|idx
argument_list|,
name|ps
argument_list|,
name|nresult
argument_list|,
name|hooks
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_stdenc_wctomb
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|_citrus_wc_t
name|wc
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|,
name|struct
name|iconv_hooks
modifier|*
name|hooks
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_wctomb
call|)
argument_list|(
name|ce
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|wc
argument_list|,
name|ps
argument_list|,
name|nresult
argument_list|,
name|hooks
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_stdenc_put_state_reset
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|char
modifier|*
name|__restrict
name|s
parameter_list|,
name|size_t
name|n
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|size_t
modifier|*
name|__restrict
name|nresult
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_put_state_reset
call|)
argument_list|(
name|ce
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|ps
argument_list|,
name|nresult
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_stdenc_get_state_size
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|ce
parameter_list|)
block|{
return|return
operator|(
name|ce
operator|->
name|ce_traits
operator|->
name|et_state_size
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_stdenc_get_state_desc
parameter_list|(
name|struct
name|_citrus_stdenc
modifier|*
name|__restrict
name|ce
parameter_list|,
name|void
modifier|*
name|__restrict
name|ps
parameter_list|,
name|int
name|id
parameter_list|,
name|struct
name|_citrus_stdenc_state_desc
modifier|*
name|__restrict
name|d
parameter_list|)
block|{
return|return
operator|(
call|(
modifier|*
name|ce
operator|->
name|ce_ops
operator|->
name|eo_get_state_desc
call|)
argument_list|(
name|ce
argument_list|,
name|ps
argument_list|,
name|id
argument_list|,
name|d
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

