begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_memstream.h,v 1.3 2005/05/14 17:55:42 tshiozak Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_MEMSTREAM_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_MEMSTREAM_H_
end_define

begin_struct
struct|struct
name|_citrus_memory_stream
block|{
name|struct
name|_citrus_region
name|ms_region
decl_stmt|;
name|size_t
name|ms_pos
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|__BEGIN_DECLS
specifier|const
name|char
modifier|*
name|_citrus_memory_stream_getln
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|__restrict
parameter_list|,
name|size_t
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|_citrus_memory_stream_matchline
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|__restrict
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
name|size_t
modifier|*
name|__restrict
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|_citrus_memory_stream_chr
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
parameter_list|,
name|struct
name|_citrus_region
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_memory_stream_skip_ws
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|__END_DECLS
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_iseof
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
return|return
operator|(
name|ms
operator|->
name|ms_pos
operator|>=
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_citrus_memory_stream_bind
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|__restrict
name|ms
parameter_list|,
specifier|const
name|struct
name|_citrus_region
modifier|*
name|__restrict
name|r
parameter_list|)
block|{
name|ms
operator|->
name|ms_region
operator|=
operator|*
name|r
expr_stmt|;
name|ms
operator|->
name|ms_pos
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_citrus_memory_stream_bind_ptr
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|__restrict
name|ms
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
name|struct
name|_citrus_region
name|r
decl_stmt|;
name|_citrus_region_init
argument_list|(
operator|&
name|r
argument_list|,
name|ptr
argument_list|,
name|sz
argument_list|)
expr_stmt|;
name|_citrus_memory_stream_bind
argument_list|(
name|ms
argument_list|,
operator|&
name|r
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_citrus_memory_stream_rewind
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
name|ms
operator|->
name|ms_pos
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_memory_stream_tell
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
return|return
operator|(
name|ms
operator|->
name|ms_pos
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_memory_stream_remainder
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
name|size_t
name|sz
decl_stmt|;
name|sz
operator|=
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
expr_stmt|;
if|if
condition|(
name|ms
operator|->
name|ms_pos
operator|>
name|sz
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
name|sz
operator|-
name|ms
operator|->
name|ms_pos
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_seek
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|size_t
name|pos
parameter_list|,
name|int
name|w
parameter_list|)
block|{
name|size_t
name|sz
decl_stmt|;
name|sz
operator|=
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|w
condition|)
block|{
case|case
name|SEEK_SET
case|:
if|if
condition|(
name|pos
operator|>=
name|sz
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|ms
operator|->
name|ms_pos
operator|=
name|pos
expr_stmt|;
break|break;
case|case
name|SEEK_CUR
case|:
name|pos
operator|+=
operator|(
name|ssize_t
operator|)
name|ms
operator|->
name|ms_pos
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|sz
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|ms
operator|->
name|ms_pos
operator|=
name|pos
expr_stmt|;
break|break;
case|case
name|SEEK_END
case|:
if|if
condition|(
name|sz
operator|<
name|pos
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|ms
operator|->
name|ms_pos
operator|=
name|sz
operator|-
name|pos
expr_stmt|;
break|break;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_getc
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
if|if
condition|(
name|_citrus_memory_stream_iseof
argument_list|(
name|ms
argument_list|)
condition|)
return|return
operator|(
name|EOF
operator|)
return|;
return|return
operator|(
name|_citrus_region_peek8
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
operator|++
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_citrus_memory_stream_ungetc
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|int
name|ch
parameter_list|)
block|{
if|if
condition|(
name|ch
operator|!=
name|EOF
operator|&&
name|ms
operator|->
name|ms_pos
operator|>
literal|0
condition|)
name|ms
operator|->
name|ms_pos
operator|--
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_peek
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|)
block|{
if|if
condition|(
name|_citrus_memory_stream_iseof
argument_list|(
name|ms
argument_list|)
condition|)
return|return
operator|(
name|EOF
operator|)
return|;
return|return
operator|(
name|_citrus_region_peek8
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|_citrus_memory_stream_getregion
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
if|if
condition|(
name|ms
operator|->
name|ms_pos
operator|+
name|sz
operator|>
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|ret
operator|=
name|_citrus_region_offset
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
argument_list|)
expr_stmt|;
name|ms
operator|->
name|ms_pos
operator|+=
name|sz
expr_stmt|;
if|if
condition|(
name|r
condition|)
name|_citrus_region_init
argument_list|(
name|r
argument_list|,
name|ret
argument_list|,
name|sz
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_get8
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|uint8_t
modifier|*
name|rval
parameter_list|)
block|{
if|if
condition|(
name|ms
operator|->
name|ms_pos
operator|+
literal|1
operator|>
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
operator|*
name|rval
operator|=
name|_citrus_region_peek8
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
argument_list|)
expr_stmt|;
name|ms
operator|->
name|ms_pos
operator|+=
literal|2
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_get16
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|uint16_t
modifier|*
name|rval
parameter_list|)
block|{
if|if
condition|(
name|ms
operator|->
name|ms_pos
operator|+
literal|2
operator|>
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
operator|*
name|rval
operator|=
name|_citrus_region_peek16
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
argument_list|)
expr_stmt|;
name|ms
operator|->
name|ms_pos
operator|+=
literal|2
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_get32
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|uint32_t
modifier|*
name|rval
parameter_list|)
block|{
if|if
condition|(
name|ms
operator|->
name|ms_pos
operator|+
literal|4
operator|>
name|_citrus_region_size
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
operator|*
name|rval
operator|=
name|_citrus_region_peek32
argument_list|(
operator|&
name|ms
operator|->
name|ms_region
argument_list|,
name|ms
operator|->
name|ms_pos
argument_list|)
expr_stmt|;
name|ms
operator|->
name|ms_pos
operator|+=
literal|4
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_memory_stream_getln_region
parameter_list|(
name|struct
name|_citrus_memory_stream
modifier|*
name|ms
parameter_list|,
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ptr
decl_stmt|;
name|size_t
name|sz
decl_stmt|;
name|ptr
operator|=
name|_citrus_memory_stream_getln
argument_list|(
name|ms
argument_list|,
operator|&
name|sz
argument_list|)
expr_stmt|;
if|if
condition|(
name|ptr
condition|)
name|_citrus_region_init
argument_list|(
name|r
argument_list|,
name|__DECONST
argument_list|(
name|void
operator|*
argument_list|,
name|ptr
argument_list|)
argument_list|,
name|sz
argument_list|)
expr_stmt|;
return|return
operator|(
name|ptr
operator|==
name|NULL
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

