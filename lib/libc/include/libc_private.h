begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1998 John Birrell<jb@cimlogic.com.au>.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY JOHN BIRRELL AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  *  * Private definitions for libc, libc_r and libpthread.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBC_PRIVATE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LIBC_PRIVATE_H_
end_define

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_include
include|#
directive|include
file|<sys/_pthreadtypes.h>
end_include

begin_comment
comment|/*  * This global flag is non-zero when a process has created one  * or more threads. It is used to avoid calling locking functions  * when they are not required.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBC_ISTHREADED_DECLARED
end_ifndef

begin_define
define|#
directive|define
name|__LIBC_ISTHREADED_DECLARED
end_define

begin_decl_stmt
specifier|extern
name|int
name|__isthreaded
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Elf_Auxinfo *__elf_aux_vector, the pointer to the ELF aux vector  * provided by kernel. Either set for us by rtld, or found at runtime  * on stack for static binaries.  *  * Type is void to avoid polluting whole libc with ELF types.  */
end_comment

begin_decl_stmt
specifier|extern
name|void
modifier|*
name|__elf_aux_vector
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * libc should use libc_dlopen internally, which respects a global  * flag where loading of new shared objects can be restricted.  */
end_comment

begin_function_decl
name|void
modifier|*
name|libc_dlopen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * For dynamic linker.  */
end_comment

begin_function_decl
name|void
name|_rtld_error
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * File lock contention is difficult to diagnose without knowing  * where locks were set. Allow a debug library to be built which  * records the source file and line number of each lock call.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_FLOCK_DEBUG
end_ifdef

begin_define
define|#
directive|define
name|_FLOCKFILE
parameter_list|(
name|x
parameter_list|)
value|_flockfile_debug(x, __FILE__, __LINE__)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_FLOCKFILE
parameter_list|(
name|x
parameter_list|)
value|_flockfile(x)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Macros for locking and unlocking FILEs. These test if the  * process is threaded to avoid locking when not required.  */
end_comment

begin_define
define|#
directive|define
name|FLOCKFILE
parameter_list|(
name|fp
parameter_list|)
value|if (__isthreaded) _FLOCKFILE(fp)
end_define

begin_define
define|#
directive|define
name|FUNLOCKFILE
parameter_list|(
name|fp
parameter_list|)
value|if (__isthreaded) _funlockfile(fp)
end_define

begin_struct_decl
struct_decl|struct
name|_spinlock
struct_decl|;
end_struct_decl

begin_decl_stmt
specifier|extern
name|struct
name|_spinlock
name|__stdio_thread_lock
name|__hidden
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|STDIO_THREAD_LOCK
parameter_list|()
define|\
value|do {							\ 	if (__isthreaded)				\ 		_SPINLOCK(&__stdio_thread_lock);	\ } while (0)
end_define

begin_define
define|#
directive|define
name|STDIO_THREAD_UNLOCK
parameter_list|()
define|\
value|do {							\ 	if (__isthreaded)				\ 		_SPINUNLOCK(&__stdio_thread_lock);	\ } while (0)
end_define

begin_function_decl
name|void
name|__libc_spinlock_stub
parameter_list|(
name|struct
name|_spinlock
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__libc_spinunlock_stub
parameter_list|(
name|struct
name|_spinlock
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Indexes into the pthread jump table.  *  * Warning! If you change this type, you must also change the threads  * libraries that reference it (libc_r, libpthread).  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|PJT_ATFORK
block|,
name|PJT_ATTR_DESTROY
block|,
name|PJT_ATTR_GETDETACHSTATE
block|,
name|PJT_ATTR_GETGUARDSIZE
block|,
name|PJT_ATTR_GETINHERITSCHED
block|,
name|PJT_ATTR_GETSCHEDPARAM
block|,
name|PJT_ATTR_GETSCHEDPOLICY
block|,
name|PJT_ATTR_GETSCOPE
block|,
name|PJT_ATTR_GETSTACKADDR
block|,
name|PJT_ATTR_GETSTACKSIZE
block|,
name|PJT_ATTR_INIT
block|,
name|PJT_ATTR_SETDETACHSTATE
block|,
name|PJT_ATTR_SETGUARDSIZE
block|,
name|PJT_ATTR_SETINHERITSCHED
block|,
name|PJT_ATTR_SETSCHEDPARAM
block|,
name|PJT_ATTR_SETSCHEDPOLICY
block|,
name|PJT_ATTR_SETSCOPE
block|,
name|PJT_ATTR_SETSTACKADDR
block|,
name|PJT_ATTR_SETSTACKSIZE
block|,
name|PJT_CANCEL
block|,
name|PJT_CLEANUP_POP
block|,
name|PJT_CLEANUP_PUSH
block|,
name|PJT_COND_BROADCAST
block|,
name|PJT_COND_DESTROY
block|,
name|PJT_COND_INIT
block|,
name|PJT_COND_SIGNAL
block|,
name|PJT_COND_TIMEDWAIT
block|,
name|PJT_COND_WAIT
block|,
name|PJT_DETACH
block|,
name|PJT_EQUAL
block|,
name|PJT_EXIT
block|,
name|PJT_GETSPECIFIC
block|,
name|PJT_JOIN
block|,
name|PJT_KEY_CREATE
block|,
name|PJT_KEY_DELETE
block|,
name|PJT_KILL
block|,
name|PJT_MAIN_NP
block|,
name|PJT_MUTEXATTR_DESTROY
block|,
name|PJT_MUTEXATTR_INIT
block|,
name|PJT_MUTEXATTR_SETTYPE
block|,
name|PJT_MUTEX_DESTROY
block|,
name|PJT_MUTEX_INIT
block|,
name|PJT_MUTEX_LOCK
block|,
name|PJT_MUTEX_TRYLOCK
block|,
name|PJT_MUTEX_UNLOCK
block|,
name|PJT_ONCE
block|,
name|PJT_RWLOCK_DESTROY
block|,
name|PJT_RWLOCK_INIT
block|,
name|PJT_RWLOCK_RDLOCK
block|,
name|PJT_RWLOCK_TRYRDLOCK
block|,
name|PJT_RWLOCK_TRYWRLOCK
block|,
name|PJT_RWLOCK_UNLOCK
block|,
name|PJT_RWLOCK_WRLOCK
block|,
name|PJT_SELF
block|,
name|PJT_SETCANCELSTATE
block|,
name|PJT_SETCANCELTYPE
block|,
name|PJT_SETSPECIFIC
block|,
name|PJT_SIGMASK
block|,
name|PJT_TESTCANCEL
block|,
name|PJT_CLEANUP_POP_IMP
block|,
name|PJT_CLEANUP_PUSH_IMP
block|,
name|PJT_CANCEL_ENTER
block|,
name|PJT_CANCEL_LEAVE
block|,
name|PJT_MUTEX_CONSISTENT
block|,
name|PJT_MUTEXATTR_GETROBUST
block|,
name|PJT_MUTEXATTR_SETROBUST
block|,
name|PJT_MAX
block|}
name|pjt_index_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|pthread_func_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|pthread_func_t
name|pthread_func_entry_t
index|[
literal|2
index|]
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|pthread_func_entry_t
name|__thr_jtable
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|__set_error_selector
parameter_list|(
name|int
modifier|*
function_decl|(
modifier|*
name|arg
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_pthread_mutex_init_calloc_cb_stub
parameter_list|(
name|pthread_mutex_t
modifier|*
name|mutex
parameter_list|,
name|void
modifier|*
function_decl|(
name|calloc_cb
function_decl|)
parameter_list|(
name|__size_t
parameter_list|,
name|__size_t
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|interpos_func_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|interpos_func_t
modifier|*
name|__libc_interposing_slot
parameter_list|(
name|int
name|interposno
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|interpos_func_t
name|__libc_interposing
index|[]
name|__hidden
decl_stmt|;
end_decl_stmt

begin_enum
enum|enum
block|{
name|INTERPOS_accept
block|,
name|INTERPOS_accept4
block|,
name|INTERPOS_aio_suspend
block|,
name|INTERPOS_close
block|,
name|INTERPOS_connect
block|,
name|INTERPOS_fcntl
block|,
name|INTERPOS_fsync
block|,
name|INTERPOS_fork
block|,
name|INTERPOS_msync
block|,
name|INTERPOS_nanosleep
block|,
name|INTERPOS_openat
block|,
name|INTERPOS_poll
block|,
name|INTERPOS_pselect
block|,
name|INTERPOS_recvfrom
block|,
name|INTERPOS_recvmsg
block|,
name|INTERPOS_select
block|,
name|INTERPOS_sendmsg
block|,
name|INTERPOS_sendto
block|,
name|INTERPOS_setcontext
block|,
name|INTERPOS_sigaction
block|,
name|INTERPOS_sigprocmask
block|,
name|INTERPOS_sigsuspend
block|,
name|INTERPOS_sigwait
block|,
name|INTERPOS_sigtimedwait
block|,
name|INTERPOS_sigwaitinfo
block|,
name|INTERPOS_swapcontext
block|,
name|INTERPOS_system
block|,
name|INTERPOS_tcdrain
block|,
name|INTERPOS_read
block|,
name|INTERPOS_readv
block|,
name|INTERPOS_wait4
block|,
name|INTERPOS_write
block|,
name|INTERPOS_writev
block|,
name|INTERPOS__pthread_mutex_init_calloc_cb
block|,
name|INTERPOS_spinlock
block|,
name|INTERPOS_spinunlock
block|,
name|INTERPOS_kevent
block|,
name|INTERPOS_wait6
block|,
name|INTERPOS_ppoll
block|,
name|INTERPOS_map_stacks_exec
block|,
name|INTERPOS_fdatasync
block|,
name|INTERPOS_clock_nanosleep
block|,
name|INTERPOS_MAX
block|}
enum|;
end_enum

begin_comment
comment|/*  * yplib internal interfaces  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|YP
end_ifdef

begin_function_decl
name|int
name|_yp_check
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Initialise TLS for static programs  */
end_comment

begin_function_decl
name|void
name|_init_tls
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Provides pthread_once()-like functionality for both single-threaded  * and multi-threaded applications.  */
end_comment

begin_function_decl
name|int
name|_once
parameter_list|(
name|pthread_once_t
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Set the TLS thread pointer  */
end_comment

begin_function_decl
name|void
name|_set_tp
parameter_list|(
name|void
modifier|*
name|tp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * This is a pointer in the C run-time startup code. It is used  * by getprogname() and setprogname().  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|__progname
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * This function is used by the threading libraries to notify malloc that a  * thread is exiting.  */
end_comment

begin_function_decl
name|void
name|_malloc_thread_cleanup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * This function is used by the threading libraries to notify libc that a  * thread is exiting, so its thread-local dtors should be called.  */
end_comment

begin_function_decl
name|void
name|__cxa_thread_call_dtors
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|__cxa_thread_atexit_hidden
argument_list|(
name|void
argument_list|(
operator|*
name|dtor_func
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
argument_list|,
name|void
operator|*
name|obj
argument_list|,
name|void
operator|*
name|dso_symbol
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * These functions are used by the threading libraries in order to protect  * malloc across fork().  */
end_comment

begin_function_decl
name|void
name|_malloc_prefork
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_malloc_postfork
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_malloc_first_thread
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Function to clean up streams, called from abort() and exit().  */
end_comment

begin_extern
extern|extern void (*__cleanup
end_extern

begin_expr_stmt
unit|)
operator|(
name|void
operator|)
name|__hidden
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  * Get kern.osreldate to detect ABI revisions.  Explicitly  * ignores value of $OSVERSION and caches result.  */
end_comment

begin_function_decl
name|int
name|__getosreldate
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_include
include|#
directive|include
file|<sys/_sigset.h>
end_include

begin_struct_decl
struct_decl|struct
name|aiocb
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|fd_set
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|iovec
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|kevent
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|msghdr
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pollfd
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|rusage
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sigaction
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sockaddr
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|timespec
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|timeval
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|timezone
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|__siginfo
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|__ucontext
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|__wrusage
struct_decl|;
end_struct_decl

begin_enum_decl
enum_decl|enum
name|idtype
enum_decl|;
end_enum_decl

begin_decl_stmt
name|int
name|__sys_aio_suspend
argument_list|(
specifier|const
expr|struct
name|aiocb
operator|*
specifier|const
index|[]
argument_list|,
name|int
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|__sys_accept
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|__socklen_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_accept4
parameter_list|(
name|int
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|__socklen_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_clock_gettime
parameter_list|(
name|__clockid_t
parameter_list|,
name|struct
name|timespec
modifier|*
name|ts
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_clock_nanosleep
parameter_list|(
name|__clockid_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|,
name|struct
name|timespec
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_close
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_connect
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|__socklen_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_fcntl
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_fdatasync
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_fsync
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__pid_t
name|__sys_fork
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_ftruncate
parameter_list|(
name|int
parameter_list|,
name|__off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_gettimeofday
parameter_list|(
name|struct
name|timeval
modifier|*
parameter_list|,
name|struct
name|timezone
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_kevent
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|kevent
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|kevent
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__off_t
name|__sys_lseek
parameter_list|(
name|int
parameter_list|,
name|__off_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|__sys_mmap
parameter_list|(
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|__off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_msync
parameter_list|(
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_nanosleep
parameter_list|(
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|,
name|struct
name|timespec
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_open
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_openat
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_pselect
parameter_list|(
name|int
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|,
specifier|const
name|__sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_ptrace
parameter_list|(
name|int
parameter_list|,
name|__pid_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_poll
parameter_list|(
name|struct
name|pollfd
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_ppoll
parameter_list|(
name|struct
name|pollfd
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|,
specifier|const
name|__sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_pread
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|__off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_pwrite
parameter_list|(
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|__off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_read
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_readv
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|iovec
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_recv
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_recvfrom
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|int
parameter_list|,
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|__socklen_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_recvmsg
parameter_list|(
name|int
parameter_list|,
name|struct
name|msghdr
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_select
parameter_list|(
name|int
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
name|struct
name|fd_set
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_sendmsg
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|msghdr
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_sendto
parameter_list|(
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|sockaddr
modifier|*
parameter_list|,
name|__socklen_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_setcontext
parameter_list|(
specifier|const
name|struct
name|__ucontext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigaction
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|sigaction
modifier|*
parameter_list|,
name|struct
name|sigaction
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigprocmask
parameter_list|(
name|int
parameter_list|,
specifier|const
name|__sigset_t
modifier|*
parameter_list|,
name|__sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigsuspend
parameter_list|(
specifier|const
name|__sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigtimedwait
parameter_list|(
specifier|const
name|__sigset_t
modifier|*
parameter_list|,
name|struct
name|__siginfo
modifier|*
parameter_list|,
specifier|const
name|struct
name|timespec
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigwait
parameter_list|(
specifier|const
name|__sigset_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_sigwaitinfo
parameter_list|(
specifier|const
name|__sigset_t
modifier|*
parameter_list|,
name|struct
name|__siginfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_swapcontext
parameter_list|(
name|struct
name|__ucontext
modifier|*
parameter_list|,
specifier|const
name|struct
name|__ucontext
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_thr_kill
parameter_list|(
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_thr_self
parameter_list|(
name|long
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__sys_truncate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|__off_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__pid_t
name|__sys_wait4
parameter_list|(
name|__pid_t
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|rusage
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__pid_t
name|__sys_wait6
parameter_list|(
name|enum
name|idtype
parameter_list|,
name|__id_t
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|__wrusage
modifier|*
parameter_list|,
name|struct
name|__siginfo
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_write
parameter_list|(
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|__size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__ssize_t
name|__sys_writev
parameter_list|(
name|int
parameter_list|,
specifier|const
name|struct
name|iovec
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|__libc_sigaction
argument_list|(
name|int
argument_list|,
specifier|const
expr|struct
name|sigaction
operator|*
argument_list|,
expr|struct
name|sigaction
operator|*
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__libc_sigprocmask
argument_list|(
name|int
argument_list|,
specifier|const
name|__sigset_t
operator|*
argument_list|,
name|__sigset_t
operator|*
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__libc_sigsuspend
argument_list|(
specifier|const
name|__sigset_t
operator|*
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|__libc_sigwait
parameter_list|(
specifier|const
name|__sigset_t
modifier|*
name|__restrict
parameter_list|,
name|int
modifier|*
specifier|restrict
name|sig
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__libc_system
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__libc_tcdrain
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|__fcntl_compat
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|cmd
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|__sys_futimens
argument_list|(
name|int
name|fd
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|times
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|__sys_utimensat
argument_list|(
name|int
name|fd
argument_list|,
specifier|const
name|char
operator|*
name|path
argument_list|,
specifier|const
expr|struct
name|timespec
operator|*
name|times
argument_list|,
name|int
name|flag
argument_list|)
name|__hidden
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* execve() with PATH processing to implement posix_spawnp() */
end_comment

begin_function_decl
name|int
name|_execvpe
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_elf_aux_info
parameter_list|(
name|int
name|aux
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|buflen
parameter_list|)
function_decl|;
end_function_decl

begin_struct_decl
struct_decl|struct
name|dl_phdr_info
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|__elf_phdr_match_addr
parameter_list|(
name|struct
name|dl_phdr_info
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__init_elf_aux_vector
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__libc_map_stacks_exec
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_pthread_cancel_enter
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_pthread_cancel_leave
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__throw_constraint_handler_s
parameter_list|(
specifier|const
name|char
modifier|*
specifier|restrict
name|msg
parameter_list|,
name|int
name|error
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBC_PRIVATE_H_ */
end_comment

end_unit

