begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990, 1993  *	The Regents of the University of California.  All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * Chris Torek.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * This file defines common routines used by both printf and wprintf.  * You must define CHAR to either char or wchar_t prior to including this.  */
end_comment

begin_define
define|#
directive|define
name|NIOV
value|8
end_define

begin_struct
struct|struct
name|io_state
block|{
name|FILE
modifier|*
name|fp
decl_stmt|;
name|struct
name|__suio
name|uio
decl_stmt|;
comment|/* output information: summary */
name|struct
name|__siov
name|iov
index|[
name|NIOV
index|]
decl_stmt|;
comment|/* ... and individual io vectors */
name|struct
name|__siov
modifier|*
name|iovp
decl_stmt|;
comment|/* pointer to next free slot in iov */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|io_init
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
block|{
name|iop
operator|->
name|uio
operator|.
name|uio_iov
operator|=
name|iop
operator|->
name|iovp
operator|=
name|iop
operator|->
name|iov
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_resid
operator|=
literal|0
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
operator|=
literal|0
expr_stmt|;
name|iop
operator|->
name|fp
operator|=
name|fp
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * WARNING: The buffer passed to io_print() is not copied immediately; it must  * remain valid until io_flush() is called.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_print
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|iop
operator|->
name|iovp
operator|->
name|iov_base
operator|=
operator|(
name|char
operator|*
operator|)
name|ptr
expr_stmt|;
name|iop
operator|->
name|iovp
operator|->
name|iov_len
operator|=
name|len
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_resid
operator|+=
name|len
expr_stmt|;
name|iop
operator|->
name|iovp
operator|++
expr_stmt|;
if|if
condition|(
operator|++
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
operator|>=
name|NIOV
condition|)
block|{
name|iop
operator|->
name|iovp
operator|=
name|iop
operator|->
name|iov
expr_stmt|;
return|return
operator|(
name|__sprint
argument_list|(
name|iop
operator|->
name|fp
argument_list|,
operator|&
name|iop
operator|->
name|uio
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Choose PADSIZE to trade efficiency vs. size.  If larger printf  * fields occur frequently, increase PADSIZE and make the initialisers  * below longer.  */
end_comment

begin_define
define|#
directive|define
name|PADSIZE
value|16
end_define

begin_comment
comment|/* pad chunk size */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|CHAR
name|blanks
index|[
name|PADSIZE
index|]
init|=
block|{
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|CHAR
name|zeroes
index|[
name|PADSIZE
index|]
init|=
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Pad with blanks or zeroes. 'with' should point to either the blanks array  * or the zeroes array.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_pad
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
name|int
name|howmany
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|with
parameter_list|)
block|{
while|while
condition|(
name|howmany
operator|>
name|PADSIZE
condition|)
block|{
if|if
condition|(
name|io_print
argument_list|(
name|iop
argument_list|,
name|with
argument_list|,
name|PADSIZE
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|howmany
operator|-=
name|PADSIZE
expr_stmt|;
block|}
if|if
condition|(
name|howmany
operator|>
literal|0
operator|&&
name|io_print
argument_list|(
name|iop
argument_list|,
name|with
argument_list|,
name|howmany
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Print exactly len characters of the string spanning p to ep, truncating  * or padding with 'with' as necessary.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_printandpad
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|p
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|ep
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|with
parameter_list|)
block|{
name|int
name|p_len
decl_stmt|;
name|p_len
operator|=
name|ep
operator|-
name|p
expr_stmt|;
if|if
condition|(
name|p_len
operator|>
name|len
condition|)
name|p_len
operator|=
name|len
expr_stmt|;
if|if
condition|(
name|p_len
operator|>
literal|0
operator|&&
name|io_print
argument_list|(
name|iop
argument_list|,
name|p
argument_list|,
name|p_len
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
name|io_pad
argument_list|(
name|iop
argument_list|,
name|len
operator|-
operator|(
name|p_len
operator|>
literal|0
condition|?
name|p_len
else|:
literal|0
operator|)
argument_list|,
name|with
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|io_flush
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|)
block|{
name|iop
operator|->
name|iovp
operator|=
name|iop
operator|->
name|iov
expr_stmt|;
return|return
operator|(
name|__sprint
argument_list|(
name|iop
operator|->
name|fp
argument_list|,
operator|&
name|iop
operator|->
name|uio
argument_list|)
operator|)
return|;
block|}
end_function

end_unit

