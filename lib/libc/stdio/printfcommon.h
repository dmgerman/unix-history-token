begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1990, 1993  *	The Regents of the University of California.  All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * Chris Torek.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * This file defines common routines used by both printf and wprintf.  * You must define CHAR to either char or wchar_t prior to including this.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NO_FLOATING_POINT
end_ifndef

begin_define
define|#
directive|define
name|dtoa
value|__dtoa
end_define

begin_define
define|#
directive|define
name|freedtoa
value|__freedtoa
end_define

begin_include
include|#
directive|include
file|<float.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_include
include|#
directive|include
file|"floatio.h"
end_include

begin_include
include|#
directive|include
file|"gdtoa.h"
end_include

begin_define
define|#
directive|define
name|DEFPREC
value|6
end_define

begin_function_decl
specifier|static
name|int
name|exponent
parameter_list|(
name|CHAR
modifier|*
parameter_list|,
name|int
parameter_list|,
name|CHAR
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !NO_FLOATING_POINT */
end_comment

begin_function_decl
specifier|static
name|CHAR
modifier|*
name|__ujtoa
parameter_list|(
name|uintmax_t
parameter_list|,
name|CHAR
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|CHAR
modifier|*
name|__ultoa
parameter_list|(
name|u_long
parameter_list|,
name|CHAR
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|NIOV
value|8
end_define

begin_struct
struct|struct
name|io_state
block|{
name|FILE
modifier|*
name|fp
decl_stmt|;
name|struct
name|__suio
name|uio
decl_stmt|;
comment|/* output information: summary */
name|struct
name|__siov
name|iov
index|[
name|NIOV
index|]
decl_stmt|;
comment|/* ... and individual io vectors */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|io_init
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
block|{
name|iop
operator|->
name|uio
operator|.
name|uio_iov
operator|=
name|iop
operator|->
name|iov
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_resid
operator|=
literal|0
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
operator|=
literal|0
expr_stmt|;
name|iop
operator|->
name|fp
operator|=
name|fp
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * WARNING: The buffer passed to io_print() is not copied immediately; it must  * remain valid until io_flush() is called.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_print
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|iop
operator|->
name|iov
index|[
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
index|]
operator|.
name|iov_base
operator|=
operator|(
name|char
operator|*
operator|)
name|ptr
expr_stmt|;
name|iop
operator|->
name|iov
index|[
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
index|]
operator|.
name|iov_len
operator|=
name|len
expr_stmt|;
name|iop
operator|->
name|uio
operator|.
name|uio_resid
operator|+=
name|len
expr_stmt|;
if|if
condition|(
operator|++
name|iop
operator|->
name|uio
operator|.
name|uio_iovcnt
operator|>=
name|NIOV
condition|)
return|return
operator|(
name|__sprint
argument_list|(
name|iop
operator|->
name|fp
argument_list|,
operator|&
name|iop
operator|->
name|uio
argument_list|)
operator|)
return|;
else|else
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Choose PADSIZE to trade efficiency vs. size.  If larger printf  * fields occur frequently, increase PADSIZE and make the initialisers  * below longer.  */
end_comment

begin_define
define|#
directive|define
name|PADSIZE
value|16
end_define

begin_comment
comment|/* pad chunk size */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|CHAR
name|blanks
index|[
name|PADSIZE
index|]
init|=
block|{
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|,
literal|' '
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|CHAR
name|zeroes
index|[
name|PADSIZE
index|]
init|=
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Pad with blanks or zeroes. 'with' should point to either the blanks array  * or the zeroes array.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_pad
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
name|int
name|howmany
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|with
parameter_list|)
block|{
name|int
name|n
decl_stmt|;
while|while
condition|(
name|howmany
operator|>
literal|0
condition|)
block|{
name|n
operator|=
operator|(
name|howmany
operator|>=
name|PADSIZE
operator|)
condition|?
name|PADSIZE
else|:
name|howmany
expr_stmt|;
if|if
condition|(
name|io_print
argument_list|(
name|iop
argument_list|,
name|with
argument_list|,
name|n
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|howmany
operator|-=
name|n
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Print exactly len characters of the string spanning p to ep, truncating  * or padding with 'with' as necessary.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|io_printandpad
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|p
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|ep
parameter_list|,
name|int
name|len
parameter_list|,
specifier|const
name|CHAR
modifier|*
name|__restrict
name|with
parameter_list|)
block|{
name|int
name|p_len
decl_stmt|;
name|p_len
operator|=
name|ep
operator|-
name|p
expr_stmt|;
if|if
condition|(
name|p_len
operator|>
name|len
condition|)
name|p_len
operator|=
name|len
expr_stmt|;
if|if
condition|(
name|p_len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|io_print
argument_list|(
name|iop
argument_list|,
name|p
argument_list|,
name|p_len
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
else|else
block|{
name|p_len
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|(
name|io_pad
argument_list|(
name|iop
argument_list|,
name|len
operator|-
name|p_len
argument_list|,
name|with
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|io_flush
parameter_list|(
name|struct
name|io_state
modifier|*
name|iop
parameter_list|)
block|{
return|return
operator|(
name|__sprint
argument_list|(
name|iop
operator|->
name|fp
argument_list|,
operator|&
name|iop
operator|->
name|uio
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Convert an unsigned long to ASCII for printf purposes, returning  * a pointer to the first character of the string representation.  * Octal numbers can be forced to have a leading zero; hex numbers  * use the given digits.  */
end_comment

begin_function
specifier|static
name|CHAR
modifier|*
name|__ultoa
parameter_list|(
name|u_long
name|val
parameter_list|,
name|CHAR
modifier|*
name|endp
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|octzero
parameter_list|,
specifier|const
name|char
modifier|*
name|xdigs
parameter_list|,
name|int
name|needgrp
parameter_list|,
name|char
name|thousep
parameter_list|,
specifier|const
name|char
modifier|*
name|grp
parameter_list|)
block|{
name|CHAR
modifier|*
name|cp
init|=
name|endp
decl_stmt|;
name|long
name|sval
decl_stmt|;
name|int
name|ndig
decl_stmt|;
comment|/* 	 * Handle the three cases separately, in the hope of getting 	 * better/faster code. 	 */
switch|switch
condition|(
name|base
condition|)
block|{
case|case
literal|10
case|:
if|if
condition|(
name|val
operator|<
literal|10
condition|)
block|{
comment|/* many numbers are 1 digit */
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
operator|(
name|cp
operator|)
return|;
block|}
name|ndig
operator|=
literal|0
expr_stmt|;
comment|/* 		 * On many machines, unsigned arithmetic is harder than 		 * signed arithmetic, so we do at most one unsigned mod and 		 * divide; this is sufficient to reduce the range of 		 * the incoming value to where signed arithmetic works. 		 */
if|if
condition|(
name|val
operator|>
name|LONG_MAX
condition|)
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
operator|%
literal|10
argument_list|)
expr_stmt|;
name|ndig
operator|++
expr_stmt|;
name|sval
operator|=
name|val
operator|/
literal|10
expr_stmt|;
block|}
else|else
name|sval
operator|=
name|val
expr_stmt|;
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|sval
operator|%
literal|10
argument_list|)
expr_stmt|;
name|ndig
operator|++
expr_stmt|;
comment|/* 			 * If (*grp == CHAR_MAX) then no more grouping 			 * should be performed. 			 */
if|if
condition|(
name|needgrp
operator|&&
name|ndig
operator|==
operator|*
name|grp
operator|&&
operator|*
name|grp
operator|!=
name|CHAR_MAX
operator|&&
name|sval
operator|>
literal|9
condition|)
block|{
operator|*
operator|--
name|cp
operator|=
name|thousep
expr_stmt|;
name|ndig
operator|=
literal|0
expr_stmt|;
comment|/* 				 * If (*(grp+1) == '\0') then we have to 				 * use *grp character (last grouping rule) 				 * for all next cases 				 */
if|if
condition|(
operator|*
operator|(
name|grp
operator|+
literal|1
operator|)
operator|!=
literal|'\0'
condition|)
name|grp
operator|++
expr_stmt|;
block|}
name|sval
operator|/=
literal|10
expr_stmt|;
block|}
do|while
condition|(
name|sval
operator|!=
literal|0
condition|)
do|;
break|break;
case|case
literal|8
case|:
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
operator|&
literal|7
argument_list|)
expr_stmt|;
name|val
operator|>>=
literal|3
expr_stmt|;
block|}
do|while
condition|(
name|val
condition|)
do|;
if|if
condition|(
name|octzero
operator|&&
operator|*
name|cp
operator|!=
literal|'0'
condition|)
operator|*
operator|--
name|cp
operator|=
literal|'0'
expr_stmt|;
break|break;
case|case
literal|16
case|:
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|xdigs
index|[
name|val
operator|&
literal|15
index|]
expr_stmt|;
name|val
operator|>>=
literal|4
expr_stmt|;
block|}
do|while
condition|(
name|val
condition|)
do|;
break|break;
default|default:
comment|/* oops */
name|abort
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|cp
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Identical to __ultoa, but for intmax_t. */
end_comment

begin_function
specifier|static
name|CHAR
modifier|*
name|__ujtoa
parameter_list|(
name|uintmax_t
name|val
parameter_list|,
name|CHAR
modifier|*
name|endp
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|octzero
parameter_list|,
specifier|const
name|char
modifier|*
name|xdigs
parameter_list|,
name|int
name|needgrp
parameter_list|,
name|char
name|thousep
parameter_list|,
specifier|const
name|char
modifier|*
name|grp
parameter_list|)
block|{
name|CHAR
modifier|*
name|cp
init|=
name|endp
decl_stmt|;
name|intmax_t
name|sval
decl_stmt|;
name|int
name|ndig
decl_stmt|;
comment|/* quick test for small values; __ultoa is typically much faster */
comment|/* (perhaps instead we should run until small, then call __ultoa?) */
if|if
condition|(
name|val
operator|<=
name|ULONG_MAX
condition|)
return|return
operator|(
name|__ultoa
argument_list|(
operator|(
name|u_long
operator|)
name|val
argument_list|,
name|endp
argument_list|,
name|base
argument_list|,
name|octzero
argument_list|,
name|xdigs
argument_list|,
name|needgrp
argument_list|,
name|thousep
argument_list|,
name|grp
argument_list|)
operator|)
return|;
switch|switch
condition|(
name|base
condition|)
block|{
case|case
literal|10
case|:
if|if
condition|(
name|val
operator|<
literal|10
condition|)
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
operator|%
literal|10
argument_list|)
expr_stmt|;
return|return
operator|(
name|cp
operator|)
return|;
block|}
name|ndig
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|val
operator|>
name|INTMAX_MAX
condition|)
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
operator|%
literal|10
argument_list|)
expr_stmt|;
name|ndig
operator|++
expr_stmt|;
name|sval
operator|=
name|val
operator|/
literal|10
expr_stmt|;
block|}
else|else
name|sval
operator|=
name|val
expr_stmt|;
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|sval
operator|%
literal|10
argument_list|)
expr_stmt|;
name|ndig
operator|++
expr_stmt|;
comment|/* 			 * If (*grp == CHAR_MAX) then no more grouping 			 * should be performed. 			 */
if|if
condition|(
name|needgrp
operator|&&
operator|*
name|grp
operator|!=
name|CHAR_MAX
operator|&&
name|ndig
operator|==
operator|*
name|grp
operator|&&
name|sval
operator|>
literal|9
condition|)
block|{
operator|*
operator|--
name|cp
operator|=
name|thousep
expr_stmt|;
name|ndig
operator|=
literal|0
expr_stmt|;
comment|/* 				 * If (*(grp+1) == '\0') then we have to 				 * use *grp character (last grouping rule) 				 * for all next cases 				 */
if|if
condition|(
operator|*
operator|(
name|grp
operator|+
literal|1
operator|)
operator|!=
literal|'\0'
condition|)
name|grp
operator|++
expr_stmt|;
block|}
name|sval
operator|/=
literal|10
expr_stmt|;
block|}
do|while
condition|(
name|sval
operator|!=
literal|0
condition|)
do|;
break|break;
case|case
literal|8
case|:
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|to_char
argument_list|(
name|val
operator|&
literal|7
argument_list|)
expr_stmt|;
name|val
operator|>>=
literal|3
expr_stmt|;
block|}
do|while
condition|(
name|val
condition|)
do|;
if|if
condition|(
name|octzero
operator|&&
operator|*
name|cp
operator|!=
literal|'0'
condition|)
operator|*
operator|--
name|cp
operator|=
literal|'0'
expr_stmt|;
break|break;
case|case
literal|16
case|:
do|do
block|{
operator|*
operator|--
name|cp
operator|=
name|xdigs
index|[
name|val
operator|&
literal|15
index|]
expr_stmt|;
name|val
operator|>>=
literal|4
expr_stmt|;
block|}
do|while
condition|(
name|val
condition|)
do|;
break|break;
default|default:
name|abort
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|cp
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|NO_FLOATING_POINT
end_ifndef

begin_function
specifier|static
name|int
name|exponent
parameter_list|(
name|CHAR
modifier|*
name|p0
parameter_list|,
name|int
name|exp
parameter_list|,
name|CHAR
name|fmtch
parameter_list|)
block|{
name|CHAR
modifier|*
name|p
decl_stmt|,
modifier|*
name|t
decl_stmt|;
name|CHAR
name|expbuf
index|[
name|MAXEXPDIG
index|]
decl_stmt|;
name|p
operator|=
name|p0
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|fmtch
expr_stmt|;
if|if
condition|(
name|exp
operator|<
literal|0
condition|)
block|{
name|exp
operator|=
operator|-
name|exp
expr_stmt|;
operator|*
name|p
operator|++
operator|=
literal|'-'
expr_stmt|;
block|}
else|else
operator|*
name|p
operator|++
operator|=
literal|'+'
expr_stmt|;
name|t
operator|=
name|expbuf
operator|+
name|MAXEXPDIG
expr_stmt|;
if|if
condition|(
name|exp
operator|>
literal|9
condition|)
block|{
do|do
block|{
operator|*
operator|--
name|t
operator|=
name|to_char
argument_list|(
name|exp
operator|%
literal|10
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|exp
operator|/=
literal|10
operator|)
operator|>
literal|9
condition|)
do|;
operator|*
operator|--
name|t
operator|=
name|to_char
argument_list|(
name|exp
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|t
operator|<
name|expbuf
operator|+
name|MAXEXPDIG
condition|;
operator|*
name|p
operator|++
operator|=
operator|*
name|t
operator|++
control|)
empty_stmt|;
block|}
else|else
block|{
comment|/* 		 * Exponents for decimal floating point conversions 		 * (%[eEgG]) must be at least two characters long, 		 * whereas exponents for hexadecimal conversions can 		 * be only one character long. 		 */
if|if
condition|(
name|fmtch
operator|==
literal|'e'
operator|||
name|fmtch
operator|==
literal|'E'
condition|)
operator|*
name|p
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|to_char
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|p
operator|-
name|p0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !NO_FLOATING_POINT */
end_comment

end_unit

