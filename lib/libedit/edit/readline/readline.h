begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: readline.h,v 1.31 2010/08/04 20:29:18 christos Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 1997 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Jaromir Dolecek.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_READLINE_H_
end_ifndef

begin_define
define|#
directive|define
name|_READLINE_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/* list of readline stuff supported by editline library's readline wrapper */
end_comment

begin_comment
comment|/* typedefs */
end_comment

begin_typedef
typedef|typedef
name|int
name|Function
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|VFunction
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|VCPFunction
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|char
modifier|*
name|CPFunction
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|char
modifier|*
modifier|*
name|CPPFunction
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|char
modifier|*
name|rl_compentry_func_t
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|rl_command_func_t
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* only supports length */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|length
decl_stmt|;
block|}
name|HISTORY_STATE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
modifier|*
name|histdata_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_hist_entry
block|{
specifier|const
name|char
modifier|*
name|line
decl_stmt|;
name|histdata_t
name|data
decl_stmt|;
block|}
name|HIST_ENTRY
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_keymap_entry
block|{
name|char
name|type
decl_stmt|;
define|#
directive|define
name|ISFUNC
value|0
define|#
directive|define
name|ISKMAP
value|1
define|#
directive|define
name|ISMACR
value|2
name|Function
modifier|*
name|function
decl_stmt|;
block|}
name|KEYMAP_ENTRY
typedef|;
end_typedef

begin_define
define|#
directive|define
name|KEYMAP_SIZE
value|256
end_define

begin_typedef
typedef|typedef
name|KEYMAP_ENTRY
name|KEYMAP_ENTRY_ARRAY
index|[
name|KEYMAP_SIZE
index|]
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|KEYMAP_ENTRY
modifier|*
name|Keymap
typedef|;
end_typedef

begin_define
define|#
directive|define
name|control_character_threshold
value|0x20
end_define

begin_define
define|#
directive|define
name|control_character_bit
value|0x40
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CTRL
end_ifndef

begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__sun
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_include
include|#
directive|include
file|<sys/ttydefaults.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CTRL
end_ifndef

begin_define
define|#
directive|define
name|CTRL
parameter_list|(
name|c
parameter_list|)
value|((c)& 037)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|UNCTRL
end_ifndef

begin_define
define|#
directive|define
name|UNCTRL
parameter_list|(
name|c
parameter_list|)
value|(((c) - 'a' + 'A')|control_character_bit)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|RUBOUT
value|0x7f
end_define

begin_define
define|#
directive|define
name|ABORT_CHAR
value|CTRL('G')
end_define

begin_define
define|#
directive|define
name|RL_READLINE_VERSION
value|0x0402
end_define

begin_define
define|#
directive|define
name|RL_PROMPT_START_IGNORE
value|'\1'
end_define

begin_define
define|#
directive|define
name|RL_PROMPT_END_IGNORE
value|'\2'
end_define

begin_comment
comment|/* global variables used by readline enabled applications */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|extern
specifier|const
name|char
modifier|*
name|rl_library_version
decl_stmt|;
specifier|extern
name|int
name|rl_readline_version
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_readline_name
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|rl_instream
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|rl_outstream
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_line_buffer
decl_stmt|;
specifier|extern
name|int
name|rl_point
decl_stmt|,
name|rl_end
decl_stmt|;
specifier|extern
name|int
name|history_base
decl_stmt|,
name|history_length
decl_stmt|;
specifier|extern
name|int
name|max_input_history
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_basic_word_break_characters
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_completer_word_break_characters
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_completer_quote_characters
decl_stmt|;
specifier|extern
name|Function
modifier|*
name|rl_completion_entry_function
decl_stmt|;
specifier|extern
name|CPPFunction
modifier|*
name|rl_attempted_completion_function
decl_stmt|;
specifier|extern
name|int
name|rl_attempted_completion_over
decl_stmt|;
specifier|extern
name|int
name|rl_completion_type
decl_stmt|;
specifier|extern
name|int
name|rl_completion_query_items
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_special_prefixes
decl_stmt|;
specifier|extern
name|int
name|rl_completion_append_character
decl_stmt|;
specifier|extern
name|int
name|rl_inhibit_completion
decl_stmt|;
specifier|extern
name|Function
modifier|*
name|rl_pre_input_hook
decl_stmt|;
specifier|extern
name|Function
modifier|*
name|rl_startup_hook
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_terminal_name
decl_stmt|;
specifier|extern
name|int
name|rl_already_prompted
decl_stmt|;
specifier|extern
name|char
modifier|*
name|rl_prompt
decl_stmt|;
comment|/*  * The following is not implemented  */
specifier|extern
name|KEYMAP_ENTRY_ARRAY
name|emacs_standard_keymap
decl_stmt|,
name|emacs_meta_keymap
decl_stmt|,
name|emacs_ctlx_keymap
decl_stmt|;
specifier|extern
name|int
name|rl_filename_completion_desired
decl_stmt|;
specifier|extern
name|int
name|rl_ignore_completion_duplicates
decl_stmt|;
specifier|extern
name|int
function_decl|(
modifier|*
name|rl_getc_function
function_decl|)
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|VFunction
modifier|*
name|rl_redisplay_function
decl_stmt|;
specifier|extern
name|VFunction
modifier|*
name|rl_completion_display_matches_hook
decl_stmt|;
specifier|extern
name|VFunction
modifier|*
name|rl_prep_term_function
decl_stmt|;
specifier|extern
name|VFunction
modifier|*
name|rl_deprep_term_function
decl_stmt|;
specifier|extern
name|int
name|readline_echoing_p
decl_stmt|;
specifier|extern
name|int
name|_rl_print_completions_horizontally
decl_stmt|;
comment|/* supported functions */
name|char
modifier|*
name|readline
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_initialize
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|using_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|add_history
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|clear_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|stifle_history
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|unstifle_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|history_is_stifled
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|where_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|HIST_ENTRY
modifier|*
name|current_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|HIST_ENTRY
modifier|*
name|history_get
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|HIST_ENTRY
modifier|*
name|remove_history
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/*###152 [lint] syntax error 'histdata_t' [249]%%%*/
name|HIST_ENTRY
modifier|*
name|replace_history_entry
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|histdata_t
parameter_list|)
function_decl|;
name|int
name|history_total_bytes
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|history_set_pos
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|HIST_ENTRY
modifier|*
name|previous_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|HIST_ENTRY
modifier|*
name|next_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|history_search
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|history_search_prefix
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|history_search_pos
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|read_history
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|write_history
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|history_truncate_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|history_expand
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
modifier|*
name|history_tokenize
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|get_history_event
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|history_arg_extract
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|tilde_expand
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|filename_completion_function
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|username_completion_function
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|rl_complete
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|rl_read_key
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|char
modifier|*
modifier|*
name|completion_matches
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|CPFunction
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_display_match_list
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|rl_insert
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|rl_insert_text
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_reset_terminal
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_bind_key
parameter_list|(
name|int
parameter_list|,
name|rl_command_func_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_newline
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|rl_callback_read_char
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|rl_callback_handler_install
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|VCPFunction
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_callback_handler_remove
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|rl_redisplay
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|rl_get_previous_history
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|rl_prep_terminal
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|rl_deprep_terminal
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|rl_read_init_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_parse_and_bind
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_variable_bind
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_stuff_char
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|rl_add_defun
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|Function
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|HISTORY_STATE
modifier|*
name|history_get_history_state
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|rl_get_screen_size
parameter_list|(
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_set_screen_size
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|rl_filename_completion_function
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|_rl_abort_internal
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|_rl_qsort_string_compare
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
modifier|*
name|rl_completion_matches
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|rl_compentry_func_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|rl_forced_update_display
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|rl_set_prompt
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|rl_on_new_line
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * The following are not implemented  */
name|int
name|rl_kill_text
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|Keymap
name|rl_get_keymap
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|rl_set_keymap
parameter_list|(
name|Keymap
parameter_list|)
function_decl|;
name|Keymap
name|rl_make_bare_keymap
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|rl_generic_bind
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Keymap
parameter_list|)
function_decl|;
name|int
name|rl_bind_key_in_map
parameter_list|(
name|int
parameter_list|,
name|rl_command_func_t
modifier|*
parameter_list|,
name|Keymap
parameter_list|)
function_decl|;
name|void
name|rl_cleanup_after_signal
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|rl_free_line_state
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _READLINE_H_ */
end_comment

end_unit

