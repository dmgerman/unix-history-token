begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_rtl.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Main internal TSan header file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Ground rules:
end_comment

begin_comment
comment|//   - C++ run-time should not be used (static CTORs, RTTI, exceptions, static
end_comment

begin_comment
comment|//     function-scope locals)
end_comment

begin_comment
comment|//   - All functions/classes/etc reside in namespace __tsan, except for those
end_comment

begin_comment
comment|//     declared in tsan_interface.h.
end_comment

begin_comment
comment|//   - Platform-specific files should be used instead of ifdefs (*).
end_comment

begin_comment
comment|//   - No system headers included in header files (*).
end_comment

begin_comment
comment|//   - Platform specific headres included only into platform-specific files (*).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  (*) Except when inlining is critical for performance.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_RTL_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_RTL_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_common.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_common/sanitizer_allocator.h"
end_include

begin_include
include|#
directive|include
file|"tsan_clock.h"
end_include

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_flags.h"
end_include

begin_include
include|#
directive|include
file|"tsan_sync.h"
end_include

begin_include
include|#
directive|include
file|"tsan_trace.h"
end_include

begin_include
include|#
directive|include
file|"tsan_vector.h"
end_include

begin_include
include|#
directive|include
file|"tsan_report.h"
end_include

begin_include
include|#
directive|include
file|"tsan_platform.h"
end_include

begin_include
include|#
directive|include
file|"tsan_mutexset.h"
end_include

begin_if
if|#
directive|if
name|SANITIZER_WORDSIZE
operator|!=
literal|64
end_if

begin_error
error|#
directive|error
literal|"ThreadSanitizer is supported only on 64-bit platforms"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__tsan
block|{
comment|// Descriptor of user's memory block.
struct|struct
name|MBlock
block|{
name|Mutex
name|mtx
decl_stmt|;
name|uptr
name|size
decl_stmt|;
name|u32
name|alloc_tid
decl_stmt|;
name|u32
name|alloc_stack_id
decl_stmt|;
name|SyncVar
modifier|*
name|head
decl_stmt|;
name|MBlock
argument_list|()
operator|:
name|mtx
argument_list|(
argument|MutexTypeMBlock
argument_list|,
argument|StatMtxMBlock
argument_list|)
block|{   }
block|}
struct|;
ifndef|#
directive|ifndef
name|TSAN_GO
if|#
directive|if
name|defined
argument_list|(
name|TSAN_COMPAT_SHADOW
argument_list|)
operator|&&
name|TSAN_COMPAT_SHADOW
specifier|const
name|uptr
name|kAllocatorSpace
init|=
literal|0x7d0000000000ULL
decl_stmt|;
else|#
directive|else
specifier|const
name|uptr
name|kAllocatorSpace
init|=
literal|0x7d0000000000ULL
decl_stmt|;
endif|#
directive|endif
specifier|const
name|uptr
name|kAllocatorSize
init|=
literal|0x10000000000ULL
decl_stmt|;
comment|// 1T.
struct|struct
name|TsanMapUnmapCallback
block|{
name|void
name|OnMap
argument_list|(
name|uptr
name|p
argument_list|,
name|uptr
name|size
argument_list|)
decl|const
block|{ }
name|void
name|OnUnmap
argument_list|(
name|uptr
name|p
argument_list|,
name|uptr
name|size
argument_list|)
decl|const
block|{
comment|// We are about to unmap a chunk of user memory.
comment|// Mark the corresponding shadow memory as not needed.
name|uptr
name|shadow_beg
init|=
name|MemToShadow
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|uptr
name|shadow_end
init|=
name|MemToShadow
argument_list|(
name|p
operator|+
name|size
argument_list|)
decl_stmt|;
name|CHECK
argument_list|(
name|IsAligned
argument_list|(
name|shadow_end
operator||
name|shadow_beg
argument_list|,
name|GetPageSizeCached
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FlushUnneededShadowMemory
argument_list|(
name|shadow_beg
argument_list|,
name|shadow_end
operator|-
name|shadow_beg
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
typedef|typedef
name|SizeClassAllocator64
operator|<
name|kAllocatorSpace
operator|,
name|kAllocatorSize
operator|,
sizeof|sizeof
argument_list|(
name|MBlock
argument_list|)
operator|,
name|DefaultSizeClassMap
operator|>
name|PrimaryAllocator
expr_stmt|;
typedef|typedef
name|SizeClassAllocatorLocalCache
operator|<
name|PrimaryAllocator
operator|>
name|AllocatorCache
expr_stmt|;
typedef|typedef
name|LargeMmapAllocator
operator|<
name|TsanMapUnmapCallback
operator|>
name|SecondaryAllocator
expr_stmt|;
typedef|typedef
name|CombinedAllocator
operator|<
name|PrimaryAllocator
operator|,
name|AllocatorCache
operator|,
name|SecondaryAllocator
operator|>
name|Allocator
expr_stmt|;
name|Allocator
modifier|*
name|allocator
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|TsanCheckFailed
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
specifier|const
name|char
modifier|*
name|cond
parameter_list|,
name|u64
name|v1
parameter_list|,
name|u64
name|v2
parameter_list|)
function_decl|;
comment|// FastState (from most significant bit):
comment|//   ignore          : 1
comment|//   tid             : kTidBits
comment|//   epoch           : kClkBits
comment|//   unused          : -
comment|//   history_size    : 3
name|class
name|FastState
block|{
name|public
label|:
name|FastState
argument_list|(
argument|u64 tid
argument_list|,
argument|u64 epoch
argument_list|)
block|{
name|x_
operator|=
name|tid
operator|<<
name|kTidShift
expr_stmt|;
name|x_
operator||=
name|epoch
operator|<<
name|kClkShift
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|tid
argument_list|,
name|this
operator|->
name|tid
argument_list|()
argument_list|)
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|epoch
argument_list|,
name|this
operator|->
name|epoch
argument_list|()
argument_list|)
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|GetIgnoreBit
argument_list|()
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
name|explicit
name|FastState
argument_list|(
argument|u64 x
argument_list|)
block|:
name|x_
argument_list|(
argument|x
argument_list|)
block|{   }
name|u64
name|raw
argument_list|()
specifier|const
block|{
return|return
name|x_
return|;
block|}
name|u64
name|tid
argument_list|()
specifier|const
block|{
name|u64
name|res
operator|=
operator|(
name|x_
operator|&
operator|~
name|kIgnoreBit
operator|)
operator|>>
name|kTidShift
block|;
return|return
name|res
return|;
block|}
name|u64
name|TidWithIgnore
argument_list|()
specifier|const
block|{
name|u64
name|res
operator|=
name|x_
operator|>>
name|kTidShift
block|;
return|return
name|res
return|;
block|}
name|u64
name|epoch
argument_list|()
specifier|const
block|{
name|u64
name|res
operator|=
operator|(
name|x_
operator|<<
operator|(
name|kTidBits
operator|+
literal|1
operator|)
operator|)
operator|>>
operator|(
literal|64
operator|-
name|kClkBits
operator|)
block|;
return|return
name|res
return|;
block|}
name|void
name|IncrementEpoch
parameter_list|()
block|{
name|u64
name|old_epoch
init|=
name|epoch
argument_list|()
decl_stmt|;
name|x_
operator|+=
literal|1
operator|<<
name|kClkShift
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|old_epoch
operator|+
literal|1
argument_list|,
name|epoch
argument_list|()
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|old_epoch
expr_stmt|;
block|}
name|void
name|SetIgnoreBit
parameter_list|()
block|{
name|x_
operator||=
name|kIgnoreBit
expr_stmt|;
block|}
name|void
name|ClearIgnoreBit
parameter_list|()
block|{
name|x_
operator|&=
operator|~
name|kIgnoreBit
expr_stmt|;
block|}
name|bool
name|GetIgnoreBit
argument_list|()
specifier|const
block|{
return|return
operator|(
name|s64
operator|)
name|x_
operator|<
literal|0
return|;
block|}
name|void
name|SetHistorySize
parameter_list|(
name|int
name|hs
parameter_list|)
block|{
name|CHECK_GE
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CHECK_LE
argument_list|(
name|hs
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|x_
operator|=
operator|(
name|x_
operator|&
operator|~
literal|7
operator|)
operator||
name|hs
expr_stmt|;
block|}
name|int
name|GetHistorySize
argument_list|()
specifier|const
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|x_
operator|&
literal|7
argument_list|)
return|;
block|}
name|void
name|ClearHistorySize
parameter_list|()
block|{
name|x_
operator|&=
operator|~
literal|7
expr_stmt|;
block|}
name|u64
name|GetTracePos
argument_list|()
specifier|const
block|{
specifier|const
name|int
name|hs
operator|=
name|GetHistorySize
argument_list|()
block|;
comment|// When hs == 0, the trace consists of 2 parts.
specifier|const
name|u64
name|mask
operator|=
operator|(
literal|1ull
operator|<<
operator|(
name|kTracePartSizeBits
operator|+
name|hs
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
block|;
return|return
name|epoch
argument_list|()
operator|&
name|mask
return|;
block|}
name|private
label|:
name|friend
name|class
name|Shadow
decl_stmt|;
specifier|static
specifier|const
name|int
name|kTidShift
init|=
literal|64
operator|-
name|kTidBits
operator|-
literal|1
decl_stmt|;
specifier|static
specifier|const
name|int
name|kClkShift
init|=
name|kTidShift
operator|-
name|kClkBits
decl_stmt|;
specifier|static
specifier|const
name|u64
name|kIgnoreBit
init|=
literal|1ull
operator|<<
literal|63
decl_stmt|;
specifier|static
specifier|const
name|u64
name|kFreedBit
init|=
literal|1ull
operator|<<
literal|63
decl_stmt|;
name|u64
name|x_
decl_stmt|;
block|}
empty_stmt|;
comment|// Shadow (from most significant bit):
comment|//   freed           : 1
comment|//   tid             : kTidBits
comment|//   epoch           : kClkBits
comment|//   is_write        : 1
comment|//   size_log        : 2
comment|//   addr0           : 3
name|class
name|Shadow
range|:
name|public
name|FastState
block|{
name|public
operator|:
name|explicit
name|Shadow
argument_list|(
argument|u64 x
argument_list|)
operator|:
name|FastState
argument_list|(
argument|x
argument_list|)
block|{   }
name|explicit
name|Shadow
argument_list|(
specifier|const
name|FastState
operator|&
name|s
argument_list|)
operator|:
name|FastState
argument_list|(
argument|s.x_
argument_list|)
block|{
name|ClearHistorySize
argument_list|()
block|;   }
name|void
name|SetAddr0AndSizeLog
argument_list|(
argument|u64 addr0
argument_list|,
argument|unsigned kAccessSizeLog
argument_list|)
block|{
name|DCHECK_EQ
argument_list|(
name|x_
operator|&
literal|31
argument_list|,
literal|0
argument_list|)
block|;
name|DCHECK_LE
argument_list|(
name|addr0
argument_list|,
literal|7
argument_list|)
block|;
name|DCHECK_LE
argument_list|(
name|kAccessSizeLog
argument_list|,
literal|3
argument_list|)
block|;
name|x_
operator||=
operator|(
name|kAccessSizeLog
operator|<<
literal|3
operator|)
operator||
name|addr0
block|;
name|DCHECK_EQ
argument_list|(
name|kAccessSizeLog
argument_list|,
name|size_log
argument_list|()
argument_list|)
block|;
name|DCHECK_EQ
argument_list|(
name|addr0
argument_list|,
name|this
operator|->
name|addr0
argument_list|()
argument_list|)
block|;   }
name|void
name|SetWrite
argument_list|(
argument|unsigned kAccessIsWrite
argument_list|)
block|{
name|DCHECK_EQ
argument_list|(
name|x_
operator|&
literal|32
argument_list|,
literal|0
argument_list|)
block|;
if|if
condition|(
name|kAccessIsWrite
condition|)
name|x_
operator||=
literal|32
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|kAccessIsWrite
argument_list|,
name|is_write
argument_list|()
argument_list|)
block|;   }
name|bool
name|IsZero
argument_list|()
specifier|const
block|{
return|return
name|x_
operator|==
literal|0
return|;
block|}
specifier|static
specifier|inline
name|bool
name|TidsAreEqual
parameter_list|(
specifier|const
name|Shadow
name|s1
parameter_list|,
specifier|const
name|Shadow
name|s2
parameter_list|)
block|{
name|u64
name|shifted_xor
init|=
operator|(
name|s1
operator|.
name|x_
operator|^
name|s2
operator|.
name|x_
operator|)
operator|>>
name|kTidShift
decl_stmt|;
name|DCHECK_EQ
argument_list|(
name|shifted_xor
operator|==
literal|0
argument_list|,
name|s1
operator|.
name|TidWithIgnore
argument_list|()
operator|==
name|s2
operator|.
name|TidWithIgnore
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|shifted_xor
operator|==
literal|0
return|;
block|}
specifier|static
specifier|inline
name|bool
name|Addr0AndSizeAreEqual
parameter_list|(
specifier|const
name|Shadow
name|s1
parameter_list|,
specifier|const
name|Shadow
name|s2
parameter_list|)
block|{
name|u64
name|masked_xor
init|=
operator|(
name|s1
operator|.
name|x_
operator|^
name|s2
operator|.
name|x_
operator|)
operator|&
literal|31
decl_stmt|;
return|return
name|masked_xor
operator|==
literal|0
return|;
block|}
specifier|static
specifier|inline
name|bool
name|TwoRangesIntersect
parameter_list|(
name|Shadow
name|s1
parameter_list|,
name|Shadow
name|s2
parameter_list|,
name|unsigned
name|kS2AccessSize
parameter_list|)
block|{
name|bool
name|res
init|=
name|false
decl_stmt|;
name|u64
name|diff
init|=
name|s1
operator|.
name|addr0
argument_list|()
operator|-
name|s2
operator|.
name|addr0
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|s64
operator|)
name|diff
operator|<
literal|0
condition|)
block|{
comment|// s1.addr0< s2.addr0  // NOLINT
comment|// if (s1.addr0() + size1)> s2.addr0()) return true;
if|if
condition|(
name|s1
operator|.
name|size
argument_list|()
operator|>
operator|-
name|diff
condition|)
name|res
operator|=
name|true
expr_stmt|;
block|}
else|else
block|{
comment|// if (s2.addr0() + kS2AccessSize> s1.addr0()) return true;
if|if
condition|(
name|kS2AccessSize
operator|>
name|diff
condition|)
name|res
operator|=
name|true
expr_stmt|;
block|}
name|DCHECK_EQ
argument_list|(
name|res
argument_list|,
name|TwoRangesIntersectSLOW
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
argument_list|)
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|res
argument_list|,
name|TwoRangesIntersectSLOW
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// The idea behind the offset is as follows.
comment|// Consider that we have 8 bool's contained within a single 8-byte block
comment|// (mapped to a single shadow "cell"). Now consider that we write to the bools
comment|// from a single thread (which we consider the common case).
comment|// W/o offsetting each access will have to scan 4 shadow values at average
comment|// to find the corresponding shadow value for the bool.
comment|// With offsetting we start scanning shadow with the offset so that
comment|// each access hits necessary shadow straight off (at least in an expected
comment|// optimistic case).
comment|// This logic works seamlessly for any layout of user data. For example,
comment|// if user data is {int, short, char, char}, then accesses to the int are
comment|// offsetted to 0, short - 4, 1st char - 6, 2nd char - 7. Hopefully, accesses
comment|// from a single thread won't need to scan all 8 shadow values.
name|unsigned
name|ComputeSearchOffset
parameter_list|()
block|{
return|return
name|x_
operator|&
literal|7
return|;
block|}
name|u64
name|addr0
argument_list|()
specifier|const
block|{
return|return
name|x_
operator|&
literal|7
return|;
block|}
name|u64
name|size
argument_list|()
specifier|const
block|{
return|return
literal|1ull
operator|<<
name|size_log
argument_list|()
return|;
block|}
name|bool
name|is_write
argument_list|()
specifier|const
block|{
return|return
name|x_
operator|&
literal|32
return|;
block|}
comment|// The idea behind the freed bit is as follows.
comment|// When the memory is freed (or otherwise unaccessible) we write to the shadow
comment|// values with tid/epoch related to the free and the freed bit set.
comment|// During memory accesses processing the freed bit is considered
comment|// as msb of tid. So any access races with shadow with freed bit set
comment|// (it is as if write from a thread with which we never synchronized before).
comment|// This allows us to detect accesses to freed memory w/o additional
comment|// overheads in memory access processing and at the same time restore
comment|// tid/epoch of free.
name|void
name|MarkAsFreed
parameter_list|()
block|{
name|x_
operator||=
name|kFreedBit
expr_stmt|;
block|}
name|bool
name|GetFreedAndReset
parameter_list|()
block|{
name|bool
name|res
init|=
name|x_
operator|&
name|kFreedBit
decl_stmt|;
name|x_
operator|&=
operator|~
name|kFreedBit
expr_stmt|;
return|return
name|res
return|;
block|}
name|private
label|:
name|u64
name|size_log
argument_list|()
specifier|const
block|{
return|return
operator|(
name|x_
operator|>>
literal|3
operator|)
operator|&
literal|3
return|;
block|}
specifier|static
name|bool
name|TwoRangesIntersectSLOW
parameter_list|(
specifier|const
name|Shadow
name|s1
parameter_list|,
specifier|const
name|Shadow
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|addr0
argument_list|()
operator|==
name|s2
operator|.
name|addr0
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
name|s1
operator|.
name|addr0
argument_list|()
operator|<
name|s2
operator|.
name|addr0
argument_list|()
operator|&&
name|s1
operator|.
name|addr0
argument_list|()
operator|+
name|s1
operator|.
name|size
argument_list|()
operator|>
name|s2
operator|.
name|addr0
argument_list|()
condition|)
return|return
name|true
return|;
if|if
condition|(
name|s2
operator|.
name|addr0
argument_list|()
operator|<
name|s1
operator|.
name|addr0
argument_list|()
operator|&&
name|s2
operator|.
name|addr0
argument_list|()
operator|+
name|s2
operator|.
name|size
argument_list|()
operator|>
name|s1
operator|.
name|addr0
argument_list|()
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct_decl
struct_decl|struct
name|SignalContext
struct_decl|;
end_struct_decl

begin_comment
comment|// This struct is stored in TLS.
end_comment

begin_struct
struct|struct
name|ThreadState
block|{
name|FastState
name|fast_state
decl_stmt|;
comment|// Synch epoch represents the threads's epoch before the last synchronization
comment|// action. It allows to reduce number of shadow state updates.
comment|// For example, fast_synch_epoch=100, last write to addr X was at epoch=150,
comment|// if we are processing write to X from the same thread at epoch=200,
comment|// we do nothing, because both writes happen in the same 'synch epoch'.
comment|// That is, if another memory access does not race with the former write,
comment|// it does not race with the latter as well.
comment|// QUESTION: can we can squeeze this into ThreadState::Fast?
comment|// E.g. ThreadState::Fast is a 44-bit, 32 are taken by synch_epoch and 12 are
comment|// taken by epoch between synchs.
comment|// This way we can save one load from tls.
name|u64
name|fast_synch_epoch
decl_stmt|;
comment|// This is a slow path flag. On fast path, fast_state.GetIgnoreBit() is read.
comment|// We do not distinguish beteween ignoring reads and writes
comment|// for better performance.
name|int
name|ignore_reads_and_writes
decl_stmt|;
name|uptr
modifier|*
name|shadow_stack_pos
decl_stmt|;
name|u64
modifier|*
name|racy_shadow_addr
decl_stmt|;
name|u64
name|racy_state
index|[
literal|2
index|]
decl_stmt|;
name|Trace
name|trace
decl_stmt|;
ifndef|#
directive|ifndef
name|TSAN_GO
comment|// C/C++ uses embed shadow stack of fixed size.
name|uptr
name|shadow_stack
index|[
name|kShadowStackSize
index|]
decl_stmt|;
else|#
directive|else
comment|// Go uses satellite shadow stack with dynamic size.
name|uptr
modifier|*
name|shadow_stack
decl_stmt|;
name|uptr
modifier|*
name|shadow_stack_end
decl_stmt|;
endif|#
directive|endif
name|MutexSet
name|mset
decl_stmt|;
name|ThreadClock
name|clock
decl_stmt|;
ifndef|#
directive|ifndef
name|TSAN_GO
name|AllocatorCache
name|alloc_cache
decl_stmt|;
endif|#
directive|endif
name|u64
name|stat
index|[
name|StatCnt
index|]
decl_stmt|;
specifier|const
name|int
name|tid
decl_stmt|;
specifier|const
name|int
name|unique_id
decl_stmt|;
name|int
name|in_rtl
decl_stmt|;
name|bool
name|is_alive
decl_stmt|;
specifier|const
name|uptr
name|stk_addr
decl_stmt|;
specifier|const
name|uptr
name|stk_size
decl_stmt|;
specifier|const
name|uptr
name|tls_addr
decl_stmt|;
specifier|const
name|uptr
name|tls_size
decl_stmt|;
name|DeadlockDetector
name|deadlock_detector
decl_stmt|;
name|bool
name|in_signal_handler
decl_stmt|;
name|SignalContext
modifier|*
name|signal_ctx
decl_stmt|;
ifndef|#
directive|ifndef
name|TSAN_GO
name|u32
name|last_sleep_stack_id
decl_stmt|;
name|ThreadClock
name|last_sleep_clock
decl_stmt|;
endif|#
directive|endif
comment|// Set in regions of runtime that must be signal-safe and fork-safe.
comment|// If set, malloc must not be called.
name|int
name|nomalloc
decl_stmt|;
name|explicit
name|ThreadState
parameter_list|(
name|Context
modifier|*
name|ctx
parameter_list|,
name|int
name|tid
parameter_list|,
name|int
name|unique_id
parameter_list|,
name|u64
name|epoch
parameter_list|,
name|uptr
name|stk_addr
parameter_list|,
name|uptr
name|stk_size
parameter_list|,
name|uptr
name|tls_addr
parameter_list|,
name|uptr
name|tls_size
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
name|Context
modifier|*
name|CTX
parameter_list|()
function_decl|;
end_function_decl

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_GO
end_ifndef

begin_decl_stmt
specifier|extern
name|THREADLOCAL
name|char
name|cur_thread_placeholder
index|[]
decl_stmt|;
end_decl_stmt

begin_function
name|INLINE
name|ThreadState
modifier|*
name|cur_thread
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|ThreadState
operator|*
operator|>
operator|(
operator|&
name|cur_thread_placeholder
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_enum
enum|enum
name|ThreadStatus
block|{
name|ThreadStatusInvalid
block|,
comment|// Non-existent thread, data is invalid.
name|ThreadStatusCreated
block|,
comment|// Created but not yet running.
name|ThreadStatusRunning
block|,
comment|// The thread is currently running.
name|ThreadStatusFinished
block|,
comment|// Joinable thread is finished but not yet joined.
name|ThreadStatusDead
comment|// Joined, but some info (trace) is still alive.
block|}
enum|;
end_enum

begin_comment
comment|// An info about a thread that is hold for some time after its termination.
end_comment

begin_struct
struct|struct
name|ThreadDeadInfo
block|{
name|Trace
name|trace
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ThreadContext
block|{
specifier|const
name|int
name|tid
decl_stmt|;
name|int
name|unique_id
decl_stmt|;
comment|// Non-rolling thread id.
name|uptr
name|os_id
decl_stmt|;
comment|// pid
name|uptr
name|user_id
decl_stmt|;
comment|// Some opaque user thread id (e.g. pthread_t).
name|ThreadState
modifier|*
name|thr
decl_stmt|;
name|ThreadStatus
name|status
decl_stmt|;
name|bool
name|detached
decl_stmt|;
name|int
name|reuse_count
decl_stmt|;
name|SyncClock
name|sync
decl_stmt|;
comment|// Epoch at which the thread had started.
comment|// If we see an event from the thread stamped by an older epoch,
comment|// the event is from a dead thread that shared tid with this thread.
name|u64
name|epoch0
decl_stmt|;
name|u64
name|epoch1
decl_stmt|;
name|StackTrace
name|creation_stack
decl_stmt|;
name|int
name|creation_tid
decl_stmt|;
name|ThreadDeadInfo
modifier|*
name|dead_info
decl_stmt|;
name|ThreadContext
modifier|*
name|dead_next
decl_stmt|;
comment|// In dead thread list.
name|char
modifier|*
name|name
decl_stmt|;
comment|// As annotated by user.
name|explicit
name|ThreadContext
parameter_list|(
name|int
name|tid
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|RacyStacks
block|{
name|MD5Hash
name|hash
index|[
literal|2
index|]
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|RacyStacks
operator|&
name|other
operator|)
specifier|const
block|{
if|if
condition|(
name|hash
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|hash
index|[
literal|0
index|]
operator|&&
name|hash
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|hash
index|[
literal|1
index|]
condition|)
return|return
name|true
return|;
if|if
condition|(
name|hash
index|[
literal|0
index|]
operator|==
name|other
operator|.
name|hash
index|[
literal|1
index|]
operator|&&
name|hash
index|[
literal|1
index|]
operator|==
name|other
operator|.
name|hash
index|[
literal|0
index|]
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
end_struct

begin_struct
unit|};
struct|struct
name|RacyAddress
block|{
name|uptr
name|addr_min
decl_stmt|;
name|uptr
name|addr_max
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|FiredSuppression
block|{
name|ReportType
name|type
decl_stmt|;
name|uptr
name|pc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|Context
block|{
name|Context
argument_list|()
expr_stmt|;
name|bool
name|initialized
decl_stmt|;
name|SyncTab
name|synctab
decl_stmt|;
name|Mutex
name|report_mtx
decl_stmt|;
name|int
name|nreported
decl_stmt|;
name|int
name|nmissed_expected
decl_stmt|;
name|Mutex
name|thread_mtx
decl_stmt|;
name|unsigned
name|thread_seq
decl_stmt|;
name|unsigned
name|unique_thread_seq
decl_stmt|;
name|int
name|alive_threads
decl_stmt|;
name|int
name|max_alive_threads
decl_stmt|;
name|ThreadContext
modifier|*
name|threads
index|[
name|kMaxTid
index|]
decl_stmt|;
name|int
name|dead_list_size
decl_stmt|;
name|ThreadContext
modifier|*
name|dead_list_head
decl_stmt|;
name|ThreadContext
modifier|*
name|dead_list_tail
decl_stmt|;
name|Vector
operator|<
name|RacyStacks
operator|>
name|racy_stacks
expr_stmt|;
name|Vector
operator|<
name|RacyAddress
operator|>
name|racy_addresses
expr_stmt|;
name|Vector
operator|<
name|FiredSuppression
operator|>
name|fired_suppressions
expr_stmt|;
name|Flags
name|flags
decl_stmt|;
name|u64
name|stat
index|[
name|StatCnt
index|]
decl_stmt|;
name|u64
name|int_alloc_cnt
index|[
name|MBlockTypeCount
index|]
decl_stmt|;
name|u64
name|int_alloc_siz
index|[
name|MBlockTypeCount
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|ScopedInRtl
block|{
name|public
label|:
name|ScopedInRtl
argument_list|()
expr_stmt|;
operator|~
name|ScopedInRtl
argument_list|()
expr_stmt|;
name|private
label|:
name|ThreadState
modifier|*
name|thr_
decl_stmt|;
name|int
name|in_rtl_
decl_stmt|;
name|int
name|errno_
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ScopedReport
block|{
name|public
label|:
name|explicit
name|ScopedReport
parameter_list|(
name|ReportType
name|typ
parameter_list|)
function_decl|;
operator|~
name|ScopedReport
argument_list|()
expr_stmt|;
name|void
name|AddStack
parameter_list|(
specifier|const
name|StackTrace
modifier|*
name|stack
parameter_list|)
function_decl|;
name|void
name|AddMemoryAccess
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|Shadow
name|s
parameter_list|,
specifier|const
name|StackTrace
modifier|*
name|stack
parameter_list|,
specifier|const
name|MutexSet
modifier|*
name|mset
parameter_list|)
function_decl|;
name|void
name|AddThread
parameter_list|(
specifier|const
name|ThreadContext
modifier|*
name|tctx
parameter_list|)
function_decl|;
name|void
name|AddMutex
parameter_list|(
specifier|const
name|SyncVar
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|AddLocation
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
name|void
name|AddSleep
parameter_list|(
name|u32
name|stack_id
parameter_list|)
function_decl|;
specifier|const
name|ReportDesc
operator|*
name|GetReport
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|Context
modifier|*
name|ctx_
decl_stmt|;
name|ReportDesc
modifier|*
name|rep_
decl_stmt|;
name|void
name|AddMutex
parameter_list|(
name|u64
name|id
parameter_list|)
function_decl|;
name|ScopedReport
argument_list|(
specifier|const
name|ScopedReport
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ScopedReport
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|void
name|RestoreStack
parameter_list|(
name|int
name|tid
parameter_list|,
specifier|const
name|u64
name|epoch
parameter_list|,
name|StackTrace
modifier|*
name|stk
parameter_list|,
name|MutexSet
modifier|*
name|mset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|StatAggregate
parameter_list|(
name|u64
modifier|*
name|dst
parameter_list|,
name|u64
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|StatOutput
parameter_list|(
name|u64
modifier|*
name|stat
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|ALWAYS_INLINE
name|INLINE
name|StatInc
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|StatType
name|typ
parameter_list|,
name|u64
name|n
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|kCollectStats
condition|)
name|thr
operator|->
name|stat
index|[
name|typ
index|]
operator|+=
name|n
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|MapShadow
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MapThreadTrace
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|InitializeShadowMemory
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|InitializeInterceptors
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|InitializeDynamicAnnotations
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ReportRace
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|OutputReport
parameter_list|(
name|Context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|ScopedReport
modifier|&
name|srep
parameter_list|,
specifier|const
name|ReportStack
modifier|*
name|suppress_stack
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|IsFiredSuppression
parameter_list|(
name|Context
modifier|*
name|ctx
parameter_list|,
specifier|const
name|ScopedReport
modifier|&
name|srep
parameter_list|,
specifier|const
name|StackTrace
modifier|&
name|trace
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|IsExpectedReport
parameter_list|(
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|TSAN_DEBUG_OUTPUT
argument_list|)
operator|&&
name|TSAN_DEBUG_OUTPUT
operator|>=
literal|1
end_if

begin_define
define|#
directive|define
name|DPrintf
value|Printf
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DPrintf
parameter_list|(
modifier|...
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|TSAN_DEBUG_OUTPUT
argument_list|)
operator|&&
name|TSAN_DEBUG_OUTPUT
operator|>=
literal|2
end_if

begin_define
define|#
directive|define
name|DPrintf2
value|Printf
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DPrintf2
parameter_list|(
modifier|...
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|u32
name|CurrentStackId
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintCurrentStack
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Initialize
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|Finalize
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|SyncVar
modifier|*
name|GetJavaSync
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|bool
name|write_lock
parameter_list|,
name|bool
name|create
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|SyncVar
modifier|*
name|GetAndRemoveJavaSync
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryAccess
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|int
name|kAccessSizeLog
parameter_list|,
name|bool
name|kAccessIsWrite
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryAccessImpl
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|int
name|kAccessSizeLog
parameter_list|,
name|bool
name|kAccessIsWrite
parameter_list|,
name|u64
modifier|*
name|shadow_mem
parameter_list|,
name|Shadow
name|cur
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryRead1Byte
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryWrite1Byte
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryRead8Byte
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryWrite8Byte
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryAccessRange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|,
name|bool
name|is_write
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryResetRange
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryRangeFreed
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MemoryRangeImitateWrite
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|IgnoreCtl
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|bool
name|write
parameter_list|,
name|bool
name|begin
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FuncEntry
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|FuncExit
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ThreadCreate
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|uid
parameter_list|,
name|bool
name|detached
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadStart
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|int
name|tid
parameter_list|,
name|uptr
name|os_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadFinish
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ThreadTid
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|uid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadJoin
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadDetach
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadFinalize
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ThreadSetName
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ThreadCount
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ProcessPendingSignals
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexCreate
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|,
name|bool
name|rw
parameter_list|,
name|bool
name|recursive
parameter_list|,
name|bool
name|linker_init
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexDestroy
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexLock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexUnlock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexReadLock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexReadUnlock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|MutexReadOrWriteUnlock
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Acquire
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|AcquireGlobal
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Release
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ReleaseStore
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|,
name|uptr
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|AfterSleep
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|uptr
name|pc
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// The hacky call uses custom calling convention and an assembly thunk.
end_comment

begin_comment
comment|// It is considerably faster that a normal call for the caller
end_comment

begin_comment
comment|// if it is not executed (it is intended for slow paths from hot functions).
end_comment

begin_comment
comment|// The trick is that the call preserves all registers and the compiler
end_comment

begin_comment
comment|// does not treat it as a call.
end_comment

begin_comment
comment|// If it does not work for you, use normal call.
end_comment

begin_if
if|#
directive|if
name|TSAN_DEBUG
operator|==
literal|0
end_if

begin_comment
comment|// The caller may not create the stack frame for itself at all,
end_comment

begin_comment
comment|// so we create a reserve stack frame for it (1024b must be enough).
end_comment

begin_define
define|#
directive|define
name|HACKY_CALL
parameter_list|(
name|f
parameter_list|)
define|\
value|__asm__ __volatile__("sub $1024, %%rsp;" \                        "/*.cfi_adjust_cfa_offset 1024;*/" \                        ".hidden " #f "_thunk;" \                        "call " #f "_thunk;" \                        "add $1024, %%rsp;" \                        "/*.cfi_adjust_cfa_offset -1024;*/" \                        ::: "memory", "cc");
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|HACKY_CALL
parameter_list|(
name|f
parameter_list|)
value|f()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|TraceSwitch
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uptr
name|TraceTopPC
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uptr
name|TraceSize
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|uptr
name|TraceParts
parameter_list|()
function_decl|;
end_function_decl

begin_extern
extern|extern
literal|"C"
name|void
name|__tsan_trace_switch
parameter_list|()
function_decl|;
end_extern

begin_function
name|void
name|ALWAYS_INLINE
name|INLINE
name|TraceAddEvent
parameter_list|(
name|ThreadState
modifier|*
name|thr
parameter_list|,
name|FastState
name|fs
parameter_list|,
name|EventType
name|typ
parameter_list|,
name|u64
name|addr
parameter_list|)
block|{
name|DCHECK_GE
argument_list|(
operator|(
name|int
operator|)
name|typ
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|DCHECK_LE
argument_list|(
operator|(
name|int
operator|)
name|typ
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|DCHECK_EQ
argument_list|(
name|GetLsb
argument_list|(
name|addr
argument_list|,
literal|61
argument_list|)
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|StatInc
argument_list|(
name|thr
argument_list|,
name|StatEvents
argument_list|)
expr_stmt|;
name|u64
name|pos
init|=
name|fs
operator|.
name|GetTracePos
argument_list|()
decl_stmt|;
if|if
condition|(
name|UNLIKELY
argument_list|(
operator|(
name|pos
operator|%
name|kTracePartSize
operator|)
operator|==
literal|0
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|TSAN_GO
name|HACKY_CALL
argument_list|(
name|__tsan_trace_switch
argument_list|)
expr_stmt|;
else|#
directive|else
name|TraceSwitch
argument_list|(
name|thr
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|Event
modifier|*
name|trace
init|=
operator|(
name|Event
operator|*
operator|)
name|GetThreadTrace
argument_list|(
name|fs
operator|.
name|tid
argument_list|()
argument_list|)
decl_stmt|;
name|Event
modifier|*
name|evp
init|=
operator|&
name|trace
index|[
name|pos
index|]
decl_stmt|;
name|Event
name|ev
init|=
operator|(
name|u64
operator|)
name|addr
operator||
operator|(
operator|(
name|u64
operator|)
name|typ
operator|<<
literal|61
operator|)
decl_stmt|;
operator|*
name|evp
operator|=
name|ev
expr_stmt|;
block|}
end_function

begin_comment
unit|}
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_RTL_H
end_comment

end_unit

