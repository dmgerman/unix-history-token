begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_vector.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Low-fat STL-like vector container.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_VECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_VECTOR_H
end_define

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_mman.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Vector
block|{
name|public
operator|:
name|explicit
name|Vector
argument_list|(
argument|MBlockType typ
argument_list|)
operator|:
name|typ_
argument_list|(
name|typ
argument_list|)
block|,
name|begin_
argument_list|()
block|,
name|end_
argument_list|()
block|,
name|last_
argument_list|()
block|{   }
operator|~
name|Vector
argument_list|()
block|{
if|if
condition|(
name|begin_
condition|)
name|internal_free
argument_list|(
name|begin_
argument_list|)
expr_stmt|;
block|}
name|void
name|Reset
argument_list|()
block|{
if|if
condition|(
name|begin_
condition|)
name|internal_free
argument_list|(
name|begin_
argument_list|)
expr_stmt|;
name|begin_
operator|=
literal|0
block|;
name|end_
operator|=
literal|0
block|;
name|last_
operator|=
literal|0
block|;   }
name|uptr
name|Size
argument_list|()
specifier|const
block|{
return|return
name|end_
operator|-
name|begin_
return|;
block|}
name|T
modifier|&
name|operator
function|[]
parameter_list|(
name|uptr
name|i
parameter_list|)
block|{
name|DCHECK_LT
argument_list|(
name|i
argument_list|,
name|end_
operator|-
name|begin_
argument_list|)
expr_stmt|;
return|return
name|begin_
index|[
name|i
index|]
return|;
block|}
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|uptr
name|i
argument_list|)
decl|const
block|{
name|DCHECK_LT
argument_list|(
name|i
argument_list|,
name|end_
operator|-
name|begin_
argument_list|)
expr_stmt|;
return|return
name|begin_
index|[
name|i
index|]
return|;
block|}
name|T
modifier|*
name|PushBack
parameter_list|(
name|T
name|v
init|=
name|T
argument_list|()
parameter_list|)
block|{
name|EnsureSize
argument_list|(
name|Size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|end_
index|[
operator|-
literal|1
index|]
operator|=
name|v
expr_stmt|;
return|return
operator|&
name|end_
index|[
operator|-
literal|1
index|]
return|;
block|}
name|void
name|Resize
parameter_list|(
name|uptr
name|size
parameter_list|)
block|{
name|uptr
name|old_size
init|=
name|Size
argument_list|()
decl_stmt|;
name|EnsureSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|old_size
operator|<
name|size
condition|)
block|{
for|for
control|(
name|uptr
name|i
init|=
name|old_size
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|begin_
index|[
name|i
index|]
operator|=
name|T
argument_list|()
expr_stmt|;
block|}
block|}
name|private
label|:
specifier|const
name|MBlockType
name|typ_
decl_stmt|;
name|T
modifier|*
name|begin_
decl_stmt|;
name|T
modifier|*
name|end_
decl_stmt|;
name|T
modifier|*
name|last_
decl_stmt|;
name|void
name|EnsureSize
parameter_list|(
name|uptr
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|<=
name|Size
argument_list|()
condition|)
return|return;
if|if
condition|(
name|size
operator|<=
call|(
name|uptr
call|)
argument_list|(
name|last_
operator|-
name|begin_
argument_list|)
condition|)
block|{
name|end_
operator|=
name|begin_
operator|+
name|size
expr_stmt|;
return|return;
block|}
name|uptr
name|cap0
init|=
name|last_
operator|-
name|begin_
decl_stmt|;
name|uptr
name|cap
init|=
literal|2
operator|*
name|cap0
decl_stmt|;
if|if
condition|(
name|cap
operator|==
literal|0
condition|)
name|cap
operator|=
literal|16
expr_stmt|;
if|if
condition|(
name|cap
operator|<
name|size
condition|)
name|cap
operator|=
name|size
expr_stmt|;
name|T
modifier|*
name|p
init|=
operator|(
name|T
operator|*
operator|)
name|internal_alloc
argument_list|(
name|typ_
argument_list|,
name|cap
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cap0
condition|)
block|{
name|internal_memcpy
argument_list|(
name|p
argument_list|,
name|begin_
argument_list|,
name|cap0
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
name|internal_free
argument_list|(
name|begin_
argument_list|)
expr_stmt|;
block|}
name|begin_
operator|=
name|p
expr_stmt|;
name|end_
operator|=
name|begin_
operator|+
name|size
expr_stmt|;
name|last_
operator|=
name|begin_
operator|+
name|cap
expr_stmt|;
block|}
name|Vector
argument_list|(
specifier|const
name|Vector
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|Vector
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef TSAN_VECTOR_H
end_comment

end_unit

