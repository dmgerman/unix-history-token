begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_clock.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_CLOCK_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_CLOCK_H
end_define

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_vector.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
comment|// The clock that lives in sync variables (mutexes, atomics, etc).
name|class
name|SyncClock
block|{
name|public
label|:
name|SyncClock
argument_list|()
expr_stmt|;
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|clk_
operator|.
name|Size
argument_list|()
return|;
block|}
name|void
name|Reset
parameter_list|()
block|{
name|clk_
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
name|private
label|:
name|Vector
operator|<
name|u64
operator|>
name|clk_
expr_stmt|;
name|friend
struct_decl|struct
name|ThreadClock
struct_decl|;
block|}
empty_stmt|;
comment|// The clock that lives in threads.
struct|struct
name|ThreadClock
block|{
name|public
label|:
name|ThreadClock
argument_list|()
expr_stmt|;
name|u64
name|get
argument_list|(
name|unsigned
name|tid
argument_list|)
decl|const
block|{
name|DCHECK_LT
argument_list|(
name|tid
argument_list|,
name|kMaxTidInClock
argument_list|)
expr_stmt|;
return|return
name|clk_
index|[
name|tid
index|]
return|;
block|}
name|void
name|set
parameter_list|(
name|unsigned
name|tid
parameter_list|,
name|u64
name|v
parameter_list|)
block|{
name|DCHECK_LT
argument_list|(
name|tid
argument_list|,
name|kMaxTid
argument_list|)
expr_stmt|;
name|DCHECK_GE
argument_list|(
name|v
argument_list|,
name|clk_
index|[
name|tid
index|]
argument_list|)
expr_stmt|;
name|clk_
index|[
name|tid
index|]
operator|=
name|v
expr_stmt|;
if|if
condition|(
name|nclk_
operator|<=
name|tid
condition|)
name|nclk_
operator|=
name|tid
operator|+
literal|1
expr_stmt|;
block|}
name|void
name|tick
parameter_list|(
name|unsigned
name|tid
parameter_list|)
block|{
name|DCHECK_LT
argument_list|(
name|tid
argument_list|,
name|kMaxTid
argument_list|)
expr_stmt|;
name|clk_
index|[
name|tid
index|]
operator|++
expr_stmt|;
if|if
condition|(
name|nclk_
operator|<=
name|tid
condition|)
name|nclk_
operator|=
name|tid
operator|+
literal|1
expr_stmt|;
block|}
name|void
name|Disable
parameter_list|(
name|unsigned
name|tid
parameter_list|)
function_decl|;
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|nclk_
return|;
block|}
name|void
name|acquire
parameter_list|(
specifier|const
name|SyncClock
modifier|*
name|src
parameter_list|)
function_decl|;
name|void
name|release
argument_list|(
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
name|void
name|acq_rel
parameter_list|(
name|SyncClock
modifier|*
name|dst
parameter_list|)
function_decl|;
name|void
name|ReleaseStore
argument_list|(
name|SyncClock
operator|*
name|dst
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|uptr
name|nclk_
decl_stmt|;
name|u64
name|clk_
index|[
name|kMaxTidInClock
index|]
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_CLOCK_H
end_comment

end_unit

