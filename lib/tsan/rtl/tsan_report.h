begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_report.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TSAN_REPORT_H
end_ifndef

begin_define
define|#
directive|define
name|TSAN_REPORT_H
end_define

begin_include
include|#
directive|include
file|"tsan_defs.h"
end_include

begin_include
include|#
directive|include
file|"tsan_vector.h"
end_include

begin_decl_stmt
name|namespace
name|__tsan
block|{
enum|enum
name|ReportType
block|{
name|ReportTypeRace
block|,
name|ReportTypeUseAfterFree
block|,
name|ReportTypeThreadLeak
block|,
name|ReportTypeMutexDestroyLocked
block|,
name|ReportTypeSignalUnsafe
block|,
name|ReportTypeErrnoInSignal
block|, }
enum|;
struct|struct
name|ReportStack
block|{
name|ReportStack
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|module
decl_stmt|;
name|uptr
name|offset
decl_stmt|;
name|uptr
name|pc
decl_stmt|;
name|char
modifier|*
name|func
decl_stmt|;
name|char
modifier|*
name|file
decl_stmt|;
name|int
name|line
decl_stmt|;
name|int
name|col
decl_stmt|;
block|}
struct|;
struct|struct
name|ReportMop
block|{
name|int
name|tid
decl_stmt|;
name|uptr
name|addr
decl_stmt|;
name|int
name|size
decl_stmt|;
name|bool
name|write
decl_stmt|;
name|int
name|nmutex
decl_stmt|;
name|int
modifier|*
name|mutex
decl_stmt|;
name|ReportStack
modifier|*
name|stack
decl_stmt|;
block|}
struct|;
enum|enum
name|ReportLocationType
block|{
name|ReportLocationGlobal
block|,
name|ReportLocationHeap
block|,
name|ReportLocationStack
block|, }
enum|;
struct|struct
name|ReportLocation
block|{
name|ReportLocationType
name|type
decl_stmt|;
name|uptr
name|addr
decl_stmt|;
name|uptr
name|size
decl_stmt|;
name|int
name|tid
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|file
decl_stmt|;
name|int
name|line
decl_stmt|;
name|ReportStack
modifier|*
name|stack
decl_stmt|;
block|}
struct|;
struct|struct
name|ReportThread
block|{
name|int
name|id
decl_stmt|;
name|bool
name|running
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|ReportStack
modifier|*
name|stack
decl_stmt|;
block|}
struct|;
struct|struct
name|ReportMutex
block|{
name|int
name|id
decl_stmt|;
name|ReportStack
modifier|*
name|stack
decl_stmt|;
block|}
struct|;
name|class
name|ReportDesc
block|{
name|public
label|:
name|ReportType
name|typ
decl_stmt|;
name|Vector
operator|<
name|ReportStack
operator|*
operator|>
name|stacks
expr_stmt|;
name|Vector
operator|<
name|ReportMop
operator|*
operator|>
name|mops
expr_stmt|;
name|Vector
operator|<
name|ReportLocation
operator|*
operator|>
name|locs
expr_stmt|;
name|Vector
operator|<
name|ReportMutex
operator|*
operator|>
name|mutexes
expr_stmt|;
name|Vector
operator|<
name|ReportThread
operator|*
operator|>
name|threads
expr_stmt|;
name|ReportDesc
argument_list|()
expr_stmt|;
operator|~
name|ReportDesc
argument_list|()
expr_stmt|;
name|private
label|:
name|ReportDesc
argument_list|(
specifier|const
name|ReportDesc
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ReportDesc
operator|&
operator|)
decl_stmt|;
block|}
empty_stmt|;
comment|// Format and output the report to the console/log. No additional logic.
name|void
name|PrintReport
parameter_list|(
specifier|const
name|ReportDesc
modifier|*
name|rep
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __tsan
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TSAN_REPORT_H
end_comment

end_unit

