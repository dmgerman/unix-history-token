begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- tsan_interface_inl.h ------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer (TSan), a race detector.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"tsan_interface.h"
end_include

begin_include
include|#
directive|include
file|"tsan_rtl.h"
end_include

begin_define
define|#
directive|define
name|CALLERPC
value|((uptr)__builtin_return_address(0))
end_define

begin_decl_stmt
name|using
name|namespace
name|__tsan
decl_stmt|;
end_decl_stmt

begin_comment
comment|// NOLINT
end_comment

begin_function
name|void
name|__tsan_read1
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_read2
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_read4
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_read8
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_write1
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_write2
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_write4
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_write8
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|addr
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_vptr_update
parameter_list|(
name|void
modifier|*
modifier|*
name|vptr_p
parameter_list|,
name|void
modifier|*
name|new_val
parameter_list|)
block|{
name|CHECK_EQ
argument_list|(
sizeof|sizeof
argument_list|(
name|vptr_p
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|vptr_p
operator|!=
name|new_val
condition|)
name|MemoryAccess
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
name|CALLERPC
argument_list|,
operator|(
name|uptr
operator|)
name|vptr_p
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_func_entry
parameter_list|(
name|void
modifier|*
name|pc
parameter_list|)
block|{
name|FuncEntry
argument_list|(
name|cur_thread
argument_list|()
argument_list|,
operator|(
name|uptr
operator|)
name|pc
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|__tsan_func_exit
parameter_list|()
block|{
name|FuncExit
argument_list|(
name|cur_thread
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

