begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Encoding.h - Format C++ code -------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Contains functions for text encoding manipulation. Supports UTF-8,
end_comment

begin_comment
comment|/// 8-bit encodings and escape sequences in C++ string literals.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_FORMAT_ENCODING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_FORMAT_ENCODING_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ConvertUTF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Unicode.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|format
block|{
name|namespace
name|encoding
block|{
enum|enum
name|Encoding
block|{
name|Encoding_UTF8
block|,
name|Encoding_Unknown
comment|// We treat all other encodings as 8-bit encodings.
block|}
enum|;
comment|/// \brief Detects encoding of the Text. If the Text can be decoded using UTF-8,
comment|/// it is considered UTF8, otherwise we treat it as some 8-bit encoding.
specifier|inline
name|Encoding
name|detectEncoding
parameter_list|(
name|StringRef
name|Text
parameter_list|)
block|{
specifier|const
name|UTF8
modifier|*
name|Ptr
init|=
name|reinterpret_cast
operator|<
specifier|const
name|UTF8
operator|*
operator|>
operator|(
name|Text
operator|.
name|begin
argument_list|()
operator|)
decl_stmt|;
specifier|const
name|UTF8
modifier|*
name|BufEnd
init|=
name|reinterpret_cast
operator|<
specifier|const
name|UTF8
operator|*
operator|>
operator|(
name|Text
operator|.
name|end
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|::
name|isLegalUTF8String
argument_list|(
operator|&
name|Ptr
argument_list|,
name|BufEnd
argument_list|)
condition|)
return|return
name|Encoding_UTF8
return|;
return|return
name|Encoding_Unknown
return|;
block|}
specifier|inline
name|unsigned
name|getCodePointCountUTF8
parameter_list|(
name|StringRef
name|Text
parameter_list|)
block|{
name|unsigned
name|CodePoints
init|=
literal|0
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|,
name|e
init|=
name|Text
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|e
condition|;
name|i
operator|+=
name|getNumBytesForUTF8
argument_list|(
name|Text
index|[
name|i
index|]
argument_list|)
control|)
block|{
operator|++
name|CodePoints
expr_stmt|;
block|}
return|return
name|CodePoints
return|;
block|}
comment|/// \brief Gets the number of code points in the Text using the specified
comment|/// Encoding.
specifier|inline
name|unsigned
name|getCodePointCount
parameter_list|(
name|StringRef
name|Text
parameter_list|,
name|Encoding
name|Encoding
parameter_list|)
block|{
switch|switch
condition|(
name|Encoding
condition|)
block|{
case|case
name|Encoding_UTF8
case|:
return|return
name|getCodePointCountUTF8
argument_list|(
name|Text
argument_list|)
return|;
default|default:
return|return
name|Text
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/// \brief Returns the number of columns required to display the \p Text on a
comment|/// generic Unicode-capable terminal. Text is assumed to use the specified
comment|/// \p Encoding.
specifier|inline
name|unsigned
name|columnWidth
parameter_list|(
name|StringRef
name|Text
parameter_list|,
name|Encoding
name|Encoding
parameter_list|)
block|{
if|if
condition|(
name|Encoding
operator|==
name|Encoding_UTF8
condition|)
block|{
name|int
name|ContentWidth
init|=
name|llvm
operator|::
name|sys
operator|::
name|unicode
operator|::
name|columnWidthUTF8
argument_list|(
name|Text
argument_list|)
decl_stmt|;
comment|// FIXME: Figure out the correct way to handle this in the presence of both
comment|// printable and unprintable multi-byte UTF-8 characters. Falling back to
comment|// returning the number of bytes may cause problems, as columnWidth suddenly
comment|// becomes non-additive.
if|if
condition|(
name|ContentWidth
operator|>=
literal|0
condition|)
return|return
name|ContentWidth
return|;
block|}
return|return
name|Text
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \brief Returns the number of columns required to display the \p Text,
comment|/// starting from the \p StartColumn on a terminal with the \p TabWidth. The
comment|/// text is assumed to use the specified \p Encoding.
specifier|inline
name|unsigned
name|columnWidthWithTabs
parameter_list|(
name|StringRef
name|Text
parameter_list|,
name|unsigned
name|StartColumn
parameter_list|,
name|unsigned
name|TabWidth
parameter_list|,
name|Encoding
name|Encoding
parameter_list|)
block|{
name|unsigned
name|TotalWidth
init|=
literal|0
decl_stmt|;
name|StringRef
name|Tail
init|=
name|Text
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|StringRef
operator|::
name|size_type
name|TabPos
operator|=
name|Tail
operator|.
name|find
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
if|if
condition|(
name|TabPos
operator|==
name|StringRef
operator|::
name|npos
condition|)
return|return
name|TotalWidth
operator|+
name|columnWidth
argument_list|(
name|Tail
argument_list|,
name|Encoding
argument_list|)
return|;
name|TotalWidth
operator|+=
name|columnWidth
argument_list|(
name|Tail
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
name|TabPos
argument_list|)
argument_list|,
name|Encoding
argument_list|)
expr_stmt|;
name|TotalWidth
operator|+=
name|TabWidth
operator|-
operator|(
name|TotalWidth
operator|+
name|StartColumn
operator|)
operator|%
name|TabWidth
expr_stmt|;
name|Tail
operator|=
name|Tail
operator|.
name|substr
argument_list|(
name|TabPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/// \brief Gets the number of bytes in a sequence representing a single
comment|/// codepoint and starting with FirstChar in the specified Encoding.
specifier|inline
name|unsigned
name|getCodePointNumBytes
parameter_list|(
name|char
name|FirstChar
parameter_list|,
name|Encoding
name|Encoding
parameter_list|)
block|{
switch|switch
condition|(
name|Encoding
condition|)
block|{
case|case
name|Encoding_UTF8
case|:
return|return
name|getNumBytesForUTF8
argument_list|(
name|FirstChar
argument_list|)
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|inline
name|bool
name|isOctDigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'7'
return|;
block|}
specifier|inline
name|bool
name|isHexDigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
operator|(
literal|'0'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
literal|'a'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'f'
operator|)
operator|||
operator|(
literal|'A'
operator|<=
name|c
operator|&&
name|c
operator|<=
literal|'F'
operator|)
return|;
block|}
comment|/// \brief Gets the length of an escape sequence inside a C++ string literal.
comment|/// Text should span from the beginning of the escape sequence (starting with a
comment|/// backslash) to the end of the string literal.
specifier|inline
name|unsigned
name|getEscapeSequenceLength
parameter_list|(
name|StringRef
name|Text
parameter_list|)
block|{
name|assert
argument_list|(
name|Text
index|[
literal|0
index|]
operator|==
literal|'\\'
argument_list|)
expr_stmt|;
if|if
condition|(
name|Text
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return
literal|1
return|;
switch|switch
condition|(
name|Text
index|[
literal|1
index|]
condition|)
block|{
case|case
literal|'u'
case|:
return|return
literal|6
return|;
case|case
literal|'U'
case|:
return|return
literal|10
return|;
case|case
literal|'x'
case|:
block|{
name|unsigned
name|I
init|=
literal|2
decl_stmt|;
comment|// Point after '\x'.
while|while
condition|(
name|I
operator|<
name|Text
operator|.
name|size
argument_list|()
operator|&&
name|isHexDigit
argument_list|(
name|Text
index|[
name|I
index|]
argument_list|)
condition|)
operator|++
name|I
expr_stmt|;
return|return
name|I
return|;
block|}
default|default:
if|if
condition|(
name|isOctDigit
argument_list|(
name|Text
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
name|unsigned
name|I
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|I
operator|<
name|Text
operator|.
name|size
argument_list|()
operator|&&
name|I
operator|<
literal|4
operator|&&
name|isOctDigit
argument_list|(
name|Text
index|[
name|I
index|]
argument_list|)
condition|)
operator|++
name|I
expr_stmt|;
return|return
name|I
return|;
block|}
return|return
literal|1
operator|+
name|getNumBytesForUTF8
argument_list|(
name|Text
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
block|}
comment|// namespace encoding
block|}
comment|// namespace format
block|}
end_decl_stmt

begin_comment
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

