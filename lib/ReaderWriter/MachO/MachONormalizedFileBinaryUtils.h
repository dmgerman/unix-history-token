begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/MachO/MachONormalizedFileBinaryUtils.h ------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"MachONormalizedFile.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Host.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MachO.h"
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_MACHO_NORMALIZED_FILE_BINARY_UTILS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_MACHO_NORMALIZED_FILE_BINARY_UTILS_H
end_define

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|mach_o
block|{
name|namespace
name|normalized
block|{
name|using
name|namespace
name|llvm
operator|::
name|support
operator|::
name|endian
expr_stmt|;
name|using
name|llvm
operator|::
name|sys
operator|::
name|getSwappedBytes
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|uint16_t
name|read16
argument_list|(
argument|const T *loc
argument_list|,
argument|bool isBig
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|uint64_t
operator|)
name|loc
operator|%
name|llvm
operator|::
name|alignOf
operator|<
name|T
operator|>
operator|(
operator|)
operator|==
literal|0
operator|&&
literal|"invalid pointer alignment"
argument_list|)
block|;
return|return
name|isBig
condition|?
name|read16be
argument_list|(
name|loc
argument_list|)
else|:
name|read16le
argument_list|(
name|loc
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|uint32_t
name|read32
argument_list|(
argument|const T *loc
argument_list|,
argument|bool isBig
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|uint64_t
operator|)
name|loc
operator|%
name|llvm
operator|::
name|alignOf
operator|<
name|T
operator|>
operator|(
operator|)
operator|==
literal|0
operator|&&
literal|"invalid pointer alignment"
argument_list|)
block|;
return|return
name|isBig
condition|?
name|read32be
argument_list|(
name|loc
argument_list|)
else|:
name|read32le
argument_list|(
name|loc
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
specifier|static
specifier|inline
name|uint64_t
name|read64
argument_list|(
argument|const T *loc
argument_list|,
argument|bool isBig
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|uint64_t
operator|)
name|loc
operator|%
name|llvm
operator|::
name|alignOf
operator|<
name|T
operator|>
operator|(
operator|)
operator|==
literal|0
operator|&&
literal|"invalid pointer alignment"
argument_list|)
block|;
return|return
name|isBig
condition|?
name|read64be
argument_list|(
name|loc
argument_list|)
else|:
name|read64le
argument_list|(
name|loc
argument_list|)
return|;
block|}
specifier|inline
name|void
name|write16
parameter_list|(
name|uint8_t
modifier|*
name|loc
parameter_list|,
name|uint16_t
name|value
parameter_list|,
name|bool
name|isBig
parameter_list|)
block|{
if|if
condition|(
name|isBig
condition|)
name|write16be
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|write16le
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|write32
parameter_list|(
name|uint8_t
modifier|*
name|loc
parameter_list|,
name|uint32_t
name|value
parameter_list|,
name|bool
name|isBig
parameter_list|)
block|{
if|if
condition|(
name|isBig
condition|)
name|write32be
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|write32le
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|write64
parameter_list|(
name|uint8_t
modifier|*
name|loc
parameter_list|,
name|uint64_t
name|value
parameter_list|,
name|bool
name|isBig
parameter_list|)
block|{
if|if
condition|(
name|isBig
condition|)
name|write64be
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
else|else
name|write64le
argument_list|(
name|loc
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|uint32_t
name|bitFieldExtract
parameter_list|(
name|uint32_t
name|value
parameter_list|,
name|bool
name|isBigEndianBigField
parameter_list|,
name|uint8_t
name|firstBit
parameter_list|,
name|uint8_t
name|bitCount
parameter_list|)
block|{
specifier|const
name|uint32_t
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bitCount
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
specifier|const
name|uint8_t
name|shift
init|=
name|isBigEndianBigField
condition|?
operator|(
literal|32
operator|-
name|firstBit
operator|-
name|bitCount
operator|)
else|:
name|firstBit
decl_stmt|;
return|return
operator|(
name|value
operator|>>
name|shift
operator|)
operator|&
name|mask
return|;
block|}
specifier|inline
name|void
name|bitFieldSet
parameter_list|(
name|uint32_t
modifier|&
name|bits
parameter_list|,
name|bool
name|isBigEndianBigField
parameter_list|,
name|uint32_t
name|newBits
parameter_list|,
name|uint8_t
name|firstBit
parameter_list|,
name|uint8_t
name|bitCount
parameter_list|)
block|{
specifier|const
name|uint32_t
name|mask
init|=
operator|(
operator|(
literal|1
operator|<<
name|bitCount
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|newBits
operator|&
name|mask
operator|)
operator|==
name|newBits
argument_list|)
expr_stmt|;
specifier|const
name|uint8_t
name|shift
init|=
name|isBigEndianBigField
condition|?
operator|(
literal|32
operator|-
name|firstBit
operator|-
name|bitCount
operator|)
else|:
name|firstBit
decl_stmt|;
name|bits
operator|&=
operator|~
operator|(
name|mask
operator|<<
name|shift
operator|)
expr_stmt|;
name|bits
operator||=
operator|(
name|newBits
operator|<<
name|shift
operator|)
expr_stmt|;
block|}
specifier|inline
name|Relocation
name|unpackRelocation
argument_list|(
specifier|const
name|llvm
operator|::
name|MachO
operator|::
name|any_relocation_info
operator|&
name|r
argument_list|,
name|bool
name|isBigEndian
argument_list|)
block|{
name|uint32_t
name|r0
init|=
name|read32
argument_list|(
operator|&
name|r
operator|.
name|r_word0
argument_list|,
name|isBigEndian
argument_list|)
decl_stmt|;
name|uint32_t
name|r1
init|=
name|read32
argument_list|(
operator|&
name|r
operator|.
name|r_word1
argument_list|,
name|isBigEndian
argument_list|)
decl_stmt|;
name|Relocation
name|result
decl_stmt|;
if|if
condition|(
name|r0
operator|&
name|llvm
operator|::
name|MachO
operator|::
name|R_SCATTERED
condition|)
block|{
comment|// scattered relocation record always laid out like big endian bit field
name|result
operator|.
name|offset
operator|=
name|bitFieldExtract
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|result
operator|.
name|scattered
operator|=
name|true
expr_stmt|;
name|result
operator|.
name|type
operator|=
operator|(
name|RelocationInfoType
operator|)
name|bitFieldExtract
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|bitFieldExtract
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|.
name|pcRel
operator|=
name|bitFieldExtract
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|isExtern
operator|=
name|false
expr_stmt|;
name|result
operator|.
name|value
operator|=
name|r1
expr_stmt|;
name|result
operator|.
name|symbol
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|offset
operator|=
name|r0
expr_stmt|;
name|result
operator|.
name|scattered
operator|=
name|false
expr_stmt|;
name|result
operator|.
name|type
operator|=
operator|(
name|RelocationInfoType
operator|)
name|bitFieldExtract
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
literal|28
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|result
operator|.
name|length
operator|=
name|bitFieldExtract
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
literal|25
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|.
name|pcRel
operator|=
name|bitFieldExtract
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
literal|24
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|isExtern
operator|=
name|bitFieldExtract
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
literal|27
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|.
name|value
operator|=
literal|0
expr_stmt|;
name|result
operator|.
name|symbol
operator|=
name|bitFieldExtract
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|inline
name|llvm
operator|::
name|MachO
operator|::
name|any_relocation_info
name|packRelocation
argument_list|(
argument|const Relocation&r
argument_list|,
argument|bool swap
argument_list|,
argument|bool isBigEndian
argument_list|)
block|{
name|uint32_t
name|r0
operator|=
literal|0
block|;
name|uint32_t
name|r1
operator|=
literal|0
block|;
if|if
condition|(
name|r
operator|.
name|scattered
condition|)
block|{
name|r1
operator|=
name|r
operator|.
name|value
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
name|r
operator|.
name|offset
argument_list|,
literal|8
argument_list|,
literal|24
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
name|r
operator|.
name|type
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
name|r
operator|.
name|length
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
name|r
operator|.
name|pcRel
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r0
argument_list|,
name|true
argument_list|,
name|r
operator|.
name|scattered
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// R_SCATTERED
block|}
else|else
block|{
name|r0
operator|=
name|r
operator|.
name|offset
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
name|r
operator|.
name|type
argument_list|,
literal|28
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
name|r
operator|.
name|isExtern
argument_list|,
literal|27
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
name|r
operator|.
name|length
argument_list|,
literal|25
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
name|r
operator|.
name|pcRel
argument_list|,
literal|24
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bitFieldSet
argument_list|(
name|r1
argument_list|,
name|isBigEndian
argument_list|,
name|r
operator|.
name|symbol
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
name|llvm
operator|::
name|MachO
operator|::
name|any_relocation_info
name|result
expr_stmt|;
name|result
operator|.
name|r_word0
operator|=
name|swap
condition|?
name|getSwappedBytes
argument_list|(
name|r0
argument_list|)
else|:
name|r0
expr_stmt|;
name|result
operator|.
name|r_word1
operator|=
name|swap
condition|?
name|getSwappedBytes
argument_list|(
name|r1
argument_list|)
else|:
name|r1
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|inline
name|StringRef
name|getString16
parameter_list|(
specifier|const
name|char
name|s
index|[
literal|16
index|]
parameter_list|)
block|{
name|StringRef
name|x
init|=
name|s
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|size
argument_list|()
operator|>
literal|16
condition|)
return|return
name|x
operator|.
name|substr
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|)
return|;
else|else
return|return
name|x
return|;
block|}
specifier|inline
name|void
name|setString16
parameter_list|(
name|StringRef
name|str
parameter_list|,
name|char
name|s
index|[
literal|16
index|]
parameter_list|)
block|{
name|memset
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|s
argument_list|,
name|str
operator|.
name|begin
argument_list|()
argument_list|,
operator|(
name|str
operator|.
name|size
argument_list|()
operator|>
literal|16
operator|)
condition|?
literal|16
else|:
name|str
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Implemented in normalizedToAtoms() and used by normalizedFromAtoms() so
comment|// that the same table can be used to map mach-o sections to and from
comment|// DefinedAtom::ContentType.
name|void
name|relocatableSectionInfoForContentType
argument_list|(
name|DefinedAtom
operator|::
name|ContentType
name|atomType
argument_list|,
name|StringRef
operator|&
name|segmentName
argument_list|,
name|StringRef
operator|&
name|sectionName
argument_list|,
name|SectionType
operator|&
name|sectionType
argument_list|,
name|SectionAttr
operator|&
name|sectionAttrs
argument_list|)
decl_stmt|;
block|}
comment|// namespace normalized
block|}
end_decl_stmt

begin_comment
comment|// namespace mach_o
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_MACHO_NORMALIZED_FILE_BINARY_UTILS_H
end_comment

end_unit

