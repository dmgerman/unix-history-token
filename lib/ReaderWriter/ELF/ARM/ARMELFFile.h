begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------- lib/ReaderWriter/ELF/ARM/ARMELFFile.h ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_ARM_ARM_ELF_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_ARM_ARM_ELF_FILE_H
end_define

begin_include
include|#
directive|include
file|"ELFReader.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|ARMLinkingContext
decl_stmt|;
name|class
name|ARMELFBaseDefinedAtom
range|:
name|public
name|ELFDefinedAtom
operator|<
name|ELF32LE
operator|>
block|{
name|public
operator|:
comment|/// The values of custom content type enum must not interfere
comment|/// with ones in base defined atom class' enum.
expr|enum
name|ARMContentType
block|{
name|typeARMExidx
operator|=
literal|0x1000
block|,
comment|// Identifies ARM_EXIDX section
block|}
block|;
name|template
operator|<
name|typename
operator|...
name|T
operator|>
name|ARMELFBaseDefinedAtom
argument_list|(
name|T
operator|&&
operator|...
name|args
argument_list|)
operator|:
name|ELFDefinedAtom
operator|<
name|ELF32LE
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|args
operator|)
operator|...
operator|)
block|{}
name|DefinedAtom
operator|::
name|ContentPermissions
name|permissions
argument_list|()
specifier|const
name|override
block|{
if|if
condition|(
name|_permissions
operator|!=
name|DefinedAtom
operator|::
name|permUnknown
condition|)
return|return
name|_permissions
return|;
switch|switch
condition|(
name|_section
operator|->
name|sh_type
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|SHT_ARM_EXIDX
case|:
return|return
name|_permissions
operator|=
name|permR__
return|;
block|}
return|return
name|ELFDefinedAtom
operator|::
name|permissions
argument_list|()
return|;
block|}
name|DefinedAtom
operator|::
name|ContentType
name|contentType
argument_list|()
specifier|const
name|override
block|{
if|if
condition|(
name|_contentType
operator|!=
name|DefinedAtom
operator|::
name|typeUnknown
condition|)
return|return
name|_contentType
return|;
switch|switch
condition|(
name|_section
operator|->
name|sh_type
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|SHT_ARM_EXIDX
case|:
return|return
name|_contentType
operator|=
operator|(
name|DefinedAtom
operator|::
name|ContentType
operator|)
name|typeARMExidx
return|;
block|}
return|return
name|ELFDefinedAtom
operator|::
name|contentType
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ARMELFMappingAtom
range|:
name|public
name|ARMELFBaseDefinedAtom
block|{
name|public
operator|:
name|template
operator|<
name|typename
operator|...
name|T
operator|>
name|ARMELFMappingAtom
argument_list|(
argument|DefinedAtom::CodeModel model
argument_list|,
argument|T&&... args
argument_list|)
operator|:
name|ARMELFBaseDefinedAtom
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
block|,
name|_model
argument_list|(
argument|model
argument_list|)
block|{}
name|DefinedAtom
operator|::
name|CodeModel
name|codeModel
argument_list|()
specifier|const
name|override
block|{
return|return
name|_model
return|;
block|}
name|private
operator|:
name|DefinedAtom
operator|::
name|CodeModel
name|_model
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ARMELFDefinedAtom
range|:
name|public
name|ARMELFBaseDefinedAtom
block|{
name|public
operator|:
name|template
operator|<
name|typename
operator|...
name|T
operator|>
name|ARMELFDefinedAtom
argument_list|(
name|T
operator|&&
operator|...
name|args
argument_list|)
operator|:
name|ARMELFBaseDefinedAtom
argument_list|(
argument|std::forward<T>(args)...
argument_list|)
block|{}
name|bool
name|isThumbFunc
argument_list|()
specifier|const
block|{
specifier|const
name|auto
operator|*
name|symbol
operator|=
name|_symbol
block|;
return|return
name|symbol
operator|->
name|getType
argument_list|()
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|STT_FUNC
operator|&&
operator|(
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|symbol
operator|->
name|st_value
operator|)
operator|&
literal|0x1
operator|)
return|;
block|}
comment|/// Correct st_value for symbols addressing Thumb instructions
comment|/// by removing its zero bit.
name|uint64_t
name|getSymbolValue
argument_list|()
specifier|const
name|override
block|{
specifier|const
name|auto
name|value
operator|=
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|_symbol
operator|->
name|st_value
operator|)
block|;
return|return
name|isThumbFunc
argument_list|()
condition|?
name|value
operator|&
operator|~
literal|0x1
else|:
name|value
return|;
block|}
name|DefinedAtom
operator|::
name|CodeModel
name|codeModel
argument_list|()
specifier|const
name|override
block|{
return|return
name|isThumbFunc
argument_list|()
condition|?
name|DefinedAtom
operator|::
name|codeARMThumb
else|:
name|DefinedAtom
operator|::
name|codeNA
return|;
block|}
expr|}
block|;
name|class
name|ARMELFFile
operator|:
name|public
name|ELFFile
operator|<
name|ELF32LE
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELF32LE
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
name|public
operator|:
name|ARMELFFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|mb
argument_list|,
name|ELFLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|ELFFile
argument_list|(
argument|std::move(mb)
argument_list|,
argument|ctx
argument_list|)
block|{}
name|protected
operator|:
comment|/// Returns initial addend; for ARM it is 0, because it is read
comment|/// during the relocations applying
name|Reference
operator|::
name|Addend
name|getInitialAddend
argument_list|(
argument|ArrayRef<uint8_t>
argument_list|,
argument|uint64_t
argument_list|,
argument|const Elf_Rel&
argument_list|)
specifier|const
name|override
block|{
return|return
literal|0
return|;
block|}
name|private
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Sym_Impl
operator|<
name|ELF32LE
operator|>
name|Elf_Sym
expr_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Shdr_Impl
operator|<
name|ELF32LE
operator|>
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_comment
comment|/// Correct st_value for symbols addressing Thumb instructions
end_comment

begin_comment
comment|/// by removing its zero bit.
end_comment

begin_decl_stmt
name|uint64_t
name|getSymbolValue
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|symbol
argument_list|)
decl|const
name|override
block|{
specifier|const
specifier|auto
name|value
init|=
name|static_cast
operator|<
name|uint64_t
operator|>
operator|(
name|symbol
operator|->
name|st_value
operator|)
decl_stmt|;
return|return
name|symbol
operator|->
name|getType
argument_list|()
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|STT_FUNC
condition|?
name|value
operator|&
operator|~
literal|0x1
else|:
name|value
return|;
block|}
end_decl_stmt

begin_comment
comment|/// Process the Defined symbol and create an atom for it.
end_comment

begin_expr_stmt
name|ELFDefinedAtom
operator|<
name|ELF32LE
operator|>
operator|*
name|createDefinedAtom
argument_list|(
argument|StringRef symName
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|const Elf_Sym *sym
argument_list|,
argument|const Elf_Shdr *sectionHdr
argument_list|,
argument|ArrayRef<uint8_t> contentData
argument_list|,
argument|unsigned int referenceStart
argument_list|,
argument|unsigned int referenceEnd
argument_list|,
argument|std::vector<ELFReference<ELF32LE> *>&referenceList
argument_list|)
name|override
block|{
if|if
condition|(
name|symName
operator|.
name|size
argument_list|()
operator|>=
literal|2
operator|&&
name|symName
index|[
literal|0
index|]
operator|==
literal|'$'
condition|)
block|{
switch|switch
condition|(
name|symName
index|[
literal|1
index|]
condition|)
block|{
case|case
literal|'a'
case|:
return|return
name|new
argument_list|(
argument|_readerStorage
argument_list|)
name|ARMELFMappingAtom
argument_list|(
name|DefinedAtom
operator|::
name|codeARM_a
argument_list|,
operator|*
name|this
argument_list|,
name|symName
argument_list|,
name|sectionName
argument_list|,
name|sym
argument_list|,
name|sectionHdr
argument_list|,
name|contentData
argument_list|,
name|referenceStart
argument_list|,
name|referenceEnd
argument_list|,
name|referenceList
argument_list|)
return|;
case|case
literal|'d'
case|:
return|return
name|new
argument_list|(
argument|_readerStorage
argument_list|)
name|ARMELFMappingAtom
argument_list|(
name|DefinedAtom
operator|::
name|codeARM_d
argument_list|,
operator|*
name|this
argument_list|,
name|symName
argument_list|,
name|sectionName
argument_list|,
name|sym
argument_list|,
name|sectionHdr
argument_list|,
name|contentData
argument_list|,
name|referenceStart
argument_list|,
name|referenceEnd
argument_list|,
name|referenceList
argument_list|)
return|;
case|case
literal|'t'
case|:
return|return
name|new
argument_list|(
argument|_readerStorage
argument_list|)
name|ARMELFMappingAtom
argument_list|(
name|DefinedAtom
operator|::
name|codeARM_t
argument_list|,
operator|*
name|this
argument_list|,
name|symName
argument_list|,
name|sectionName
argument_list|,
name|sym
argument_list|,
name|sectionHdr
argument_list|,
name|contentData
argument_list|,
name|referenceStart
argument_list|,
name|referenceEnd
argument_list|,
name|referenceList
argument_list|)
return|;
default|default:
comment|// Fall through and create regular defined atom.
break|break;
block|}
end_expr_stmt

begin_macro
unit|}     return
name|new
argument_list|(
argument|_readerStorage
argument_list|)
end_macro

begin_expr_stmt
name|ARMELFDefinedAtom
argument_list|(
operator|*
name|this
argument_list|,
name|symName
argument_list|,
name|sectionName
argument_list|,
name|sym
argument_list|,
name|sectionHdr
argument_list|,
name|contentData
argument_list|,
name|referenceStart
argument_list|,
name|referenceEnd
argument_list|,
name|referenceList
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// elf
end_comment

begin_comment
unit|}
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_ARM_ARM_ELF_FILE_H
end_comment

end_unit

