begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------- lib/ReaderWriter/ELF/ARM/ARMTargetHandler.h ----------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"ARMELFFile.h"
end_include

begin_include
include|#
directive|include
file|"ARMELFReader.h"
end_include

begin_include
include|#
directive|include
file|"ARMRelocationHandler.h"
end_include

begin_include
include|#
directive|include
file|"DefaultTargetHandler.h"
end_include

begin_include
include|#
directive|include
file|"TargetLayout.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Simple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|ELFType
operator|<
name|llvm
operator|::
name|support
operator|::
name|little
operator|,
literal|2
operator|,
name|false
operator|>
name|ARMELFType
expr_stmt|;
name|class
name|ARMLinkingContext
decl_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ARMTargetLayout
operator|:
name|public
name|TargetLayout
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|ARMTargetLayout
argument_list|(
name|ARMLinkingContext
operator|&
name|context
argument_list|)
operator|:
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|)
block|{}
name|uint64_t
name|getTPOffset
argument_list|()
block|{
if|if
condition|(
name|_tpOff
operator|.
name|hasValue
argument_list|()
condition|)
return|return
operator|*
name|_tpOff
return|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|phdr
range|:
operator|*
name|this
operator|->
name|_programHeader
control|)
block|{
if|if
condition|(
name|phdr
operator|->
name|p_type
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|PT_TLS
condition|)
block|{
name|_tpOff
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|TCB_SIZE
argument_list|,
name|phdr
operator|->
name|p_align
argument_list|)
expr_stmt|;
return|return
operator|*
name|_tpOff
return|;
block|}
block|}
name|llvm_unreachable
argument_list|(
literal|"TLS segment not found"
argument_list|)
expr_stmt|;
block|}
name|private
label|:
comment|// TCB block size of the TLS.
enum|enum
block|{
name|TCB_SIZE
init|=
literal|0x8
block|}
enum|;
comment|// Cached value of the TLS offset from the $tp pointer.
name|llvm
operator|::
name|Optional
operator|<
name|uint64_t
operator|>
name|_tpOff
expr_stmt|;
block|}
empty_stmt|;
name|class
name|ARMTargetHandler
name|final
range|:
name|public
name|DefaultTargetHandler
operator|<
name|ARMELFType
operator|>
block|{
name|public
operator|:
name|ARMTargetHandler
argument_list|(
name|ARMLinkingContext
operator|&
name|context
argument_list|)
block|;
name|ARMTargetLayout
operator|<
name|ARMELFType
operator|>
operator|&
name|getTargetLayout
argument_list|()
name|override
block|{
return|return
operator|*
operator|(
name|_armTargetLayout
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
name|void
name|registerRelocationNames
argument_list|(
argument|Registry&registry
argument_list|)
name|override
block|;
specifier|const
name|ARMTargetRelocationHandler
operator|&
name|getRelocationHandler
argument_list|()
specifier|const
name|override
block|{
return|return
operator|*
operator|(
name|_armRelocationHandler
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getObjReader
argument_list|()
name|override
block|{
return|return
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
operator|(
name|new
name|ARMELFObjectReader
argument_list|(
name|_context
argument_list|)
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getDSOReader
argument_list|()
name|override
block|{
return|return
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
operator|(
name|new
name|ARMELFDSOReader
argument_list|(
name|_context
argument_list|)
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|getWriter
argument_list|()
name|override
block|;
name|private
operator|:
specifier|static
specifier|const
name|Registry
operator|::
name|KindStrings
name|kindStrings
index|[]
block|;
name|ARMLinkingContext
operator|&
name|_context
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|ARMTargetLayout
operator|<
name|ARMELFType
operator|>>
name|_armTargetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|ARMTargetRelocationHandler
operator|>
name|_armRelocationHandler
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_comment

end_unit

