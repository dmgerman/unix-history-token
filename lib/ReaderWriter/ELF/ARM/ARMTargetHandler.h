begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------- lib/ReaderWriter/ELF/ARM/ARMTargetHandler.h ----------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"ARMELFFile.h"
end_include

begin_include
include|#
directive|include
file|"ARMRelocationHandler.h"
end_include

begin_include
include|#
directive|include
file|"ELFReader.h"
end_include

begin_include
include|#
directive|include
file|"TargetLayout.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|class
name|ELFLinkingContext
decl_stmt|;
name|namespace
name|elf
block|{
comment|/// \brief ARM specific section (.ARM.exidx) with indexes to exception handlers
name|class
name|ARMExidxSection
range|:
name|public
name|AtomSection
operator|<
name|ELF32LE
operator|>
block|{
typedef|typedef
name|AtomSection
operator|<
name|ELF32LE
operator|>
name|Base
expr_stmt|;
name|public
operator|:
name|ARMExidxSection
argument_list|(
argument|const ELFLinkingContext&ctx
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|int32_t permissions
argument_list|,
argument|int32_t order
argument_list|)
operator|:
name|Base
argument_list|(
argument|ctx
argument_list|,
argument|sectionName
argument_list|,
argument|ARMELFDefinedAtom::typeARMExidx
argument_list|,
argument|permissions
argument_list|,
argument|order
argument_list|)
block|{
name|this
operator|->
name|_type
operator|=
name|SHT_ARM_EXIDX
block|;
name|this
operator|->
name|_isLoadedInMemory
operator|=
name|true
block|;   }
name|bool
name|hasOutputSegment
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
specifier|const
name|AtomLayout
modifier|*
name|appendAtom
parameter_list|(
specifier|const
name|Atom
modifier|*
name|atom
parameter_list|)
function|override
block|{
specifier|const
name|DefinedAtom
modifier|*
name|definedAtom
init|=
name|cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|atom
operator|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|ARMELFDefinedAtom
operator|::
name|ARMContentType
operator|)
name|definedAtom
operator|->
name|contentType
argument_list|()
operator|==
name|ARMELFDefinedAtom
operator|::
name|typeARMExidx
operator|&&
literal|"atom content type for .ARM.exidx section has to be typeARMExidx"
argument_list|)
expr_stmt|;
name|DefinedAtom
operator|::
name|Alignment
name|atomAlign
operator|=
name|definedAtom
operator|->
name|alignment
argument_list|()
expr_stmt|;
name|uint64_t
name|fOffset
init|=
name|alignOffset
argument_list|(
name|this
operator|->
name|fileSize
argument_list|()
argument_list|,
name|atomAlign
argument_list|)
decl_stmt|;
name|uint64_t
name|mOffset
init|=
name|alignOffset
argument_list|(
name|this
operator|->
name|memSize
argument_list|()
argument_list|,
name|atomAlign
argument_list|)
decl_stmt|;
name|_atoms
operator|.
name|push_back
argument_list|(
name|new
argument_list|(
argument|_alloc
argument_list|)
name|AtomLayout
argument_list|(
name|atom
argument_list|,
name|fOffset
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|_fsize
operator|=
name|fOffset
operator|+
name|definedAtom
operator|->
name|size
argument_list|()
expr_stmt|;
name|this
operator|->
name|_msize
operator|=
name|mOffset
operator|+
name|definedAtom
operator|->
name|size
argument_list|()
expr_stmt|;
name|DEBUG_WITH_TYPE
argument_list|(
literal|"Section"
argument_list|,
name|llvm
operator|::
name|dbgs
argument_list|()
operator|<<
literal|"["
operator|<<
name|this
operator|->
name|name
argument_list|()
operator|<<
literal|" "
operator|<<
name|this
operator|<<
literal|"] "
operator|<<
literal|"Adding atom: "
operator|<<
name|atom
operator|->
name|name
argument_list|()
operator|<<
literal|"@"
operator|<<
name|fOffset
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|uint64_t
name|alignment
init|=
name|atomAlign
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|this
operator|->
name|_alignment
operator|<
name|alignment
condition|)
name|this
operator|->
name|_alignment
operator|=
name|alignment
expr_stmt|;
return|return
name|_atoms
operator|.
name|back
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|ARMTargetLayout
range|:
name|public
name|TargetLayout
operator|<
name|ELF32LE
operator|>
block|{
name|public
operator|:
expr|enum
name|ARMSectionOrder
block|{
name|ORDER_ARM_EXIDX
operator|=
name|TargetLayout
operator|::
name|ORDER_EH_FRAME
operator|+
literal|1
block|,   }
block|;
name|ARMTargetLayout
argument_list|(
name|ELFLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|TargetLayout
argument_list|(
argument|ctx
argument_list|)
block|{}
name|SectionOrder
name|getSectionOrder
argument_list|(
argument|StringRef name
argument_list|,
argument|int32_t contentType
argument_list|,
argument|int32_t contentPermissions
argument_list|)
name|override
block|{
switch|switch
condition|(
name|contentType
condition|)
block|{
case|case
name|ARMELFDefinedAtom
operator|::
name|typeARMExidx
case|:
return|return
name|ORDER_ARM_EXIDX
return|;
default|default:
return|return
name|TargetLayout
operator|::
name|getSectionOrder
argument_list|(
name|name
argument_list|,
name|contentType
argument_list|,
name|contentPermissions
argument_list|)
return|;
block|}
block|}
name|StringRef
name|getOutputSectionName
argument_list|(
argument|StringRef archivePath
argument_list|,
argument|StringRef memberPath
argument_list|,
argument|StringRef inputSectionName
argument_list|)
specifier|const
name|override
block|{
return|return
name|llvm
operator|::
name|StringSwitch
operator|<
name|StringRef
operator|>
operator|(
name|inputSectionName
operator|)
operator|.
name|StartsWith
argument_list|(
literal|".ARM.exidx"
argument_list|,
literal|".ARM.exidx"
argument_list|)
operator|.
name|StartsWith
argument_list|(
literal|".ARM.extab"
argument_list|,
literal|".ARM.extab"
argument_list|)
operator|.
name|Default
argument_list|(
name|TargetLayout
operator|::
name|getOutputSectionName
argument_list|(
name|archivePath
argument_list|,
name|memberPath
argument_list|,
name|inputSectionName
argument_list|)
argument_list|)
return|;
block|}
name|SegmentType
name|getSegmentType
argument_list|(
argument|const Section<ELF32LE> *section
argument_list|)
specifier|const
name|override
block|{
switch|switch
condition|(
name|section
operator|->
name|order
argument_list|()
condition|)
block|{
case|case
name|ORDER_ARM_EXIDX
case|:
return|return
name|llvm
operator|::
name|ELF
operator|::
name|PT_ARM_EXIDX
return|;
default|default:
return|return
name|TargetLayout
operator|::
name|getSegmentType
argument_list|(
name|section
argument_list|)
return|;
block|}
block|}
name|AtomSection
operator|<
name|ELF32LE
operator|>
operator|*
name|createSection
argument_list|(
argument|StringRef name
argument_list|,
argument|int32_t contentType
argument_list|,
argument|DefinedAtom::ContentPermissions contentPermissions
argument_list|,
argument|SectionOrder sectionOrder
argument_list|)
name|override
block|{
if|if
condition|(
operator|(
name|ARMELFDefinedAtom
operator|::
name|ARMContentType
operator|)
name|contentType
operator|==
name|ARMELFDefinedAtom
operator|::
name|typeARMExidx
condition|)
return|return
name|new
name|ARMExidxSection
argument_list|(
name|_ctx
argument_list|,
name|name
argument_list|,
name|contentPermissions
argument_list|,
name|sectionOrder
argument_list|)
return|;
return|return
name|TargetLayout
operator|::
name|createSection
argument_list|(
name|name
argument_list|,
name|contentType
argument_list|,
name|contentPermissions
argument_list|,
name|sectionOrder
argument_list|)
return|;
block|}
name|uint64_t
name|getGOTSymAddr
parameter_list|()
block|{
name|std
operator|::
name|call_once
argument_list|(
name|_gotSymOnce
argument_list|,
index|[
name|this
index|]
operator|(
operator|)
block|{
if|if
condition|(
name|AtomLayout
modifier|*
name|gotAtom
init|=
name|findAbsoluteAtom
argument_list|(
literal|"_GLOBAL_OFFSET_TABLE_"
argument_list|)
condition|)
name|_gotSymAddr
operator|=
name|gotAtom
operator|->
name|_virtualAddr
expr_stmt|;
block|}
block|)
function|;
return|return
name|_gotSymAddr
return|;
block|}
end_decl_stmt

begin_function
name|uint64_t
name|getTPOffset
parameter_list|()
block|{
name|std
operator|::
name|call_once
argument_list|(
name|_tpOffOnce
argument_list|,
index|[
name|this
index|]
operator|(
operator|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|phdr
range|:
operator|*
name|_programHeader
control|)
block|{
if|if
condition|(
name|phdr
operator|->
name|p_type
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|PT_TLS
condition|)
block|{
name|_tpOff
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|TCB_SIZE
argument_list|,
name|phdr
operator|->
name|p_align
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_expr_stmt
name|assert
argument_list|(
name|_tpOff
operator|!=
literal|0
operator|&&
literal|"TLS segment not found"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|_tpOff
return|;
end_return

begin_macro
unit|}    bool
name|target1Rel
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|_ctx
operator|.
name|armTarget1Rel
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_comment
comment|// TCB block size of the TLS.
end_comment

begin_enum
enum|enum
block|{
name|TCB_SIZE
init|=
literal|0x8
block|}
enum|;
end_enum

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uint64_t
name|_gotSymAddr
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|_tpOff
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|once_flag
name|_gotSymOnce
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|once_flag
name|_tpOffOnce
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|ARMTargetHandler
name|final
range|:
name|public
name|TargetHandler
block|{
name|public
operator|:
name|ARMTargetHandler
argument_list|(
name|ARMLinkingContext
operator|&
name|ctx
argument_list|)
block|;
specifier|const
name|TargetRelocationHandler
operator|&
name|getRelocationHandler
argument_list|()
specifier|const
name|override
block|{
return|return
operator|*
name|_relocationHandler
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getObjReader
argument_list|()
name|override
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|ELFReader
operator|<
name|ARMELFFile
operator|>>
operator|(
name|_ctx
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getDSOReader
argument_list|()
name|override
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|ELFReader
operator|<
name|DynamicFile
operator|<
name|ELF32LE
operator|>>>
operator|(
name|_ctx
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|getWriter
argument_list|()
name|override
block|;
name|private
operator|:
name|ARMLinkingContext
operator|&
name|_ctx
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|ARMTargetLayout
operator|>
name|_targetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|ARMTargetRelocationHandler
operator|>
name|_relocationHandler
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_ARM_ARM_TARGET_HANDLER_H
end_comment

end_unit

