begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------- lib/ReaderWriter/ELF/ARM/ARMExecutableWriter.h -------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_ARM_ARM_EXECUTABLE_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_ARM_ARM_EXECUTABLE_WRITER_H
end_define

begin_include
include|#
directive|include
file|"ExecutableWriter.h"
end_include

begin_include
include|#
directive|include
file|"ARMLinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"ARMTargetHandler.h"
end_include

begin_include
include|#
directive|include
file|"ARMSymbolTable.h"
end_include

begin_macro
name|namespace
end_macro

begin_block
block|{
specifier|const
name|char
modifier|*
name|gotSymbol
init|=
literal|"_GLOBAL_OFFSET_TABLE_"
decl_stmt|;
block|}
end_block

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ARMExecutableWriter
operator|:
name|public
name|ExecutableWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|ARMExecutableWriter
argument_list|(
name|ARMLinkingContext
operator|&
name|context
argument_list|,
name|ARMTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
block|;
name|protected
operator|:
comment|// Add any runtime files and their atoms to the output
name|bool
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|void
name|addDefaultAtoms
argument_list|()
name|override
block|{
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|addDefaultAtoms
argument_list|()
block|;   }
comment|/// \brief Create symbol table.
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|createSymbolTable
argument_list|()
name|override
block|;
name|void
name|processUndefinedSymbol
argument_list|(
argument|StringRef symName
argument_list|,
argument|RuntimeFile<ELFT>&file
argument_list|)
specifier|const
name|override
block|;
comment|// Setup the ELF header.
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
name|override
block|;
name|private
operator|:
name|ARMLinkingContext
operator|&
name|_context
block|;
name|ARMTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_armLayout
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|ARMExecutableWriter
argument_list|(
name|ARMLinkingContext
operator|&
name|context
argument_list|,
name|ARMTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|layout
operator|)
operator|,
name|_context
argument_list|(
name|context
argument_list|)
operator|,
name|_armLayout
argument_list|(
argument|layout
argument_list|)
block|{}
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
return|return
name|true
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
comment|// Finalize the atom values that are part of the parent.
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|auto
name|gotAtomIter
operator|=
name|_armLayout
operator|.
name|findAbsoluteAtom
argument_list|(
name|gotSymbol
argument_list|)
block|;
if|if
condition|(
name|gotAtomIter
operator|!=
name|_armLayout
operator|.
name|absoluteAtoms
argument_list|()
operator|.
name|end
argument_list|()
condition|)
block|{
name|auto
operator|*
name|gotAtom
operator|=
operator|*
name|gotAtomIter
expr_stmt|;
if|if
condition|(
name|auto
name|gotpltSection
init|=
name|_armLayout
operator|.
name|findOutputSection
argument_list|(
literal|".got.plt"
argument_list|)
condition|)
name|gotAtom
operator|->
name|_virtualAddr
operator|=
name|gotpltSection
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|auto
name|gotSection
init|=
name|_armLayout
operator|.
name|findOutputSection
argument_list|(
literal|".got"
argument_list|)
condition|)
name|gotAtom
operator|->
name|_virtualAddr
operator|=
name|gotSection
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
else|else
name|gotAtom
operator|->
name|_virtualAddr
operator|=
literal|0
expr_stmt|;
block|}
comment|// TODO: resolve addresses of __exidx_start/_end atoms
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createSymbolTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|ARMSymbolTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|processUndefinedSymbol
argument_list|(
argument|StringRef symName
argument_list|,
argument|RuntimeFile<ELFT>&file
argument_list|)
specifier|const
block|{
if|if
condition|(
name|symName
operator|==
name|gotSymbol
condition|)
block|{
name|file
operator|.
name|addAbsoluteAtom
argument_list|(
name|gotSymbol
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|symName
operator|.
name|startswith
argument_list|(
literal|"__exidx"
argument_list|)
condition|)
block|{
name|file
operator|.
name|addAbsoluteAtom
argument_list|(
literal|"__exidx_start"
argument_list|)
expr_stmt|;
name|file
operator|.
name|addAbsoluteAtom
argument_list|(
literal|"__exidx_end"
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|error_code
name|ARMExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
block|{
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
condition|)
return|return
name|ec
return|;
comment|// Fixup entry point for Thumb code.
name|StringRef
name|entryName
operator|=
name|_context
operator|.
name|entrySymbolName
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|AtomLayout
modifier|*
name|al
init|=
name|_armLayout
operator|.
name|findAtomLayoutByName
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
specifier|const
specifier|auto
modifier|*
name|ea
init|=
name|dyn_cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|al
operator|->
name|_atom
operator|)
decl_stmt|;
if|if
condition|(
name|ea
operator|&&
name|ea
operator|->
name|codeModel
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|codeARMThumb
condition|)
name|this
operator|->
name|_elfHeader
operator|->
name|e_entry
argument_list|(
name|al
operator|->
name|_virtualAddr
operator||
literal|0x1
argument_list|)
expr_stmt|;
block|}
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_ARM_ARM_EXECUTABLE_WRITER_H
end_comment

end_unit

