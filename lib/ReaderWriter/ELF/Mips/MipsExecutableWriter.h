begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsExecutableWriter.h -------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_EXECUTABLE_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_EXECUTABLE_WRITER_H
end_define

begin_include
include|#
directive|include
file|"ExecutableWriter.h"
end_include

begin_include
include|#
directive|include
file|"MipsDynamicTable.h"
end_include

begin_include
include|#
directive|include
file|"MipsELFWriters.h"
end_include

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsExecutableWriter
operator|:
name|public
name|ExecutableWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsExecutableWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
block|;
name|protected
operator|:
name|void
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
name|override
block|;
comment|// Add any runtime files and their atoms to the output
name|bool
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|createSymbolTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|createDynamicTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|createDynamicSymbolTable
argument_list|()
name|override
block|;
name|private
operator|:
name|MipsELFWriter
operator|<
name|ELFT
operator|>
name|_writeHelper
block|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_mipsTargetLayout
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|MipsExecutableWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|(
name|ctx
operator|,
name|layout
operator|)
operator|,
name|_writeHelper
argument_list|(
name|ctx
argument_list|,
name|layout
argument_list|)
operator|,
name|_mipsTargetLayout
argument_list|(
argument|layout
argument_list|)
block|{}
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|error_code
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
block|{
name|std
operator|::
name|error_code
name|ec
operator|=
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
block|;
if|if
condition|(
name|ec
condition|)
return|return
name|ec
return|;
name|StringRef
name|entryName
operator|=
name|this
operator|->
name|_context
operator|.
name|entrySymbolName
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|AtomLayout
modifier|*
name|al
init|=
name|this
operator|->
name|_layout
operator|.
name|findAtomLayoutByName
argument_list|(
name|entryName
argument_list|)
condition|)
block|{
specifier|const
specifier|auto
modifier|*
name|ea
init|=
name|cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|al
operator|->
name|_atom
operator|)
decl_stmt|;
if|if
condition|(
name|ea
operator|->
name|codeModel
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|codeMipsMicro
operator|||
name|ea
operator|->
name|codeModel
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|codeMipsMicroPIC
condition|)
comment|// Adjust entry symbol value if this symbol is microMIPS encoded.
name|this
operator|->
name|_elfHeader
operator|->
name|e_entry
argument_list|(
name|al
operator|->
name|_virtualAddr
operator||
literal|1
argument_list|)
expr_stmt|;
block|}
name|_writeHelper
operator|.
name|setELFHeader
argument_list|(
operator|*
name|this
operator|->
name|_elfHeader
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
block|{
comment|// MIPS ABI requires to add to dynsym even undefined symbols
comment|// if they have a corresponding entries in a global part of GOT.
for|for
control|(
name|auto
name|sec
range|:
name|this
operator|->
name|_layout
operator|.
name|sections
argument_list|()
control|)
if|if
condition|(
name|auto
name|section
init|=
name|dyn_cast
operator|<
name|AtomSection
operator|<
name|ELFT
operator|>>
operator|(
name|sec
operator|)
condition|)
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|atom
range|:
name|section
operator|->
name|atoms
argument_list|()
control|)
block|{
if|if
condition|(
name|_writeHelper
operator|.
name|hasGlobalGOTEntry
argument_list|(
name|atom
operator|->
name|_atom
argument_list|)
condition|)
block|{
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|atom
operator|->
name|_atom
argument_list|,
name|section
operator|->
name|ordinal
argument_list|()
argument_list|,
name|atom
operator|->
name|_virtualAddr
argument_list|,
name|atom
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|DefinedAtom
modifier|*
name|da
init|=
name|dyn_cast
operator|<
specifier|const
name|DefinedAtom
operator|>
operator|(
name|atom
operator|->
name|_atom
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|da
condition|)
continue|continue;
if|if
condition|(
name|da
operator|->
name|dynamicExport
argument_list|()
operator|!=
name|DefinedAtom
operator|::
name|dynamicExportAlways
operator|&&
operator|!
name|this
operator|->
name|_context
operator|.
name|isDynamicallyExportedSymbol
argument_list|(
name|da
operator|->
name|name
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|this
operator|->
name|_context
operator|.
name|shouldExportDynamic
argument_list|()
operator|&&
name|da
operator|->
name|scope
argument_list|()
operator|==
name|Atom
operator|::
name|Scope
operator|::
name|scopeGlobal
operator|)
condition|)
continue|continue;
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|atom
operator|->
name|_atom
argument_list|,
name|section
operator|->
name|ordinal
argument_list|()
argument_list|,
name|atom
operator|->
name|_virtualAddr
argument_list|,
name|atom
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|const
name|UndefinedAtom
modifier|*
name|a
range|:
name|file
operator|.
name|undefined
argument_list|()
control|)
comment|// FIXME (simon): Consider to move this check to the
comment|// MipsELFUndefinedAtom class method. That allows to
comment|// handle more complex coditions in the future.
if|if
condition|(
name|_writeHelper
operator|.
name|hasGlobalGOTEntry
argument_list|(
name|a
argument_list|)
condition|)
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|a
argument_list|,
name|ELF
operator|::
name|SHN_UNDEF
argument_list|)
expr_stmt|;
comment|// Skip our immediate parent class method
comment|// ExecutableWriter<ELFT>::buildDynamicSymbolTable because we replaced it
comment|// with our own version. Call OutputELFWriter directly.
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|_writeHelper
operator|.
name|createRuntimeFile
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
comment|// Finalize the atom values that are part of the parent.
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|_writeHelper
operator|.
name|finalizeMipsRuntimeAtomValues
argument_list|()
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createSymbolTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsSymbolTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief create dynamic table
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDynamicTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsDynamicTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|,
name|_mipsTargetLayout
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief create dynamic symbol table
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|MipsExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDynamicSymbolTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsDynamicSymbolTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|,
name|_mipsTargetLayout
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

