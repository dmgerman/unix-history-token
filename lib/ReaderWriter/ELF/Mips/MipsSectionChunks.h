begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsSectionChunks.h ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_SECTION_CHUNKS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_SECTION_CHUNKS_H
end_define

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|class
name|MipsLinkingContext
decl_stmt|;
comment|/// \brief Handle Mips GOT section
name|template
operator|<
name|class
name|ELFType
operator|>
name|class
name|MipsGOTSection
operator|:
name|public
name|AtomSection
operator|<
name|ELFType
operator|>
block|{
name|public
operator|:
name|MipsGOTSection
argument_list|(
specifier|const
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|AtomSection
operator|<
name|ELFType
operator|>
operator|(
name|ctx
operator|,
literal|".got"
operator|,
name|DefinedAtom
operator|::
name|typeGOT
operator|,
name|DefinedAtom
operator|::
name|permRW_
operator|,
name|MipsTargetLayout
operator|<
name|ELFType
operator|>
operator|::
name|ORDER_GOT
operator|)
block|,
name|_hasNonLocal
argument_list|(
name|false
argument_list|)
block|,
name|_localCount
argument_list|(
literal|0
argument_list|)
block|{
name|this
operator|->
name|_flags
operator||=
name|SHF_MIPS_GPREL
block|;
name|this
operator|->
name|_alignment
operator|=
literal|4
block|;   }
comment|/// \brief Number of local GOT entries.
name|std
operator|::
name|size_t
name|getLocalCount
argument_list|()
specifier|const
block|{
return|return
name|_localCount
return|;
block|}
comment|/// \brief Number of global GOT entries.
name|std
operator|::
name|size_t
name|getGlobalCount
argument_list|()
specifier|const
block|{
return|return
name|_posMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \brief Does the atom have a global GOT entry?
name|bool
name|hasGlobalGOTEntry
argument_list|(
argument|const Atom *a
argument_list|)
specifier|const
block|{
return|return
name|_posMap
operator|.
name|count
argument_list|(
name|a
argument_list|)
operator|||
name|_tlsMap
operator|.
name|count
argument_list|(
name|a
argument_list|)
return|;
block|}
comment|/// \brief Compare two atoms accordingly theirs positions in the GOT.
name|bool
name|compare
argument_list|(
argument|const Atom *a
argument_list|,
argument|const Atom *b
argument_list|)
specifier|const
block|{
name|auto
name|ia
operator|=
name|_posMap
operator|.
name|find
argument_list|(
name|a
argument_list|)
block|;
name|auto
name|ib
operator|=
name|_posMap
operator|.
name|find
argument_list|(
name|b
argument_list|)
block|;
if|if
condition|(
name|ia
operator|!=
name|_posMap
operator|.
name|end
argument_list|()
operator|&&
name|ib
operator|!=
name|_posMap
operator|.
name|end
argument_list|()
condition|)
return|return
name|ia
operator|->
name|second
operator|<
name|ib
operator|->
name|second
return|;
return|return
name|ia
operator|==
name|_posMap
operator|.
name|end
argument_list|()
operator|&&
name|ib
operator|!=
name|_posMap
operator|.
name|end
argument_list|()
return|;
block|}
specifier|const
name|lld
operator|::
name|AtomLayout
operator|*
name|appendAtom
argument_list|(
argument|const Atom *atom
argument_list|)
name|override
block|{
specifier|const
name|DefinedAtom
operator|*
name|da
operator|=
name|dyn_cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|atom
operator|)
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|r
range|:
operator|*
name|da
control|)
block|{
if|if
condition|(
name|r
operator|->
name|kindNamespace
argument_list|()
operator|!=
name|lld
operator|::
name|Reference
operator|::
name|KindNamespace
operator|::
name|ELF
condition|)
continue|continue;
name|assert
argument_list|(
name|r
operator|->
name|kindArch
argument_list|()
operator|==
name|Reference
operator|::
name|KindArch
operator|::
name|Mips
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|r
operator|->
name|kindValue
argument_list|()
condition|)
block|{
case|case
name|LLD_R_MIPS_GLOBAL_GOT
case|:
name|_hasNonLocal
operator|=
name|true
expr_stmt|;
name|_posMap
index|[
name|r
operator|->
name|target
argument_list|()
index|]
operator|=
name|_posMap
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|AtomSection
operator|<
name|ELFType
operator|>
operator|::
name|appendAtom
argument_list|(
name|atom
argument_list|)
return|;
case|case
name|R_MIPS_TLS_TPREL32
case|:
case|case
name|R_MIPS_TLS_DTPREL32
case|:
case|case
name|R_MIPS_TLS_TPREL64
case|:
case|case
name|R_MIPS_TLS_DTPREL64
case|:
name|_hasNonLocal
operator|=
name|true
expr_stmt|;
name|_tlsMap
index|[
name|r
operator|->
name|target
argument_list|()
index|]
operator|=
name|_tlsMap
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|AtomSection
operator|<
name|ELFType
operator|>
operator|::
name|appendAtom
argument_list|(
name|atom
argument_list|)
return|;
case|case
name|R_MIPS_TLS_DTPMOD32
case|:
case|case
name|R_MIPS_TLS_DTPMOD64
case|:
name|_hasNonLocal
operator|=
name|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|_hasNonLocal
condition|)
operator|++
name|_localCount
expr_stmt|;
return|return
name|AtomSection
operator|<
name|ELFType
operator|>
operator|::
name|appendAtom
argument_list|(
name|atom
argument_list|)
return|;
block|}
name|private
label|:
comment|/// \brief True if the GOT contains non-local entries.
name|bool
name|_hasNonLocal
decl_stmt|;
comment|/// \brief Number of local GOT entries.
name|std
operator|::
name|size_t
name|_localCount
expr_stmt|;
comment|/// \brief Map TLS Atoms to their GOT entry index.
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Atom
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|_tlsMap
expr_stmt|;
comment|/// \brief Map Atoms to their GOT entry index.
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Atom
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|_posMap
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief Handle Mips PLT section
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFType
operator|>
name|class
name|MipsPLTSection
operator|:
name|public
name|AtomSection
operator|<
name|ELFType
operator|>
block|{
name|public
operator|:
name|MipsPLTSection
argument_list|(
specifier|const
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|AtomSection
operator|<
name|ELFType
operator|>
operator|(
name|ctx
operator|,
literal|".plt"
operator|,
name|DefinedAtom
operator|::
name|typeGOT
operator|,
name|DefinedAtom
operator|::
name|permR_X
operator|,
name|MipsTargetLayout
operator|<
name|ELFType
operator|>
operator|::
name|ORDER_PLT
operator|)
block|{}
specifier|const
name|AtomLayout
operator|*
name|findPLTLayout
argument_list|(
argument|const Atom *plt
argument_list|)
specifier|const
block|{
name|auto
name|it
operator|=
name|_pltLayoutMap
operator|.
name|find
argument_list|(
name|plt
argument_list|)
block|;
return|return
name|it
operator|!=
name|_pltLayoutMap
operator|.
name|end
argument_list|()
condition|?
name|it
operator|->
name|second
else|:
name|nullptr
return|;
block|}
specifier|const
name|lld
operator|::
name|AtomLayout
operator|*
name|appendAtom
argument_list|(
argument|const Atom *atom
argument_list|)
name|override
block|{
specifier|const
name|auto
operator|*
name|layout
operator|=
name|AtomSection
operator|<
name|ELFType
operator|>
operator|::
name|appendAtom
argument_list|(
name|atom
argument_list|)
block|;
specifier|const
name|DefinedAtom
operator|*
name|da
operator|=
name|cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|atom
operator|)
block|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|r
range|:
operator|*
name|da
control|)
block|{
if|if
condition|(
name|r
operator|->
name|kindNamespace
argument_list|()
operator|!=
name|lld
operator|::
name|Reference
operator|::
name|KindNamespace
operator|::
name|ELF
condition|)
continue|continue;
name|assert
argument_list|(
name|r
operator|->
name|kindArch
argument_list|()
operator|==
name|Reference
operator|::
name|KindArch
operator|::
name|Mips
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|->
name|kindValue
argument_list|()
operator|==
name|LLD_R_MIPS_STO_PLT
condition|)
block|{
name|_pltLayoutMap
index|[
name|r
operator|->
name|target
argument_list|()
index|]
operator|=
name|layout
expr_stmt|;
break|break;
block|}
end_expr_stmt

begin_expr_stmt
unit|}      return
name|layout
expr_stmt|;
end_expr_stmt

begin_comment
unit|}  private:
comment|/// \brief Map PLT Atoms to their layouts.
end_comment

begin_expr_stmt
name|std
operator|::
name|unordered_map
operator|<
specifier|const
name|Atom
operator|*
operator|,
specifier|const
name|AtomLayout
operator|*
operator|>
name|_pltLayoutMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsRelocationTable
operator|:
name|public
name|RelocationTable
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|true
operator|>
name|Elf_Rela
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|_isMips64EL
init|=
name|ELFT
operator|::
name|Is64Bits
operator|&&
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|llvm
operator|::
name|support
operator|::
name|little
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|MipsRelocationTable
argument_list|(
argument|const ELFLinkingContext&context
argument_list|,
argument|StringRef str
argument_list|,
argument|int32_t order
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|RelocationTable
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|str
operator|,
name|order
operator|)
block|{}
name|protected
operator|:
name|void
name|writeRela
argument_list|(
argument|ELFWriter *writer
argument_list|,
argument|Elf_Rela&r
argument_list|,
argument|const DefinedAtom&atom
argument_list|,
argument|const Reference&ref
argument_list|)
name|override
block|{
name|uint32_t
name|rType
operator|=
name|ref
operator|.
name|kindValue
argument_list|()
operator||
operator|(
name|ref
operator|.
name|tag
argument_list|()
operator|<<
literal|8
operator|)
block|;
name|r
operator|.
name|setSymbolAndType
argument_list|(
name|this
operator|->
name|getSymbolIndex
argument_list|(
name|ref
operator|.
name|target
argument_list|()
argument_list|)
argument_list|,
name|rType
argument_list|,
name|_isMips64EL
argument_list|)
block|;
name|r
operator|.
name|r_offset
operator|=
name|writer
operator|->
name|addressOfAtom
argument_list|(
operator|&
name|atom
argument_list|)
operator|+
name|ref
operator|.
name|offsetInAtom
argument_list|()
block|;
comment|// The addend is used only by relative relocations
if|if
condition|(
name|this
operator|->
name|_context
operator|.
name|isRelativeReloc
argument_list|(
name|ref
argument_list|)
condition|)
name|r
operator|.
name|r_addend
operator|=
name|writer
operator|->
name|addressOfAtom
argument_list|(
name|ref
operator|.
name|target
argument_list|()
argument_list|)
operator|+
name|ref
operator|.
name|addend
argument_list|()
expr_stmt|;
else|else
name|r
operator|.
name|r_addend
operator|=
literal|0
expr_stmt|;
block|}
end_expr_stmt

begin_function
name|void
name|writeRel
parameter_list|(
name|ELFWriter
modifier|*
name|writer
parameter_list|,
name|Elf_Rel
modifier|&
name|r
parameter_list|,
specifier|const
name|DefinedAtom
modifier|&
name|atom
parameter_list|,
specifier|const
name|Reference
modifier|&
name|ref
parameter_list|)
function|override
block|{
name|uint32_t
name|rType
init|=
name|ref
operator|.
name|kindValue
argument_list|()
operator||
operator|(
name|ref
operator|.
name|tag
argument_list|()
operator|<<
literal|8
operator|)
decl_stmt|;
name|r
operator|.
name|setSymbolAndType
argument_list|(
name|this
operator|->
name|getSymbolIndex
argument_list|(
name|ref
operator|.
name|target
argument_list|()
argument_list|)
argument_list|,
name|rType
argument_list|,
name|_isMips64EL
argument_list|)
expr_stmt|;
name|r
operator|.
name|r_offset
operator|=
name|writer
operator|->
name|addressOfAtom
argument_list|(
operator|&
name|atom
argument_list|)
operator|+
name|ref
operator|.
name|offsetInAtom
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
unit|};  }
comment|// elf
end_comment

begin_comment
unit|}
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

