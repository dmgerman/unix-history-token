begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsSectionChunks.h ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_SECTION_CHUNKS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_SECTION_CHUNKS_H
end_define

begin_include
include|#
directive|include
file|"SectionChunks.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|class
name|MipsLinkingContext
decl_stmt|;
comment|/// \brief Handle Mips .reginfo section
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsReginfoSection
operator|:
name|public
name|Section
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
name|MipsReginfoSection
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|targetLayout
argument_list|,
specifier|const
name|Elf_Mips_RegInfo
operator|&
name|reginfo
argument_list|)
expr_stmt|;
name|StringRef
name|segmentKindToStr
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"REGINFO"
return|;
block|}
name|bool
name|hasOutputSegment
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|private
label|:
name|Elf_Mips_RegInfo
name|_reginfo
decl_stmt|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
expr_stmt|;
block|}
empty_stmt|;
comment|/// \brief Handle .MIPS.options section
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsOptionsSection
operator|:
name|public
name|Section
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_Options
operator|<
name|ELFT
operator|>
name|Elf_Mips_Options
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
name|MipsOptionsSection
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|targetLayout
argument_list|,
specifier|const
name|Elf_Mips_RegInfo
operator|&
name|reginfo
argument_list|)
expr_stmt|;
name|bool
name|hasOutputSegment
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|private
label|:
name|Elf_Mips_Options
name|_header
decl_stmt|;
name|Elf_Mips_RegInfo
name|_reginfo
decl_stmt|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief Handle .MIPS.abiflags section
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsAbiFlagsSection
operator|:
name|public
name|Section
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_ABIFlags
operator|<
name|ELFT
operator|>
name|Elf_Mips_ABIFlags
expr_stmt|;
name|MipsAbiFlagsSection
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|targetLayout
argument_list|,
specifier|const
name|Elf_Mips_ABIFlags
operator|&
name|abiFlags
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|hasOutputSegment
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|Elf_Mips_ABIFlags
name|_abiFlags
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|/// \brief Handle Mips GOT section
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsGOTSection
operator|:
name|public
name|AtomSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsGOTSection
argument_list|(
specifier|const
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
block|;
comment|/// \brief Number of local GOT entries.
name|std
operator|::
name|size_t
name|getLocalCount
argument_list|()
specifier|const
block|{
return|return
name|_localCount
return|;
block|}
comment|/// \brief Number of global GOT entries.
name|std
operator|::
name|size_t
name|getGlobalCount
argument_list|()
specifier|const
block|{
return|return
name|_posMap
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Does the atom have a global GOT entry?
end_comment

begin_decl_stmt
name|bool
name|hasGlobalGOTEntry
argument_list|(
specifier|const
name|Atom
operator|*
name|a
argument_list|)
decl|const
block|{
return|return
name|_posMap
operator|.
name|count
argument_list|(
name|a
argument_list|)
operator|||
name|_tlsMap
operator|.
name|count
argument_list|(
name|a
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Compare two atoms accordingly theirs positions in the GOT.
end_comment

begin_decl_stmt
name|bool
name|compare
argument_list|(
specifier|const
name|Atom
operator|*
name|a
argument_list|,
specifier|const
name|Atom
operator|*
name|b
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|AtomLayout
modifier|*
name|appendAtom
argument_list|(
specifier|const
name|Atom
operator|*
name|atom
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_comment
comment|/// \brief True if the GOT contains non-local entries.
end_comment

begin_decl_stmt
name|bool
name|_hasNonLocal
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// \brief Number of local GOT entries.
end_comment

begin_expr_stmt
name|std
operator|::
name|size_t
name|_localCount
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Map TLS Atoms to their GOT entry index.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Atom
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|_tlsMap
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Map Atoms to their GOT entry index.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Atom
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|_posMap
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|/// \brief Handle Mips PLT section
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsPLTSection
operator|:
name|public
name|AtomSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsPLTSection
argument_list|(
specifier|const
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
block|;
specifier|const
name|AtomLayout
operator|*
name|findPLTLayout
argument_list|(
argument|const Atom *plt
argument_list|)
specifier|const
block|;
specifier|const
name|AtomLayout
operator|*
name|appendAtom
argument_list|(
argument|const Atom *atom
argument_list|)
name|override
block|;
name|private
operator|:
comment|/// \brief Map PLT Atoms to their layouts.
name|std
operator|::
name|unordered_map
operator|<
specifier|const
name|Atom
operator|*
block|,
specifier|const
name|AtomLayout
operator|*
operator|>
name|_pltLayoutMap
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsRelocationTable
operator|:
name|public
name|RelocationTable
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|true
operator|>
name|Elf_Rela
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_macro
name|MipsRelocationTable
argument_list|(
argument|const ELFLinkingContext&ctx
argument_list|,
argument|StringRef str
argument_list|,
argument|int32_t order
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|void
name|writeRela
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|Elf_Rela
operator|&
name|r
argument_list|,
specifier|const
name|DefinedAtom
operator|&
name|atom
argument_list|,
specifier|const
name|Reference
operator|&
name|ref
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|writeRel
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|Elf_Rel
operator|&
name|r
argument_list|,
specifier|const
name|DefinedAtom
operator|&
name|atom
argument_list|,
specifier|const
name|Reference
operator|&
name|ref
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// elf
end_comment

begin_comment
unit|}
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

