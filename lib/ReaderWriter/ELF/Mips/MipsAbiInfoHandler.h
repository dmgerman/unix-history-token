begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/MipsAbiInfoHandler.h --------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ABI_INFO_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ABI_INFO_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|<system_error>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|enum
name|class
name|MipsAbi
block|{
name|O32
operator|,
name|N32
operator|,
name|N64
block|}
empty_stmt|;
struct|struct
name|MipsAbiFlags
block|{
name|unsigned
name|_isa
init|=
literal|0
decl_stmt|;
name|unsigned
name|_fpAbi
init|=
literal|0
decl_stmt|;
name|unsigned
name|_ases
init|=
literal|0
decl_stmt|;
name|unsigned
name|_flags1
init|=
literal|0
decl_stmt|;
name|unsigned
name|_gprSize
init|=
literal|0
decl_stmt|;
name|unsigned
name|_cpr1Size
init|=
literal|0
decl_stmt|;
name|unsigned
name|_cpr2Size
init|=
literal|0
decl_stmt|;
name|unsigned
name|_abi
init|=
literal|0
decl_stmt|;
name|bool
name|_isPic
init|=
name|false
decl_stmt|;
name|bool
name|_isCPic
init|=
name|false
decl_stmt|;
name|bool
name|_isNoReorder
init|=
name|false
decl_stmt|;
name|bool
name|_is32BitMode
init|=
name|false
decl_stmt|;
name|bool
name|_isNan2008
init|=
name|false
decl_stmt|;
block|}
struct|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsAbiInfoHandler
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_ABIFlags
operator|<
name|ELFT
operator|>
name|Elf_Mips_ABIFlags
expr_stmt|;
name|MipsAbiInfoHandler
argument_list|()
operator|=
expr|default
expr_stmt|;
name|bool
name|hasMipsAbiSection
argument_list|()
specifier|const
block|{
return|return
name|_hasAbiSection
return|;
block|}
name|bool
name|isMicroMips
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMipsR6
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isFp64
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isCPicOnly
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|getFlags
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|Elf_Mips_RegInfo
operator|>
name|getRegistersMask
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|Elf_Mips_ABIFlags
operator|>
name|getAbiFlags
argument_list|()
specifier|const
expr_stmt|;
name|MipsAbi
name|getAbi
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Merge saved ELF header flags and the new set of flags.
name|std
operator|::
name|error_code
name|mergeFlags
argument_list|(
argument|uint32_t newFlags
argument_list|,
argument|const Elf_Mips_ABIFlags *newAbi
argument_list|)
expr_stmt|;
comment|/// \brief Merge saved and new sets of registers usage masks.
name|void
name|mergeRegistersMask
parameter_list|(
specifier|const
name|Elf_Mips_RegInfo
modifier|&
name|info
parameter_list|)
function_decl|;
name|private
label|:
name|mutable
name|std
operator|::
name|mutex
name|_mutex
expr_stmt|;
name|bool
name|_hasAbiSection
init|=
name|false
decl_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|MipsAbiFlags
operator|>
name|_abiFlags
expr_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|Elf_Mips_RegInfo
operator|>
name|_regMask
expr_stmt|;
name|llvm
operator|::
name|ErrorOr
operator|<
name|MipsAbiFlags
operator|>
name|createAbiFlags
argument_list|(
argument|uint32_t flags
argument_list|,
argument|const Elf_Mips_ABIFlags *sec
argument_list|)
expr_stmt|;
specifier|static
name|llvm
operator|::
name|ErrorOr
operator|<
name|MipsAbiFlags
operator|>
name|createAbiFromHeaderFlags
argument_list|(
argument|uint32_t flags
argument_list|)
expr_stmt|;
specifier|static
name|llvm
operator|::
name|ErrorOr
operator|<
name|MipsAbiFlags
operator|>
name|createAbiFromSection
argument_list|(
specifier|const
name|Elf_Mips_ABIFlags
operator|&
name|sec
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

