begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsTargetHandler.h ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_TARGET_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_TARGET_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"MipsAbiInfoHandler.h"
end_include

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"MipsTargetLayout.h"
end_include

begin_include
include|#
directive|include
file|"TargetHandler.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|MipsBaseTargetHandler
range|:
name|public
name|TargetHandler
block|{
name|public
operator|:
name|virtual
name|MipsAbi
name|getAbi
argument_list|()
specifier|const
operator|=
literal|0
block|; }
decl_stmt|;
comment|/// \brief TargetHandler for Mips
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsTargetHandler
name|final
operator|:
name|public
name|MipsBaseTargetHandler
block|{
name|public
operator|:
name|MipsTargetHandler
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
block|;
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
operator|&
name|getAbiInfoHandler
argument_list|()
block|{
return|return
name|_abiInfoHandler
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getObjReader
argument_list|()
name|override
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getDSOReader
argument_list|()
name|override
block|;
specifier|const
name|TargetRelocationHandler
operator|&
name|getRelocationHandler
argument_list|()
specifier|const
name|override
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|getWriter
argument_list|()
name|override
block|;
name|MipsAbi
name|getAbi
argument_list|()
specifier|const
name|override
block|;
name|private
operator|:
name|MipsLinkingContext
operator|&
name|_ctx
block|;
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
name|_abiInfoHandler
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|MipsTargetLayout
operator|<
name|ELFT
operator|>>
name|_targetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|TargetRelocationHandler
operator|>
name|_relocationHandler
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsSymbolTable
operator|:
name|public
name|SymbolTable
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Sym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Sym
expr_stmt|;
name|MipsSymbolTable
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|)
expr_stmt|;
name|void
name|addDefinedAtom
argument_list|(
name|Elf_Sym
operator|&
name|sym
argument_list|,
specifier|const
name|DefinedAtom
operator|*
name|da
argument_list|,
name|int64_t
name|addr
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|(
name|bool
name|sort
argument_list|)
name|override
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsDynamicSymbolTable
operator|:
name|public
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsDynamicSymbolTable
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
block|;
name|void
name|sortSymbols
argument_list|()
name|override
block|;
name|void
name|finalize
argument_list|()
name|override
block|;
name|private
operator|:
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

