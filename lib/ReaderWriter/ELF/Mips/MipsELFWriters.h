begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsELFWriters.h -------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_WRITERS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_WRITERS_H
end_define

begin_include
include|#
directive|include
file|"DynamicLibraryWriter.h"
end_include

begin_include
include|#
directive|include
file|"ExecutableWriter.h"
end_include

begin_include
include|#
directive|include
file|"MipsAbiInfoHandler.h"
end_include

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsELFWriter
block|{
name|public
operator|:
name|MipsELFWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|targetLayout
argument_list|,
specifier|const
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
operator|&
name|abiInfo
argument_list|)
block|;
name|void
name|setELFHeader
argument_list|(
name|ELFHeader
operator|<
name|ELFT
operator|>
operator|&
name|elfHeader
argument_list|)
block|;
name|void
name|finalizeMipsRuntimeAtomValues
argument_list|()
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeFile
operator|<
name|ELFT
operator|>>
name|createRuntimeFile
argument_list|()
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|createOptionsSection
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|)
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|createAbiFlagsSection
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|)
block|;
name|private
operator|:
name|MipsLinkingContext
operator|&
name|_ctx
block|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
block|;
specifier|const
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
operator|&
name|_abiInfo
block|;
name|void
name|setAtomValue
argument_list|(
argument|StringRef name
argument_list|,
argument|uint64_t value
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsDynamicLibraryWriter
operator|:
name|public
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsDynamicLibraryWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
specifier|const
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
operator|&
name|abiInfo
argument_list|)
block|;
name|protected
operator|:
comment|// Add any runtime files and their atoms to the output
name|void
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|void
name|createDefaultSections
argument_list|()
name|override
block|;
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|createSymbolTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|createDynamicTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|createDynamicSymbolTable
argument_list|()
name|override
block|;
name|private
operator|:
name|MipsELFWriter
operator|<
name|ELFT
operator|>
name|_writeHelper
block|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|_reginfo
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|_abiFlags
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsExecutableWriter
operator|:
name|public
name|ExecutableWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsExecutableWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
specifier|const
name|MipsAbiInfoHandler
operator|<
name|ELFT
operator|>
operator|&
name|abiInfo
argument_list|)
block|;
name|protected
operator|:
name|void
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
name|override
block|;
comment|// Add any runtime files and their atoms to the output
name|void
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|void
name|createDefaultSections
argument_list|()
name|override
block|;
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|createSymbolTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|createDynamicTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|createDynamicSymbolTable
argument_list|()
name|override
block|;
name|private
operator|:
name|MipsELFWriter
operator|<
name|ELFT
operator|>
name|_writeHelper
block|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|_reginfo
block|;
name|unique_bump_ptr
operator|<
name|Section
operator|<
name|ELFT
operator|>>
name|_abiFlags
block|; }
expr_stmt|;
block|}
comment|// elf
block|}
end_decl_stmt

begin_comment
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

