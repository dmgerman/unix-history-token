begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsELFWriters.h -------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_WRITERS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_WRITERS_H
end_define

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"OutputELFWriter.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsRuntimeFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsELFWriter
block|{
name|public
operator|:
name|MipsELFWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|targetLayout
argument_list|)
operator|:
name|_ctx
argument_list|(
name|ctx
argument_list|)
block|,
name|_targetLayout
argument_list|(
argument|targetLayout
argument_list|)
block|{}
name|void
name|setELFHeader
argument_list|(
argument|ELFHeader<ELFT>&elfHeader
argument_list|)
block|{
name|elfHeader
operator|.
name|e_version
argument_list|(
literal|1
argument_list|)
block|;
name|elfHeader
operator|.
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_VERSION
argument_list|,
name|llvm
operator|::
name|ELF
operator|::
name|EV_CURRENT
argument_list|)
block|;
name|elfHeader
operator|.
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_OSABI
argument_list|,
name|llvm
operator|::
name|ELF
operator|::
name|ELFOSABI_NONE
argument_list|)
block|;
if|if
condition|(
name|_targetLayout
operator|.
name|findOutputSection
argument_list|(
literal|".got.plt"
argument_list|)
condition|)
name|elfHeader
operator|.
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_ABIVERSION
argument_list|,
literal|1
argument_list|)
expr_stmt|;
else|else
name|elfHeader
operator|.
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_ABIVERSION
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|elfHeader
operator|.
name|e_flags
argument_list|(
name|_ctx
operator|.
name|getMergedELFFlags
argument_list|()
argument_list|)
block|;   }
name|void
name|finalizeMipsRuntimeAtomValues
argument_list|()
block|{
if|if
condition|(
operator|!
name|_ctx
operator|.
name|isDynamic
argument_list|()
condition|)
return|return;
name|auto
name|gotSection
operator|=
name|_targetLayout
operator|.
name|findOutputSection
argument_list|(
literal|".got"
argument_list|)
expr_stmt|;
name|auto
name|got
init|=
name|gotSection
condition|?
name|gotSection
operator|->
name|virtualAddr
argument_list|()
else|:
literal|0
decl_stmt|;
name|auto
name|gp
init|=
name|gotSection
condition|?
name|got
operator|+
name|_targetLayout
operator|.
name|getGPOffset
argument_list|()
else|:
literal|0
decl_stmt|;
name|setAtomValue
argument_list|(
literal|"_GLOBAL_OFFSET_TABLE_"
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|setAtomValue
argument_list|(
literal|"_gp"
argument_list|,
name|gp
argument_list|)
expr_stmt|;
name|setAtomValue
argument_list|(
literal|"_gp_disp"
argument_list|,
name|gp
argument_list|)
expr_stmt|;
name|setAtomValue
argument_list|(
literal|"__gnu_local_gp"
argument_list|,
name|gp
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasGlobalGOTEntry
argument_list|(
specifier|const
name|Atom
operator|*
name|a
argument_list|)
decl|const
block|{
return|return
name|_targetLayout
operator|.
name|getGOTSection
argument_list|()
operator|.
name|hasGlobalGOTEntry
argument_list|(
name|a
argument_list|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|MipsRuntimeFile
operator|<
name|ELFT
operator|>>
name|createRuntimeFile
argument_list|()
block|{
name|auto
name|file
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|MipsRuntimeFile
operator|<
name|ELFT
operator|>>
operator|(
name|_ctx
operator|)
block|;
if|if
condition|(
name|_ctx
operator|.
name|isDynamic
argument_list|()
condition|)
block|{
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_GLOBAL_OFFSET_TABLE_"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_gp"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_gp_disp"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__gnu_local_gp"
argument_list|)
expr_stmt|;
block|}
return|return
name|file
return|;
block|}
name|private
label|:
name|MipsLinkingContext
modifier|&
name|_ctx
decl_stmt|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
expr_stmt|;
name|void
name|setAtomValue
parameter_list|(
name|StringRef
name|name
parameter_list|,
name|uint64_t
name|value
parameter_list|)
block|{
name|auto
name|atom
init|=
name|_targetLayout
operator|.
name|findAbsoluteAtom
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|atom
operator|!=
name|_targetLayout
operator|.
name|absoluteAtoms
argument_list|()
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|*
name|atom
operator|)
operator|->
name|_virtualAddr
operator|=
name|value
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// elf
end_comment

begin_comment
unit|}
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

