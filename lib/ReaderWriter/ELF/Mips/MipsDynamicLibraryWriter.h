begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsDynamicLibraryWriter.h ---------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_DYNAMIC_LIBRARY_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_DYNAMIC_LIBRARY_WRITER_H
end_define

begin_include
include|#
directive|include
file|"DynamicLibraryWriter.h"
end_include

begin_include
include|#
directive|include
file|"MipsDynamicTable.h"
end_include

begin_include
include|#
directive|include
file|"MipsELFWriters.h"
end_include

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsSymbolTable
expr_stmt|;
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsDynamicSymbolTable
expr_stmt|;
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsDynamicLibraryWriter
operator|:
name|public
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsDynamicLibraryWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
block|;
name|protected
operator|:
comment|// Add any runtime files and their atoms to the output
name|bool
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
name|override
block|{
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
block|;
name|_writeHelper
operator|.
name|setELFHeader
argument_list|(
operator|*
name|this
operator|->
name|_elfHeader
argument_list|)
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|createSymbolTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|createDynamicTable
argument_list|()
name|override
block|;
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|createDynamicSymbolTable
argument_list|()
name|override
block|;
name|private
operator|:
name|MipsELFWriter
operator|<
name|ELFT
operator|>
name|_writeHelper
block|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_mipsTargetLayout
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|MipsDynamicLibraryWriter
argument_list|(
name|MipsLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|(
name|ctx
operator|,
name|layout
operator|)
operator|,
name|_writeHelper
argument_list|(
name|ctx
argument_list|,
name|layout
argument_list|)
operator|,
name|_mipsTargetLayout
argument_list|(
argument|layout
argument_list|)
block|{}
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|_writeHelper
operator|.
name|createRuntimeFile
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|true
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
comment|// Finalize the atom values that are part of the parent.
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|_writeHelper
operator|.
name|finalizeMipsRuntimeAtomValues
argument_list|()
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createSymbolTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|SymbolTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsSymbolTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|)
operator|)
return|;
block|}
comment|/// \brief create dynamic table
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDynamicTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|DynamicTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsDynamicTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|,
name|_mipsTargetLayout
operator|)
operator|)
return|;
block|}
comment|/// \brief create dynamic symbol table
name|template
operator|<
name|class
name|ELFT
operator|>
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
name|MipsDynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDynamicSymbolTable
argument_list|()
block|{
return|return
name|unique_bump_ptr
operator|<
name|DynamicSymbolTable
operator|<
name|ELFT
operator|>>
operator|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|MipsDynamicSymbolTable
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_context
operator|,
name|_mipsTargetLayout
operator|)
operator|)
return|;
block|}
block|}
comment|// namespace elf
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

