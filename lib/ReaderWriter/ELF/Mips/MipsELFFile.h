begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/MipsELFFile.h ---------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_ELF_FILE_H
end_define

begin_include
include|#
directive|include
file|"ELFReader.h"
end_include

begin_include
include|#
directive|include
file|"MipsLinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"MipsRelocationHandler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Elf_RegInfo
expr_stmt|;
name|template
operator|<
name|llvm
operator|::
name|support
operator|::
name|endianness
name|TargetEndianness
operator|,
name|std
operator|::
name|size_t
name|MaxAlign
operator|>
expr|struct
name|Elf_RegInfo
operator|<
name|ELFType
operator|<
name|TargetEndianness
operator|,
name|MaxAlign
operator|,
name|false
operator|>>
block|{
name|LLVM_ELF_IMPORT_TYPES
argument_list|(
argument|TargetEndianness
argument_list|,
argument|MaxAlign
argument_list|,
argument|false
argument_list|)
name|Elf_Word
name|ri_gprmask
block|;
comment|// bit-mask of used general registers
name|Elf_Word
name|ri_cprmask
index|[
literal|4
index|]
block|;
comment|// bit-mask of used co-processor registers
name|Elf_Addr
name|ri_gp_value
block|;
comment|// gp register value
block|}
expr_stmt|;
name|template
operator|<
name|llvm
operator|::
name|support
operator|::
name|endianness
name|TargetEndianness
operator|,
name|std
operator|::
name|size_t
name|MaxAlign
operator|>
expr|struct
name|Elf_RegInfo
operator|<
name|ELFType
operator|<
name|TargetEndianness
operator|,
name|MaxAlign
operator|,
name|true
operator|>>
block|{
name|LLVM_ELF_IMPORT_TYPES
argument_list|(
argument|TargetEndianness
argument_list|,
argument|MaxAlign
argument_list|,
argument|true
argument_list|)
name|Elf_Word
name|ri_gprmask
block|;
comment|// bit-mask of used general registers
name|Elf_Word
name|ri_pad
block|;
comment|// unused padding field
name|Elf_Word
name|ri_cprmask
index|[
literal|4
index|]
block|;
comment|// bit-mask of used co-processor registers
name|Elf_Addr
name|ri_gp_value
block|;
comment|// gp register value
block|}
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Elf_Mips_Options
block|{
name|LLVM_ELF_IMPORT_TYPES
argument_list|(
argument|ELFT::TargetEndianness
argument_list|,
argument|ELFT::MaxAlignment
argument_list|,
argument|ELFT::Is64Bits
argument_list|)
name|uint8_t
name|kind
block|;
comment|// Determines interpretation of variable part of descriptor
name|uint8_t
name|size
block|;
comment|// Byte size of descriptor, including this header
name|Elf_Half
name|section
block|;
comment|// Section header index of section affected,
comment|// or 0 for global options
name|Elf_Word
name|info
block|;
comment|// Kind-specific information
block|}
expr_stmt|;
block|}
comment|// end namespace object.
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm.
end_comment

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsELFFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsELFDefinedAtom
operator|:
name|public
name|ELFDefinedAtom
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Sym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Sym
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
name|public
label|:
name|MipsELFDefinedAtom
argument_list|(
argument|const MipsELFFile<ELFT>&file
argument_list|,
argument|StringRef symbolName
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|const Elf_Sym *symbol
argument_list|,
argument|const Elf_Shdr *section
argument_list|,
argument|ArrayRef<uint8_t> contentData
argument_list|,
argument|unsigned int referenceStart
argument_list|,
argument|unsigned int referenceEnd
argument_list|,
argument|std::vector<ELFReference<ELFT> *>&referenceList
argument_list|)
block|:
name|ELFDefinedAtom
operator|<
name|ELFT
operator|>
operator|(
name|file
operator|,
name|symbolName
operator|,
name|sectionName
operator|,
name|symbol
operator|,
name|section
operator|,
name|contentData
operator|,
name|referenceStart
operator|,
name|referenceEnd
operator|,
name|referenceList
operator|)
block|{}
specifier|const
name|MipsELFFile
operator|<
name|ELFT
operator|>
operator|&
name|file
argument_list|()
specifier|const
name|override
block|{
return|return
name|static_cast
operator|<
specifier|const
name|MipsELFFile
operator|<
name|ELFT
operator|>
operator|&
operator|>
operator|(
name|this
operator|->
name|_owningFile
operator|)
return|;
block|}
name|DefinedAtom
operator|::
name|CodeModel
name|codeModel
argument_list|()
specifier|const
name|override
block|{
switch|switch
condition|(
name|this
operator|->
name|_symbol
operator|->
name|st_other
operator|&
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_MIPS16
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_MIPS16
case|:
return|return
name|DefinedAtom
operator|::
name|codeMips16
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_PIC
case|:
return|return
name|DefinedAtom
operator|::
name|codeMipsPIC
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_MICROMIPS
case|:
return|return
name|DefinedAtom
operator|::
name|codeMipsMicro
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_MICROMIPS
operator||
name|llvm
operator|::
name|ELF
operator|::
name|STO_MIPS_PIC
case|:
return|return
name|DefinedAtom
operator|::
name|codeMipsMicroPIC
return|;
default|default:
return|return
name|DefinedAtom
operator|::
name|codeNA
return|;
block|}
block|}
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsELFReference
operator|:
name|public
name|ELFReference
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|true
operator|>
name|Elf_Rela
expr_stmt|;
specifier|static
specifier|const
name|bool
name|_isMips64EL
init|=
name|ELFT
operator|::
name|Is64Bits
operator|&&
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|llvm
operator|::
name|support
operator|::
name|little
decl_stmt|;
name|public
label|:
name|MipsELFReference
argument_list|(
argument|uint64_t symValue
argument_list|,
argument|const Elf_Rela&rel
argument_list|)
block|:
name|ELFReference
operator|<
name|ELFT
operator|>
operator|(
operator|&
name|rel
operator|,
name|rel
operator|.
name|r_offset
operator|-
name|symValue
operator|,
name|Reference
operator|::
name|KindArch
operator|::
name|Mips
operator|,
name|rel
operator|.
name|getType
argument_list|(
name|_isMips64EL
argument_list|)
operator|&
literal|0xff
operator|,
name|rel
operator|.
name|getSymbol
argument_list|(
name|_isMips64EL
argument_list|)
operator|)
operator|,
name|_tag
argument_list|(
argument|uint32_t(rel.getType(_isMips64EL))>>
literal|8
argument_list|)
block|{}
name|MipsELFReference
argument_list|(
argument|uint64_t symValue
argument_list|,
argument|const Elf_Rel&rel
argument_list|)
operator|:
name|ELFReference
operator|<
name|ELFT
operator|>
operator|(
name|rel
operator|.
name|r_offset
operator|-
name|symValue
operator|,
name|Reference
operator|::
name|KindArch
operator|::
name|Mips
operator|,
name|rel
operator|.
name|getType
argument_list|(
name|_isMips64EL
argument_list|)
operator|&
literal|0xff
operator|,
name|rel
operator|.
name|getSymbol
argument_list|(
name|_isMips64EL
argument_list|)
operator|)
operator|,
name|_tag
argument_list|(
argument|uint32_t(rel.getType(_isMips64EL))>>
literal|8
argument_list|)
block|{}
name|uint32_t
name|tag
argument_list|()
specifier|const
name|override
block|{
return|return
name|_tag
return|;
block|}
name|void
name|setTag
parameter_list|(
name|uint32_t
name|tag
parameter_list|)
block|{
name|_tag
operator|=
name|tag
expr_stmt|;
block|}
name|private
label|:
name|uint32_t
name|_tag
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsELFFile
operator|:
name|public
name|ELFFile
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsELFFile
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|mb
argument_list|,
name|MipsLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|ELFFile
operator|<
name|ELFT
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|mb
argument_list|)
operator|,
name|ctx
operator|)
block|{}
specifier|static
name|ErrorOr
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|MipsELFFile
operator|>>
name|create
argument_list|(
argument|std::unique_ptr<MemoryBuffer> mb
argument_list|,
argument|MipsLinkingContext&ctx
argument_list|)
block|{
return|return
name|std
operator|::
name|unique_ptr
operator|<
name|MipsELFFile
operator|<
name|ELFT
operator|>>
operator|(
name|new
name|MipsELFFile
operator|<
name|ELFT
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|mb
argument_list|)
operator|,
name|ctx
operator|)
operator|)
return|;
block|}
name|bool
name|isPIC
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_objFile
operator|->
name|getHeader
argument_list|()
operator|->
name|e_flags
operator|&
name|llvm
operator|::
name|ELF
operator|::
name|EF_MIPS_PIC
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief gp register value stored in the .reginfo section.
end_comment

begin_expr_stmt
name|int64_t
name|getGP0
argument_list|()
specifier|const
block|{
return|return
name|_gp0
operator|?
operator|*
name|_gp0
operator|:
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief .tdata section address plus fixed offset.
end_comment

begin_expr_stmt
name|uint64_t
name|getTPOffset
argument_list|()
specifier|const
block|{
return|return
operator|*
name|_tpOff
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint64_t
name|getDTPOffset
argument_list|()
specifier|const
block|{
return|return
operator|*
name|_dtpOff
return|;
block|}
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|error_code
name|doParse
argument_list|()
name|override
block|{
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|doParse
argument_list|()
condition|)
return|return
name|ec
return|;
end_expr_stmt

begin_comment
comment|// Retrieve some auxiliary data like GP value, TLS section address etc
end_comment

begin_comment
comment|// from the object file.
end_comment

begin_return
return|return
name|readAuxData
argument_list|()
return|;
end_return

begin_typedef
unit|}  private:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Sym_Impl
operator|<
name|ELFT
operator|>
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Rel_Impl
operator|<
name|ELFT
operator|,
name|false
operator|>
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rel_Iter
name|Elf_Rel_Iter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|llvm
operator|::
name|object
operator|::
name|ELFFile
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Rela_Iter
name|Elf_Rela_Iter
expr_stmt|;
end_typedef

begin_enum
enum|enum
block|{
name|TP_OFFSET
init|=
literal|0x7000
block|,
name|DTP_OFFSET
init|=
literal|0x8000
block|}
enum|;
end_enum

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|_isMips64EL
init|=
name|ELFT
operator|::
name|Is64Bits
operator|&&
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|llvm
operator|::
name|support
operator|::
name|little
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|Optional
operator|<
name|int64_t
operator|>
name|_gp0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|Optional
operator|<
name|uint64_t
operator|>
name|_tpOff
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|Optional
operator|<
name|uint64_t
operator|>
name|_dtpOff
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ErrorOr
operator|<
name|ELFDefinedAtom
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|handleDefinedSymbol
argument_list|(
argument|StringRef symName
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|const Elf_Sym *sym
argument_list|,
argument|const Elf_Shdr *sectionHdr
argument_list|,
argument|ArrayRef<uint8_t> contentData
argument_list|,
argument|unsigned int referenceStart
argument_list|,
argument|unsigned int referenceEnd
argument_list|,
argument|std::vector<ELFReference<ELFT> *>&referenceList
argument_list|)
name|override
block|{
return|return
name|new
argument_list|(
argument|this->_readerStorage
argument_list|)
name|MipsELFDefinedAtom
operator|<
name|ELFT
operator|>
operator|(
operator|*
name|this
operator|,
name|symName
operator|,
name|sectionName
operator|,
name|sym
operator|,
name|sectionHdr
operator|,
name|contentData
operator|,
name|referenceStart
operator|,
name|referenceEnd
operator|,
name|referenceList
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|const
name|Elf_Shdr
modifier|*
name|findSectionByType
parameter_list|(
name|uint64_t
name|type
parameter_list|)
block|{
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|section
range|:
name|this
operator|->
name|_objFile
operator|->
name|sections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|sh_type
operator|==
name|type
condition|)
return|return
operator|&
name|section
return|;
return|return
name|nullptr
return|;
block|}
end_function

begin_function
specifier|const
name|Elf_Shdr
modifier|*
name|findSectionByFlags
parameter_list|(
name|uint64_t
name|flags
parameter_list|)
block|{
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|section
range|:
name|this
operator|->
name|_objFile
operator|->
name|sections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|sh_flags
operator|&
name|flags
condition|)
return|return
operator|&
name|section
return|;
return|return
name|nullptr
return|;
block|}
end_function

begin_expr_stmt
name|std
operator|::
name|error_code
name|readAuxData
argument_list|()
block|{
name|using
name|namespace
name|llvm
operator|::
name|ELF
block|;
if|if
condition|(
specifier|const
name|Elf_Shdr
modifier|*
name|sec
init|=
name|findSectionByFlags
argument_list|(
name|SHF_TLS
argument_list|)
condition|)
block|{
name|_tpOff
operator|=
name|sec
operator|->
name|sh_addr
operator|+
name|TP_OFFSET
expr_stmt|;
name|_dtpOff
operator|=
name|sec
operator|->
name|sh_addr
operator|+
name|DTP_OFFSET
expr_stmt|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_RegInfo
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_Options
operator|<
name|ELFT
operator|>
name|Elf_Mips_Options
expr_stmt|;
end_typedef

begin_if
if|if
condition|(
specifier|const
name|Elf_Shdr
modifier|*
name|sec
init|=
name|findSectionByType
argument_list|(
name|SHT_MIPS_OPTIONS
argument_list|)
condition|)
block|{
name|auto
name|contents
init|=
name|this
operator|->
name|getSectionContents
argument_list|(
name|sec
argument_list|)
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|contents
operator|.
name|getError
argument_list|()
condition|)
return|return
name|ec
return|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|raw
operator|=
name|contents
operator|.
name|get
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|raw
operator|.
name|empty
argument_list|()
condition|)
block|{
if|if
condition|(
name|raw
operator|.
name|size
argument_list|()
operator|<
sizeof|sizeof
argument_list|(
name|Elf_Mips_Options
argument_list|)
condition|)
return|return
name|make_dynamic_error_code
argument_list|(
name|StringRef
argument_list|(
literal|"Invalid size of MIPS_OPTIONS section"
argument_list|)
argument_list|)
return|;
specifier|const
specifier|auto
modifier|*
name|opt
init|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Mips_Options
operator|*
operator|>
operator|(
name|raw
operator|.
name|data
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|opt
operator|->
name|kind
operator|==
name|ODK_REGINFO
condition|)
block|{
name|_gp0
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_RegInfo
operator|*
operator|>
operator|(
name|opt
operator|+
literal|1
operator|)
operator|->
name|ri_gp_value
expr_stmt|;
break|break;
block|}
name|raw
operator|=
name|raw
operator|.
name|slice
argument_list|(
name|opt
operator|->
name|size
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
specifier|const
name|Elf_Shdr
modifier|*
name|sec
init|=
name|findSectionByType
argument_list|(
name|SHT_MIPS_REGINFO
argument_list|)
condition|)
block|{
name|auto
name|contents
init|=
name|this
operator|->
name|getSectionContents
argument_list|(
name|sec
argument_list|)
decl_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|contents
operator|.
name|getError
argument_list|()
condition|)
return|return
name|ec
return|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|raw
operator|=
name|contents
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|raw
operator|.
name|size
argument_list|()
operator|!=
sizeof|sizeof
argument_list|(
name|Elf_RegInfo
argument_list|)
condition|)
return|return
name|make_dynamic_error_code
argument_list|(
name|StringRef
argument_list|(
literal|"Invalid size of MIPS_REGINFO section"
argument_list|)
argument_list|)
return|;
name|_gp0
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|Elf_RegInfo
operator|*
operator|>
operator|(
name|raw
operator|.
name|data
argument_list|()
operator|)
operator|->
name|ri_gp_value
expr_stmt|;
block|}
end_if

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_macro
unit|}    void
name|createRelocationReferences
argument_list|(
argument|const Elf_Sym *symbol
argument_list|,
argument|ArrayRef<uint8_t> content
argument_list|,
argument|range<Elf_Rela_Iter> rels
argument_list|)
end_macro

begin_macro
name|override
end_macro

begin_block
block|{
specifier|const
specifier|auto
name|value
init|=
name|this
operator|->
name|getSymbolValue
argument_list|(
name|symbol
argument_list|)
decl_stmt|;
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|rel
range|:
name|rels
control|)
block|{
if|if
condition|(
name|rel
operator|.
name|r_offset
operator|<
name|value
operator|||
name|value
operator|+
name|content
operator|.
name|size
argument_list|()
operator|<=
name|rel
operator|.
name|r_offset
condition|)
continue|continue;
name|auto
name|r
init|=
name|new
argument_list|(
argument|this->_readerStorage
argument_list|)
name|MipsELFReference
operator|<
name|ELFT
operator|>
operator|(
name|value
expr|,
name|rel
operator|)
decl_stmt|;
name|this
operator|->
name|addReferenceToSymbol
argument_list|(
name|r
argument_list|,
name|symbol
argument_list|)
expr_stmt|;
name|this
operator|->
name|_references
operator|.
name|push_back
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_decl_stmt
name|void
name|createRelocationReferences
argument_list|(
specifier|const
name|Elf_Sym
operator|*
name|symbol
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|symContent
argument_list|,
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|secContent
argument_list|,
name|range
operator|<
name|Elf_Rel_Iter
operator|>
name|rels
argument_list|)
name|override
block|{
specifier|const
specifier|auto
name|value
init|=
name|this
operator|->
name|getSymbolValue
argument_list|(
name|symbol
argument_list|)
decl_stmt|;
for|for
control|(
name|Elf_Rel_Iter
name|rit
init|=
name|rels
operator|.
name|begin
argument_list|()
init|,
name|eit
init|=
name|rels
operator|.
name|end
argument_list|()
init|;
name|rit
operator|!=
name|eit
condition|;
operator|++
name|rit
control|)
block|{
if|if
condition|(
name|rit
operator|->
name|r_offset
operator|<
name|value
operator|||
name|value
operator|+
name|symContent
operator|.
name|size
argument_list|()
operator|<=
name|rit
operator|->
name|r_offset
condition|)
continue|continue;
name|auto
name|r
init|=
name|new
argument_list|(
argument|this->_readerStorage
argument_list|)
name|MipsELFReference
operator|<
name|ELFT
operator|>
operator|(
name|value
expr|,
operator|*
name|rit
operator|)
decl_stmt|;
name|this
operator|->
name|addReferenceToSymbol
argument_list|(
name|r
argument_list|,
name|symbol
argument_list|)
expr_stmt|;
name|this
operator|->
name|_references
operator|.
name|push_back
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|auto
name|addend
init|=
name|readAddend
argument_list|(
operator|*
name|rit
argument_list|,
name|secContent
argument_list|)
decl_stmt|;
name|auto
name|pairRelType
init|=
name|getPairRelocation
argument_list|(
operator|*
name|rit
argument_list|)
decl_stmt|;
if|if
condition|(
name|pairRelType
operator|!=
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_NONE
condition|)
block|{
name|addend
operator|<<=
literal|16
expr_stmt|;
name|auto
name|mit
init|=
name|findMatchingRelocation
argument_list|(
name|pairRelType
argument_list|,
name|rit
argument_list|,
name|eit
argument_list|)
decl_stmt|;
if|if
condition|(
name|mit
operator|!=
name|eit
condition|)
name|addend
operator|+=
name|int16_t
argument_list|(
name|readAddend
argument_list|(
operator|*
name|mit
argument_list|,
name|secContent
argument_list|)
argument_list|)
expr_stmt|;
else|else
comment|// FIXME (simon): Show detailed warning.
name|llvm
operator|::
name|errs
argument_list|()
operator|<<
literal|"lld warning: cannot matching LO16 relocation\n"
expr_stmt|;
block|}
name|this
operator|->
name|_references
operator|.
name|back
argument_list|()
operator|->
name|setAddend
argument_list|(
name|addend
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_expr_stmt
name|Reference
operator|::
name|Addend
name|readAddend
argument_list|(
argument|const Elf_Rel&ri
argument_list|,
argument|const ArrayRef<uint8_t> content
argument_list|)
specifier|const
block|{
specifier|const
name|auto
operator|&
name|rh
operator|=
name|this
operator|->
name|_ctx
operator|.
name|template
name|getTargetHandler
operator|<
name|ELFT
operator|>
operator|(
operator|)
operator|.
name|getRelocationHandler
argument_list|()
block|;
return|return
name|static_cast
operator|<
specifier|const
name|MipsRelocationHandler
operator|&
operator|>
operator|(
name|rh
operator|)
operator|.
name|readAddend
argument_list|(
name|getPrimaryType
argument_list|(
name|ri
argument_list|)
argument_list|,
name|content
operator|.
name|data
argument_list|()
operator|+
name|ri
operator|.
name|r_offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|getPairRelocation
argument_list|(
specifier|const
name|Elf_Rel
operator|&
name|rel
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|getPrimaryType
argument_list|(
name|rel
argument_list|)
condition|)
block|{
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_HI16
case|:
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_LO16
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_PCHI16
case|:
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_PCLO16
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_GOT16
case|:
if|if
condition|(
name|isLocalBinding
argument_list|(
name|rel
argument_list|)
condition|)
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_LO16
return|;
break|break;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MICROMIPS_HI16
case|:
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MICROMIPS_LO16
return|;
case|case
name|llvm
operator|::
name|ELF
operator|::
name|R_MICROMIPS_GOT16
case|:
if|if
condition|(
name|isLocalBinding
argument_list|(
name|rel
argument_list|)
condition|)
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MICROMIPS_LO16
return|;
break|break;
default|default:
comment|// Nothing to do.
break|break;
block|}
return|return
name|llvm
operator|::
name|ELF
operator|::
name|R_MIPS_NONE
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Elf_Rel_Iter
name|findMatchingRelocation
argument_list|(
name|uint32_t
name|pairRelType
argument_list|,
name|Elf_Rel_Iter
name|rit
argument_list|,
name|Elf_Rel_Iter
name|eit
argument_list|)
decl|const
block|{
return|return
name|std
operator|::
name|find_if
argument_list|(
name|rit
argument_list|,
name|eit
argument_list|,
index|[
operator|&
index|]
operator|(
specifier|const
name|Elf_Rel
operator|&
name|rel
operator|)
block|{
return|return
name|getPrimaryType
argument_list|(
name|rel
argument_list|)
operator|==
name|pairRelType
operator|&&
name|rel
operator|.
name|getSymbol
argument_list|(
name|_isMips64EL
argument_list|)
operator|==
name|rit
operator|->
name|getSymbol
argument_list|(
name|_isMips64EL
argument_list|)
return|;
block|}
block|)
decl_stmt|;
end_decl_stmt

begin_function
unit|}    static
name|uint8_t
name|getPrimaryType
parameter_list|(
specifier|const
name|Elf_Rel
modifier|&
name|rel
parameter_list|)
block|{
return|return
name|rel
operator|.
name|getType
argument_list|(
name|_isMips64EL
argument_list|)
operator|&
literal|0xff
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|isLocalBinding
argument_list|(
specifier|const
name|Elf_Rel
operator|&
name|rel
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|_objFile
operator|->
name|getSymbol
argument_list|(
name|rel
operator|.
name|getSymbol
argument_list|(
name|_isMips64EL
argument_list|)
argument_list|)
operator|->
name|getBinding
argument_list|()
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|STB_LOCAL
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsDynamicFile
operator|:
name|public
name|DynamicFile
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsDynamicFile
argument_list|(
argument|const MipsLinkingContext&context
argument_list|,
argument|StringRef name
argument_list|)
operator|:
name|DynamicFile
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|name
operator|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// elf
end_comment

begin_comment
unit|}
comment|// lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

