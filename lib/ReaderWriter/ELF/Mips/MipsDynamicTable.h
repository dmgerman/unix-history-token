begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Mips/MipsDynamicTable.h -----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_MIPS_MIPS_DYNAMIC_TABLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_MIPS_MIPS_DYNAMIC_TABLE_H
end_define

begin_include
include|#
directive|include
file|"TargetLayout.h"
end_include

begin_include
include|#
directive|include
file|"SectionChunks.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsTargetLayout
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsDynamicTable
operator|:
name|public
name|DynamicTable
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|MipsDynamicTable
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|DynamicTable
operator|<
name|ELFT
operator|>
operator|(
name|ctx
operator|,
name|layout
operator|,
literal|".dynamic"
operator|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|::
name|ORDER_DYNAMIC
operator|)
block|,
name|_targetLayout
argument_list|(
argument|layout
argument_list|)
block|{}
name|void
name|createDefaultEntries
argument_list|()
name|override
block|{
name|DynamicTable
operator|<
name|ELFT
operator|>
operator|::
name|createDefaultEntries
argument_list|()
block|;
comment|// Version id for the Runtime Linker Interface.
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_RLD_VERSION
argument_list|,
literal|1
argument_list|)
block|;
comment|// The .rld_map section address.
if|if
condition|(
name|this
operator|->
name|_ctx
operator|.
name|getOutputELFType
argument_list|()
operator|==
name|ET_EXEC
condition|)
block|{
name|_dt_rldmap
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_RLD_MAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_dt_rldmaprel
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_RLD_MAP_REL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// MIPS flags.
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_FLAGS
argument_list|,
name|RHF_NOTPOT
argument_list|)
expr_stmt|;
comment|// The base address of the segment.
name|_dt_baseaddr
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_BASE_ADDRESS
argument_list|,
literal|0
argument_list|)
block|;
comment|// Number of local global offset table entries.
name|_dt_localgot
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_LOCAL_GOTNO
argument_list|,
literal|0
argument_list|)
block|;
comment|// Number of entries in the .dynsym section.
name|_dt_symtabno
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_SYMTABNO
argument_list|,
literal|0
argument_list|)
block|;
comment|// The index of the first dynamic symbol table entry that corresponds
comment|// to an entry in the global offset table.
name|_dt_gotsym
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_GOTSYM
argument_list|,
literal|0
argument_list|)
block|;
comment|// Address of the .got section.
name|_dt_pltgot
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_PLTGOT
argument_list|,
literal|0
argument_list|)
block|;   }
name|void
name|doPreFlight
argument_list|()
name|override
block|{
name|DynamicTable
operator|<
name|ELFT
operator|>
operator|::
name|doPreFlight
argument_list|()
block|;
if|if
condition|(
name|_targetLayout
operator|.
name|findOutputSection
argument_list|(
literal|".MIPS.options"
argument_list|)
condition|)
block|{
name|_dt_options
operator|=
name|this
operator|->
name|addEntry
argument_list|(
name|DT_MIPS_OPTIONS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|updateDynamicTable
argument_list|()
name|override
block|{
name|DynamicTable
operator|<
name|ELFT
operator|>
operator|::
name|updateDynamicTable
argument_list|()
block|;
comment|// Assign the minimum segment address to the DT_MIPS_BASE_ADDRESS tag.
name|auto
name|baseAddr
operator|=
name|std
operator|::
name|numeric_limits
operator|<
name|uint64_t
operator|>
operator|::
name|max
argument_list|()
block|;
for|for
control|(
name|auto
name|si
range|:
name|_targetLayout
operator|.
name|segments
argument_list|()
control|)
if|if
condition|(
name|si
operator|->
name|segmentType
argument_list|()
operator|!=
name|llvm
operator|::
name|ELF
operator|::
name|PT_NULL
condition|)
name|baseAddr
operator|=
name|std
operator|::
name|min
argument_list|(
name|baseAddr
argument_list|,
name|si
operator|->
name|virtualAddr
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_baseaddr
index|]
operator|.
name|d_un
operator|.
name|d_val
operator|=
name|baseAddr
expr_stmt|;
name|auto
operator|&
name|got
operator|=
name|_targetLayout
operator|.
name|getGOTSection
argument_list|()
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_symtabno
index|]
operator|.
name|d_un
operator|.
name|d_val
operator|=
name|this
operator|->
name|getSymbolTable
argument_list|()
operator|->
name|size
argument_list|()
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_gotsym
index|]
operator|.
name|d_un
operator|.
name|d_val
operator|=
name|this
operator|->
name|getSymbolTable
argument_list|()
operator|->
name|size
argument_list|()
operator|-
name|got
operator|.
name|getGlobalCount
argument_list|()
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_localgot
index|]
operator|.
name|d_un
operator|.
name|d_val
operator|=
name|got
operator|.
name|getLocalCount
argument_list|()
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_pltgot
index|]
operator|.
name|d_un
operator|.
name|d_ptr
operator|=
name|got
operator|.
name|virtualAddr
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|sec
init|=
name|_targetLayout
operator|.
name|findOutputSection
argument_list|(
literal|".MIPS.options"
argument_list|)
condition|)
name|this
operator|->
name|_entries
index|[
name|_dt_options
index|]
operator|.
name|d_un
operator|.
name|d_ptr
operator|=
name|sec
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|sec
init|=
name|_targetLayout
operator|.
name|findOutputSection
argument_list|(
literal|".rld_map"
argument_list|)
condition|)
block|{
name|this
operator|->
name|_entries
index|[
name|_dt_rldmap
index|]
operator|.
name|d_un
operator|.
name|d_ptr
operator|=
name|sec
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|this
operator|->
name|_entries
index|[
name|_dt_rldmaprel
index|]
operator|.
name|d_un
operator|.
name|d_ptr
operator|=
name|sec
operator|->
name|virtualAddr
argument_list|()
operator|-
operator|(
name|this
operator|->
name|virtualAddr
argument_list|()
operator|+
name|_dt_rldmaprel
operator|*
expr|sizeof
operator|(
name|typename
name|DynamicTable
operator|<
name|ELFT
operator|>
operator|::
name|Elf_Dyn
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|int64_t
name|getGotPltTag
parameter_list|()
function|override
block|{
return|return
name|DT_MIPS_PLTGOT
return|;
block|}
name|protected
label|:
comment|/// \brief Adjust the symbol's value for microMIPS code.
name|uint64_t
name|getAtomVirtualAddress
argument_list|(
specifier|const
name|AtomLayout
operator|*
name|al
argument_list|)
decl|const
name|override
block|{
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|da
init|=
name|dyn_cast
operator|<
name|DefinedAtom
operator|>
operator|(
name|al
operator|->
name|_atom
operator|)
condition|)
if|if
condition|(
name|da
operator|->
name|codeModel
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|codeMipsMicro
operator|||
name|da
operator|->
name|codeModel
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|codeMipsMicroPIC
condition|)
return|return
name|al
operator|->
name|_virtualAddr
operator||
literal|1
return|;
return|return
name|al
operator|->
name|_virtualAddr
return|;
block|}
name|private
label|:
name|std
operator|::
name|size_t
name|_dt_symtabno
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_localgot
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_gotsym
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_pltgot
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_baseaddr
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_options
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_rldmap
expr_stmt|;
name|std
operator|::
name|size_t
name|_dt_rldmaprel
expr_stmt|;
name|MipsTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_targetLayout
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

