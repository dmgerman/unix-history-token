begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/X86_64/X86_64TargetHandler.h ------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_X86_64_X86_64_TARGET_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_X86_64_X86_64_TARGET_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"ELFReader.h"
end_include

begin_include
include|#
directive|include
file|"TargetLayout.h"
end_include

begin_include
include|#
directive|include
file|"X86_64LinkingContext.h"
end_include

begin_include
include|#
directive|include
file|"X86_64RelocationHandler.h"
end_include

begin_include
include|#
directive|include
file|"X86_64SectionChunks.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Simple.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|X86_64TargetLayout
range|:
name|public
name|TargetLayout
operator|<
name|ELF64LE
operator|>
block|{
name|public
operator|:
name|X86_64TargetLayout
argument_list|(
name|X86_64LinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|TargetLayout
argument_list|(
name|ctx
argument_list|)
block|,
name|_gotSection
argument_list|(
argument|new (this->_allocator) X86_64GOTSection(ctx)
argument_list|)
block|{}
name|AtomSection
operator|<
name|ELF64LE
operator|>
operator|*
name|createSection
argument_list|(
argument|StringRef name
argument_list|,
argument|int32_t type
argument_list|,
argument|DefinedAtom::ContentPermissions permissions
argument_list|,
argument|TargetLayout<ELF64LE>::SectionOrder order
argument_list|)
name|override
block|{
if|if
condition|(
name|type
operator|==
name|DefinedAtom
operator|::
name|typeGOT
operator|&&
name|name
operator|==
literal|".got"
condition|)
return|return
name|_gotSection
return|;
return|return
name|TargetLayout
operator|<
name|ELF64LE
operator|>
operator|::
name|createSection
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|permissions
argument_list|,
name|order
argument_list|)
return|;
block|}
name|void
name|finalizeOutputSectionLayout
parameter_list|()
function|override
block|{
name|sortOutputSectionByPriority
operator|<
name|ELF64LE
operator|>
operator|(
literal|".init_array"
operator|)
expr_stmt|;
name|sortOutputSectionByPriority
operator|<
name|ELF64LE
operator|>
operator|(
literal|".fini_array"
operator|)
expr_stmt|;
block|}
specifier|const
name|X86_64GOTSection
operator|&
name|getGOTSection
argument_list|()
specifier|const
block|{
return|return
operator|*
name|_gotSection
return|;
block|}
name|private
label|:
name|uint32_t
name|getPriority
argument_list|(
name|StringRef
name|sectionName
argument_list|)
decl|const
block|{
name|StringRef
name|priority
init|=
name|sectionName
operator|.
name|drop_front
argument_list|()
operator|.
name|rsplit
argument_list|(
literal|'.'
argument_list|)
operator|.
name|second
decl_stmt|;
name|uint32_t
name|prio
decl_stmt|;
if|if
condition|(
name|priority
operator|.
name|getAsInteger
argument_list|(
literal|10
argument_list|,
name|prio
argument_list|)
condition|)
return|return
name|std
operator|::
name|numeric_limits
operator|<
name|uint32_t
operator|>
operator|::
name|max
argument_list|()
return|;
return|return
name|prio
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|sortOutputSectionByPriority
argument_list|(
argument|StringRef prefix
argument_list|)
block|{
name|OutputSection
operator|<
name|T
operator|>
operator|*
name|section
operator|=
name|findOutputSection
argument_list|(
name|prefix
argument_list|)
block|;
if|if
condition|(
operator|!
name|section
condition|)
return|return;
name|auto
name|sections
operator|=
name|section
operator|->
name|sections
argument_list|()
expr_stmt|;
name|std
operator|::
name|sort
argument_list|(
name|sections
operator|.
name|begin
argument_list|()
argument_list|,
name|sections
operator|.
name|end
argument_list|()
argument_list|,
index|[
operator|&
index|]
operator|(
name|Chunk
operator|<
name|T
operator|>
operator|*
name|lhs
operator|,
name|Chunk
operator|<
name|T
operator|>
operator|*
name|rhs
operator|)
block|{
name|Section
operator|<
name|T
operator|>
operator|*
name|lhsSection
operator|=
name|dyn_cast
operator|<
name|Section
operator|<
name|T
operator|>>
operator|(
name|lhs
operator|)
block|;
name|Section
operator|<
name|T
operator|>
operator|*
name|rhsSection
operator|=
name|dyn_cast
operator|<
name|Section
operator|<
name|T
operator|>>
operator|(
name|rhs
operator|)
block|;
if|if
condition|(
operator|!
name|lhsSection
operator|||
operator|!
name|rhsSection
condition|)
return|return
name|false
return|;
name|StringRef
name|lhsName
operator|=
name|lhsSection
operator|->
name|inputSectionName
argument_list|()
argument_list|;
name|StringRef
name|rhsName
operator|=
name|rhsSection
operator|->
name|inputSectionName
argument_list|()
argument_list|;                 if
operator|(
operator|!
name|lhsName
operator|.
name|startswith
argument_list|(
name|prefix
argument_list|)
operator|||
operator|!
name|rhsName
operator|.
name|startswith
argument_list|(
name|prefix
argument_list|)
operator|)
return|return
name|false
return|;
return|return
name|getPriority
argument_list|(
name|lhsName
argument_list|)
operator|<
name|getPriority
argument_list|(
name|rhsName
argument_list|)
return|;
block|}
block|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|}  private:
name|X86_64GOTSection
modifier|*
name|_gotSection
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|X86_64TargetHandler
range|:
name|public
name|TargetHandler
block|{
name|public
operator|:
name|X86_64TargetHandler
argument_list|(
name|X86_64LinkingContext
operator|&
name|ctx
argument_list|)
block|;
specifier|const
name|TargetRelocationHandler
operator|&
name|getRelocationHandler
argument_list|()
specifier|const
name|override
block|{
return|return
operator|*
name|_relocationHandler
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getObjReader
argument_list|()
name|override
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|ELFReader
operator|<
name|ELFFile
operator|<
name|ELF64LE
operator|>>>
operator|(
name|_ctx
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getDSOReader
argument_list|()
name|override
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|ELFReader
operator|<
name|DynamicFile
operator|<
name|ELF64LE
operator|>>>
operator|(
name|_ctx
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|getWriter
argument_list|()
name|override
block|;
name|protected
operator|:
name|X86_64LinkingContext
operator|&
name|_ctx
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|X86_64TargetLayout
operator|>
name|_targetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|X86_64TargetRelocationHandler
operator|>
name|_relocationHandler
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

