begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/ExecutableWriter.h ----------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_EXECUTABLE_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_EXECUTABLE_WRITER_H
end_define

begin_include
include|#
directive|include
file|"OutputELFWriter.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|using
name|namespace
name|llvm
decl_stmt|;
name|using
name|namespace
name|llvm
operator|::
name|object
expr_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|//  ExecutableWriter Class
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ExecutableWriter
operator|:
name|public
name|OutputELFWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|ExecutableWriter
argument_list|(
name|ELFLinkingContext
operator|&
name|ctx
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|(
name|ctx
operator|,
name|layout
operator|)
block|{}
name|protected
operator|:
name|void
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
name|override
block|;
name|void
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&
argument_list|)
name|override
block|;
name|void
name|finalizeDefaultAtomValues
argument_list|()
name|override
block|;
name|void
name|createDefaultSections
argument_list|()
name|override
block|;
name|bool
name|isNeededTagRequired
argument_list|(
argument|const SharedLibraryAtom *sla
argument_list|)
specifier|const
name|override
block|{
return|return
name|this
operator|->
name|_layout
operator|.
name|isCopied
argument_list|(
name|sla
argument_list|)
return|;
block|}
name|unique_bump_ptr
operator|<
name|InterpSection
operator|<
name|ELFT
operator|>>
name|_interpSection
block|;
name|private
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeFile
operator|<
name|ELFT
operator|>>
name|createRuntimeFile
argument_list|()
block|; }
expr_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|//  ExecutableWriter
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
block|{
for|for
control|(
name|auto
name|sec
range|:
name|this
operator|->
name|_layout
operator|.
name|sections
argument_list|()
control|)
if|if
condition|(
name|auto
name|section
init|=
name|dyn_cast
operator|<
name|AtomSection
operator|<
name|ELFT
operator|>>
operator|(
name|sec
operator|)
condition|)
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|atom
range|:
name|section
operator|->
name|atoms
argument_list|()
control|)
block|{
specifier|const
name|DefinedAtom
modifier|*
name|da
init|=
name|dyn_cast
operator|<
specifier|const
name|DefinedAtom
operator|>
operator|(
name|atom
operator|->
name|_atom
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|da
condition|)
continue|continue;
if|if
condition|(
name|da
operator|->
name|dynamicExport
argument_list|()
operator|!=
name|DefinedAtom
operator|::
name|dynamicExportAlways
operator|&&
operator|!
name|this
operator|->
name|_ctx
operator|.
name|isDynamicallyExportedSymbol
argument_list|(
name|da
operator|->
name|name
argument_list|()
argument_list|)
operator|&&
operator|!
operator|(
name|this
operator|->
name|_ctx
operator|.
name|shouldExportDynamic
argument_list|()
operator|&&
name|da
operator|->
name|scope
argument_list|()
operator|==
name|Atom
operator|::
name|Scope
operator|::
name|scopeGlobal
operator|)
condition|)
continue|continue;
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|atom
operator|->
name|_atom
argument_list|,
name|section
operator|->
name|ordinal
argument_list|()
argument_list|,
name|atom
operator|->
name|_virtualAddr
argument_list|,
name|atom
argument_list|)
expr_stmt|;
block|}
comment|// Put weak symbols in the dynamic symbol table.
if|if
condition|(
name|this
operator|->
name|_ctx
operator|.
name|isDynamic
argument_list|()
condition|)
block|{
for|for
control|(
specifier|const
name|UndefinedAtom
modifier|*
name|a
range|:
name|file
operator|.
name|undefined
argument_list|()
control|)
block|{
if|if
condition|(
name|this
operator|->
name|_layout
operator|.
name|isReferencedByDefinedAtom
argument_list|(
name|a
argument_list|)
operator|&&
name|a
operator|->
name|canBeNull
argument_list|()
operator|!=
name|UndefinedAtom
operator|::
name|canBeNullNever
condition|)
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|a
argument_list|,
name|ELF
operator|::
name|SHN_UNDEF
argument_list|)
expr_stmt|;
block|}
block|}
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeFile
operator|<
name|ELFT
operator|>>
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createRuntimeFile
argument_list|()
block|{
name|auto
name|file
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|RuntimeFile
operator|<
name|ELFT
operator|>>
operator|(
name|this
operator|->
name|_ctx
operator|,
literal|"C runtime"
operator|)
block|;
name|file
operator|->
name|addUndefinedAtom
argument_list|(
name|this
operator|->
name|_ctx
operator|.
name|entrySymbolName
argument_list|()
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__bss_start"
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__bss_end"
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_end"
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"end"
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__preinit_array_start"
argument_list|,
name|true
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__preinit_array_end"
argument_list|,
name|true
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__init_array_start"
argument_list|,
name|true
argument_list|)
block|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__init_array_end"
argument_list|,
name|true
argument_list|)
block|;
if|if
condition|(
name|this
operator|->
name|_ctx
operator|.
name|isRelaOutputFormat
argument_list|()
condition|)
block|{
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__rela_iplt_start"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__rela_iplt_end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__rel_iplt_start"
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__rel_iplt_end"
argument_list|)
expr_stmt|;
block|}
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__fini_array_start"
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|file
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"__fini_array_end"
argument_list|,
name|true
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
comment|/// \brief Hook in lld to add CRuntime file
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
name|result
operator|.
name|push_back
argument_list|(
name|createRuntimeFile
argument_list|()
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDefaultSections
argument_list|()
block|{
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|createDefaultSections
argument_list|()
block|;
if|if
condition|(
name|this
operator|->
name|_ctx
operator|.
name|isDynamic
argument_list|()
condition|)
block|{
name|_interpSection
operator|.
name|reset
argument_list|(
name|new
argument_list|(
argument|this->_alloc
argument_list|)
name|InterpSection
operator|<
name|ELFT
operator|>
operator|(
name|this
operator|->
name|_ctx
operator|,
literal|".interp"
operator|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|::
name|ORDER_INTERP
operator|,
name|this
operator|->
name|_ctx
operator|.
name|getInterpreter
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|_layout
operator|.
name|addSection
argument_list|(
name|_interpSection
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/// Finalize the value of all the absolute symbols that we
comment|/// created
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|AtomLayout
operator|*
name|bssStartAtom
operator|=
name|this
operator|->
name|_layout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"__bss_start"
argument_list|)
block|;
name|AtomLayout
operator|*
name|bssEndAtom
operator|=
name|this
operator|->
name|_layout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"__bss_end"
argument_list|)
block|;
name|AtomLayout
operator|*
name|underScoreEndAtom
operator|=
name|this
operator|->
name|_layout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"_end"
argument_list|)
block|;
name|AtomLayout
operator|*
name|endAtom
operator|=
name|this
operator|->
name|_layout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"end"
argument_list|)
block|;
name|assert
argument_list|(
operator|(
name|bssStartAtom
operator|||
name|bssEndAtom
operator|||
name|underScoreEndAtom
operator|||
name|endAtom
operator|)
operator|&&
literal|"Unable to find the absolute atoms that have been added by lld"
argument_list|)
block|;
name|this
operator|->
name|updateScopeAtomValues
argument_list|(
literal|"preinit_array"
argument_list|,
literal|".preinit_array"
argument_list|)
block|;
name|this
operator|->
name|updateScopeAtomValues
argument_list|(
literal|"init_array"
argument_list|,
literal|".init_array"
argument_list|)
block|;
if|if
condition|(
name|this
operator|->
name|_ctx
operator|.
name|isRelaOutputFormat
argument_list|()
condition|)
name|this
operator|->
name|updateScopeAtomValues
argument_list|(
literal|"rela_iplt"
argument_list|,
literal|".rela.plt"
argument_list|)
expr_stmt|;
else|else
name|this
operator|->
name|updateScopeAtomValues
argument_list|(
literal|"rel_iplt"
argument_list|,
literal|".rel.plt"
argument_list|)
expr_stmt|;
name|this
operator|->
name|updateScopeAtomValues
argument_list|(
literal|"fini_array"
argument_list|,
literal|".fini_array"
argument_list|)
expr_stmt|;
name|auto
name|bssSection
init|=
name|this
operator|->
name|_layout
operator|.
name|findOutputSection
argument_list|(
literal|".bss"
argument_list|)
decl_stmt|;
comment|// If we don't find a bss section, then don't set these values
if|if
condition|(
name|bssSection
condition|)
block|{
name|bssStartAtom
operator|->
name|_virtualAddr
operator|=
name|bssSection
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|bssEndAtom
operator|->
name|_virtualAddr
operator|=
name|bssSection
operator|->
name|virtualAddr
argument_list|()
operator|+
name|bssSection
operator|->
name|memSize
argument_list|()
expr_stmt|;
name|underScoreEndAtom
operator|->
name|_virtualAddr
operator|=
name|bssEndAtom
operator|->
name|_virtualAddr
expr_stmt|;
name|endAtom
operator|->
name|_virtualAddr
operator|=
name|bssEndAtom
operator|->
name|_virtualAddr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|auto
name|dataSection
init|=
name|this
operator|->
name|_layout
operator|.
name|findOutputSection
argument_list|(
literal|".data"
argument_list|)
condition|)
block|{
name|underScoreEndAtom
operator|->
name|_virtualAddr
operator|=
name|dataSection
operator|->
name|virtualAddr
argument_list|()
operator|+
name|dataSection
operator|->
name|memSize
argument_list|()
expr_stmt|;
name|endAtom
operator|->
name|_virtualAddr
operator|=
name|underScoreEndAtom
operator|->
name|_virtualAddr
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_comment
unit|}
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_EXECUTABLE_WRITER_H
end_comment

end_unit

