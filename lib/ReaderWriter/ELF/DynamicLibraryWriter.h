begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/DynamicLibraryWriter.h ------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_DYNAMIC_LIBRARY_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_DYNAMIC_LIBRARY_WRITER_H
end_define

begin_include
include|#
directive|include
file|"OutputELFWriter.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|using
name|namespace
name|llvm
decl_stmt|;
name|using
name|namespace
name|llvm
operator|::
name|object
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DynamicLibraryWriter
expr_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|//  DynamicLibraryWriter Class
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DynamicLibraryWriter
operator|:
name|public
name|OutputELFWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|DynamicLibraryWriter
argument_list|(
name|ELFLinkingContext
operator|&
name|context
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|layout
operator|)
block|,
name|_runtimeFile
argument_list|(
argument|new RuntimeFile<ELFT>(context,
literal|"C runtime"
argument|)
argument_list|)
block|{}
name|protected
operator|:
name|virtual
name|void
name|buildDynamicSymbolTable
argument_list|(
specifier|const
name|File
operator|&
name|file
argument_list|)
block|;
name|virtual
name|void
name|addDefaultAtoms
argument_list|()
block|;
name|virtual
name|bool
name|createImplicitFiles
argument_list|(
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|File
operator|>
expr|>
operator|&
argument_list|)
block|;
name|virtual
name|void
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|protected
operator|:
name|std
operator|::
name|unique_ptr
operator|<
name|RuntimeFile
operator|<
name|ELFT
operator|>
expr|>
name|_runtimeFile
block|; }
expr_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|//  DynamicLibraryWriter
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
argument|const File&file
argument_list|)
block|{
comment|// Add all the defined symbols to the dynamic symbol table
comment|// we need hooks into the Atom to find out which atoms need
comment|// to be exported
for|for
control|(
name|auto
name|sec
range|:
name|this
operator|->
name|_layout
operator|.
name|sections
argument_list|()
control|)
if|if
condition|(
name|auto
name|section
init|=
name|dyn_cast
operator|<
name|AtomSection
operator|<
name|ELFT
operator|>>
operator|(
name|sec
operator|)
condition|)
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|atom
range|:
name|section
operator|->
name|atoms
argument_list|()
control|)
block|{
specifier|const
name|DefinedAtom
modifier|*
name|da
init|=
name|dyn_cast
operator|<
specifier|const
name|DefinedAtom
operator|>
operator|(
name|atom
operator|->
name|_atom
operator|)
decl_stmt|;
if|if
condition|(
name|da
operator|&&
operator|(
name|da
operator|->
name|scope
argument_list|()
operator|==
name|DefinedAtom
operator|::
name|scopeGlobal
operator|)
condition|)
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|atom
operator|->
name|_atom
argument_list|,
name|section
operator|->
name|ordinal
argument_list|()
argument_list|,
name|atom
operator|->
name|_virtualAddr
argument_list|,
name|atom
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|const
name|UndefinedAtom
modifier|*
name|a
range|:
name|file
operator|.
name|undefined
argument_list|()
control|)
name|this
operator|->
name|_dynamicSymbolTable
operator|->
name|addSymbol
argument_list|(
name|a
argument_list|,
name|ELF
operator|::
name|SHN_UNDEF
argument_list|)
expr_stmt|;
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|buildDynamicSymbolTable
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|addDefaultAtoms
argument_list|()
block|{
name|_runtimeFile
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_end"
argument_list|)
block|; }
comment|/// \brief Hook in lld to add CRuntime file
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
comment|// Add the default atoms as defined by executables
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|addDefaultAtoms
argument_list|()
block|;
name|OutputELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|_runtimeFile
argument_list|)
argument_list|)
block|;
return|return
name|true
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|DynamicLibraryWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
name|auto
name|underScoreEndAtomIter
operator|=
name|this
operator|->
name|_layout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"_end"
argument_list|)
block|;
if|if
condition|(
name|auto
name|bssSection
init|=
name|this
operator|->
name|_layout
operator|.
name|findOutputSection
argument_list|(
literal|".bss"
argument_list|)
condition|)
block|{
operator|(
operator|*
name|underScoreEndAtomIter
operator|)
operator|->
name|_virtualAddr
operator|=
name|bssSection
operator|->
name|virtualAddr
argument_list|()
operator|+
name|bssSection
operator|->
name|memSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|auto
name|dataSection
init|=
name|this
operator|->
name|_layout
operator|.
name|findOutputSection
argument_list|(
literal|".data"
argument_list|)
condition|)
block|{
operator|(
operator|*
name|underScoreEndAtomIter
operator|)
operator|->
name|_virtualAddr
operator|=
name|dataSection
operator|->
name|virtualAddr
argument_list|()
operator|+
name|dataSection
operator|->
name|memSize
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_DYNAMIC_LIBRARY_WRITER_H
end_comment

end_unit

