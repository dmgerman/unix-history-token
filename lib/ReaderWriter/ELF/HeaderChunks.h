begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/HeaderChunks.h --------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_HEADER_CHUNKS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_HEADER_CHUNKS_H
end_define

begin_include
include|#
directive|include
file|"SegmentChunks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileOutputBuffer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_comment
comment|/// \brief An Header represents the Elf[32/64]_Ehdr structure at the
end_comment

begin_comment
comment|///        start of an ELF executable file.
end_comment

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
name|ELFHeader
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
argument_list|)
expr_stmt|;
name|void
name|e_ident
parameter_list|(
name|int
name|I
parameter_list|,
name|unsigned
name|char
name|C
parameter_list|)
block|{
name|_eh
operator|.
name|e_ident
index|[
name|I
index|]
operator|=
name|C
expr_stmt|;
block|}
name|void
name|e_type
parameter_list|(
name|uint16_t
name|type
parameter_list|)
block|{
name|_eh
operator|.
name|e_type
operator|=
name|type
expr_stmt|;
block|}
name|void
name|e_machine
parameter_list|(
name|uint16_t
name|machine
parameter_list|)
block|{
name|_eh
operator|.
name|e_machine
operator|=
name|machine
expr_stmt|;
block|}
name|void
name|e_version
parameter_list|(
name|uint32_t
name|version
parameter_list|)
block|{
name|_eh
operator|.
name|e_version
operator|=
name|version
expr_stmt|;
block|}
name|void
name|e_entry
parameter_list|(
name|int64_t
name|entry
parameter_list|)
block|{
name|_eh
operator|.
name|e_entry
operator|=
name|entry
expr_stmt|;
block|}
name|void
name|e_phoff
parameter_list|(
name|int64_t
name|phoff
parameter_list|)
block|{
name|_eh
operator|.
name|e_phoff
operator|=
name|phoff
expr_stmt|;
block|}
name|void
name|e_shoff
parameter_list|(
name|int64_t
name|shoff
parameter_list|)
block|{
name|_eh
operator|.
name|e_shoff
operator|=
name|shoff
expr_stmt|;
block|}
name|void
name|e_flags
parameter_list|(
name|uint32_t
name|flags
parameter_list|)
block|{
name|_eh
operator|.
name|e_flags
operator|=
name|flags
expr_stmt|;
block|}
name|void
name|e_ehsize
parameter_list|(
name|uint16_t
name|ehsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_ehsize
operator|=
name|ehsize
expr_stmt|;
block|}
name|void
name|e_phentsize
parameter_list|(
name|uint16_t
name|phentsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_phentsize
operator|=
name|phentsize
expr_stmt|;
block|}
name|void
name|e_phnum
parameter_list|(
name|uint16_t
name|phnum
parameter_list|)
block|{
name|_eh
operator|.
name|e_phnum
operator|=
name|phnum
expr_stmt|;
block|}
name|void
name|e_shentsize
parameter_list|(
name|uint16_t
name|shentsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_shentsize
operator|=
name|shentsize
expr_stmt|;
block|}
name|void
name|e_shnum
parameter_list|(
name|uint16_t
name|shnum
parameter_list|)
block|{
name|_eh
operator|.
name|e_shnum
operator|=
name|shnum
expr_stmt|;
block|}
name|void
name|e_shstrndx
parameter_list|(
name|uint16_t
name|shstrndx
parameter_list|)
block|{
name|_eh
operator|.
name|e_shstrndx
operator|=
name|shstrndx
expr_stmt|;
block|}
name|uint64_t
name|fileSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|Kind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ELFHeader
return|;
block|}
name|int
name|getContentType
argument_list|()
specifier|const
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|virtual
name|void
name|doPreFlight
parameter_list|()
block|{}
name|void
name|finalize
parameter_list|()
block|{
name|_eh
operator|.
name|e_ident
index|[
name|llvm
operator|::
name|ELF
operator|::
name|EI_CLASS
index|]
operator|=
operator|(
name|ELFT
operator|::
name|Is64Bits
operator|)
condition|?
name|llvm
operator|::
name|ELF
operator|::
name|ELFCLASS64
else|:
name|llvm
operator|::
name|ELF
operator|::
name|ELFCLASS32
expr_stmt|;
name|_eh
operator|.
name|e_ident
index|[
name|llvm
operator|::
name|ELF
operator|::
name|EI_DATA
index|]
operator|=
operator|(
name|ELFT
operator|::
name|TargetEndianness
operator|==
name|llvm
operator|::
name|support
operator|::
name|little
operator|)
condition|?
name|llvm
operator|::
name|ELF
operator|::
name|ELFDATA2LSB
else|:
name|llvm
operator|::
name|ELF
operator|::
name|ELFDATA2MSB
expr_stmt|;
name|_eh
operator|.
name|e_type
operator|=
name|this
operator|->
name|_context
operator|.
name|getOutputELFType
argument_list|()
expr_stmt|;
name|_eh
operator|.
name|e_machine
operator|=
name|this
operator|->
name|_context
operator|.
name|getOutputMachine
argument_list|()
expr_stmt|;
block|}
name|private
label|:
name|Elf_Ehdr
name|_eh
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|ELFHeader
operator|<
name|ELFT
operator|>
operator|::
name|ELFHeader
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|context
argument_list|)
operator|:
name|Chunk
operator|<
name|ELFT
operator|>
operator|(
literal|"elfhdr"
operator|,
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ELFHeader
operator|,
name|context
operator|)
block|{
name|this
operator|->
name|_alignment
operator|=
name|ELFT
operator|::
name|Is64Bits
operator|?
literal|8
operator|:
literal|4
block|;
name|this
operator|->
name|_fsize
operator|=
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
block|;
name|this
operator|->
name|_msize
operator|=
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
block|;
name|memset
argument_list|(
name|_eh
operator|.
name|e_ident
argument_list|,
literal|0
argument_list|,
name|llvm
operator|::
name|ELF
operator|::
name|EI_NIDENT
argument_list|)
block|;
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_MAG0
argument_list|,
literal|0x7f
argument_list|)
block|;
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_MAG1
argument_list|,
literal|'E'
argument_list|)
block|;
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_MAG2
argument_list|,
literal|'L'
argument_list|)
block|;
name|e_ident
argument_list|(
name|llvm
operator|::
name|ELF
operator|::
name|EI_MAG3
argument_list|,
literal|'F'
argument_list|)
block|;
name|e_ehsize
argument_list|(
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
argument_list|)
block|;
name|e_flags
argument_list|(
literal|0
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ELFHeader
operator|<
name|ELFT
operator|>
operator|::
name|write
argument_list|(
argument|ELFWriter *writer
argument_list|,
argument|TargetLayout<ELFT>&layout
argument_list|,
argument|llvm::FileOutputBuffer&buffer
argument_list|)
block|{
name|uint8_t
operator|*
name|chunkBuffer
operator|=
name|buffer
operator|.
name|getBufferStart
argument_list|()
block|;
name|uint8_t
operator|*
name|atomContent
operator|=
name|chunkBuffer
operator|+
name|this
operator|->
name|fileOffset
argument_list|()
block|;
name|memcpy
argument_list|(
name|atomContent
argument_list|,
operator|&
name|_eh
argument_list|,
name|fileSize
argument_list|()
argument_list|)
block|; }
comment|/// \brief An ProgramHeader represents the Elf[32/64]_Phdr structure at the
comment|///        start of an ELF executable file.
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ProgramHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Phdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Phdr
expr_stmt|;
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|Elf_Phdr
operator|*
operator|>
operator|::
name|iterator
name|PhIterT
expr_stmt|;
typedef|typedef
name|typename
name|std
operator|::
name|reverse_iterator
operator|<
name|PhIterT
operator|>
name|ReversePhIterT
expr_stmt|;
comment|/// \brief Find a program header entry, given the type of entry that
comment|/// we are looking for
name|class
name|FindPhdr
block|{
name|public
label|:
name|FindPhdr
argument_list|(
argument|uint64_t type
argument_list|,
argument|uint64_t flags
argument_list|,
argument|uint64_t flagsClear
argument_list|)
block|:
name|_type
argument_list|(
name|type
argument_list|)
operator|,
name|_flags
argument_list|(
name|flags
argument_list|)
operator|,
name|_flagsClear
argument_list|(
argument|flagsClear
argument_list|)
block|{     }
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|llvm
operator|::
name|object
operator|::
name|Elf_Phdr_Impl
operator|<
name|ELFT
operator|>
operator|*
name|j
operator|)
specifier|const
block|{
return|return
operator|(
operator|(
name|j
operator|->
name|p_type
operator|==
name|_type
operator|)
operator|&&
operator|(
operator|(
name|j
operator|->
name|p_flags
operator|&
name|_flags
operator|)
operator|==
name|_flags
operator|)
operator|&&
operator|(
operator|!
operator|(
name|j
operator|->
name|p_flags
operator|&
name|_flagsClear
operator|)
operator|)
operator|)
return|;
block|}
name|private
label|:
name|uint64_t
name|_type
decl_stmt|;
name|uint64_t
name|_flags
decl_stmt|;
name|uint64_t
name|_flagsClear
decl_stmt|;
block|}
empty_stmt|;
name|ProgramHeader
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|context
argument_list|)
operator|:
name|Chunk
operator|<
name|ELFT
operator|>
operator|(
literal|"elfphdr"
operator|,
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ProgramHeader
operator|,
name|context
operator|)
block|{
name|this
operator|->
name|_alignment
operator|=
name|ELFT
operator|::
name|Is64Bits
operator|?
literal|8
operator|:
literal|4
block|;
name|resetProgramHeaders
argument_list|()
block|;   }
name|bool
name|addSegment
argument_list|(
name|Segment
operator|<
name|ELFT
operator|>
operator|*
name|segment
argument_list|)
expr_stmt|;
name|void
name|resetProgramHeaders
parameter_list|()
block|{
name|_phi
operator|=
name|_ph
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
name|uint64_t
name|fileSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
operator|*
name|_ph
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|Kind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ProgramHeader
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
decl_stmt|;
comment|/// \brief find a program header entry in the list of program headers
name|ReversePhIterT
name|findProgramHeader
parameter_list|(
name|uint64_t
name|type
parameter_list|,
name|uint64_t
name|flags
parameter_list|,
name|uint64_t
name|flagClear
parameter_list|)
block|{
return|return
name|std
operator|::
name|find_if
argument_list|(
name|_ph
operator|.
name|rbegin
argument_list|()
argument_list|,
name|_ph
operator|.
name|rend
argument_list|()
argument_list|,
name|FindPhdr
argument_list|(
name|type
argument_list|,
name|flags
argument_list|,
name|flagClear
argument_list|)
argument_list|)
return|;
block|}
name|PhIterT
name|begin
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|begin
argument_list|()
return|;
block|}
name|PhIterT
name|end
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|end
argument_list|()
return|;
block|}
name|ReversePhIterT
name|rbegin
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|ReversePhIterT
name|rend
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|rend
argument_list|()
return|;
block|}
name|virtual
name|void
name|doPreFlight
parameter_list|()
block|{}
name|void
name|finalize
parameter_list|()
block|{}
name|int64_t
name|entsize
parameter_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
return|;
block|}
name|int64_t
name|numHeaders
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|getContentType
argument_list|()
specifier|const
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
name|private
label|:
name|Elf_Phdr
modifier|*
name|allocateProgramHeader
parameter_list|(
name|bool
modifier|&
name|allocatedNew
parameter_list|)
block|{
name|Elf_Phdr
modifier|*
name|phdr
decl_stmt|;
if|if
condition|(
name|_phi
operator|==
name|_ph
operator|.
name|end
argument_list|()
condition|)
block|{
name|phdr
operator|=
name|new
argument_list|(
argument|_allocator
argument_list|)
name|Elf_Phdr
expr_stmt|;
name|_ph
operator|.
name|push_back
argument_list|(
name|phdr
argument_list|)
expr_stmt|;
name|_phi
operator|=
name|_ph
operator|.
name|end
argument_list|()
expr_stmt|;
name|allocatedNew
operator|=
name|true
expr_stmt|;
block|}
else|else
block|{
name|phdr
operator|=
operator|(
operator|*
name|_phi
operator|)
expr_stmt|;
operator|++
name|_phi
expr_stmt|;
block|}
return|return
name|phdr
return|;
block|}
name|std
operator|::
name|vector
operator|<
name|Elf_Phdr
operator|*
operator|>
name|_ph
expr_stmt|;
name|PhIterT
name|_phi
decl_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
name|_allocator
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|ProgramHeader
operator|<
name|ELFT
operator|>
operator|::
name|addSegment
argument_list|(
argument|Segment<ELFT> *segment
argument_list|)
block|{
name|bool
name|allocatedNew
operator|=
name|false
block|;
name|ELFLinkingContext
operator|::
name|OutputMagic
name|outputMagic
operator|=
name|this
operator|->
name|_context
operator|.
name|getOutputMagic
argument_list|()
block|;
comment|// For segments that are not a loadable segment, we
comment|// just pick the values directly from the segment as there
comment|// wouldnt be any slices within that
if|if
condition|(
name|segment
operator|->
name|segmentType
argument_list|()
operator|!=
name|llvm
operator|::
name|ELF
operator|::
name|PT_LOAD
condition|)
block|{
name|Elf_Phdr
modifier|*
name|phdr
init|=
name|allocateProgramHeader
argument_list|(
name|allocatedNew
argument_list|)
decl_stmt|;
name|phdr
operator|->
name|p_type
operator|=
name|segment
operator|->
name|segmentType
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_offset
operator|=
name|segment
operator|->
name|fileOffset
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_vaddr
operator|=
name|segment
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_paddr
operator|=
name|segment
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_filesz
operator|=
name|segment
operator|->
name|fileSize
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_memsz
operator|=
name|segment
operator|->
name|memSize
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_flags
operator|=
name|segment
operator|->
name|flags
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_align
operator|=
name|segment
operator|->
name|alignment
argument_list|()
expr_stmt|;
name|this
operator|->
name|_fsize
operator|=
name|fileSize
argument_list|()
expr_stmt|;
name|this
operator|->
name|_msize
operator|=
name|this
operator|->
name|_fsize
expr_stmt|;
return|return
name|allocatedNew
return|;
block|}
end_expr_stmt

begin_comment
comment|// For all other segments, use the slice
end_comment

begin_comment
comment|// to derive program headers
end_comment

begin_for
for|for
control|(
name|auto
name|slice
range|:
name|segment
operator|->
name|slices
argument_list|()
control|)
block|{
name|Elf_Phdr
modifier|*
name|phdr
init|=
name|allocateProgramHeader
argument_list|(
name|allocatedNew
argument_list|)
decl_stmt|;
name|phdr
operator|->
name|p_type
operator|=
name|segment
operator|->
name|segmentType
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_offset
operator|=
name|slice
operator|->
name|fileOffset
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_vaddr
operator|=
name|slice
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_paddr
operator|=
name|slice
operator|->
name|virtualAddr
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_filesz
operator|=
name|slice
operator|->
name|fileSize
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_memsz
operator|=
name|slice
operator|->
name|memSize
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_flags
operator|=
name|segment
operator|->
name|flags
argument_list|()
expr_stmt|;
name|phdr
operator|->
name|p_align
operator|=
name|slice
operator|->
name|alignment
argument_list|()
expr_stmt|;
name|uint64_t
name|segPageSize
init|=
name|segment
operator|->
name|pageSize
argument_list|()
decl_stmt|;
name|uint64_t
name|sliceAlign
init|=
name|slice
operator|->
name|alignment
argument_list|()
decl_stmt|;
comment|// Alignment of PT_LOAD segments are set to the page size, but if the
comment|// alignment of the slice is greater than the page size, set the alignment
comment|// of the segment appropriately.
if|if
condition|(
name|outputMagic
operator|!=
name|ELFLinkingContext
operator|::
name|OutputMagic
operator|::
name|NMAGIC
operator|&&
name|outputMagic
operator|!=
name|ELFLinkingContext
operator|::
name|OutputMagic
operator|::
name|OMAGIC
condition|)
block|{
name|phdr
operator|->
name|p_align
operator|=
operator|(
name|phdr
operator|->
name|p_type
operator|==
name|llvm
operator|::
name|ELF
operator|::
name|PT_LOAD
operator|)
condition|?
operator|(
name|segPageSize
operator|<
name|sliceAlign
operator|)
condition|?
name|sliceAlign
else|:
name|segPageSize
else|:
name|sliceAlign
expr_stmt|;
block|}
else|else
name|phdr
operator|->
name|p_align
operator|=
name|slice
operator|->
name|alignment
argument_list|()
expr_stmt|;
block|}
end_for

begin_expr_stmt
name|this
operator|->
name|_fsize
operator|=
name|fileSize
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|this
operator|->
name|_msize
operator|=
name|this
operator|->
name|_fsize
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|allocatedNew
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|void
name|ProgramHeader
operator|<
name|ELFT
operator|>
operator|::
name|write
argument_list|(
argument|ELFWriter *writer
argument_list|,
argument|TargetLayout<ELFT>&layout
argument_list|,
argument|llvm::FileOutputBuffer&buffer
argument_list|)
block|{
name|uint8_t
operator|*
name|chunkBuffer
operator|=
name|buffer
operator|.
name|getBufferStart
argument_list|()
block|;
name|uint8_t
operator|*
name|dest
operator|=
name|chunkBuffer
operator|+
name|this
operator|->
name|fileOffset
argument_list|()
block|;
for|for
control|(
name|auto
name|phi
range|:
name|_ph
control|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|phi
argument_list|,
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
argument_list|)
expr_stmt|;
name|dest
operator|+=
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/// \brief An SectionHeader represents the Elf[32/64]_Shdr structure
end_comment

begin_comment
comment|/// at the end of the file
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SectionHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
name|SectionHeader
argument_list|(
argument|const ELFLinkingContext&
argument_list|,
argument|int32_t order
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|appendSection
argument_list|(
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|section
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|updateSection
argument_list|(
name|Section
operator|<
name|ELFT
operator|>
operator|*
name|section
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|getChunkKind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|SectionHeader
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|setStringSection
argument_list|(
name|StringTable
operator|<
name|ELFT
operator|>
operator|*
name|s
argument_list|)
block|{
name|_stringSection
operator|=
name|s
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|virtual
name|void
name|doPreFlight
parameter_list|()
block|{}
end_function

begin_function
name|void
name|finalize
parameter_list|()
block|{}
end_function

begin_expr_stmt
name|uint64_t
name|fileSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|*
name|_sectionInfo
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|uint64_t
name|entsize
parameter_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|int
name|getContentType
argument_list|()
specifier|const
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
end_expr_stmt

begin_function
name|uint64_t
name|numHeaders
parameter_list|()
block|{
return|return
name|_sectionInfo
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|StringTable
operator|<
name|ELFT
operator|>
operator|*
name|_stringSection
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Elf_Shdr
operator|*
operator|>
name|_sectionInfo
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|BumpPtrAllocator
name|_sectionAllocate
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|SectionHeader
operator|<
name|ELFT
operator|>
operator|::
name|SectionHeader
argument_list|(
argument|const ELFLinkingContext&context
argument_list|,
argument|int32_t order
argument_list|)
operator|:
name|Chunk
operator|<
name|ELFT
operator|>
operator|(
literal|"shdr"
operator|,
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|SectionHeader
operator|,
name|context
operator|)
block|{
name|this
operator|->
name|_fsize
operator|=
literal|0
block|;
name|this
operator|->
name|_alignment
operator|=
literal|8
block|;
name|this
operator|->
name|setOrder
argument_list|(
name|order
argument_list|)
block|;
comment|// The first element in the list is always NULL
name|Elf_Shdr
operator|*
name|nullshdr
operator|=
name|new
argument_list|(
argument|_sectionAllocate.Allocate<Elf_Shdr>()
argument_list|)
name|Elf_Shdr
block|;
operator|::
name|memset
argument_list|(
name|nullshdr
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
argument_list|)
block|;
name|_sectionInfo
operator|.
name|push_back
argument_list|(
name|nullshdr
argument_list|)
block|;
name|this
operator|->
name|_fsize
operator|+=
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|SectionHeader
operator|<
name|ELFT
operator|>
operator|::
name|appendSection
argument_list|(
argument|OutputSection<ELFT> *section
argument_list|)
block|{
name|Elf_Shdr
operator|*
name|shdr
operator|=
name|new
argument_list|(
argument|_sectionAllocate.Allocate<Elf_Shdr>()
argument_list|)
name|Elf_Shdr
block|;
name|shdr
operator|->
name|sh_name
operator|=
name|_stringSection
operator|->
name|addString
argument_list|(
name|section
operator|->
name|name
argument_list|()
argument_list|)
block|;
name|shdr
operator|->
name|sh_type
operator|=
name|section
operator|->
name|type
argument_list|()
block|;
name|shdr
operator|->
name|sh_flags
operator|=
name|section
operator|->
name|flags
argument_list|()
block|;
name|shdr
operator|->
name|sh_offset
operator|=
name|section
operator|->
name|fileOffset
argument_list|()
block|;
name|shdr
operator|->
name|sh_addr
operator|=
name|section
operator|->
name|virtualAddr
argument_list|()
block|;
if|if
condition|(
name|section
operator|->
name|isLoadableSection
argument_list|()
condition|)
name|shdr
operator|->
name|sh_size
operator|=
name|section
operator|->
name|memSize
argument_list|()
expr_stmt|;
else|else
name|shdr
operator|->
name|sh_size
operator|=
name|section
operator|->
name|fileSize
argument_list|()
expr_stmt|;
name|shdr
operator|->
name|sh_link
operator|=
name|section
operator|->
name|link
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|shdr
operator|->
name|sh_info
operator|=
name|section
operator|->
name|shinfo
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|shdr
operator|->
name|sh_addralign
operator|=
name|section
operator|->
name|alignment
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|shdr
operator|->
name|sh_entsize
operator|=
name|section
operator|->
name|entsize
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_sectionInfo
operator|.
name|push_back
argument_list|(
name|shdr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ELFT
operator|>
name|void
name|SectionHeader
operator|<
name|ELFT
operator|>
operator|::
name|updateSection
argument_list|(
argument|Section<ELFT> *section
argument_list|)
block|{
name|Elf_Shdr
operator|*
name|shdr
operator|=
name|_sectionInfo
index|[
name|section
operator|->
name|ordinal
argument_list|()
index|]
block|;
name|shdr
operator|->
name|sh_type
operator|=
name|section
operator|->
name|getType
argument_list|()
block|;
name|shdr
operator|->
name|sh_flags
operator|=
name|section
operator|->
name|getFlags
argument_list|()
block|;
name|shdr
operator|->
name|sh_offset
operator|=
name|section
operator|->
name|fileOffset
argument_list|()
block|;
name|shdr
operator|->
name|sh_addr
operator|=
name|section
operator|->
name|virtualAddr
argument_list|()
block|;
name|shdr
operator|->
name|sh_size
operator|=
name|section
operator|->
name|fileSize
argument_list|()
block|;
name|shdr
operator|->
name|sh_link
operator|=
name|section
operator|->
name|getLink
argument_list|()
block|;
name|shdr
operator|->
name|sh_info
operator|=
name|section
operator|->
name|getInfo
argument_list|()
block|;
name|shdr
operator|->
name|sh_addralign
operator|=
name|section
operator|->
name|alignment
argument_list|()
block|;
name|shdr
operator|->
name|sh_entsize
operator|=
name|section
operator|->
name|getEntSize
argument_list|()
block|; }
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|SectionHeader
operator|<
name|ELFT
operator|>
operator|::
name|write
argument_list|(
argument|ELFWriter *writer
argument_list|,
argument|TargetLayout<ELFT>&layout
argument_list|,
argument|llvm::FileOutputBuffer&buffer
argument_list|)
block|{
name|uint8_t
operator|*
name|chunkBuffer
operator|=
name|buffer
operator|.
name|getBufferStart
argument_list|()
block|;
name|uint8_t
operator|*
name|dest
operator|=
name|chunkBuffer
operator|+
name|this
operator|->
name|fileOffset
argument_list|()
block|;
for|for
control|(
name|auto
name|shi
range|:
name|_sectionInfo
control|)
block|{
name|memcpy
argument_list|(
name|dest
argument_list|,
name|shi
argument_list|,
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
argument_list|)
expr_stmt|;
name|dest
operator|+=
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
expr_stmt|;
block|}
name|_stringSection
operator|->
name|write
argument_list|(
name|writer
argument_list|,
name|layout
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|} }
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

