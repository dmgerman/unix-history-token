begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/HeaderChunks.h --------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_HEADER_CHUNKS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_HEADER_CHUNKS_H
end_define

begin_include
include|#
directive|include
file|"SegmentChunks.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileOutputBuffer.h"
end_include

begin_comment
comment|/// \brief An Header represents the Elf[32/64]_Ehdr structure at the
end_comment

begin_comment
comment|///        start of an ELF executable file.
end_comment

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ELFHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
name|ELFHeader
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
argument_list|)
expr_stmt|;
name|void
name|e_ident
parameter_list|(
name|int
name|I
parameter_list|,
name|unsigned
name|char
name|C
parameter_list|)
block|{
name|_eh
operator|.
name|e_ident
index|[
name|I
index|]
operator|=
name|C
expr_stmt|;
block|}
name|void
name|e_type
parameter_list|(
name|uint16_t
name|type
parameter_list|)
block|{
name|_eh
operator|.
name|e_type
operator|=
name|type
expr_stmt|;
block|}
name|void
name|e_machine
parameter_list|(
name|uint16_t
name|machine
parameter_list|)
block|{
name|_eh
operator|.
name|e_machine
operator|=
name|machine
expr_stmt|;
block|}
name|void
name|e_version
parameter_list|(
name|uint32_t
name|version
parameter_list|)
block|{
name|_eh
operator|.
name|e_version
operator|=
name|version
expr_stmt|;
block|}
name|void
name|e_entry
parameter_list|(
name|int64_t
name|entry
parameter_list|)
block|{
name|_eh
operator|.
name|e_entry
operator|=
name|entry
expr_stmt|;
block|}
name|void
name|e_phoff
parameter_list|(
name|int64_t
name|phoff
parameter_list|)
block|{
name|_eh
operator|.
name|e_phoff
operator|=
name|phoff
expr_stmt|;
block|}
name|void
name|e_shoff
parameter_list|(
name|int64_t
name|shoff
parameter_list|)
block|{
name|_eh
operator|.
name|e_shoff
operator|=
name|shoff
expr_stmt|;
block|}
name|void
name|e_flags
parameter_list|(
name|uint32_t
name|flags
parameter_list|)
block|{
name|_eh
operator|.
name|e_flags
operator|=
name|flags
expr_stmt|;
block|}
name|void
name|e_ehsize
parameter_list|(
name|uint16_t
name|ehsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_ehsize
operator|=
name|ehsize
expr_stmt|;
block|}
name|void
name|e_phentsize
parameter_list|(
name|uint16_t
name|phentsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_phentsize
operator|=
name|phentsize
expr_stmt|;
block|}
name|void
name|e_phnum
parameter_list|(
name|uint16_t
name|phnum
parameter_list|)
block|{
name|_eh
operator|.
name|e_phnum
operator|=
name|phnum
expr_stmt|;
block|}
name|void
name|e_shentsize
parameter_list|(
name|uint16_t
name|shentsize
parameter_list|)
block|{
name|_eh
operator|.
name|e_shentsize
operator|=
name|shentsize
expr_stmt|;
block|}
name|void
name|e_shnum
parameter_list|(
name|uint16_t
name|shnum
parameter_list|)
block|{
name|_eh
operator|.
name|e_shnum
operator|=
name|shnum
expr_stmt|;
block|}
name|void
name|e_shstrndx
parameter_list|(
name|uint16_t
name|shstrndx
parameter_list|)
block|{
name|_eh
operator|.
name|e_shstrndx
operator|=
name|shstrndx
expr_stmt|;
block|}
name|uint64_t
name|fileSize
argument_list|()
specifier|const
name|override
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Ehdr
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|kind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ELFHeader
return|;
block|}
name|int
name|getContentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|private
label|:
name|Elf_Ehdr
name|_eh
decl_stmt|;
block|}
empty_stmt|;
comment|/// \brief An ProgramHeader represents the Elf[32/64]_Phdr structure at the
comment|///        start of an ELF executable file.
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ProgramHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Phdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Phdr
expr_stmt|;
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|Elf_Phdr
operator|*
operator|>
operator|::
name|iterator
name|PhIterT
expr_stmt|;
typedef|typedef
name|typename
name|std
operator|::
name|reverse_iterator
operator|<
name|PhIterT
operator|>
name|ReversePhIterT
expr_stmt|;
name|ProgramHeader
argument_list|(
specifier|const
name|ELFLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|Chunk
operator|<
name|ELFT
operator|>
operator|(
literal|"elfphdr"
operator|,
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ProgramHeader
operator|,
name|ctx
operator|)
block|{
name|this
operator|->
name|_alignment
operator|=
name|ELFT
operator|::
name|Is64Bits
operator|?
literal|8
operator|:
literal|4
block|;
name|resetProgramHeaders
argument_list|()
block|;   }
name|bool
name|addSegment
argument_list|(
name|Segment
operator|<
name|ELFT
operator|>
operator|*
name|segment
argument_list|)
expr_stmt|;
name|void
name|resetProgramHeaders
parameter_list|()
block|{
name|_phi
operator|=
name|_ph
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
name|uint64_t
name|fileSize
argument_list|()
specifier|const
name|override
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
operator|*
name|_ph
operator|.
name|size
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|kind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|ProgramHeader
return|;
block|}
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
name|PhIterT
name|begin
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|begin
argument_list|()
return|;
block|}
name|PhIterT
name|end
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|end
argument_list|()
return|;
block|}
name|ReversePhIterT
name|rbegin
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|ReversePhIterT
name|rend
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|rend
argument_list|()
return|;
block|}
name|int64_t
name|entsize
parameter_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Phdr
argument_list|)
return|;
block|}
name|int64_t
name|numHeaders
parameter_list|()
block|{
return|return
name|_ph
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|getContentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
name|private
label|:
name|Elf_Phdr
modifier|*
name|allocateProgramHeader
parameter_list|(
name|bool
modifier|&
name|allocatedNew
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|Elf_Phdr
operator|*
operator|>
name|_ph
expr_stmt|;
name|PhIterT
name|_phi
decl_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
name|_allocator
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief An SectionHeader represents the Elf[32/64]_Shdr structure
end_comment

begin_comment
comment|/// at the end of the file
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SectionHeader
operator|:
name|public
name|Chunk
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Shdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Shdr
expr_stmt|;
name|SectionHeader
argument_list|(
argument|const ELFLinkingContext&
argument_list|,
argument|int32_t order
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|appendSection
argument_list|(
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|section
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|updateSection
argument_list|(
name|Section
operator|<
name|ELFT
operator|>
operator|*
name|section
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|classof
argument_list|(
specifier|const
name|Chunk
operator|<
name|ELFT
operator|>
operator|*
name|c
argument_list|)
block|{
return|return
name|c
operator|->
name|kind
argument_list|()
operator|==
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|Kind
operator|::
name|SectionHeader
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|setStringSection
argument_list|(
name|StringTable
operator|<
name|ELFT
operator|>
operator|*
name|s
argument_list|)
block|{
name|_stringSection
operator|=
name|s
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|write
argument_list|(
name|ELFWriter
operator|*
name|writer
argument_list|,
name|TargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|,
name|llvm
operator|::
name|FileOutputBuffer
operator|&
name|buffer
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|uint64_t
name|fileSize
argument_list|()
specifier|const
name|override
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
operator|*
name|_sectionInfo
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|uint64_t
name|entsize
parameter_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|Elf_Shdr
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|int
name|getContentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|Chunk
operator|<
name|ELFT
operator|>
operator|::
name|ContentType
operator|::
name|Header
return|;
block|}
end_expr_stmt

begin_function
name|uint64_t
name|numHeaders
parameter_list|()
block|{
return|return
name|_sectionInfo
operator|.
name|size
argument_list|()
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|StringTable
operator|<
name|ELFT
operator|>
operator|*
name|_stringSection
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Elf_Shdr
operator|*
operator|>
name|_sectionInfo
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|BumpPtrAllocator
name|_sectionAllocate
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

