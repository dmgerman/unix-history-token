begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Hexagon/HexagonTargetHandler.h ----------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGON_TARGET_HANDLER_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGON_TARGET_HANDLER_H
end_define

begin_include
include|#
directive|include
file|"DefaultTargetHandler.h"
end_include

begin_include
include|#
directive|include
file|"HexagonELFReader.h"
end_include

begin_include
include|#
directive|include
file|"HexagonExecutableAtoms.h"
end_include

begin_include
include|#
directive|include
file|"HexagonRelocationHandler.h"
end_include

begin_include
include|#
directive|include
file|"HexagonSectionChunks.h"
end_include

begin_include
include|#
directive|include
file|"TargetLayout.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|HexagonLinkingContext
decl_stmt|;
comment|/// \brief TargetLayout for Hexagon
name|template
operator|<
name|class
name|HexagonELFType
operator|>
name|class
name|HexagonTargetLayout
name|final
operator|:
name|public
name|TargetLayout
operator|<
name|HexagonELFType
operator|>
block|{
name|public
operator|:
expr|enum
name|HexagonSectionOrder
block|{
name|ORDER_SDATA
operator|=
literal|205
block|}
block|;
name|HexagonTargetLayout
argument_list|(
name|HexagonLinkingContext
operator|&
name|hti
argument_list|)
operator|:
name|TargetLayout
operator|<
name|HexagonELFType
operator|>
operator|(
name|hti
operator|)
block|,
name|_sdataSection
argument_list|(
name|nullptr
argument_list|)
block|,
name|_gotSymAtom
argument_list|(
name|nullptr
argument_list|)
block|,
name|_cachedGotSymAtom
argument_list|(
argument|false
argument_list|)
block|{
name|_sdataSection
operator|=
name|new
argument_list|(
argument|_alloc
argument_list|)
name|SDataSection
operator|<
name|HexagonELFType
operator|>
operator|(
name|hti
operator|)
block|;   }
comment|/// \brief Return the section order for a input section
name|virtual
name|Layout
operator|::
name|SectionOrder
name|getSectionOrder
argument_list|(
argument|StringRef name
argument_list|,
argument|int32_t contentType
argument_list|,
argument|int32_t contentPermissions
argument_list|)
block|{
if|if
condition|(
operator|(
name|contentType
operator|==
name|DefinedAtom
operator|::
name|typeDataFast
operator|)
operator|||
operator|(
name|contentType
operator|==
name|DefinedAtom
operator|::
name|typeZeroFillFast
operator|)
condition|)
return|return
name|ORDER_SDATA
return|;
return|return
name|DefaultLayout
operator|<
name|HexagonELFType
operator|>
operator|::
name|getSectionOrder
argument_list|(
name|name
argument_list|,
name|contentType
argument_list|,
name|contentPermissions
argument_list|)
return|;
block|}
comment|/// \brief Return the appropriate input section name.
name|virtual
name|StringRef
name|getInputSectionName
argument_list|(
specifier|const
name|DefinedAtom
operator|*
name|da
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|da
operator|->
name|contentType
argument_list|()
condition|)
block|{
case|case
name|DefinedAtom
operator|::
name|typeDataFast
case|:
case|case
name|DefinedAtom
operator|::
name|typeZeroFillFast
case|:
return|return
literal|".sdata"
return|;
default|default:
break|break;
block|}
return|return
name|DefaultLayout
operator|<
name|HexagonELFType
operator|>
operator|::
name|getInputSectionName
argument_list|(
name|da
argument_list|)
return|;
block|}
comment|/// \brief Gets or creates a section.
name|virtual
name|AtomSection
operator|<
name|HexagonELFType
operator|>
operator|*
name|createSection
argument_list|(
argument|StringRef name
argument_list|,
argument|int32_t contentType
argument_list|,
argument|DefinedAtom::ContentPermissions contentPermissions
argument_list|,
argument|Layout::SectionOrder sectionOrder
argument_list|)
block|{
if|if
condition|(
operator|(
name|contentType
operator|==
name|DefinedAtom
operator|::
name|typeDataFast
operator|)
operator|||
operator|(
name|contentType
operator|==
name|DefinedAtom
operator|::
name|typeZeroFillFast
operator|)
condition|)
return|return
name|_sdataSection
return|;
return|return
name|DefaultLayout
operator|<
name|HexagonELFType
operator|>
operator|::
name|createSection
argument_list|(
name|name
argument_list|,
name|contentType
argument_list|,
name|contentPermissions
argument_list|,
name|sectionOrder
argument_list|)
return|;
block|}
comment|/// \brief get the segment type for the section thats defined by the target
name|virtual
name|Layout
operator|::
name|SegmentType
name|getSegmentType
argument_list|(
argument|Section<HexagonELFType> *section
argument_list|)
specifier|const
block|{
if|if
condition|(
name|section
operator|->
name|order
argument_list|()
operator|==
name|ORDER_SDATA
condition|)
return|return
name|PT_LOAD
return|;
return|return
name|DefaultLayout
operator|<
name|HexagonELFType
operator|>
operator|::
name|getSegmentType
argument_list|(
name|section
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|Section
operator|<
name|HexagonELFType
operator|>
operator|*
name|getSDataSection
argument_list|()
specifier|const
block|{
return|return
name|_sdataSection
return|;
block|}
end_expr_stmt

begin_function
name|uint64_t
name|getGOTSymAddr
parameter_list|()
block|{
if|if
condition|(
operator|!
name|_cachedGotSymAtom
condition|)
block|{
name|auto
name|gotAtomIter
init|=
name|this
operator|->
name|findAbsoluteAtom
argument_list|(
literal|"_GLOBAL_OFFSET_TABLE_"
argument_list|)
decl_stmt|;
name|_gotSymAtom
operator|=
operator|(
operator|*
name|gotAtomIter
operator|)
expr_stmt|;
name|_cachedGotSymAtom
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|_gotSymAtom
condition|)
return|return
name|_gotSymAtom
operator|->
name|_virtualAddr
return|;
return|return
literal|0
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|llvm
operator|::
name|BumpPtrAllocator
name|_alloc
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SDataSection
operator|<
name|HexagonELFType
operator|>
operator|*
name|_sdataSection
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|AtomLayout
modifier|*
name|_gotSymAtom
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|_cachedGotSymAtom
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// \brief TargetHandler for Hexagon
end_comment

begin_decl_stmt
name|class
name|HexagonTargetHandler
name|final
range|:
name|public
name|DefaultTargetHandler
operator|<
name|HexagonELFType
operator|>
block|{
name|public
operator|:
name|HexagonTargetHandler
argument_list|(
name|HexagonLinkingContext
operator|&
name|targetInfo
argument_list|)
block|;
name|void
name|registerRelocationNames
argument_list|(
argument|Registry&registry
argument_list|)
name|override
block|;
specifier|const
name|HexagonTargetRelocationHandler
operator|&
name|getRelocationHandler
argument_list|()
specifier|const
name|override
block|{
return|return
operator|*
operator|(
name|_hexagonRelocationHandler
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
name|HexagonTargetLayout
operator|<
name|HexagonELFType
operator|>
operator|&
name|getTargetLayout
argument_list|()
name|override
block|{
return|return
operator|*
operator|(
name|_hexagonTargetLayout
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getObjReader
argument_list|()
name|override
block|{
return|return
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
operator|(
name|new
name|HexagonELFObjectReader
argument_list|(
name|_hexagonLinkingContext
argument_list|)
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
name|getDSOReader
argument_list|()
name|override
block|{
return|return
name|std
operator|::
name|unique_ptr
operator|<
name|Reader
operator|>
operator|(
name|new
name|HexagonELFDSOReader
argument_list|(
name|_hexagonLinkingContext
argument_list|)
operator|)
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Writer
operator|>
name|getWriter
argument_list|()
name|override
block|;
name|private
operator|:
name|llvm
operator|::
name|BumpPtrAllocator
name|_alloc
block|;
specifier|static
specifier|const
name|Registry
operator|::
name|KindStrings
name|kindStrings
index|[]
block|;
name|HexagonLinkingContext
operator|&
name|_hexagonLinkingContext
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|HexagonRuntimeFile
operator|<
name|HexagonELFType
operator|>
expr|>
name|_hexagonRuntimeFile
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|HexagonTargetLayout
operator|<
name|HexagonELFType
operator|>>
name|_hexagonTargetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|HexagonTargetRelocationHandler
operator|>
name|_hexagonRelocationHandler
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace elf
end_comment

begin_comment
unit|}
comment|// end namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

