begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/Hexagon/HexagonExecutableWriter.h -------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGON_EXECUTABLE_WRITER_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGON_EXECUTABLE_WRITER_H
end_define

begin_include
include|#
directive|include
file|"ExecutableWriter.h"
end_include

begin_include
include|#
directive|include
file|"HexagonELFWriters.h"
end_include

begin_include
include|#
directive|include
file|"HexagonExecutableAtoms.h"
end_include

begin_include
include|#
directive|include
file|"HexagonLinkingContext.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|>
name|class
name|HexagonTargetLayout
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|HexagonExecutableWriter
operator|:
name|public
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|,
name|public
name|HexagonELFWriter
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|HexagonExecutableWriter
argument_list|(
name|HexagonLinkingContext
operator|&
name|context
argument_list|,
name|HexagonTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
block|;
name|protected
operator|:
comment|// Add any runtime files and their atoms to the output
name|virtual
name|bool
name|createImplicitFiles
argument_list|(
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|File
operator|>>
operator|&
argument_list|)
block|;
name|virtual
name|void
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|virtual
name|std
operator|::
name|error_code
name|setELFHeader
argument_list|()
block|{
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|()
block|;
name|HexagonELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|setELFHeader
argument_list|(
operator|*
name|this
operator|->
name|_elfHeader
argument_list|)
block|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
name|private
operator|:
name|void
name|addDefaultAtoms
argument_list|()
block|{
name|_hexagonRuntimeFile
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_SDA_BASE_"
argument_list|)
block|;
if|if
condition|(
name|this
operator|->
name|_context
operator|.
name|isDynamic
argument_list|()
condition|)
block|{
name|_hexagonRuntimeFile
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_GLOBAL_OFFSET_TABLE_"
argument_list|)
expr_stmt|;
name|_hexagonRuntimeFile
operator|->
name|addAbsoluteAtom
argument_list|(
literal|"_DYNAMIC"
argument_list|)
expr_stmt|;
block|}
block|}
name|HexagonLinkingContext
operator|&
name|_hexagonLinkingContext
block|;
name|HexagonTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|_hexagonTargetLayout
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|HexagonRuntimeFile
operator|<
name|ELFT
operator|>>
name|_hexagonRuntimeFile
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|HexagonExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|HexagonExecutableWriter
argument_list|(
name|HexagonLinkingContext
operator|&
name|context
argument_list|,
name|HexagonTargetLayout
operator|<
name|ELFT
operator|>
operator|&
name|layout
argument_list|)
operator|:
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|layout
operator|)
operator|,
name|HexagonELFWriter
operator|<
name|ELFT
operator|>
operator|(
name|context
operator|,
name|layout
operator|)
operator|,
name|_hexagonLinkingContext
argument_list|(
name|context
argument_list|)
operator|,
name|_hexagonTargetLayout
argument_list|(
name|layout
argument_list|)
operator|,
name|_hexagonRuntimeFile
argument_list|(
argument|new HexagonRuntimeFile<ELFT>(context)
argument_list|)
block|{}
name|template
operator|<
name|class
name|ELFT
operator|>
name|bool
name|HexagonExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
block|{
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|createImplicitFiles
argument_list|(
name|result
argument_list|)
block|;
comment|// Add the default atoms as defined for hexagon
name|addDefaultAtoms
argument_list|()
block|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|_hexagonRuntimeFile
argument_list|)
argument_list|)
block|;
return|return
name|true
return|;
block|}
name|template
operator|<
name|class
name|ELFT
operator|>
name|void
name|HexagonExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|{
comment|// Finalize the atom values that are part of the parent.
name|ExecutableWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeDefaultAtomValues
argument_list|()
block|;
name|auto
name|sdabaseAtomIter
operator|=
name|_hexagonTargetLayout
operator|.
name|findAbsoluteAtom
argument_list|(
literal|"_SDA_BASE_"
argument_list|)
block|;
operator|(
operator|*
name|sdabaseAtomIter
operator|)
operator|->
name|_virtualAddr
operator|=
name|_hexagonTargetLayout
operator|.
name|getSDataSection
argument_list|()
operator|->
name|virtualAddr
argument_list|()
block|;
name|HexagonELFWriter
operator|<
name|ELFT
operator|>
operator|::
name|finalizeHexagonRuntimeAtomValues
argument_list|()
block|; }
block|}
comment|// namespace elf
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// HEXAGON_EXECUTABLE_WRITER_H
end_comment

end_unit

