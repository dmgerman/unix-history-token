begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/ELF/ELFReader.h -----------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_ELF_READER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_ELF_READER_H
end_define

begin_include
include|#
directive|include
file|"CreateELF.h"
end_include

begin_include
include|#
directive|include
file|"DynamicFile.h"
end_include

begin_include
include|#
directive|include
file|"ELFFile.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Reader.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|template
operator|<
name|typename
name|ELFT
operator|,
name|typename
name|ELFTraitsT
operator|,
name|typename
name|ContextT
operator|>
name|class
name|ELFObjectReader
operator|:
name|public
name|Reader
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
name|ELFObjectReader
argument_list|(
argument|ContextT&ctx
argument_list|,
argument|uint64_t machine
argument_list|)
operator|:
name|_ctx
argument_list|(
name|ctx
argument_list|)
operator|,
name|_machine
argument_list|(
argument|machine
argument_list|)
block|{}
name|bool
name|canParse
argument_list|(
argument|file_magic magic
argument_list|,
argument|StringRef
argument_list|,
argument|const MemoryBuffer&buf
argument_list|)
specifier|const
name|override
block|{
return|return
operator|(
name|magic
operator|==
name|llvm
operator|::
name|sys
operator|::
name|fs
operator|::
name|file_magic
operator|::
name|elf_relocatable
operator|&&
name|elfHeader
argument_list|(
name|buf
argument_list|)
operator|->
name|e_machine
operator|==
name|_machine
operator|)
return|;
block|}
name|std
operator|::
name|error_code
name|loadFile
argument_list|(
argument|std::unique_ptr<MemoryBuffer> mb
argument_list|,
argument|const class Registry&
argument_list|,
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
specifier|const
name|override
block|{
name|std
operator|::
name|size_t
name|maxAlignment
operator|=
literal|1ULL
operator|<<
name|llvm
operator|::
name|countTrailingZeros
argument_list|(
name|uintptr_t
argument_list|(
name|mb
operator|->
name|getBufferStart
argument_list|()
argument_list|)
argument_list|)
block|;
name|auto
name|f
operator|=
name|createELF
operator|<
name|ELFTraitsT
operator|>
operator|(
name|llvm
operator|::
name|object
operator|::
name|getElfArchType
argument_list|(
name|mb
operator|->
name|getBuffer
argument_list|()
argument_list|)
operator|,
name|maxAlignment
operator|,
name|std
operator|::
name|move
argument_list|(
name|mb
argument_list|)
operator|,
name|_ctx
operator|)
block|;
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|f
operator|.
name|getError
argument_list|()
condition|)
return|return
name|ec
return|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
operator|*
name|f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
block|}
specifier|const
name|Elf_Ehdr
modifier|*
name|elfHeader
argument_list|(
specifier|const
name|MemoryBuffer
operator|&
name|buf
argument_list|)
decl|const
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|buf
operator|.
name|getBuffer
argument_list|()
operator|.
name|data
argument_list|()
operator|)
decl_stmt|;
return|return
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Ehdr
operator|*
operator|>
operator|(
name|data
operator|)
operator|)
return|;
block|}
name|protected
label|:
name|ContextT
modifier|&
name|_ctx
decl_stmt|;
name|uint64_t
name|_machine
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|ELFT
operator|,
name|typename
name|ELFTraitsT
operator|,
name|typename
name|ContextT
operator|>
name|class
name|ELFDSOReader
operator|:
name|public
name|Reader
block|{
name|public
operator|:
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Ehdr_Impl
operator|<
name|ELFT
operator|>
name|Elf_Ehdr
expr_stmt|;
name|ELFDSOReader
argument_list|(
argument|ContextT&ctx
argument_list|,
argument|uint64_t machine
argument_list|)
operator|:
name|_ctx
argument_list|(
name|ctx
argument_list|)
operator|,
name|_machine
argument_list|(
argument|machine
argument_list|)
block|{}
name|bool
name|canParse
argument_list|(
argument|file_magic magic
argument_list|,
argument|StringRef
argument_list|,
argument|const MemoryBuffer&buf
argument_list|)
specifier|const
name|override
block|{
return|return
operator|(
name|magic
operator|==
name|llvm
operator|::
name|sys
operator|::
name|fs
operator|::
name|file_magic
operator|::
name|elf_shared_object
operator|&&
name|elfHeader
argument_list|(
name|buf
argument_list|)
operator|->
name|e_machine
operator|==
name|_machine
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|error_code
name|loadFile
argument_list|(
argument|std::unique_ptr<MemoryBuffer> mb
argument_list|,
argument|const class Registry&
argument_list|,
argument|std::vector<std::unique_ptr<File>>&result
argument_list|)
specifier|const
name|override
block|{
name|std
operator|::
name|size_t
name|maxAlignment
operator|=
literal|1ULL
operator|<<
name|llvm
operator|::
name|countTrailingZeros
argument_list|(
name|uintptr_t
argument_list|(
name|mb
operator|->
name|getBufferStart
argument_list|()
argument_list|)
argument_list|)
block|;
name|auto
name|f
operator|=
name|createELF
operator|<
name|ELFTraitsT
operator|>
operator|(
name|llvm
operator|::
name|object
operator|::
name|getElfArchType
argument_list|(
name|mb
operator|->
name|getBuffer
argument_list|()
argument_list|)
operator|,
name|maxAlignment
operator|,
name|std
operator|::
name|move
argument_list|(
name|mb
argument_list|)
operator|,
name|_ctx
operator|)
block|;
if|if
condition|(
name|std
operator|::
name|error_code
name|ec
operator|=
name|f
operator|.
name|getError
argument_list|()
condition|)
return|return
name|ec
return|;
name|result
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
operator|*
name|f
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|error_code
argument_list|()
return|;
end_return

begin_decl_stmt
unit|}    const
name|Elf_Ehdr
modifier|*
name|elfHeader
argument_list|(
specifier|const
name|MemoryBuffer
operator|&
name|buf
argument_list|)
decl|const
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
name|reinterpret_cast
operator|<
specifier|const
name|uint8_t
operator|*
operator|>
operator|(
name|buf
operator|.
name|getBuffer
argument_list|()
operator|.
name|data
argument_list|()
operator|)
decl_stmt|;
return|return
operator|(
name|reinterpret_cast
operator|<
specifier|const
name|Elf_Ehdr
operator|*
operator|>
operator|(
name|data
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|ContextT
modifier|&
name|_ctx
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|_machine
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLD_READER_WRITER_ELF_READER_H
end_comment

end_unit

