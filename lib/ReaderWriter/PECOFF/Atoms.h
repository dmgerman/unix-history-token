begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/PECOFF/Atoms.h ------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_PE_COFF_ATOMS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_PE_COFF_ATOMS_H
end_define

begin_include
include|#
directive|include
file|"lld/Core/File.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Simple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|pecoff
block|{
name|class
name|COFFDefinedAtom
decl_stmt|;
name|class
name|COFFUndefinedAtom
range|:
name|public
name|UndefinedAtom
block|{
name|public
operator|:
name|COFFUndefinedAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|,
argument|const UndefinedAtom *fallback = nullptr
argument_list|)
operator|:
name|_owningFile
argument_list|(
name|file
argument_list|)
block|,
name|_name
argument_list|(
name|name
argument_list|)
block|,
name|_fallback
argument_list|(
argument|fallback
argument_list|)
block|{}
specifier|const
name|File
operator|&
name|file
argument_list|()
specifier|const
name|override
block|{
return|return
name|_owningFile
return|;
block|}
name|StringRef
name|name
argument_list|()
specifier|const
name|override
block|{
return|return
name|_name
return|;
block|}
name|CanBeNull
name|canBeNull
argument_list|()
specifier|const
name|override
block|{
return|return
name|CanBeNull
operator|::
name|canBeNullNever
return|;
block|}
specifier|const
name|UndefinedAtom
operator|*
name|fallback
argument_list|()
specifier|const
name|override
block|{
return|return
name|_fallback
return|;
block|}
name|private
operator|:
specifier|const
name|File
operator|&
name|_owningFile
block|;
name|StringRef
name|_name
block|;
specifier|const
name|UndefinedAtom
operator|*
name|_fallback
block|; }
decl_stmt|;
comment|/// The base class of all COFF defined atoms. A derived class of
comment|/// COFFBaseDefinedAtom may represent atoms read from a file or atoms created
comment|/// by the linker. An example of the latter case is the jump table for symbols
comment|/// in a DLL.
name|class
name|COFFBaseDefinedAtom
range|:
name|public
name|DefinedAtom
block|{
name|public
operator|:
expr|enum
name|class
name|Kind
block|{
name|File
block|,
name|Internal
block|}
block|;
specifier|const
name|File
operator|&
name|file
argument_list|()
specifier|const
name|override
block|{
return|return
name|_file
return|;
block|}
name|StringRef
name|name
argument_list|()
specifier|const
name|override
block|{
return|return
name|_name
return|;
block|}
name|Interposable
name|interposable
argument_list|()
specifier|const
name|override
block|{
return|return
name|interposeNo
return|;
block|}
name|Merge
name|merge
argument_list|()
specifier|const
name|override
block|{
return|return
name|mergeNo
return|;
block|}
name|Alignment
name|alignment
argument_list|()
specifier|const
name|override
block|{
return|return
name|Alignment
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|StringRef
name|customSectionName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|""
return|;
block|}
name|DeadStripKind
name|deadStrip
argument_list|()
specifier|const
name|override
block|{
return|return
name|deadStripNormal
return|;
block|}
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|_kind
return|;
block|}
name|void
name|addReference
argument_list|(
argument|std::unique_ptr<SimpleReference> reference
argument_list|)
block|{
name|_references
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|reference
argument_list|)
argument_list|)
block|;   }
name|reference_iterator
name|begin
argument_list|()
specifier|const
name|override
block|{
return|return
name|reference_iterator
argument_list|(
operator|*
name|this
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
literal|0
operator|)
argument_list|)
return|;
block|}
name|reference_iterator
name|end
argument_list|()
specifier|const
name|override
block|{
return|return
name|reference_iterator
argument_list|(
operator|*
name|this
argument_list|,
name|reinterpret_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|_references
operator|.
name|size
argument_list|()
operator|)
argument_list|)
return|;
block|}
name|protected
operator|:
name|COFFBaseDefinedAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|,
argument|Kind kind
argument_list|)
operator|:
name|_file
argument_list|(
name|file
argument_list|)
block|,
name|_name
argument_list|(
name|name
argument_list|)
block|,
name|_kind
argument_list|(
argument|kind
argument_list|)
block|{}
name|private
operator|:
specifier|const
name|Reference
operator|*
name|derefIterator
argument_list|(
argument|const void *iter
argument_list|)
specifier|const
name|override
block|{
name|size_t
name|index
operator|=
name|reinterpret_cast
operator|<
name|size_t
operator|>
operator|(
name|iter
operator|)
block|;
return|return
name|_references
index|[
name|index
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|incrementIterator
argument_list|(
argument|const void *&iter
argument_list|)
specifier|const
name|override
block|{
name|size_t
name|index
operator|=
name|reinterpret_cast
operator|<
name|size_t
operator|>
operator|(
name|iter
operator|)
block|;
name|iter
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|index
operator|+
literal|1
operator|)
block|;   }
specifier|const
name|File
operator|&
name|_file
block|;
name|StringRef
name|_name
block|;
name|Kind
name|_kind
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SimpleReference
operator|>>
name|_references
block|; }
decl_stmt|;
comment|/// This is the root class of the atom read from a file. This class have two
comment|/// subclasses; one for the regular atom and another for the BSS atom.
name|class
name|COFFDefinedFileAtom
range|:
name|public
name|COFFBaseDefinedAtom
block|{
name|public
operator|:
name|COFFDefinedFileAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|uint64_t sectionSize
argument_list|,
argument|Scope scope
argument_list|,
argument|ContentType contentType
argument_list|,
argument|ContentPermissions perms
argument_list|,
argument|uint64_t ordinal
argument_list|)
operator|:
name|COFFBaseDefinedAtom
argument_list|(
name|file
argument_list|,
name|name
argument_list|,
name|Kind
operator|::
name|File
argument_list|)
block|,
name|_sectionName
argument_list|(
name|sectionName
argument_list|)
block|,
name|_sectionSize
argument_list|(
name|sectionSize
argument_list|)
block|,
name|_scope
argument_list|(
name|scope
argument_list|)
block|,
name|_contentType
argument_list|(
name|contentType
argument_list|)
block|,
name|_permissions
argument_list|(
name|perms
argument_list|)
block|,
name|_ordinal
argument_list|(
name|ordinal
argument_list|)
block|,
name|_alignment
argument_list|(
literal|0
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const COFFBaseDefinedAtom *atom
argument_list|)
block|{
return|return
name|atom
operator|->
name|getKind
argument_list|()
operator|==
name|Kind
operator|::
name|File
return|;
block|}
name|void
name|setAlignment
argument_list|(
argument|Alignment val
argument_list|)
block|{
name|_alignment
operator|=
name|val
block|; }
name|SectionChoice
name|sectionChoice
argument_list|()
specifier|const
name|override
block|{
return|return
name|sectionCustomRequired
return|;
block|}
name|StringRef
name|customSectionName
argument_list|()
specifier|const
name|override
block|{
return|return
name|_sectionName
return|;
block|}
name|uint64_t
name|sectionSize
argument_list|()
specifier|const
name|override
block|{
return|return
name|_sectionSize
return|;
block|}
name|Scope
name|scope
argument_list|()
specifier|const
name|override
block|{
return|return
name|_scope
return|;
block|}
name|ContentType
name|contentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|_contentType
return|;
block|}
name|ContentPermissions
name|permissions
argument_list|()
specifier|const
name|override
block|{
return|return
name|_permissions
return|;
block|}
name|uint64_t
name|ordinal
argument_list|()
specifier|const
name|override
block|{
return|return
name|_ordinal
return|;
block|}
name|Alignment
name|alignment
argument_list|()
specifier|const
name|override
block|{
return|return
name|_alignment
return|;
block|}
name|void
name|addAssociate
argument_list|(
argument|const DefinedAtom *other
argument_list|)
block|{
name|auto
operator|*
name|ref
operator|=
name|new
name|SimpleReference
argument_list|(
name|Reference
operator|::
name|KindNamespace
operator|::
name|all
argument_list|,
name|Reference
operator|::
name|KindArch
operator|::
name|all
argument_list|,
name|lld
operator|::
name|Reference
operator|::
name|kindAssociate
argument_list|,
literal|0
argument_list|,
name|other
argument_list|,
literal|0
argument_list|)
block|;
name|addReference
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|SimpleReference
operator|>
operator|(
name|ref
operator|)
argument_list|)
block|;   }
name|private
operator|:
name|StringRef
name|_sectionName
block|;
name|uint64_t
name|_sectionSize
block|;
name|Scope
name|_scope
block|;
name|ContentType
name|_contentType
block|;
name|ContentPermissions
name|_permissions
block|;
name|uint64_t
name|_ordinal
block|;
name|Alignment
name|_alignment
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|SimpleReference
operator|>>
name|_references
block|; }
decl_stmt|;
comment|// A COFFDefinedAtom represents an atom read from a file and has contents.
name|class
name|COFFDefinedAtom
range|:
name|public
name|COFFDefinedFileAtom
block|{
name|public
operator|:
name|COFFDefinedAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|uint64_t sectionSize
argument_list|,
argument|Scope scope
argument_list|,
argument|ContentType type
argument_list|,
argument|bool isComdat
argument_list|,
argument|ContentPermissions perms
argument_list|,
argument|Merge merge
argument_list|,
argument|ArrayRef<uint8_t> data
argument_list|,
argument|uint64_t ordinal
argument_list|)
operator|:
name|COFFDefinedFileAtom
argument_list|(
name|file
argument_list|,
name|name
argument_list|,
name|sectionName
argument_list|,
name|sectionSize
argument_list|,
name|scope
argument_list|,
name|type
argument_list|,
name|perms
argument_list|,
name|ordinal
argument_list|)
block|,
name|_isComdat
argument_list|(
name|isComdat
argument_list|)
block|,
name|_merge
argument_list|(
name|merge
argument_list|)
block|,
name|_dataref
argument_list|(
argument|data
argument_list|)
block|{}
name|Merge
name|merge
argument_list|()
specifier|const
name|override
block|{
return|return
name|_merge
return|;
block|}
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
name|_dataref
operator|.
name|size
argument_list|()
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|rawContent
argument_list|()
specifier|const
name|override
block|{
return|return
name|_dataref
return|;
block|}
name|DeadStripKind
name|deadStrip
argument_list|()
specifier|const
name|override
block|{
comment|// Only COMDAT symbols would be dead-stripped.
return|return
name|_isComdat
operator|?
name|deadStripNormal
operator|:
name|deadStripNever
return|;
block|}
name|private
operator|:
name|bool
name|_isComdat
block|;
name|Merge
name|_merge
block|;
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|_dataref
block|; }
decl_stmt|;
comment|// A COFFDefinedAtom represents an atom for BSS section.
name|class
name|COFFBSSAtom
range|:
name|public
name|COFFDefinedFileAtom
block|{
name|public
operator|:
name|COFFBSSAtom
argument_list|(
argument|const File&file
argument_list|,
argument|StringRef name
argument_list|,
argument|Scope scope
argument_list|,
argument|ContentPermissions perms
argument_list|,
argument|Merge merge
argument_list|,
argument|uint32_t size
argument_list|,
argument|uint64_t ordinal
argument_list|)
operator|:
name|COFFDefinedFileAtom
argument_list|(
name|file
argument_list|,
name|name
argument_list|,
literal|".bss"
argument_list|,
literal|0
argument_list|,
name|scope
argument_list|,
name|typeZeroFill
argument_list|,
name|perms
argument_list|,
name|ordinal
argument_list|)
block|,
name|_merge
argument_list|(
name|merge
argument_list|)
block|,
name|_size
argument_list|(
argument|size
argument_list|)
block|{}
name|Merge
name|merge
argument_list|()
specifier|const
name|override
block|{
return|return
name|_merge
return|;
block|}
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
name|_size
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|rawContent
argument_list|()
specifier|const
name|override
block|{
return|return
name|_contents
return|;
block|}
name|private
operator|:
name|Merge
name|_merge
block|;
name|uint32_t
name|_size
block|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|_contents
block|; }
decl_stmt|;
comment|/// A COFFLinkerInternalAtom represents a defined atom created by the linker,
comment|/// not read from file.
name|class
name|COFFLinkerInternalAtom
range|:
name|public
name|COFFBaseDefinedAtom
block|{
name|public
operator|:
name|SectionChoice
name|sectionChoice
argument_list|()
specifier|const
name|override
block|{
return|return
name|sectionBasedOnContent
return|;
block|}
name|uint64_t
name|ordinal
argument_list|()
specifier|const
name|override
block|{
return|return
name|_ordinal
return|;
block|}
name|Scope
name|scope
argument_list|()
specifier|const
name|override
block|{
return|return
name|scopeGlobal
return|;
block|}
name|Alignment
name|alignment
argument_list|()
specifier|const
name|override
block|{
return|return
name|Alignment
argument_list|(
literal|0
argument_list|)
return|;
block|}
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
name|_data
operator|.
name|size
argument_list|()
return|;
block|}
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|rawContent
argument_list|()
specifier|const
name|override
block|{
return|return
name|_data
return|;
block|}
name|protected
operator|:
name|COFFLinkerInternalAtom
argument_list|(
argument|const File&file
argument_list|,
argument|uint64_t ordinal
argument_list|,
argument|std::vector<uint8_t> data
argument_list|,
argument|StringRef symbolName =
literal|""
argument_list|)
operator|:
name|COFFBaseDefinedAtom
argument_list|(
name|file
argument_list|,
name|symbolName
argument_list|,
name|Kind
operator|::
name|Internal
argument_list|)
block|,
name|_ordinal
argument_list|(
name|ordinal
argument_list|)
block|,
name|_data
argument_list|(
argument|std::move(data)
argument_list|)
block|{}
name|private
operator|:
name|uint64_t
name|_ordinal
block|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|_data
block|; }
decl_stmt|;
name|class
name|COFFStringAtom
range|:
name|public
name|COFFLinkerInternalAtom
block|{
name|public
operator|:
name|COFFStringAtom
argument_list|(
argument|const File&file
argument_list|,
argument|uint64_t ordinal
argument_list|,
argument|StringRef sectionName
argument_list|,
argument|StringRef contents
argument_list|)
operator|:
name|COFFLinkerInternalAtom
argument_list|(
name|file
argument_list|,
name|ordinal
argument_list|,
name|stringRefToVector
argument_list|(
name|contents
argument_list|)
argument_list|)
block|,
name|_sectionName
argument_list|(
argument|sectionName
argument_list|)
block|{}
name|SectionChoice
name|sectionChoice
argument_list|()
specifier|const
name|override
block|{
return|return
name|sectionCustomRequired
return|;
block|}
name|StringRef
name|customSectionName
argument_list|()
specifier|const
name|override
block|{
return|return
name|_sectionName
return|;
block|}
name|ContentType
name|contentType
argument_list|()
specifier|const
name|override
block|{
return|return
name|typeData
return|;
block|}
name|ContentPermissions
name|permissions
argument_list|()
specifier|const
name|override
block|{
return|return
name|permR__
return|;
block|}
name|private
operator|:
name|StringRef
name|_sectionName
block|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|stringRefToVector
argument_list|(
argument|StringRef name
argument_list|)
specifier|const
block|{
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|ret
argument_list|(
name|name
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
block|;
name|memcpy
argument_list|(
operator|&
name|ret
index|[
literal|0
index|]
argument_list|,
name|name
operator|.
name|data
argument_list|()
argument_list|,
name|name
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|ret
index|[
name|name
operator|.
name|size
argument_list|()
index|]
operator|=
literal|0
block|;
return|return
name|ret
return|;
block|}
expr|}
block|;
comment|// A COFFSharedLibraryAtom represents a symbol for data in an import library.  A
comment|// reference to a COFFSharedLibraryAtom will be transformed to a real reference
comment|// to an import address table entry in Idata pass.
name|class
name|COFFSharedLibraryAtom
operator|:
name|public
name|SharedLibraryAtom
block|{
name|public
operator|:
name|COFFSharedLibraryAtom
argument_list|(
argument|const File&file
argument_list|,
argument|uint16_t hint
argument_list|,
argument|StringRef symbolName
argument_list|,
argument|StringRef importName
argument_list|,
argument|StringRef dllName
argument_list|)
operator|:
name|_file
argument_list|(
name|file
argument_list|)
block|,
name|_hint
argument_list|(
name|hint
argument_list|)
block|,
name|_mangledName
argument_list|(
name|addImpPrefix
argument_list|(
name|symbolName
argument_list|)
argument_list|)
block|,
name|_importName
argument_list|(
name|importName
argument_list|)
block|,
name|_dllName
argument_list|(
name|dllName
argument_list|)
block|,
name|_importTableEntry
argument_list|(
argument|nullptr
argument_list|)
block|{   }
specifier|const
name|File
operator|&
name|file
argument_list|()
specifier|const
name|override
block|{
return|return
name|_file
return|;
block|}
name|uint16_t
name|hint
argument_list|()
specifier|const
block|{
return|return
name|_hint
return|;
block|}
comment|/// Returns the symbol name to be used by the core linker.
name|StringRef
name|name
argument_list|()
specifier|const
name|override
block|{
return|return
name|_mangledName
return|;
block|}
comment|/// Returns the symbol name to be used in the import description table in the
comment|/// COFF header.
name|virtual
name|StringRef
name|importName
argument_list|()
specifier|const
block|{
return|return
name|_importName
return|;
block|}
name|StringRef
name|loadName
argument_list|()
specifier|const
name|override
block|{
return|return
name|_dllName
return|;
block|}
name|bool
name|canBeNullAtRuntime
argument_list|()
specifier|const
name|override
block|{
return|return
name|false
return|;
block|}
name|Type
name|type
argument_list|()
specifier|const
name|override
block|{
return|return
name|Type
operator|::
name|Unknown
return|;
block|}
name|uint64_t
name|size
argument_list|()
specifier|const
name|override
block|{
return|return
literal|0
return|;
block|}
name|void
name|setImportTableEntry
argument_list|(
argument|const DefinedAtom *atom
argument_list|)
block|{
name|_importTableEntry
operator|=
name|atom
block|;   }
specifier|const
name|DefinedAtom
operator|*
name|getImportTableEntry
argument_list|()
specifier|const
block|{
return|return
name|_importTableEntry
return|;
block|}
name|private
operator|:
comment|/// Mangle the symbol name by adding "__imp_" prefix. See the file comment of
comment|/// ReaderImportHeader.cpp for details about the prefix.
name|std
operator|::
name|string
name|addImpPrefix
argument_list|(
argument|StringRef symbolName
argument_list|)
block|{
name|std
operator|::
name|string
name|ret
argument_list|(
literal|"__imp_"
argument_list|)
block|;
name|ret
operator|.
name|append
argument_list|(
name|symbolName
argument_list|)
block|;
return|return
name|ret
return|;
block|}
specifier|const
name|File
operator|&
name|_file
block|;
name|uint16_t
name|_hint
block|;
name|std
operator|::
name|string
name|_mangledName
block|;
name|std
operator|::
name|string
name|_importName
block|;
name|StringRef
name|_dllName
block|;
specifier|const
name|DefinedAtom
operator|*
name|_importTableEntry
block|; }
block|;
comment|// An instance of this class represents "input file" for atoms created in a
comment|// pass. Atoms need to be associated to an input file even if it's not read from
comment|// a file, so we use this class for that.
name|class
name|VirtualFile
operator|:
name|public
name|SimpleFile
block|{
name|public
operator|:
name|VirtualFile
argument_list|(
specifier|const
name|LinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|SimpleFile
argument_list|(
literal|"<virtual-file>"
argument_list|)
block|,
name|_nextOrdinal
argument_list|(
literal|0
argument_list|)
block|{
name|setOrdinal
argument_list|(
name|ctx
operator|.
name|getNextOrdinalAndIncrement
argument_list|()
argument_list|)
block|;   }
name|uint64_t
name|getNextOrdinal
argument_list|()
block|{
return|return
name|_nextOrdinal
operator|++
return|;
block|}
name|private
operator|:
name|uint64_t
name|_nextOrdinal
block|; }
block|;
comment|//===----------------------------------------------------------------------===//
comment|//
comment|// Utility functions to handle layout edges.
comment|//
comment|//===----------------------------------------------------------------------===//
name|template
operator|<
name|typename
name|T
block|,
name|typename
name|U
operator|>
name|void
name|addLayoutEdge
argument_list|(
argument|T *a
argument_list|,
argument|U *b
argument_list|,
argument|uint32_t which
argument_list|)
block|{
name|auto
name|ref
operator|=
name|new
name|SimpleReference
argument_list|(
name|Reference
operator|::
name|KindNamespace
operator|::
name|all
argument_list|,
name|Reference
operator|::
name|KindArch
operator|::
name|all
argument_list|,
name|which
argument_list|,
literal|0
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
block|;
name|a
operator|->
name|addReference
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|SimpleReference
operator|>
operator|(
name|ref
operator|)
argument_list|)
block|; }
block|}
comment|// namespace pecoff
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

