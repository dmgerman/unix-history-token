begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/ReaderWriter/PECOFF/InferSubsystemPass.h ----------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_READER_WRITER_PE_COFF_INFER_SUBSYSTEM_PASS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_READER_WRITER_PE_COFF_INFER_SUBSYSTEM_PASS_H
end_define

begin_include
include|#
directive|include
file|"Atoms.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Pass.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|pecoff
block|{
comment|// Infers subsystem from entry point function name.
name|class
name|InferSubsystemPass
range|:
name|public
name|lld
operator|::
name|Pass
block|{
name|public
operator|:
name|InferSubsystemPass
argument_list|(
name|PECOFFLinkingContext
operator|&
name|ctx
argument_list|)
operator|:
name|_ctx
argument_list|(
argument|ctx
argument_list|)
block|{}
name|void
name|perform
argument_list|(
argument|std::unique_ptr<MutableFile>&file
argument_list|)
name|override
block|{
if|if
condition|(
name|_ctx
operator|.
name|getSubsystem
argument_list|()
operator|!=
name|WindowsSubsystem
operator|::
name|IMAGE_SUBSYSTEM_UNKNOWN
condition|)
return|return;
if|if
condition|(
name|_ctx
operator|.
name|isDll
argument_list|()
condition|)
block|{
name|_ctx
operator|.
name|setSubsystem
argument_list|(
name|WindowsSubsystem
operator|::
name|IMAGE_SUBSYSTEM_WINDOWS_GUI
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Scan the resolved symbols to infer the subsystem.
specifier|const
name|std
operator|::
name|string
name|wWinMain
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"wWinMainCRTStartup"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
name|wWinMainAt
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"wWinMainCRTStartup@"
argument_list|)
decl_stmt|;
specifier|const
name|std
operator|::
name|string
name|winMain
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"WinMainCRTStartup"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
name|winMainAt
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"WinMainCRTStartup@"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
name|wmain
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"wmainCRTStartup"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
name|wmainAt
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"wmainCRTStartup@"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
expr|main
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"mainCRTStartup"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|string
name|mainAt
operator|=
name|_ctx
operator|.
name|decorateSymbol
argument_list|(
literal|"mainCRTStartup@"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|const
name|DefinedAtom
modifier|*
name|atom
range|:
name|file
operator|->
name|definedAtoms
argument_list|()
control|)
block|{
if|if
condition|(
name|atom
operator|->
name|name
argument_list|()
operator|==
name|wWinMain
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|.
name|startswith
argument_list|(
name|wWinMainAt
argument_list|)
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|==
name|winMain
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|.
name|startswith
argument_list|(
name|winMainAt
argument_list|)
condition|)
block|{
name|_ctx
operator|.
name|setSubsystem
argument_list|(
name|WindowsSubsystem
operator|::
name|IMAGE_SUBSYSTEM_WINDOWS_GUI
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|atom
operator|->
name|name
argument_list|()
operator|==
name|wmain
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|.
name|startswith
argument_list|(
name|wmainAt
argument_list|)
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|==
expr|main
operator|||
name|atom
operator|->
name|name
argument_list|()
operator|.
name|startswith
argument_list|(
name|mainAt
argument_list|)
condition|)
block|{
name|_ctx
operator|.
name|setSubsystem
argument_list|(
name|WindowsSubsystem
operator|::
name|IMAGE_SUBSYSTEM_WINDOWS_CUI
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|llvm
operator|::
name|report_fatal_error
argument_list|(
literal|"Failed to infer subsystem"
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|PECOFFLinkingContext
modifier|&
name|_ctx
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace pecoff
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

