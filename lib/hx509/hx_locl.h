begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 - 2006 Kungliga Tekniska HÃ¶gskolan  * (Royal Institute of Technology, Stockholm, Sweden).   * All rights reserved.   *  * Redistribution and use in source and binary forms, with or without   * modification, are permitted provided that the following conditions   * are met:   *  * 1. Redistributions of source code must retain the above copyright   *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright   *    notice, this list of conditions and the following disclaimer in the   *    documentation and/or other materials provided with the distribution.   *  * 3. Neither the name of the Institute nor the names of its contributors   *    may be used to endorse or promote products derived from this software   *    without specific prior written permission.   *  * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND   * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS   * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)   * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY   * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF   * SUCH DAMAGE.   */
end_comment

begin_comment
comment|/* $Id: hx_locl.h 21083 2007-06-13 02:11:19Z lha $ */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_CONFIG_H
end_ifdef

begin_include
include|#
directive|include
file|<config.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<strings.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<err.h>
end_include

begin_include
include|#
directive|include
file|<getarg.h>
end_include

begin_include
include|#
directive|include
file|<base64.h>
end_include

begin_include
include|#
directive|include
file|<hex.h>
end_include

begin_include
include|#
directive|include
file|<roken.h>
end_include

begin_include
include|#
directive|include
file|<com_err.h>
end_include

begin_include
include|#
directive|include
file|<parse_units.h>
end_include

begin_include
include|#
directive|include
file|<parse_bytes.h>
end_include

begin_include
include|#
directive|include
file|<krb5-types.h>
end_include

begin_include
include|#
directive|include
file|<rfc2459_asn1.h>
end_include

begin_include
include|#
directive|include
file|<cms_asn1.h>
end_include

begin_include
include|#
directive|include
file|<pkcs8_asn1.h>
end_include

begin_include
include|#
directive|include
file|<pkcs9_asn1.h>
end_include

begin_include
include|#
directive|include
file|<pkcs12_asn1.h>
end_include

begin_include
include|#
directive|include
file|<ocsp_asn1.h>
end_include

begin_include
include|#
directive|include
file|<pkcs10_asn1.h>
end_include

begin_include
include|#
directive|include
file|<asn1_err.h>
end_include

begin_include
include|#
directive|include
file|<pkinit_asn1.h>
end_include

begin_include
include|#
directive|include
file|<der.h>
end_include

begin_include
include|#
directive|include
file|"crypto-headers.h"
end_include

begin_struct_decl
struct_decl|struct
name|hx509_keyset_ops
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|hx509_collector
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|hx509_generate_private_context
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|hx509_path
name|hx509_path
typedef|;
end_typedef

begin_include
include|#
directive|include
file|<hx509.h>
end_include

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|_hx509_cert_release_func
function_decl|)
parameter_list|(
name|struct
name|hx509_cert_data
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hx509_private_key_ops
name|hx509_private_key_ops
typedef|;
end_typedef

begin_include
include|#
directive|include
file|<hx509-private.h>
end_include

begin_include
include|#
directive|include
file|<hx509_err.h>
end_include

begin_struct
struct|struct
name|hx509_peer_info
block|{
name|hx509_cert
name|cert
decl_stmt|;
name|AlgorithmIdentifier
modifier|*
name|val
decl_stmt|;
name|size_t
name|len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HX509_CERTS_FIND_SERIALNUMBER
value|1
end_define

begin_define
define|#
directive|define
name|HX509_CERTS_FIND_ISSUER
value|2
end_define

begin_define
define|#
directive|define
name|HX509_CERTS_FIND_SUBJECT
value|4
end_define

begin_define
define|#
directive|define
name|HX509_CERTS_FIND_ISSUER_KEY_ID
value|8
end_define

begin_define
define|#
directive|define
name|HX509_CERTS_FIND_SUBJECT_KEY_ID
value|16
end_define

begin_struct
struct|struct
name|hx509_name_data
block|{
name|Name
name|der_name
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hx509_path
block|{
name|size_t
name|len
decl_stmt|;
name|hx509_cert
modifier|*
name|val
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hx509_query_data
block|{
name|int
name|match
decl_stmt|;
define|#
directive|define
name|HX509_QUERY_FIND_ISSUER_CERT
value|0x000001
define|#
directive|define
name|HX509_QUERY_MATCH_SERIALNUMBER
value|0x000002
define|#
directive|define
name|HX509_QUERY_MATCH_ISSUER_NAME
value|0x000004
define|#
directive|define
name|HX509_QUERY_MATCH_SUBJECT_NAME
value|0x000008
define|#
directive|define
name|HX509_QUERY_MATCH_SUBJECT_KEY_ID
value|0x000010
define|#
directive|define
name|HX509_QUERY_MATCH_ISSUER_ID
value|0x000020
define|#
directive|define
name|HX509_QUERY_PRIVATE_KEY
value|0x000040
define|#
directive|define
name|HX509_QUERY_KU_ENCIPHERMENT
value|0x000080
define|#
directive|define
name|HX509_QUERY_KU_DIGITALSIGNATURE
value|0x000100
define|#
directive|define
name|HX509_QUERY_KU_KEYCERTSIGN
value|0x000200
define|#
directive|define
name|HX509_QUERY_KU_CRLSIGN
value|0x000400
define|#
directive|define
name|HX509_QUERY_KU_NONREPUDIATION
value|0x000800
define|#
directive|define
name|HX509_QUERY_KU_KEYAGREEMENT
value|0x001000
define|#
directive|define
name|HX509_QUERY_KU_DATAENCIPHERMENT
value|0x002000
define|#
directive|define
name|HX509_QUERY_ANCHOR
value|0x004000
define|#
directive|define
name|HX509_QUERY_MATCH_CERTIFICATE
value|0x008000
define|#
directive|define
name|HX509_QUERY_MATCH_LOCAL_KEY_ID
value|0x010000
define|#
directive|define
name|HX509_QUERY_NO_MATCH_PATH
value|0x020000
define|#
directive|define
name|HX509_QUERY_MATCH_FRIENDLY_NAME
value|0x040000
define|#
directive|define
name|HX509_QUERY_MATCH_FUNCTION
value|0x080000
define|#
directive|define
name|HX509_QUERY_MATCH_KEY_HASH_SHA1
value|0x100000
define|#
directive|define
name|HX509_QUERY_MATCH_TIME
value|0x200000
define|#
directive|define
name|HX509_QUERY_MASK
value|0x3fffff
name|Certificate
modifier|*
name|subject
decl_stmt|;
name|Certificate
modifier|*
name|certificate
decl_stmt|;
name|heim_integer
modifier|*
name|serial
decl_stmt|;
name|heim_octet_string
modifier|*
name|subject_id
decl_stmt|;
name|heim_octet_string
modifier|*
name|local_key_id
decl_stmt|;
name|Name
modifier|*
name|issuer_name
decl_stmt|;
name|Name
modifier|*
name|subject_name
decl_stmt|;
name|hx509_path
modifier|*
name|path
decl_stmt|;
name|char
modifier|*
name|friendlyname
decl_stmt|;
name|int
function_decl|(
modifier|*
name|cmp_func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|hx509_cert
parameter_list|)
function_decl|;
name|void
modifier|*
name|cmp_func_ctx
decl_stmt|;
name|heim_octet_string
modifier|*
name|keyhash_sha1
decl_stmt|;
name|time_t
name|timenow
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hx509_keyset_ops
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|hx509_lock
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|store
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|hx509_lock
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|hx509_cert
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|query
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|hx509_query
modifier|*
parameter_list|,
name|hx509_cert
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|iter_start
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|iter
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|hx509_cert
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|iter_end
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|printinfo
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|getkeys
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|hx509_private_key
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|addkey
function_decl|)
parameter_list|(
name|hx509_context
parameter_list|,
name|hx509_certs
parameter_list|,
name|void
modifier|*
parameter_list|,
name|hx509_private_key
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|_hx509_password
block|{
name|size_t
name|len
decl_stmt|;
name|char
modifier|*
modifier|*
name|val
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|hx509_lock
name|_hx509_empty_lock
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|hx509_context_data
block|{
name|struct
name|hx509_keyset_ops
modifier|*
modifier|*
name|ks_ops
decl_stmt|;
name|int
name|ks_num_ops
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|HX509_CTX_VERIFY_MISSING_OK
value|1
name|int
name|ocsp_time_diff
decl_stmt|;
define|#
directive|define
name|HX509_DEFAULT_OCSP_TIME_DIFF
value|(5*60)
name|hx509_error
name|error
decl_stmt|;
name|struct
name|et_list
modifier|*
name|et_list
decl_stmt|;
name|char
modifier|*
name|querystat
decl_stmt|;
name|hx509_certs
name|default_trust_anchors
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* _hx509_calculate_path flag field */
end_comment

begin_define
define|#
directive|define
name|HX509_CALCULATE_PATH_NO_ANCHOR
value|1
end_define

begin_decl_stmt
specifier|extern
specifier|const
name|AlgorithmIdentifier
modifier|*
name|_hx509_crypto_default_sig_alg
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|AlgorithmIdentifier
modifier|*
name|_hx509_crypto_default_digest_alg
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|AlgorithmIdentifier
modifier|*
name|_hx509_crypto_default_secret_alg
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Configurable options  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__APPLE__
end_ifdef

begin_define
define|#
directive|define
name|HX509_DEFAULT_ANCHORS
value|"KEYCHAIN:system-anchors"
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

