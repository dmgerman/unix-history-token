begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*	$NetBSD: citrus_mapper_std_local.h,v 1.3 2006/09/09 14:35:17 tnozaki Exp $	*/
end_comment

begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-2-Clause  *  * Copyright (c)2003, 2006 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_MAPPER_STD_LOCAL_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_MAPPER_STD_LOCAL_H_
end_define

begin_typedef
typedef|typedef
name|uint32_t
function_decl|(
modifier|*
name|_citrus_mapper_std_getvalfunc_t
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_citrus_mapper_std_linear_zone
block|{
name|_citrus_index_t
name|begin
decl_stmt|;
name|_citrus_index_t
name|end
decl_stmt|;
name|_citrus_index_t
name|width
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|_citrus_mapper_std_rowcol
block|{
name|struct
name|_citrus_region
name|rc_table
decl_stmt|;
name|size_t
name|rc_src_rowcol_len
decl_stmt|;
name|struct
name|_citrus_mapper_std_linear_zone
modifier|*
name|rc_src_rowcol
decl_stmt|;
name|_citrus_index_t
name|rc_src_rowcol_bits
decl_stmt|;
name|_citrus_index_t
name|rc_src_rowcol_mask
decl_stmt|;
name|_citrus_index_t
name|rc_dst_invalid
decl_stmt|;
name|_citrus_index_t
name|rc_dst_unit_bits
decl_stmt|;
name|int
name|rc_oob_mode
decl_stmt|;
name|_citrus_index_t
name|rc_dst_ilseq
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|_citrus_mapper_std
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|_citrus_mapper_std_convert_t
function_decl|)
parameter_list|(
name|struct
name|_citrus_mapper_std
modifier|*
name|__restrict
parameter_list|,
name|_index_t
modifier|*
name|__restrict
parameter_list|,
name|_index_t
parameter_list|,
name|void
modifier|*
name|__restrict
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|_citrus_mapper_std_uninit_t
function_decl|)
parameter_list|(
name|struct
name|_citrus_mapper_std
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|_citrus_mapper_std
block|{
name|struct
name|_citrus_region
name|ms_file
decl_stmt|;
name|struct
name|_citrus_db
modifier|*
name|ms_db
decl_stmt|;
name|_citrus_mapper_std_convert_t
name|ms_convert
decl_stmt|;
name|_citrus_mapper_std_uninit_t
name|ms_uninit
decl_stmt|;
union|union
block|{
name|struct
name|_citrus_mapper_std_rowcol
name|rowcol
decl_stmt|;
block|}
name|u
union|;
define|#
directive|define
name|ms_rowcol
value|u.rowcol
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

end_unit

