begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $OpenBSD: src/lib/libutil/ohash.h,v 1.2 2014/06/02 18:52:03 deraadt Exp $ */
end_comment

begin_comment
comment|/* Copyright (c) 1999, 2004 Marc Espie<espie@openbsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|OHASH_H
end_ifndef

begin_define
define|#
directive|define
name|OHASH_H
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_comment
comment|/* Open hashing support.   * Open hashing was chosen because it is much lighter than other hash  * techniques, and more efficient in most cases.  */
end_comment

begin_comment
comment|/* user-visible data structure */
end_comment

begin_struct
struct|struct
name|ohash_info
block|{
name|ptrdiff_t
name|key_offset
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
comment|/* user data */
name|void
modifier|*
function_decl|(
modifier|*
name|calloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|alloc
function_decl|)
parameter_list|(
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|_ohash_record
struct_decl|;
end_struct_decl

begin_comment
comment|/* private structure. It's there just so you can do a sizeof */
end_comment

begin_struct
struct|struct
name|ohash
block|{
name|struct
name|_ohash_record
modifier|*
name|t
decl_stmt|;
name|struct
name|ohash_info
name|info
decl_stmt|;
name|unsigned
name|int
name|size
decl_stmt|;
name|unsigned
name|int
name|total
decl_stmt|;
name|unsigned
name|int
name|deleted
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* For this to be tweakable, we use small primitives, and leave part of the  * logic to the client application.  e.g., hashing is left to the client  * application.  We also provide a simple table entry lookup that yields  * a hashing table index (opaque) to be used in find/insert/remove.  * The keys are stored at a known position in the client data.  */
end_comment

begin_function_decl
name|__BEGIN_DECLS
name|void
name|ohash_init
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|ohash_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ohash_delete
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|ohash_lookup_interval
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|ohash_lookup_memory
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_find
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_remove
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_insert
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_first
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_next
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|ohash_entries
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ohash_create_entry
parameter_list|(
name|struct
name|ohash_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|ohash_interval
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|ohash_qlookupi
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|ohash_qlookup
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

end_unit

