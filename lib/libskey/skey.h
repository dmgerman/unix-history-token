begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_if
if|#
directive|if
name|defined
argument_list|(
name|__TURBOC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|LATTICE
argument_list|)
end_if

begin_define
define|#
directive|define
name|ANSIPROTO
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__ARGS
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|ANSIPROTO
end_ifdef

begin_define
define|#
directive|define
name|__ARGS
parameter_list|(
name|x
parameter_list|)
value|x
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__ARGS
parameter_list|(
name|x
parameter_list|)
value|()
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Server-side data structure for reading keys file during login */
end_comment

begin_struct
struct|struct
name|skey
block|{
name|FILE
modifier|*
name|keyfile
decl_stmt|;
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|char
modifier|*
name|logname
decl_stmt|;
name|int
name|n
decl_stmt|;
name|char
modifier|*
name|seed
decl_stmt|;
name|char
modifier|*
name|val
decl_stmt|;
name|long
name|recstart
decl_stmt|;
comment|/*needed so reread of buffer is efficient*/
block|}
struct|;
end_struct

begin_comment
comment|/* Client-side structure for scanning data stream for challenge */
end_comment

begin_struct
struct|struct
name|mc
block|{
name|char
name|buf
index|[
literal|256
index|]
decl_stmt|;
name|int
name|skip
decl_stmt|;
name|int
name|cnt
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|void
name|f
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|x
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|keycrunch
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|result
operator|,
name|char
operator|*
name|seed
operator|,
name|char
operator|*
name|passwd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|btoe
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|engout
operator|,
name|char
operator|*
name|c
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|put8
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|out
operator|,
name|char
operator|*
name|s
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|etob
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|out
operator|,
name|char
operator|*
name|e
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rip
name|__ARGS
argument_list|(
operator|(
name|char
operator|*
name|buf
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|skeychallenge
name|__ARGS
argument_list|(
operator|(
expr|struct
name|skey
operator|*
name|mp
operator|,
name|char
operator|*
name|name
operator|,
name|char
operator|*
name|challenge
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|skeylookup
name|__ARGS
argument_list|(
operator|(
expr|struct
name|skey
operator|*
name|mp
operator|,
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|skeyverify
name|__ARGS
argument_list|(
operator|(
expr|struct
name|skey
operator|*
name|mp
operator|,
name|char
operator|*
name|response
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|skeyverify
name|__ARGS
argument_list|(
operator|(
expr|struct
name|skey
operator|*
name|mp
operator|,
name|char
operator|*
name|response
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

