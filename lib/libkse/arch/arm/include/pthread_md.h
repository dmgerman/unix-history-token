begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2003 Jake Burkholder<jake@freebsd.org>.  * Copyright (c) 2003 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Machine-dependent thread prototypes/definitions for the thread kernel.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PTHREAD_MD_H_
end_ifndef

begin_define
define|#
directive|define
name|_PTHREAD_MD_H_
end_define

begin_include
include|#
directive|include
file|<sys/kse.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<ucontext.h>
end_include

begin_define
define|#
directive|define
name|KSE_STACKSIZE
value|16384
end_define

begin_define
define|#
directive|define
name|DTV_OFFSET
value|offsetof(struct tcb, tcb_tp.tp_tdv)
end_define

begin_function_decl
name|int
name|_thr_setcontext
parameter_list|(
name|mcontext_t
modifier|*
parameter_list|,
name|intptr_t
parameter_list|,
name|intptr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_thr_getcontext
parameter_list|(
name|mcontext_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|THR_GETCONTEXT
parameter_list|(
name|ucp
parameter_list|)
value|_thr_getcontext(&(ucp)->uc_mcontext)
end_define

begin_define
define|#
directive|define
name|THR_SETCONTEXT
parameter_list|(
name|ucp
parameter_list|)
value|_thr_setcontext(&(ucp)->uc_mcontext, 0, NULL)
end_define

begin_define
define|#
directive|define
name|PER_THREAD
end_define

begin_struct_decl
struct_decl|struct
name|kcb
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|kse
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|pthread
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|tcb
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|tdv
struct_decl|;
end_struct_decl

begin_comment
comment|/* We don't know what this is yet? */
end_comment

begin_comment
comment|/*  * %r6 points to one of these. We define the static TLS as an array  * of long double to enforce 16-byte alignment of the TLS memory.  *  * XXX - Both static and dynamic allocation of any of these structures  *       will result in a valid, well-aligned thread pointer???  */
end_comment

begin_struct
struct|struct
name|arm_tp
block|{
name|struct
name|tdv
modifier|*
name|tp_tdv
decl_stmt|;
comment|/* dynamic TLS */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tcb
block|{
name|struct
name|pthread
modifier|*
name|tcb_thread
decl_stmt|;
name|struct
name|kcb
modifier|*
name|tcb_curkcb
decl_stmt|;
name|uint32_t
name|tcb_isfake
decl_stmt|;
name|struct
name|kse_thr_mailbox
name|tcb_tmbx
decl_stmt|;
comment|/* needs 32-byte alignment */
name|struct
name|arm_tp
name|tcb_tp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|kcb
block|{
name|struct
name|kse_mailbox
name|kcb_kmbx
decl_stmt|;
name|struct
name|tcb
name|kcb_faketcb
decl_stmt|;
name|struct
name|tcb
modifier|*
name|kcb_curtcb
decl_stmt|;
name|struct
name|kse
modifier|*
name|kcb_kse
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|arm_tp
modifier|*
modifier|*
name|arm_tp
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|_tp
value|(*arm_tp)
end_define

begin_define
define|#
directive|define
name|_tcb
value|((struct tcb*)((char*)(_tp) - offsetof(struct tcb, tcb_tp)))
end_define

begin_comment
comment|/*  * The kcb and tcb constructors.  */
end_comment

begin_function_decl
name|struct
name|tcb
modifier|*
name|_tcb_ctor
parameter_list|(
name|struct
name|pthread
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_tcb_dtor
parameter_list|(
name|struct
name|tcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|kcb
modifier|*
name|_kcb_ctor
parameter_list|(
name|struct
name|kse
modifier|*
name|kse
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_kcb_dtor
parameter_list|(
name|struct
name|kcb
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|uint32_t
name|__kcb_swp
parameter_list|(
name|uint32_t
name|val
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
block|{
asm|__asm __volatile("swp   %0, %1, [%2]"
block|:
literal|"=r"
operator|(
name|val
operator|)
operator|:
literal|"r"
operator|(
name|val
operator|)
operator|,
literal|"r"
operator|(
name|ptr
operator|)
operator|:
literal|"memory"
block|)
function|;
end_function

begin_return
return|return
operator|(
name|val
operator|)
return|;
end_return

begin_comment
unit|}
comment|/* Called from the KSE to set its private data. */
end_comment

begin_function
unit|static
name|__inline
name|void
name|_kcb_set
parameter_list|(
name|struct
name|kcb
modifier|*
name|kcb
parameter_list|)
block|{
comment|/* There is no thread yet; use the fake tcb. */
name|__kcb_swp
argument_list|(
operator|(
name|uint32_t
operator|)
operator|&
name|kcb
operator|->
name|kcb_faketcb
operator|.
name|tcb_tp
argument_list|,
operator|&
name|_tp
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  * Get the current kcb.  *  * This can only be called while in a critical region; don't  * worry about having the kcb changed out from under us.  */
end_comment

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|kcb
operator|*
name|_kcb_get
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|_tcb
operator|->
name|tcb_curkcb
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/*  * Enter a critical region.  *  * Read and clear km_curthread in the kse mailbox.  */
end_comment

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|kse_thr_mailbox
operator|*
name|_kcb_critical_enter
argument_list|(
argument|void
argument_list|)
block|{ 	struct
name|kse_thr_mailbox
operator|*
name|crit
block|;
if|if
condition|(
name|_tcb
operator|->
name|tcb_isfake
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|crit
operator|=
operator|(
block|struct
name|kse_thr_mailbox
operator|*
operator|)
name|__kcb_swp
argument_list|(
operator|(
name|uint32_t
operator|)
name|NULL
argument_list|,
operator|&
name|_tcb
operator|->
name|tcb_curkcb
operator|->
name|kcb_kmbx
operator|.
name|km_curthread
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|crit
operator|)
return|;
end_return

begin_function
unit|}  static
name|__inline
name|void
name|_kcb_critical_leave
parameter_list|(
name|struct
name|kse_thr_mailbox
modifier|*
name|crit
parameter_list|)
block|{
if|if
condition|(
name|_tcb
operator|->
name|tcb_isfake
operator|==
literal|0
condition|)
name|__kcb_swp
argument_list|(
operator|(
name|uint32_t
operator|)
name|crit
argument_list|,
operator|&
name|_tcb
operator|->
name|tcb_curkcb
operator|->
name|kcb_kmbx
operator|.
name|km_curthread
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_kcb_in_critical
parameter_list|(
name|void
parameter_list|)
block|{
name|uint32_t
name|flags
decl_stmt|;
name|int
name|ret
decl_stmt|;
return|return
operator|(
name|_tcb
operator|->
name|tcb_curkcb
operator|->
name|kcb_kmbx
operator|.
name|km_curthread
operator|==
name|NULL
operator|)
return|;
if|if
condition|(
name|_tcb
operator|->
name|tcb_isfake
operator|!=
literal|0
condition|)
block|{
comment|/* 		 * We are in a critical region since there is no 		 * current thread. 		 */
name|ret
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|flags
operator|=
name|_tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_flags
expr_stmt|;
name|_tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_flags
operator||=
name|TMF_NOUPCALL
expr_stmt|;
name|ret
operator|=
operator|(
name|_tcb
operator|->
name|tcb_curkcb
operator|->
name|kcb_kmbx
operator|.
name|km_curthread
operator|==
name|NULL
operator|)
expr_stmt|;
name|_tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_flags
operator|=
name|flags
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_tcb_set
parameter_list|(
name|struct
name|kcb
modifier|*
name|kcb
parameter_list|,
name|struct
name|tcb
modifier|*
name|tcb
parameter_list|)
block|{
if|if
condition|(
name|tcb
operator|==
name|NULL
condition|)
name|tcb
operator|=
operator|&
name|kcb
operator|->
name|kcb_faketcb
expr_stmt|;
name|__kcb_swp
argument_list|(
operator|(
name|uint32_t
operator|)
operator|&
name|tcb
operator|->
name|tcb_tp
argument_list|,
operator|&
name|_tp
argument_list|)
expr_stmt|;
name|kcb
operator|->
name|kcb_curtcb
operator|=
name|tcb
expr_stmt|;
name|tcb
operator|->
name|tcb_curkcb
operator|=
name|kcb
expr_stmt|;
block|}
end_function

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|tcb
operator|*
name|_tcb_get
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|_tcb
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|pthread
operator|*
name|_get_curthread
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|_tcb
operator|->
name|tcb_thread
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/*  * Get the current kse.  *  * Like _kcb_get(), this can only be called while in a critical region.  */
end_comment

begin_expr_stmt
specifier|static
name|__inline
expr|struct
name|kse
operator|*
name|_get_curkse
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|(
name|_tcb
operator|->
name|tcb_curkcb
operator|->
name|kcb_kse
operator|)
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|_arm_enter_uts
parameter_list|(
name|struct
name|kse_mailbox
modifier|*
name|km
parameter_list|,
name|kse_func_t
name|uts
parameter_list|,
name|void
modifier|*
name|stack
parameter_list|,
name|size_t
name|stacksz
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|_thread_enter_uts
parameter_list|(
name|struct
name|tcb
modifier|*
name|tcb
parameter_list|,
name|struct
name|kcb
modifier|*
name|kcb
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
if|if
condition|(
operator|(
name|ret
operator|=
name|_thr_getcontext
argument_list|(
operator|&
name|tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_context
operator|.
name|uc_mcontext
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|kcb
operator|->
name|kcb_curtcb
operator|=
operator|&
name|kcb
operator|->
name|kcb_faketcb
expr_stmt|;
name|__kcb_swp
argument_list|(
operator|(
name|int
operator|)
operator|&
name|kcb
operator|->
name|kcb_faketcb
operator|.
name|tcb_tp
argument_list|,
operator|&
name|_tp
argument_list|)
expr_stmt|;
name|_arm_enter_uts
argument_list|(
operator|&
name|kcb
operator|->
name|kcb_kmbx
argument_list|,
name|kcb
operator|->
name|kcb_kmbx
operator|.
name|km_func
argument_list|,
name|kcb
operator|->
name|kcb_kmbx
operator|.
name|km_stack
operator|.
name|ss_sp
argument_list|,
name|kcb
operator|->
name|kcb_kmbx
operator|.
name|km_stack
operator|.
name|ss_size
argument_list|)
expr_stmt|;
comment|/* We should not reach here. */
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_thread_switch
parameter_list|(
name|struct
name|kcb
modifier|*
name|kcb
parameter_list|,
name|struct
name|tcb
modifier|*
name|tcb
parameter_list|,
name|int
name|setmbox
parameter_list|)
block|{
specifier|extern
name|int
name|_libkse_debug
decl_stmt|;
name|mcontext_t
modifier|*
name|mc
decl_stmt|;
if|if
condition|(
operator|!
name|tcb
operator|||
operator|!
name|kcb
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|_tcb_set
argument_list|(
name|kcb
argument_list|,
name|tcb
argument_list|)
expr_stmt|;
name|mc
operator|=
operator|&
name|tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_context
operator|.
name|uc_mcontext
expr_stmt|;
if|if
condition|(
name|_libkse_debug
operator|==
literal|0
condition|)
block|{
name|tcb
operator|->
name|tcb_tmbx
operator|.
name|tm_lwp
operator|=
name|kcb
operator|->
name|kcb_kmbx
operator|.
name|km_lwp
expr_stmt|;
if|if
condition|(
name|setmbox
condition|)
name|_thr_setcontext
argument_list|(
name|mc
argument_list|,
operator|(
name|intptr_t
operator|)
operator|&
name|tcb
operator|->
name|tcb_tmbx
argument_list|,
operator|(
name|intptr_t
operator|*
operator|)
operator|&
name|kcb
operator|->
name|kcb_kmbx
operator|.
name|km_curthread
argument_list|)
expr_stmt|;
else|else
name|_thr_setcontext
argument_list|(
name|mc
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|setmbox
condition|)
name|kse_switchin
argument_list|(
operator|&
name|tcb
operator|->
name|tcb_tmbx
argument_list|,
name|KSE_SWITCHIN_SETTMBX
argument_list|)
expr_stmt|;
else|else
name|kse_switchin
argument_list|(
operator|&
name|tcb
operator|->
name|tcb_tmbx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/* We should not reach here. */
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PTHREAD_MD_H_ */
end_comment

end_unit

