begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002 Daniel Eischen<deischen@freebsd.org>.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  * Machine-dependent thread prototypes/definitions for the thread kernel.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PTHREAD_MD_H_
end_ifndef

begin_define
define|#
directive|define
name|_PTHREAD_MD_H_
end_define

begin_include
include|#
directive|include
file|<sys/kse.h>
end_include

begin_include
include|#
directive|include
file|<ucontext.h>
end_include

begin_function_decl
specifier|extern
name|int
name|_thr_setcontext
parameter_list|(
name|mcontext_t
modifier|*
parameter_list|,
name|intptr_t
parameter_list|,
name|intptr_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|_thr_getcontext
parameter_list|(
name|mcontext_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|THR_GETCONTEXT
parameter_list|(
name|ucp
parameter_list|)
value|_thr_getcontext(&(ucp)->uc_mcontext);
end_define

begin_define
define|#
directive|define
name|THR_SETCONTEXT
parameter_list|(
name|ucp
parameter_list|)
value|_thr_setcontext(&(ucp)->uc_mcontext, NULL, NULL);
end_define

begin_define
define|#
directive|define
name|THR_ALIGNBYTES
value|15
end_define

begin_define
define|#
directive|define
name|THR_ALIGN
parameter_list|(
name|td
parameter_list|)
value|(((unsigned)(td) + THR_ALIGNBYTES)& ~THR_ALIGNBYTES)
end_define

begin_comment
comment|/*  * KSE Specific Data.  */
end_comment

begin_struct
struct|struct
name|ksd
block|{
name|int
name|ldt
decl_stmt|;
define|#
directive|define
name|KSDF_INITIALIZED
value|0x01
name|long
name|flags
decl_stmt|;
name|void
modifier|*
name|base
decl_stmt|;
name|long
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|_i386_enter_uts
parameter_list|(
name|struct
name|kse_mailbox
modifier|*
parameter_list|,
name|kse_func_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
name|__inline
name|int
name|_thread_enter_uts
parameter_list|(
name|struct
name|kse_thr_mailbox
modifier|*
name|tmbx
parameter_list|,
name|struct
name|kse_mailbox
modifier|*
name|kmbx
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|_thr_getcontext
argument_list|(
operator|&
name|tmbx
operator|->
name|tm_context
operator|.
name|uc_mcontext
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
name|_i386_enter_uts
argument_list|(
name|kmbx
argument_list|,
name|kmbx
operator|->
name|km_func
argument_list|,
name|kmbx
operator|->
name|km_stack
operator|.
name|ss_sp
argument_list|,
name|kmbx
operator|->
name|km_stack
operator|.
name|ss_size
argument_list|)
expr_stmt|;
comment|/* We should not reach here. */
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|<
literal|0
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_thread_switch
parameter_list|(
name|struct
name|kse_thr_mailbox
modifier|*
name|tmbx
parameter_list|,
name|struct
name|kse_thr_mailbox
modifier|*
modifier|*
name|loc
parameter_list|)
block|{
name|_thr_setcontext
argument_list|(
operator|&
name|tmbx
operator|->
name|tm_context
operator|.
name|uc_mcontext
argument_list|,
operator|(
name|intptr_t
operator|)
name|tmbx
argument_list|,
operator|(
name|intptr_t
operator|*
operator|)
name|loc
argument_list|)
expr_stmt|;
comment|/* We should not reach here. */
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

