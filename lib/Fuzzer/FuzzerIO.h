begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerIO.h - Internal header for IO utils ----------------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// IO interface.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_IO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_IO_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
name|long
name|GetEpoch
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|Unit
name|FileToVector
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|,
name|size_t
name|MaxSize
operator|=
literal|0
argument_list|,
name|bool
name|ExitOnError
operator|=
name|true
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|FileToString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
expr_stmt|;
name|void
name|CopyFileToErr
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|WriteToFile
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|ReadDirToVectorOfUnits
argument_list|(
specifier|const
name|char
operator|*
name|Path
argument_list|,
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|V
argument_list|,
name|long
operator|*
name|Epoch
argument_list|,
name|size_t
name|MaxSize
argument_list|,
name|bool
name|ExitOnError
argument_list|)
decl_stmt|;
comment|// Returns "Dir/FileName" or equivalent for the current OS.
name|std
operator|::
name|string
name|DirPlusFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|DirPath
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FileName
argument_list|)
expr_stmt|;
comment|// Returns the name of the dir, similar to the 'dirname' utility.
name|std
operator|::
name|string
name|DirName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|FileName
argument_list|)
expr_stmt|;
comment|// Returns path to a TmpDir.
name|std
operator|::
name|string
name|TmpDir
argument_list|()
expr_stmt|;
name|void
name|DupAndCloseStderr
parameter_list|()
function_decl|;
name|void
name|CloseStdout
parameter_list|()
function_decl|;
name|void
name|Printf
parameter_list|(
specifier|const
name|char
modifier|*
name|Fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|// Platform specific functions:
name|bool
name|IsFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|ListFilesInDirRecursive
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Dir
argument_list|,
name|long
operator|*
name|Epoch
argument_list|,
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|*
name|V
argument_list|,
name|bool
name|TopDir
argument_list|)
decl_stmt|;
name|char
name|GetSeparator
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|OpenFile
parameter_list|(
name|int
name|Fd
parameter_list|,
specifier|const
name|char
modifier|*
name|Mode
parameter_list|)
function_decl|;
name|int
name|CloseFile
parameter_list|(
name|int
name|Fd
parameter_list|)
function_decl|;
name|int
name|DuplicateFile
parameter_list|(
name|int
name|Fd
parameter_list|)
function_decl|;
name|void
name|RemoveFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_IO_H
end_comment

end_unit

