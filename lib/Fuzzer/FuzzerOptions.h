begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerOptions.h - Internal header for the Fuzzer ---------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// fuzzer::FuzzingOptions
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_OPTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_OPTIONS_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
struct|struct
name|FuzzingOptions
block|{
name|int
name|Verbosity
init|=
literal|1
decl_stmt|;
name|size_t
name|MaxLen
init|=
literal|0
decl_stmt|;
name|bool
name|ExperimentalLenControl
init|=
name|false
decl_stmt|;
name|int
name|UnitTimeoutSec
init|=
literal|300
decl_stmt|;
name|int
name|TimeoutExitCode
init|=
literal|77
decl_stmt|;
name|int
name|ErrorExitCode
init|=
literal|77
decl_stmt|;
name|int
name|MaxTotalTimeSec
init|=
literal|0
decl_stmt|;
name|int
name|RssLimitMb
init|=
literal|0
decl_stmt|;
name|bool
name|DoCrossOver
init|=
name|true
decl_stmt|;
name|int
name|MutateDepth
init|=
literal|5
decl_stmt|;
name|bool
name|UseCounters
init|=
name|false
decl_stmt|;
name|bool
name|UseIndirCalls
init|=
name|true
decl_stmt|;
name|bool
name|UseMemcmp
init|=
name|true
decl_stmt|;
name|bool
name|UseMemmem
init|=
name|true
decl_stmt|;
name|bool
name|UseCmp
init|=
name|false
decl_stmt|;
name|bool
name|UseValueProfile
init|=
name|false
decl_stmt|;
name|bool
name|Shrink
init|=
name|false
decl_stmt|;
name|int
name|ReloadIntervalSec
init|=
literal|1
decl_stmt|;
name|bool
name|ShuffleAtStartUp
init|=
name|true
decl_stmt|;
name|bool
name|PreferSmall
init|=
name|true
decl_stmt|;
name|size_t
name|MaxNumberOfRuns
init|=
operator|-
literal|1L
decl_stmt|;
name|int
name|ReportSlowUnits
init|=
literal|10
decl_stmt|;
name|bool
name|OnlyASCII
init|=
name|false
decl_stmt|;
name|std
operator|::
name|string
name|OutputCorpus
expr_stmt|;
name|std
operator|::
name|string
name|ArtifactPrefix
operator|=
literal|"./"
expr_stmt|;
name|std
operator|::
name|string
name|ExactArtifactPath
expr_stmt|;
name|std
operator|::
name|string
name|ExitOnSrcPos
expr_stmt|;
name|std
operator|::
name|string
name|ExitOnItem
expr_stmt|;
name|bool
name|SaveArtifacts
init|=
name|true
decl_stmt|;
name|bool
name|PrintNEW
init|=
name|true
decl_stmt|;
comment|// Print a status line when new units are found;
name|bool
name|OutputCSV
init|=
name|false
decl_stmt|;
name|bool
name|PrintNewCovPcs
init|=
name|false
decl_stmt|;
name|bool
name|PrintFinalStats
init|=
name|false
decl_stmt|;
name|bool
name|PrintCorpusStats
init|=
name|false
decl_stmt|;
name|bool
name|PrintCoverage
init|=
name|false
decl_stmt|;
name|bool
name|DumpCoverage
init|=
name|false
decl_stmt|;
name|bool
name|DetectLeaks
init|=
name|true
decl_stmt|;
name|int
name|TraceMalloc
init|=
literal|0
decl_stmt|;
name|bool
name|HandleAbrt
init|=
name|false
decl_stmt|;
name|bool
name|HandleBus
init|=
name|false
decl_stmt|;
name|bool
name|HandleFpe
init|=
name|false
decl_stmt|;
name|bool
name|HandleIll
init|=
name|false
decl_stmt|;
name|bool
name|HandleInt
init|=
name|false
decl_stmt|;
name|bool
name|HandleSegv
init|=
name|false
decl_stmt|;
name|bool
name|HandleTerm
init|=
name|false
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_OPTIONS_H
end_comment

end_unit

