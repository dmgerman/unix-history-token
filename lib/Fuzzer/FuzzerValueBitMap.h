begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerValueBitMap.h - INTERNAL - Bit map -----------------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// ValueBitMap.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_VALUE_BIT_MAP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_VALUE_BIT_MAP_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
comment|// A bit map containing kMapSizeInWords bits.
struct|struct
name|ValueBitMap
block|{
specifier|static
specifier|const
name|size_t
name|kMapSizeInBits
init|=
literal|1
operator|<<
literal|16
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|kMapPrimeMod
init|=
literal|65371
decl_stmt|;
comment|// Largest Prime< kMapSizeInBits;
specifier|static
specifier|const
name|size_t
name|kBitsInWord
init|=
operator|(
sizeof|sizeof
argument_list|(
name|uintptr_t
argument_list|)
operator|*
literal|8
operator|)
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|kMapSizeInWords
init|=
name|kMapSizeInBits
operator|/
name|kBitsInWord
decl_stmt|;
name|public
label|:
comment|// Clears all bits.
name|void
name|Reset
parameter_list|()
block|{
name|memset
argument_list|(
name|Map
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|Map
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Computes a hash function of Value and sets the corresponding bit.
comment|// Returns true if the bit was changed from 0 to 1.
name|ATTRIBUTE_NO_SANITIZE_ALL
specifier|inline
name|bool
name|AddValue
parameter_list|(
name|uintptr_t
name|Value
parameter_list|)
block|{
name|uintptr_t
name|Idx
init|=
name|Value
operator|%
name|kMapSizeInBits
decl_stmt|;
name|uintptr_t
name|WordIdx
init|=
name|Idx
operator|/
name|kBitsInWord
decl_stmt|;
name|uintptr_t
name|BitIdx
init|=
name|Idx
operator|%
name|kBitsInWord
decl_stmt|;
name|uintptr_t
name|Old
init|=
name|Map
index|[
name|WordIdx
index|]
decl_stmt|;
name|uintptr_t
name|New
init|=
name|Old
operator||
operator|(
literal|1UL
operator|<<
name|BitIdx
operator|)
decl_stmt|;
name|Map
index|[
name|WordIdx
index|]
operator|=
name|New
expr_stmt|;
return|return
name|New
operator|!=
name|Old
return|;
block|}
name|ATTRIBUTE_NO_SANITIZE_ALL
specifier|inline
name|bool
name|AddValueModPrime
parameter_list|(
name|uintptr_t
name|Value
parameter_list|)
block|{
return|return
name|AddValue
argument_list|(
name|Value
operator|%
name|kMapPrimeMod
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|Get
parameter_list|(
name|uintptr_t
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|kMapSizeInBits
argument_list|)
expr_stmt|;
name|uintptr_t
name|WordIdx
init|=
name|Idx
operator|/
name|kBitsInWord
decl_stmt|;
name|uintptr_t
name|BitIdx
init|=
name|Idx
operator|%
name|kBitsInWord
decl_stmt|;
return|return
name|Map
index|[
name|WordIdx
index|]
operator|&
operator|(
literal|1UL
operator|<<
name|BitIdx
operator|)
return|;
block|}
name|size_t
name|GetNumBitsSinceLastMerge
argument_list|()
specifier|const
block|{
return|return
name|NumBits
return|;
block|}
comment|// Merges 'Other' into 'this', clears 'Other', updates NumBits,
comment|// returns true if new bits were added.
name|ATTRIBUTE_TARGET_POPCNT
name|bool
name|MergeFrom
parameter_list|(
name|ValueBitMap
modifier|&
name|Other
parameter_list|)
block|{
name|uintptr_t
name|Res
init|=
literal|0
decl_stmt|;
name|size_t
name|OldNumBits
init|=
name|NumBits
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kMapSizeInWords
condition|;
name|i
operator|++
control|)
block|{
name|auto
name|O
init|=
name|Other
operator|.
name|Map
index|[
name|i
index|]
decl_stmt|;
name|auto
name|M
init|=
name|Map
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|O
condition|)
block|{
name|Map
index|[
name|i
index|]
operator|=
operator|(
name|M
operator||=
name|O
operator|)
expr_stmt|;
name|Other
operator|.
name|Map
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|M
condition|)
name|Res
operator|+=
name|__builtin_popcountll
argument_list|(
name|M
argument_list|)
expr_stmt|;
block|}
name|NumBits
operator|=
name|Res
expr_stmt|;
return|return
name|OldNumBits
operator|<
name|NumBits
return|;
block|}
name|template
operator|<
name|class
name|Callback
operator|>
name|ATTRIBUTE_NO_SANITIZE_ALL
name|void
name|ForEach
argument_list|(
argument|Callback CB
argument_list|)
specifier|const
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kMapSizeInWords
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|uintptr_t
name|M
init|=
name|Map
index|[
name|i
index|]
condition|)
for|for
control|(
name|size_t
name|j
init|=
literal|0
init|;
name|j
operator|<
sizeof|sizeof
argument_list|(
name|M
argument_list|)
operator|*
literal|8
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|M
operator|&
operator|(
operator|(
name|uintptr_t
operator|)
literal|1
operator|<<
name|j
operator|)
condition|)
name|CB
argument_list|(
name|i
operator|*
sizeof|sizeof
argument_list|(
name|M
argument_list|)
operator|*
literal|8
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|size_t
name|NumBits
init|=
literal|0
decl_stmt|;
name|uintptr_t
name|Map
index|[
name|kMapSizeInWords
index|]
name|__attribute__
argument_list|(
operator|(
name|aligned
argument_list|(
literal|512
argument_list|)
operator|)
argument_list|)
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_VALUE_BIT_MAP_H
end_comment

end_unit

