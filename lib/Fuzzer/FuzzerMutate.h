begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerMutate.h - Internal header for the Fuzzer ----------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// fuzzer::MutationDispatcher
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_MUTATE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_MUTATE_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerDictionary.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerOptions.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerRandom.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
name|class
name|MutationDispatcher
block|{
name|public
label|:
name|MutationDispatcher
argument_list|(
name|Random
operator|&
name|Rand
argument_list|,
specifier|const
name|FuzzingOptions
operator|&
name|Options
argument_list|)
expr_stmt|;
operator|~
name|MutationDispatcher
argument_list|()
block|{}
comment|/// Indicate that we are about to start a new sequence of mutations.
name|void
name|StartMutationSequence
argument_list|()
expr_stmt|;
comment|/// Print the current sequence of mutations.
name|void
name|PrintMutationSequence
parameter_list|()
function_decl|;
comment|/// Indicate that the current sequence of mutations was successfull.
name|void
name|RecordSuccessfulMutationSequence
parameter_list|()
function_decl|;
comment|/// Mutates data by invoking user-provided mutator.
name|size_t
name|Mutate_Custom
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by invoking user-provided crossover.
name|size_t
name|Mutate_CustomCrossOver
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by shuffling bytes.
name|size_t
name|Mutate_ShuffleBytes
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by erasing bytes.
name|size_t
name|Mutate_EraseBytes
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by inserting a byte.
name|size_t
name|Mutate_InsertByte
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by inserting several repeated bytes.
name|size_t
name|Mutate_InsertRepeatedBytes
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by chanding one byte.
name|size_t
name|Mutate_ChangeByte
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by chanding one bit.
name|size_t
name|Mutate_ChangeBit
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by copying/inserting a part of data into a different place.
name|size_t
name|Mutate_CopyPart
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the manual dictionary.
name|size_t
name|Mutate_AddWordFromManualDictionary
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the TORC.
name|size_t
name|Mutate_AddWordFromTORC
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the persistent automatic dictionary.
name|size_t
name|Mutate_AddWordFromPersistentAutoDictionary
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Tries to find an ASCII integer in Data, changes it to another ASCII int.
name|size_t
name|Mutate_ChangeASCIIInteger
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Change a 1-, 2-, 4-, or 8-byte integer in interesting ways.
name|size_t
name|Mutate_ChangeBinaryInteger
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// CrossOver Data with some other element of the corpus.
name|size_t
name|Mutate_CrossOver
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Applies one of the configured mutations.
comment|/// Returns the new size of data which could be up to MaxSize.
name|size_t
name|Mutate
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Applies one of the default mutations. Provided as a service
comment|/// to mutation authors.
name|size_t
name|DefaultMutate
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Creates a cross-over of two pieces of Data, returns its size.
name|size_t
name|CrossOver
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data1
parameter_list|,
name|size_t
name|Size1
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|Data2
parameter_list|,
name|size_t
name|Size2
parameter_list|,
name|uint8_t
modifier|*
name|Out
parameter_list|,
name|size_t
name|MaxOutSize
parameter_list|)
function_decl|;
name|void
name|AddWordToManualDictionary
parameter_list|(
specifier|const
name|Word
modifier|&
name|W
parameter_list|)
function_decl|;
name|void
name|PrintRecommendedDictionary
parameter_list|()
function_decl|;
name|void
name|SetCorpus
parameter_list|(
specifier|const
name|InputCorpus
modifier|*
name|Corpus
parameter_list|)
block|{
name|this
operator|->
name|Corpus
operator|=
name|Corpus
expr_stmt|;
block|}
name|Random
modifier|&
name|GetRand
parameter_list|()
block|{
return|return
name|Rand
return|;
block|}
name|private
label|:
struct|struct
name|Mutator
block|{
name|size_t
argument_list|(
argument|MutationDispatcher::*Fn
argument_list|)
operator|(
name|uint8_t
operator|*
name|Data
operator|,
name|size_t
name|Size
operator|,
name|size_t
name|Max
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
block|}
struct|;
name|size_t
name|AddWordFromDictionary
parameter_list|(
name|Dictionary
modifier|&
name|D
parameter_list|,
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
name|size_t
name|MutateImpl
argument_list|(
name|uint8_t
operator|*
name|Data
argument_list|,
name|size_t
name|Size
argument_list|,
name|size_t
name|MaxSize
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
operator|&
name|Mutators
argument_list|)
decl_stmt|;
name|size_t
name|InsertPartOf
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|From
parameter_list|,
name|size_t
name|FromSize
parameter_list|,
name|uint8_t
modifier|*
name|To
parameter_list|,
name|size_t
name|ToSize
parameter_list|,
name|size_t
name|MaxToSize
parameter_list|)
function_decl|;
name|size_t
name|CopyPartOf
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|From
parameter_list|,
name|size_t
name|FromSize
parameter_list|,
name|uint8_t
modifier|*
name|To
parameter_list|,
name|size_t
name|ToSize
parameter_list|)
function_decl|;
name|size_t
name|ApplyDictionaryEntry
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|,
name|DictionaryEntry
modifier|&
name|DE
parameter_list|)
function_decl|;
name|template
operator|<
name|class
name|T
operator|>
name|DictionaryEntry
name|MakeDictionaryEntryFromCMP
argument_list|(
argument|T Arg1
argument_list|,
argument|T Arg2
argument_list|,
argument|const uint8_t *Data
argument_list|,
argument|size_t Size
argument_list|)
expr_stmt|;
name|DictionaryEntry
name|MakeDictionaryEntryFromCMP
parameter_list|(
specifier|const
name|Word
modifier|&
name|Arg1
parameter_list|,
specifier|const
name|Word
modifier|&
name|Arg2
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|DictionaryEntry
name|MakeDictionaryEntryFromCMP
parameter_list|(
specifier|const
name|void
modifier|*
name|Arg1
parameter_list|,
specifier|const
name|void
modifier|*
name|Arg2
parameter_list|,
specifier|const
name|void
modifier|*
name|Arg1Mutation
parameter_list|,
specifier|const
name|void
modifier|*
name|Arg2Mutation
parameter_list|,
name|size_t
name|ArgSize
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|Random
modifier|&
name|Rand
decl_stmt|;
specifier|const
name|FuzzingOptions
name|Options
decl_stmt|;
comment|// Dictionary provided by the user via -dict=DICT_FILE.
name|Dictionary
name|ManualDictionary
decl_stmt|;
comment|// Temporary dictionary modified by the fuzzer itself,
comment|// recreated periodically.
name|Dictionary
name|TempAutoDictionary
decl_stmt|;
comment|// Persistent dictionary modified by the fuzzer, consists of
comment|// entries that led to successfull discoveries in the past mutations.
name|Dictionary
name|PersistentAutoDictionary
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|CurrentMutatorSequence
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|DictionaryEntry
operator|*
operator|>
name|CurrentDictionaryEntrySequence
expr_stmt|;
specifier|static
specifier|const
name|size_t
name|kCmpDictionaryEntriesDequeSize
init|=
literal|16
decl_stmt|;
name|DictionaryEntry
name|CmpDictionaryEntriesDeque
index|[
name|kCmpDictionaryEntriesDequeSize
index|]
decl_stmt|;
name|size_t
name|CmpDictionaryEntriesDequeIdx
init|=
literal|0
decl_stmt|;
specifier|const
name|InputCorpus
modifier|*
name|Corpus
init|=
name|nullptr
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|MutateInPlaceHere
expr_stmt|;
comment|// CustomCrossOver needs its own buffer as a custom implementation may call
comment|// LLVMFuzzerMutate, which in turn may resize MutateInPlaceHere.
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|CustomCrossOverInPlaceHere
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|Mutators
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|DefaultMutators
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_MUTATE_H
end_comment

end_unit

