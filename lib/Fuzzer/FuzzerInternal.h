begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerInternal.h - Internal header for the Fuzzer --------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Define the main class fuzzer::Fuzzer and most functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_INTERNAL_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerExtFunctions.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerInterface.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerOptions.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerSHA1.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerValueBitMap.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<atomic>
end_include

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
name|using
name|namespace
name|std
operator|::
name|chrono
expr_stmt|;
name|class
name|Fuzzer
block|{
name|public
label|:
comment|// Aggregates all available coverage measurements.
struct|struct
name|Coverage
block|{
name|Coverage
argument_list|()
block|{
name|Reset
argument_list|()
expr_stmt|;
block|}
name|void
name|Reset
parameter_list|()
block|{
name|BlockCoverage
operator|=
literal|0
expr_stmt|;
name|CallerCalleeCoverage
operator|=
literal|0
expr_stmt|;
name|CounterBitmapBits
operator|=
literal|0
expr_stmt|;
name|CounterBitmap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|VPMap
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
name|size_t
name|BlockCoverage
decl_stmt|;
name|size_t
name|CallerCalleeCoverage
decl_stmt|;
comment|// Precalculated number of bits in CounterBitmap.
name|size_t
name|CounterBitmapBits
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|CounterBitmap
expr_stmt|;
name|ValueBitMap
name|VPMap
decl_stmt|;
block|}
struct|;
name|Fuzzer
argument_list|(
argument|UserCallback CB
argument_list|,
argument|InputCorpus&Corpus
argument_list|,
argument|MutationDispatcher&MD
argument_list|,
argument|FuzzingOptions Options
argument_list|)
empty_stmt|;
operator|~
name|Fuzzer
argument_list|()
expr_stmt|;
name|void
name|Loop
parameter_list|()
function_decl|;
name|void
name|MinimizeCrashLoop
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|ShuffleAndMinimize
parameter_list|(
name|UnitVector
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|InitializeTraceState
parameter_list|()
function_decl|;
name|void
name|RereadOutputCorpus
parameter_list|(
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
name|size_t
name|secondsSinceProcessStartUp
parameter_list|()
block|{
return|return
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|system_clock
operator|::
name|now
argument_list|()
operator|-
name|ProcessStartTime
operator|)
operator|.
name|count
argument_list|()
return|;
block|}
name|bool
name|TimedOut
parameter_list|()
block|{
return|return
name|Options
operator|.
name|MaxTotalTimeSec
operator|>
literal|0
operator|&&
name|secondsSinceProcessStartUp
argument_list|()
operator|>
name|static_cast
operator|<
name|size_t
operator|>
operator|(
name|Options
operator|.
name|MaxTotalTimeSec
operator|)
return|;
block|}
name|size_t
name|execPerSec
parameter_list|()
block|{
name|size_t
name|Seconds
init|=
name|secondsSinceProcessStartUp
argument_list|()
decl_stmt|;
return|return
name|Seconds
condition|?
name|TotalNumberOfRuns
operator|/
name|Seconds
else|:
literal|0
return|;
block|}
name|size_t
name|getTotalNumberOfRuns
parameter_list|()
block|{
return|return
name|TotalNumberOfRuns
return|;
block|}
specifier|static
name|void
name|StaticAlarmCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticCrashSignalCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticInterruptCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticFileSizeExceedCallback
parameter_list|()
function_decl|;
name|void
name|ExecuteCallback
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|size_t
name|RunOne
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
comment|// Merge Corpora[1:] into Corpora[0].
name|void
name|Merge
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Corpora
argument_list|)
decl_stmt|;
name|void
name|CrashResistantMerge
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Args
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Corpora
argument_list|)
decl_stmt|;
name|void
name|CrashResistantMergeInternalStep
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|ControlFilePath
argument_list|)
decl_stmt|;
comment|// Returns a subset of 'Extra' that adds coverage to 'Initial'.
name|UnitVector
name|FindExtraUnits
parameter_list|(
specifier|const
name|UnitVector
modifier|&
name|Initial
parameter_list|,
specifier|const
name|UnitVector
modifier|&
name|Extra
parameter_list|)
function_decl|;
name|MutationDispatcher
modifier|&
name|GetMD
parameter_list|()
block|{
return|return
name|MD
return|;
block|}
name|void
name|PrintFinalStats
parameter_list|()
function_decl|;
name|void
name|SetMaxInputLen
parameter_list|(
name|size_t
name|MaxInputLen
parameter_list|)
function_decl|;
name|void
name|SetMaxMutationLen
parameter_list|(
name|size_t
name|MaxMutationLen
parameter_list|)
function_decl|;
name|void
name|RssLimitCallback
parameter_list|()
function_decl|;
comment|// Public for tests.
name|void
name|ResetCoverage
parameter_list|()
function_decl|;
name|bool
name|InFuzzingThread
argument_list|()
specifier|const
block|{
return|return
name|IsMyThread
return|;
block|}
name|size_t
name|GetCurrentUnitInFuzzingThead
argument_list|(
specifier|const
name|uint8_t
operator|*
operator|*
name|Data
argument_list|)
decl|const
decl_stmt|;
name|void
name|TryDetectingAMemoryLeak
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|bool
name|DuringInitialCorpusExecution
parameter_list|)
function_decl|;
name|void
name|HandleMalloc
parameter_list|(
name|size_t
name|Size
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|AlarmCallback
parameter_list|()
function_decl|;
name|void
name|CrashCallback
parameter_list|()
function_decl|;
name|void
name|InterruptCallback
parameter_list|()
function_decl|;
name|void
name|MutateAndTestOne
parameter_list|()
function_decl|;
name|void
name|ReportNewCoverage
parameter_list|(
name|InputInfo
modifier|*
name|II
parameter_list|,
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|size_t
name|RunOne
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
block|{
return|return
name|RunOne
argument_list|(
name|U
operator|.
name|data
argument_list|()
argument_list|,
name|U
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|void
name|WriteToOutputCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|WriteUnitToFileWithPrefix
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|Prefix
parameter_list|)
function_decl|;
name|void
name|PrintStats
parameter_list|(
specifier|const
name|char
modifier|*
name|Where
parameter_list|,
specifier|const
name|char
modifier|*
name|End
init|=
literal|"\n"
parameter_list|,
name|size_t
name|Units
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|PrintStatusForNewUnit
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|ShuffleCorpus
parameter_list|(
name|UnitVector
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|AddToCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|CheckExitOnSrcPosOrItem
parameter_list|()
function_decl|;
comment|// Trace-based fuzzing: we run a unit with some kind of tracing
comment|// enabled and record potentially useful mutations. Then
comment|// We apply these mutations one by one to the unit and run it again.
comment|// Start tracing; forget all previously proposed mutations.
name|void
name|StartTraceRecording
parameter_list|()
function_decl|;
comment|// Stop tracing.
name|void
name|StopTraceRecording
parameter_list|()
function_decl|;
name|void
name|SetDeathCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticDeathCallback
parameter_list|()
function_decl|;
name|void
name|DumpCurrentUnit
parameter_list|(
specifier|const
name|char
modifier|*
name|Prefix
parameter_list|)
function_decl|;
name|void
name|DeathCallback
parameter_list|()
function_decl|;
name|void
name|ResetEdgeCoverage
parameter_list|()
function_decl|;
name|void
name|ResetCounters
parameter_list|()
function_decl|;
name|void
name|PrepareCounters
argument_list|(
name|Fuzzer
operator|::
name|Coverage
operator|*
name|C
argument_list|)
decl_stmt|;
name|bool
name|RecordMaxCoverage
argument_list|(
name|Fuzzer
operator|::
name|Coverage
operator|*
name|C
argument_list|)
decl_stmt|;
name|void
name|AllocateCurrentUnitData
parameter_list|()
function_decl|;
name|uint8_t
modifier|*
name|CurrentUnitData
init|=
name|nullptr
decl_stmt|;
name|std
operator|::
name|atomic
operator|<
name|size_t
operator|>
name|CurrentUnitSize
expr_stmt|;
name|uint8_t
name|BaseSha1
index|[
name|kSHA1NumBytes
index|]
decl_stmt|;
comment|// Checksum of the base unit.
name|bool
name|RunningCB
init|=
name|false
decl_stmt|;
name|size_t
name|TotalNumberOfRuns
init|=
literal|0
decl_stmt|;
name|size_t
name|NumberOfNewUnitsAdded
init|=
literal|0
decl_stmt|;
name|bool
name|HasMoreMallocsThanFrees
init|=
name|false
decl_stmt|;
name|size_t
name|NumberOfLeakDetectionAttempts
init|=
literal|0
decl_stmt|;
name|UserCallback
name|CB
decl_stmt|;
name|InputCorpus
modifier|&
name|Corpus
decl_stmt|;
name|MutationDispatcher
modifier|&
name|MD
decl_stmt|;
name|FuzzingOptions
name|Options
decl_stmt|;
name|system_clock
operator|::
name|time_point
name|ProcessStartTime
operator|=
name|system_clock
operator|::
name|now
argument_list|()
expr_stmt|;
name|system_clock
operator|::
name|time_point
name|UnitStartTime
operator|,
name|UnitStopTime
expr_stmt|;
name|long
name|TimeOfLongestUnitInSeconds
init|=
literal|0
decl_stmt|;
name|long
name|EpochOfLastReadOfOutputCorpus
init|=
literal|0
decl_stmt|;
comment|// Maximum recorded coverage.
name|Coverage
name|MaxCoverage
decl_stmt|;
name|size_t
name|MaxInputLen
init|=
literal|0
decl_stmt|;
name|size_t
name|MaxMutationLen
init|=
literal|0
decl_stmt|;
comment|// Need to know our own thread.
specifier|static
name|thread_local
name|bool
name|IsMyThread
decl_stmt|;
name|bool
name|InMergeMode
init|=
name|false
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_INTERNAL_H
end_comment

end_unit

