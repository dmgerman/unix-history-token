begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerInternal.h - Internal header for the Fuzzer --------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Define the main class fuzzer::Fuzzer and most functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<unordered_set>
end_include

begin_include
include|#
directive|include
file|"FuzzerInterface.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|Unit
expr_stmt|;
name|using
name|namespace
name|std
operator|::
name|chrono
expr_stmt|;
name|std
operator|::
name|string
name|FileToString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
expr_stmt|;
name|Unit
name|FileToVector
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|ReadDirToVectorOfUnits
argument_list|(
specifier|const
name|char
operator|*
name|Path
argument_list|,
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|V
argument_list|,
name|long
operator|*
name|Epoch
argument_list|)
decl_stmt|;
name|void
name|WriteToFile
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|CopyFileToErr
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
comment|// Returns "Dir/FileName" or equivalent for the current OS.
name|std
operator|::
name|string
name|DirPlusFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|DirPath
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FileName
argument_list|)
expr_stmt|;
name|size_t
name|Mutate
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
name|size_t
name|CrossOver
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data1
parameter_list|,
name|size_t
name|Size1
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|Data2
parameter_list|,
name|size_t
name|Size2
parameter_list|,
name|uint8_t
modifier|*
name|Out
parameter_list|,
name|size_t
name|MaxOutSize
parameter_list|)
function_decl|;
name|void
name|Printf
parameter_list|(
specifier|const
name|char
modifier|*
name|Fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|Print
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|Hash
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|)
expr_stmt|;
name|void
name|SetTimer
parameter_list|(
name|int
name|Seconds
parameter_list|)
function_decl|;
name|void
name|PrintFileAsBase64
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
name|void
name|ExecuteCommand
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Command
argument_list|)
decl_stmt|;
comment|// Private copy of SHA1 implementation.
specifier|static
specifier|const
name|int
name|kSHA1NumBytes
init|=
literal|20
decl_stmt|;
comment|// Computes SHA1 hash of 'Len' bytes in 'Data', writes kSHA1NumBytes to 'Out'.
name|void
name|ComputeSHA1
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Len
parameter_list|,
name|uint8_t
modifier|*
name|Out
parameter_list|)
function_decl|;
name|int
name|NumberOfCpuCores
parameter_list|()
function_decl|;
name|class
name|Fuzzer
block|{
name|public
label|:
struct|struct
name|FuzzingOptions
block|{
name|int
name|Verbosity
init|=
literal|1
decl_stmt|;
name|int
name|MaxLen
init|=
literal|0
decl_stmt|;
name|int
name|UnitTimeoutSec
init|=
literal|300
decl_stmt|;
name|bool
name|DoCrossOver
init|=
name|true
decl_stmt|;
name|int
name|MutateDepth
init|=
literal|5
decl_stmt|;
name|bool
name|ExitOnFirst
init|=
name|false
decl_stmt|;
name|bool
name|UseCounters
init|=
name|false
decl_stmt|;
name|bool
name|UseTraces
init|=
name|false
decl_stmt|;
name|bool
name|UseFullCoverageSet
init|=
name|false
decl_stmt|;
name|bool
name|Reload
init|=
name|true
decl_stmt|;
name|int
name|PreferSmallDuringInitialShuffle
init|=
operator|-
literal|1
decl_stmt|;
name|size_t
name|MaxNumberOfRuns
init|=
name|ULONG_MAX
decl_stmt|;
name|int
name|SyncTimeout
init|=
literal|600
decl_stmt|;
name|std
operator|::
name|string
name|OutputCorpus
expr_stmt|;
name|std
operator|::
name|string
name|SyncCommand
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Tokens
expr_stmt|;
block|}
struct|;
name|Fuzzer
argument_list|(
argument|UserSuppliedFuzzer&USF
argument_list|,
argument|FuzzingOptions Options
argument_list|)
empty_stmt|;
name|void
name|AddToCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
block|{
name|Corpus
operator|.
name|push_back
argument_list|(
name|U
argument_list|)
expr_stmt|;
block|}
name|void
name|Loop
parameter_list|(
name|size_t
name|NumIterations
parameter_list|)
function_decl|;
name|void
name|ShuffleAndMinimize
parameter_list|()
function_decl|;
name|void
name|InitializeTraceState
parameter_list|()
function_decl|;
name|size_t
name|CorpusSize
argument_list|()
specifier|const
block|{
return|return
name|Corpus
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|ReadDir
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|,
name|long
operator|*
name|Epoch
argument_list|)
block|{
name|ReadDirToVectorOfUnits
argument_list|(
name|Path
operator|.
name|c_str
argument_list|()
argument_list|,
operator|&
name|Corpus
argument_list|,
name|Epoch
argument_list|)
expr_stmt|;
block|}
name|void
name|RereadOutputCorpus
parameter_list|()
function_decl|;
comment|// Save the current corpus to OutputCorpus.
name|void
name|SaveCorpus
parameter_list|()
function_decl|;
name|size_t
name|secondsSinceProcessStartUp
parameter_list|()
block|{
return|return
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|system_clock
operator|::
name|now
argument_list|()
operator|-
name|ProcessStartTime
operator|)
operator|.
name|count
argument_list|()
return|;
block|}
name|size_t
name|getTotalNumberOfRuns
parameter_list|()
block|{
return|return
name|TotalNumberOfRuns
return|;
block|}
specifier|static
name|void
name|StaticAlarmCallback
parameter_list|()
function_decl|;
name|Unit
name|SubstituteTokens
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|AlarmCallback
parameter_list|()
function_decl|;
name|void
name|ExecuteCallback
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|MutateAndTestOne
parameter_list|(
name|Unit
modifier|*
name|U
parameter_list|)
function_decl|;
name|void
name|ReportNewCoverage
parameter_list|(
name|size_t
name|NewCoverage
parameter_list|,
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|size_t
name|RunOne
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|RunOneAndUpdateCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|size_t
name|RunOneMaximizeTotalCoverage
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|size_t
name|RunOneMaximizeFullCoverageSet
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|size_t
name|RunOneMaximizeCoveragePairs
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|WriteToOutputCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|WriteToCrash
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|Prefix
parameter_list|)
function_decl|;
name|void
name|PrintStats
parameter_list|(
specifier|const
name|char
modifier|*
name|Where
parameter_list|,
name|size_t
name|Cov
parameter_list|,
specifier|const
name|char
modifier|*
name|End
init|=
literal|"\n"
parameter_list|)
function_decl|;
name|void
name|PrintUnitInASCIIOrTokens
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|SyncCorpus
parameter_list|()
function_decl|;
comment|// Trace-based fuzzing: we run a unit with some kind of tracing
comment|// enabled and record potentially useful mutations. Then
comment|// We apply these mutations one by one to the unit and run it again.
comment|// Start tracing; forget all previously proposed mutations.
name|void
name|StartTraceRecording
parameter_list|()
function_decl|;
comment|// Stop tracing and return the number of proposed mutations.
name|size_t
name|StopTraceRecording
parameter_list|()
function_decl|;
comment|// Apply Idx-th trace-based mutation to U.
name|void
name|ApplyTraceBasedMutation
parameter_list|(
name|size_t
name|Idx
parameter_list|,
name|Unit
modifier|*
name|U
parameter_list|)
function_decl|;
name|void
name|SetDeathCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticDeathCallback
parameter_list|()
function_decl|;
name|void
name|DeathCallback
parameter_list|()
function_decl|;
name|Unit
name|CurrentUnit
decl_stmt|;
name|size_t
name|TotalNumberOfRuns
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
name|Corpus
expr_stmt|;
name|std
operator|::
name|unordered_set
operator|<
name|std
operator|::
name|string
operator|>
name|UnitHashesAddedToCorpus
expr_stmt|;
name|std
operator|::
name|unordered_set
operator|<
name|uintptr_t
operator|>
name|FullCoverageSets
expr_stmt|;
comment|// For UseCounters
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|CounterBitmap
expr_stmt|;
name|size_t
name|TotalBits
parameter_list|()
block|{
comment|// Slow. Call it only for printing stats.
name|size_t
name|Res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
name|x
range|:
name|CounterBitmap
control|)
name|Res
operator|+=
name|__builtin_popcount
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|Res
return|;
block|}
name|UserSuppliedFuzzer
modifier|&
name|USF
decl_stmt|;
name|FuzzingOptions
name|Options
decl_stmt|;
name|system_clock
operator|::
name|time_point
name|ProcessStartTime
operator|=
name|system_clock
operator|::
name|now
argument_list|()
expr_stmt|;
name|system_clock
operator|::
name|time_point
name|LastExternalSync
operator|=
name|system_clock
operator|::
name|now
argument_list|()
expr_stmt|;
name|system_clock
operator|::
name|time_point
name|UnitStartTime
expr_stmt|;
name|long
name|TimeOfLongestUnitInSeconds
init|=
literal|0
decl_stmt|;
name|long
name|EpochOfLastReadOfOutputCorpus
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
name|class
name|SimpleUserSuppliedFuzzer
range|:
name|public
name|UserSuppliedFuzzer
block|{
name|public
operator|:
name|SimpleUserSuppliedFuzzer
argument_list|(
argument|UserCallback Callback
argument_list|)
operator|:
name|Callback
argument_list|(
argument|Callback
argument_list|)
block|{}
name|virtual
name|void
name|TargetFunction
argument_list|(
argument|const uint8_t *Data
argument_list|,
argument|size_t Size
argument_list|)
block|{
return|return
name|Callback
argument_list|(
name|Data
argument_list|,
name|Size
argument_list|)
return|;
block|}
name|private
operator|:
name|UserCallback
name|Callback
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// namespace fuzzer
end_comment

end_unit

