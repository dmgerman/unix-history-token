begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerInternal.h - Internal header for the Fuzzer --------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Define the main class fuzzer::Fuzzer and most functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_INTERNAL_H
end_define

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<atomic>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<random>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<unordered_set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"FuzzerExtFunctions.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerInterface.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerTracePC.h"
end_include

begin_comment
comment|// Platform detection.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__linux__
end_ifdef

begin_define
define|#
directive|define
name|LIBFUZZER_LINUX
value|1
end_define

begin_define
define|#
directive|define
name|LIBFUZZER_APPLE
value|0
end_define

begin_elif
elif|#
directive|elif
name|__APPLE__
end_elif

begin_define
define|#
directive|define
name|LIBFUZZER_LINUX
value|0
end_define

begin_define
define|#
directive|define
name|LIBFUZZER_APPLE
value|1
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Support for your platform has not been implemented"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|fuzzer
block|{
typedef|typedef
name|int
function_decl|(
modifier|*
name|UserCallback
function_decl|)
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|int
name|FuzzerDriver
parameter_list|(
name|int
modifier|*
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
name|argv
parameter_list|,
name|UserCallback
name|Callback
parameter_list|)
function_decl|;
name|using
name|namespace
name|std
operator|::
name|chrono
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|Unit
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
name|UnitVector
expr_stmt|;
comment|// A simple POD sized array of bytes.
name|template
operator|<
name|size_t
name|kMaxSize
operator|>
name|class
name|FixedWord
block|{
name|public
operator|:
name|FixedWord
argument_list|()
block|{}
name|FixedWord
argument_list|(
argument|const uint8_t *B
argument_list|,
argument|uint8_t S
argument_list|)
block|{
name|Set
argument_list|(
name|B
argument_list|,
name|S
argument_list|)
block|; }
name|void
name|Set
argument_list|(
argument|const uint8_t *B
argument_list|,
argument|uint8_t S
argument_list|)
block|{
name|assert
argument_list|(
name|S
operator|<=
name|kMaxSize
argument_list|)
block|;
name|memcpy
argument_list|(
name|Data
argument_list|,
name|B
argument_list|,
name|S
argument_list|)
block|;
name|Size
operator|=
name|S
block|;   }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FixedWord
operator|<
name|kMaxSize
operator|>
operator|&
name|w
operator|)
specifier|const
block|{
return|return
name|Size
operator|==
name|w
operator|.
name|Size
operator|&&
literal|0
operator|==
name|memcmp
argument_list|(
name|Data
argument_list|,
name|w
operator|.
name|Data
argument_list|,
name|Size
argument_list|)
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|FixedWord
operator|<
name|kMaxSize
operator|>
operator|&
name|w
operator|)
specifier|const
block|{
if|if
condition|(
name|Size
operator|!=
name|w
operator|.
name|Size
condition|)
return|return
name|Size
operator|<
name|w
operator|.
name|Size
return|;
return|return
name|memcmp
argument_list|(
name|Data
argument_list|,
name|w
operator|.
name|Data
argument_list|,
name|Size
argument_list|)
operator|<
literal|0
return|;
block|}
specifier|static
name|size_t
name|GetMaxSize
parameter_list|()
block|{
return|return
name|kMaxSize
return|;
block|}
specifier|const
name|uint8_t
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|uint8_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|private
label|:
name|uint8_t
name|Size
init|=
literal|0
decl_stmt|;
name|uint8_t
name|Data
index|[
name|kMaxSize
index|]
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|FixedWord
operator|<
literal|27
operator|>
name|Word
expr_stmt|;
end_typedef

begin_comment
comment|// 28 bytes.
end_comment

begin_decl_stmt
name|bool
name|IsFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|FileToString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Unit
name|FileToVector
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|,
name|size_t
name|MaxSize
operator|=
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|ReadDirToVectorOfUnits
argument_list|(
specifier|const
name|char
operator|*
name|Path
argument_list|,
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|V
argument_list|,
name|long
operator|*
name|Epoch
argument_list|,
name|size_t
name|MaxSize
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|WriteToFile
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|CopyFileToErr
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Returns "Dir/FileName" or equivalent for the current OS.
end_comment

begin_expr_stmt
name|std
operator|::
name|string
name|DirPlusFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|DirPath
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FileName
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|DupAndCloseStderr
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|CloseStdout
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|Printf
parameter_list|(
specifier|const
name|char
modifier|*
name|Fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintHexArray
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintHexArray
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|Word
modifier|&
name|W
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|string
name|Hash
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|SetTimer
parameter_list|(
name|int
name|Seconds
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigSegvHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigBusHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigAbrtHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigIllHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigFpeHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigIntHandler
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SetSigTermHandler
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|string
name|Base64
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|ExecuteCommand
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Command
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|size_t
name|GetPeakRSSMb
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// Private copy of SHA1 implementation.
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|int
name|kSHA1NumBytes
init|=
literal|20
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Computes SHA1 hash of 'Len' bytes in 'Data', writes kSHA1NumBytes to 'Out'.
end_comment

begin_function_decl
name|void
name|ComputeSHA1
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Len
parameter_list|,
name|uint8_t
modifier|*
name|Out
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Changes U to contain only ASCII (isprint+isspace) characters.
end_comment

begin_comment
comment|// Returns true iff U has been changed.
end_comment

begin_function_decl
name|bool
name|ToASCII
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|IsASCII
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|IsASCII
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|NumberOfCpuCores
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|int
name|GetPid
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|SleepSeconds
parameter_list|(
name|int
name|Seconds
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|Random
block|{
name|public
label|:
name|Random
argument_list|(
argument|unsigned int seed
argument_list|)
block|:
name|R
argument_list|(
argument|seed
argument_list|)
block|{}
name|size_t
name|Rand
parameter_list|()
block|{
return|return
name|R
argument_list|()
return|;
block|}
name|size_t
name|RandBool
parameter_list|()
block|{
return|return
name|Rand
argument_list|()
operator|%
literal|2
return|;
block|}
name|size_t
name|operator
argument_list|()
operator|(
name|size_t
name|n
operator|)
block|{
return|return
name|n
operator|?
name|Rand
argument_list|()
operator|%
name|n
operator|:
literal|0
return|;
block|}
name|std
operator|::
name|mt19937
operator|&
name|Get_mt19937
argument_list|()
block|{
return|return
name|R
return|;
block|}
name|private
label|:
name|std
operator|::
name|mt19937
name|R
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Dictionary.
end_comment

begin_comment
comment|// Parses one dictionary entry.
end_comment

begin_comment
comment|// If successfull, write the enty to Unit and returns true,
end_comment

begin_comment
comment|// otherwise returns false.
end_comment

begin_decl_stmt
name|bool
name|ParseOneDictionaryEntry
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Str
argument_list|,
name|Unit
operator|*
name|U
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Parses the dictionary file, fills Units, returns true iff all lines
end_comment

begin_comment
comment|// were parsed succesfully.
end_comment

begin_decl_stmt
name|bool
name|ParseDictionaryFile
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Text
argument_list|,
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|Units
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DictionaryEntry
block|{
name|public
label|:
name|DictionaryEntry
argument_list|()
block|{}
name|DictionaryEntry
argument_list|(
argument|Word W
argument_list|)
block|:
name|W
argument_list|(
argument|W
argument_list|)
block|{}
name|DictionaryEntry
argument_list|(
argument|Word W
argument_list|,
argument|size_t PositionHint
argument_list|)
block|:
name|W
argument_list|(
name|W
argument_list|)
operator|,
name|PositionHint
argument_list|(
argument|PositionHint
argument_list|)
block|{}
specifier|const
name|Word
operator|&
name|GetW
argument_list|()
specifier|const
block|{
return|return
name|W
return|;
block|}
name|bool
name|HasPositionHint
argument_list|()
specifier|const
block|{
return|return
name|PositionHint
operator|!=
name|std
operator|::
name|numeric_limits
operator|<
name|size_t
operator|>
operator|::
name|max
argument_list|()
return|;
block|}
name|size_t
name|GetPositionHint
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|HasPositionHint
argument_list|()
argument_list|)
block|;
return|return
name|PositionHint
return|;
block|}
name|void
name|IncUseCount
parameter_list|()
block|{
name|UseCount
operator|++
expr_stmt|;
block|}
name|void
name|IncSuccessCount
parameter_list|()
block|{
name|SuccessCount
operator|++
expr_stmt|;
block|}
name|size_t
name|GetUseCount
argument_list|()
specifier|const
block|{
return|return
name|UseCount
return|;
block|}
name|size_t
name|GetSuccessCount
argument_list|()
specifier|const
block|{
return|return
name|SuccessCount
return|;
block|}
name|private
label|:
name|Word
name|W
decl_stmt|;
name|size_t
name|PositionHint
init|=
name|std
operator|::
name|numeric_limits
operator|<
name|size_t
operator|>
operator|::
name|max
argument_list|()
decl_stmt|;
name|size_t
name|UseCount
init|=
literal|0
decl_stmt|;
name|size_t
name|SuccessCount
init|=
literal|0
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|Dictionary
block|{
name|public
label|:
specifier|static
specifier|const
name|size_t
name|kMaxDictSize
init|=
literal|1
operator|<<
literal|14
decl_stmt|;
name|bool
name|ContainsWord
argument_list|(
specifier|const
name|Word
operator|&
name|W
argument_list|)
decl|const
block|{
return|return
name|std
operator|::
name|any_of
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
index|[
operator|&
index|]
operator|(
specifier|const
name|DictionaryEntry
operator|&
name|DE
operator|)
block|{
return|return
name|DE
operator|.
name|GetW
argument_list|()
operator|==
name|W
return|;
block|}
block|)
decl_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|const
name|DictionaryEntry
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
operator|&
name|DE
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|DictionaryEntry
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|+
name|Size
return|;
block|}
end_expr_stmt

begin_function
name|DictionaryEntry
modifier|&
name|operator
function|[]
parameter_list|(
name|size_t
name|Idx
parameter_list|)
block|{
name|assert
argument_list|(
name|Idx
operator|<
name|Size
argument_list|)
expr_stmt|;
return|return
name|DE
index|[
name|Idx
index|]
return|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
name|DictionaryEntry
name|DE
parameter_list|)
block|{
if|if
condition|(
name|Size
operator|<
name|kMaxDictSize
condition|)
name|this
operator|->
name|DE
index|[
name|Size
operator|++
index|]
operator|=
name|DE
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|Size
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Size
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|DictionaryEntry
name|DE
index|[
name|kMaxDictSize
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|Size
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_struct
unit|};
struct|struct
name|FuzzingOptions
block|{
name|int
name|Verbosity
init|=
literal|1
decl_stmt|;
name|size_t
name|MaxLen
init|=
literal|0
decl_stmt|;
name|int
name|UnitTimeoutSec
init|=
literal|300
decl_stmt|;
name|int
name|TimeoutExitCode
init|=
literal|77
decl_stmt|;
name|int
name|ErrorExitCode
init|=
literal|77
decl_stmt|;
name|int
name|MaxTotalTimeSec
init|=
literal|0
decl_stmt|;
name|int
name|RssLimitMb
init|=
literal|0
decl_stmt|;
name|bool
name|DoCrossOver
init|=
name|true
decl_stmt|;
name|int
name|MutateDepth
init|=
literal|5
decl_stmt|;
name|bool
name|UseCounters
init|=
name|false
decl_stmt|;
name|bool
name|UseIndirCalls
init|=
name|true
decl_stmt|;
name|bool
name|UseTraces
init|=
name|false
decl_stmt|;
name|bool
name|UseMemcmp
init|=
name|true
decl_stmt|;
name|bool
name|UseMemmem
init|=
name|true
decl_stmt|;
name|bool
name|UseFullCoverageSet
init|=
name|false
decl_stmt|;
name|bool
name|Reload
init|=
name|true
decl_stmt|;
name|bool
name|ShuffleAtStartUp
init|=
name|true
decl_stmt|;
name|bool
name|PreferSmall
init|=
name|true
decl_stmt|;
name|size_t
name|MaxNumberOfRuns
init|=
name|ULONG_MAX
decl_stmt|;
name|int
name|ReportSlowUnits
init|=
literal|10
decl_stmt|;
name|bool
name|OnlyASCII
init|=
name|false
decl_stmt|;
name|std
operator|::
name|string
name|OutputCorpus
expr_stmt|;
name|std
operator|::
name|string
name|ArtifactPrefix
operator|=
literal|"./"
expr_stmt|;
name|std
operator|::
name|string
name|ExactArtifactPath
expr_stmt|;
name|bool
name|SaveArtifacts
init|=
name|true
decl_stmt|;
name|bool
name|PrintNEW
init|=
name|true
decl_stmt|;
comment|// Print a status line when new units are found;
name|bool
name|OutputCSV
init|=
name|false
decl_stmt|;
name|bool
name|PrintNewCovPcs
init|=
name|false
decl_stmt|;
name|bool
name|PrintFinalStats
init|=
name|false
decl_stmt|;
name|bool
name|DetectLeaks
init|=
name|true
decl_stmt|;
name|bool
name|TruncateUnits
init|=
name|false
decl_stmt|;
name|bool
name|PruneCorpus
init|=
name|true
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|class
name|MutationDispatcher
block|{
name|public
label|:
name|MutationDispatcher
argument_list|(
name|Random
operator|&
name|Rand
argument_list|,
specifier|const
name|FuzzingOptions
operator|&
name|Options
argument_list|)
expr_stmt|;
operator|~
name|MutationDispatcher
argument_list|()
block|{}
comment|/// Indicate that we are about to start a new sequence of mutations.
name|void
name|StartMutationSequence
argument_list|()
expr_stmt|;
comment|/// Print the current sequence of mutations.
name|void
name|PrintMutationSequence
parameter_list|()
function_decl|;
comment|/// Indicate that the current sequence of mutations was successfull.
name|void
name|RecordSuccessfulMutationSequence
parameter_list|()
function_decl|;
comment|/// Mutates data by invoking user-provided mutator.
name|size_t
name|Mutate_Custom
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by invoking user-provided crossover.
name|size_t
name|Mutate_CustomCrossOver
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by shuffling bytes.
name|size_t
name|Mutate_ShuffleBytes
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by erasing a byte.
name|size_t
name|Mutate_EraseByte
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by inserting a byte.
name|size_t
name|Mutate_InsertByte
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by chanding one byte.
name|size_t
name|Mutate_ChangeByte
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by chanding one bit.
name|size_t
name|Mutate_ChangeBit
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the manual dictionary.
name|size_t
name|Mutate_AddWordFromManualDictionary
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the temporary automatic dictionary.
name|size_t
name|Mutate_AddWordFromTemporaryAutoDictionary
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Mutates data by adding a word from the persistent automatic dictionary.
name|size_t
name|Mutate_AddWordFromPersistentAutoDictionary
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Tries to find an ASCII integer in Data, changes it to another ASCII int.
name|size_t
name|Mutate_ChangeASCIIInteger
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// CrossOver Data with some other element of the corpus.
name|size_t
name|Mutate_CrossOver
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Applies one of the configured mutations.
comment|/// Returns the new size of data which could be up to MaxSize.
name|size_t
name|Mutate
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Applies one of the default mutations. Provided as a service
comment|/// to mutation authors.
name|size_t
name|DefaultMutate
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|/// Creates a cross-over of two pieces of Data, returns its size.
name|size_t
name|CrossOver
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data1
parameter_list|,
name|size_t
name|Size1
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|Data2
parameter_list|,
name|size_t
name|Size2
parameter_list|,
name|uint8_t
modifier|*
name|Out
parameter_list|,
name|size_t
name|MaxOutSize
parameter_list|)
function_decl|;
name|void
name|AddWordToManualDictionary
parameter_list|(
specifier|const
name|Word
modifier|&
name|W
parameter_list|)
function_decl|;
name|void
name|AddWordToAutoDictionary
parameter_list|(
name|DictionaryEntry
name|DE
parameter_list|)
function_decl|;
name|void
name|ClearAutoDictionary
parameter_list|()
function_decl|;
name|void
name|PrintRecommendedDictionary
parameter_list|()
function_decl|;
name|void
name|SetCorpus
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|Corpus
argument_list|)
block|{
name|this
operator|->
name|Corpus
operator|=
name|Corpus
expr_stmt|;
block|}
name|Random
modifier|&
name|GetRand
parameter_list|()
block|{
return|return
name|Rand
return|;
block|}
name|private
label|:
struct|struct
name|Mutator
block|{
name|size_t
argument_list|(
argument|MutationDispatcher::*Fn
argument_list|)
operator|(
name|uint8_t
operator|*
name|Data
operator|,
name|size_t
name|Size
operator|,
name|size_t
name|Max
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
block|}
struct|;
name|size_t
name|AddWordFromDictionary
parameter_list|(
name|Dictionary
modifier|&
name|D
parameter_list|,
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
name|size_t
name|MutateImpl
argument_list|(
name|uint8_t
operator|*
name|Data
argument_list|,
name|size_t
name|Size
argument_list|,
name|size_t
name|MaxSize
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
operator|&
name|Mutators
argument_list|)
decl_stmt|;
name|Random
modifier|&
name|Rand
decl_stmt|;
specifier|const
name|FuzzingOptions
name|Options
decl_stmt|;
comment|// Dictionary provided by the user via -dict=DICT_FILE.
name|Dictionary
name|ManualDictionary
decl_stmt|;
comment|// Temporary dictionary modified by the fuzzer itself,
comment|// recreated periodically.
name|Dictionary
name|TempAutoDictionary
decl_stmt|;
comment|// Persistent dictionary modified by the fuzzer, consists of
comment|// entries that led to successfull discoveries in the past mutations.
name|Dictionary
name|PersistentAutoDictionary
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|CurrentMutatorSequence
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|DictionaryEntry
operator|*
operator|>
name|CurrentDictionaryEntrySequence
expr_stmt|;
specifier|const
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|Corpus
operator|=
name|nullptr
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|MutateInPlaceHere
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|Mutators
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Mutator
operator|>
name|DefaultMutators
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|Fuzzer
block|{
name|public
label|:
comment|// Aggregates all available coverage measurements.
struct|struct
name|Coverage
block|{
name|Coverage
argument_list|()
block|{
name|Reset
argument_list|()
expr_stmt|;
block|}
name|void
name|Reset
parameter_list|()
block|{
name|BlockCoverage
operator|=
literal|0
expr_stmt|;
name|CallerCalleeCoverage
operator|=
literal|0
expr_stmt|;
name|PcMapBits
operator|=
literal|0
expr_stmt|;
name|CounterBitmapBits
operator|=
literal|0
expr_stmt|;
name|PcBufferLen
operator|=
literal|0
expr_stmt|;
name|CounterBitmap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PCMap
operator|.
name|Reset
argument_list|()
expr_stmt|;
block|}
name|std
operator|::
name|string
name|DebugString
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|BlockCoverage
decl_stmt|;
name|size_t
name|CallerCalleeCoverage
decl_stmt|;
name|size_t
name|PcBufferLen
decl_stmt|;
comment|// Precalculated number of bits in CounterBitmap.
name|size_t
name|CounterBitmapBits
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|CounterBitmap
expr_stmt|;
comment|// Precalculated number of bits in PCMap.
name|size_t
name|PcMapBits
decl_stmt|;
name|PcCoverageMap
name|PCMap
decl_stmt|;
block|}
struct|;
name|Fuzzer
argument_list|(
argument|UserCallback CB
argument_list|,
argument|MutationDispatcher&MD
argument_list|,
argument|FuzzingOptions Options
argument_list|)
empty_stmt|;
name|void
name|AddToCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
block|{
name|Corpus
operator|.
name|push_back
argument_list|(
name|U
argument_list|)
expr_stmt|;
name|UpdateCorpusDistribution
argument_list|()
expr_stmt|;
block|}
name|size_t
name|ChooseUnitIdxToMutate
parameter_list|()
function_decl|;
specifier|const
name|Unit
modifier|&
name|ChooseUnitToMutate
parameter_list|()
block|{
return|return
name|Corpus
index|[
name|ChooseUnitIdxToMutate
argument_list|()
index|]
return|;
block|}
empty_stmt|;
name|void
name|TruncateUnits
argument_list|(
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
operator|*
name|NewCorpus
argument_list|)
decl_stmt|;
name|void
name|Loop
parameter_list|()
function_decl|;
name|void
name|Drill
parameter_list|()
function_decl|;
name|void
name|ShuffleAndMinimize
parameter_list|()
function_decl|;
name|void
name|InitializeTraceState
parameter_list|()
function_decl|;
name|void
name|AssignTaintLabels
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|size_t
name|CorpusSize
argument_list|()
specifier|const
block|{
return|return
name|Corpus
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|MaxUnitSizeInCorpus
argument_list|()
specifier|const
expr_stmt|;
name|void
name|ReadDir
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Path
argument_list|,
name|long
operator|*
name|Epoch
argument_list|,
name|size_t
name|MaxSize
argument_list|)
block|{
name|Printf
argument_list|(
literal|"Loading corpus: %s\n"
argument_list|,
name|Path
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|ReadDirToVectorOfUnits
argument_list|(
name|Path
operator|.
name|c_str
argument_list|()
argument_list|,
operator|&
name|Corpus
argument_list|,
name|Epoch
argument_list|,
name|MaxSize
argument_list|)
expr_stmt|;
block|}
name|void
name|RereadOutputCorpus
parameter_list|(
name|size_t
name|MaxSize
parameter_list|)
function_decl|;
comment|// Save the current corpus to OutputCorpus.
name|void
name|SaveCorpus
parameter_list|()
function_decl|;
name|size_t
name|secondsSinceProcessStartUp
parameter_list|()
block|{
return|return
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|system_clock
operator|::
name|now
argument_list|()
operator|-
name|ProcessStartTime
operator|)
operator|.
name|count
argument_list|()
return|;
block|}
name|size_t
name|execPerSec
parameter_list|()
block|{
name|size_t
name|Seconds
init|=
name|secondsSinceProcessStartUp
argument_list|()
decl_stmt|;
return|return
name|Seconds
condition|?
name|TotalNumberOfRuns
operator|/
name|Seconds
else|:
literal|0
return|;
block|}
name|size_t
name|getTotalNumberOfRuns
parameter_list|()
block|{
return|return
name|TotalNumberOfRuns
return|;
block|}
specifier|static
name|void
name|StaticAlarmCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticCrashSignalCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticInterruptCallback
parameter_list|()
function_decl|;
name|void
name|ExecuteCallback
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|bool
name|RunOne
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
comment|// Merge Corpora[1:] into Corpora[0].
name|void
name|Merge
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Corpora
argument_list|)
decl_stmt|;
comment|// Returns a subset of 'Extra' that adds coverage to 'Initial'.
name|UnitVector
name|FindExtraUnits
parameter_list|(
specifier|const
name|UnitVector
modifier|&
name|Initial
parameter_list|,
specifier|const
name|UnitVector
modifier|&
name|Extra
parameter_list|)
function_decl|;
name|MutationDispatcher
modifier|&
name|GetMD
parameter_list|()
block|{
return|return
name|MD
return|;
block|}
name|void
name|PrintFinalStats
parameter_list|()
function_decl|;
name|void
name|SetMaxLen
parameter_list|(
name|size_t
name|MaxLen
parameter_list|)
function_decl|;
name|void
name|RssLimitCallback
parameter_list|()
function_decl|;
comment|// Public for tests.
name|void
name|ResetCoverage
parameter_list|()
function_decl|;
name|bool
name|InFuzzingThread
argument_list|()
specifier|const
block|{
return|return
name|IsMyThread
return|;
block|}
name|size_t
name|GetCurrentUnitInFuzzingThead
argument_list|(
specifier|const
name|uint8_t
operator|*
operator|*
name|Data
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|AlarmCallback
parameter_list|()
function_decl|;
name|void
name|CrashCallback
parameter_list|()
function_decl|;
name|void
name|InterruptCallback
parameter_list|()
function_decl|;
name|void
name|MutateAndTestOne
parameter_list|()
function_decl|;
name|void
name|ReportNewCoverage
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|bool
name|RunOne
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
block|{
return|return
name|RunOne
argument_list|(
name|U
operator|.
name|data
argument_list|()
argument_list|,
name|U
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|void
name|RunOneAndUpdateCorpus
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|void
name|WriteToOutputCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|WriteUnitToFileWithPrefix
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|Prefix
parameter_list|)
function_decl|;
name|void
name|PrintStats
parameter_list|(
specifier|const
name|char
modifier|*
name|Where
parameter_list|,
specifier|const
name|char
modifier|*
name|End
init|=
literal|"\n"
parameter_list|)
function_decl|;
name|void
name|PrintStatusForNewUnit
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|void
name|ShuffleCorpus
parameter_list|(
name|UnitVector
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|TryDetectingAMemoryLeak
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
name|bool
name|DuringInitialCorpusExecution
parameter_list|)
function_decl|;
comment|// Updates the probability distribution for the units in the corpus.
comment|// Must be called whenever the corpus or unit weights are changed.
name|void
name|UpdateCorpusDistribution
parameter_list|()
function_decl|;
name|bool
name|UpdateMaxCoverage
parameter_list|()
function_decl|;
comment|// Trace-based fuzzing: we run a unit with some kind of tracing
comment|// enabled and record potentially useful mutations. Then
comment|// We apply these mutations one by one to the unit and run it again.
comment|// Start tracing; forget all previously proposed mutations.
name|void
name|StartTraceRecording
parameter_list|()
function_decl|;
comment|// Stop tracing.
name|void
name|StopTraceRecording
parameter_list|()
function_decl|;
name|void
name|SetDeathCallback
parameter_list|()
function_decl|;
specifier|static
name|void
name|StaticDeathCallback
parameter_list|()
function_decl|;
name|void
name|DumpCurrentUnit
parameter_list|(
specifier|const
name|char
modifier|*
name|Prefix
parameter_list|)
function_decl|;
name|void
name|DeathCallback
parameter_list|()
function_decl|;
name|void
name|LazyAllocateCurrentUnitData
parameter_list|()
function_decl|;
name|uint8_t
modifier|*
name|CurrentUnitData
init|=
name|nullptr
decl_stmt|;
name|std
operator|::
name|atomic
operator|<
name|size_t
operator|>
name|CurrentUnitSize
expr_stmt|;
name|size_t
name|TotalNumberOfRuns
init|=
literal|0
decl_stmt|;
name|size_t
name|NumberOfNewUnitsAdded
init|=
literal|0
decl_stmt|;
name|bool
name|HasMoreMallocsThanFrees
init|=
name|false
decl_stmt|;
name|size_t
name|NumberOfLeakDetectionAttempts
init|=
literal|0
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Unit
operator|>
name|Corpus
expr_stmt|;
name|std
operator|::
name|unordered_set
operator|<
name|std
operator|::
name|string
operator|>
name|UnitHashesAddedToCorpus
expr_stmt|;
name|std
operator|::
name|piecewise_constant_distribution
operator|<
name|double
operator|>
name|CorpusDistribution
expr_stmt|;
name|UserCallback
name|CB
decl_stmt|;
name|MutationDispatcher
modifier|&
name|MD
decl_stmt|;
name|FuzzingOptions
name|Options
decl_stmt|;
name|system_clock
operator|::
name|time_point
name|ProcessStartTime
operator|=
name|system_clock
operator|::
name|now
argument_list|()
expr_stmt|;
name|system_clock
operator|::
name|time_point
name|UnitStartTime
expr_stmt|;
name|long
name|TimeOfLongestUnitInSeconds
init|=
literal|0
decl_stmt|;
name|long
name|EpochOfLastReadOfOutputCorpus
init|=
literal|0
decl_stmt|;
comment|// Maximum recorded coverage.
name|Coverage
name|MaxCoverage
decl_stmt|;
comment|// Need to know our own thread.
specifier|static
name|thread_local
name|bool
name|IsMyThread
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Global interface to functions that may or may not be available.
end_comment

begin_decl_stmt
specifier|extern
name|ExternalFunctions
modifier|*
name|EF
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_INTERNAL_H
end_comment

end_unit

