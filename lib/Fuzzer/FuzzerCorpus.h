begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerCorpus.h - Internal header for the Fuzzer ----------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// fuzzer::InputCorpus
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_CORPUS
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_CORPUS
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerIO.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerRandom.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerSHA1.h"
end_include

begin_include
include|#
directive|include
file|"FuzzerTracePC.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<numeric>
end_include

begin_include
include|#
directive|include
file|<random>
end_include

begin_include
include|#
directive|include
file|<unordered_set>
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
struct|struct
name|InputInfo
block|{
name|Unit
name|U
decl_stmt|;
comment|// The actual input data.
name|uint8_t
name|Sha1
index|[
name|kSHA1NumBytes
index|]
decl_stmt|;
comment|// Checksum.
comment|// Number of features that this input has and no smaller input has.
name|size_t
name|NumFeatures
init|=
literal|0
decl_stmt|;
name|size_t
name|Tmp
init|=
literal|0
decl_stmt|;
comment|// Used by ValidateFeatureSet.
comment|// Stats.
name|size_t
name|NumExecutedMutations
init|=
literal|0
decl_stmt|;
name|size_t
name|NumSuccessfullMutations
init|=
literal|0
decl_stmt|;
name|bool
name|MayDeleteFile
init|=
name|false
decl_stmt|;
block|}
struct|;
name|class
name|InputCorpus
block|{
specifier|static
specifier|const
name|size_t
name|kFeatureSetSize
init|=
literal|1
operator|<<
literal|21
decl_stmt|;
name|public
label|:
name|InputCorpus
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|OutputCorpus
argument_list|)
operator|:
name|OutputCorpus
argument_list|(
argument|OutputCorpus
argument_list|)
block|{
name|memset
argument_list|(
name|InputSizesPerFeature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|InputSizesPerFeature
argument_list|)
argument_list|)
block|;
name|memset
argument_list|(
name|SmallestElementPerFeature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SmallestElementPerFeature
argument_list|)
argument_list|)
block|;   }
operator|~
name|InputCorpus
argument_list|()
block|{
for|for
control|(
name|auto
name|II
range|:
name|Inputs
control|)
name|delete
name|II
decl_stmt|;
block|}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Inputs
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|SizeInBytes
argument_list|()
specifier|const
block|{
name|size_t
name|Res
operator|=
literal|0
block|;
for|for
control|(
name|auto
name|II
range|:
name|Inputs
control|)
name|Res
operator|+=
name|II
operator|->
name|U
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|Res
return|;
block|}
name|size_t
name|NumActiveUnits
argument_list|()
specifier|const
block|{
name|size_t
name|Res
operator|=
literal|0
block|;
for|for
control|(
name|auto
name|II
range|:
name|Inputs
control|)
name|Res
operator|+=
operator|!
name|II
operator|->
name|U
operator|.
name|empty
argument_list|()
expr_stmt|;
return|return
name|Res
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|size_t
name|MaxInputSize
argument_list|()
specifier|const
block|{
name|size_t
name|Res
operator|=
literal|0
block|;
for|for
control|(
name|auto
name|II
range|:
name|Inputs
control|)
name|Res
operator|=
name|std
operator|::
name|max
argument_list|(
name|Res
argument_list|,
name|II
operator|->
name|U
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Res
return|;
end_return

begin_macro
unit|}   bool
name|empty
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|Inputs
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|Unit
modifier|&
name|operator
index|[]
argument_list|(
name|size_t
name|Idx
argument_list|)
decl|const
block|{
return|return
name|Inputs
index|[
name|Idx
index|]
operator|->
name|U
return|;
block|}
end_decl_stmt

begin_function
name|void
name|AddToCorpus
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
name|size_t
name|NumFeatures
parameter_list|,
name|bool
name|MayDeleteFile
init|=
name|false
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|U
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|uint8_t
name|Hash
index|[
name|kSHA1NumBytes
index|]
decl_stmt|;
if|if
condition|(
name|FeatureDebug
condition|)
name|Printf
argument_list|(
literal|"ADD_TO_CORPUS %zd NF %zd\n"
argument_list|,
name|Inputs
operator|.
name|size
argument_list|()
argument_list|,
name|NumFeatures
argument_list|)
expr_stmt|;
name|ComputeSHA1
argument_list|(
name|U
operator|.
name|data
argument_list|()
argument_list|,
name|U
operator|.
name|size
argument_list|()
argument_list|,
name|Hash
argument_list|)
expr_stmt|;
name|Hashes
operator|.
name|insert
argument_list|(
name|Sha1ToString
argument_list|(
name|Hash
argument_list|)
argument_list|)
expr_stmt|;
name|Inputs
operator|.
name|push_back
argument_list|(
argument|new InputInfo()
argument_list|)
expr_stmt|;
name|InputInfo
modifier|&
name|II
init|=
operator|*
name|Inputs
operator|.
name|back
argument_list|()
decl_stmt|;
name|II
operator|.
name|U
operator|=
name|U
expr_stmt|;
name|II
operator|.
name|NumFeatures
operator|=
name|NumFeatures
expr_stmt|;
name|II
operator|.
name|MayDeleteFile
operator|=
name|MayDeleteFile
expr_stmt|;
name|memcpy
argument_list|(
name|II
operator|.
name|Sha1
argument_list|,
name|Hash
argument_list|,
name|kSHA1NumBytes
argument_list|)
expr_stmt|;
name|UpdateCorpusDistribution
argument_list|()
expr_stmt|;
comment|// ValidateFeatureSet();
block|}
end_function

begin_function
name|bool
name|HasUnit
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
block|{
return|return
name|Hashes
operator|.
name|count
argument_list|(
name|Hash
argument_list|(
name|U
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|HasUnit
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|H
argument_list|)
block|{
return|return
name|Hashes
operator|.
name|count
argument_list|(
name|H
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|InputInfo
modifier|&
name|ChooseUnitToMutate
parameter_list|(
name|Random
modifier|&
name|Rand
parameter_list|)
block|{
name|InputInfo
modifier|&
name|II
init|=
operator|*
name|Inputs
index|[
name|ChooseUnitIdxToMutate
argument_list|(
name|Rand
argument_list|)
index|]
decl_stmt|;
name|assert
argument_list|(
operator|!
name|II
operator|.
name|U
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|II
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Returns an index of random unit from the corpus to mutate.
end_comment

begin_comment
comment|// Hypothesis: units added to the corpus last are more likely to be
end_comment

begin_comment
comment|// interesting. This function gives more weight to the more recent units.
end_comment

begin_function
name|size_t
name|ChooseUnitIdxToMutate
parameter_list|(
name|Random
modifier|&
name|Rand
parameter_list|)
block|{
name|size_t
name|Idx
init|=
name|static_cast
operator|<
name|size_t
operator|>
operator|(
name|CorpusDistribution
argument_list|(
name|Rand
argument_list|)
operator|)
decl_stmt|;
name|assert
argument_list|(
name|Idx
operator|<
name|Inputs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Idx
return|;
block|}
end_function

begin_function
name|void
name|PrintStats
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
specifier|auto
modifier|&
name|II
init|=
operator|*
name|Inputs
index|[
name|i
index|]
decl_stmt|;
name|Printf
argument_list|(
literal|"  [%zd %s]\tsz: %zd\truns: %zd\tsucc: %zd\n"
argument_list|,
name|i
argument_list|,
name|Sha1ToString
argument_list|(
name|II
operator|.
name|Sha1
argument_list|)
operator|.
name|c_str
argument_list|()
argument_list|,
name|II
operator|.
name|U
operator|.
name|size
argument_list|()
argument_list|,
name|II
operator|.
name|NumExecutedMutations
argument_list|,
name|II
operator|.
name|NumSuccessfullMutations
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|PrintFeatureSet
parameter_list|()
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kFeatureSetSize
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|size_t
name|Sz
init|=
name|GetFeature
argument_list|(
name|i
argument_list|)
condition|)
name|Printf
argument_list|(
literal|"[%zd: id %zd sz%zd] "
argument_list|,
name|i
argument_list|,
name|SmallestElementPerFeature
index|[
name|i
index|]
argument_list|,
name|Sz
argument_list|)
expr_stmt|;
block|}
name|Printf
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|size_t
name|N
init|=
name|Inputs
index|[
name|i
index|]
operator|->
name|NumFeatures
condition|)
name|Printf
argument_list|(
literal|" %zd=>%zd "
argument_list|,
name|i
argument_list|,
name|N
argument_list|)
expr_stmt|;
name|Printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|DeleteInput
parameter_list|(
name|size_t
name|Idx
parameter_list|)
block|{
name|InputInfo
modifier|&
name|II
init|=
operator|*
name|Inputs
index|[
name|Idx
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|OutputCorpus
operator|.
name|empty
argument_list|()
operator|&&
name|II
operator|.
name|MayDeleteFile
condition|)
name|RemoveFile
argument_list|(
name|DirPlusFile
argument_list|(
name|OutputCorpus
argument_list|,
name|Sha1ToString
argument_list|(
name|II
operator|.
name|Sha1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Unit
argument_list|()
operator|.
name|swap
argument_list|(
name|II
operator|.
name|U
argument_list|)
expr_stmt|;
if|if
condition|(
name|FeatureDebug
condition|)
name|Printf
argument_list|(
literal|"EVICTED %zd\n"
argument_list|,
name|Idx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|AddFeature
parameter_list|(
name|size_t
name|Idx
parameter_list|,
name|uint32_t
name|NewSize
parameter_list|,
name|bool
name|Shrink
parameter_list|)
block|{
name|assert
argument_list|(
name|NewSize
argument_list|)
expr_stmt|;
name|Idx
operator|=
name|Idx
operator|%
name|kFeatureSetSize
expr_stmt|;
name|uint32_t
name|OldSize
init|=
name|GetFeature
argument_list|(
name|Idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|OldSize
operator|==
literal|0
operator|||
operator|(
name|Shrink
operator|&&
name|OldSize
operator|>
name|NewSize
operator|)
condition|)
block|{
if|if
condition|(
name|OldSize
operator|>
literal|0
condition|)
block|{
name|size_t
name|OldIdx
init|=
name|SmallestElementPerFeature
index|[
name|Idx
index|]
decl_stmt|;
name|InputInfo
modifier|&
name|II
init|=
operator|*
name|Inputs
index|[
name|OldIdx
index|]
decl_stmt|;
name|assert
argument_list|(
name|II
operator|.
name|NumFeatures
operator|>
literal|0
argument_list|)
expr_stmt|;
name|II
operator|.
name|NumFeatures
operator|--
expr_stmt|;
if|if
condition|(
name|II
operator|.
name|NumFeatures
operator|==
literal|0
condition|)
name|DeleteInput
argument_list|(
name|OldIdx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NumAddedFeatures
operator|++
expr_stmt|;
block|}
name|NumUpdatedFeatures
operator|++
expr_stmt|;
if|if
condition|(
name|FeatureDebug
condition|)
name|Printf
argument_list|(
literal|"ADD FEATURE %zd sz %d\n"
argument_list|,
name|Idx
argument_list|,
name|NewSize
argument_list|)
expr_stmt|;
name|SmallestElementPerFeature
index|[
name|Idx
index|]
operator|=
name|Inputs
operator|.
name|size
argument_list|()
expr_stmt|;
name|InputSizesPerFeature
index|[
name|Idx
index|]
operator|=
name|NewSize
expr_stmt|;
name|CountingFeatures
operator|=
name|true
expr_stmt|;
block|}
block|}
end_function

begin_expr_stmt
name|size_t
name|NumFeatures
argument_list|()
specifier|const
block|{
return|return
name|NumAddedFeatures
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|NumFeatureUpdates
argument_list|()
specifier|const
block|{
return|return
name|NumUpdatedFeatures
return|;
block|}
end_expr_stmt

begin_function
name|void
name|ResetFeatureSet
parameter_list|()
block|{
name|assert
argument_list|(
name|Inputs
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|InputSizesPerFeature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|InputSizesPerFeature
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|SmallestElementPerFeature
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|SmallestElementPerFeature
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|FeatureDebug
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|GetFeature
argument_list|(
name|size_t
name|Idx
argument_list|)
decl|const
block|{
return|return
name|InputSizesPerFeature
index|[
name|Idx
index|]
return|;
block|}
end_decl_stmt

begin_function
name|void
name|ValidateFeatureSet
parameter_list|()
block|{
if|if
condition|(
operator|!
name|CountingFeatures
condition|)
return|return;
if|if
condition|(
name|FeatureDebug
condition|)
name|PrintFeatureSet
argument_list|()
expr_stmt|;
for|for
control|(
name|size_t
name|Idx
init|=
literal|0
init|;
name|Idx
operator|<
name|kFeatureSetSize
condition|;
name|Idx
operator|++
control|)
if|if
condition|(
name|GetFeature
argument_list|(
name|Idx
argument_list|)
condition|)
name|Inputs
index|[
name|SmallestElementPerFeature
index|[
name|Idx
index|]
index|]
operator|->
name|Tmp
operator|++
expr_stmt|;
for|for
control|(
name|auto
name|II
range|:
name|Inputs
control|)
block|{
if|if
condition|(
name|II
operator|->
name|Tmp
operator|!=
name|II
operator|->
name|NumFeatures
condition|)
name|Printf
argument_list|(
literal|"ZZZ %zd %zd\n"
argument_list|,
name|II
operator|->
name|Tmp
argument_list|,
name|II
operator|->
name|NumFeatures
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|II
operator|->
name|Tmp
operator|==
name|II
operator|->
name|NumFeatures
argument_list|)
expr_stmt|;
name|II
operator|->
name|Tmp
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Updates the probability distribution for the units in the corpus.
end_comment

begin_comment
comment|// Must be called whenever the corpus or unit weights are changed.
end_comment

begin_function
name|void
name|UpdateCorpusDistribution
parameter_list|()
block|{
name|size_t
name|N
init|=
name|Inputs
operator|.
name|size
argument_list|()
decl_stmt|;
name|Intervals
operator|.
name|resize
argument_list|(
name|N
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Weights
operator|.
name|resize
argument_list|(
name|N
argument_list|)
expr_stmt|;
name|std
operator|::
name|iota
argument_list|(
name|Intervals
operator|.
name|begin
argument_list|()
argument_list|,
name|Intervals
operator|.
name|end
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|CountingFeatures
condition|)
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|N
condition|;
name|i
operator|++
control|)
name|Weights
index|[
name|i
index|]
operator|=
name|Inputs
index|[
name|i
index|]
operator|->
name|NumFeatures
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
else|else
name|std
operator|::
name|iota
argument_list|(
name|Weights
operator|.
name|begin
argument_list|()
argument_list|,
name|Weights
operator|.
name|end
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CorpusDistribution
operator|=
name|std
operator|::
name|piecewise_constant_distribution
operator|<
name|double
operator|>
operator|(
name|Intervals
operator|.
name|begin
argument_list|()
operator|,
name|Intervals
operator|.
name|end
argument_list|()
operator|,
name|Weights
operator|.
name|begin
argument_list|()
operator|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|std
operator|::
name|piecewise_constant_distribution
operator|<
name|double
operator|>
name|CorpusDistribution
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|double
operator|>
name|Intervals
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|double
operator|>
name|Weights
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unordered_set
operator|<
name|std
operator|::
name|string
operator|>
name|Hashes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|InputInfo
operator|*
operator|>
name|Inputs
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|CountingFeatures
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|NumAddedFeatures
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|NumUpdatedFeatures
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|InputSizesPerFeature
index|[
name|kFeatureSetSize
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|SmallestElementPerFeature
index|[
name|kFeatureSetSize
index|]
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|OutputCorpus
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_CORPUS
end_comment

end_unit

