begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerUtil.h - Internal header for the Fuzzer Utils ------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Util functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_UTIL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_UTIL_H
end_define

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
name|void
name|PrintHexArray
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|PrintHexArray
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|PrintASCII
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|,
specifier|const
name|char
modifier|*
name|PrintAfter
init|=
literal|""
parameter_list|)
function_decl|;
comment|// Changes U to contain only ASCII (isprint+isspace) characters.
comment|// Returns true iff U has been changed.
name|bool
name|ToASCII
parameter_list|(
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|bool
name|IsASCII
parameter_list|(
specifier|const
name|Unit
modifier|&
name|U
parameter_list|)
function_decl|;
name|bool
name|IsASCII
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Data
parameter_list|,
name|size_t
name|Size
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|Base64
argument_list|(
specifier|const
name|Unit
operator|&
name|U
argument_list|)
expr_stmt|;
name|void
name|PrintPC
parameter_list|(
specifier|const
name|char
modifier|*
name|SymbolizedFMT
parameter_list|,
specifier|const
name|char
modifier|*
name|FallbackFMT
parameter_list|,
name|uintptr_t
name|PC
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|DescribePC
argument_list|(
argument|const char *SymbolizedFMT
argument_list|,
argument|uintptr_t PC
argument_list|)
expr_stmt|;
name|unsigned
name|NumberOfCpuCores
parameter_list|()
function_decl|;
name|bool
name|ExecuteCommandAndReadOutput
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Command
argument_list|,
name|std
operator|::
name|string
operator|*
name|Out
argument_list|)
decl_stmt|;
comment|// Platform specific functions.
name|void
name|SetSignalHandler
parameter_list|(
specifier|const
name|FuzzingOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
name|void
name|SleepSeconds
parameter_list|(
name|int
name|Seconds
parameter_list|)
function_decl|;
name|unsigned
name|long
name|GetPid
parameter_list|()
function_decl|;
name|size_t
name|GetPeakRSSMb
parameter_list|()
function_decl|;
name|int
name|ExecuteCommand
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Command
argument_list|)
decl_stmt|;
name|FILE
modifier|*
name|OpenProcessPipe
parameter_list|(
specifier|const
name|char
modifier|*
name|Command
parameter_list|,
specifier|const
name|char
modifier|*
name|Mode
parameter_list|)
function_decl|;
specifier|const
name|void
modifier|*
name|SearchMemory
parameter_list|(
specifier|const
name|void
modifier|*
name|haystack
parameter_list|,
name|size_t
name|haystacklen
parameter_list|,
specifier|const
name|void
modifier|*
name|needle
parameter_list|,
name|size_t
name|needlelen
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|CloneArgsWithoutX
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|Args
argument_list|,
specifier|const
name|char
operator|*
name|X1
argument_list|,
specifier|const
name|char
operator|*
name|X2
argument_list|)
expr_stmt|;
specifier|inline
name|std
operator|::
name|string
name|CloneArgsWithoutX
argument_list|(
argument|const std::vector<std::string>&Args
argument_list|,
argument|const char *X
argument_list|)
block|{
return|return
name|CloneArgsWithoutX
argument_list|(
name|Args
argument_list|,
name|X
argument_list|,
name|X
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|DisassembleCmd
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|FileName
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|SearchRegexCmd
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Regex
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_UTIL_H
end_comment

end_unit

