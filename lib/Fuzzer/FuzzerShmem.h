begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FuzzerShmem.h - shared memory interface ------------------*- C++ -* ===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// SharedMemoryRegion
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_FUZZER_SHMEM_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_FUZZER_SHMEM_H
end_define

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"FuzzerDefs.h"
end_include

begin_decl_stmt
name|namespace
name|fuzzer
block|{
name|class
name|SharedMemoryRegion
block|{
name|public
label|:
name|bool
name|Create
parameter_list|(
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|bool
name|Open
parameter_list|(
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|bool
name|Destroy
parameter_list|(
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|GetData
parameter_list|()
block|{
return|return
name|Data
return|;
block|}
name|void
name|PostServer
parameter_list|()
block|{
name|Post
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|WaitServer
parameter_list|()
block|{
name|Wait
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|void
name|PostClient
parameter_list|()
block|{
name|Post
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|void
name|WaitClient
parameter_list|()
block|{
name|Wait
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|size_t
name|WriteByteArray
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Bytes
parameter_list|,
name|size_t
name|N
parameter_list|)
block|{
name|assert
argument_list|(
name|N
operator|<=
name|kShmemSize
operator|-
sizeof|sizeof
argument_list|(
name|N
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|GetData
argument_list|()
argument_list|,
operator|&
name|N
argument_list|,
sizeof|sizeof
argument_list|(
name|N
argument_list|)
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|GetData
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|N
argument_list|)
argument_list|,
name|Bytes
argument_list|,
name|N
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|N
operator|==
name|ReadByteArraySize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
name|size_t
name|ReadByteArraySize
parameter_list|()
block|{
name|size_t
name|Res
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|Res
argument_list|,
name|GetData
argument_list|()
argument_list|,
sizeof|sizeof
argument_list|(
name|Res
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Res
return|;
block|}
name|uint8_t
modifier|*
name|GetByteArray
parameter_list|()
block|{
return|return
name|GetData
argument_list|()
operator|+
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
return|;
block|}
name|bool
name|IsServer
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|&&
name|IAmServer
return|;
block|}
name|bool
name|IsClient
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|&&
operator|!
name|IAmServer
return|;
block|}
name|private
label|:
specifier|static
specifier|const
name|size_t
name|kShmemSize
init|=
literal|1
operator|<<
literal|22
decl_stmt|;
name|bool
name|IAmServer
decl_stmt|;
name|std
operator|::
name|string
name|Path
argument_list|(
specifier|const
name|char
operator|*
name|Name
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|SemName
argument_list|(
argument|const char *Name
argument_list|,
argument|int Idx
argument_list|)
expr_stmt|;
name|void
name|Post
parameter_list|(
name|int
name|Idx
parameter_list|)
function_decl|;
name|void
name|Wait
parameter_list|(
name|int
name|Idx
parameter_list|)
function_decl|;
name|bool
name|Map
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|Data
init|=
name|nullptr
decl_stmt|;
name|void
modifier|*
name|Semaphore
index|[
literal|2
index|]
decl_stmt|;
block|}
empty_stmt|;
specifier|extern
name|SharedMemoryRegion
name|SMR
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace fuzzer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_FUZZER_SHMEM_H
end_comment

end_unit

