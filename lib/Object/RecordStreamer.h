begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RecordStreamer.h - Record asm defined and used symbols ---*- C++ -*===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_OBJECT_RECORDSTREAMER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_OBJECT_RECORDSTREAMER_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCStreamer.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RecordStreamer
range|:
name|public
name|MCStreamer
block|{
name|public
operator|:
expr|enum
name|State
block|{
name|NeverSeen
block|,
name|Global
block|,
name|Defined
block|,
name|DefinedGlobal
block|,
name|DefinedWeak
block|,
name|Used
block|,
name|UndefinedWeak
block|}
block|;
name|private
operator|:
name|StringMap
operator|<
name|State
operator|>
name|Symbols
block|;
comment|// Map of aliases created by .symver directives, saved so we can update
comment|// their symbol binding after parsing complete. This maps from each
comment|// aliasee to its list of aliases.
name|DenseMap
operator|<
specifier|const
name|MCSymbol
operator|*
block|,
name|std
operator|::
name|vector
operator|<
name|MCSymbol
operator|*
operator|>>
name|SymverAliasMap
block|;
name|void
name|markDefined
argument_list|(
specifier|const
name|MCSymbol
operator|&
name|Symbol
argument_list|)
block|;
name|void
name|markGlobal
argument_list|(
argument|const MCSymbol&Symbol
argument_list|,
argument|MCSymbolAttr Attribute
argument_list|)
block|;
name|void
name|markUsed
argument_list|(
specifier|const
name|MCSymbol
operator|&
name|Symbol
argument_list|)
block|;
name|void
name|visitUsedSymbol
argument_list|(
argument|const MCSymbol&Sym
argument_list|)
name|override
block|;
name|public
operator|:
typedef|typedef
name|StringMap
operator|<
name|State
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|const_iterator
name|begin
argument_list|()
decl_stmt|;
name|const_iterator
name|end
parameter_list|()
function_decl|;
name|RecordStreamer
argument_list|(
name|MCContext
operator|&
name|Context
argument_list|)
expr_stmt|;
name|void
name|EmitInstruction
argument_list|(
specifier|const
name|MCInst
operator|&
name|Inst
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
argument_list|,
name|bool
argument_list|)
name|override
decl_stmt|;
name|void
name|EmitLabel
argument_list|(
name|MCSymbol
operator|*
name|Symbol
argument_list|,
name|SMLoc
name|Loc
operator|=
name|SMLoc
argument_list|()
argument_list|)
name|override
decl_stmt|;
name|void
name|EmitAssignment
argument_list|(
name|MCSymbol
operator|*
name|Symbol
argument_list|,
specifier|const
name|MCExpr
operator|*
name|Value
argument_list|)
name|override
decl_stmt|;
name|bool
name|EmitSymbolAttribute
argument_list|(
name|MCSymbol
operator|*
name|Symbol
argument_list|,
name|MCSymbolAttr
name|Attribute
argument_list|)
name|override
decl_stmt|;
name|void
name|EmitZerofill
argument_list|(
name|MCSection
operator|*
name|Section
argument_list|,
name|MCSymbol
operator|*
name|Symbol
argument_list|,
name|uint64_t
name|Size
argument_list|,
name|unsigned
name|ByteAlignment
argument_list|)
name|override
decl_stmt|;
name|void
name|EmitCommonSymbol
argument_list|(
name|MCSymbol
operator|*
name|Symbol
argument_list|,
name|uint64_t
name|Size
argument_list|,
name|unsigned
name|ByteAlignment
argument_list|)
name|override
decl_stmt|;
comment|/// Record .symver aliases for later processing.
name|void
name|emitELFSymverDirective
argument_list|(
name|MCSymbol
operator|*
name|Alias
argument_list|,
specifier|const
name|MCSymbol
operator|*
name|Aliasee
argument_list|)
name|override
decl_stmt|;
comment|/// Return the map of .symver aliasee to associated aliases.
name|DenseMap
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
name|std
operator|::
name|vector
operator|<
name|MCSymbol
operator|*
operator|>>
operator|&
name|symverAliases
argument_list|()
block|{
return|return
name|SymverAliasMap
return|;
block|}
comment|/// Get the state recorded for the given symbol.
name|State
name|getSymbolState
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|Sym
parameter_list|)
block|{
name|auto
name|SI
init|=
name|Symbols
operator|.
name|find
argument_list|(
name|Sym
operator|->
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|SI
operator|==
name|Symbols
operator|.
name|end
argument_list|()
condition|)
return|return
name|NeverSeen
return|;
return|return
name|SI
operator|->
name|second
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

