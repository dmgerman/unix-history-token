begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_flags.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer/AddressSanitizer runtime.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_FLAGS_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_FLAGS_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
name|void
name|ParseFlag
parameter_list|(
specifier|const
name|char
modifier|*
name|env
parameter_list|,
name|bool
modifier|*
name|flag
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|descr
parameter_list|)
function_decl|;
name|void
name|ParseFlag
parameter_list|(
specifier|const
name|char
modifier|*
name|env
parameter_list|,
name|int
modifier|*
name|flag
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|descr
parameter_list|)
function_decl|;
name|void
name|ParseFlag
parameter_list|(
specifier|const
name|char
modifier|*
name|env
parameter_list|,
name|uptr
modifier|*
name|flag
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|descr
parameter_list|)
function_decl|;
name|void
name|ParseFlag
parameter_list|(
specifier|const
name|char
modifier|*
name|env
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|flag
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|descr
parameter_list|)
function_decl|;
struct|struct
name|CommonFlags
block|{
name|bool
name|symbolize
decl_stmt|;
specifier|const
name|char
modifier|*
name|external_symbolizer_path
decl_stmt|;
name|bool
name|allow_addr2line
decl_stmt|;
specifier|const
name|char
modifier|*
name|strip_path_prefix
decl_stmt|;
name|bool
name|fast_unwind_on_check
decl_stmt|;
name|bool
name|fast_unwind_on_fatal
decl_stmt|;
name|bool
name|fast_unwind_on_malloc
decl_stmt|;
name|bool
name|handle_ioctl
decl_stmt|;
name|int
name|malloc_context_size
decl_stmt|;
specifier|const
name|char
modifier|*
name|log_path
decl_stmt|;
name|int
name|verbosity
decl_stmt|;
name|bool
name|detect_leaks
decl_stmt|;
name|bool
name|leak_check_at_exit
decl_stmt|;
name|bool
name|allocator_may_return_null
decl_stmt|;
name|bool
name|print_summary
decl_stmt|;
name|bool
name|check_printf
decl_stmt|;
name|bool
name|handle_segv
decl_stmt|;
name|bool
name|allow_user_segv_handler
decl_stmt|;
name|bool
name|use_sigaltstack
decl_stmt|;
name|bool
name|detect_deadlocks
decl_stmt|;
name|uptr
name|clear_shadow_mmap_threshold
decl_stmt|;
specifier|const
name|char
modifier|*
name|color
decl_stmt|;
name|bool
name|legacy_pthread_cond
decl_stmt|;
name|bool
name|intercept_tls_get_addr
decl_stmt|;
name|bool
name|help
decl_stmt|;
name|uptr
name|mmap_limit_mb
decl_stmt|;
name|bool
name|coverage
decl_stmt|;
name|bool
name|coverage_direct
decl_stmt|;
specifier|const
name|char
modifier|*
name|coverage_dir
decl_stmt|;
name|bool
name|full_address_space
decl_stmt|;
specifier|const
name|char
modifier|*
name|suppressions
decl_stmt|;
name|bool
name|print_suppressions
decl_stmt|;
name|bool
name|disable_coredump
decl_stmt|;
name|bool
name|symbolize_inline_frames
decl_stmt|;
specifier|const
name|char
modifier|*
name|stack_trace_format
decl_stmt|;
block|}
struct|;
specifier|inline
name|CommonFlags
modifier|*
name|common_flags
parameter_list|()
block|{
specifier|extern
name|CommonFlags
name|common_flags_dont_use
decl_stmt|;
return|return
operator|&
name|common_flags_dont_use
return|;
block|}
name|void
name|SetCommonFlagsDefaults
parameter_list|(
name|CommonFlags
modifier|*
name|f
parameter_list|)
function_decl|;
name|void
name|ParseCommonFlagsFromString
parameter_list|(
name|CommonFlags
modifier|*
name|f
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|void
name|PrintFlagDescriptions
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_FLAGS_H
end_comment

end_unit

