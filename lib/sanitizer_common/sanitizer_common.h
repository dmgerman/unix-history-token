begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_common.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is shared between AddressSanitizer and ThreadSanitizer
end_comment

begin_comment
comment|// run-time libraries.
end_comment

begin_comment
comment|// It declares common functions and classes that are used in both runtimes.
end_comment

begin_comment
comment|// Implementation of some functions are provided in sanitizer_common, while
end_comment

begin_comment
comment|// others must be defined by run-time library itself.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_COMMON_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
comment|// Constants.
specifier|const
name|uptr
name|kWordSize
init|=
name|__WORDSIZE
operator|/
literal|8
decl_stmt|;
specifier|const
name|uptr
name|kWordSizeInBits
init|=
literal|8
operator|*
name|kWordSize
decl_stmt|;
specifier|const
name|uptr
name|kPageSizeBits
init|=
literal|12
decl_stmt|;
specifier|const
name|uptr
name|kPageSize
init|=
literal|1UL
operator|<<
name|kPageSizeBits
decl_stmt|;
specifier|const
name|uptr
name|kCacheLineSize
init|=
literal|64
decl_stmt|;
ifndef|#
directive|ifndef
name|_WIN32
specifier|const
name|uptr
name|kMmapGranularity
init|=
name|kPageSize
decl_stmt|;
else|#
directive|else
specifier|const
name|uptr
name|kMmapGranularity
init|=
literal|1UL
operator|<<
literal|16
decl_stmt|;
endif|#
directive|endif
comment|// Threads
name|int
name|GetPid
parameter_list|()
function_decl|;
name|uptr
name|GetThreadSelf
parameter_list|()
function_decl|;
name|void
name|GetThreadStackTopAndBottom
parameter_list|(
name|bool
name|at_initialization
parameter_list|,
name|uptr
modifier|*
name|stack_top
parameter_list|,
name|uptr
modifier|*
name|stack_bottom
parameter_list|)
function_decl|;
comment|// Memory management
name|void
modifier|*
name|MmapOrDie
parameter_list|(
name|uptr
name|size
parameter_list|,
specifier|const
name|char
modifier|*
name|mem_type
parameter_list|)
function_decl|;
name|void
name|UnmapOrDie
parameter_list|(
name|void
modifier|*
name|addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|MmapFixedNoReserve
parameter_list|(
name|uptr
name|fixed_addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|Mprotect
parameter_list|(
name|uptr
name|fixed_addr
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
comment|// Used to check if we can map shadow memory to a fixed location.
name|bool
name|MemoryRangeIsAvailable
parameter_list|(
name|uptr
name|range_start
parameter_list|,
name|uptr
name|range_end
parameter_list|)
function_decl|;
comment|// Internal allocator
name|void
modifier|*
name|InternalAlloc
parameter_list|(
name|uptr
name|size
parameter_list|)
function_decl|;
name|void
name|InternalFree
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
comment|// Given the pointer p into a valid allocated block,
comment|// returns a pointer to the beginning of the block.
name|void
modifier|*
name|InternalAllocBlock
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
comment|// IO
name|void
name|RawWrite
parameter_list|(
specifier|const
name|char
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|Printf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|Report
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|// Opens the file 'file_name" and reads up to 'max_len' bytes.
comment|// The resulting buffer is mmaped and stored in '*buff'.
comment|// The size of the mmaped region is stored in '*buff_size',
comment|// Returns the number of read bytes or 0 if file can not be opened.
name|uptr
name|ReadFileToBuffer
parameter_list|(
specifier|const
name|char
modifier|*
name|file_name
parameter_list|,
name|char
modifier|*
modifier|*
name|buff
parameter_list|,
name|uptr
modifier|*
name|buff_size
parameter_list|,
name|uptr
name|max_len
parameter_list|)
function_decl|;
comment|// Maps given file to virtual memory, and returns pointer to it
comment|// (or NULL if the mapping failes). Stores the size of mmaped region
comment|// in '*buff_size'.
name|void
modifier|*
name|MapFileToMemory
parameter_list|(
specifier|const
name|char
modifier|*
name|file_name
parameter_list|,
name|uptr
modifier|*
name|buff_size
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetEnv
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetPwd
parameter_list|()
function_decl|;
comment|// Other
name|void
name|DisableCoreDumper
parameter_list|()
function_decl|;
name|void
name|DumpProcessMap
parameter_list|()
function_decl|;
name|void
name|SleepForSeconds
parameter_list|(
name|int
name|seconds
parameter_list|)
function_decl|;
name|void
name|SleepForMillis
parameter_list|(
name|int
name|millis
parameter_list|)
function_decl|;
name|void
name|NORETURN
name|Exit
parameter_list|(
name|int
name|exitcode
parameter_list|)
function_decl|;
name|void
name|NORETURN
name|Abort
parameter_list|()
function_decl|;
name|int
name|Atexit
parameter_list|(
name|void
function_decl|(
modifier|*
name|function
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|SortArray
parameter_list|(
name|uptr
modifier|*
name|array
parameter_list|,
name|uptr
name|size
parameter_list|)
function_decl|;
comment|// Math
name|INLINE
name|bool
name|IsPowerOfTwo
parameter_list|(
name|uptr
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
operator|&
operator|(
name|x
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
return|;
block|}
name|INLINE
name|uptr
name|RoundUpTo
parameter_list|(
name|uptr
name|size
parameter_list|,
name|uptr
name|boundary
parameter_list|)
block|{
name|CHECK
argument_list|(
name|IsPowerOfTwo
argument_list|(
name|boundary
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|size
operator|+
name|boundary
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
name|boundary
operator|-
literal|1
operator|)
return|;
block|}
comment|// Don't use std::min, std::max or std::swap, to minimize dependency
comment|// on libstdc++.
name|template
operator|<
name|class
name|T
operator|>
name|T
name|Min
argument_list|(
argument|T a
argument_list|,
argument|T b
argument_list|)
block|{
return|return
name|a
operator|<
name|b
operator|?
name|a
operator|:
name|b
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
name|T
name|Max
argument_list|(
argument|T a
argument_list|,
argument|T b
argument_list|)
block|{
return|return
name|a
operator|>
name|b
operator|?
name|a
operator|:
name|b
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
name|void
name|Swap
argument_list|(
argument|T& a
argument_list|,
argument|T& b
argument_list|)
block|{
name|T
name|tmp
operator|=
name|a
block|;
name|a
operator|=
name|b
block|;
name|b
operator|=
name|tmp
block|; }
comment|// Char handling
name|INLINE
name|bool
name|IsSpace
argument_list|(
argument|int c
argument_list|)
block|{
return|return
operator|(
name|c
operator|==
literal|' '
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\n'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\t'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\f'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\r'
operator|)
operator|||
operator|(
name|c
operator|==
literal|'\v'
operator|)
return|;
block|}
name|INLINE
name|bool
name|IsDigit
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'0'
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|'9'
operator|)
return|;
block|}
name|INLINE
name|int
name|ToLower
parameter_list|(
name|int
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
condition|?
operator|(
name|c
operator|+
literal|'a'
operator|-
literal|'A'
operator|)
else|:
name|c
return|;
block|}
if|#
directive|if
name|__WORDSIZE
operator|==
literal|64
define|#
directive|define
name|FIRST_32_SECOND_64
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(b)
else|#
directive|else
define|#
directive|define
name|FIRST_32_SECOND_64
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(a)
endif|#
directive|endif
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_COMMON_H
end_comment

end_unit

