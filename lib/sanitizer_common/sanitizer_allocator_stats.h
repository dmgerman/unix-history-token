begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_allocator_stats.h -----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Part of the Sanitizer Allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_ALLOCATOR_H
end_ifndef

begin_error
error|#
directive|error
error|This file must be included inside sanitizer_allocator.h
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// Memory allocator statistics
end_comment

begin_enum
enum|enum
name|AllocatorStat
block|{
name|AllocatorStatAllocated
block|,
name|AllocatorStatMapped
block|,
name|AllocatorStatCount
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|uptr
name|AllocatorStatCounters
index|[
name|AllocatorStatCount
index|]
typedef|;
end_typedef

begin_comment
comment|// Per-thread stats, live in per-thread cache.
end_comment

begin_decl_stmt
name|class
name|AllocatorStats
block|{
name|public
label|:
name|void
name|Init
parameter_list|()
block|{
name|internal_memset
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|InitLinkerInitialized
parameter_list|()
block|{}
name|void
name|Add
parameter_list|(
name|AllocatorStat
name|i
parameter_list|,
name|uptr
name|v
parameter_list|)
block|{
name|v
operator|+=
name|atomic_load
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|memory_order_relaxed
argument_list|)
expr_stmt|;
name|atomic_store
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|v
argument_list|,
name|memory_order_relaxed
argument_list|)
expr_stmt|;
block|}
name|void
name|Sub
parameter_list|(
name|AllocatorStat
name|i
parameter_list|,
name|uptr
name|v
parameter_list|)
block|{
name|v
operator|=
name|atomic_load
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|memory_order_relaxed
argument_list|)
operator|-
name|v
expr_stmt|;
name|atomic_store
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|v
argument_list|,
name|memory_order_relaxed
argument_list|)
expr_stmt|;
block|}
name|void
name|Set
parameter_list|(
name|AllocatorStat
name|i
parameter_list|,
name|uptr
name|v
parameter_list|)
block|{
name|atomic_store
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|v
argument_list|,
name|memory_order_relaxed
argument_list|)
expr_stmt|;
block|}
name|uptr
name|Get
argument_list|(
name|AllocatorStat
name|i
argument_list|)
decl|const
block|{
return|return
name|atomic_load
argument_list|(
operator|&
name|stats_
index|[
name|i
index|]
argument_list|,
name|memory_order_relaxed
argument_list|)
return|;
block|}
name|private
label|:
name|friend
name|class
name|AllocatorGlobalStats
decl_stmt|;
name|AllocatorStats
modifier|*
name|next_
decl_stmt|;
name|AllocatorStats
modifier|*
name|prev_
decl_stmt|;
name|atomic_uintptr_t
name|stats_
index|[
name|AllocatorStatCount
index|]
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Global stats, used for aggregation and querying.
end_comment

begin_decl_stmt
name|class
name|AllocatorGlobalStats
range|:
name|public
name|AllocatorStats
block|{
name|public
operator|:
name|void
name|InitLinkerInitialized
argument_list|()
block|{
name|next_
operator|=
name|this
block|;
name|prev_
operator|=
name|this
block|;   }
name|void
name|Init
argument_list|()
block|{
name|internal_memset
argument_list|(
name|this
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;
name|InitLinkerInitialized
argument_list|()
block|;   }
name|void
name|Register
argument_list|(
argument|AllocatorStats *s
argument_list|)
block|{
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|mu_
argument_list|)
block|;
name|s
operator|->
name|next_
operator|=
name|next_
block|;
name|s
operator|->
name|prev_
operator|=
name|this
block|;
name|next_
operator|->
name|prev_
operator|=
name|s
block|;
name|next_
operator|=
name|s
block|;   }
name|void
name|Unregister
argument_list|(
argument|AllocatorStats *s
argument_list|)
block|{
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|mu_
argument_list|)
block|;
name|s
operator|->
name|prev_
operator|->
name|next_
operator|=
name|s
operator|->
name|next_
block|;
name|s
operator|->
name|next_
operator|->
name|prev_
operator|=
name|s
operator|->
name|prev_
block|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AllocatorStatCount
condition|;
name|i
operator|++
control|)
name|Add
argument_list|(
name|AllocatorStat
argument_list|(
name|i
argument_list|)
argument_list|,
name|s
operator|->
name|Get
argument_list|(
name|AllocatorStat
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|Get
argument_list|(
argument|AllocatorStatCounters s
argument_list|)
specifier|const
block|{
name|internal_memset
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|AllocatorStatCount
operator|*
sizeof|sizeof
argument_list|(
name|uptr
argument_list|)
argument_list|)
block|;
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|mu_
argument_list|)
block|;
specifier|const
name|AllocatorStats
operator|*
name|stats
operator|=
name|this
block|;
for|for
control|(
init|;
condition|;
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AllocatorStatCount
condition|;
name|i
operator|++
control|)
name|s
index|[
name|i
index|]
operator|+=
name|stats
operator|->
name|Get
argument_list|(
name|AllocatorStat
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|stats
operator|=
name|stats
operator|->
name|next_
expr_stmt|;
if|if
condition|(
name|stats
operator|==
name|this
condition|)
break|break;
block|}
comment|// All stats must be non-negative.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AllocatorStatCount
condition|;
name|i
operator|++
control|)
name|s
index|[
name|i
index|]
operator|=
operator|(
operator|(
name|sptr
operator|)
name|s
index|[
name|i
index|]
operator|)
operator|>=
literal|0
condition|?
name|s
index|[
name|i
index|]
else|:
literal|0
expr_stmt|;
block|}
name|private
operator|:
name|mutable
name|SpinMutex
name|mu_
block|; }
decl_stmt|;
end_decl_stmt

end_unit

