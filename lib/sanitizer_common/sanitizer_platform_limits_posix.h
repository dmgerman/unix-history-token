begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_platform_limits_posix.h ---------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of Sanitizer common code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Sizes and layouts of platform-specific POSIX data structures.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_PLATFORM_LIMITS_POSIX_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_PLATFORM_LIMITS_POSIX_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_platform.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
specifier|extern
name|unsigned
name|struct_utsname_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_stat_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_stat64_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_rusage_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_tm_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_passwd_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_group_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sigaction_sz
decl_stmt|;
specifier|extern
name|unsigned
name|siginfo_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_itimerval_sz
decl_stmt|;
specifier|extern
name|unsigned
name|pthread_t_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_sockaddr_sz
decl_stmt|;
if|#
directive|if
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|ucontext_t_sz
decl_stmt|;
endif|#
directive|endif
comment|// !SANITIZER_ANDROID
if|#
directive|if
name|SANITIZER_LINUX
specifier|extern
name|unsigned
name|struct_rlimit_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_dirent_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_statfs_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_epoll_event_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_timespec_sz
decl_stmt|;
endif|#
directive|endif
comment|// SANITIZER_LINUX
if|#
directive|if
name|SANITIZER_LINUX
operator|&&
operator|!
name|SANITIZER_ANDROID
specifier|extern
name|unsigned
name|struct_dirent64_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_rlimit64_sz
decl_stmt|;
specifier|extern
name|unsigned
name|struct_statfs64_sz
decl_stmt|;
endif|#
directive|endif
comment|// SANITIZER_LINUX&& !SANITIZER_ANDROID
name|void
modifier|*
name|__sanitizer_get_msghdr_iov_iov_base
parameter_list|(
name|void
modifier|*
name|msg
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|uptr
name|__sanitizer_get_msghdr_iov_iov_len
parameter_list|(
name|void
modifier|*
name|msg
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|uptr
name|__sanitizer_get_msghdr_iovlen
parameter_list|(
name|void
modifier|*
name|msg
parameter_list|)
function_decl|;
name|uptr
name|__sanitizer_get_socklen_t
parameter_list|(
name|void
modifier|*
name|socklen_ptr
parameter_list|)
function_decl|;
comment|// This thing depends on the platform. We are only interested in the upper
comment|// limit. Verified with a compiler assert in .cc.
specifier|const
name|int
name|pthread_attr_t_max_sz
init|=
literal|128
decl_stmt|;
union|union
name|__sanitizer_pthread_attr_t
block|{
name|char
name|size
index|[
name|pthread_attr_t_max_sz
index|]
decl_stmt|;
comment|// NOLINT
name|void
modifier|*
name|align
decl_stmt|;
block|}
union|;
name|uptr
name|__sanitizer_get_sigaction_sa_sigaction
parameter_list|(
name|void
modifier|*
name|act
parameter_list|)
function_decl|;
name|void
name|__sanitizer_set_sigaction_sa_sigaction
parameter_list|(
name|void
modifier|*
name|act
parameter_list|,
name|uptr
name|cb
parameter_list|)
function_decl|;
name|bool
name|__sanitizer_get_sigaction_sa_siginfo
parameter_list|(
name|void
modifier|*
name|act
parameter_list|)
function_decl|;
specifier|const
name|unsigned
name|struct_sigaction_max_sz
init|=
literal|256
decl_stmt|;
union|union
name|__sanitizer_sigaction
block|{
name|char
name|size
index|[
name|struct_sigaction_max_sz
index|]
decl_stmt|;
comment|// NOLINT
block|}
union|;
specifier|extern
name|uptr
name|sig_ign
decl_stmt|;
specifier|extern
name|uptr
name|sig_dfl
decl_stmt|;
name|uptr
name|__sanitizer_in_addr_sz
parameter_list|(
name|int
name|af
parameter_list|)
function_decl|;
if|#
directive|if
name|SANITIZER_LINUX
struct|struct
name|__sanitizer_dl_phdr_info
block|{
name|uptr
name|dlpi_addr
decl_stmt|;
specifier|const
name|char
modifier|*
name|dlpi_name
decl_stmt|;
specifier|const
name|void
modifier|*
name|dlpi_phdr
decl_stmt|;
name|short
name|dlpi_phnum
decl_stmt|;
block|}
struct|;
endif|#
directive|endif
struct|struct
name|__sanitizer_addrinfo
block|{
name|int
name|ai_flags
decl_stmt|;
name|int
name|ai_family
decl_stmt|;
name|int
name|ai_socktype
decl_stmt|;
name|int
name|ai_protocol
decl_stmt|;
if|#
directive|if
name|SANITIZER_ANDROID
operator|||
name|SANITIZER_MAC
name|unsigned
name|ai_addrlen
decl_stmt|;
name|char
modifier|*
name|ai_canonname
decl_stmt|;
name|void
modifier|*
name|ai_addr
decl_stmt|;
else|#
directive|else
comment|// LINUX
name|uptr
name|ai_addrlen
decl_stmt|;
name|void
modifier|*
name|ai_addr
decl_stmt|;
name|char
modifier|*
name|ai_canonname
decl_stmt|;
endif|#
directive|endif
name|struct
name|__sanitizer_addrinfo
modifier|*
name|ai_next
decl_stmt|;
block|}
struct|;
struct|struct
name|__sanitizer_hostent
block|{
name|char
modifier|*
name|h_name
decl_stmt|;
name|char
modifier|*
modifier|*
name|h_aliases
decl_stmt|;
name|int
name|h_addrtype
decl_stmt|;
name|int
name|h_length
decl_stmt|;
name|char
modifier|*
modifier|*
name|h_addr_list
decl_stmt|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

