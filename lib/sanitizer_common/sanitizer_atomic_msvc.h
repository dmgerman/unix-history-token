begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_atomic_msvc.h ---------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer/AddressSanitizer runtime.
end_comment

begin_comment
comment|// Not intended for direct inclusion. Include sanitizer_atomic.h.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_ATOMIC_MSVC_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_ATOMIC_MSVC_H
end_define

begin_extern
extern|extern
literal|"C"
name|void
name|_ReadWriteBarrier
parameter_list|()
function_decl|;
end_extern

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_ReadWriteBarrier
name|)
end_pragma

begin_extern
extern|extern
literal|"C"
name|void
name|_mm_mfence
parameter_list|()
function_decl|;
end_extern

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_mm_mfence
name|)
end_pragma

begin_extern
extern|extern
literal|"C"
name|void
name|_mm_pause
parameter_list|()
function_decl|;
end_extern

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_mm_pause
name|)
end_pragma

begin_extern
extern|extern
literal|"C"
name|long
name|_InterlockedExchangeAdd
parameter_list|(
comment|// NOLINT
name|long
specifier|volatile
modifier|*
name|Addend
parameter_list|,
name|long
name|Value
parameter_list|)
function_decl|;
end_extern

begin_comment
comment|// NOLINT
end_comment

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedExchangeAdd
name|)
end_pragma

begin_ifdef
ifdef|#
directive|ifdef
name|_WIN64
end_ifdef

begin_extern
extern|extern
literal|"C"
name|void
modifier|*
name|_InterlockedCompareExchangePointer
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|void
modifier|*
name|Exchange
parameter_list|,
name|void
modifier|*
name|Comparand
parameter_list|)
function_decl|;
end_extern

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedCompareExchangePointer
name|)
end_pragma

begin_else
else|#
directive|else
end_else

begin_comment
comment|// There's no _InterlockedCompareExchangePointer intrinsic on x86,
end_comment

begin_comment
comment|// so call _InterlockedCompareExchange instead.
end_comment

begin_extern
extern|extern
literal|"C"
name|long
name|__cdecl
name|_InterlockedCompareExchange
parameter_list|(
comment|// NOLINT
name|long
specifier|volatile
modifier|*
name|Destination
parameter_list|,
comment|// NOLINT
name|long
name|Exchange
parameter_list|,
name|long
name|Comparand
parameter_list|)
function_decl|;
end_extern

begin_comment
comment|// NOLINT
end_comment

begin_pragma
pragma|#
directive|pragma
name|intrinsic
name|(
name|_InterlockedCompareExchange
name|)
end_pragma

begin_function
specifier|inline
specifier|static
name|void
modifier|*
name|_InterlockedCompareExchangePointer
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|Destination
parameter_list|,
name|void
modifier|*
name|Exchange
parameter_list|,
name|void
modifier|*
name|Comparand
parameter_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|_InterlockedCompareExchange
argument_list|(
name|reinterpret_cast
operator|<
name|long
specifier|volatile
operator|*
operator|>
operator|(
name|Destination
operator|)
argument_list|,
comment|// NOLINT
name|reinterpret_cast
operator|<
name|long
operator|>
operator|(
name|Exchange
operator|)
argument_list|,
comment|// NOLINT
name|reinterpret_cast
operator|<
name|long
operator|>
operator|(
name|Comparand
operator|)
argument_list|)
operator|)
return|;
comment|// NOLINT
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
name|INLINE
name|void
name|atomic_signal_fence
parameter_list|(
name|memory_order
parameter_list|)
block|{
name|_ReadWriteBarrier
argument_list|()
expr_stmt|;
block|}
name|INLINE
name|void
name|atomic_thread_fence
parameter_list|(
name|memory_order
parameter_list|)
block|{
name|_mm_mfence
argument_list|()
expr_stmt|;
block|}
name|INLINE
name|void
name|proc_yield
parameter_list|(
name|int
name|cnt
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
name|_mm_pause
argument_list|()
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|INLINE
name|typename
name|T
operator|::
name|Type
name|atomic_load
argument_list|(
argument|const volatile T *a
argument_list|,
argument|memory_order mo
argument_list|)
block|{
name|DCHECK
argument_list|(
name|mo
operator|&
operator|(
name|memory_order_relaxed
operator||
name|memory_order_consume
operator||
name|memory_order_acquire
operator||
name|memory_order_seq_cst
operator|)
argument_list|)
block|;
name|DCHECK
argument_list|(
operator|!
operator|(
operator|(
name|uptr
operator|)
name|a
operator|%
sizeof|sizeof
argument_list|(
operator|*
name|a
argument_list|)
operator|)
argument_list|)
block|;
name|typename
name|T
operator|::
name|Type
name|v
block|;
comment|// FIXME(dvyukov): 64-bit load is not atomic on 32-bits.
if|if
condition|(
name|mo
operator|==
name|memory_order_relaxed
condition|)
block|{
name|v
operator|=
name|a
operator|->
name|val_dont_use
expr_stmt|;
block|}
else|else
block|{
name|atomic_signal_fence
argument_list|(
name|memory_order_seq_cst
argument_list|)
expr_stmt|;
name|v
operator|=
name|a
operator|->
name|val_dont_use
expr_stmt|;
name|atomic_signal_fence
argument_list|(
name|memory_order_seq_cst
argument_list|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|INLINE
name|void
name|atomic_store
argument_list|(
argument|volatile T *a
argument_list|,
argument|typename T::Type v
argument_list|,
argument|memory_order mo
argument_list|)
block|{
name|DCHECK
argument_list|(
name|mo
operator|&
operator|(
name|memory_order_relaxed
operator||
name|memory_order_release
operator||
name|memory_order_seq_cst
operator|)
argument_list|)
block|;
name|DCHECK
argument_list|(
operator|!
operator|(
operator|(
name|uptr
operator|)
name|a
operator|%
sizeof|sizeof
argument_list|(
operator|*
name|a
argument_list|)
operator|)
argument_list|)
block|;
comment|// FIXME(dvyukov): 64-bit store is not atomic on 32-bits.
if|if
condition|(
name|mo
operator|==
name|memory_order_relaxed
condition|)
block|{
name|a
operator|->
name|val_dont_use
operator|=
name|v
expr_stmt|;
block|}
else|else
block|{
name|atomic_signal_fence
argument_list|(
name|memory_order_seq_cst
argument_list|)
expr_stmt|;
name|a
operator|->
name|val_dont_use
operator|=
name|v
expr_stmt|;
name|atomic_signal_fence
argument_list|(
name|memory_order_seq_cst
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mo
operator|==
name|memory_order_seq_cst
condition|)
name|atomic_thread_fence
argument_list|(
name|memory_order_seq_cst
argument_list|)
expr_stmt|;
block|}
name|INLINE
name|u32
name|atomic_fetch_add
parameter_list|(
specifier|volatile
name|atomic_uint32_t
modifier|*
name|a
parameter_list|,
name|u32
name|v
parameter_list|,
name|memory_order
name|mo
parameter_list|)
block|{
operator|(
name|void
operator|)
name|mo
expr_stmt|;
name|DCHECK
argument_list|(
operator|!
operator|(
operator|(
name|uptr
operator|)
name|a
operator|%
sizeof|sizeof
argument_list|(
operator|*
name|a
argument_list|)
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|u32
operator|)
name|_InterlockedExchangeAdd
argument_list|(
operator|(
specifier|volatile
name|long
operator|*
operator|)
operator|&
name|a
operator|->
name|val_dont_use
argument_list|,
operator|(
name|long
operator|)
name|v
argument_list|)
return|;
comment|// NOLINT
block|}
name|INLINE
name|u8
name|atomic_exchange
parameter_list|(
specifier|volatile
name|atomic_uint8_t
modifier|*
name|a
parameter_list|,
name|u8
name|v
parameter_list|,
name|memory_order
name|mo
parameter_list|)
block|{
operator|(
name|void
operator|)
name|mo
expr_stmt|;
name|DCHECK
argument_list|(
operator|!
operator|(
operator|(
name|uptr
operator|)
name|a
operator|%
sizeof|sizeof
argument_list|(
operator|*
name|a
argument_list|)
operator|)
argument_list|)
expr_stmt|;
asm|__asm {
asm|mov eax, a
asm|mov cl, v
asm|xchg [eax], cl
comment|//
asm|NOLINT
asm|mov v, cl
asm|}
return|return
name|v
return|;
block|}
name|INLINE
name|u16
name|atomic_exchange
parameter_list|(
specifier|volatile
name|atomic_uint16_t
modifier|*
name|a
parameter_list|,
name|u16
name|v
parameter_list|,
name|memory_order
name|mo
parameter_list|)
block|{
operator|(
name|void
operator|)
name|mo
expr_stmt|;
name|DCHECK
argument_list|(
operator|!
operator|(
operator|(
name|uptr
operator|)
name|a
operator|%
sizeof|sizeof
argument_list|(
operator|*
name|a
argument_list|)
operator|)
argument_list|)
expr_stmt|;
asm|__asm {
asm|mov eax, a
asm|mov cx, v
asm|xchg [eax], cx
comment|//
asm|NOLINT
asm|mov v, cx
asm|}
return|return
name|v
return|;
block|}
name|INLINE
name|bool
name|atomic_compare_exchange_strong
parameter_list|(
specifier|volatile
name|atomic_uintptr_t
modifier|*
name|a
parameter_list|,
name|uptr
modifier|*
name|cmp
parameter_list|,
name|uptr
name|xchg
parameter_list|,
name|memory_order
name|mo
parameter_list|)
block|{
name|uptr
name|cmpv
init|=
operator|*
name|cmp
decl_stmt|;
name|uptr
name|prev
init|=
operator|(
name|uptr
operator|)
name|_InterlockedCompareExchangePointer
argument_list|(
operator|(
name|void
operator|*
specifier|volatile
operator|*
operator|)
operator|&
name|a
operator|->
name|val_dont_use
argument_list|,
operator|(
name|void
operator|*
operator|)
name|xchg
argument_list|,
operator|(
name|void
operator|*
operator|)
name|cmpv
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|==
name|cmpv
condition|)
return|return
name|true
return|;
operator|*
name|cmp
operator|=
name|prev
expr_stmt|;
return|return
name|false
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|INLINE
name|bool
name|atomic_compare_exchange_weak
argument_list|(
argument|volatile T *a
argument_list|,
argument|typename T::Type *cmp
argument_list|,
argument|typename T::Type xchg
argument_list|,
argument|memory_order mo
argument_list|)
block|{
return|return
name|atomic_compare_exchange_strong
argument_list|(
name|a
argument_list|,
name|cmp
argument_list|,
name|xchg
argument_list|,
name|mo
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_ATOMIC_CLANG_H
end_comment

end_unit

