begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_allocator_bytemap.h ---------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Part of the Sanitizer Allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_ALLOCATOR_H
end_ifndef

begin_error
error|#
directive|error
error|This file must be included inside sanitizer_allocator.h
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// Maps integers in rage [0, kSize) to u8 values.
end_comment

begin_expr_stmt
name|template
operator|<
name|u64
name|kSize
operator|>
name|class
name|FlatByteMap
block|{
name|public
operator|:
name|void
name|TestOnlyInit
argument_list|()
block|{
name|internal_memset
argument_list|(
name|map_
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|map_
argument_list|)
argument_list|)
block|;   }
name|void
name|set
argument_list|(
argument|uptr idx
argument_list|,
argument|u8 val
argument_list|)
block|{
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kSize
argument_list|)
block|;
name|CHECK_EQ
argument_list|(
literal|0U
argument_list|,
name|map_
index|[
name|idx
index|]
argument_list|)
block|;
name|map_
index|[
name|idx
index|]
operator|=
name|val
block|;   }
name|u8
name|operator
index|[]
operator|(
name|uptr
name|idx
operator|)
block|{
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kSize
argument_list|)
block|;
comment|// FIXME: CHECK may be too expensive here.
return|return
name|map_
index|[
name|idx
index|]
return|;
block|}
name|private
operator|:
name|u8
name|map_
index|[
name|kSize
index|]
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// TwoLevelByteMap maps integers in range [0, kSize1*kSize2) to u8 values.
end_comment

begin_comment
comment|// It is implemented as a two-dimensional array: array of kSize1 pointers
end_comment

begin_comment
comment|// to kSize2-byte arrays. The secondary arrays are mmaped on demand.
end_comment

begin_comment
comment|// Each value is initially zero and can be set to something else only once.
end_comment

begin_comment
comment|// Setting and getting values from multiple threads is safe w/o extra locking.
end_comment

begin_expr_stmt
name|template
operator|<
name|u64
name|kSize1
operator|,
name|u64
name|kSize2
operator|,
name|class
name|MapUnmapCallback
operator|=
name|NoOpMapUnmapCallback
operator|>
name|class
name|TwoLevelByteMap
block|{
name|public
operator|:
name|void
name|TestOnlyInit
argument_list|()
block|{
name|internal_memset
argument_list|(
name|map1_
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|map1_
argument_list|)
argument_list|)
block|;
name|mu_
operator|.
name|Init
argument_list|()
block|;   }
name|void
name|TestOnlyUnmap
argument_list|()
block|{
for|for
control|(
name|uptr
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kSize1
condition|;
name|i
operator|++
control|)
block|{
name|u8
modifier|*
name|p
init|=
name|Get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|p
condition|)
continue|continue;
name|MapUnmapCallback
argument_list|()
operator|.
name|OnUnmap
argument_list|(
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|p
operator|)
argument_list|,
name|kSize2
argument_list|)
expr_stmt|;
name|UnmapOrDie
argument_list|(
name|p
argument_list|,
name|kSize2
argument_list|)
expr_stmt|;
block|}
block|}
name|uptr
name|size
argument_list|()
specifier|const
block|{
return|return
name|kSize1
operator|*
name|kSize2
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uptr
name|size1
argument_list|()
specifier|const
block|{
return|return
name|kSize1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uptr
name|size2
argument_list|()
specifier|const
block|{
return|return
name|kSize2
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set
parameter_list|(
name|uptr
name|idx
parameter_list|,
name|u8
name|val
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kSize1
operator|*
name|kSize2
argument_list|)
expr_stmt|;
name|u8
modifier|*
name|map2
init|=
name|GetOrCreate
argument_list|(
name|idx
operator|/
name|kSize2
argument_list|)
decl_stmt|;
name|CHECK_EQ
argument_list|(
literal|0U
argument_list|,
name|map2
index|[
name|idx
operator|%
name|kSize2
index|]
argument_list|)
expr_stmt|;
name|map2
index|[
name|idx
operator|%
name|kSize2
index|]
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|u8
name|operator
index|[]
argument_list|(
name|uptr
name|idx
argument_list|)
decl|const
block|{
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kSize1
operator|*
name|kSize2
argument_list|)
expr_stmt|;
name|u8
modifier|*
name|map2
init|=
name|Get
argument_list|(
name|idx
operator|/
name|kSize2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map2
condition|)
return|return
literal|0
return|;
return|return
name|map2
index|[
name|idx
operator|%
name|kSize2
index|]
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|u8
modifier|*
name|Get
argument_list|(
name|uptr
name|idx
argument_list|)
decl|const
block|{
name|CHECK_LT
argument_list|(
name|idx
argument_list|,
name|kSize1
argument_list|)
expr_stmt|;
return|return
name|reinterpret_cast
operator|<
name|u8
operator|*
operator|>
operator|(
name|atomic_load
argument_list|(
operator|&
name|map1_
index|[
name|idx
index|]
argument_list|,
name|memory_order_acquire
argument_list|)
operator|)
return|;
block|}
end_decl_stmt

begin_function
name|u8
modifier|*
name|GetOrCreate
parameter_list|(
name|uptr
name|idx
parameter_list|)
block|{
name|u8
modifier|*
name|res
init|=
name|Get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
condition|)
block|{
name|SpinMutexLock
name|l
argument_list|(
operator|&
name|mu_
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|res
operator|=
name|Get
argument_list|(
name|idx
argument_list|)
operator|)
condition|)
block|{
name|res
operator|=
operator|(
name|u8
operator|*
operator|)
name|MmapOrDie
argument_list|(
name|kSize2
argument_list|,
literal|"TwoLevelByteMap"
argument_list|)
expr_stmt|;
name|MapUnmapCallback
argument_list|()
operator|.
name|OnMap
argument_list|(
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|res
operator|)
argument_list|,
name|kSize2
argument_list|)
expr_stmt|;
name|atomic_store
argument_list|(
operator|&
name|map1_
index|[
name|idx
index|]
argument_list|,
name|reinterpret_cast
operator|<
name|uptr
operator|>
operator|(
name|res
operator|)
argument_list|,
name|memory_order_release
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
end_function

begin_decl_stmt
name|atomic_uintptr_t
name|map1_
index|[
name|kSize1
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|StaticSpinMutex
name|mu_
decl_stmt|;
end_decl_stmt

unit|};
end_unit

