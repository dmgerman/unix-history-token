begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- sanitizer_mutex.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is a part of ThreadSanitizer/AddressSanitizer runtime.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SANITIZER_MUTEX_H
end_ifndef

begin_define
define|#
directive|define
name|SANITIZER_MUTEX_H
end_define

begin_include
include|#
directive|include
file|"sanitizer_atomic.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"sanitizer_libc.h"
end_include

begin_decl_stmt
name|namespace
name|__sanitizer
block|{
name|class
name|SpinMutex
block|{
name|public
label|:
name|SpinMutex
argument_list|()
block|{
name|atomic_store
argument_list|(
operator|&
name|state_
argument_list|,
literal|0
argument_list|,
name|memory_order_relaxed
argument_list|)
expr_stmt|;
block|}
name|void
name|Lock
parameter_list|()
block|{
if|if
condition|(
name|atomic_exchange
argument_list|(
operator|&
name|state_
argument_list|,
literal|1
argument_list|,
name|memory_order_acquire
argument_list|)
operator|==
literal|0
condition|)
return|return;
name|LockSlow
argument_list|()
expr_stmt|;
block|}
name|void
name|Unlock
parameter_list|()
block|{
name|atomic_store
argument_list|(
operator|&
name|state_
argument_list|,
literal|0
argument_list|,
name|memory_order_release
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|atomic_uint8_t
name|state_
decl_stmt|;
name|void
name|NOINLINE
name|LockSlow
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|proc_yield
argument_list|(
literal|10
argument_list|)
expr_stmt|;
else|else
name|internal_sched_yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|atomic_load
argument_list|(
operator|&
name|state_
argument_list|,
name|memory_order_relaxed
argument_list|)
operator|==
literal|0
operator|&&
name|atomic_exchange
argument_list|(
operator|&
name|state_
argument_list|,
literal|1
argument_list|,
name|memory_order_acquire
argument_list|)
operator|==
literal|0
condition|)
return|return;
block|}
block|}
name|SpinMutex
argument_list|(
specifier|const
name|SpinMutex
operator|&
argument_list|)
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|SpinMutex
operator|&
operator|)
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|MutexType
operator|>
name|class
name|GenericScopedLock
block|{
name|public
operator|:
name|explicit
name|GenericScopedLock
argument_list|(
name|MutexType
operator|*
name|mu
argument_list|)
operator|:
name|mu_
argument_list|(
argument|mu
argument_list|)
block|{
name|mu_
operator|->
name|Lock
argument_list|()
block|;   }
operator|~
name|GenericScopedLock
argument_list|()
block|{
name|mu_
operator|->
name|Unlock
argument_list|()
block|;   }
name|private
operator|:
name|MutexType
operator|*
name|mu_
block|;
name|GenericScopedLock
argument_list|(
specifier|const
name|GenericScopedLock
operator|&
argument_list|)
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|GenericScopedLock
operator|&
operator|)
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|MutexType
operator|>
name|class
name|GenericScopedReadLock
block|{
name|public
operator|:
name|explicit
name|GenericScopedReadLock
argument_list|(
name|MutexType
operator|*
name|mu
argument_list|)
operator|:
name|mu_
argument_list|(
argument|mu
argument_list|)
block|{
name|mu_
operator|->
name|ReadLock
argument_list|()
block|;   }
operator|~
name|GenericScopedReadLock
argument_list|()
block|{
name|mu_
operator|->
name|ReadUnlock
argument_list|()
block|;   }
name|private
operator|:
name|MutexType
operator|*
name|mu_
block|;
name|GenericScopedReadLock
argument_list|(
specifier|const
name|GenericScopedReadLock
operator|&
argument_list|)
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|GenericScopedReadLock
operator|&
operator|)
block|; }
expr_stmt|;
typedef|typedef
name|GenericScopedLock
operator|<
name|SpinMutex
operator|>
name|SpinMutexLock
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace __sanitizer
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SANITIZER_MUTEX_H
end_comment

end_unit

