begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * ====================================================  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.  * Copyright (c) 2008 Steven G. Kargl, David Schultz, Bruce D. Evans.  *  * Developed at SunSoft, a Sun Microsystems, Inc. business.  * Permission to use, copy, modify, and distribute this  * software is freely granted, provided that this notice   * is preserved.  * ====================================================  *  * k_sinl.c and k_cosl.c merged by Steven G. Kargl  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|#
directive|if
name|LDBL_MANT_DIG
operator|==
literal|64
end_if

begin_comment
comment|/* ld80 version of k_sincosl.c. */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__i386__
argument_list|)
end_if

begin_comment
comment|/* Long double constants are slow on these arches, and broken on i386. */
end_comment

begin_decl_stmt
specifier|static
specifier|const
specifier|volatile
name|double
name|C1hi
init|=
literal|0.041666666666666664
decl_stmt|,
comment|/*  0x15555555555555.0p-57 */
name|C1lo
init|=
literal|2.2598839032744733e-18
decl_stmt|,
comment|/*  0x14d80000000000.0p-111 */
name|S1hi
init|=
operator|-
literal|0.16666666666666666
decl_stmt|,
comment|/* -0x15555555555555.0p-55 */
name|S1lo
init|=
operator|-
literal|9.2563760475949941e-18
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* -0x15580000000000.0p-109 */
end_comment

begin_define
define|#
directive|define
name|S1
value|((long double)S1hi + S1lo)
end_define

begin_define
define|#
directive|define
name|C1
value|((long double)C1hi + C1lo)
end_define

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|static
specifier|const
name|long
name|double
name|C1
init|=
literal|0.0416666666666666666136L
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  0xaaaaaaaaaaaaaa9b.0p-68 */
end_comment

begin_expr_stmt
name|S1
operator|=
operator|-
literal|0.166666666666666666671L
operator|,
comment|/* -0xaaaaaaaaaaaaaaab.0p-66 */
endif|#
directive|endif
specifier|static
specifier|const
name|double
name|C2
operator|=
operator|-
literal|0.0013888888888888874
operator|,
comment|/* -0x16c16c16c16c10.0p-62 */
name|C3
operator|=
literal|0.000024801587301571716
operator|,
comment|/*  0x1a01a01a018e22.0p-68 */
name|C4
operator|=
operator|-
literal|0.00000027557319215507120
operator|,
comment|/* -0x127e4fb7602f22.0p-74 */
name|C5
operator|=
literal|0.0000000020876754400407278
operator|,
comment|/*  0x11eed8caaeccf1.0p-81 */
name|C6
operator|=
operator|-
literal|1.1470297442401303e-11
operator|,
comment|/* -0x19393412bd1529.0p-89 */
name|C7
operator|=
literal|4.7383039476436467e-14
operator|,
comment|/*  0x1aac9d9af5c43e.0p-97 */
name|S2
operator|=
literal|0.0083333333333333332
operator|,
comment|/*  0x11111111111111.0p-59 */
name|S3
operator|=
operator|-
literal|0.00019841269841269427
operator|,
comment|/* -0x1a01a01a019f81.0p-65 */
name|S4
operator|=
literal|0.0000027557319223597490
operator|,
comment|/*  0x171de3a55560f7.0p-71 */
name|S5
operator|=
operator|-
literal|0.000000025052108218074604
operator|,
comment|/* -0x1ae64564f16cad.0p-78 */
name|S6
operator|=
literal|1.6059006598854211e-10
operator|,
comment|/*  0x161242b90243b5.0p-85 */
name|S7
operator|=
operator|-
literal|7.6429779983024564e-13
operator|,
comment|/* -0x1ae42ebd1b2e00.0p-93 */
name|S8
operator|=
literal|2.6174587166648325e-15
expr_stmt|;
end_expr_stmt

begin_comment
comment|/*  0x179372ea0b3f64.0p-101 */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|__kernel_sincosl
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|,
name|int
name|iy
parameter_list|,
name|long
name|double
modifier|*
name|sn
parameter_list|,
name|long
name|double
modifier|*
name|cs
parameter_list|)
block|{
name|long
name|double
name|hz
decl_stmt|,
name|r
decl_stmt|,
name|v
decl_stmt|,
name|w
decl_stmt|,
name|z
decl_stmt|;
name|z
operator|=
name|x
operator|*
name|x
expr_stmt|;
name|v
operator|=
name|z
operator|*
name|x
expr_stmt|;
comment|/* 	 * XXX Replace Horner scheme with an algorithm suitable for CPUs 	 * with more complex pipelines. 	 */
name|r
operator|=
name|S2
operator|+
name|z
operator|*
operator|(
name|S3
operator|+
name|z
operator|*
operator|(
name|S4
operator|+
name|z
operator|*
operator|(
name|S5
operator|+
name|z
operator|*
operator|(
name|S6
operator|+
name|z
operator|*
operator|(
name|S7
operator|+
name|z
operator|*
name|S8
operator|)
operator|)
operator|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|iy
operator|==
literal|0
condition|)
operator|*
name|sn
operator|=
name|x
operator|+
name|v
operator|*
operator|(
name|S1
operator|+
name|z
operator|*
name|r
operator|)
expr_stmt|;
else|else
operator|*
name|sn
operator|=
name|x
operator|-
operator|(
operator|(
name|z
operator|*
operator|(
name|y
operator|/
literal|2
operator|-
name|v
operator|*
name|r
operator|)
operator|-
name|y
operator|)
operator|-
name|v
operator|*
name|S1
operator|)
expr_stmt|;
name|hz
operator|=
name|z
operator|/
literal|2
expr_stmt|;
name|w
operator|=
literal|1
operator|-
name|hz
expr_stmt|;
name|r
operator|=
name|z
operator|*
operator|(
name|C1
operator|+
name|z
operator|*
operator|(
name|C2
operator|+
name|z
operator|*
operator|(
name|C3
operator|+
name|z
operator|*
operator|(
name|C4
operator|+
name|z
operator|*
operator|(
name|C5
operator|+
name|z
operator|*
operator|(
name|C6
operator|+
name|z
operator|*
name|C7
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
expr_stmt|;
operator|*
name|cs
operator|=
name|w
operator|+
operator|(
operator|(
operator|(
literal|1
operator|-
name|w
operator|)
operator|-
name|hz
operator|)
operator|+
operator|(
name|z
operator|*
name|r
operator|-
name|x
operator|*
name|y
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_elif
elif|#
directive|elif
name|LDBL_MANT_DIG
operator|==
literal|113
end_elif

begin_comment
comment|/* ld128 version of k_sincosl.c. */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|long
name|double
name|C1
init|=
literal|0.04166666666666666666666666666666658424671L
decl_stmt|,
name|C2
init|=
operator|-
literal|0.001388888888888888888888888888863490893732L
decl_stmt|,
name|C3
init|=
literal|0.00002480158730158730158730158600795304914210L
decl_stmt|,
name|C4
init|=
operator|-
literal|0.2755731922398589065255474947078934284324e-6L
decl_stmt|,
name|C5
init|=
literal|0.2087675698786809897659225313136400793948e-8L
decl_stmt|,
name|C6
init|=
operator|-
literal|0.1147074559772972315817149986812031204775e-10L
decl_stmt|,
name|C7
init|=
literal|0.4779477332386808976875457937252120293400e-13L
decl_stmt|,
name|S1
init|=
operator|-
literal|0.16666666666666666666666666666666666606732416116558L
decl_stmt|,
name|S2
init|=
literal|0.0083333333333333333333333333333331135404851288270047L
decl_stmt|,
name|S3
init|=
operator|-
literal|0.00019841269841269841269841269839935785325638310428717L
decl_stmt|,
name|S4
init|=
literal|0.27557319223985890652557316053039946268333231205686e-5L
decl_stmt|,
name|S5
init|=
operator|-
literal|0.25052108385441718775048214826384312253862930064745e-7L
decl_stmt|,
name|S6
init|=
literal|0.16059043836821614596571832194524392581082444805729e-9L
decl_stmt|,
name|S7
init|=
operator|-
literal|0.76471637318198151807063387954939213287488216303768e-12L
decl_stmt|,
name|S8
init|=
literal|0.28114572543451292625024967174638477283187397621303e-14L
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|double
name|C8
init|=
operator|-
literal|0.1561920696721507929516718307820958119868e-15
decl_stmt|,
name|C9
init|=
literal|0.4110317413744594971475941557607804508039e-18
decl_stmt|,
name|C10
init|=
operator|-
literal|0.8896592467191938803288521958313920156409e-21
decl_stmt|,
name|C11
init|=
literal|0.1601061435794535138244346256065192782581e-23
decl_stmt|,
name|S9
init|=
operator|-
literal|0.82206352458348947812512122163446202498005154296863e-17
decl_stmt|,
name|S10
init|=
literal|0.19572940011906109418080609928334380560135358385256e-19
decl_stmt|,
name|S11
init|=
operator|-
literal|0.38680813379701966970673724299207480965452616911420e-22
decl_stmt|,
name|S12
init|=
literal|0.64038150078671872796678569586315881020659912139412e-25
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|void
name|__kernel_sincosl
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|,
name|int
name|iy
parameter_list|,
name|long
name|double
modifier|*
name|sn
parameter_list|,
name|long
name|double
modifier|*
name|cs
parameter_list|)
block|{
name|long
name|double
name|hz
decl_stmt|,
name|r
decl_stmt|,
name|v
decl_stmt|,
name|w
decl_stmt|,
name|z
decl_stmt|;
name|z
operator|=
name|x
operator|*
name|x
expr_stmt|;
name|v
operator|=
name|z
operator|*
name|x
expr_stmt|;
comment|/* 	 * XXX Replace Horner scheme with an algorithm suitable for CPUs 	 * with more complex pipelines. 	 */
name|r
operator|=
name|S2
operator|+
name|z
operator|*
operator|(
name|S3
operator|+
name|z
operator|*
operator|(
name|S4
operator|+
name|z
operator|*
operator|(
name|S5
operator|+
name|z
operator|*
operator|(
name|S6
operator|+
name|z
operator|*
operator|(
name|S7
operator|+
name|z
operator|*
operator|(
name|S8
operator|+
name|z
operator|*
operator|(
name|S9
operator|+
name|z
operator|*
operator|(
name|S10
operator|+
name|z
operator|*
operator|(
name|S11
operator|+
name|z
operator|*
name|S12
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|iy
operator|==
literal|0
condition|)
operator|*
name|sn
operator|=
name|x
operator|+
name|v
operator|*
operator|(
name|S1
operator|+
name|z
operator|*
name|r
operator|)
expr_stmt|;
else|else
operator|*
name|cs
operator|=
name|x
operator|-
operator|(
operator|(
name|z
operator|*
operator|(
name|y
operator|/
literal|2
operator|-
name|v
operator|*
name|r
operator|)
operator|-
name|y
operator|)
operator|-
name|v
operator|*
name|S1
operator|)
expr_stmt|;
name|hz
operator|=
name|z
operator|/
literal|2
expr_stmt|;
name|w
operator|=
literal|1
operator|-
name|hz
expr_stmt|;
name|r
operator|=
name|z
operator|*
operator|(
name|C1
operator|+
name|z
operator|*
operator|(
name|C2
operator|+
name|z
operator|*
operator|(
name|C3
operator|+
name|z
operator|*
operator|(
name|C4
operator|+
name|z
operator|*
operator|(
name|C5
operator|+
name|z
operator|*
operator|(
name|C6
operator|+
name|z
operator|*
operator|(
name|C7
operator|+
name|z
operator|*
operator|(
name|C8
operator|+
name|z
operator|*
operator|(
name|C9
operator|+
name|z
operator|*
operator|(
name|C10
operator|+
name|z
operator|*
name|C11
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
expr_stmt|;
operator|*
name|cs
operator|=
name|w
operator|+
operator|(
operator|(
operator|(
literal|1
operator|-
name|w
operator|)
operator|-
name|hz
operator|)
operator|+
operator|(
name|z
operator|*
name|r
operator|-
name|x
operator|*
name|y
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Unsupported long double format"
end_error

begin_endif
endif|#
directive|endif
end_endif

end_unit

