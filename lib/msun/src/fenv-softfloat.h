begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004-2011 David Schultz<das@FreeBSD.ORG>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FENV_H_
end_ifndef

begin_error
error|#
directive|error
literal|"This file is meant to be included only by<fenv.h>."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * This file implements the functionality of<fenv.h> on platforms that  * lack an FPU and use softfloat in libc for floating point.  To use it,  * you must write an<fenv.h> that provides the following:  *  *   - a typedef for fenv_t, which may be an integer or struct type  *   - a typedef for fexcept_t (XXX This file assumes fexcept_t is a  *     simple integer type containing the exception mask.)  *   - definitions of FE_* constants for the five exceptions and four  *     rounding modes in IEEE 754, as described in fenv(3)  *   - a definition, and the corresponding external symbol, for FE_DFL_ENV  *   - a macro __set_env(env, flags, mask, rnd), which sets the given fenv_t  *     from the exception flags, mask, and rounding mode  *   - macros __env_flags(env), __env_mask(env), and __env_round(env), which  *     extract fields from an fenv_t  *   - a definition of __fenv_static  *  * If the architecture supports an optional FPU, it's recommended that you  * define fenv_t and fexcept_t to match the hardware ABI.  Otherwise, it  * doesn't matter how you define them.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|__softfloat_float_exception_flags
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|__softfloat_float_exception_mask
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|__softfloat_float_rounding_mode
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|__softfloat_float_raise
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|__fenv_static
specifier|inline
name|int
name|feclearexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|__softfloat_float_exception_flags
operator|&=
operator|~
name|__excepts
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetexceptflag
parameter_list|(
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
operator|*
name|__flagp
operator|=
name|__softfloat_float_exception_flags
operator|&
name|__excepts
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetexceptflag
parameter_list|(
specifier|const
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
name|__softfloat_float_exception_flags
operator|&=
operator|~
name|__excepts
expr_stmt|;
name|__softfloat_float_exception_flags
operator||=
operator|*
name|__flagp
operator|&
name|__excepts
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feraiseexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|__softfloat_float_raise
argument_list|(
name|__excepts
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fetestexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
return|return
operator|(
name|__softfloat_float_exception_flags
operator|&
name|__excepts
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetround
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|__softfloat_float_rounding_mode
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetround
parameter_list|(
name|int
name|__round
parameter_list|)
block|{
name|__softfloat_float_rounding_mode
operator|=
name|__round
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetenv
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|__set_env
argument_list|(
operator|*
name|__envp
argument_list|,
name|__softfloat_float_exception_flags
argument_list|,
name|__softfloat_float_exception_mask
argument_list|,
name|__softfloat_float_rounding_mode
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feholdexcept
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|fenv_t
name|__env
decl_stmt|;
name|fegetenv
argument_list|(
name|__envp
argument_list|)
expr_stmt|;
name|__softfloat_float_exception_flags
operator|=
literal|0
expr_stmt|;
name|__softfloat_float_exception_mask
operator|=
literal|0
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|__softfloat_float_exception_flags
operator|=
name|__env_flags
argument_list|(
operator|*
name|__envp
argument_list|)
expr_stmt|;
name|__softfloat_float_exception_mask
operator|=
name|__env_mask
argument_list|(
operator|*
name|__envp
argument_list|)
expr_stmt|;
name|__softfloat_float_rounding_mode
operator|=
name|__env_round
argument_list|(
operator|*
name|__envp
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feupdateenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|int
name|__oflags
init|=
name|__softfloat_float_exception_flags
decl_stmt|;
name|fesetenv
argument_list|(
name|__envp
argument_list|)
expr_stmt|;
name|feraiseexcept
argument_list|(
name|__oflags
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__BSD_VISIBLE
end_if

begin_comment
comment|/* We currently provide no external definitions of the functions below. */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|feenableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|int
name|__omask
init|=
name|__softfloat_float_exception_mask
decl_stmt|;
name|__softfloat_float_exception_mask
operator||=
name|__mask
expr_stmt|;
return|return
operator|(
name|__omask
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fedisableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|int
name|__omask
init|=
name|__softfloat_float_exception_mask
decl_stmt|;
name|__softfloat_float_exception_mask
operator|&=
operator|~
name|__mask
expr_stmt|;
return|return
operator|(
name|__omask
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fegetexcept
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|__softfloat_float_exception_mask
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BSD_VISIBLE */
end_comment

end_unit

