begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* From: @(#)e_rem_pio2.c 1.4 95/01/18 */
end_comment

begin_comment
comment|/*  * ====================================================  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.  * Copyright (c) 2008 Steven G. Kargl, David Schultz, Bruce D. Evans.  *  * Developed at SunSoft, a Sun Microsystems, Inc. business.  * Permission to use, copy, modify, and distribute this  * software is freely granted, provided that this notice   * is preserved.  * ====================================================  *  * Optimized by Bruce D. Evans.  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/* ld128 version of __ieee754_rem_pio2l(x,y)  *   * return the remainder of x rem pi/2 in y[0]+y[1]   * use __kernel_rem_pio2()  */
end_comment

begin_include
include|#
directive|include
file|<float.h>
end_include

begin_include
include|#
directive|include
file|"math.h"
end_include

begin_include
include|#
directive|include
file|"math_private.h"
end_include

begin_include
include|#
directive|include
file|"fpmath.h"
end_include

begin_define
define|#
directive|define
name|BIAS
value|(LDBL_MAX_EXP - 1)
end_define

begin_comment
comment|/*  * XXX need to verify that nonzero integer multiples of pi/2 within the  * range get no closer to a long double than 2**-140, or that  * ilogb(x) + ilogb(min_delta)< 45 - -140.  */
end_comment

begin_comment
comment|/*  * invpio2:  113 bits of 2/pi  * pio2_1:   first  68 bits of pi/2  * pio2_1t:  pi/2 - pio2_1  * pio2_2:   second 68 bits of pi/2  * pio2_2t:  pi/2 - (pio2_1+pio2_2)  * pio2_3:   third  68 bits of pi/2  * pio2_3t:  pi/2 - (pio2_1+pio2_2+pio2_3)  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|double
name|zero
init|=
literal|0.00000000000000000000e+00
decl_stmt|,
comment|/* 0x00000000, 0x00000000 */
name|two24
init|=
literal|1.67772160000000000000e+07
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* 0x41700000, 0x00000000 */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|long
name|double
name|invpio2
init|=
literal|6.3661977236758134307553505349005747e-01L
decl_stmt|,
comment|/*  0x145f306dc9c882a53f84eafa3ea6a.0p-113 */
name|pio2_1
init|=
literal|1.5707963267948966192292994253909555e+00L
decl_stmt|,
comment|/*  0x1921fb54442d18469800000000000.0p-112 */
name|pio2_1t
init|=
literal|2.0222662487959507323996846200947577e-21L
decl_stmt|,
comment|/*  0x13198a2e03707344a4093822299f3.0p-181 */
name|pio2_2
init|=
literal|2.0222662487959507323994779168837751e-21L
decl_stmt|,
comment|/*  0x13198a2e03707344a400000000000.0p-181 */
name|pio2_2t
init|=
literal|2.0670321098263988236496903051604844e-43L
decl_stmt|,
comment|/*  0x127044533e63a0105df531d89cd91.0p-254 */
name|pio2_3
init|=
literal|2.0670321098263988236499468110329591e-43L
decl_stmt|,
comment|/*  0x127044533e63a0105e00000000000.0p-254 */
name|pio2_3t
init|=
operator|-
literal|2.5650587247459238361625433492959285e-65L
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* -0x159c4ec64ddaeb5f78671cbfb2210.0p-327 */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|INLINE_REM_PIO2L
end_ifdef

begin_function
specifier|static
specifier|inline
name|__always_inline
endif|#
directive|endif
name|int
name|__ieee754_rem_pio2l
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
modifier|*
name|y
parameter_list|)
block|{
name|union
name|IEEEl2bits
name|u
decl_stmt|,
name|u1
decl_stmt|;
name|long
name|double
name|z
decl_stmt|,
name|w
decl_stmt|,
name|t
decl_stmt|,
name|r
decl_stmt|,
name|fn
decl_stmt|;
name|double
name|tx
index|[
literal|5
index|]
decl_stmt|,
name|ty
index|[
literal|3
index|]
decl_stmt|;
name|int64_t
name|n
decl_stmt|;
name|int
name|e0
decl_stmt|,
name|ex
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|,
name|nx
decl_stmt|;
name|int16_t
name|expsign
decl_stmt|;
name|u
operator|.
name|e
operator|=
name|x
expr_stmt|;
name|expsign
operator|=
name|u
operator|.
name|xbits
operator|.
name|expsign
expr_stmt|;
name|ex
operator|=
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
if|if
condition|(
name|ex
operator|<
name|BIAS
operator|+
literal|45
operator|||
name|ex
operator|==
name|BIAS
operator|+
literal|45
operator|&&
name|u
operator|.
name|bits
operator|.
name|manh
operator|<
literal|0x921fb54442d1LL
condition|)
block|{
comment|/* |x| ~< 2^45*(pi/2), medium size */
comment|/* Use a specialized rint() to get fn.  Assume round-to-nearest. */
name|fn
operator|=
name|x
operator|*
name|invpio2
operator|+
literal|0x1
literal|.8p112
expr_stmt|;
name|fn
operator|=
name|fn
operator|-
literal|0x1
literal|.8p112
expr_stmt|;
ifdef|#
directive|ifdef
name|HAVE_EFFICIENT_I64RINT
name|n
operator|=
name|i64rint
argument_list|(
name|fn
argument_list|)
expr_stmt|;
else|#
directive|else
name|n
operator|=
name|fn
expr_stmt|;
endif|#
directive|endif
name|r
operator|=
name|x
operator|-
name|fn
operator|*
name|pio2_1
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_1t
expr_stmt|;
comment|/* 1st round good to 180 bit */
block|{
name|union
name|IEEEl2bits
name|u2
decl_stmt|;
name|int
name|ex1
decl_stmt|;
name|j
operator|=
name|ex
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
name|u2
operator|.
name|e
operator|=
name|y
index|[
literal|0
index|]
expr_stmt|;
name|ex1
operator|=
name|u2
operator|.
name|xbits
operator|.
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
name|i
operator|=
name|j
operator|-
name|ex1
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|51
condition|)
block|{
comment|/* 2nd iteration needed, good to 248 */
name|t
operator|=
name|r
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_2
expr_stmt|;
name|r
operator|=
name|t
operator|-
name|w
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_2t
operator|-
operator|(
operator|(
name|t
operator|-
name|r
operator|)
operator|-
name|w
operator|)
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
name|u2
operator|.
name|e
operator|=
name|y
index|[
literal|0
index|]
expr_stmt|;
name|ex1
operator|=
name|u2
operator|.
name|xbits
operator|.
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
name|i
operator|=
name|j
operator|-
name|ex1
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|119
condition|)
block|{
comment|/* 3rd iteration need, 316 bits acc */
name|t
operator|=
name|r
expr_stmt|;
comment|/* will cover all possible cases */
name|w
operator|=
name|fn
operator|*
name|pio2_3
expr_stmt|;
name|r
operator|=
name|t
operator|-
name|w
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_3t
operator|-
operator|(
operator|(
name|t
operator|-
name|r
operator|)
operator|-
name|w
operator|)
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
block|}
block|}
block|}
name|y
index|[
literal|1
index|]
operator|=
operator|(
name|r
operator|-
name|y
index|[
literal|0
index|]
operator|)
operator|-
name|w
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/*       * all other (large) arguments      */
if|if
condition|(
name|ex
operator|==
literal|0x7fff
condition|)
block|{
comment|/* x is inf or NaN */
name|y
index|[
literal|0
index|]
operator|=
name|y
index|[
literal|1
index|]
operator|=
name|x
operator|-
name|x
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/* set z = scalbn(|x|,ilogb(x)-23) */
name|u1
operator|.
name|e
operator|=
name|x
expr_stmt|;
name|e0
operator|=
name|ex
operator|-
name|BIAS
operator|-
literal|23
expr_stmt|;
comment|/* e0 = ilogb(|x|)-23; */
name|u1
operator|.
name|xbits
operator|.
name|expsign
operator|=
name|ex
operator|-
name|e0
expr_stmt|;
name|z
operator|=
name|u1
operator|.
name|e
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|tx
index|[
name|i
index|]
operator|=
call|(
name|double
call|)
argument_list|(
call|(
name|int32_t
call|)
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|z
operator|=
operator|(
name|z
operator|-
name|tx
index|[
name|i
index|]
operator|)
operator|*
name|two24
expr_stmt|;
block|}
name|tx
index|[
literal|4
index|]
operator|=
name|z
expr_stmt|;
name|nx
operator|=
literal|5
expr_stmt|;
while|while
condition|(
name|tx
index|[
name|nx
operator|-
literal|1
index|]
operator|==
name|zero
condition|)
name|nx
operator|--
expr_stmt|;
comment|/* skip zero term */
name|n
operator|=
name|__kernel_rem_pio2
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|,
name|e0
argument_list|,
name|nx
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t
operator|=
operator|(
name|long
name|double
operator|)
name|ty
index|[
literal|2
index|]
operator|+
name|ty
index|[
literal|1
index|]
expr_stmt|;
name|r
operator|=
name|t
operator|+
name|ty
index|[
literal|0
index|]
expr_stmt|;
name|w
operator|=
name|ty
index|[
literal|0
index|]
operator|-
operator|(
name|r
operator|-
name|t
operator|)
expr_stmt|;
if|if
condition|(
name|expsign
operator|<
literal|0
condition|)
block|{
name|y
index|[
literal|0
index|]
operator|=
operator|-
name|r
expr_stmt|;
name|y
index|[
literal|1
index|]
operator|=
operator|-
name|w
expr_stmt|;
return|return
operator|-
name|n
return|;
block|}
name|y
index|[
literal|0
index|]
operator|=
name|r
expr_stmt|;
name|y
index|[
literal|1
index|]
operator|=
name|w
expr_stmt|;
return|return
name|n
return|;
block|}
end_function

end_unit

