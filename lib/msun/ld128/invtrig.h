begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-2-Clause-FreeBSD  *  * Copyright (c) 2008 David Schultz<das@FreeBSD.ORG>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_include
include|#
directive|include
file|<float.h>
end_include

begin_include
include|#
directive|include
file|"fpmath.h"
end_include

begin_define
define|#
directive|define
name|BIAS
value|(LDBL_MAX_EXP - 1)
end_define

begin_define
define|#
directive|define
name|MANH_SIZE
value|(LDBL_MANH_SIZE + 1)
end_define

begin_comment
comment|/* Approximation thresholds. */
end_comment

begin_define
define|#
directive|define
name|ASIN_LINEAR
value|(BIAS - 56)
end_define

begin_comment
comment|/* 2**-56 */
end_comment

begin_define
define|#
directive|define
name|ACOS_CONST
value|(BIAS - 113)
end_define

begin_comment
comment|/* 2**-113 */
end_comment

begin_define
define|#
directive|define
name|ATAN_CONST
value|(BIAS + 113)
end_define

begin_comment
comment|/* 2**113 */
end_comment

begin_define
define|#
directive|define
name|ATAN_LINEAR
value|(BIAS - 56)
end_define

begin_comment
comment|/* 2**-56 */
end_comment

begin_comment
comment|/* 0.95 */
end_comment

begin_define
define|#
directive|define
name|THRESH
value|((0xe666666666666666ULL>>(64-(MANH_SIZE-1)))|LDBL_NBIT)
end_define

begin_comment
comment|/* Constants shared by the long double inverse trig functions. */
end_comment

begin_define
define|#
directive|define
name|pS0
value|_ItL_pS0
end_define

begin_define
define|#
directive|define
name|pS1
value|_ItL_pS1
end_define

begin_define
define|#
directive|define
name|pS2
value|_ItL_pS2
end_define

begin_define
define|#
directive|define
name|pS3
value|_ItL_pS3
end_define

begin_define
define|#
directive|define
name|pS4
value|_ItL_pS4
end_define

begin_define
define|#
directive|define
name|pS5
value|_ItL_pS5
end_define

begin_define
define|#
directive|define
name|pS6
value|_ItL_pS6
end_define

begin_define
define|#
directive|define
name|pS7
value|_ItL_pS7
end_define

begin_define
define|#
directive|define
name|pS8
value|_ItL_pS8
end_define

begin_define
define|#
directive|define
name|pS9
value|_ItL_pS9
end_define

begin_define
define|#
directive|define
name|qS1
value|_ItL_qS1
end_define

begin_define
define|#
directive|define
name|qS2
value|_ItL_qS2
end_define

begin_define
define|#
directive|define
name|qS3
value|_ItL_qS3
end_define

begin_define
define|#
directive|define
name|qS4
value|_ItL_qS4
end_define

begin_define
define|#
directive|define
name|qS5
value|_ItL_qS5
end_define

begin_define
define|#
directive|define
name|qS6
value|_ItL_qS6
end_define

begin_define
define|#
directive|define
name|qS7
value|_ItL_qS7
end_define

begin_define
define|#
directive|define
name|qS8
value|_ItL_qS8
end_define

begin_define
define|#
directive|define
name|qS9
value|_ItL_qS9
end_define

begin_define
define|#
directive|define
name|atanhi
value|_ItL_atanhi
end_define

begin_define
define|#
directive|define
name|atanlo
value|_ItL_atanlo
end_define

begin_define
define|#
directive|define
name|aT
value|_ItL_aT
end_define

begin_define
define|#
directive|define
name|pi_lo
value|_ItL_pi_lo
end_define

begin_define
define|#
directive|define
name|pio2_hi
value|atanhi[3]
end_define

begin_define
define|#
directive|define
name|pio2_lo
value|atanlo[3]
end_define

begin_define
define|#
directive|define
name|pio4_hi
value|atanhi[1]
end_define

begin_comment
comment|/* Constants shared by the long double inverse trig functions. */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|long
name|double
name|pS0
decl_stmt|,
name|pS1
decl_stmt|,
name|pS2
decl_stmt|,
name|pS3
decl_stmt|,
name|pS4
decl_stmt|,
name|pS5
decl_stmt|,
name|pS6
decl_stmt|,
name|pS7
decl_stmt|,
name|pS8
decl_stmt|,
name|pS9
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|long
name|double
name|qS1
decl_stmt|,
name|qS2
decl_stmt|,
name|qS3
decl_stmt|,
name|qS4
decl_stmt|,
name|qS5
decl_stmt|,
name|qS6
decl_stmt|,
name|qS7
decl_stmt|,
name|qS8
decl_stmt|,
name|qS9
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|long
name|double
name|atanhi
index|[]
decl_stmt|,
name|atanlo
index|[]
decl_stmt|,
name|aT
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|long
name|double
name|pi_lo
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|long
name|double
name|P
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
operator|(
name|x
operator|*
operator|(
name|pS0
operator|+
name|x
operator|*
operator|(
name|pS1
operator|+
name|x
operator|*
operator|(
name|pS2
operator|+
name|x
operator|*
operator|(
name|pS3
operator|+
name|x
operator|*
expr|\
operator|(
name|pS4
operator|+
name|x
operator|*
operator|(
name|pS5
operator|+
name|x
operator|*
operator|(
name|pS6
operator|+
name|x
operator|*
operator|(
name|pS7
operator|+
name|x
operator|*
operator|(
name|pS8
operator|+
name|x
operator|*
expr|\
name|pS9
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|double
name|Q
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
operator|(
literal|1.0
operator|+
name|x
operator|*
operator|(
name|qS1
operator|+
name|x
operator|*
operator|(
name|qS2
operator|+
name|x
operator|*
operator|(
name|qS3
operator|+
name|x
operator|*
operator|(
name|qS4
operator|+
name|x
operator|*
expr|\
operator|(
name|qS5
operator|+
name|x
operator|*
operator|(
name|qS6
operator|+
name|x
operator|*
operator|(
name|qS7
operator|+
name|x
operator|*
operator|(
name|qS8
operator|+
name|x
operator|*
name|qS9
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|double
name|T_even
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
operator|(
name|aT
index|[
literal|0
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|2
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|4
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|6
index|]
operator|+
name|x
operator|*
expr|\
operator|(
name|aT
index|[
literal|8
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|10
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|12
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|14
index|]
operator|+
name|x
operator|*
expr|\
operator|(
name|aT
index|[
literal|16
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|18
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|20
index|]
operator|+
name|x
operator|*
name|aT
index|[
literal|22
index|]
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|long
name|double
name|T_odd
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
return|return
operator|(
name|aT
index|[
literal|1
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|3
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|5
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|7
index|]
operator|+
name|x
operator|*
expr|\
operator|(
name|aT
index|[
literal|9
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|11
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|13
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|15
index|]
operator|+
name|x
operator|*
expr|\
operator|(
name|aT
index|[
literal|17
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|19
index|]
operator|+
name|x
operator|*
operator|(
name|aT
index|[
literal|21
index|]
operator|+
name|x
operator|*
name|aT
index|[
literal|23
index|]
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
operator|)
return|;
block|}
end_function

end_unit

