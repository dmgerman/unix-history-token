begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004-2005 David Schultz<das@FreeBSD.ORG>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FENV_H_
end_ifndef

begin_define
define|#
directive|define
name|_FENV_H_
end_define

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__fenv_static
end_ifndef

begin_define
define|#
directive|define
name|__fenv_static
value|static
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|__uint32_t
name|fenv_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__uint32_t
name|fexcept_t
typedef|;
end_typedef

begin_comment
comment|/* Exception flags */
end_comment

begin_define
define|#
directive|define
name|FE_INEXACT
value|0x02000000
end_define

begin_define
define|#
directive|define
name|FE_DIVBYZERO
value|0x04000000
end_define

begin_define
define|#
directive|define
name|FE_UNDERFLOW
value|0x08000000
end_define

begin_define
define|#
directive|define
name|FE_OVERFLOW
value|0x10000000
end_define

begin_define
define|#
directive|define
name|FE_INVALID
value|0x20000000
end_define

begin_comment
comment|/* all types of invalid FP ops */
end_comment

begin_comment
comment|/*  * The PowerPC architecture has extra invalid flags that indicate the  * specific type of invalid operation occurred.  These flags may be  * tested, set, and cleared---but not masked---separately.  All of  * these bits are cleared when FE_INVALID is cleared, but only  * FE_VXSOFT is set when FE_INVALID is explicitly set in software.  */
end_comment

begin_define
define|#
directive|define
name|FE_VXCVI
value|0x00000100
end_define

begin_comment
comment|/* invalid integer convert */
end_comment

begin_define
define|#
directive|define
name|FE_VXSQRT
value|0x00000200
end_define

begin_comment
comment|/* square root of a negative */
end_comment

begin_define
define|#
directive|define
name|FE_VXSOFT
value|0x00000400
end_define

begin_comment
comment|/* software-requested exception */
end_comment

begin_define
define|#
directive|define
name|FE_VXVC
value|0x00080000
end_define

begin_comment
comment|/* ordered comparison involving NaN */
end_comment

begin_define
define|#
directive|define
name|FE_VXIMZ
value|0x00100000
end_define

begin_comment
comment|/* inf * 0 */
end_comment

begin_define
define|#
directive|define
name|FE_VXZDZ
value|0x00200000
end_define

begin_comment
comment|/* 0 / 0 */
end_comment

begin_define
define|#
directive|define
name|FE_VXIDI
value|0x00400000
end_define

begin_comment
comment|/* inf / inf */
end_comment

begin_define
define|#
directive|define
name|FE_VXISI
value|0x00800000
end_define

begin_comment
comment|/* inf - inf */
end_comment

begin_define
define|#
directive|define
name|FE_VXSNAN
value|0x01000000
end_define

begin_comment
comment|/* operation on a signalling NaN */
end_comment

begin_define
define|#
directive|define
name|FE_ALL_INVALID
value|(FE_VXCVI | FE_VXSQRT | FE_VXSOFT | FE_VXVC | \ 			 FE_VXIMZ | FE_VXZDZ | FE_VXIDI | FE_VXISI | \ 			 FE_VXSNAN | FE_INVALID)
end_define

begin_define
define|#
directive|define
name|FE_ALL_EXCEPT
value|(FE_DIVBYZERO | FE_INEXACT | \ 			 FE_ALL_INVALID | FE_OVERFLOW | FE_UNDERFLOW)
end_define

begin_comment
comment|/* Rounding modes */
end_comment

begin_define
define|#
directive|define
name|FE_TONEAREST
value|0x0000
end_define

begin_define
define|#
directive|define
name|FE_TOWARDZERO
value|0x0001
end_define

begin_define
define|#
directive|define
name|FE_UPWARD
value|0x0002
end_define

begin_define
define|#
directive|define
name|FE_DOWNWARD
value|0x0003
end_define

begin_define
define|#
directive|define
name|_ROUND_MASK
value|(FE_TONEAREST | FE_DOWNWARD | \ 			 FE_UPWARD | FE_TOWARDZERO)
end_define

begin_decl_stmt
name|__BEGIN_DECLS
comment|/* Default floating-point environment */
specifier|extern
specifier|const
name|fenv_t
name|__fe_dfl_env
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|FE_DFL_ENV
value|(&__fe_dfl_env)
end_define

begin_comment
comment|/* We need to be able to map status flag positions to mask flag positions */
end_comment

begin_define
define|#
directive|define
name|_FPUSW_SHIFT
value|22
end_define

begin_define
define|#
directive|define
name|_ENABLE_MASK
value|((FE_DIVBYZERO | FE_INEXACT | FE_INVALID | \ 			 FE_OVERFLOW | FE_UNDERFLOW)>> _FPUSW_SHIFT)
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_SOFT_FLOAT
end_ifndef

begin_define
define|#
directive|define
name|__mffs
parameter_list|(
name|__env
parameter_list|)
value|__asm __volatile("mffs %0" : "=f" (*(__env)))
end_define

begin_define
define|#
directive|define
name|__mtfsf
parameter_list|(
name|__env
parameter_list|)
value|__asm __volatile("mtfsf 255,%0" : : "f" (__env))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__mffs
parameter_list|(
name|__env
parameter_list|)
end_define

begin_define
define|#
directive|define
name|__mtfsf
parameter_list|(
name|__env
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_union
union|union
name|__fpscr
block|{
name|double
name|__d
decl_stmt|;
struct|struct
block|{
if|#
directive|if
name|_BYTE_ORDER
operator|==
name|_LITTLE_ENDIAN
name|fenv_t
name|__reg
decl_stmt|;
name|__uint32_t
name|__junk
decl_stmt|;
else|#
directive|else
name|__uint32_t
name|__junk
decl_stmt|;
name|fenv_t
name|__reg
decl_stmt|;
endif|#
directive|endif
block|}
name|__bits
struct|;
block|}
union|;
end_union

begin_function
name|__fenv_static
specifier|inline
name|int
name|feclearexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
if|if
condition|(
name|__excepts
operator|&
name|FE_INVALID
condition|)
name|__excepts
operator||=
name|FE_ALL_INVALID
expr_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
operator|~
name|__excepts
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetexceptflag
parameter_list|(
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
operator|*
name|__flagp
operator|=
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&
name|__excepts
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetexceptflag
parameter_list|(
specifier|const
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
if|if
condition|(
name|__excepts
operator|&
name|FE_INVALID
condition|)
name|__excepts
operator||=
name|FE_ALL_EXCEPT
expr_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
operator|~
name|__excepts
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator||=
operator|*
name|__flagp
operator|&
name|__excepts
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feraiseexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
if|if
condition|(
name|__excepts
operator|&
name|FE_INVALID
condition|)
name|__excepts
operator||=
name|FE_VXSOFT
expr_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator||=
name|__excepts
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fetestexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&
name|__excepts
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetround
parameter_list|(
name|void
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&
name|_ROUND_MASK
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetround
parameter_list|(
name|int
name|__round
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
if|if
condition|(
name|__round
operator|&
operator|~
name|_ROUND_MASK
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
operator|~
name|_ROUND_MASK
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator||=
name|__round
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetenv
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
operator|*
name|__envp
operator|=
name|__r
operator|.
name|__bits
operator|.
name|__reg
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feholdexcept
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
operator|*
name|__envp
operator|=
name|__r
operator|.
name|__d
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
operator|~
operator|(
name|FE_ALL_EXCEPT
operator||
name|_ENABLE_MASK
operator|)
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|=
operator|*
name|__envp
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feupdateenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
name|FE_ALL_EXCEPT
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator||=
operator|*
name|__envp
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__BSD_VISIBLE
end_if

begin_comment
comment|/* We currently provide no external definitions of the functions below. */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|feenableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|fenv_t
name|__oldmask
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__oldmask
operator|=
name|__r
operator|.
name|__bits
operator|.
name|__reg
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator||=
operator|(
name|__mask
operator|&
name|FE_ALL_EXCEPT
operator|)
operator|>>
name|_FPUSW_SHIFT
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__oldmask
operator|&
name|_ENABLE_MASK
operator|)
operator|<<
name|_FPUSW_SHIFT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fedisableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|fenv_t
name|__oldmask
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
name|__oldmask
operator|=
name|__r
operator|.
name|__bits
operator|.
name|__reg
expr_stmt|;
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&=
operator|~
operator|(
operator|(
name|__mask
operator|&
name|FE_ALL_EXCEPT
operator|)
operator|>>
name|_FPUSW_SHIFT
operator|)
expr_stmt|;
name|__mtfsf
argument_list|(
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__oldmask
operator|&
name|_ENABLE_MASK
operator|)
operator|<<
name|_FPUSW_SHIFT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fegetexcept
parameter_list|(
name|void
parameter_list|)
block|{
name|union
name|__fpscr
name|__r
decl_stmt|;
name|__mffs
argument_list|(
operator|&
name|__r
operator|.
name|__d
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__r
operator|.
name|__bits
operator|.
name|__reg
operator|&
name|_ENABLE_MASK
operator|)
operator|<<
name|_FPUSW_SHIFT
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BSD_VISIBLE */
end_comment

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_FENV_H_ */
end_comment

end_unit

