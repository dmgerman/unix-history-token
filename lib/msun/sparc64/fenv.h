begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * SPDX-License-Identifier: BSD-2-Clause-FreeBSD  *  * Copyright (c) 2004-2005 David Schultz<das@FreeBSD.ORG>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FENV_H_
end_ifndef

begin_define
define|#
directive|define
name|_FENV_H_
end_define

begin_include
include|#
directive|include
file|<sys/_types.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__fenv_static
end_ifndef

begin_define
define|#
directive|define
name|__fenv_static
value|static
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|__uint64_t
name|fenv_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__uint64_t
name|fexcept_t
typedef|;
end_typedef

begin_comment
comment|/* Exception flags */
end_comment

begin_define
define|#
directive|define
name|FE_INVALID
value|0x00000200
end_define

begin_define
define|#
directive|define
name|FE_DIVBYZERO
value|0x00000040
end_define

begin_define
define|#
directive|define
name|FE_OVERFLOW
value|0x00000100
end_define

begin_define
define|#
directive|define
name|FE_UNDERFLOW
value|0x00000080
end_define

begin_define
define|#
directive|define
name|FE_INEXACT
value|0x00000020
end_define

begin_define
define|#
directive|define
name|FE_ALL_EXCEPT
value|(FE_DIVBYZERO | FE_INEXACT | \ 			 FE_INVALID | FE_OVERFLOW | FE_UNDERFLOW)
end_define

begin_comment
comment|/*  * Rounding modes  *  * We can't just use the hardware bit values here, because that would  * make FE_UPWARD and FE_DOWNWARD negative, which is not allowed.  */
end_comment

begin_define
define|#
directive|define
name|FE_TONEAREST
value|0x0
end_define

begin_define
define|#
directive|define
name|FE_TOWARDZERO
value|0x1
end_define

begin_define
define|#
directive|define
name|FE_UPWARD
value|0x2
end_define

begin_define
define|#
directive|define
name|FE_DOWNWARD
value|0x3
end_define

begin_define
define|#
directive|define
name|_ROUND_MASK
value|(FE_TONEAREST | FE_DOWNWARD | \ 			 FE_UPWARD | FE_TOWARDZERO)
end_define

begin_define
define|#
directive|define
name|_ROUND_SHIFT
value|30
end_define

begin_decl_stmt
name|__BEGIN_DECLS
comment|/* Default floating-point environment */
specifier|extern
specifier|const
name|fenv_t
name|__fe_dfl_env
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|FE_DFL_ENV
value|(&__fe_dfl_env)
end_define

begin_comment
comment|/* We need to be able to map status flag positions to mask flag positions */
end_comment

begin_define
define|#
directive|define
name|_FPUSW_SHIFT
value|18
end_define

begin_define
define|#
directive|define
name|_ENABLE_MASK
value|(FE_ALL_EXCEPT<< _FPUSW_SHIFT)
end_define

begin_define
define|#
directive|define
name|__ldxfsr
parameter_list|(
name|__r
parameter_list|)
value|__asm __volatile("ldx %0, %%fsr" : : "m" (__r))
end_define

begin_define
define|#
directive|define
name|__stxfsr
parameter_list|(
name|__r
parameter_list|)
value|__asm __volatile("stx %%fsr, %0" : "=m" (*(__r)))
end_define

begin_function
name|__fenv_static
name|__inline
name|int
name|feclearexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|fexcept_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
name|__r
operator|&=
operator|~
name|__excepts
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetexceptflag
parameter_list|(
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
name|fexcept_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
operator|*
name|__flagp
operator|=
name|__r
operator|&
name|__excepts
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetexceptflag
parameter_list|(
specifier|const
name|fexcept_t
modifier|*
name|__flagp
parameter_list|,
name|int
name|__excepts
parameter_list|)
block|{
name|fexcept_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
name|__r
operator|&=
operator|~
name|__excepts
expr_stmt|;
name|__r
operator||=
operator|*
name|__flagp
operator|&
name|__excepts
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * It seems to be worthwhile to inline this function even when the  * arguments are not compile-time constants.  Perhaps this depends  * on the register window.  */
end_comment

begin_function
name|__fenv_static
specifier|inline
name|int
name|feraiseexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
specifier|volatile
name|double
name|d
decl_stmt|;
comment|/* 	 * With a compiler that supports the FENV_ACCESS pragma 	 * properly, simple expressions like '0.0 / 0.0' should 	 * be sufficient to generate traps.  Unfortunately, we 	 * need to bring a volatile variable into the equation 	 * to prevent incorrect optimizations. 	 */
if|if
condition|(
name|__excepts
operator|&
name|FE_INVALID
condition|)
block|{
name|d
operator|=
literal|0.0
expr_stmt|;
name|d
operator|=
literal|0.0
operator|/
name|d
expr_stmt|;
block|}
if|if
condition|(
name|__excepts
operator|&
name|FE_DIVBYZERO
condition|)
block|{
name|d
operator|=
literal|0.0
expr_stmt|;
name|d
operator|=
literal|1.0
operator|/
name|d
expr_stmt|;
block|}
if|if
condition|(
name|__excepts
operator|&
name|FE_OVERFLOW
condition|)
block|{
name|d
operator|=
literal|0x1
operator|.
name|ffp1023
expr_stmt|;
name|d
operator|*=
literal|2.0
expr_stmt|;
block|}
if|if
condition|(
name|__excepts
operator|&
name|FE_UNDERFLOW
condition|)
block|{
name|d
operator|=
literal|0x1p
operator|-
literal|1022
expr_stmt|;
name|d
operator|/=
literal|0x1p1023
expr_stmt|;
block|}
if|if
condition|(
name|__excepts
operator|&
name|FE_INEXACT
condition|)
block|{
name|d
operator|=
literal|0x1p
operator|-
literal|1022
expr_stmt|;
name|d
operator|+=
literal|1.0
expr_stmt|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fetestexcept
parameter_list|(
name|int
name|__excepts
parameter_list|)
block|{
name|fexcept_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
name|__r
operator|&
name|__excepts
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetround
parameter_list|(
name|void
parameter_list|)
block|{
name|fenv_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__r
operator|>>
name|_ROUND_SHIFT
operator|)
operator|&
name|_ROUND_MASK
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetround
parameter_list|(
name|int
name|__round
parameter_list|)
block|{
name|fenv_t
name|__r
decl_stmt|;
if|if
condition|(
name|__round
operator|&
operator|~
name|_ROUND_MASK
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
name|__r
operator|&=
operator|~
operator|(
name|_ROUND_MASK
operator|<<
name|_ROUND_SHIFT
operator|)
expr_stmt|;
name|__r
operator||=
name|__round
operator|<<
name|_ROUND_SHIFT
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fegetenv
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|__stxfsr
argument_list|(
name|__envp
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feholdexcept
parameter_list|(
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|fenv_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
operator|*
name|__envp
operator|=
name|__r
expr_stmt|;
name|__r
operator|&=
operator|~
operator|(
name|FE_ALL_EXCEPT
operator||
name|_ENABLE_MASK
operator|)
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|fesetenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|__ldxfsr
argument_list|(
operator|*
name|__envp
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|__fenv_static
specifier|inline
name|int
name|feupdateenv
parameter_list|(
specifier|const
name|fenv_t
modifier|*
name|__envp
parameter_list|)
block|{
name|fexcept_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
name|__ldxfsr
argument_list|(
operator|*
name|__envp
argument_list|)
expr_stmt|;
name|feraiseexcept
argument_list|(
name|__r
operator|&
name|FE_ALL_EXCEPT
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__BSD_VISIBLE
end_if

begin_comment
comment|/* We currently provide no external definitions of the functions below. */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|feenableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|fenv_t
name|__old_r
decl_stmt|,
name|__new_r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__old_r
argument_list|)
expr_stmt|;
name|__new_r
operator|=
name|__old_r
operator||
operator|(
operator|(
name|__mask
operator|&
name|FE_ALL_EXCEPT
operator|)
operator|<<
name|_FPUSW_SHIFT
operator|)
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__new_r
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__old_r
operator|>>
name|_FPUSW_SHIFT
operator|)
operator|&
name|FE_ALL_EXCEPT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fedisableexcept
parameter_list|(
name|int
name|__mask
parameter_list|)
block|{
name|fenv_t
name|__old_r
decl_stmt|,
name|__new_r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__old_r
argument_list|)
expr_stmt|;
name|__new_r
operator|=
name|__old_r
operator|&
operator|~
operator|(
operator|(
name|__mask
operator|&
name|FE_ALL_EXCEPT
operator|)
operator|<<
name|_FPUSW_SHIFT
operator|)
expr_stmt|;
name|__ldxfsr
argument_list|(
name|__new_r
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__old_r
operator|>>
name|_FPUSW_SHIFT
operator|)
operator|&
name|FE_ALL_EXCEPT
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|fegetexcept
parameter_list|(
name|void
parameter_list|)
block|{
name|fenv_t
name|__r
decl_stmt|;
name|__stxfsr
argument_list|(
operator|&
name|__r
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|__r
operator|&
name|_ENABLE_MASK
operator|)
operator|>>
name|_FPUSW_SHIFT
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BSD_VISIBLE */
end_comment

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_FENV_H_ */
end_comment

end_unit

