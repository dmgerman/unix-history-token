begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* From: @(#)e_rem_pio2.c 1.4 95/01/18 */
end_comment

begin_comment
comment|/*  * ====================================================  * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.  * Copyright (c) 2008 Steven G. Kargl, David Schultz, Bruce D. Evans.  *  * Developed at SunSoft, a Sun Microsystems, Inc. business.  * Permission to use, copy, modify, and distribute this  * software is freely granted, provided that this notice   * is preserved.  * ====================================================  *  * Optimized by Bruce D. Evans.  */
end_comment

begin_include
include|#
directive|include
file|<sys/cdefs.h>
end_include

begin_expr_stmt
name|__FBSDID
argument_list|(
literal|"$FreeBSD$"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/* ld80 version of __ieee754_rem_pio2l(x,y)  *   * return the remainder of x rem pi/2 in y[0]+y[1]   * use __kernel_rem_pio2()  */
end_comment

begin_include
include|#
directive|include
file|<float.h>
end_include

begin_include
include|#
directive|include
file|"math.h"
end_include

begin_include
include|#
directive|include
file|"math_private.h"
end_include

begin_include
include|#
directive|include
file|"fpmath.h"
end_include

begin_define
define|#
directive|define
name|BIAS
value|(LDBL_MAX_EXP - 1)
end_define

begin_comment
comment|/*  * invpio2:  64 bits of 2/pi  * pio2_1:   first  39 bits of pi/2  * pio2_1t:  pi/2 - pio2_1  * pio2_2:   second 39 bits of pi/2  * pio2_2t:  pi/2 - (pio2_1+pio2_2)  * pio2_3:   third  39 bits of pi/2  * pio2_3t:  pi/2 - (pio2_1+pio2_2+pio2_3)  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|double
name|zero
init|=
literal|0.00000000000000000000e+00
decl_stmt|,
comment|/* 0x00000000, 0x00000000 */
name|two24
init|=
literal|1.67772160000000000000e+07
decl_stmt|,
comment|/* 0x41700000, 0x00000000 */
name|pio2_1
init|=
literal|1.57079632679597125389e+00
decl_stmt|,
comment|/* 0x3FF921FB, 0x54444000 */
name|pio2_2
init|=
operator|-
literal|1.07463465549783099519e-12
decl_stmt|,
comment|/* -0x12e7b967674000.0p-92 */
name|pio2_3
init|=
literal|6.36831716351370313614e-25
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  0x18a2e037074000.0p-133 */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__i386__
argument_list|)
end_if

begin_comment
comment|/* Long double constants are slow on these arches, and broken on i386. */
end_comment

begin_decl_stmt
specifier|static
specifier|const
specifier|volatile
name|double
name|invpio2hi
init|=
literal|6.3661977236758138e-01
decl_stmt|,
comment|/*  0x145f306dc9c883.0p-53 */
name|invpio2lo
init|=
operator|-
literal|3.9356538861223811e-17
decl_stmt|,
comment|/* -0x16b00000000000.0p-107 */
name|pio2_1thi
init|=
operator|-
literal|1.0746346554971943e-12
decl_stmt|,
comment|/* -0x12e7b9676733af.0p-92 */
name|pio2_1tlo
init|=
literal|8.8451028997905949e-29
decl_stmt|,
comment|/*  0x1c080000000000.0p-146 */
name|pio2_2thi
init|=
literal|6.3683171635109499e-25
decl_stmt|,
comment|/*  0x18a2e03707344a.0p-133 */
name|pio2_2tlo
init|=
literal|2.3183081793789774e-41
decl_stmt|,
comment|/*  0x10280000000000.0p-187 */
name|pio2_3thi
init|=
operator|-
literal|2.7529965190440717e-37
decl_stmt|,
comment|/* -0x176b7ed8fbbacc.0p-174 */
name|pio2_3tlo
init|=
operator|-
literal|4.2006647512740502e-54
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* -0x19c00000000000.0p-230 */
end_comment

begin_define
define|#
directive|define
name|invpio2
value|((long double)invpio2hi + invpio2lo)
end_define

begin_define
define|#
directive|define
name|pio2_1t
value|((long double)pio2_1thi + pio2_1tlo)
end_define

begin_define
define|#
directive|define
name|pio2_2t
value|((long double)pio2_2thi + pio2_2tlo)
end_define

begin_define
define|#
directive|define
name|pio2_3t
value|((long double)pio2_3thi + pio2_3tlo)
end_define

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|static
specifier|const
name|long
name|double
name|invpio2
init|=
literal|6.36619772367581343076e-01L
decl_stmt|,
comment|/*  0xa2f9836e4e44152a.0p-64 */
name|pio2_1t
init|=
operator|-
literal|1.07463465549719416346e-12L
decl_stmt|,
comment|/* -0x973dcb3b399d747f.0p-103 */
name|pio2_2t
init|=
literal|6.36831716351095013979e-25L
decl_stmt|,
comment|/*  0xc51701b839a25205.0p-144 */
name|pio2_3t
init|=
operator|-
literal|2.75299651904407171810e-37L
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* -0xbb5bf6c7ddd660ce.0p-185 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|INLINE_REM_PIO2L
end_ifdef

begin_function
specifier|static
specifier|inline
name|__always_inline
endif|#
directive|endif
name|int
name|__ieee754_rem_pio2l
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
modifier|*
name|y
parameter_list|)
block|{
name|union
name|IEEEl2bits
name|u
decl_stmt|,
name|u1
decl_stmt|;
name|long
name|double
name|z
decl_stmt|,
name|w
decl_stmt|,
name|t
decl_stmt|,
name|r
decl_stmt|,
name|fn
decl_stmt|;
name|double
name|tx
index|[
literal|3
index|]
decl_stmt|,
name|ty
index|[
literal|2
index|]
decl_stmt|;
name|int
name|e0
decl_stmt|,
name|ex
decl_stmt|,
name|i
decl_stmt|,
name|j
decl_stmt|,
name|nx
decl_stmt|,
name|n
decl_stmt|;
name|int16_t
name|expsign
decl_stmt|;
name|u
operator|.
name|e
operator|=
name|x
expr_stmt|;
name|expsign
operator|=
name|u
operator|.
name|xbits
operator|.
name|expsign
expr_stmt|;
name|ex
operator|=
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
if|if
condition|(
name|ex
operator|<
name|BIAS
operator|+
literal|25
operator|||
name|ex
operator|==
name|BIAS
operator|+
literal|25
operator|&&
name|u
operator|.
name|bits
operator|.
name|manh
operator|<
literal|0xc90fdaa2
condition|)
block|{
comment|/* |x| ~< 2^25*(pi/2), medium size */
comment|/* Use a specialized rint() to get fn.  Assume round-to-nearest. */
name|fn
operator|=
name|x
operator|*
name|invpio2
operator|+
literal|0x1
literal|.8p63
expr_stmt|;
name|fn
operator|=
name|fn
operator|-
literal|0x1
literal|.8p63
expr_stmt|;
ifdef|#
directive|ifdef
name|HAVE_EFFICIENT_IRINT
name|n
operator|=
name|irint
argument_list|(
name|fn
argument_list|)
expr_stmt|;
else|#
directive|else
name|n
operator|=
name|fn
expr_stmt|;
endif|#
directive|endif
name|r
operator|=
name|x
operator|-
name|fn
operator|*
name|pio2_1
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_1t
expr_stmt|;
comment|/* 1st round good to 102 bit */
block|{
name|union
name|IEEEl2bits
name|u2
decl_stmt|;
name|int
name|ex1
decl_stmt|;
name|j
operator|=
name|ex
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
name|u2
operator|.
name|e
operator|=
name|y
index|[
literal|0
index|]
expr_stmt|;
name|ex1
operator|=
name|u2
operator|.
name|xbits
operator|.
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
name|i
operator|=
name|j
operator|-
name|ex1
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|22
condition|)
block|{
comment|/* 2nd iteration needed, good to 141 */
name|t
operator|=
name|r
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_2
expr_stmt|;
name|r
operator|=
name|t
operator|-
name|w
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_2t
operator|-
operator|(
operator|(
name|t
operator|-
name|r
operator|)
operator|-
name|w
operator|)
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
name|u2
operator|.
name|e
operator|=
name|y
index|[
literal|0
index|]
expr_stmt|;
name|ex1
operator|=
name|u2
operator|.
name|xbits
operator|.
name|expsign
operator|&
literal|0x7fff
expr_stmt|;
name|i
operator|=
name|j
operator|-
name|ex1
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|61
condition|)
block|{
comment|/* 3rd iteration need, 180 bits acc */
name|t
operator|=
name|r
expr_stmt|;
comment|/* will cover all possible cases */
name|w
operator|=
name|fn
operator|*
name|pio2_3
expr_stmt|;
name|r
operator|=
name|t
operator|-
name|w
expr_stmt|;
name|w
operator|=
name|fn
operator|*
name|pio2_3t
operator|-
operator|(
operator|(
name|t
operator|-
name|r
operator|)
operator|-
name|w
operator|)
expr_stmt|;
name|y
index|[
literal|0
index|]
operator|=
name|r
operator|-
name|w
expr_stmt|;
block|}
block|}
block|}
name|y
index|[
literal|1
index|]
operator|=
operator|(
name|r
operator|-
name|y
index|[
literal|0
index|]
operator|)
operator|-
name|w
expr_stmt|;
return|return
name|n
return|;
block|}
comment|/*       * all other (large) arguments      */
if|if
condition|(
name|ex
operator|==
literal|0x7fff
condition|)
block|{
comment|/* x is inf or NaN */
name|y
index|[
literal|0
index|]
operator|=
name|y
index|[
literal|1
index|]
operator|=
name|x
operator|-
name|x
expr_stmt|;
return|return
literal|0
return|;
block|}
comment|/* set z = scalbn(|x|,ilogb(x)-23) */
name|u1
operator|.
name|e
operator|=
name|x
expr_stmt|;
name|e0
operator|=
name|ex
operator|-
name|BIAS
operator|-
literal|23
expr_stmt|;
comment|/* e0 = ilogb(|x|)-23; */
name|u1
operator|.
name|xbits
operator|.
name|expsign
operator|=
name|ex
operator|-
name|e0
expr_stmt|;
name|z
operator|=
name|u1
operator|.
name|e
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|tx
index|[
name|i
index|]
operator|=
call|(
name|double
call|)
argument_list|(
call|(
name|int32_t
call|)
argument_list|(
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|z
operator|=
operator|(
name|z
operator|-
name|tx
index|[
name|i
index|]
operator|)
operator|*
name|two24
expr_stmt|;
block|}
name|tx
index|[
literal|2
index|]
operator|=
name|z
expr_stmt|;
name|nx
operator|=
literal|3
expr_stmt|;
while|while
condition|(
name|tx
index|[
name|nx
operator|-
literal|1
index|]
operator|==
name|zero
condition|)
name|nx
operator|--
expr_stmt|;
comment|/* skip zero term */
name|n
operator|=
name|__kernel_rem_pio2
argument_list|(
name|tx
argument_list|,
name|ty
argument_list|,
name|e0
argument_list|,
name|nx
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|long
name|double
operator|)
name|ty
index|[
literal|0
index|]
operator|+
name|ty
index|[
literal|1
index|]
expr_stmt|;
name|w
operator|=
name|ty
index|[
literal|1
index|]
operator|-
operator|(
name|r
operator|-
name|ty
index|[
literal|0
index|]
operator|)
expr_stmt|;
if|if
condition|(
name|expsign
operator|<
literal|0
condition|)
block|{
name|y
index|[
literal|0
index|]
operator|=
operator|-
name|r
expr_stmt|;
name|y
index|[
literal|1
index|]
operator|=
operator|-
name|w
expr_stmt|;
return|return
operator|-
name|n
return|;
block|}
name|y
index|[
literal|0
index|]
operator|=
name|r
expr_stmt|;
name|y
index|[
literal|1
index|]
operator|=
name|w
expr_stmt|;
return|return
name|n
return|;
block|}
end_function

end_unit

