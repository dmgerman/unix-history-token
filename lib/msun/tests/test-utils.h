begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2013 David Schultz<das@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TEST_UTILS_H_
end_ifndef

begin_define
define|#
directive|define
name|_TEST_UTILS_H_
end_define

begin_include
include|#
directive|include
file|<complex.h>
end_include

begin_include
include|#
directive|include
file|<fenv.h>
end_include

begin_comment
comment|/*  * Implementations are permitted to define additional exception flags  * not specified in the standard, so it is not necessarily true that  * FE_ALL_EXCEPT == ALL_STD_EXCEPT.  */
end_comment

begin_define
define|#
directive|define
name|ALL_STD_EXCEPT
value|(FE_DIVBYZERO | FE_INEXACT | FE_INVALID | \ 			 FE_OVERFLOW | FE_UNDERFLOW)
end_define

begin_define
define|#
directive|define
name|OPT_INVALID
value|(ALL_STD_EXCEPT& ~FE_INVALID)
end_define

begin_define
define|#
directive|define
name|OPT_INEXACT
value|(ALL_STD_EXCEPT& ~FE_INEXACT)
end_define

begin_define
define|#
directive|define
name|FLT_ULP
parameter_list|()
value|ldexpl(1.0, 1 - FLT_MANT_DIG)
end_define

begin_define
define|#
directive|define
name|DBL_ULP
parameter_list|()
value|ldexpl(1.0, 1 - DBL_MANT_DIG)
end_define

begin_define
define|#
directive|define
name|LDBL_ULP
parameter_list|()
value|ldexpl(1.0, 1 - LDBL_MANT_DIG)
end_define

begin_comment
comment|/*  * Flags that control the behavior of various fpequal* functions.  * XXX This is messy due to merging various notions of "close enough"  * that are best suited for different functions.  *  * CS_REAL  * CS_IMAG  * CS_BOTH  *   (cfpequal_cs, fpequal_tol, cfpequal_tol) Whether to check the sign of  *   the real part of the result, the imaginary part, or both.  *  * FPE_ABS_ZERO  *   (fpequal_tol, cfpequal_tol) If set, treats the tolerance as an absolute  *   tolerance when the expected value is 0.  This is useful when there is  *   round-off error in the input, e.g., cos(Pi/2) ~= 0.  */
end_comment

begin_define
define|#
directive|define
name|CS_REAL
value|0x01
end_define

begin_define
define|#
directive|define
name|CS_IMAG
value|0x02
end_define

begin_define
define|#
directive|define
name|CS_BOTH
value|(CS_REAL | CS_IMAG)
end_define

begin_define
define|#
directive|define
name|FPE_ABS_ZERO
value|0x04
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_define
define|#
directive|define
name|debug
parameter_list|(
modifier|...
parameter_list|)
value|printf(__VA_ARGS__)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|debug
parameter_list|(
modifier|...
parameter_list|)
value|(void)0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * XXX The ancient version of gcc in the base system doesn't support CMPLXL,  * but we can fake it most of the time.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CMPLXL
end_ifndef

begin_function
specifier|static
specifier|inline
name|long
name|double
name|complex
name|CMPLXL
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|)
block|{
name|long
name|double
name|complex
name|z
decl_stmt|;
name|__real__
name|z
init|=
name|x
decl_stmt|;
name|__imag__
name|z
init|=
name|y
decl_stmt|;
return|return
operator|(
name|z
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Compare d1 and d2 using special rules: NaN == NaN and +0 != -0.  * Fail an assertion if they differ.  */
end_comment

begin_function
specifier|static
name|int
name|fpequal
parameter_list|(
name|long
name|double
name|d1
parameter_list|,
name|long
name|double
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|!=
name|d2
condition|)
return|return
operator|(
name|isnan
argument_list|(
name|d1
argument_list|)
operator|&&
name|isnan
argument_list|(
name|d2
argument_list|)
operator|)
return|;
return|return
operator|(
name|copysignl
argument_list|(
literal|1.0
argument_list|,
name|d1
argument_list|)
operator|==
name|copysignl
argument_list|(
literal|1.0
argument_list|,
name|d2
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Determine whether x and y are equal, with two special rules:  *	+0.0 != -0.0  *	 NaN == NaN  * If checksign is 0, we compare the absolute values instead.  */
end_comment

begin_function
specifier|static
name|int
name|fpequal_cs
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|,
name|int
name|checksign
parameter_list|)
block|{
if|if
condition|(
name|isnan
argument_list|(
name|x
argument_list|)
operator|&&
name|isnan
argument_list|(
name|y
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
if|if
condition|(
name|checksign
condition|)
return|return
operator|(
name|x
operator|==
name|y
operator|&&
operator|!
name|signbit
argument_list|(
name|x
argument_list|)
operator|==
operator|!
name|signbit
argument_list|(
name|y
argument_list|)
operator|)
return|;
else|else
return|return
operator|(
name|fabsl
argument_list|(
name|x
argument_list|)
operator|==
name|fabsl
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|fpequal_tol
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|,
name|long
name|double
name|tol
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
block|{
name|fenv_t
name|env
decl_stmt|;
name|int
name|ret
decl_stmt|;
if|if
condition|(
name|isnan
argument_list|(
name|x
argument_list|)
operator|&&
name|isnan
argument_list|(
name|y
argument_list|)
condition|)
return|return
operator|(
literal|1
operator|)
return|;
if|if
condition|(
operator|!
name|signbit
argument_list|(
name|x
argument_list|)
operator|!=
operator|!
name|signbit
argument_list|(
name|y
argument_list|)
operator|&&
operator|(
name|flags
operator|&
name|CS_BOTH
operator|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
if|if
condition|(
name|x
operator|==
name|y
condition|)
return|return
operator|(
literal|1
operator|)
return|;
if|if
condition|(
name|tol
operator|==
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
comment|/* Hard case: need to check the tolerance. */
name|feholdexcept
argument_list|(
operator|&
name|env
argument_list|)
expr_stmt|;
comment|/* 	 * For our purposes here, if y=0, we interpret tol as an absolute 	 * tolerance. This is to account for roundoff in the input, e.g., 	 * cos(Pi/2) ~= 0. 	 */
if|if
condition|(
operator|(
name|flags
operator|&
name|FPE_ABS_ZERO
operator|)
operator|&&
name|y
operator|==
literal|0.0
condition|)
name|ret
operator|=
name|fabsl
argument_list|(
name|x
operator|-
name|y
argument_list|)
operator|<=
name|fabsl
argument_list|(
name|tol
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
name|fabsl
argument_list|(
name|x
operator|-
name|y
argument_list|)
operator|<=
name|fabsl
argument_list|(
name|y
operator|*
name|tol
argument_list|)
expr_stmt|;
name|fesetenv
argument_list|(
operator|&
name|env
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|cfpequal
parameter_list|(
name|long
name|double
name|complex
name|d1
parameter_list|,
name|long
name|double
name|complex
name|d2
parameter_list|)
block|{
return|return
operator|(
name|fpequal
argument_list|(
name|creall
argument_list|(
name|d1
argument_list|)
argument_list|,
name|creall
argument_list|(
name|d2
argument_list|)
argument_list|)
operator|&&
name|fpequal
argument_list|(
name|cimagl
argument_list|(
name|d1
argument_list|)
argument_list|,
name|cimagl
argument_list|(
name|d2
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|cfpequal_cs
parameter_list|(
name|long
name|double
name|complex
name|x
parameter_list|,
name|long
name|double
name|complex
name|y
parameter_list|,
name|int
name|checksign
parameter_list|)
block|{
return|return
operator|(
name|fpequal_cs
argument_list|(
name|creal
argument_list|(
name|x
argument_list|)
argument_list|,
name|creal
argument_list|(
name|y
argument_list|)
argument_list|,
name|checksign
argument_list|)
operator|&&
name|fpequal_cs
argument_list|(
name|cimag
argument_list|(
name|x
argument_list|)
argument_list|,
name|cimag
argument_list|(
name|y
argument_list|)
argument_list|,
name|checksign
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|cfpequal_tol
parameter_list|(
name|long
name|double
name|complex
name|x
parameter_list|,
name|long
name|double
name|complex
name|y
parameter_list|,
name|long
name|double
name|tol
parameter_list|,
name|unsigned
name|int
name|flags
parameter_list|)
block|{
return|return
operator|(
name|fpequal_tol
argument_list|(
name|creal
argument_list|(
name|x
argument_list|)
argument_list|,
name|creal
argument_list|(
name|y
argument_list|)
argument_list|,
name|tol
argument_list|,
name|flags
argument_list|)
operator|&&
name|fpequal_tol
argument_list|(
name|cimag
argument_list|(
name|x
argument_list|)
argument_list|,
name|cimag
argument_list|(
name|y
argument_list|)
argument_list|,
name|tol
argument_list|,
name|flags
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _TEST_UTILS_H_ */
end_comment

end_unit

