begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2016 Mariusz Zaborski<oshogbo@FreeBSD.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CAPSICUM_HELPERS_H_
end_ifndef

begin_define
define|#
directive|define
name|_CAPSICUM_HELPERS_H_
end_define

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/capsicum.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<nl_types.h>
end_include

begin_include
include|#
directive|include
file|<termios.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_define
define|#
directive|define
name|CAPH_IGNORE_EBADF
value|0x0001
end_define

begin_define
define|#
directive|define
name|CAPH_READ
value|0x0002
end_define

begin_define
define|#
directive|define
name|CAPH_WRITE
value|0x0004
end_define

begin_function
specifier|static
name|__inline
name|int
name|caph_limit_stream
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|cap_rights_t
name|rights
decl_stmt|;
name|unsigned
name|long
name|cmds
index|[]
init|=
block|{
name|TIOCGETA
block|,
name|TIOCGWINSZ
block|}
decl_stmt|;
name|cap_rights_init
argument_list|(
operator|&
name|rights
argument_list|,
name|CAP_FCNTL
argument_list|,
name|CAP_FSTAT
argument_list|,
name|CAP_IOCTL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|CAPH_READ
operator|)
operator|!=
literal|0
condition|)
name|cap_rights_set
argument_list|(
operator|&
name|rights
argument_list|,
name|CAP_READ
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|flags
operator|&
name|CAPH_WRITE
operator|)
operator|!=
literal|0
condition|)
name|cap_rights_set
argument_list|(
operator|&
name|rights
argument_list|,
name|CAP_WRITE
argument_list|)
expr_stmt|;
if|if
condition|(
name|cap_rights_limit
argument_list|(
name|fd
argument_list|,
operator|&
name|rights
argument_list|)
operator|<
literal|0
operator|&&
name|errno
operator|!=
name|ENOSYS
condition|)
block|{
if|if
condition|(
name|errno
operator|==
name|EBADF
operator|&&
operator|(
name|flags
operator|&
name|CAPH_IGNORE_EBADF
operator|)
operator|!=
literal|0
condition|)
return|return
operator|(
literal|0
operator|)
return|;
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
if|if
condition|(
name|cap_ioctls_limit
argument_list|(
name|fd
argument_list|,
name|cmds
argument_list|,
name|nitems
argument_list|(
name|cmds
argument_list|)
argument_list|)
operator|<
literal|0
operator|&&
name|errno
operator|!=
name|ENOSYS
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
if|if
condition|(
name|cap_fcntls_limit
argument_list|(
name|fd
argument_list|,
name|CAP_FCNTL_GETFL
argument_list|)
operator|<
literal|0
operator|&&
name|errno
operator|!=
name|ENOSYS
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|caph_limit_stdin
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|caph_limit_stream
argument_list|(
name|STDIN_FILENO
argument_list|,
name|CAPH_READ
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|caph_limit_stderr
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|caph_limit_stream
argument_list|(
name|STDERR_FILENO
argument_list|,
name|CAPH_WRITE
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|caph_limit_stdout
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|caph_limit_stream
argument_list|(
name|STDOUT_FILENO
argument_list|,
name|CAPH_WRITE
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|caph_limit_stdio
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
name|caph_limit_stdin
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|caph_limit_stdout
argument_list|()
operator|==
operator|-
literal|1
operator|||
name|caph_limit_stdout
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|(
operator|-
literal|1
operator|)
return|;
block|}
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|caph_cache_tzdata
parameter_list|(
name|void
parameter_list|)
block|{
name|tzset
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|caph_cache_catpages
parameter_list|(
name|void
parameter_list|)
block|{
operator|(
name|void
operator|)
name|catopen
argument_list|(
literal|"libc"
argument_list|,
name|NL_CAT_LOCALE
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAPSICUM_HELPERS_H_ */
end_comment

end_unit

