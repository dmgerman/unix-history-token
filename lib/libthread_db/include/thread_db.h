begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 David Xu<davidxu@freebsd.org>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_THREAD_DB_H_
end_ifndef

begin_define
define|#
directive|define
name|_THREAD_DB_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_OK
block|,
name|TD_ERR
block|,
name|TD_NOTHR
block|,
name|TD_NOSV
block|,
name|TD_NOLWP
block|,
name|TD_BADPH
block|,
name|TD_BADTH
block|,
name|TD_BADSH
block|,
name|TD_BADTA
block|,
name|TD_BADKEY
block|,
name|TD_NOMSG
block|,
name|TD_NOFPREGS
block|,
name|TD_NOLIBTHREAD
block|,
name|TD_NOEVENT
block|,
name|TD_NOCAPAB
block|,
name|TD_DBERR
block|,
name|TD_NOAPLIC
block|,
name|TD_NOTSD
block|,
name|TD_MALLOC
block|,
name|TD_PARTIALREG
block|,
name|TD_NOXREGS
block|}
name|td_err_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_THR_ANY_STATE
block|,
name|TD_THR_UNKNOWN
block|,
name|TD_THR_STOPPED
block|,
name|TD_THR_RUN
block|,
name|TD_THR_ACTIVE
block|,
name|TD_THR_ZOMBIE
block|,
name|TD_THR_SLEEP
block|,
name|TD_THR_STOPPED_ASLEEP
block|}
name|td_thr_state_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_THR_ANY_TYPE
block|,
name|TD_THR_USER
block|,
name|TD_THR_SYSTEM
block|}
name|td_thr_type_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|thread_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pthread_key_t
name|thread_key_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|td_thragent
name|td_thragent_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|td_thrhandle
block|{
name|td_thragent_t
modifier|*
name|th_ta_p
decl_stmt|;
name|thread_t
name|th_unique
decl_stmt|;
name|int
name|th_ta_data
decl_stmt|;
block|}
name|td_thrhandle_t
typedef|;
end_typedef

begin_comment
comment|/* Flags for `td_ta_thr_iter'.  */
end_comment

begin_define
define|#
directive|define
name|TD_THR_ANY_USER_FLAGS
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|TD_THR_LOWEST_PRIORITY
value|0
end_define

begin_define
define|#
directive|define
name|TD_SIGNO_MASK
value|NULL
end_define

begin_typedef
typedef|typedef
name|uint32_t
name|td_thr_events_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_ALL_EVENTS
block|,
name|TD_EVENT_NONE
init|=
name|TD_ALL_EVENTS
block|,
name|TD_CREATE
block|,
name|TD_DEATH
block|,
name|TD_REAP
block|,
name|TD_READY
block|,
name|TD_SLEEP
block|,
name|TD_SWITCHTO
block|,
name|TD_SWITCHFROM
block|,
name|TD_LOCK_TRY
block|,
name|TD_CATCHSIG
block|,
name|TD_IDLE
block|,
name|TD_PREEMPT
block|,
name|TD_PRI_INHERIT
block|,
name|TD_CONCURRENCY
block|,
name|TD_TIMEOUT
block|,
name|TD_MIN_EVENT_NUM
init|=
name|TD_READY
block|,
name|TD_MAX_EVENT_NUM
init|=
name|TD_TIMEOUT
block|,
name|TD_EVENTS_ENABLE
init|=
literal|31
block|}
name|td_event_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|NOTIFY_BPT
block|,
name|NOTIFY_AUTOBPT
block|,
name|NOTIFY_SYSCALL
block|}
name|td_notify_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|td_notify
block|{
name|td_notify_e
name|type
decl_stmt|;
union|union
block|{
name|psaddr_t
name|bptaddr
decl_stmt|;
name|int
name|syscallno
decl_stmt|;
block|}
name|u
union|;
block|}
name|td_notify_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|td_event_msg
block|{
name|td_event_e
name|event
decl_stmt|;
specifier|const
name|td_thrhandle_t
modifier|*
name|th_p
decl_stmt|;
union|union
block|{
if|#
directive|if
literal|0
block|td_synchandle_t *sh;
endif|#
directive|endif
name|uintptr_t
name|data
decl_stmt|;
block|}
name|msg
union|;
block|}
name|td_event_msg_t
typedef|;
end_typedef

begin_comment
comment|/* Structure containing event data available in each thread structure.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|td_thr_events_t
name|eventmask
decl_stmt|;
comment|/* Mask of enabled events.  */
name|td_event_e
name|eventnum
decl_stmt|;
comment|/* Number of last event.  */
name|void
modifier|*
name|eventdata
decl_stmt|;
comment|/* Data associated with event.  */
block|}
name|td_eventbuf_t
typedef|;
end_typedef

begin_comment
comment|/* Gathered statistics about the process.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|td_ta_stats
block|{
name|int
name|nthreads
decl_stmt|;
comment|/* Total number of threads in use.  */
name|int
name|r_concurrency
decl_stmt|;
comment|/* Concurrency level requested by user.  */
name|int
name|nrunnable_num
decl_stmt|;
comment|/* Average runnable threads, numerator.  */
name|int
name|nrunnable_den
decl_stmt|;
comment|/* Average runnable threads, denominator.  */
name|int
name|a_concurrency_num
decl_stmt|;
comment|/* Achieved concurrency level, numerator.  */
name|int
name|a_concurrency_den
decl_stmt|;
comment|/* Achieved concurrency level, denominator.  */
name|int
name|nlwps_num
decl_stmt|;
comment|/* Average number of processes in use, 				   numerator.  */
name|int
name|nlwps_den
decl_stmt|;
comment|/* Average number of processes in use, 				   denominator.  */
name|int
name|nidle_num
decl_stmt|;
comment|/* Average number of idling processes, 				   numerator.  */
name|int
name|nidle_den
decl_stmt|;
comment|/* Average number of idling processes, 				   denominator.  */
block|}
name|td_ta_stats_t
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|td_event_emptyset
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|)
block|{
operator|*
name|setp
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|td_event_fillset
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|)
block|{
operator|*
name|setp
operator|=
literal|0xFFFFFFFF
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|td_event_addset
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
operator|*
name|setp
operator||=
operator|(
literal|1
operator|<<
operator|(
name|n
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|td_event_delset
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
operator|*
name|setp
operator|&=
operator|~
operator|(
literal|1
operator|<<
operator|(
name|n
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|td_eventismember
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|,
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
operator|*
name|setp
operator|&
operator|(
literal|1
operator|<<
operator|(
name|n
operator|-
literal|1
operator|)
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|td_eventisempty
parameter_list|(
name|td_thr_events_t
modifier|*
name|setp
parameter_list|)
block|{
return|return
operator|(
operator|*
name|setp
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|int
name|td_thr_iter_f
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|td_key_iter_f
parameter_list|(
name|thread_key_t
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct_decl
struct_decl|struct
name|ps_prochandle
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
struct|struct
name|td_thrinfo
block|{
name|td_thragent_t
modifier|*
name|ti_ta_p
decl_stmt|;
name|unsigned
name|int
name|ti_user_flags
decl_stmt|;
name|thread_t
name|ti_tid
decl_stmt|;
name|char
modifier|*
name|ti_tls
decl_stmt|;
name|psaddr_t
name|ti_startfunc
decl_stmt|;
name|psaddr_t
name|ti_stkbase
decl_stmt|;
name|long
name|int
name|ti_stksize
decl_stmt|;
name|psaddr_t
name|ti_ro_area
decl_stmt|;
name|int
name|ti_ro_size
decl_stmt|;
name|td_thr_state_e
name|ti_state
decl_stmt|;
name|unsigned
name|char
name|ti_db_suspended
decl_stmt|;
name|td_thr_type_e
name|ti_type
decl_stmt|;
name|intptr_t
name|ti_pc
decl_stmt|;
name|intptr_t
name|ti_sp
decl_stmt|;
name|short
name|int
name|ti_flags
decl_stmt|;
name|int
name|ti_pri
decl_stmt|;
name|lwpid_t
name|ti_lid
decl_stmt|;
name|sigset_t
name|ti_sigmask
decl_stmt|;
name|unsigned
name|char
name|ti_traceme
decl_stmt|;
name|unsigned
name|char
name|ti_preemptflag
decl_stmt|;
name|unsigned
name|char
name|ti_pirecflag
decl_stmt|;
name|sigset_t
name|ti_pending
decl_stmt|;
name|td_thr_events_t
name|ti_events
decl_stmt|;
block|}
name|td_thrinfo_t
typedef|;
end_typedef

begin_function_decl
name|td_err_e
name|td_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_log
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_new
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
parameter_list|,
name|td_thragent_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_delete
parameter_list|(
name|td_thragent_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_get_nthreads
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_get_ph
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|struct
name|ps_prochandle
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_map_id2thr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|thread_t
parameter_list|,
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_map_lwp2thr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|lwpid_t
name|lwpid
parameter_list|,
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_thr_iter
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_iter_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|td_thr_state_e
parameter_list|,
name|int
parameter_list|,
name|sigset_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_tsd_iter
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_key_iter_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_event_addr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_event_e
parameter_list|,
name|td_notify_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_set_event
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_clear_event
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_event_getmsg
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_event_msg_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_setconcurrency
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_enable_stats
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_reset_stats
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_get_stats
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_ta_stats_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_validate
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_get_info
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thrinfo_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getfpregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|prfpregset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getgregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|prgregset_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getxregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getxregsize
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setfpregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|prfpregset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setgregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|prgregset_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setxregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_event_enable
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_set_event
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_clear_event
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_event_getmsg
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_event_msg_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setprio
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setsigpending
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|unsigned
name|char
parameter_list|,
specifier|const
name|sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_sigsetmask
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|sigset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_tsd
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|thread_key_t
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_dbsuspend
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_dbresume
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_get_ta
parameter_list|(
name|int
name|pid
parameter_list|,
name|td_thragent_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_activated
parameter_list|(
name|td_thragent_t
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_sstep
parameter_list|(
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

