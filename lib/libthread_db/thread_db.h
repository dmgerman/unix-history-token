begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 Marcel Moolenaar  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_THREAD_DB_H_
end_ifndef

begin_define
define|#
directive|define
name|_THREAD_DB_H_
end_define

begin_include
include|#
directive|include
file|<sys/procfs.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_ERR
init|=
operator|-
literal|1
block|,
comment|/* Unspecified error. */
name|TD_OK
init|=
literal|0
block|,
comment|/* No error. */
name|TD_BADKEY
block|,
name|TD_BADPH
block|,
name|TD_BADSH
block|,
name|TD_BADTA
block|,
name|TD_BADTH
block|,
name|TD_DBERR
block|,
name|TD_MALLOC
block|,
name|TD_NOAPLIC
block|,
name|TD_NOCAPAB
block|,
name|TD_NOEVENT
block|,
name|TD_NOFPREGS
block|,
name|TD_NOLIBTHREAD
block|,
name|TD_NOLWP
block|,
name|TD_NOMSG
block|,
name|TD_NOSV
block|,
name|TD_NOTHR
block|,
name|TD_NOTSD
block|,
name|TD_NOXREGS
block|,
name|TD_PARTIALREG
block|}
name|td_err_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|td_thragent
name|td_thragent_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|thread_t
typedef|;
end_typedef

begin_comment
comment|/* Must be an integral type. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|const
name|td_thragent_t
modifier|*
name|th_ta
decl_stmt|;
name|psaddr_t
name|th_thread
decl_stmt|;
name|thread_t
name|th_tid
decl_stmt|;
block|}
name|td_thrhandle_t
typedef|;
end_typedef

begin_comment
comment|/* Used non-opaguely. */
end_comment

begin_comment
comment|/*  * Events.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_EVENT_NONE
init|=
literal|0
block|,
name|TD_CREATE
init|=
literal|0x0001
block|,
name|TD_DEATH
init|=
literal|0x0002
block|,
name|TD_ALL_EVENTS
init|=
operator|~
literal|0
block|}
name|td_thr_events_e
typedef|;
end_typedef

begin_comment
comment|/* Compatibility with Linux. */
end_comment

begin_define
define|#
directive|define
name|td_event_e
value|td_thr_events_e
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|td_thr_events_e
name|event
decl_stmt|;
specifier|const
name|td_thrhandle_t
modifier|*
name|th_p
decl_stmt|;
name|uintptr_t
name|data
decl_stmt|;
block|}
name|td_event_msg_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|td_thr_events_t
typedef|;
end_typedef

begin_comment
comment|/* XXX can't be it... */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
union|union
block|{
name|psaddr_t
name|bptaddr
decl_stmt|;
block|}
name|u
union|;
block|}
name|td_notify_t
typedef|;
end_typedef

begin_function
specifier|static
name|__inline
name|void
name|td_event_addset
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|,
name|td_thr_events_e
name|e
parameter_list|)
block|{
operator|*
name|es
operator||=
name|e
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|td_event_delset
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|,
name|td_thr_events_e
name|e
parameter_list|)
block|{
operator|*
name|es
operator|&=
operator|~
name|e
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|td_event_emptyset
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|)
block|{
operator|*
name|es
operator|=
name|TD_EVENT_NONE
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|td_event_fillset
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|)
block|{
operator|*
name|es
operator|=
name|TD_ALL_EVENTS
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|td_eventisempty
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|*
name|es
operator|==
name|TD_EVENT_NONE
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|td_eventismember
parameter_list|(
name|td_thr_events_t
modifier|*
name|es
parameter_list|,
name|td_thr_events_e
name|e
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|*
name|es
operator|&
name|e
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Thread info.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_THR_UNKNOWN
init|=
operator|-
literal|1
block|,
name|TD_THR_ANY_STATE
init|=
literal|0
block|,
name|TD_THR_ACTIVE
block|,
name|TD_THR_RUN
block|,
name|TD_THR_SLEEP
block|,
name|TD_THR_STOPPED
block|,
name|TD_THR_STOPPED_ASLEEP
block|,
name|TD_THR_ZOMBIE
block|}
name|td_thr_state_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|TD_THR_SYSTEM
init|=
literal|1
block|,
name|TD_THR_USER
block|}
name|td_thr_type_e
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|thread_key_t
typedef|;
end_typedef

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|typedef struct td_thrinfo_t { 	unsigned int	ti_user_flags; 	psaddr_t	ti_pc; 	psaddr_t	ti_sp; 	short		ti_flags; 	uchar_t		ti_preemptflag; 	uchar_t		ti_pirecflag; };
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
struct|struct
block|{
specifier|const
name|td_thragent_t
modifier|*
name|ti_ta_p
decl_stmt|;
name|thread_t
name|ti_tid
decl_stmt|;
name|td_thr_state_e
name|ti_state
decl_stmt|;
name|td_thr_type_e
name|ti_type
decl_stmt|;
name|td_thr_events_t
name|ti_events
decl_stmt|;
name|int
name|ti_pri
decl_stmt|;
name|lwpid_t
name|ti_lid
decl_stmt|;
name|char
name|ti_db_suspended
decl_stmt|;
name|char
name|ti_traceme
decl_stmt|;
name|sigset_t
name|ti_sigmask
decl_stmt|;
name|sigset_t
name|ti_pending
decl_stmt|;
name|psaddr_t
name|ti_tls
decl_stmt|;
name|psaddr_t
name|ti_startfunc
decl_stmt|;
name|psaddr_t
name|ti_stkbase
decl_stmt|;
name|size_t
name|ti_stksize
decl_stmt|;
block|}
name|td_thrinfo_t
typedef|;
end_typedef

begin_comment
comment|/*  * Prototypes.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|td_key_iter_f
parameter_list|(
name|thread_key_t
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|td_thr_iter_f
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* Flags for `td_ta_thr_iter'. */
end_comment

begin_define
define|#
directive|define
name|TD_THR_ANY_USER_FLAGS
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|TD_THR_LOWEST_PRIORITY
value|-20
end_define

begin_define
define|#
directive|define
name|TD_SIGNO_MASK
value|NULL
end_define

begin_function_decl
name|__BEGIN_DECLS
name|td_err_e
name|td_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_clear_event
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_delete
parameter_list|(
name|td_thragent_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_event_addr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_events_e
parameter_list|,
name|td_notify_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_event_getmsg
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_event_msg_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_map_id2thr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|thread_t
parameter_list|,
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_map_lwp2thr
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|lwpid_t
parameter_list|,
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_new
parameter_list|(
name|struct
name|ps_prochandle
modifier|*
parameter_list|,
name|td_thragent_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_set_event
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_thr_iter
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_thr_iter_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|td_thr_state_e
parameter_list|,
name|int
parameter_list|,
name|sigset_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_ta_tsd_iter
parameter_list|(
specifier|const
name|td_thragent_t
modifier|*
parameter_list|,
name|td_key_iter_f
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_clear_event
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_dbresume
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_dbsuspend
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_event_enable
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_event_getmsg
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_event_msg_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_get_info
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thrinfo_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getfpregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|prfpregset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_getgregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|prgregset_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_set_event
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|td_thr_events_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setfpregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|prfpregset_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_setgregs
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
specifier|const
name|prgregset_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|td_err_e
name|td_thr_validate
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* FreeBSD specific extensions. */
end_comment

begin_function_decl
name|td_err_e
name|td_thr_sstep
parameter_list|(
specifier|const
name|td_thrhandle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _THREAD_DB_H_ */
end_comment

end_unit

