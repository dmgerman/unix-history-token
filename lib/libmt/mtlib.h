begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2013, 2014 Spectra Logic Corporation  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  *  * Authors: Ken Merry           (Spectra Logic Corporation)  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MTLIB_H
end_ifndef

begin_define
define|#
directive|define
name|_MTLIB_H
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|MT_TYPE_NONE
block|,
name|MT_TYPE_STRING
block|,
name|MT_TYPE_INT
block|,
name|MT_TYPE_UINT
block|,
name|MT_TYPE_NODE
block|}
name|mt_variable_type
typedef|;
end_typedef

begin_struct
struct|struct
name|mt_status_nv
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|mt_status_nv
argument_list|)
name|links
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mt_status_entry
block|{
name|char
modifier|*
name|entry_name
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
name|uint64_t
name|value_unsigned
decl_stmt|;
name|int64_t
name|value_signed
decl_stmt|;
name|char
modifier|*
name|fmt
decl_stmt|;
name|char
modifier|*
name|desc
decl_stmt|;
name|size_t
name|size
decl_stmt|;
name|mt_variable_type
name|var_type
decl_stmt|;
name|struct
name|mt_status_entry
modifier|*
name|parent
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|mt_status_nv
argument_list|)
name|nv_list
expr_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|mt_status_entry
argument_list|)
name|child_entries
expr_stmt|;
name|STAILQ_ENTRY
argument_list|(
argument|mt_status_entry
argument_list|)
name|links
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mt_status_data
block|{
name|int
name|level
decl_stmt|;
name|struct
name|sbuf
modifier|*
name|cur_sb
index|[
literal|32
index|]
decl_stmt|;
name|struct
name|mt_status_entry
modifier|*
name|cur_entry
index|[
literal|32
index|]
decl_stmt|;
name|int
name|error
decl_stmt|;
name|char
name|error_str
index|[
literal|128
index|]
decl_stmt|;
name|STAILQ_HEAD
argument_list|(
argument_list|,
argument|mt_status_entry
argument_list|)
name|entries
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|MT_PF_NONE
init|=
literal|0x00
block|,
name|MT_PF_VERBOSE
init|=
literal|0x01
block|,
name|MT_PF_FULL_PATH
init|=
literal|0x02
block|,
name|MT_PF_INCLUDE_ROOT
init|=
literal|0x04
block|}
name|mt_print_flags
typedef|;
end_typedef

begin_struct
struct|struct
name|mt_print_params
block|{
name|mt_print_flags
name|flags
decl_stmt|;
name|char
name|root_name
index|[
literal|64
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|__BEGIN_DECLS
name|void
name|mt_start_element
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_end_element
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_char_handler
parameter_list|(
name|void
modifier|*
name|user_data
parameter_list|,
specifier|const
name|XML_Char
modifier|*
name|str
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_status_tree_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|int
name|indent
parameter_list|,
name|void
function_decl|(
modifier|*
name|sbuf_func
function_decl|)
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_status_tree_print
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|int
name|indent
parameter_list|,
name|void
function_decl|(
modifier|*
name|print_func
function_decl|)
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mt_status_entry
modifier|*
name|mt_entry_find
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mt_status_entry
modifier|*
name|mt_status_entry_find
parameter_list|(
name|struct
name|mt_status_data
modifier|*
name|status_data
parameter_list|,
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_status_entry_free
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_status_free
parameter_list|(
name|struct
name|mt_status_data
modifier|*
name|status_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_entry_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|char
modifier|*
name|fmt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_param_parent_print
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|struct
name|mt_print_params
modifier|*
name|print_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_param_parent_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|struct
name|mt_print_params
modifier|*
name|print_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_param_entry_sbuf
parameter_list|(
name|struct
name|sbuf
modifier|*
name|sb
parameter_list|,
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mt_param_entry_print
parameter_list|(
name|struct
name|mt_status_entry
modifier|*
name|entry
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_protect_print
parameter_list|(
name|struct
name|mt_status_data
modifier|*
name|status_data
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_param_list
parameter_list|(
name|struct
name|mt_status_data
modifier|*
name|status_data
parameter_list|,
name|char
modifier|*
name|param_name
parameter_list|,
name|int
name|quiet
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|mt_density_name
parameter_list|(
name|int
name|density_num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_density_bp
parameter_list|(
name|int
name|density_num
parameter_list|,
name|int
name|bpi
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_density_num
parameter_list|(
specifier|const
name|char
modifier|*
name|density_name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_get_xml_str
parameter_list|(
name|int
name|mtfd
parameter_list|,
name|unsigned
name|long
name|cmd
parameter_list|,
name|char
modifier|*
modifier|*
name|xml_str
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mt_get_status
parameter_list|(
name|char
modifier|*
name|xml_str
parameter_list|,
name|struct
name|mt_status_data
modifier|*
name|status_data
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MTLIB_H */
end_comment

end_unit

