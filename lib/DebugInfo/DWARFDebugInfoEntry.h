begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugInfoEntry.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFDEBUGINFOENTRY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFDEBUGINFOENTRY_H
end_define

begin_include
include|#
directive|include
file|"DWARFAbbreviationDeclaration.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFDebugAranges
decl_stmt|;
name|class
name|DWARFCompileUnit
decl_stmt|;
name|class
name|DWARFContext
decl_stmt|;
name|class
name|DWARFFormValue
decl_stmt|;
comment|/// DWARFDebugInfoEntryMinimal - A DIE with only the minimum required data.
name|class
name|DWARFDebugInfoEntryMinimal
block|{
comment|/// Offset within the .debug_info of the start of this entry.
name|uint32_t
name|Offset
decl_stmt|;
comment|/// How many to subtract from "this" to get the parent.
comment|/// If zero this die has no parent.
name|uint32_t
name|ParentIdx
decl_stmt|;
comment|/// How many to add to "this" to get the sibling.
name|uint32_t
name|SiblingIdx
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclaration
modifier|*
name|AbbrevDecl
decl_stmt|;
name|public
label|:
name|DWARFDebugInfoEntryMinimal
argument_list|()
operator|:
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|ParentIdx
argument_list|(
literal|0
argument_list|)
operator|,
name|SiblingIdx
argument_list|(
literal|0
argument_list|)
operator|,
name|AbbrevDecl
argument_list|(
literal|0
argument_list|)
block|{}
name|void
name|dump
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|const DWARFCompileUnit *cu
argument_list|,
argument|unsigned recurseDepth
argument_list|,
argument|unsigned indent =
literal|0
argument_list|)
specifier|const
expr_stmt|;
name|void
name|dumpAttribute
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|uint32_t
operator|*
name|offset_ptr
argument_list|,
name|uint16_t
name|attr
argument_list|,
name|uint16_t
name|form
argument_list|,
name|unsigned
name|indent
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|extractFast
parameter_list|(
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|,
specifier|const
name|uint8_t
modifier|*
name|fixed_form_sizes
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
comment|/// Extract a debug info entry for a given compile unit from the
comment|/// .debug_info and .debug_abbrev data starting at the given offset.
name|bool
name|extract
parameter_list|(
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
name|uint32_t
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
operator|?
name|AbbrevDecl
operator|->
name|getTag
argument_list|()
operator|:
literal|0
return|;
block|}
name|bool
name|isNULL
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
operator|==
literal|0
return|;
block|}
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|uint32_t
name|getNumAttributes
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isNULL
argument_list|()
operator|?
name|AbbrevDecl
operator|->
name|getNumAttributes
argument_list|()
operator|:
literal|0
return|;
block|}
name|bool
name|hasChildren
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isNULL
argument_list|()
operator|&&
name|AbbrevDecl
operator|->
name|hasChildren
argument_list|()
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our parent will be some index behind "this".
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getParent
parameter_list|()
block|{
return|return
name|ParentIdx
operator|>
literal|0
condition|?
name|this
operator|-
name|ParentIdx
else|:
literal|0
return|;
block|}
specifier|const
name|DWARFDebugInfoEntryMinimal
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|ParentIdx
operator|>
literal|0
operator|?
name|this
operator|-
name|ParentIdx
operator|:
literal|0
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getSibling
parameter_list|()
block|{
return|return
name|SiblingIdx
operator|>
literal|0
condition|?
name|this
operator|+
name|SiblingIdx
else|:
literal|0
return|;
block|}
specifier|const
name|DWARFDebugInfoEntryMinimal
operator|*
name|getSibling
argument_list|()
specifier|const
block|{
return|return
name|SiblingIdx
operator|>
literal|0
operator|?
name|this
operator|+
name|SiblingIdx
operator|:
literal|0
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// we don't need to store our child pointer, if we have a child it will
comment|// be the next entry in the list...
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getFirstChild
parameter_list|()
block|{
return|return
name|hasChildren
argument_list|()
condition|?
name|this
operator|+
literal|1
else|:
literal|0
return|;
block|}
specifier|const
name|DWARFDebugInfoEntryMinimal
operator|*
name|getFirstChild
argument_list|()
specifier|const
block|{
return|return
name|hasChildren
argument_list|()
operator|?
name|this
operator|+
literal|1
operator|:
literal|0
return|;
block|}
name|void
name|setParent
parameter_list|(
name|DWARFDebugInfoEntryMinimal
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
condition|)
block|{
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our parent will be some index behind "this".
name|ParentIdx
operator|=
name|this
operator|-
name|parent
expr_stmt|;
block|}
else|else
name|ParentIdx
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|setSibling
parameter_list|(
name|DWARFDebugInfoEntryMinimal
modifier|*
name|sibling
parameter_list|)
block|{
if|if
condition|(
name|sibling
condition|)
block|{
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
name|SiblingIdx
operator|=
name|sibling
operator|-
name|this
expr_stmt|;
name|sibling
operator|->
name|setParent
argument_list|(
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|SiblingIdx
operator|=
literal|0
expr_stmt|;
block|}
specifier|const
name|DWARFAbbreviationDeclaration
operator|*
name|getAbbreviationDeclarationPtr
argument_list|()
specifier|const
block|{
return|return
name|AbbrevDecl
return|;
block|}
name|uint32_t
name|getAttributeValue
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint16_t
name|attr
argument_list|,
name|DWARFFormValue
operator|&
name|formValue
argument_list|,
name|uint32_t
operator|*
name|end_attr_offset_ptr
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|getAttributeValueAsString
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint16_t
name|attr
argument_list|,
specifier|const
name|char
operator|*
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsUnsigned
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint16_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getAttributeValueAsReference
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint16_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|int64_t
name|getAttributeValueAsSigned
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint16_t
name|attr
argument_list|,
name|int64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|void
name|buildAddressRangeTable
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFDebugAranges
operator|*
name|debug_aranges
argument_list|)
decl|const
decl_stmt|;
name|bool
name|addressRangeContainsAddress
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint64_t
name|address
argument_list|)
decl|const
decl_stmt|;
comment|// If a DIE represents a subprogram, returns its mangled name
comment|// (or short name, if mangled is missing). This name may be fetched
comment|// from specification or abstract origin for this subprogram.
comment|// Returns null if no name is found.
specifier|const
name|char
modifier|*
name|getSubprogramName
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

