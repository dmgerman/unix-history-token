begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugAranges.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFDEBUGARANGES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFDEBUGARANGES_H
end_define

begin_include
include|#
directive|include
file|"DWARFDebugArangeSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFContext
decl_stmt|;
name|class
name|DWARFDebugAranges
block|{
name|public
label|:
name|void
name|clear
parameter_list|()
block|{
name|Aranges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ParsedCUOffsets
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|generate
parameter_list|(
name|DWARFContext
modifier|*
name|CTX
parameter_list|)
function_decl|;
comment|// Use appendRange multiple times and then call sortAndMinimize.
name|void
name|appendRange
parameter_list|(
name|uint32_t
name|CUOffset
parameter_list|,
name|uint64_t
name|LowPC
parameter_list|,
name|uint64_t
name|HighPC
parameter_list|)
function_decl|;
name|uint32_t
name|findAddress
argument_list|(
name|uint64_t
name|Address
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|extract
parameter_list|(
name|DataExtractor
name|DebugArangesData
parameter_list|)
function_decl|;
name|void
name|sortAndMinimize
parameter_list|()
function_decl|;
struct|struct
name|Range
block|{
name|explicit
name|Range
argument_list|(
argument|uint64_t LowPC = -
literal|1ULL
argument_list|,
argument|uint64_t HighPC = -
literal|1ULL
argument_list|,
argument|uint32_t CUOffset = -
literal|1U
argument_list|)
block|:
name|LowPC
argument_list|(
name|LowPC
argument_list|)
operator|,
name|Length
argument_list|(
name|HighPC
operator|-
name|LowPC
argument_list|)
operator|,
name|CUOffset
argument_list|(
argument|CUOffset
argument_list|)
block|{}
name|void
name|setHighPC
argument_list|(
argument|uint64_t HighPC
argument_list|)
block|{
if|if
condition|(
name|HighPC
operator|==
operator|-
literal|1ULL
operator|||
name|HighPC
operator|<=
name|LowPC
condition|)
name|Length
operator|=
literal|0
expr_stmt|;
else|else
name|Length
operator|=
name|HighPC
operator|-
name|LowPC
expr_stmt|;
block|}
name|uint64_t
name|HighPC
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Length
condition|)
return|return
name|LowPC
operator|+
name|Length
return|;
return|return
operator|-
literal|1ULL
return|;
block|}
name|bool
name|containsAddress
argument_list|(
name|uint64_t
name|Address
argument_list|)
decl|const
block|{
return|return
name|LowPC
operator|<=
name|Address
operator|&&
name|Address
operator|<
name|HighPC
argument_list|()
return|;
block|}
name|bool
name|operator
decl|<
argument_list|(
specifier|const
name|Range
operator|&
name|other
argument_list|)
decl|const
block|{
return|return
name|LowPC
operator|<
name|other
operator|.
name|LowPC
return|;
block|}
decl|static
name|bool
name|SortedOverlapCheck
argument_list|(
specifier|const
name|Range
operator|&
name|Left
argument_list|,
specifier|const
name|Range
operator|&
name|Right
argument_list|)
block|{
if|if
condition|(
name|Left
operator|.
name|CUOffset
operator|!=
name|Right
operator|.
name|CUOffset
condition|)
return|return
name|false
return|;
return|return
name|Left
operator|.
name|HighPC
argument_list|()
operator|>=
name|Right
operator|.
name|LowPC
return|;
block|}
name|uint64_t
name|LowPC
struct|;
comment|// Start of address range.
name|uint32_t
name|Length
decl_stmt|;
comment|// End of address range (not including this address).
name|uint32_t
name|CUOffset
decl_stmt|;
comment|// Offset of the compile unit or die.
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Range
operator|>
name|RangeColl
expr_stmt|;
typedef|typedef
name|RangeColl
operator|::
name|const_iterator
name|RangeCollIterator
expr_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|uint32_t
operator|>
name|ParsedCUOffsetColl
expr_stmt|;
name|RangeColl
name|Aranges
decl_stmt|;
name|ParsedCUOffsetColl
name|ParsedCUOffsets
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

