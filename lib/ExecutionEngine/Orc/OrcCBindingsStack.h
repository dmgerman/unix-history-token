begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- OrcCBindingsStack.h - Orc JIT stack for C bindings ---*- C++ -*---===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_ORC_ORCCBINDINGSSTACK_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_ORC_ORCCBINDINGSSTACK_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/CompileUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/ExecutionUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IRCompileLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/OrcBindings.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|OrcCBindingsStack
decl_stmt|;
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|OrcCBindingsStack
argument_list|,
argument|LLVMOrcJITStackRef
argument_list|)
name|DEFINE_SIMPLE_CONVERSION_FUNCTIONS
argument_list|(
argument|TargetMachine
argument_list|,
argument|LLVMTargetMachineRef
argument_list|)
name|class
name|OrcCBindingsStack
block|{
name|public
label|:
typedef|typedef
name|orc
operator|::
name|JITCompileCallbackManager
name|CompileCallbackMgr
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|ObjectLinkingLayer
operator|<
operator|>
name|ObjLayerT
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|IRCompileLayer
operator|<
name|ObjLayerT
operator|>
name|CompileLayerT
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|CompileOnDemandLayer
operator|<
name|CompileLayerT
operator|,
name|CompileCallbackMgr
operator|>
name|CODLayerT
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|CompileCallbackMgr
operator|>
operator|(
operator|)
operator|>
name|CallbackManagerBuilder
expr_stmt|;
typedef|typedef
name|CODLayerT
operator|::
name|IndirectStubsManagerBuilderT
name|IndirectStubsManagerBuilder
expr_stmt|;
name|private
label|:
name|class
name|GenericHandle
block|{
name|public
label|:
name|virtual
operator|~
name|GenericHandle
argument_list|()
block|{}
name|virtual
name|orc
operator|::
name|JITSymbol
name|findSymbolIn
argument_list|(
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|removeModule
parameter_list|()
init|=
literal|0
function_decl|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|LayerT
operator|>
name|class
name|GenericHandleImpl
operator|:
name|public
name|GenericHandle
block|{
name|public
operator|:
name|GenericHandleImpl
argument_list|(
argument|LayerT&Layer
argument_list|,
argument|typename LayerT::ModuleSetHandleT Handle
argument_list|)
operator|:
name|Layer
argument_list|(
name|Layer
argument_list|)
block|,
name|Handle
argument_list|(
argument|std::move(Handle)
argument_list|)
block|{}
name|orc
operator|::
name|JITSymbol
name|findSymbolIn
argument_list|(
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
name|override
block|{
return|return
name|Layer
operator|.
name|findSymbolIn
argument_list|(
name|Handle
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
name|void
name|removeModule
argument_list|()
name|override
block|{
return|return
name|Layer
operator|.
name|removeModuleSet
argument_list|(
name|Handle
argument_list|)
return|;
block|}
name|private
operator|:
name|LayerT
operator|&
name|Layer
block|;
name|typename
name|LayerT
operator|::
name|ModuleSetHandleT
name|Handle
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
name|LayerT
operator|>
name|std
operator|::
name|unique_ptr
operator|<
name|GenericHandleImpl
operator|<
name|LayerT
operator|>>
name|createGenericHandle
argument_list|(
argument|LayerT&Layer
argument_list|,
argument|typename LayerT::ModuleSetHandleT Handle
argument_list|)
block|{
return|return
name|llvm
operator|::
name|make_unique
operator|<
name|GenericHandleImpl
operator|<
name|LayerT
operator|>>
operator|(
name|Layer
operator|,
name|std
operator|::
name|move
argument_list|(
name|Handle
argument_list|)
operator|)
return|;
block|}
name|public
label|:
comment|// We need a 'ModuleSetHandleT' to conform to the layer concept.
typedef|typedef
name|unsigned
name|ModuleSetHandleT
typedef|;
typedef|typedef
name|unsigned
name|ModuleHandleT
typedef|;
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|CompileCallbackMgr
operator|>
name|createCompileCallbackMgr
argument_list|(
argument|Triple T
argument_list|)
expr_stmt|;
specifier|static
name|IndirectStubsManagerBuilder
name|createIndirectStubsMgrBuilder
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
name|OrcCBindingsStack
argument_list|(
argument|TargetMachine&TM
argument_list|,
argument|std::unique_ptr<CompileCallbackMgr> CCMgr
argument_list|,
argument|IndirectStubsManagerBuilder IndirectStubsMgrBuilder
argument_list|)
block|:
name|DL
argument_list|(
name|TM
operator|.
name|createDataLayout
argument_list|()
argument_list|)
operator|,
name|CCMgr
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|CCMgr
argument_list|)
argument_list|)
operator|,
name|ObjectLayer
argument_list|()
operator|,
name|CompileLayer
argument_list|(
name|ObjectLayer
argument_list|,
name|orc
operator|::
name|SimpleCompiler
argument_list|(
name|TM
argument_list|)
argument_list|)
operator|,
name|CODLayer
argument_list|(
name|CompileLayer
argument_list|,
index|[]
operator|(
name|Function
operator|&
name|F
operator|)
block|{
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
name|S
block|;
name|S
operator|.
name|insert
argument_list|(
operator|&
name|F
argument_list|)
block|;
return|return
name|S
return|;
block|}
operator|,
operator|*
name|this
operator|->
name|CCMgr
operator|,
name|std
operator|::
name|move
argument_list|(
name|IndirectStubsMgrBuilder
argument_list|)
operator|,
name|false
block|)
decl_stmt|,
name|IndirectStubsMgr
argument_list|(
name|IndirectStubsMgrBuilder
argument_list|()
argument_list|)
decl_stmt|,
name|CXXRuntimeOverrides
argument_list|(
index|[
name|this
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|S
operator|)
block|{
return|return
name|mangle
argument_list|(
name|S
argument_list|)
return|;
block|}
block|)
block|{}
end_decl_stmt

begin_expr_stmt
operator|~
name|OrcCBindingsStack
argument_list|()
block|{
comment|// Run any destructors registered with __cxa_atexit.
name|CXXRuntimeOverrides
operator|.
name|runDestructors
argument_list|()
block|;
comment|// Run any IR destructors.
for|for
control|(
name|auto
operator|&
name|DtorRunner
operator|:
name|IRStaticDestructorRunners
control|)
name|DtorRunner
operator|.
name|runViaLayer
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|mangle
argument_list|(
argument|StringRef Name
argument_list|)
block|{
name|std
operator|::
name|string
name|MangledName
block|;
block|{
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|Mangler
operator|::
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|,
name|DL
argument_list|)
block|;     }
return|return
name|MangledName
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|PtrTy
operator|>
specifier|static
name|PtrTy
name|fromTargetAddress
argument_list|(
argument|orc::TargetAddress Addr
argument_list|)
block|{
return|return
name|reinterpret_cast
operator|<
name|PtrTy
operator|>
operator|(
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Addr
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|orc
operator|::
name|TargetAddress
name|createLazyCompileCallback
argument_list|(
argument|LLVMOrcLazyCompileCallbackFn Callback
argument_list|,
argument|void *CallbackCtx
argument_list|)
block|{
name|auto
name|CCInfo
operator|=
name|CCMgr
operator|->
name|getCompileCallback
argument_list|()
block|;
name|CCInfo
operator|.
name|setCompileAction
argument_list|(
argument|[=]() -> orc::TargetAddress {         return Callback(wrap(this), CallbackCtx);       }
argument_list|)
block|;
return|return
name|CCInfo
operator|.
name|getAddress
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|createIndirectStub
argument_list|(
name|StringRef
name|StubName
argument_list|,
name|orc
operator|::
name|TargetAddress
name|Addr
argument_list|)
block|{
name|IndirectStubsMgr
operator|->
name|createStub
argument_list|(
name|StubName
argument_list|,
name|Addr
argument_list|,
name|JITSymbolFlags
operator|::
name|Exported
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|setIndirectStubPointer
argument_list|(
name|StringRef
name|Name
argument_list|,
name|orc
operator|::
name|TargetAddress
name|Addr
argument_list|)
block|{
name|IndirectStubsMgr
operator|->
name|updatePointer
argument_list|(
name|Name
argument_list|,
name|Addr
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|>
name|createResolver
argument_list|(
argument|LLVMOrcSymbolResolverFn ExternalResolver
argument_list|,
argument|void *ExternalResolverCtx
argument_list|)
block|{
name|auto
name|Resolver
operator|=
name|orc
operator|::
name|createLambdaResolver
argument_list|(
index|[
name|this
operator|,
name|ExternalResolver
operator|,
name|ExternalResolverCtx
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
comment|// Search order:
comment|// 1. JIT'd symbols.
comment|// 2. Runtime overrides.
comment|// 3. External resolver (if present).
if|if
condition|(
name|auto
name|Sym
init|=
name|CODLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Sym
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Sym
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|auto
name|Sym
init|=
name|CXXRuntimeOverrides
operator|.
name|searchOverrides
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|Sym
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|ExternalResolver
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|ExternalResolver
argument_list|(
name|Name
operator|.
name|c_str
argument_list|()
argument_list|,
name|ExternalResolverCtx
argument_list|)
argument_list|,
name|llvm
operator|::
name|JITSymbolFlags
operator|::
name|Exported
argument_list|)
return|;
end_if

begin_return
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
end_return

begin_expr_stmt
unit|},
index|[]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
end_expr_stmt

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_return
return|return
name|std
operator|::
name|shared_ptr
operator|<
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|LayerT
operator|>
name|ModuleHandleT
name|addIRModule
argument_list|(
argument|LayerT&Layer
argument_list|,
argument|Module *M
argument_list|,
argument|std::unique_ptr<RuntimeDyld::MemoryManager> MemMgr
argument_list|,
argument|LLVMOrcSymbolResolverFn ExternalResolver
argument_list|,
argument|void *ExternalResolverCtx
argument_list|)
block|{
comment|// Attach a data-layout if one isn't already present.
if|if
condition|(
name|M
operator|->
name|getDataLayout
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
name|M
operator|->
name|setDataLayout
argument_list|(
name|DL
argument_list|)
expr_stmt|;
comment|// Record the static constructors and destructors. We have to do this before
comment|// we hand over ownership of the module to the JIT.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|CtorNames
operator|,
name|DtorNames
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|auto
name|Ctor
range|:
name|orc
operator|::
name|getConstructors
argument_list|(
operator|*
name|M
argument_list|)
control|)
name|CtorNames
operator|.
name|push_back
argument_list|(
name|mangle
argument_list|(
name|Ctor
operator|.
name|Func
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_for
for|for
control|(
name|auto
name|Dtor
range|:
name|orc
operator|::
name|getDestructors
argument_list|(
operator|*
name|M
argument_list|)
control|)
name|DtorNames
operator|.
name|push_back
argument_list|(
name|mangle
argument_list|(
name|Dtor
operator|.
name|Func
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_comment
comment|// Create the resolver.
end_comment

begin_decl_stmt
name|auto
name|Resolver
init|=
name|createResolver
argument_list|(
name|ExternalResolver
argument_list|,
name|ExternalResolverCtx
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Add the module to the JIT.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Module
operator|*
operator|>
name|S
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|S
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|LH
init|=
name|Layer
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|S
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ModuleHandleT
name|H
init|=
name|createHandle
argument_list|(
name|Layer
argument_list|,
name|LH
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Run the static constructors, and save the static destructor runner for
end_comment

begin_comment
comment|// execution when the JIT is torn down.
end_comment

begin_expr_stmt
name|orc
operator|::
name|CtorDtorRunner
operator|<
name|OrcCBindingsStack
operator|>
name|CtorRunner
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|CtorNames
argument_list|)
argument_list|,
name|H
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|CtorRunner
operator|.
name|runViaLayer
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|IRStaticDestructorRunners
operator|.
name|emplace_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|DtorNames
argument_list|)
argument_list|,
name|H
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|H
return|;
end_return

begin_macro
unit|}    ModuleHandleT
name|addIRModuleEager
argument_list|(
argument|Module* M
argument_list|,
argument|LLVMOrcSymbolResolverFn ExternalResolver
argument_list|,
argument|void *ExternalResolverCtx
argument_list|)
end_macro

begin_block
block|{
return|return
name|addIRModule
argument_list|(
name|CompileLayer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|,
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|ExternalResolver
argument_list|)
argument_list|,
name|ExternalResolverCtx
argument_list|)
return|;
block|}
end_block

begin_function
name|ModuleHandleT
name|addIRModuleLazy
parameter_list|(
name|Module
modifier|*
name|M
parameter_list|,
name|LLVMOrcSymbolResolverFn
name|ExternalResolver
parameter_list|,
name|void
modifier|*
name|ExternalResolverCtx
parameter_list|)
block|{
return|return
name|addIRModule
argument_list|(
name|CODLayer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|,
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|ExternalResolver
argument_list|)
argument_list|,
name|ExternalResolverCtx
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|removeModule
parameter_list|(
name|ModuleHandleT
name|H
parameter_list|)
block|{
name|GenericHandles
index|[
name|H
index|]
operator|->
name|removeModule
argument_list|()
expr_stmt|;
name|GenericHandles
index|[
name|H
index|]
operator|=
name|nullptr
expr_stmt|;
name|FreeHandleIndexes
operator|.
name|push_back
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|orc
operator|::
name|JITSymbol
name|findSymbol
argument_list|(
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
block|{
if|if
condition|(
name|auto
name|Sym
init|=
name|IndirectStubsMgr
operator|->
name|findStub
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
condition|)
return|return
name|Sym
return|;
end_expr_stmt

begin_return
return|return
name|CODLayer
operator|.
name|findSymbol
argument_list|(
name|mangle
argument_list|(
name|Name
argument_list|)
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    orc
operator|::
name|JITSymbol
name|findSymbolIn
argument_list|(
argument|ModuleHandleT H
argument_list|,
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
block|{
return|return
name|GenericHandles
index|[
name|H
index|]
operator|->
name|findSymbolIn
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|LayerT
operator|>
name|unsigned
name|createHandle
argument_list|(
argument|LayerT&Layer
argument_list|,
argument|typename LayerT::ModuleSetHandleT Handle
argument_list|)
block|{
name|unsigned
name|NewHandle
block|;
if|if
condition|(
operator|!
name|FreeHandleIndexes
operator|.
name|empty
argument_list|()
condition|)
block|{
name|NewHandle
operator|=
name|FreeHandleIndexes
operator|.
name|back
argument_list|()
expr_stmt|;
name|FreeHandleIndexes
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|GenericHandles
index|[
name|NewHandle
index|]
operator|=
name|createGenericHandle
argument_list|(
name|Layer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Handle
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NewHandle
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|NewHandle
operator|=
name|GenericHandles
operator|.
name|size
argument_list|()
expr_stmt|;
name|GenericHandles
operator|.
name|push_back
argument_list|(
name|createGenericHandle
argument_list|(
name|Layer
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Handle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_else

begin_return
return|return
name|NewHandle
return|;
end_return

begin_expr_stmt
unit|}    DataLayout
name|DL
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|SectionMemoryManager
name|CCMgrMemMgr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|CompileCallbackMgr
operator|>
name|CCMgr
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ObjLayerT
name|ObjectLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompileLayerT
name|CompileLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CODLayerT
name|CODLayer
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|orc
operator|::
name|IndirectStubsManager
operator|>
name|IndirectStubsMgr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GenericHandle
operator|>>
name|GenericHandles
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
name|FreeHandleIndexes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|orc
operator|::
name|LocalCXXRuntimeOverrides
name|CXXRuntimeOverrides
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|orc
operator|::
name|CtorDtorRunner
operator|<
name|OrcCBindingsStack
operator|>>
name|IRStaticDestructorRunners
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_EXECUTIONENGINE_ORC_ORCCBINDINGSSTACK_H
end_comment

end_unit

