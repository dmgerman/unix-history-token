begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- RuntimeDyldMachOI386.h ---- MachO/I386 specific code. ---*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOI386_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOI386_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOI386
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOI386
operator|>
block|{
name|public
operator|:
typedef|typedef
name|uint32_t
name|TargetPtrT
typedef|;
name|RuntimeDyldMachOI386
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|0
return|;
block|}
name|unsigned
name|getStubAlignment
parameter_list|()
function|override
block|{
return|return
literal|1
return|;
block|}
name|relocation_iterator
name|processRelocationRef
parameter_list|(
name|unsigned
name|SectionID
parameter_list|,
name|relocation_iterator
name|RelI
parameter_list|,
specifier|const
name|ObjectFile
modifier|&
name|BaseObjT
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|ObjSectionToID
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
function|override
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|RelType
init|=
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|RelType
operator|==
name|MachO
operator|::
name|GENERIC_RELOC_SECTDIFF
operator|||
name|RelType
operator|==
name|MachO
operator|::
name|GENERIC_RELOC_LOCAL_SECTDIFF
condition|)
return|return
name|processSECTDIFFRelocation
argument_list|(
name|SectionID
argument_list|,
name|RelI
argument_list|,
name|Obj
argument_list|,
name|ObjSectionToID
argument_list|)
return|;
elseif|else
if|if
condition|(
name|RelType
operator|==
name|MachO
operator|::
name|GENERIC_RELOC_VANILLA
condition|)
return|return
name|processI386ScatteredVANILLA
argument_list|(
name|SectionID
argument_list|,
name|RelI
argument_list|,
name|Obj
argument_list|,
name|ObjSectionToID
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"Unhandled scattered relocation."
argument_list|)
expr_stmt|;
block|}
name|RelocationEntry
name|RE
argument_list|(
name|getRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|)
argument_list|)
decl_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|memcpyAddend
argument_list|(
name|RE
argument_list|)
expr_stmt|;
name|RelocationValueRef
name|Value
argument_list|(
name|getRelocationValueRef
argument_list|(
name|Obj
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|)
argument_list|)
decl_stmt|;
comment|// Addends for external, PC-rel relocations on i386 point back to the zero
comment|// offset. Calculate the final offset from the relocation target instead.
comment|// This allows us to use the same logic for both external and internal
comment|// relocations in resolveI386RelocationRef.
comment|// bool IsExtern = Obj.getPlainRelocationExternal(RelInfo);
comment|// if (IsExtern&& RE.IsPCRel) {
comment|//   uint64_t RelocAddr = 0;
comment|//   RelI->getAddress(RelocAddr);
comment|//   Value.Addend += RelocAddr + 4;
comment|// }
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Offset
expr_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
return|return
operator|++
name|RelI
return|;
block|}
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
function|override
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
block|{
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|Value
operator|-=
name|FinalAddress
operator|+
literal|4
expr_stmt|;
comment|// see MachOX86_64::resolveRelocation.
block|}
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|GENERIC_RELOC_VANILLA
case|:
name|writeBytesUnaligned
argument_list|(
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|GENERIC_RELOC_SECTDIFF
case|:
case|case
name|MachO
operator|::
name|GENERIC_RELOC_LOCAL_SECTDIFF
case|:
block|{
name|uint64_t
name|SectionABase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|LoadAddress
decl_stmt|;
name|uint64_t
name|SectionBBase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionB
index|]
operator|.
name|LoadAddress
decl_stmt|;
name|assert
argument_list|(
operator|(
name|Value
operator|==
name|SectionABase
operator|||
name|Value
operator|==
name|SectionBBase
operator|)
operator|&&
literal|"Unexpected SECTDIFF relocation value."
argument_list|)
expr_stmt|;
name|Value
operator|=
name|SectionABase
operator|-
name|SectionBBase
operator|+
name|RE
operator|.
name|Addend
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Value
argument_list|,
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|GENERIC_RELOC_PB_LA_PTR
case|:
name|Error
argument_list|(
literal|"Relocation type not implemented yet!"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|finalizeSection
parameter_list|(
specifier|const
name|ObjectFile
modifier|&
name|Obj
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{
name|StringRef
name|Name
decl_stmt|;
name|Section
operator|.
name|getName
argument_list|(
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|Name
operator|==
literal|"__jump_table"
condition|)
name|populateJumpTable
argument_list|(
name|cast
operator|<
name|MachOObjectFile
operator|>
operator|(
name|Obj
operator|)
argument_list|,
name|Section
argument_list|,
name|SectionID
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Name
operator|==
literal|"__pointers"
condition|)
name|populateIndirectSymbolPointersSection
argument_list|(
name|cast
operator|<
name|MachOObjectFile
operator|>
operator|(
name|Obj
operator|)
argument_list|,
name|Section
argument_list|,
name|SectionID
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|relocation_iterator
name|processSECTDIFFRelocation
parameter_list|(
name|unsigned
name|SectionID
parameter_list|,
name|relocation_iterator
name|RelI
parameter_list|,
specifier|const
name|ObjectFile
modifier|&
name|BaseObjT
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|ObjSectionToID
parameter_list|)
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RE
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|SectionID
index|]
decl_stmt|;
name|uint32_t
name|RelocType
init|=
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|bool
name|IsPCRel
init|=
name|Obj
operator|.
name|getAnyRelocationPCRel
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|unsigned
name|Size
init|=
name|Obj
operator|.
name|getAnyRelocationLength
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|uint64_t
name|Offset
decl_stmt|;
name|RelI
operator|->
name|getOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|Offset
decl_stmt|;
name|unsigned
name|NumBytes
init|=
literal|1
operator|<<
name|Size
decl_stmt|;
name|uint64_t
name|Addend
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
name|NumBytes
argument_list|)
decl_stmt|;
operator|++
name|RelI
expr_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RE2
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|AddrA
init|=
name|Obj
operator|.
name|getScatteredRelocationValue
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|section_iterator
name|SAI
init|=
name|getSectionByAddress
argument_list|(
name|Obj
argument_list|,
name|AddrA
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|SAI
operator|!=
name|Obj
operator|.
name|section_end
argument_list|()
operator|&&
literal|"Can't find section for address A"
argument_list|)
expr_stmt|;
name|uint64_t
name|SectionABase
init|=
name|SAI
operator|->
name|getAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|SectionAOffset
init|=
name|AddrA
operator|-
name|SectionABase
decl_stmt|;
name|SectionRef
name|SectionA
init|=
operator|*
name|SAI
decl_stmt|;
name|bool
name|IsCode
init|=
name|SectionA
operator|.
name|isText
argument_list|()
decl_stmt|;
name|uint32_t
name|SectionAID
init|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
name|SectionA
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
decl_stmt|;
name|uint32_t
name|AddrB
init|=
name|Obj
operator|.
name|getScatteredRelocationValue
argument_list|(
name|RE2
argument_list|)
decl_stmt|;
name|section_iterator
name|SBI
init|=
name|getSectionByAddress
argument_list|(
name|Obj
argument_list|,
name|AddrB
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|SBI
operator|!=
name|Obj
operator|.
name|section_end
argument_list|()
operator|&&
literal|"Can't find section for address B"
argument_list|)
expr_stmt|;
name|uint64_t
name|SectionBBase
init|=
name|SBI
operator|->
name|getAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|SectionBOffset
init|=
name|AddrB
operator|-
name|SectionBBase
decl_stmt|;
name|SectionRef
name|SectionB
init|=
operator|*
name|SBI
decl_stmt|;
name|uint32_t
name|SectionBID
init|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
name|SectionB
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
decl_stmt|;
comment|// Compute the addend 'C' from the original expression 'A - B + C'.
name|Addend
operator|-=
name|AddrA
operator|-
name|AddrB
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Found SECTDIFF: AddrA: "
operator|<<
name|AddrA
operator|<<
literal|", AddrB: "
operator|<<
name|AddrB
operator|<<
literal|", Addend: "
operator|<<
name|Addend
operator|<<
literal|", SectionA ID: "
operator|<<
name|SectionAID
operator|<<
literal|", SectionAOffset: "
operator|<<
name|SectionAOffset
operator|<<
literal|", SectionB ID: "
operator|<<
name|SectionBID
operator|<<
literal|", SectionBOffset: "
operator|<<
name|SectionBOffset
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|RelocationEntry
name|R
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelocType
argument_list|,
name|Addend
argument_list|,
name|SectionAID
argument_list|,
name|SectionAOffset
argument_list|,
name|SectionBID
argument_list|,
name|SectionBOffset
argument_list|,
name|IsPCRel
argument_list|,
name|Size
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|R
argument_list|,
name|SectionAID
argument_list|)
expr_stmt|;
return|return
operator|++
name|RelI
return|;
block|}
name|relocation_iterator
name|processI386ScatteredVANILLA
argument_list|(
name|unsigned
name|SectionID
argument_list|,
name|relocation_iterator
name|RelI
argument_list|,
specifier|const
name|ObjectFile
operator|&
name|BaseObjT
argument_list|,
name|RuntimeDyldMachO
operator|::
name|ObjSectionToIDMap
operator|&
name|ObjSectionToID
argument_list|)
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RE
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|SectionID
index|]
decl_stmt|;
name|uint32_t
name|RelocType
init|=
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|bool
name|IsPCRel
init|=
name|Obj
operator|.
name|getAnyRelocationPCRel
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|unsigned
name|Size
init|=
name|Obj
operator|.
name|getAnyRelocationLength
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|uint64_t
name|Offset
decl_stmt|;
name|RelI
operator|->
name|getOffset
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|Offset
decl_stmt|;
name|unsigned
name|NumBytes
init|=
literal|1
operator|<<
name|Size
decl_stmt|;
name|int64_t
name|Addend
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
name|NumBytes
argument_list|)
decl_stmt|;
name|unsigned
name|SymbolBaseAddr
init|=
name|Obj
operator|.
name|getScatteredRelocationValue
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|section_iterator
name|TargetSI
init|=
name|getSectionByAddress
argument_list|(
name|Obj
argument_list|,
name|SymbolBaseAddr
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|TargetSI
operator|!=
name|Obj
operator|.
name|section_end
argument_list|()
operator|&&
literal|"Can't find section for symbol"
argument_list|)
expr_stmt|;
name|uint64_t
name|SectionBaseAddr
init|=
name|TargetSI
operator|->
name|getAddress
argument_list|()
decl_stmt|;
name|SectionRef
name|TargetSection
init|=
operator|*
name|TargetSI
decl_stmt|;
name|bool
name|IsCode
init|=
name|TargetSection
operator|.
name|isText
argument_list|()
decl_stmt|;
name|uint32_t
name|TargetSectionID
init|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
name|TargetSection
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
decl_stmt|;
name|Addend
operator|-=
name|SectionBaseAddr
expr_stmt|;
name|RelocationEntry
name|R
parameter_list|(
name|SectionID
parameter_list|,
name|Offset
parameter_list|,
name|RelocType
parameter_list|,
name|Addend
parameter_list|,
name|IsPCRel
parameter_list|,
name|Size
parameter_list|)
function_decl|;
name|addRelocationForSection
argument_list|(
name|R
argument_list|,
name|TargetSectionID
argument_list|)
expr_stmt|;
return|return
operator|++
name|RelI
return|;
block|}
comment|// Populate stubs in __jump_table section.
name|void
name|populateJumpTable
parameter_list|(
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|JTSection
parameter_list|,
name|unsigned
name|JTSectionID
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|is64Bit
argument_list|()
operator|&&
literal|"__jump_table section not supported in 64-bit MachO."
argument_list|)
expr_stmt|;
name|MachO
operator|::
name|dysymtab_command
name|DySymTabCmd
operator|=
name|Obj
operator|.
name|getDysymtabLoadCommand
argument_list|()
expr_stmt|;
name|MachO
operator|::
name|section
name|Sec32
operator|=
name|Obj
operator|.
name|getSection
argument_list|(
name|JTSection
operator|.
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|JTSectionSize
init|=
name|Sec32
operator|.
name|size
decl_stmt|;
name|unsigned
name|FirstIndirectSymbol
init|=
name|Sec32
operator|.
name|reserved1
decl_stmt|;
name|unsigned
name|JTEntrySize
init|=
name|Sec32
operator|.
name|reserved2
decl_stmt|;
name|unsigned
name|NumJTEntries
init|=
name|JTSectionSize
operator|/
name|JTEntrySize
decl_stmt|;
name|uint8_t
modifier|*
name|JTSectionAddr
init|=
name|getSectionAddress
argument_list|(
name|JTSectionID
argument_list|)
decl_stmt|;
name|unsigned
name|JTEntryOffset
init|=
literal|0
decl_stmt|;
name|assert
argument_list|(
operator|(
name|JTSectionSize
operator|%
name|JTEntrySize
operator|)
operator|==
literal|0
operator|&&
literal|"Jump-table section does not contain a whole number of stubs?"
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumJTEntries
condition|;
operator|++
name|i
control|)
block|{
name|unsigned
name|SymbolIndex
init|=
name|Obj
operator|.
name|getIndirectSymbolTableEntry
argument_list|(
name|DySymTabCmd
argument_list|,
name|FirstIndirectSymbol
operator|+
name|i
argument_list|)
decl_stmt|;
name|symbol_iterator
name|SI
init|=
name|Obj
operator|.
name|getSymbolByIndex
argument_list|(
name|SymbolIndex
argument_list|)
decl_stmt|;
name|StringRef
name|IndirectSymbolName
decl_stmt|;
name|SI
operator|->
name|getName
argument_list|(
name|IndirectSymbolName
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|JTEntryAddr
init|=
name|JTSectionAddr
operator|+
name|JTEntryOffset
decl_stmt|;
name|createStubFunction
argument_list|(
name|JTEntryAddr
argument_list|)
expr_stmt|;
name|RelocationEntry
name|RE
argument_list|(
name|JTSectionID
argument_list|,
name|JTEntryOffset
operator|+
literal|1
argument_list|,
name|MachO
operator|::
name|GENERIC_RELOC_VANILLA
argument_list|,
literal|0
argument_list|,
name|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|IndirectSymbolName
argument_list|)
expr_stmt|;
name|JTEntryOffset
operator|+=
name|JTEntrySize
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_undef
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

