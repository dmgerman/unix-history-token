begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldMachOAArch64.h -- MachO/AArch64 specific code. -*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOAARCH64_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOAARCH64_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOAArch64
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOAArch64
operator|>
block|{
name|public
operator|:
typedef|typedef
name|uint64_t
name|TargetPtrT
typedef|;
name|RuntimeDyldMachOAArch64
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|unsigned
name|getStubAlignment
parameter_list|()
function|override
block|{
return|return
literal|8
return|;
block|}
comment|/// Extract the addend encoded in the instruction / memory location.
name|int64_t
name|decodeAddend
argument_list|(
specifier|const
name|RelocationEntry
operator|&
name|RE
argument_list|)
decl|const
block|{
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|unsigned
name|NumBytes
init|=
literal|1
operator|<<
name|RE
operator|.
name|Size
decl_stmt|;
name|int64_t
name|Addend
init|=
literal|0
decl_stmt|;
comment|// Verify that the relocation has the correct size and alignment.
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unsupported relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
name|assert
argument_list|(
operator|(
name|NumBytes
operator|==
literal|4
operator|||
name|NumBytes
operator|==
literal|8
operator|)
operator|&&
literal|"Invalid relocation size."
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
name|assert
argument_list|(
name|NumBytes
operator|==
literal|4
operator|&&
literal|"Invalid relocation size."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
operator|(
name|uintptr_t
operator|)
name|LocalAddress
operator|&
literal|0x3
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"Instruction address is not aligned to 4 bytes."
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unsupported relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
comment|// This could be an unaligned memory location.
if|if
condition|(
name|NumBytes
operator|==
literal|4
condition|)
name|Addend
operator|=
operator|*
name|reinterpret_cast
operator|<
name|support
operator|::
name|ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
else|else
name|Addend
operator|=
operator|*
name|reinterpret_cast
operator|<
name|support
operator|::
name|ulittle64_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
block|{
comment|// Verify that the relocation points to the expected branch instruction.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0xFC000000
operator|)
operator|==
literal|0x14000000
operator|&&
literal|"Expected branch instruction."
argument_list|)
expr_stmt|;
comment|// Get the 26 bit addend encoded in the branch instruction and sign-extend
comment|// to 64 bit. The lower 2 bits are always zeros and are therefore implicit
comment|// (<< 2).
name|Addend
operator|=
operator|(
operator|*
name|p
operator|&
literal|0x03FFFFFF
operator|)
operator|<<
literal|2
expr_stmt|;
name|Addend
operator|=
name|SignExtend64
argument_list|(
name|Addend
argument_list|,
literal|28
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
block|{
comment|// Verify that the relocation points to the expected adrp instruction.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0x9F000000
operator|)
operator|==
literal|0x90000000
operator|&&
literal|"Expected adrp instruction."
argument_list|)
expr_stmt|;
comment|// Get the 21 bit addend encoded in the adrp instruction and sign-extend
comment|// to 64 bit. The lower 12 bits (4096 byte page) are always zeros and are
comment|// therefore implicit (<< 12).
name|Addend
operator|=
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x60000000
operator|)
operator|>>
literal|29
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x01FFFFE0
operator|)
operator|>>
literal|3
operator|)
operator|<<
literal|12
expr_stmt|;
name|Addend
operator|=
name|SignExtend64
argument_list|(
name|Addend
argument_list|,
literal|33
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
block|{
comment|// Verify that the relocation points to one of the expected load / store
comment|// instructions.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
operator|(
name|void
operator|)
name|p
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
operator|&&
literal|"Only expected load / store instructions."
argument_list|)
expr_stmt|;
block|}
comment|// fall-through
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
block|{
comment|// Verify that the relocation points to one of the expected load / store
comment|// or add / sub instructions.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
operator|)
operator|||
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x11C00000
operator|)
operator|==
literal|0x11000000
operator|)
operator|)
operator|&&
literal|"Expected load / store  or add/sub instruction."
argument_list|)
expr_stmt|;
comment|// Get the 12 bit addend encoded in the instruction.
name|Addend
operator|=
operator|(
operator|*
name|p
operator|&
literal|0x003FFC00
operator|)
operator|>>
literal|10
expr_stmt|;
comment|// Check which instruction we are decoding to obtain the implicit shift
comment|// factor of the instruction.
name|int
name|ImplicitShift
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
condition|)
block|{
comment|//<< load / store
comment|// For load / store instructions the size is encoded in bits 31:30.
name|ImplicitShift
operator|=
operator|(
operator|(
operator|*
name|p
operator|>>
literal|30
operator|)
operator|&
literal|0x3
operator|)
expr_stmt|;
if|if
condition|(
name|ImplicitShift
operator|==
literal|0
condition|)
block|{
comment|// Check if this a vector op to get the correct shift value.
if|if
condition|(
operator|(
operator|*
name|p
operator|&
literal|0x04800000
operator|)
operator|==
literal|0x04800000
condition|)
name|ImplicitShift
operator|=
literal|4
expr_stmt|;
block|}
block|}
comment|// Compensate for implicit shift.
name|Addend
operator|<<=
name|ImplicitShift
expr_stmt|;
break|break;
block|}
block|}
return|return
name|Addend
return|;
block|}
comment|/// Extract the addend encoded in the instruction.
name|void
name|encodeAddend
argument_list|(
name|uint8_t
operator|*
name|LocalAddress
argument_list|,
name|unsigned
name|NumBytes
argument_list|,
name|MachO
operator|::
name|RelocationInfoType
name|RelType
argument_list|,
name|int64_t
name|Addend
argument_list|)
decl|const
block|{
comment|// Verify that the relocation has the correct alignment.
switch|switch
condition|(
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unsupported relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
name|assert
argument_list|(
operator|(
name|NumBytes
operator|==
literal|4
operator|||
name|NumBytes
operator|==
literal|8
operator|)
operator|&&
literal|"Invalid relocation size."
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
name|assert
argument_list|(
name|NumBytes
operator|==
literal|4
operator|&&
literal|"Invalid relocation size."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
operator|(
name|uintptr_t
operator|)
name|LocalAddress
operator|&
literal|0x3
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"Instruction address is not aligned to 4 bytes."
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unsupported relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
comment|// This could be an unaligned memory location.
if|if
condition|(
name|NumBytes
operator|==
literal|4
condition|)
operator|*
name|reinterpret_cast
operator|<
name|support
operator|::
name|ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
operator|=
name|Addend
expr_stmt|;
else|else
operator|*
name|reinterpret_cast
operator|<
name|support
operator|::
name|ulittle64_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
operator|=
name|Addend
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
block|{
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
comment|// Verify that the relocation points to the expected branch instruction.
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0xFC000000
operator|)
operator|==
literal|0x14000000
operator|&&
literal|"Expected branch instruction."
argument_list|)
expr_stmt|;
comment|// Verify addend value.
name|assert
argument_list|(
operator|(
name|Addend
operator|&
literal|0x3
operator|)
operator|==
literal|0
operator|&&
literal|"Branch target is not aligned"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isInt
operator|<
literal|28
operator|>
operator|(
name|Addend
operator|)
operator|&&
literal|"Branch target is out of range."
argument_list|)
expr_stmt|;
comment|// Encode the addend as 26 bit immediate in the branch instruction.
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0xFC000000
operator|)
operator||
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|Addend
operator|>>
literal|2
argument_list|)
operator|&
literal|0x03FFFFFF
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
block|{
comment|// Verify that the relocation points to the expected adrp instruction.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0x9F000000
operator|)
operator|==
literal|0x90000000
operator|&&
literal|"Expected adrp instruction."
argument_list|)
expr_stmt|;
comment|// Check that the addend fits into 21 bits (+ 12 lower bits).
name|assert
argument_list|(
operator|(
name|Addend
operator|&
literal|0xFFF
operator|)
operator|==
literal|0
operator|&&
literal|"ADRP target is not page aligned."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isInt
operator|<
literal|33
operator|>
operator|(
name|Addend
operator|)
operator|&&
literal|"Invalid page reloc value."
argument_list|)
expr_stmt|;
comment|// Encode the addend into the instruction.
name|uint32_t
name|ImmLoValue
init|=
operator|(
operator|(
name|uint64_t
operator|)
name|Addend
operator|<<
literal|17
operator|)
operator|&
literal|0x60000000
decl_stmt|;
name|uint32_t
name|ImmHiValue
init|=
operator|(
operator|(
name|uint64_t
operator|)
name|Addend
operator|>>
literal|9
operator|)
operator|&
literal|0x00FFFFE0
decl_stmt|;
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0x9F00001F
operator|)
operator||
name|ImmHiValue
operator||
name|ImmLoValue
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
block|{
comment|// Verify that the relocation points to one of the expected load / store
comment|// instructions.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
operator|&&
literal|"Only expected load / store instructions."
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|p
expr_stmt|;
block|}
comment|// fall-through
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
block|{
comment|// Verify that the relocation points to one of the expected load / store
comment|// or add / sub instructions.
name|auto
operator|*
name|p
operator|=
name|reinterpret_cast
operator|<
name|support
operator|::
name|aligned_ulittle32_t
operator|*
operator|>
operator|(
name|LocalAddress
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
operator|)
operator|||
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x11C00000
operator|)
operator|==
literal|0x11000000
operator|)
operator|)
operator|&&
literal|"Expected load / store  or add/sub instruction."
argument_list|)
expr_stmt|;
comment|// Check which instruction we are decoding to obtain the implicit shift
comment|// factor of the instruction and verify alignment.
name|int
name|ImplicitShift
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
operator|*
name|p
operator|&
literal|0x3B000000
operator|)
operator|==
literal|0x39000000
condition|)
block|{
comment|//<< load / store
comment|// For load / store instructions the size is encoded in bits 31:30.
name|ImplicitShift
operator|=
operator|(
operator|(
operator|*
name|p
operator|>>
literal|30
operator|)
operator|&
literal|0x3
operator|)
expr_stmt|;
switch|switch
condition|(
name|ImplicitShift
condition|)
block|{
case|case
literal|0
case|:
comment|// Check if this a vector op to get the correct shift value.
if|if
condition|(
operator|(
operator|*
name|p
operator|&
literal|0x04800000
operator|)
operator|==
literal|0x04800000
condition|)
block|{
name|ImplicitShift
operator|=
literal|4
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|Addend
operator|&
literal|0xF
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"128-bit LDR/STR not 16-byte aligned."
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Addend
operator|&
literal|0x1
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"16-bit LDR/STR not 2-byte aligned."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Addend
operator|&
literal|0x3
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"32-bit LDR/STR not 4-byte aligned."
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Addend
operator|&
literal|0x7
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"64-bit LDR/STR not 8-byte aligned."
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Compensate for implicit shift.
name|Addend
operator|>>=
name|ImplicitShift
expr_stmt|;
name|assert
argument_list|(
name|isUInt
operator|<
literal|12
operator|>
operator|(
name|Addend
operator|)
operator|&&
literal|"Addend cannot be encoded."
argument_list|)
expr_stmt|;
comment|// Encode the addend into the instruction.
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0xFFC003FF
operator|)
operator||
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|Addend
operator|<<
literal|10
argument_list|)
operator|&
literal|0x003FFC00
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|relocation_iterator
name|processRelocationRef
parameter_list|(
name|unsigned
name|SectionID
parameter_list|,
name|relocation_iterator
name|RelI
parameter_list|,
specifier|const
name|ObjectFile
modifier|&
name|BaseObjT
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|ObjSectionToID
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
function|override
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
operator|&&
literal|""
argument_list|)
expr_stmt|;
comment|// ARM64 has an ARM64_RELOC_ADDEND relocation type that carries an explicit
comment|// addend for the following relocation. If found: (1) store the associated
comment|// addend, (2) consume the next relocation, and (3) use the stored addend to
comment|// override the addend.
name|int64_t
name|ExplicitAddend
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RelInfo
argument_list|)
operator|==
name|MachO
operator|::
name|ARM64_RELOC_ADDEND
condition|)
block|{
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|getAnyRelocationPCRel
argument_list|(
name|RelInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Obj
operator|.
name|getAnyRelocationLength
argument_list|(
name|RelInfo
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|int64_t
name|RawAddend
init|=
name|Obj
operator|.
name|getPlainRelocationSymbolNum
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
comment|// Sign-extend the 24-bit to 64-bit.
name|ExplicitAddend
operator|=
name|SignExtend64
argument_list|(
name|RawAddend
argument_list|,
literal|24
argument_list|)
expr_stmt|;
operator|++
name|RelI
expr_stmt|;
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RelocationEntry
name|RE
argument_list|(
name|getRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|)
argument_list|)
decl_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|decodeAddend
argument_list|(
name|RE
argument_list|)
expr_stmt|;
name|RelocationValueRef
name|Value
argument_list|(
name|getRelocationValueRef
argument_list|(
name|Obj
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|ExplicitAddend
operator|==
literal|0
operator|||
name|RE
operator|.
name|Addend
operator|==
literal|0
operator|)
operator|&&
literal|"Relocation has "
expr|\
literal|"ARM64_RELOC_ADDEND and embedded addend in the instruction."
argument_list|)
expr_stmt|;
if|if
condition|(
name|ExplicitAddend
condition|)
block|{
name|RE
operator|.
name|Addend
operator|=
name|ExplicitAddend
expr_stmt|;
name|Value
operator|.
name|Offset
operator|=
name|ExplicitAddend
expr_stmt|;
block|}
name|bool
name|IsExtern
init|=
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|IsExtern
operator|&&
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|RelI
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Offset
expr_stmt|;
if|if
condition|(
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
operator|||
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
condition|)
name|processGOTRelocation
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|,
name|Stubs
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
function|override
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|MachO
operator|::
name|RelocationInfoType
name|RelType
operator|=
name|static_cast
operator|<
name|MachO
operator|::
name|RelocationInfoType
operator|>
operator|(
name|RE
operator|.
name|RelType
operator|)
expr_stmt|;
switch|switch
condition|(
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
block|{
name|assert
argument_list|(
operator|!
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"PCRel and ARM64_RELOC_UNSIGNED not supported"
argument_list|)
expr_stmt|;
comment|// Mask in the target value a byte at a time (we don't have an alignment
comment|// guarantee for the target address, so this is safest).
if|if
condition|(
name|RE
operator|.
name|Size
operator|<
literal|2
condition|)
name|llvm_unreachable
argument_list|(
literal|"Invalid size for ARM64_RELOC_UNSIGNED"
argument_list|)
expr_stmt|;
name|encodeAddend
argument_list|(
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|,
name|RelType
argument_list|,
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
block|{
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"not PCRel and ARM64_RELOC_BRANCH26 not supported"
argument_list|)
expr_stmt|;
comment|// Check if branch is in range.
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|int64_t
name|PCRelVal
init|=
name|Value
operator|-
name|FinalAddress
operator|+
name|RE
operator|.
name|Addend
decl_stmt|;
name|encodeAddend
argument_list|(
name|LocalAddress
argument_list|,
comment|/*Size=*/
literal|4
argument_list|,
name|RelType
argument_list|,
name|PCRelVal
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
block|{
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"not PCRel and ARM64_RELOC_PAGE21 not supported"
argument_list|)
expr_stmt|;
comment|// Adjust for PC-relative relocation and offset.
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|int64_t
name|PCRelVal
init|=
operator|(
operator|(
name|Value
operator|+
name|RE
operator|.
name|Addend
operator|)
operator|&
operator|(
operator|-
literal|4096
operator|)
operator|)
operator|-
operator|(
name|FinalAddress
operator|&
operator|(
operator|-
literal|4096
operator|)
operator|)
decl_stmt|;
name|encodeAddend
argument_list|(
name|LocalAddress
argument_list|,
comment|/*Size=*/
literal|4
argument_list|,
name|RelType
argument_list|,
name|PCRelVal
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
block|{
name|assert
argument_list|(
operator|!
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"PCRel and ARM64_RELOC_PAGEOFF21 not supported"
argument_list|)
expr_stmt|;
comment|// Add the offset from the symbol.
name|Value
operator|+=
name|RE
operator|.
name|Addend
expr_stmt|;
comment|// Mask out the page address and only use the lower 12 bits.
name|Value
operator|&=
literal|0xFFF
expr_stmt|;
name|encodeAddend
argument_list|(
name|LocalAddress
argument_list|,
comment|/*Size=*/
literal|4
argument_list|,
name|RelType
argument_list|,
name|Value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_SUBTRACTOR
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_POINTER_TO_GOT
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_TLVP_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_TLVP_LOAD_PAGEOFF12
case|:
name|llvm_unreachable
argument_list|(
literal|"Relocation type not yet implemented!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_ADDEND
case|:
name|llvm_unreachable
argument_list|(
literal|"ARM64_RELOC_ADDEND should have been handeled by "
literal|"processRelocationRef!"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|finalizeSection
parameter_list|(
specifier|const
name|ObjectFile
modifier|&
name|Obj
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{}
name|private
label|:
name|void
name|processGOTRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|RelocationValueRef
modifier|&
name|Value
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
block|{
name|assert
argument_list|(
name|RE
operator|.
name|Size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|StubMap
operator|::
name|const_iterator
name|i
operator|=
name|Stubs
operator|.
name|find
argument_list|(
name|Value
argument_list|)
expr_stmt|;
name|int64_t
name|Offset
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|Stubs
operator|.
name|end
argument_list|()
condition|)
name|Offset
operator|=
name|static_cast
operator|<
name|int64_t
operator|>
operator|(
name|i
operator|->
name|second
operator|)
expr_stmt|;
else|else
block|{
comment|// FIXME: There must be a better way to do this then to check and fix the
comment|// alignment every time!!!
name|uintptr_t
name|BaseAddress
init|=
name|uintptr_t
argument_list|(
name|Section
operator|.
name|Address
argument_list|)
decl_stmt|;
name|uintptr_t
name|StubAlignment
init|=
name|getStubAlignment
argument_list|()
decl_stmt|;
name|uintptr_t
name|StubAddress
init|=
operator|(
name|BaseAddress
operator|+
name|Section
operator|.
name|StubOffset
operator|+
name|StubAlignment
operator|-
literal|1
operator|)
operator|&
operator|-
name|StubAlignment
decl_stmt|;
name|unsigned
name|StubOffset
init|=
name|StubAddress
operator|-
name|BaseAddress
decl_stmt|;
name|Stubs
index|[
name|Value
index|]
operator|=
name|StubOffset
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|StubAddress
operator|%
name|getStubAlignment
argument_list|()
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"GOT entry not aligned"
argument_list|)
expr_stmt|;
name|RelocationEntry
name|GOTRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|StubOffset
argument_list|,
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
argument_list|,
name|Value
operator|.
name|Offset
argument_list|,
comment|/*IsPCRel=*/
name|false
argument_list|,
comment|/*Size=*/
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
name|Section
operator|.
name|StubOffset
operator|=
name|StubOffset
operator|+
name|getMaxStubSize
argument_list|()
expr_stmt|;
name|Offset
operator|=
name|static_cast
operator|<
name|int64_t
operator|>
operator|(
name|StubOffset
operator|)
expr_stmt|;
block|}
name|RelocationEntry
name|TargetRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|RE
operator|.
name|Offset
argument_list|,
name|RE
operator|.
name|RelType
argument_list|,
name|Offset
argument_list|,
name|RE
operator|.
name|IsPCRel
argument_list|,
name|RE
operator|.
name|Size
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|TargetRE
argument_list|,
name|RE
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_undef
unit|}
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

