begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SomeTemplate
block|{}
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|DefinedInCommon
block|{
name|void
name|f
parameter_list|()
function_decl|;
struct|struct
name|Inner
block|{}
struct|;
name|friend
name|void
name|FoundByADL
parameter_list|(
name|DefinedInCommon
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|CommonTemplate
block|{   enum
name|E
block|{
name|a
operator|=
literal|1
block|,
name|b
operator|=
literal|2
block|,
name|c
operator|=
literal|3
block|}
block|; }
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|Std
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|WithFriend
block|{
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|WithFriend
operator|&
name|A
operator|,
specifier|const
name|WithFriend
operator|&
name|B
operator|)
block|{
return|return
name|false
return|;
block|}
expr|}
block|; }
name|namespace
name|Std
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|f
argument_list|()
block|{
specifier|extern
name|T
name|g
argument_list|()
block|;   }
block|}
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|TemplateInstantiationVisibility
block|{
typedef|typedef
name|int
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|Outer
block|{
name|template
operator|<
name|typename
name|U
operator|>
expr|struct
name|Inner
block|{
specifier|static
name|constexpr
name|int
name|f
argument_list|()
block|;
specifier|static
name|constexpr
name|int
name|g
argument_list|()
block|;   }
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|WithPartialSpecialization
block|{}
expr_stmt|;
typedef|typedef
name|WithPartialSpecialization
operator|<
name|int
operator|*
operator|>
name|WithPartialSpecializationUse
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|WithExplicitSpecialization
expr_stmt|;
typedef|typedef
name|WithExplicitSpecialization
operator|<
name|int
operator|>
name|WithExplicitSpecializationUse
expr_stmt|;
end_decl_stmt

end_unit

