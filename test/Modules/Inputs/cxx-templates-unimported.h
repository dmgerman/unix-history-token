begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_include
include|#
directive|include
file|"cxx-templates-common.h"
end_include

begin_decl_stmt
name|namespace
name|hidden_specializations
block|{
comment|// explicit specializations
name|template
operator|<
operator|>
name|void
name|fn
operator|<
name|int
operator|>
operator|(
operator|)
block|{}
name|template
operator|<
operator|>
expr|struct
name|cls
operator|<
name|int
operator|>
block|{
name|void
name|nested_fn
argument_list|()
block|;     struct
name|nested_cls
block|;
specifier|static
name|int
name|nested_var
block|;     enum
name|nested_enum
operator|:
name|int
block|;   }
expr_stmt|;
name|template
operator|<
operator|>
name|int
name|var
operator|<
name|int
operator|>
expr_stmt|;
comment|// partial specializations
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|cls
operator|<
name|T
operator|*
operator|>
block|{
name|void
name|nested_fn
argument_list|()
block|;     struct
name|nested_cls
block|;
specifier|static
name|int
name|nested_var
block|;     enum
name|nested_enum
operator|:
name|int
block|;   }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|var
operator|<
name|T
operator|*
operator|>
expr_stmt|;
comment|// member specializations
name|template
operator|<
operator|>
name|void
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_fn
argument_list|()
block|{}
name|template
operator|<
operator|>
expr|struct
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_cls
block|{}
expr_stmt|;
name|template
operator|<
operator|>
name|int
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_var
expr_stmt|;
name|template
operator|<
operator|>
expr|enum
name|class
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_enum
block|{
name|e
block|}
expr_stmt|;
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|U
operator|>
name|void
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_fn_t
argument_list|()
block|{}
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|U
operator|>
expr|struct
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_cls_t
block|{}
expr_stmt|;
name|template
operator|<
operator|>
name|template
operator|<
name|typename
name|U
operator|>
name|int
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_var_t
expr_stmt|;
comment|// specializations instantiated here are ok if their pattern is
specifier|inline
name|void
name|use_stuff
parameter_list|()
block|{
name|fn
operator|<
name|char
operator|>
operator|(
operator|)
expr_stmt|;
name|cls
operator|<
name|char
operator|>
operator|(
operator|)
expr_stmt|;
operator|(
name|void
operator|)
name|var
operator|<
name|char
operator|>
expr_stmt|;
name|cls
operator|<
name|char
operator|*
operator|>
operator|(
operator|)
expr_stmt|;
operator|(
name|void
operator|)
name|var
operator|<
name|char
operator|*
operator|>
expr_stmt|;
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_fn_t
operator|<
name|char
operator|>
operator|(
operator|)
expr_stmt|;
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_cls_t
operator|<
name|char
operator|>
operator|(
operator|)
expr_stmt|;
operator|(
name|void
operator|)
name|cls
operator|<
name|void
operator|>
operator|::
name|nested_var_t
operator|<
name|char
operator|>
expr_stmt|;
block|}
block|}
end_decl_stmt

end_unit

