begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_decl_stmt
unit|@
name|import
name|cxx_templates_common
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|(
argument|T t
argument_list|)
block|{
return|return
name|t
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|namespace
name|N
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|()
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|(
argument|T t
argument_list|)
block|{
return|return
name|t
return|;
block|}
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
operator|>
name|int
name|template_param_kinds_1
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
operator|,
name|int
operator|,
name|int
operator|...
operator|>
name|class
operator|>
name|int
name|template_param_kinds_2
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|U
operator|>
name|class
operator|>
name|int
name|template_param_kinds_3
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SomeTemplate
operator|<
name|T
operator|&
operator|>
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SomeTemplate
operator|<
name|T
operator|&
operator|>
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|SomeTemplate
operator|<
name|int
operator|&
operator|>
name|SomeTemplateIntRef
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|extern
name|DefinedInCommon
modifier|&
name|defined_in_common
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|int
operator|>
expr|struct
name|MergeTemplates
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MergeTemplates
operator|<
literal|0
operator|>
operator|*
name|merge_templates_b
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|template
operator|<
name|typename
name|U
operator|>
name|constexpr
name|int
name|Outer
operator|<
name|T
operator|>
operator|::
name|Inner
operator|<
name|U
operator|>
operator|::
name|g
argument_list|()
block|{
return|return
literal|2
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|static_assert
argument_list|(
name|Outer
operator|<
name|int
operator|>
operator|::
name|Inner
operator|<
name|int
operator|>
operator|::
name|g
argument_list|()
operator|==
literal|2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|@
name|import
name|cxx_templates_b_impl
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
operator|>
expr|struct
name|Identity
block|{
typedef|typedef
name|T
name|type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|UseDefinedInBImpl
argument_list|()
block|{
name|typename
name|Identity
operator|<
name|DefinedInBImpl
block|,
name|T
operator|>
operator|::
name|type
name|dependent
block|;
name|FoundByADL
argument_list|(
name|dependent
argument_list|)
block|;
name|typename
name|Identity
operator|<
name|DefinedInBImpl
block|,
name|T
operator|>
operator|::
name|type
operator|::
name|Inner
name|inner
block|;
name|dependent
operator|.
name|f
argument_list|()
block|; }
specifier|extern
name|DefinedInBImpl
operator|&
name|defined_in_b_impl
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RedeclareTemplateAsFriend
block|{
name|template
operator|<
name|typename
name|U
operator|>
name|friend
expr|struct
name|RedeclaredAsFriend
block|; }
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|use_some_template_b
parameter_list|()
block|{
name|SomeTemplate
operator|<
name|char
index|[
literal|1
index|]
operator|>
name|a
expr_stmt|;
name|SomeTemplate
operator|<
name|char
index|[
literal|2
index|]
operator|>
name|b
operator|,
name|c
expr_stmt|;
name|b
operator|=
name|c
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|auto
name|enum_b_from_b
init|=
name|CommonTemplate
operator|<
name|int
operator|>
operator|::
name|b
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
specifier|auto
name|enum_c_from_b
init|=
name|CommonTemplate
operator|<
name|int
operator|>
operator|::
name|c
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|int
operator|>
expr|struct
name|UseInt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|UseRedeclaredEnum
argument_list|(
name|UseInt
operator|<
name|T
argument_list|()
operator|+
name|CommonTemplate
operator|<
name|char
operator|>
operator|::
name|a
operator|>
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|constexpr
name|void
argument_list|(
operator|*
name|UseRedeclaredEnumB
argument_list|)
argument_list|(
name|UseInt
operator|<
literal|1
operator|>
argument_list|)
init|=
name|UseRedeclaredEnum
operator|<
name|int
operator|>
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
operator|>
expr|struct
name|MergeSpecializations
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MergeSpecializations
operator|<
name|T
operator|&
operator|>
block|{
typedef|typedef
name|int
name|partially_specialized_in_b
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|MergeSpecializations
operator|<
name|double
operator|>
block|{
typedef|typedef
name|int
name|explicitly_specialized_in_b
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
unit|@
name|import
name|cxx_templates_a
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|UseDefinedInBImplIndirectly
argument_list|(
argument|T&v
argument_list|)
block|{
name|PerformDelayedLookup
argument_list|(
name|v
argument_list|)
block|; }
name|void
name|TriggerInstantiation
argument_list|()
block|{
name|UseDefinedInBImpl
operator|<
name|void
operator|>
operator|(
operator|)
block|;
name|Std
operator|::
name|f
operator|<
name|int
operator|>
operator|(
operator|)
block|; }
end_expr_stmt

end_unit

