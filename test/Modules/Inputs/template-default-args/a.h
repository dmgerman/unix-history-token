begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_expr_stmt
name|BEGIN
name|template
operator|<
name|typename
name|T
operator|=
name|int
operator|>
expr|struct
name|A
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|B
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|C
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|D
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|E
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|=
name|int
operator|>
expr|struct
name|G
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|=
name|int
operator|>
expr|struct
name|H
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|J
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|=
name|int
operator|>
expr|struct
name|J
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|struct
name|K
range|:
name|J
operator|<
operator|>
block|{}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|=
name|void
operator|>
expr|struct
name|L
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|FriendL
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|friend
expr|struct
name|L
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|END
name|namespace
name|DeferredLookup
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|=
name|T
operator|>
name|using
name|X
operator|=
name|U
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|f
argument_list|()
block|{
operator|(
name|void
operator|)
name|X
operator|<
name|T
operator|>
operator|(
operator|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|int
name|n
operator|=
name|X
operator|<
name|T
operator|>
operator|(
operator|)
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|S
block|{
name|X
operator|<
name|T
operator|>
name|xt
block|; enum
name|E
operator|:
name|int
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|enum
name|S
operator|<
name|T
operator|>
operator|::
name|E
operator|:
name|int
block|{
name|a
operator|=
name|X
operator|<
name|T
operator|>
operator|(
operator|)
block|}
expr_stmt|;
name|namespace
name|Indirect
block|{
name|template
operator|<
name|typename
operator|,
name|bool
operator|=
name|true
operator|>
expr|struct
name|A
block|{}
expr_stmt|;
name|template
operator|<
name|typename
operator|>
expr|struct
name|B
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|using
name|C
operator|=
name|A
operator|<
name|T
operator|>
block|; }
expr_stmt|;
block|}
block|}
end_decl_stmt

end_unit

