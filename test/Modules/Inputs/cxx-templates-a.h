begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_decl_stmt
unit|@
name|import
name|cxx_templates_common
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|()
block|{
return|return
name|T
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|(
name|T
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|N
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|()
block|{
return|return
name|T
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|f
argument_list|(
name|T
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|N
operator|>
name|int
name|template_param_kinds_1
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
name|T
operator|,
name|int
operator|,
name|int
operator|>
name|class
operator|>
name|int
name|template_param_kinds_2
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|U
operator|,
name|T
operator|>
name|class
operator|>
name|int
name|template_param_kinds_3
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SomeTemplate
operator|<
name|T
operator|*
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|SomeTemplate
operator|<
name|T
operator|*
operator|>
block|{}
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|SomeTemplate
operator|<
name|int
operator|*
operator|>
name|SomeTemplateIntPtr
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|PerformDelayedLookup
argument_list|(
argument|T&t
argument_list|)
block|{
name|t
operator|.
name|f
argument_list|()
block|;
name|typename
name|T
operator|::
name|Inner
name|inner
block|;
name|FoundByADL
argument_list|(
name|t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|PerformDelayedLookupInDefaultArgument
argument_list|(
argument|T&t
argument_list|,
argument|int a = (FoundByADL(T()),
literal|0
argument|)
argument_list|)
block|{}
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|RedeclaredAsFriend
block|{}
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|use_some_template_a
parameter_list|()
block|{
name|SomeTemplate
operator|<
name|char
index|[
literal|2
index|]
operator|>
name|a
expr_stmt|;
name|SomeTemplate
operator|<
name|char
index|[
literal|1
index|]
operator|>
name|b
operator|,
name|c
expr_stmt|;
name|b
operator|=
name|c
expr_stmt|;
operator|(
name|void
operator|)
operator|&
name|WithImplicitSpecialMembers
operator|<
name|int
operator|>
operator|::
name|n
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|int
operator|>
expr|struct
name|MergeTemplates
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MergeTemplates
operator|<
literal|0
operator|>
operator|*
name|merge_templates_a
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|auto
name|enum_a_from_a
init|=
name|CommonTemplate
operator|<
name|int
operator|>
operator|::
name|a
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
specifier|auto
name|enum_c_from_a
init|=
name|CommonTemplate
operator|<
name|int
operator|>
operator|::
name|c
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|int
operator|>
expr|struct
name|UseInt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|UseRedeclaredEnum
argument_list|(
name|UseInt
operator|<
name|T
argument_list|()
operator|+
name|CommonTemplate
operator|<
name|char
operator|>
operator|::
name|a
operator|>
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|constexpr
name|void
argument_list|(
operator|*
name|UseRedeclaredEnumA
argument_list|)
argument_list|(
name|UseInt
operator|<
literal|1
operator|>
argument_list|)
init|=
name|UseRedeclaredEnum
operator|<
name|int
operator|>
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
operator|>
expr|struct
name|MergeSpecializations
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MergeSpecializations
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|int
name|partially_specialized_in_a
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|MergeSpecializations
operator|<
name|char
operator|>
block|{
typedef|typedef
name|int
name|explicitly_specialized_in_a
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|InstantiateWithFriend
argument_list|(
name|Std
operator|::
name|WithFriend
operator|<
name|int
operator|>
name|wfi
argument_list|)
block|{}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|WithPartialSpecialization
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|int
name|type
typedef|;
name|T
operator|&
name|f
argument_list|()
block|{
specifier|static
name|T
name|t
block|;
return|return
name|t
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|WithPartialSpecializationUse
operator|::
name|type
name|WithPartialSpecializationInstantiate
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|WithPartialSpecialization
operator|<
name|void
argument_list|(
name|int
argument_list|)
operator|>
operator|::
name|type
name|WithPartialSpecializationInstantiate2
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|WithExplicitSpecialization
operator|<
name|int
operator|>
block|{
name|int
name|n
block|;
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|&
name|inner_template
argument_list|()
block|{
return|return
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|template
operator|<
name|typename
name|U
operator|>
name|constexpr
name|int
name|Outer
operator|<
name|T
operator|>
operator|::
name|Inner
operator|<
name|U
operator|>
operator|::
name|f
argument_list|()
block|{
return|return
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|static_assert
argument_list|(
name|Outer
operator|<
name|int
operator|>
operator|::
name|Inner
operator|<
name|int
operator|>
operator|::
name|f
argument_list|()
operator|==
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MergeTemplateDefinitions
block|{
specifier|static
name|constexpr
name|int
name|f
argument_list|()
block|;
specifier|static
name|constexpr
name|int
name|g
argument_list|()
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|constexpr
name|int
name|MergeTemplateDefinitions
operator|<
name|T
operator|>
operator|::
name|f
argument_list|()
block|{
return|return
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|using
name|AliasTemplate
operator|=
name|T
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|PartiallyInstantiatePartialSpec
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|PartiallyInstantiatePartialSpec
operator|<
name|T
operator|*
operator|>
block|{
specifier|static
name|T
operator|*
name|foo
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|T
operator|*
name|bar
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|T
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|PartiallyInstantiatePartialSpec
operator|<
name|int
operator|*
operator|>
name|PartiallyInstantiatePartialSpecHelper
expr_stmt|;
end_typedef

begin_decl_stmt
name|void
name|InstantiateWithAliasTemplate
argument_list|(
name|WithAliasTemplate
operator|<
name|int
operator|>
operator|::
name|X
operator|<
name|char
operator|>
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|inline
name|int
name|InstantiateWithAnonymousDeclsA
argument_list|(
name|WithAnonymousDecls
operator|<
name|int
operator|>
name|x
argument_list|)
block|{
return|return
operator|(
name|x
operator|.
name|k
condition|?
name|x
operator|.
name|a
else|:
name|x
operator|.
name|b
operator|)
operator|+
operator|(
name|x
operator|.
name|k
condition|?
name|x
operator|.
name|s
operator|.
name|c
else|:
name|x
operator|.
name|s
operator|.
name|d
operator|)
operator|+
name|x
operator|.
name|e
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|inline
name|int
name|InstantiateWithAnonymousDeclsB2
argument_list|(
name|WithAnonymousDecls
operator|<
name|char
operator|>
name|x
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|=
name|int
operator|>
expr|struct
name|MergeAnonUnionMember
block|{
name|MergeAnonUnionMember
argument_list|()
block|{
operator|(
name|void
operator|)
name|values
operator|.
name|t1
block|; }
expr|union
block|{
name|int
name|t1
block|; }
name|values
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|inline
name|MergeAnonUnionMember
operator|<
operator|>
name|maum_a
argument_list|()
block|{
return|return
block|{}
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DontWalkPreviousDeclAfterMerging
block|{ struct
name|Inner
block|{
typedef|typedef
name|T
name|type
typedef|;
block|}
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|namespace
name|TestInjectedClassName
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|X
block|{
name|X
argument_list|()
block|; }
expr_stmt|;
typedef|typedef
name|X
operator|<
name|char
index|[
literal|1
index|]
operator|>
name|A
expr_stmt|;
block|}
end_decl_stmt

end_unit

