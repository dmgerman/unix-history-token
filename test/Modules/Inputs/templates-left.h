begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_decl_stmt
unit|@
name|import
name|templates_top
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Vector
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Vector
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|List
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|List
operator|<
name|bool
operator|>
block|{
name|public
operator|:
name|void
name|push_back
argument_list|(
name|int
argument_list|)
block|; }
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|N
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Set
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|N
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Set
block|{
name|public
operator|:
name|void
name|insert
argument_list|(
name|T
argument_list|)
block|;   }
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|constexpr
name|unsigned
name|List
operator|<
name|int
operator|>
operator|::
operator|*
name|size_left
operator|=
operator|&
name|List
operator|<
name|int
operator|>
operator|::
name|size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|List
operator|<
name|int
operator|>
name|list_left
operator|=
block|{
literal|0
block|,
literal|8
block|}
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|List
operator|<
name|int
operator|>
name|ListInt_left
expr_stmt|;
end_typedef

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|pendingInstantiationEmit
argument_list|(
argument|T
argument_list|)
block|{}
name|void
name|triggerPendingInstantiation
argument_list|()
block|{
name|pendingInstantiationEmit
argument_list|(
literal|12
argument_list|)
block|;
name|pendingInstantiationEmit
argument_list|(
literal|42.
argument_list|)
block|; }
name|void
name|redeclDefinitionEmit
argument_list|()
block|{}
end_expr_stmt

begin_typedef
typedef|typedef
name|Outer
operator|<
name|int
operator|>
operator|::
name|Inner
name|OuterIntInner_left
expr_stmt|;
end_typedef

begin_function
name|int
name|defineListDoubleLeft
parameter_list|()
block|{
name|List
operator|<
name|double
operator|>
name|ld
expr_stmt|;
name|ld
operator|.
name|push_back
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
return|return
name|ld
operator|.
name|size
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|MergePatternDecl
expr_stmt|;
end_expr_stmt

begin_extern
extern|extern template struct ExplicitInstantiation<false
operator|,
extern|false>;
end_extern

begin_extern
extern|extern template struct ExplicitInstantiation<false
operator|,
extern|true>;
end_extern

begin_extern
extern|extern template struct ExplicitInstantiation<true
operator|,
extern|false>;
end_extern

begin_extern
extern|extern template struct ExplicitInstantiation<true
operator|,
extern|true>;
end_extern

begin_function
name|void
name|useExplicitInstantiation
parameter_list|()
block|{
name|ExplicitInstantiation
operator|<
name|true
operator|,
name|false
operator|>
operator|(
operator|)
operator|.
name|f
argument_list|()
expr_stmt|;
name|ExplicitInstantiation
operator|<
name|true
operator|,
name|true
operator|>
operator|(
operator|)
operator|.
name|f
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
operator|>
expr|struct
name|DelayUpdates
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|DelayUpdates
operator|<
name|int
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DelayUpdates
operator|<
name|T
operator|*
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|void
name|testDelayUpdates
argument_list|(
argument|DelayUpdates<T> *p =
literal|0
argument_list|)
block|{}
name|void
name|outOfLineInlineUseLeftF
argument_list|(
name|void
argument_list|(
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
operator|*
argument_list|)
argument_list|()
operator|=
operator|&
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
name|f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|outOfLineInlineUseLeftG
argument_list|(
name|void
argument_list|(
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
operator|*
argument_list|)
argument_list|()
operator|=
operator|&
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
name|g
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|outOfLineInlineUseLeftH
argument_list|(
name|void
argument_list|(
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
operator|*
argument_list|)
argument_list|()
operator|=
operator|&
name|OutOfLineInline
operator|<
name|int
operator|>
operator|::
name|h
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|EmitDefaultedSpecialMembers
block|{
specifier|inline
name|void
name|f
parameter_list|()
block|{
name|SmallString
operator|<
literal|256
operator|>
name|SS
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_function
specifier|inline
name|int
modifier|*
name|getStaticDataMemberLeft
parameter_list|()
block|{
return|return
name|WithUndefinedStaticDataMember
operator|<
name|int
index|[]
operator|>
operator|::
name|undefined
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|WithAttributes
operator|<
name|int
operator|>
name|make_with_attributes_left
argument_list|()
block|{
return|return
name|WithAttributes
operator|<
name|int
operator|>
operator|(
operator|)
return|;
block|}
end_expr_stmt

end_unit

