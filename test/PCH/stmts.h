begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Header for PCH test stmts.c
end_comment

begin_function
name|void
name|f0
parameter_list|(
name|int
name|x
parameter_list|)
block|{
comment|// NullStmt
empty_stmt|;
comment|// IfStmt
if|if
condition|(
name|x
condition|)
block|{   }
elseif|else
if|if
condition|(
name|x
operator|+
literal|1
condition|)
block|{   }
switch|switch
condition|(
name|x
condition|)
block|{
case|case
literal|0
case|:
name|x
operator|=
literal|17
expr_stmt|;
break|break;
case|case
literal|1
case|:
break|break;
default|default:
switch|switch
condition|(
name|x
operator|>>
literal|1
condition|)
block|{
case|case
literal|7
case|:
comment|// fall through
case|case
literal|9
case|:
break|break;
block|}
name|x
operator|+=
literal|2
expr_stmt|;
break|break;
block|}
while|while
condition|(
name|x
operator|>
literal|20
condition|)
block|{
if|if
condition|(
name|x
operator|>
literal|30
condition|)
block|{
operator|--
name|x
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|x
operator|<
literal|5
condition|)
break|break;
else|else
goto|goto
name|done
goto|;
block|}
do|do
block|{
name|x
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|x
operator|<
literal|10
condition|)
do|;
name|almost_done
label|:
for|for
control|(
name|int
name|y
init|=
name|x
init|;
name|y
operator|<
literal|20
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|x
operator|+
name|y
operator|==
literal|12
condition|)
return|return;
elseif|else
if|if
condition|(
name|x
operator|-
name|y
operator|==
literal|7
condition|)
goto|goto
name|almost_done
goto|;
block|}
name|done
label|:
name|x
operator|=
name|x
operator|+
literal|2
expr_stmt|;
name|int
name|z
init|=
name|x
decl_stmt|,
modifier|*
name|y
decl_stmt|,
name|j
init|=
literal|5
decl_stmt|;
block|}
end_function

begin_function
name|int
name|f1
parameter_list|(
name|int
name|x
parameter_list|)
block|{
switch|switch
condition|(
name|x
condition|)
block|{
case|case
literal|17
case|:
return|return
literal|12
return|;
default|default:
break|break;
block|}
comment|// variable-length array
name|int
name|array
index|[
name|x
operator|*
literal|17
operator|+
literal|3
index|]
decl_stmt|;
return|return
name|x
operator|*
literal|2
return|;
block|}
end_function

begin_function
specifier|const
name|char
modifier|*
name|what_is_my_name
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|__func__
return|;
block|}
end_function

begin_function
name|int
name|computed_goto
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|start
label|:
name|x
operator|=
name|x
operator|<<
literal|1
expr_stmt|;
name|void
modifier|*
name|location
init|=
operator|&&
name|start
decl_stmt|;
if|if
condition|(
name|x
operator|>
literal|17
condition|)
name|location
operator|=
operator|&&
name|done
expr_stmt|;
while|while
condition|(
name|x
operator|>
literal|12
condition|)
block|{
operator|--
name|x
expr_stmt|;
if|if
condition|(
name|x
operator|==
literal|15
condition|)
goto|goto *
name|location
goto|;
block|}
name|done
label|:
return|return
literal|5
return|;
block|}
end_function

begin_define
define|#
directive|define
name|maxint
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|({int _a = (a), _b = (b); _a> _b ? _a : _b; })
end_define

begin_function
name|int
name|weird_max
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
name|maxint
argument_list|(
operator|++
name|x
argument_list|,
operator|--
name|y
argument_list|)
return|;
block|}
end_function

end_unit

