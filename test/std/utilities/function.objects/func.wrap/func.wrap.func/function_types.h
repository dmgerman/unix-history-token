begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|FUNCTION_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|FUNCTION_TYPES_H
end_define

begin_decl_stmt
name|class
name|FunctionObject
block|{
name|int
name|data_
index|[
literal|10
index|]
decl_stmt|;
comment|// dummy variable to prevent small object optimization in
comment|// std::function
name|public
label|:
specifier|static
name|int
name|count
decl_stmt|;
name|FunctionObject
argument_list|()
block|{
operator|++
name|count
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|data_
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
name|FunctionObject
argument_list|(
argument|const FunctionObject&
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
operator|~
name|FunctionObject
argument_list|()
block|{
operator|--
name|count
block|;
operator|(
operator|(
name|void
operator|)
name|data_
operator|)
block|; }
name|int
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
return|return
literal|42
return|;
block|}
name|int
name|operator
argument_list|()
operator|(
name|int
name|i
operator|)
specifier|const
block|{
return|return
name|i
return|;
block|}
name|int
name|operator
argument_list|()
operator|(
name|int
name|i
operator|,
name|int
operator|)
specifier|const
block|{
return|return
name|i
return|;
block|}
name|int
name|operator
argument_list|()
operator|(
name|int
name|i
operator|,
name|int
operator|,
name|int
operator|)
specifier|const
block|{
return|return
name|i
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|int
name|FunctionObject
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|class
name|MemFunClass
block|{
name|int
name|data_
index|[
literal|10
index|]
decl_stmt|;
comment|// dummy variable to prevent small object optimization in
comment|// std::function
name|public
label|:
specifier|static
name|int
name|count
decl_stmt|;
name|MemFunClass
argument_list|()
block|{
operator|++
name|count
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
name|data_
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|MemFunClass
argument_list|(
argument|const MemFunClass&
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
operator|(
operator|(
name|void
operator|)
name|data_
operator|)
expr_stmt|;
block|}
operator|~
name|MemFunClass
argument_list|()
block|{
operator|--
name|count
block|;}
name|int
name|foo
argument_list|()
specifier|const
block|{
return|return
literal|42
return|;
block|}
name|int
name|foo
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|i
return|;
block|}
name|int
name|foo
argument_list|(
name|int
name|i
argument_list|,
name|int
argument_list|)
decl|const
block|{
return|return
name|i
return|;
block|}
name|int
name|foo
argument_list|(
name|int
name|i
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
decl|const
block|{
return|return
name|i
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|int
name|MemFunClass
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_function
name|int
name|FreeFunction
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
end_function

begin_function
name|int
name|FreeFunction
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
end_function

begin_function
name|int
name|FreeFunction
parameter_list|(
name|int
name|i
parameter_list|,
name|int
parameter_list|)
block|{
return|return
name|i
return|;
block|}
end_function

begin_function
name|int
name|FreeFunction
parameter_list|(
name|int
name|i
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{
return|return
name|i
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FUNCTION_TYPES_H
end_comment

end_unit

