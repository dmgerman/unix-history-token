begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MAP_ALLOCATOR_REQUIREMENT_TEST_TEMPLATES_H
end_ifndef

begin_define
define|#
directive|define
name|MAP_ALLOCATOR_REQUIREMENT_TEST_TEMPLATES_H
end_define

begin_comment
comment|//<map>
end_comment

begin_comment
comment|//<unordered_map>
end_comment

begin_comment
comment|// class map
end_comment

begin_comment
comment|// class unordered_map
end_comment

begin_comment
comment|// insert(...);
end_comment

begin_comment
comment|// emplace(...);
end_comment

begin_comment
comment|// emplace_hint(...);
end_comment

begin_comment
comment|// UNSUPPORTED: c++98, c++03
end_comment

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_include
include|#
directive|include
file|"count_new.hpp"
end_include

begin_include
include|#
directive|include
file|"container_test_types.h"
end_include

begin_include
include|#
directive|include
file|"assert_checkpoint.h"
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|void
name|testMapInsert
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|key_type
name|Key
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|mapped_type
name|Mapped
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|typename
name|C
operator|::
name|iterator
operator|,
name|bool
operator|>
name|R
expr_stmt|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|v
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|v2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|v
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|v2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(const value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert({key, value})"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
block|{
literal|42
block|,
literal|1
block|}
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(std::initializer_list<ValueTp>)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|std
operator|::
name|initializer_list
operator|<
name|ValueTp
operator|>
name|il
operator|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|}
expr_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
literal|2
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|il
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|il
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type const&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type&&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
operator|)
argument_list|,
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|ValueList2
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList2
argument_list|)
operator|)
argument_list|,
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|end
argument_list|(
name|ValueList2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}   template
operator|<
name|class
name|Container
operator|>
name|void
name|testMapInsertHint
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|key_type
name|Key
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|mapped_type
name|Mapped
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|Mapped
operator|>
name|NonConstKeyPair
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|C
operator|::
name|iterator
name|It
expr_stmt|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, {key, value})"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
block|{
literal|42
operator|,
literal|1
block|}
block|)
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
block|{
literal|42
operator|,
literal|1
block|}
block|)
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   }
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, const value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, pair<Key, Mapped> const&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|NonConstKeyPair
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, pair<Key, Mapped>&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|NonConstKeyPair
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}   template
operator|<
name|class
name|Container
operator|>
name|void
name|testMapEmplace
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|key_type
name|Key
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|mapped_type
name|Mapped
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|Mapped
operator|>
name|NonConstKeyPair
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|typename
name|C
operator|::
name|iterator
operator|,
name|bool
operator|>
name|R
expr_stmt|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(const value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(pair<Key, Mapped> const&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|NonConstKeyPair
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|v2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(pair<Key, Mapped>&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|NonConstKeyPair
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(const Key&, ConvertibleToMapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
specifier|const
operator|&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|k
argument_list|,
literal|1
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|k2
argument_list|,
literal|2
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(Key&, Mapped&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
operator|&
operator|,
name|Mapped
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|k
argument_list|,
name|m
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|k2
argument_list|,
name|m
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(Key&&, Mapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
operator|&&
operator|,
name|Mapped
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|k
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|m
argument_list|)
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m2
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|k2
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|m2
argument_list|)
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace(ConvertibleToKey&&, ConvertibleToMapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|int
operator|&&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
operator|.
name|second
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
comment|// test that emplacing a duplicate item allocates. We cannot optimize
comment|// this case because int&& does not match the type of key exactly.
name|cc
operator|->
name|expect
operator|<
name|int
operator|&&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|emplace
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
operator|.
name|second
operator|==
name|false
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}   template
operator|<
name|class
name|Container
operator|>
name|void
name|testMapEmplaceHint
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|key_type
name|Key
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Container
operator|::
name|mapped_type
name|Mapped
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|pair
operator|<
name|Key
operator|,
name|Mapped
operator|>
name|NonConstKeyPair
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|C
operator|::
name|iterator
name|It
expr_stmt|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, const value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|ValueTp
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, pair<Key, Mapped> const&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|NonConstKeyPair
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, pair<Key, Mapped>&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|NonConstKeyPair
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|NonConstKeyPair
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|NonConstKeyPair
name|v2
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, const Key&, ConvertibleToMapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
specifier|const
operator|&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|k
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
specifier|const
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|k2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, Key&, Mapped&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
operator|&
operator|,
name|Mapped
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|k
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m2
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|k2
argument_list|,
name|m2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, Key&&, Mapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|Key
name|k
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|Key
operator|&&
operator|,
name|Mapped
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|k
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|m
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|DisableAllocationGuard
name|g
decl_stmt|;
name|Key
name|k2
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|Mapped
name|m2
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|k2
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|m2
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::emplace_hint(p, ConvertibleToKey&&, ConvertibleToMapped&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|int
operator|&&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|end
argument_list|()
argument_list|,
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
name|c
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|cc
operator|->
name|expect
operator|<
name|int
operator|&&
operator|,
name|int
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|It
name|ret2
init|=
name|c
operator|.
name|emplace_hint
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
literal|42
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|&
operator|(
operator|*
name|ret2
operator|)
operator|==
operator|&
operator|(
operator|*
name|ret
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|c
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}   template
operator|<
name|class
name|Container
operator|>
name|void
name|testMultimapInsert
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert({key, value})"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
block|{
literal|42
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(std::initializer_list<ValueTp>)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|std
operator|::
name|initializer_list
operator|<
name|ValueTp
operator|>
name|il
operator|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|}
expr_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
literal|2
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|il
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type const&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
specifier|const
operator|&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type&&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
operator|)
argument_list|,
name|std
operator|::
name|move_iterator
operator|<
name|ValueTp
operator|*
operator|>
operator|(
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(Iter, Iter) for *Iter = value_type&"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|ValueList
index|[]
init|=
block|{
name|ValueTp
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
block|,
name|ValueTp
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&
operator|>
operator|(
literal|3
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|std
operator|::
name|begin
argument_list|(
name|ValueList
argument_list|)
argument_list|,
name|std
operator|::
name|end
argument_list|(
name|ValueList
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}   template
operator|<
name|class
name|Container
operator|>
name|void
name|testMultimapInsertHint
argument_list|()
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|value_type
name|ValueTp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Container
name|C
typedef|;
end_typedef

begin_decl_stmt
name|ConstructController
modifier|*
name|cc
init|=
name|getConstructController
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cc
operator|->
name|reset
argument_list|()
expr_stmt|;
end_expr_stmt

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, const value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
specifier|const
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
specifier|const
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, value_type&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, value_type&&)"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|ValueTp
name|v
argument_list|(
literal|42
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_block
block|{
name|CHECKPOINT
argument_list|(
literal|"Testing C::insert(p, {key, value})"
argument_list|)
expr_stmt|;
name|Container
name|c
decl_stmt|;
name|cc
operator|->
name|expect
operator|<
name|ValueTp
operator|&&
operator|>
operator|(
operator|)
expr_stmt|;
name|c
operator|.
name|insert
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
block|{
literal|42
operator|,
literal|1
block|}
block|)
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assert
argument_list|(
operator|!
name|cc
operator|->
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|} }
endif|#
directive|endif
end_endif

end_unit

