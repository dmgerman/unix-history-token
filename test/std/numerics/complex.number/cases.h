begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//<complex>
end_comment

begin_comment
comment|// test cases
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CASES_H
end_ifndef

begin_define
define|#
directive|define
name|CASES_H
end_define

begin_include
include|#
directive|include
file|<complex>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_expr_stmt
specifier|const
name|std
operator|::
name|complex
operator|<
name|double
operator|>
name|testcases
index|[]
operator|=
block|{
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e-6
operator|,
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e-6
operator|,
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e-6
operator|,
operator|-
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e-6
operator|,
operator|-
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e+6
operator|,
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e+6
operator|,
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e+6
operator|,
operator|-
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e+6
operator|,
operator|-
literal|1.e-6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e-6
operator|,
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e-6
operator|,
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e-6
operator|,
operator|-
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e-6
operator|,
operator|-
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e+6
operator|,
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e+6
operator|,
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1.e+6
operator|,
operator|-
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1.e+6
operator|,
operator|-
literal|1.e+6
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
name|NAN
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|-
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|-
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|-
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|-
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|-
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
operator|+
literal|0.
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
literal|0.5
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
literal|1
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
literal|2
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|NAN
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
name|INFINITY
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|2
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|1
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.5
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|-
literal|0.
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
operator|+
literal|0.
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|0.5
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|1
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
literal|2
operator|,
name|INFINITY
operator|)
block|,
name|std
operator|::
name|complex
operator|<
name|double
operator|>
operator|(
name|INFINITY
operator|,
name|INFINITY
operator|)
block|}
expr_stmt|;
end_expr_stmt

begin_enum
enum|enum
block|{
name|zero
block|,
name|non_zero
block|,
name|inf
block|,
name|NaN
block|,
name|non_zero_nan
block|}
enum|;
end_enum

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|int
name|classify
argument_list|(
argument|const std::complex<T>& x
argument_list|)
block|{
if|if
condition|(
name|x
operator|==
name|std
operator|::
name|complex
operator|<
name|T
operator|>
operator|(
operator|)
condition|)
return|return
name|zero
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|)
operator|||
name|std
operator|::
name|isinf
argument_list|(
name|x
operator|.
name|imag
argument_list|()
argument_list|)
condition|)
return|return
name|inf
return|;
end_if

begin_if
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|)
operator|&&
name|std
operator|::
name|isnan
argument_list|(
name|x
operator|.
name|imag
argument_list|()
argument_list|)
condition|)
return|return
name|NaN
return|;
end_if

begin_if
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|x
operator|.
name|real
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|imag
argument_list|()
operator|==
name|T
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|NaN
return|;
return|return
name|non_zero_nan
return|;
block|}
end_if

begin_if
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|x
operator|.
name|imag
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|real
argument_list|()
operator|==
name|T
argument_list|(
literal|0
argument_list|)
condition|)
return|return
name|NaN
return|;
return|return
name|non_zero_nan
return|;
block|}
end_if

begin_return
return|return
name|non_zero
return|;
end_return

begin_function
unit|}  inline
name|int
name|classify
parameter_list|(
name|double
name|x
parameter_list|)
block|{
if|if
condition|(
name|x
operator|==
literal|0
condition|)
return|return
name|zero
return|;
if|if
condition|(
name|std
operator|::
name|isinf
argument_list|(
name|x
argument_list|)
condition|)
return|return
name|inf
return|;
if|if
condition|(
name|std
operator|::
name|isnan
argument_list|(
name|x
argument_list|)
condition|)
return|return
name|NaN
return|;
return|return
name|non_zero
return|;
block|}
end_function

begin_function
name|void
name|is_about
parameter_list|(
name|float
name|x
parameter_list|,
name|float
name|y
parameter_list|)
block|{
name|assert
argument_list|(
name|std
operator|::
name|abs
argument_list|(
operator|(
name|x
operator|-
name|y
operator|)
operator|/
operator|(
name|x
operator|+
name|y
operator|)
argument_list|)
operator|<
literal|1.e-6
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|is_about
parameter_list|(
name|double
name|x
parameter_list|,
name|double
name|y
parameter_list|)
block|{
name|assert
argument_list|(
name|std
operator|::
name|abs
argument_list|(
operator|(
name|x
operator|-
name|y
operator|)
operator|/
operator|(
name|x
operator|+
name|y
operator|)
argument_list|)
operator|<
literal|1.e-14
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|is_about
parameter_list|(
name|long
name|double
name|x
parameter_list|,
name|long
name|double
name|y
parameter_list|)
block|{
name|assert
argument_list|(
name|std
operator|::
name|abs
argument_list|(
operator|(
name|x
operator|-
name|y
operator|)
operator|/
operator|(
name|x
operator|+
name|y
operator|)
argument_list|)
operator|<
literal|1.e-14
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// CASES_H
end_comment

end_unit

