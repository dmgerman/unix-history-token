begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ATOMIC_HELPERS_H
end_ifndef

begin_define
define|#
directive|define
name|ATOMIC_HELPERS_H
end_define

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_struct
struct|struct
name|UserAtomicType
block|{
name|int
name|i
decl_stmt|;
name|explicit
name|UserAtomicType
argument_list|(
name|int
name|d
operator|=
literal|0
argument_list|)
name|TEST_NOEXCEPT
range|:
name|i
argument_list|(
argument|d
argument_list|)
block|{}
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|UserAtomicType
operator|&
name|x
expr|,
specifier|const
name|UserAtomicType
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|i
operator|==
name|y
operator|.
name|i
return|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
name|TestArg
operator|>
name|class
name|TestFunctor
operator|>
expr|struct
name|TestEachIntegralType
block|{
name|void
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
name|TestFunctor
operator|<
name|char
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|signed
name|char
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|unsigned
name|char
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|short
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|unsigned
name|short
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|int
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|unsigned
name|int
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|long
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|unsigned
name|long
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|long
name|long
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|unsigned
name|long
name|long
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|wchar_t
operator|>
operator|(
operator|)
block|;
ifndef|#
directive|ifndef
name|_LIBCPP_HAS_NO_UNICODE_CHARS
name|TestFunctor
operator|<
name|char16_t
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|char32_t
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
endif|#
directive|endif
block|}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
name|TestArg
operator|>
name|class
name|TestFunctor
operator|>
expr|struct
name|TestEachAtomicType
block|{
name|void
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
name|TestEachIntegralType
operator|<
name|TestFunctor
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|UserAtomicType
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
name|int
operator|*
operator|>
operator|(
operator|)
operator|(
operator|)
block|;
name|TestFunctor
operator|<
specifier|const
name|int
operator|*
operator|>
operator|(
operator|)
operator|(
operator|)
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ATOMIC_HELPER_H
end_comment

end_unit

