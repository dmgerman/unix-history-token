begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_decl_stmt
name|int
name|bench_nthread
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|bench_niter
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|grow_clock_var
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|pthread_barrier_t
name|glow_clock_barrier
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|bench
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// defined by user
end_comment

begin_function_decl
name|void
name|start_thread_group
parameter_list|(
name|int
name|nth
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|int
name|tid
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|grow_clock_worker
parameter_list|(
name|int
name|tid
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|bench_nthread
operator|=
literal|2
expr_stmt|;
if|if
condition|(
name|argc
operator|>
literal|1
condition|)
name|bench_nthread
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|bench_niter
operator|=
literal|100
expr_stmt|;
if|if
condition|(
name|argc
operator|>
literal|2
condition|)
name|bench_niter
operator|=
name|atoi
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Grow thread's clock.
name|int
name|clock_size
init|=
literal|10
decl_stmt|;
if|if
condition|(
name|argc
operator|>
literal|1
condition|)
name|clock_size
operator|=
literal|1000
expr_stmt|;
name|pthread_barrier_init
argument_list|(
operator|&
name|glow_clock_barrier
argument_list|,
literal|0
argument_list|,
name|clock_size
argument_list|)
expr_stmt|;
name|start_thread_group
argument_list|(
name|clock_size
argument_list|,
name|grow_clock_worker
argument_list|)
expr_stmt|;
name|pthread_barrier_destroy
argument_list|(
operator|&
name|glow_clock_barrier
argument_list|)
expr_stmt|;
name|__atomic_load_n
argument_list|(
operator|&
name|grow_clock_var
argument_list|,
name|__ATOMIC_ACQUIRE
argument_list|)
expr_stmt|;
name|timespec
name|tp0
decl_stmt|;
name|clock_gettime
argument_list|(
name|CLOCK_MONOTONIC
argument_list|,
operator|&
name|tp0
argument_list|)
expr_stmt|;
name|bench
argument_list|()
expr_stmt|;
name|timespec
name|tp1
decl_stmt|;
name|clock_gettime
argument_list|(
name|CLOCK_MONOTONIC
argument_list|,
operator|&
name|tp1
argument_list|)
expr_stmt|;
name|unsigned
name|long
name|long
name|t
init|=
operator|(
name|tp1
operator|.
name|tv_sec
operator|*
literal|1000000000ULL
operator|+
name|tp1
operator|.
name|tv_nsec
operator|)
operator|-
operator|(
name|tp0
operator|.
name|tv_sec
operator|*
literal|1000000000ULL
operator|+
name|tp0
operator|.
name|tv_nsec
operator|)
decl_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%llu ns/iter\n"
argument_list|,
name|t
operator|/
name|bench_niter
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"DONE\n"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|start_thread_group
parameter_list|(
name|int
name|nth
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|int
name|tid
parameter_list|)
parameter_list|)
block|{
name|pthread_t
modifier|*
name|th
init|=
operator|(
name|pthread_t
operator|*
operator|)
name|malloc
argument_list|(
name|nth
operator|*
sizeof|sizeof
argument_list|(
name|pthread_t
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nth
condition|;
name|i
operator|++
control|)
name|pthread_create
argument_list|(
operator|&
name|th
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|,
operator|(
name|void
operator|*
call|(
modifier|*
call|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
name|f
argument_list|,
operator|(
name|void
operator|*
operator|)
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nth
condition|;
name|i
operator|++
control|)
name|pthread_join
argument_list|(
name|th
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|grow_clock_worker
parameter_list|(
name|int
name|tid
parameter_list|)
block|{
name|int
name|res
init|=
name|pthread_barrier_wait
argument_list|(
operator|&
name|glow_clock_barrier
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
name|PTHREAD_BARRIER_SERIAL_THREAD
condition|)
name|__atomic_store_n
argument_list|(
operator|&
name|grow_clock_var
argument_list|,
literal|0
argument_list|,
name|__ATOMIC_RELEASE
argument_list|)
expr_stmt|;
block|}
end_function

end_unit

