begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/****************************************************************************  * Copyright (c) 2009-2010,2012 Free Software Foundation, Inc.              *  *                                                                          *  * Permission is hereby granted, free of charge, to any person obtaining a  *  * copy of this software and associated documentation files (the            *  * "Software"), to deal in the Software without restriction, including      *  * without limitation the rights to use, copy, modify, merge, publish,      *  * distribute, distribute with modifications, sublicense, and/or sell       *  * copies of the Software, and to permit persons to whom the Software is    *  * furnished to do so, subject to the following conditions:                 *  *                                                                          *  * The above copyright notice and this permission notice shall be included  *  * in all copies or substantial portions of the Software.                   *  *                                                                          *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *  * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *  * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *  * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *  *                                                                          *  * Except as contained in this notice, the name(s) of the above copyright   *  * holders shall not be used in advertising or otherwise to promote the     *  * sale, use or other dealings in this Software without prior written       *  * authorization.                                                           *  ****************************************************************************/
end_comment

begin_define
define|#
directive|define
name|isQUIT
parameter_list|(
name|c
parameter_list|)
value|((c) == QUIT || (c) == ESCAPE)
end_define

begin_define
define|#
directive|define
name|key_RECUR
value|CTRL('W')
end_define

begin_define
define|#
directive|define
name|key_NEWLINE
value|CTRL('N')
end_define

begin_define
define|#
directive|define
name|key_BACKSPACE
value|'\b'
end_define

begin_decl_stmt
specifier|static
name|FILE
modifier|*
name|linedata
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|void
name|failed
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
block|{
name|perror
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|ExitProgram
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|init_linedata
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
if|if
condition|(
operator|(
name|linedata
operator|=
name|fopen
argument_list|(
name|name
argument_list|,
literal|"r"
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|failed
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|int
name|read_linedata
parameter_list|(
name|WINDOW
modifier|*
name|work
parameter_list|)
block|{
name|int
name|result
decl_stmt|;
if|if
condition|(
name|linedata
operator|!=
literal|0
condition|)
block|{
name|result
operator|=
name|fgetc
argument_list|(
name|linedata
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
name|EOF
condition|)
block|{
name|fclose
argument_list|(
name|linedata
argument_list|)
expr_stmt|;
name|linedata
operator|=
literal|0
expr_stmt|;
name|result
operator|=
name|read_linedata
argument_list|(
name|work
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrefresh
argument_list|(
name|work
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|'\n'
condition|)
block|{
name|result
operator|=
name|key_NEWLINE
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
ifdef|#
directive|ifdef
name|WIDE_LINEDATA
name|wint_t
name|ch
decl_stmt|;
name|int
name|code
decl_stmt|;
name|result
operator|=
name|ERR
expr_stmt|;
while|while
condition|(
operator|(
name|code
operator|=
name|wget_wch
argument_list|(
name|work
argument_list|,
operator|&
name|ch
argument_list|)
operator|)
operator|!=
name|ERR
condition|)
block|{
if|if
condition|(
name|code
operator|==
name|KEY_CODE_YES
condition|)
block|{
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
name|KEY_DOWN
case|:
name|result
operator|=
name|key_NEWLINE
expr_stmt|;
break|break;
case|case
name|KEY_BACKSPACE
case|:
name|result
operator|=
name|key_BACKSPACE
expr_stmt|;
break|break;
default|default:
name|beep
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
name|result
operator|=
operator|(
name|int
operator|)
name|ch
expr_stmt|;
break|break;
block|}
block|}
else|#
directive|else
name|result
operator|=
name|wgetch
argument_list|(
name|work
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|result
return|;
block|}
end_function

end_unit

