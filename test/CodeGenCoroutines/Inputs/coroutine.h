begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_decl_stmt
name|namespace
name|std
block|{
name|namespace
name|experimental
block|{
specifier|inline
name|namespace
name|coroutines_v1
block|{
name|template
operator|<
name|typename
name|R
operator|,
name|typename
operator|...
operator|>
expr|struct
name|coroutine_traits
block|{
name|using
name|promise_type
operator|=
name|typename
name|R
operator|::
name|promise_type
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Promise
operator|=
name|void
operator|>
expr|struct
name|coroutine_handle
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|coroutine_handle
operator|<
name|void
operator|>
block|{
specifier|static
name|coroutine_handle
name|from_address
argument_list|(
argument|void *addr
argument_list|)
name|noexcept
block|{
name|coroutine_handle
name|me
block|;
name|me
operator|.
name|ptr
operator|=
name|addr
block|;
return|return
name|me
return|;
block|}
name|void
name|operator
argument_list|()
operator|(
operator|)
block|{
name|resume
argument_list|()
block|; }
name|void
operator|*
name|address
argument_list|()
specifier|const
block|{
return|return
name|ptr
return|;
block|}
name|void
name|resume
argument_list|()
specifier|const
block|{
name|__builtin_coro_resume
argument_list|(
name|ptr
argument_list|)
block|; }
name|void
name|destroy
argument_list|()
specifier|const
block|{
name|__builtin_coro_destroy
argument_list|(
name|ptr
argument_list|)
block|; }
name|bool
name|done
argument_list|()
specifier|const
block|{
return|return
name|__builtin_coro_done
argument_list|(
name|ptr
argument_list|)
return|;
block|}
name|coroutine_handle
operator|&
name|operator
operator|=
operator|(
name|decltype
argument_list|(
name|nullptr
argument_list|)
operator|)
block|{
name|ptr
operator|=
name|nullptr
block|;
return|return
operator|*
name|this
return|;
block|}
name|coroutine_handle
argument_list|(
name|decltype
argument_list|(
name|nullptr
argument_list|)
argument_list|)
operator|:
name|ptr
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|coroutine_handle
argument_list|()
operator|:
name|ptr
argument_list|(
argument|nullptr
argument_list|)
block|{}
comment|//  void reset() { ptr = nullptr; } // add to P0057?
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr
return|;
block|}
name|protected
operator|:
name|void
operator|*
name|ptr
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|Promise
operator|>
expr|struct
name|coroutine_handle
operator|:
name|coroutine_handle
operator|<
operator|>
block|{
name|using
name|coroutine_handle
operator|<
operator|>
operator|::
name|operator
operator|=
block|;
specifier|static
name|coroutine_handle
name|from_address
argument_list|(
argument|void *addr
argument_list|)
name|noexcept
block|{
name|coroutine_handle
name|me
block|;
name|me
operator|.
name|ptr
operator|=
name|addr
block|;
return|return
name|me
return|;
block|}
name|Promise
operator|&
name|promise
argument_list|()
specifier|const
block|{
return|return
operator|*
name|reinterpret_cast
operator|<
name|Promise
operator|*
operator|>
operator|(
name|__builtin_coro_promise
argument_list|(
name|ptr
argument_list|,
name|alignof
argument_list|(
name|Promise
argument_list|)
argument_list|,
name|false
argument_list|)
operator|)
return|;
block|}
specifier|static
name|coroutine_handle
name|from_promise
argument_list|(
argument|Promise&promise
argument_list|)
block|{
name|coroutine_handle
name|p
block|;
name|p
operator|.
name|ptr
operator|=
name|__builtin_coro_promise
argument_list|(
operator|&
name|promise
argument_list|,
name|alignof
argument_list|(
name|Promise
argument_list|)
argument_list|,
name|true
argument_list|)
block|;
return|return
name|p
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|_PromiseT
operator|>
name|bool
name|operator
operator|==
operator|(
name|coroutine_handle
operator|<
name|_PromiseT
operator|>
specifier|const
operator|&
name|_Left
operator|,
name|coroutine_handle
operator|<
name|_PromiseT
operator|>
specifier|const
operator|&
name|_Right
operator|)
name|noexcept
block|{
return|return
name|_Left
operator|.
name|address
argument_list|()
operator|==
name|_Right
operator|.
name|address
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|_PromiseT
operator|>
name|bool
name|operator
operator|!=
operator|(
name|coroutine_handle
operator|<
name|_PromiseT
operator|>
specifier|const
operator|&
name|_Left
operator|,
name|coroutine_handle
operator|<
name|_PromiseT
operator|>
specifier|const
operator|&
name|_Right
operator|)
name|noexcept
block|{
return|return
operator|!
operator|(
name|_Left
operator|==
name|_Right
operator|)
return|;
block|}
expr|struct
name|suspend_always
block|{
name|bool
name|await_ready
argument_list|()
block|{
return|return
name|false
return|;
block|}
name|void
name|await_suspend
argument_list|(
argument|coroutine_handle<>
argument_list|)
block|{}
name|void
name|await_resume
argument_list|()
block|{}
expr|}
block|; struct
name|suspend_never
block|{
name|bool
name|await_ready
argument_list|()
block|{
return|return
name|true
return|;
block|}
name|void
name|await_suspend
argument_list|(
argument|coroutine_handle<>
argument_list|)
block|{}
name|void
name|await_resume
argument_list|()
block|{}
expr|}
block|;  }
block|}
expr|}
end_decl_stmt

end_unit

