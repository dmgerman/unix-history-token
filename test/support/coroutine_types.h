begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_COROUTINE_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_COROUTINE_TYPES_H
end_define

begin_include
include|#
directive|include
file|<experimental/coroutine>
end_include

begin_expr_stmt
name|template
operator|<
name|typename
name|Ty
operator|>
expr|struct
name|generator
block|{   struct
name|promise_type
block|{
name|Ty
name|current_value
block|;
name|std
operator|::
name|experimental
operator|::
name|suspend_always
name|yield_value
argument_list|(
argument|Ty value
argument_list|)
block|{
name|this
operator|->
name|current_value
operator|=
name|value
block|;
return|return
block|{}
return|;
block|}
name|std
operator|::
name|experimental
operator|::
name|suspend_always
name|initial_suspend
argument_list|()
block|{
return|return
block|{}
return|;
block|}
name|std
operator|::
name|experimental
operator|::
name|suspend_always
name|final_suspend
argument_list|()
block|{
return|return
block|{}
return|;
block|}
end_expr_stmt

begin_function
name|generator
name|get_return_object
parameter_list|()
block|{
return|return
name|generator
block|{
name|this
block|}
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
name|void
name|return_void
parameter_list|()
block|{}
end_function

begin_function
name|void
name|unhandled_exception
parameter_list|()
block|{}
end_function

begin_struct
unit|};
struct|struct
name|iterator
block|{
name|std
operator|::
name|experimental
operator|::
name|coroutine_handle
operator|<
name|promise_type
operator|>
name|_Coro
expr_stmt|;
name|bool
name|_Done
decl_stmt|;
name|iterator
argument_list|(
argument|std::experimental::coroutine_handle<promise_type> Coro
argument_list|,
argument|bool Done
argument_list|)
block|:
name|_Coro
argument_list|(
name|Coro
argument_list|)
operator|,
name|_Done
argument_list|(
argument|Done
argument_list|)
block|{}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_Coro
operator|.
name|resume
argument_list|()
block|;
name|_Done
operator|=
name|_Coro
operator|.
name|done
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|iterator
specifier|const
operator|&
name|_Right
operator|)
specifier|const
block|{
return|return
name|_Done
operator|==
name|_Right
operator|.
name|_Done
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|iterator
specifier|const
operator|&
name|_Right
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|_Right
operator|)
return|;
block|}
name|Ty
specifier|const
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|_Coro
operator|.
name|promise
argument_list|()
operator|.
name|current_value
return|;
block|}
name|Ty
specifier|const
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_struct

begin_function
unit|};
name|iterator
name|begin
parameter_list|()
block|{
name|p
operator|.
name|resume
argument_list|()
expr_stmt|;
return|return
block|{
name|p
block|,
name|p
operator|.
name|done
argument_list|()
block|}
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
block|{
name|p
block|,
name|true
block|}
return|;
block|}
end_function

begin_expr_stmt
name|generator
argument_list|(
name|generator
operator|&&
name|rhs
argument_list|)
operator|:
name|p
argument_list|(
argument|rhs.p
argument_list|)
block|{
name|rhs
operator|.
name|p
operator|=
name|nullptr
block|; }
operator|~
name|generator
argument_list|()
block|{
if|if
condition|(
name|p
condition|)
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|generator
argument_list|(
name|promise_type
operator|*
name|p
argument_list|)
operator|:
name|p
argument_list|(
argument|std::experimental::coroutine_handle<promise_type>::from_promise(*p)
argument_list|)
block|{}
name|std
operator|::
name|experimental
operator|::
name|coroutine_handle
operator|<
name|promise_type
operator|>
name|p
expr_stmt|;
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// SUPPORT_COROUTINE_TYPES_H
end_comment

end_unit

