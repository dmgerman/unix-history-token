begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MIN_ALLOCATOR_H
end_ifndef

begin_define
define|#
directive|define
name|MIN_ALLOCATOR_H
end_define

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|bare_allocator
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
name|bare_allocator
argument_list|()
name|TEST_NOEXCEPT
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|bare_allocator
argument_list|(
argument|bare_allocator<U>
argument_list|)
name|TEST_NOEXCEPT
block|{}
name|T
operator|*
name|allocate
argument_list|(
argument|std::size_t n
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
name|n
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|T
operator|*
name|p
argument_list|,
name|std
operator|::
name|size_t
argument_list|)
block|{
return|return
operator|::
name|operator
name|delete
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|p
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|bare_allocator
operator|,
name|bare_allocator
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|bare_allocator
name|x
operator|,
name|bare_allocator
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_struct
unit|};
struct|struct
name|malloc_allocator_base
block|{
specifier|static
name|size_t
name|alloc_count
decl_stmt|;
specifier|static
name|size_t
name|dealloc_count
decl_stmt|;
specifier|static
name|bool
name|disable_default_constructor
decl_stmt|;
specifier|static
name|size_t
name|outstanding_alloc
parameter_list|()
block|{
name|assert
argument_list|(
name|alloc_count
operator|>=
name|dealloc_count
argument_list|)
expr_stmt|;
return|return
operator|(
name|alloc_count
operator|-
name|dealloc_count
operator|)
return|;
block|}
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|assert
argument_list|(
name|outstanding_alloc
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|disable_default_constructor
operator|=
name|false
expr_stmt|;
name|alloc_count
operator|=
literal|0
expr_stmt|;
name|dealloc_count
operator|=
literal|0
expr_stmt|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|size_t
name|malloc_allocator_base
operator|::
name|alloc_count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|size_t
name|malloc_allocator_base
operator|::
name|dealloc_count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|malloc_allocator_base
operator|::
name|disable_default_constructor
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|malloc_allocator
operator|:
name|public
name|malloc_allocator_base
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
name|malloc_allocator
argument_list|()
name|TEST_NOEXCEPT
block|{
name|assert
argument_list|(
operator|!
name|disable_default_constructor
argument_list|)
block|; }
name|template
operator|<
name|class
name|U
operator|>
name|malloc_allocator
argument_list|(
argument|malloc_allocator<U>
argument_list|)
name|TEST_NOEXCEPT
block|{}
name|T
operator|*
name|allocate
argument_list|(
argument|std::size_t n
argument_list|)
block|{
operator|++
name|alloc_count
block|;
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|std
operator|::
name|malloc
argument_list|(
name|n
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|T
operator|*
name|p
argument_list|,
name|std
operator|::
name|size_t
argument_list|)
block|{
operator|++
name|dealloc_count
expr_stmt|;
name|std
operator|::
name|free
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|p
operator|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|malloc_allocator
operator|,
name|malloc_allocator
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|malloc_allocator
name|x
operator|,
name|malloc_allocator
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_if
unit|};
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
end_if

begin_include
include|#
directive|include
file|<memory>
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_pointer
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_pointer
operator|<
specifier|const
name|T
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|min_pointer
operator|<
name|void
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|min_pointer
operator|<
specifier|const
name|void
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|min_pointer
operator|<
specifier|const
name|void
operator|>
block|{
specifier|const
name|void
operator|*
name|ptr_
block|;
name|public
operator|:
name|min_pointer
argument_list|()
name|TEST_NOEXCEPT
operator|=
expr|default
block|;
name|min_pointer
argument_list|(
argument|std::nullptr_t
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|template
operator|<
name|class
name|T
operator|>
name|min_pointer
argument_list|(
argument|min_pointer<T> p
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|p.ptr_
argument_list|)
block|{}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr_
operator|!=
name|nullptr
return|;
block|}
name|friend
name|bool
name|operator
operator|==
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|==
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|min_pointer
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
name|class
name|min_pointer
operator|<
name|void
operator|>
block|{
name|void
operator|*
name|ptr_
block|;
name|public
operator|:
name|min_pointer
argument_list|()
name|TEST_NOEXCEPT
operator|=
expr|default
block|;
name|min_pointer
argument_list|(
argument|std::nullptr_t
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|template
operator|<
name|class
name|T
block|,
name|class
operator|=
name|typename
name|std
operator|::
name|enable_if
operator|<
operator|!
name|std
operator|::
name|is_const
operator|<
name|T
operator|>
operator|::
name|value
operator|>
operator|::
name|type
operator|>
name|min_pointer
argument_list|(
argument|min_pointer<T> p
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|p.ptr_
argument_list|)
block|{}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr_
operator|!=
name|nullptr
return|;
block|}
name|friend
name|bool
name|operator
operator|==
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|==
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|min_pointer
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_pointer
block|{
name|T
operator|*
name|ptr_
block|;
name|explicit
name|min_pointer
argument_list|(
argument|T* p
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|p
argument_list|)
block|{}
name|public
operator|:
name|min_pointer
argument_list|()
name|TEST_NOEXCEPT
operator|=
expr|default
block|;
name|min_pointer
argument_list|(
argument|std::nullptr_t
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|explicit
name|min_pointer
argument_list|(
argument|min_pointer<void> p
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|ptr_
argument_list|(
argument|static_cast<T*>(p.ptr_)
argument_list|)
block|{}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr_
operator|!=
name|nullptr
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|ptrdiff_t
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
end_typedef

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|ptr_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
name|ptr_
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|ptr_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
name|ptr_
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|ptr_
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
name|ptr_
operator|-=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|+=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|min_pointer
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|,
name|min_pointer
name|x
operator|)
block|{
return|return
name|x
operator|+
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|-=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|difference_type
name|operator
operator|-
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|-
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
name|ptr_
index|[
name|n
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|<
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|>
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|y
operator|<
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|>=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|<
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|min_pointer
name|pointer_to
parameter_list|(
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|min_pointer
argument_list|(
name|std
operator|::
name|addressof
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|==
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|min_pointer
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|min_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_pointer
operator|<
specifier|const
name|T
operator|>
block|{
specifier|const
name|T
operator|*
name|ptr_
block|;
name|explicit
name|min_pointer
argument_list|(
specifier|const
name|T
operator|*
name|p
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|p
argument_list|)
block|{}
name|public
operator|:
name|min_pointer
argument_list|()
name|TEST_NOEXCEPT
operator|=
expr|default
block|;
name|min_pointer
argument_list|(
name|std
operator|::
name|nullptr_t
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|min_pointer
argument_list|(
name|min_pointer
operator|<
name|T
operator|>
name|p
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|p.ptr_
argument_list|)
block|{}
name|explicit
name|min_pointer
argument_list|(
name|min_pointer
operator|<
specifier|const
name|void
operator|>
name|p
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|static_cast<const T*>(p.ptr_)
argument_list|)
block|{}
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr_
operator|!=
name|nullptr
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|ptrdiff_t
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
end_typedef

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|ptr_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
name|ptr_
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|ptr_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
name|ptr_
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|ptr_
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
name|ptr_
operator|-=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|+=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|min_pointer
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|,
name|min_pointer
name|x
operator|)
block|{
return|return
name|x
operator|+
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|min_pointer
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|min_pointer
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|-=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|difference_type
name|operator
operator|-
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|-
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
name|ptr_
index|[
name|n
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|<
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|>
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|y
operator|<
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|>=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|<
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|min_pointer
name|pointer_to
parameter_list|(
specifier|const
name|T
modifier|&
name|t
parameter_list|)
block|{
return|return
name|min_pointer
argument_list|(
name|std
operator|::
name|addressof
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
name|x
operator|.
name|ptr_
operator|==
name|y
operator|.
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|min_pointer
name|x
operator|,
name|min_pointer
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|min_pointer
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|min_pointer
operator|<
name|T
operator|>
name|x
operator|,
name|std
operator|::
name|nullptr_t
operator|)
block|{
return|return
operator|!
name|static_cast
operator|<
name|bool
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|std
operator|::
name|nullptr_t
operator|,
name|min_pointer
operator|<
name|T
operator|>
name|x
operator|)
block|{
return|return
operator|!
name|static_cast
operator|<
name|bool
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|min_pointer
operator|<
name|T
operator|>
name|x
operator|,
name|std
operator|::
name|nullptr_t
operator|)
block|{
return|return
name|static_cast
operator|<
name|bool
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|std
operator|::
name|nullptr_t
operator|,
name|min_pointer
operator|<
name|T
operator|>
name|x
operator|)
block|{
return|return
name|static_cast
operator|<
name|bool
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|min_allocator
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|min_pointer
operator|<
name|T
operator|>
name|pointer
expr_stmt|;
end_typedef

begin_expr_stmt
name|min_allocator
argument_list|()
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|min_allocator
argument_list|(
argument|min_allocator<U>
argument_list|)
block|{}
name|pointer
name|allocate
argument_list|(
argument|std::ptrdiff_t n
argument_list|)
block|{
return|return
name|pointer
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
name|n
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|pointer
name|p
argument_list|,
name|std
operator|::
name|ptrdiff_t
argument_list|)
block|{
return|return
operator|::
name|operator
name|delete
argument_list|(
name|p
operator|.
name|ptr_
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|min_allocator
operator|,
name|min_allocator
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|min_allocator
name|x
operator|,
name|min_allocator
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|explicit_allocator
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
name|explicit_allocator
argument_list|()
name|TEST_NOEXCEPT
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|explicit
name|explicit_allocator
argument_list|(
argument|explicit_allocator<U>
argument_list|)
name|TEST_NOEXCEPT
block|{}
name|T
operator|*
name|allocate
argument_list|(
argument|std::size_t n
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
name|n
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|T
operator|*
name|p
argument_list|,
name|std
operator|::
name|size_t
argument_list|)
block|{
return|return
operator|::
name|operator
name|delete
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|p
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|explicit_allocator
operator|,
name|explicit_allocator
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|explicit_allocator
name|x
operator|,
name|explicit_allocator
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// TEST_STD_VER>= 11
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// MIN_ALLOCATOR_H
end_comment

end_unit

