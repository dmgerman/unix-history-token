begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_ASSERT_CHECKPOINT_H
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_ASSERT_CHECKPOINT_H
end_define

begin_include
include|#
directive|include
file|<csignal>
end_include

begin_include
include|#
directive|include
file|<iostream>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_struct
struct|struct
name|Checkpoint
block|{
specifier|const
name|char
modifier|*
name|file
decl_stmt|;
specifier|const
name|char
modifier|*
name|func
decl_stmt|;
name|int
name|line
decl_stmt|;
specifier|const
name|char
modifier|*
name|msg
decl_stmt|;
name|Checkpoint
argument_list|()
operator|:
name|file
argument_list|(
name|nullptr
argument_list|)
operator|,
name|func
argument_list|(
name|nullptr
argument_list|)
operator|,
name|line
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|msg
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|Checkpoint
argument_list|(
argument|const char* xfile
argument_list|,
argument|const char* xfunc
argument_list|,
argument|int xline
argument_list|,
argument|const char* xmsg
argument_list|)
operator|:
name|file
argument_list|(
name|xfile
argument_list|)
operator|,
name|func
argument_list|(
name|xfunc
argument_list|)
operator|,
name|line
argument_list|(
name|xline
argument_list|)
operator|,
name|msg
argument_list|(
argument|xmsg
argument_list|)
block|{}
name|template
operator|<
name|class
name|Stream
operator|>
name|void
name|print
argument_list|(
argument|Stream& s
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|file
condition|)
block|{
name|s
operator|<<
literal|"NO CHECKPOINT\n"
expr_stmt|;
return|return;
block|}
name|s
operator|<<
name|file
operator|<<
literal|":"
operator|<<
name|line
operator|<<
literal|" "
operator|<<
name|func
operator|<<
literal|": Checkpoint"
expr_stmt|;
if|if
condition|(
name|msg
condition|)
name|s
operator|<<
literal|" '"
operator|<<
name|msg
operator|<<
literal|"'"
expr_stmt|;
name|s
operator|<<
name|std
operator|::
name|endl
expr_stmt|;
block|}
end_struct

begin_function
unit|};
specifier|inline
name|Checkpoint
modifier|&
name|globalCheckpoint
parameter_list|()
block|{
specifier|static
name|Checkpoint
name|C
decl_stmt|;
return|return
name|C
return|;
block|}
end_function

begin_function
specifier|inline
name|void
name|clearCheckpoint
parameter_list|()
block|{
name|globalCheckpoint
argument_list|()
operator|=
name|Checkpoint
argument_list|()
expr_stmt|;
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
end_if

begin_define
define|#
directive|define
name|CHECKPOINT_FUNCTION_NAME
value|__PRETTY_FUNCTION__
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CHECKPOINT_FUNCTION_NAME
value|__func__
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CHECKPOINT
parameter_list|(
name|msg
parameter_list|)
value|globalCheckpoint() = Checkpoint(__FILE__, CHECKPOINT_FUNCTION_NAME, __LINE__, msg);
end_define

begin_function
specifier|inline
name|void
name|checkpointSignalHandler
parameter_list|(
name|int
name|signal
parameter_list|)
block|{
if|if
condition|(
name|signal
operator|==
name|SIGABRT
condition|)
block|{
name|globalCheckpoint
argument_list|()
operator|.
name|print
argument_list|(
name|std
operator|::
name|cerr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|std
operator|::
name|cerr
operator|<<
literal|"Unexpected signal "
operator|<<
name|signal
operator|<<
literal|" received\n"
expr_stmt|;
block|}
name|std
operator|::
name|_Exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|bool
name|initCheckpointHandler
parameter_list|()
block|{
typedef|typedef
name|void
function_decl|(
modifier|*
name|HandlerT
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isInit
init|=
name|false
decl_stmt|;
if|if
condition|(
name|isInit
condition|)
return|return
name|true
return|;
name|HandlerT
name|prev_h
init|=
name|std
operator|::
name|signal
argument_list|(
name|SIGABRT
argument_list|,
name|checkpointSignalHandler
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev_h
operator|==
name|SIG_ERR
condition|)
block|{
name|std
operator|::
name|cerr
operator|<<
literal|"Setup failed.\n"
expr_stmt|;
name|std
operator|::
name|_Exit
argument_list|(
name|EXIT_FAILURE
argument_list|)
expr_stmt|;
block|}
name|isInit
operator|=
name|true
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|bool
name|initDummy
init|=
name|initCheckpointHandler
argument_list|()
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

