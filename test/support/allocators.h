begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ALLOCATORS_H
end_ifndef

begin_define
define|#
directive|define
name|ALLOCATORS_H
end_define

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_if
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
end_if

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|A1
block|{
name|int
name|id_
block|;
name|public
operator|:
name|explicit
name|A1
argument_list|(
argument|int id =
literal|0
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|id_
argument_list|(
argument|id
argument_list|)
block|{}
typedef|typedef
name|T
name|value_type
typedef|;
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|id_
return|;
block|}
specifier|static
name|bool
name|copy_called
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|bool
name|move_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|allocate_called
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|pair
operator|<
name|T
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|deallocate_called
expr_stmt|;
end_expr_stmt

begin_macro
name|A1
argument_list|(
argument|const A1& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|copy_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_macro
name|A1
argument_list|(
argument|A1&& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|move_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_decl_stmt
name|A1
modifier|&
name|operator
init|=
operator|(
specifier|const
name|A1
operator|&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|copy_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|A1
modifier|&
name|operator
init|=
operator|(
name|A1
operator|&&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|move_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|A1
argument_list|(
argument|const A1<U>& a
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|id_
argument_list|(
argument|a.id()
argument_list|)
block|{
name|copy_called
operator|=
name|true
block|;}
name|template
operator|<
name|class
name|U
operator|>
name|A1
argument_list|(
argument|A1<U>&& a
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|id_
argument_list|(
argument|a.id()
argument_list|)
block|{
name|move_called
operator|=
name|true
block|;}
name|T
operator|*
name|allocate
argument_list|(
argument|std::size_t n
argument_list|)
block|{
name|allocate_called
operator|=
name|true
block|;
return|return
operator|(
name|T
operator|*
operator|)
name|n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|T
operator|*
name|p
argument_list|,
name|std
operator|::
name|size_t
name|n
argument_list|)
block|{
name|deallocate_called
operator|=
name|std
operator|::
name|pair
operator|<
name|T
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
operator|(
name|p
operator|,
name|n
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|size_t
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|id_
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A1
operator|<
name|T
operator|>
operator|::
name|copy_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A1
operator|<
name|T
operator|>
operator|::
name|move_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A1
operator|<
name|T
operator|>
operator|::
name|allocate_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|std
operator|::
name|pair
operator|<
name|T
operator|*
operator|,
name|std
operator|::
name|size_t
operator|>
name|A1
operator|<
name|T
operator|>
operator|::
name|deallocate_called
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|A1
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A1
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|id
argument_list|()
operator|==
name|y
operator|.
name|id
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|A1
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A1
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|A2
block|{
name|int
name|id_
block|;
name|public
operator|:
name|explicit
name|A2
argument_list|(
argument|int id =
literal|0
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|id_
argument_list|(
argument|id
argument_list|)
block|{}
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|unsigned
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|true_type
name|propagate_on_container_move_assignment
expr_stmt|;
end_typedef

begin_expr_stmt
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|id_
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
name|bool
name|copy_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|move_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|allocate_called
decl_stmt|;
end_decl_stmt

begin_macro
name|A2
argument_list|(
argument|const A2& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|copy_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_macro
name|A2
argument_list|(
argument|A2&& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|move_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_decl_stmt
name|A2
modifier|&
name|operator
init|=
operator|(
specifier|const
name|A2
operator|&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|copy_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|A2
modifier|&
name|operator
init|=
operator|(
name|A2
operator|&&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|move_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|T
modifier|*
name|allocate
argument_list|(
name|std
operator|::
name|size_t
argument_list|,
specifier|const
name|void
operator|*
name|hint
argument_list|)
block|{
name|allocate_called
operator|=
name|true
expr_stmt|;
return|return
operator|(
name|T
operator|*
operator|)
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|hint
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A2
operator|<
name|T
operator|>
operator|::
name|copy_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A2
operator|<
name|T
operator|>
operator|::
name|move_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A2
operator|<
name|T
operator|>
operator|::
name|allocate_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|A2
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A2
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|id
argument_list|()
operator|==
name|y
operator|.
name|id
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|A2
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A2
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|A3
block|{
name|int
name|id_
block|;
name|public
operator|:
name|explicit
name|A3
argument_list|(
argument|int id =
literal|0
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|id_
argument_list|(
argument|id
argument_list|)
block|{}
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|true_type
name|propagate_on_container_copy_assignment
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|true_type
name|propagate_on_container_swap
expr_stmt|;
end_typedef

begin_expr_stmt
name|int
name|id
argument_list|()
specifier|const
block|{
return|return
name|id_
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
name|bool
name|copy_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|move_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|constructed
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|destroy_called
decl_stmt|;
end_decl_stmt

begin_macro
name|A3
argument_list|(
argument|const A3& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|copy_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_macro
name|A3
argument_list|(
argument|A3&& a
argument_list|)
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|id_
argument_list|(
argument|a.id()
argument_list|)
end_macro

begin_block
block|{
name|move_called
operator|=
name|true
expr_stmt|;
block|}
end_block

begin_decl_stmt
name|A3
modifier|&
name|operator
init|=
operator|(
specifier|const
name|A3
operator|&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|copy_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|A3
modifier|&
name|operator
init|=
operator|(
name|A3
operator|&&
name|a
operator|)
name|TEST_NOEXCEPT
block|{
name|id_
operator|=
name|a
operator|.
name|id
argument_list|()
block|;
name|move_called
operator|=
name|true
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|,
name|class
operator|...
name|Args
operator|>
name|void
name|construct
argument_list|(
argument|U* p
argument_list|,
argument|Args&& ...args
argument_list|)
block|{
operator|::
name|new
argument_list|(
argument|p
argument_list|)
name|U
argument_list|(
name|std
operator|::
name|forward
operator|<
name|Args
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
block|;
name|constructed
operator|=
name|true
block|;     }
name|template
operator|<
name|class
name|U
operator|>
name|void
name|destroy
argument_list|(
argument|U* p
argument_list|)
block|{
name|p
operator|->
expr|~
name|U
argument_list|()
block|;
name|destroy_called
operator|=
name|true
block|;     }
name|A3
name|select_on_container_copy_construction
argument_list|()
specifier|const
block|{
return|return
name|A3
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A3
operator|<
name|T
operator|>
operator|::
name|copy_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A3
operator|<
name|T
operator|>
operator|::
name|move_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A3
operator|<
name|T
operator|>
operator|::
name|constructed
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|A3
operator|<
name|T
operator|>
operator|::
name|destroy_called
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|A3
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A3
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|id
argument_list|()
operator|==
name|y
operator|.
name|id
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|A3
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|A3
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TEST_STD_VER>= 11
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ALLOCATORS_H
end_comment

end_unit

