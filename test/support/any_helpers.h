begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ANY_HELPERS_H
end_ifndef

begin_define
define|#
directive|define
name|ANY_HELPERS_H
end_define

begin_include
include|#
directive|include
file|<typeinfo>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
name|namespace
name|experimental
block|{}
block|}
end_decl_stmt

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_include
include|#
directive|include
file|"type_id.h"
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|TEST_HAS_NO_RTTI
argument_list|)
end_if

begin_define
define|#
directive|define
name|RTTI_ASSERT
parameter_list|(
name|X
parameter_list|)
value|assert(X)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|RTTI_ASSERT
parameter_list|(
name|X
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|IsSmallObject
operator|:
name|public
name|std
operator|::
name|integral_constant
operator|<
name|bool
operator|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
operator|<=
operator|(
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|*
literal|3
operator|)
operator|&&
name|std
operator|::
name|alignment_of
operator|<
name|void
operator|*
operator|>
operator|::
name|value
operator|%
name|std
operator|::
name|alignment_of
operator|<
name|_Tp
operator|>
operator|::
name|value
operator|==
literal|0
operator|&&
name|std
operator|::
name|is_nothrow_move_constructible
operator|<
name|_Tp
operator|>
operator|::
name|value
operator|>
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|containsType
argument_list|(
argument|std::any const& a
argument_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|TEST_HAS_NO_RTTI
argument_list|)
return|return
name|a
operator|.
name|type
argument_list|()
operator|==
name|typeid
argument_list|(
name|T
argument_list|)
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|a
operator|.
name|has_value
argument_list|()
operator|&&
name|std
operator|::
name|any_cast
operator|<
name|T
operator|>
operator|(
operator|&
name|a
operator|)
operator|!=
name|nullptr
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// Return 'true' if 'Type' will be considered a small type by 'any'
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|Type
operator|>
name|bool
name|isSmallType
argument_list|()
block|{
return|return
name|IsSmallObject
operator|<
name|Type
operator|>
operator|::
name|value
return|;
block|}
end_expr_stmt

begin_comment
comment|// Assert that an object is empty. If the object used to contain an object
end_comment

begin_comment
comment|// of type 'LastType' check that it can no longer be accessed.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|LastType
operator|=
name|int
operator|>
name|void
name|assertEmpty
argument_list|(
argument|std::any const& a
argument_list|)
block|{
name|using
name|namespace
name|std
block|;
name|assert
argument_list|(
operator|!
name|a
operator|.
name|has_value
argument_list|()
argument_list|)
block|;
name|RTTI_ASSERT
argument_list|(
name|a
operator|.
name|type
argument_list|()
operator|==
name|typeid
argument_list|(
name|void
argument_list|)
argument_list|)
block|;
name|assert
argument_list|(
name|any_cast
operator|<
name|LastType
specifier|const
operator|>
operator|(
operator|&
name|a
operator|)
operator|==
name|nullptr
argument_list|)
block|; }
name|template
operator|<
name|class
name|Type
operator|>
name|constexpr
name|auto
name|has_value_member
argument_list|(
name|int
argument_list|)
operator|->
name|decltype
argument_list|(
argument|std::declval<Type&>().value
argument_list|,
argument|true
argument_list|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
operator|>
name|constexpr
name|bool
name|has_value_member
argument_list|(
argument|long
argument_list|)
block|{
return|return
name|false
return|;
block|}
end_expr_stmt

begin_comment
comment|// Assert that an 'any' object stores the specified 'Type' and 'value'.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Type
operator|>
name|std
operator|::
name|enable_if_t
operator|<
name|has_value_member
operator|<
name|Type
operator|>
operator|(
literal|0
operator|)
operator|>
name|assertContains
argument_list|(
argument|std::any const& a
argument_list|,
argument|int value
argument_list|)
block|{
name|assert
argument_list|(
name|a
operator|.
name|has_value
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|containsType
operator|<
name|Type
operator|>
operator|(
name|a
operator|)
argument_list|)
block|;
name|assert
argument_list|(
name|std
operator|::
name|any_cast
operator|<
name|Type
specifier|const
operator|&
operator|>
operator|(
name|a
operator|)
operator|.
name|value
operator|==
name|value
argument_list|)
block|; }
name|template
operator|<
name|class
name|Type
operator|,
name|class
name|Value
operator|>
name|std
operator|::
name|enable_if_t
operator|<
operator|!
name|has_value_member
operator|<
name|Type
operator|>
operator|(
literal|0
operator|)
operator|>
name|assertContains
argument_list|(
argument|std::any const& a
argument_list|,
argument|Value value
argument_list|)
block|{
name|assert
argument_list|(
name|a
operator|.
name|has_value
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|containsType
operator|<
name|Type
operator|>
operator|(
name|a
operator|)
argument_list|)
block|;
name|assert
argument_list|(
name|std
operator|::
name|any_cast
operator|<
name|Type
specifier|const
operator|&
operator|>
operator|(
name|a
operator|)
operator|==
name|value
argument_list|)
block|; }
comment|// Modify the value of a "test type" stored within an any to the specified
comment|// 'value'.
name|template
operator|<
name|class
name|Type
operator|>
name|void
name|modifyValue
argument_list|(
argument|std::any& a
argument_list|,
argument|int value
argument_list|)
block|{
name|using
name|namespace
name|std
block|;
name|using
name|namespace
name|std
operator|::
name|experimental
block|;
name|assert
argument_list|(
name|a
operator|.
name|has_value
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|containsType
operator|<
name|Type
operator|>
operator|(
name|a
operator|)
argument_list|)
block|;
name|any_cast
operator|<
name|Type
operator|&
operator|>
operator|(
name|a
operator|)
operator|.
name|value
operator|=
name|value
block|; }
comment|// A test type that will trigger the small object optimization within 'any'.
name|template
operator|<
name|int
name|Dummy
operator|=
literal|0
operator|>
expr|struct
name|small_type
block|{
specifier|static
name|int
name|count
block|;
specifier|static
name|int
name|copied
block|;
specifier|static
name|int
name|moved
block|;
specifier|static
name|int
name|const_copied
block|;
specifier|static
name|int
name|non_const_copied
block|;
specifier|static
name|void
name|reset
argument_list|()
block|{
name|small_type
operator|::
name|copied
operator|=
literal|0
block|;
name|small_type
operator|::
name|moved
operator|=
literal|0
block|;
name|small_type
operator|::
name|const_copied
operator|=
literal|0
block|;
name|small_type
operator|::
name|non_const_copied
operator|=
literal|0
block|;     }
name|int
name|value
block|;
name|explicit
name|small_type
argument_list|(
argument|int val =
literal|0
argument_list|)
operator|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
block|;     }
name|explicit
name|small_type
argument_list|(
argument|int
argument_list|,
argument|int val
argument_list|,
argument|int
argument_list|)
operator|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
block|;     }
name|small_type
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|int
operator|>
name|il
argument_list|)
operator|:
name|value
argument_list|(
argument|*il.begin()
argument_list|)
block|{
operator|++
name|count
block|;     }
name|small_type
argument_list|(
argument|small_type const& other
argument_list|)
name|noexcept
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
operator|++
name|count
block|;
operator|++
name|copied
block|;
operator|++
name|const_copied
block|;     }
name|small_type
argument_list|(
argument|small_type& other
argument_list|)
name|noexcept
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
operator|++
name|count
block|;
operator|++
name|copied
block|;
operator|++
name|non_const_copied
block|;     }
name|small_type
argument_list|(
argument|small_type&& other
argument_list|)
name|noexcept
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
name|other
operator|.
name|value
operator|=
literal|0
block|;
operator|++
name|count
block|;
operator|++
name|moved
block|;     }
operator|~
name|small_type
argument_list|()
block|{
name|value
operator|=
operator|-
literal|1
block|;
operator|--
name|count
block|;     }
name|private
operator|:
name|small_type
operator|&
name|operator
operator|=
operator|(
name|small_type
specifier|const
operator|&
operator|)
operator|=
name|delete
block|;
name|small_type
operator|&
name|operator
operator|=
operator|(
name|small_type
operator|&&
operator|)
operator|=
name|delete
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|small_type
operator|<
name|Dummy
operator|>
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|small_type
operator|<
name|Dummy
operator|>
operator|::
name|copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|small_type
operator|<
name|Dummy
operator|>
operator|::
name|moved
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|small_type
operator|<
name|Dummy
operator|>
operator|::
name|const_copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|small_type
operator|<
name|Dummy
operator|>
operator|::
name|non_const_copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|small_type
operator|<
operator|>
name|small
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|small_type
operator|<
literal|1
operator|>
name|small1
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|small_type
operator|<
literal|2
operator|>
name|small2
expr_stmt|;
end_typedef

begin_comment
comment|// A test type that will NOT trigger the small object optimization in any.
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|=
literal|0
operator|>
expr|struct
name|large_type
block|{
specifier|static
name|int
name|count
block|;
specifier|static
name|int
name|copied
block|;
specifier|static
name|int
name|moved
block|;
specifier|static
name|int
name|const_copied
block|;
specifier|static
name|int
name|non_const_copied
block|;
specifier|static
name|void
name|reset
argument_list|()
block|{
name|large_type
operator|::
name|copied
operator|=
literal|0
block|;
name|large_type
operator|::
name|moved
operator|=
literal|0
block|;
name|large_type
operator|::
name|const_copied
operator|=
literal|0
block|;
name|large_type
operator|::
name|non_const_copied
operator|=
literal|0
block|;     }
name|int
name|value
block|;
name|large_type
argument_list|(
argument|int val =
literal|0
argument_list|)
operator|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
block|;
name|data
index|[
literal|0
index|]
operator|=
literal|0
block|;     }
name|large_type
argument_list|(
argument|int
argument_list|,
argument|int val
argument_list|,
argument|int
argument_list|)
operator|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
block|;
name|data
index|[
literal|0
index|]
operator|=
literal|0
block|;     }
name|large_type
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|int
operator|>
name|il
argument_list|)
operator|:
name|value
argument_list|(
argument|*il.begin()
argument_list|)
block|{
operator|++
name|count
block|;     }
name|large_type
argument_list|(
argument|large_type const& other
argument_list|)
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
operator|++
name|count
block|;
operator|++
name|copied
block|;
operator|++
name|const_copied
block|;     }
name|large_type
argument_list|(
argument|large_type& other
argument_list|)
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
operator|++
name|count
block|;
operator|++
name|copied
block|;
operator|++
name|non_const_copied
block|;     }
name|large_type
argument_list|(
argument|large_type&& other
argument_list|)
block|{
name|value
operator|=
name|other
operator|.
name|value
block|;
name|other
operator|.
name|value
operator|=
literal|0
block|;
operator|++
name|count
block|;
operator|++
name|moved
block|;     }
operator|~
name|large_type
argument_list|()
block|{
name|value
operator|=
literal|0
block|;
operator|--
name|count
block|;     }
name|private
operator|:
name|large_type
operator|&
name|operator
operator|=
operator|(
name|large_type
specifier|const
operator|&
operator|)
operator|=
name|delete
block|;
name|large_type
operator|&
name|operator
operator|=
operator|(
name|large_type
operator|&&
operator|)
operator|=
name|delete
block|;
name|int
name|data
index|[
literal|10
index|]
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|large_type
operator|<
name|Dummy
operator|>
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|large_type
operator|<
name|Dummy
operator|>
operator|::
name|copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|large_type
operator|<
name|Dummy
operator|>
operator|::
name|moved
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|large_type
operator|<
name|Dummy
operator|>
operator|::
name|const_copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|>
name|int
name|large_type
operator|<
name|Dummy
operator|>
operator|::
name|non_const_copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|large_type
operator|<
operator|>
name|large
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|large_type
operator|<
literal|1
operator|>
name|large1
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|large_type
operator|<
literal|2
operator|>
name|large2
expr_stmt|;
end_typedef

begin_comment
comment|// The exception type thrown by 'small_throws_on_copy', 'large_throws_on_copy'
end_comment

begin_comment
comment|// and 'throws_on_move'.
end_comment

begin_struct
struct|struct
name|my_any_exception
block|{}
struct|;
end_struct

begin_function
name|void
name|throwMyAnyExpression
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|TEST_HAS_NO_EXCEPTIONS
argument_list|)
name|throw
name|my_any_exception
parameter_list|()
function_decl|;
else|#
directive|else
name|assert
argument_list|(
name|false
operator|&&
literal|"Exceptions are disabled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|// A test type that will trigger the small object optimization within 'any'.
end_comment

begin_comment
comment|// this type throws if it is copied.
end_comment

begin_struct
struct|struct
name|small_throws_on_copy
block|{
specifier|static
name|int
name|count
decl_stmt|;
specifier|static
name|int
name|copied
decl_stmt|;
specifier|static
name|int
name|moved
decl_stmt|;
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|count
operator|=
name|copied
operator|=
name|moved
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|value
decl_stmt|;
name|explicit
name|small_throws_on_copy
argument_list|(
argument|int val =
literal|0
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
name|explicit
name|small_throws_on_copy
argument_list|(
argument|int
argument_list|,
argument|int val
argument_list|,
argument|int
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
name|small_throws_on_copy
argument_list|(
argument|small_throws_on_copy const&
argument_list|)
block|{
name|throwMyAnyExpression
argument_list|()
expr_stmt|;
block|}
name|small_throws_on_copy
argument_list|(
argument|small_throws_on_copy&& other
argument_list|)
name|throw
argument_list|()
block|{
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
operator|++
name|count
expr_stmt|;
operator|++
name|moved
expr_stmt|;
block|}
operator|~
name|small_throws_on_copy
argument_list|()
block|{
operator|--
name|count
block|;     }
name|private
operator|:
name|small_throws_on_copy
operator|&
name|operator
operator|=
operator|(
name|small_throws_on_copy
specifier|const
operator|&
operator|)
operator|=
name|delete
expr_stmt|;
name|small_throws_on_copy
modifier|&
name|operator
init|=
operator|(
name|small_throws_on_copy
operator|&&
operator|)
operator|=
name|delete
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|int
name|small_throws_on_copy
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|small_throws_on_copy
operator|::
name|copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|small_throws_on_copy
operator|::
name|moved
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_comment
comment|// A test type that will NOT trigger the small object optimization within 'any'.
end_comment

begin_comment
comment|// this type throws if it is copied.
end_comment

begin_struct
struct|struct
name|large_throws_on_copy
block|{
specifier|static
name|int
name|count
decl_stmt|;
specifier|static
name|int
name|copied
decl_stmt|;
specifier|static
name|int
name|moved
decl_stmt|;
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|count
operator|=
name|copied
operator|=
name|moved
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|value
init|=
literal|0
decl_stmt|;
name|explicit
name|large_throws_on_copy
argument_list|(
argument|int val =
literal|0
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|explicit
name|large_throws_on_copy
argument_list|(
argument|int
argument_list|,
argument|int val
argument_list|,
argument|int
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
name|large_throws_on_copy
argument_list|(
argument|large_throws_on_copy const&
argument_list|)
block|{
name|throwMyAnyExpression
argument_list|()
expr_stmt|;
block|}
name|large_throws_on_copy
argument_list|(
argument|large_throws_on_copy&& other
argument_list|)
name|throw
argument_list|()
block|{
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
operator|++
name|count
expr_stmt|;
operator|++
name|moved
expr_stmt|;
block|}
operator|~
name|large_throws_on_copy
argument_list|()
block|{
operator|--
name|count
block|;     }
name|private
operator|:
name|large_throws_on_copy
operator|&
name|operator
operator|=
operator|(
name|large_throws_on_copy
specifier|const
operator|&
operator|)
operator|=
name|delete
expr_stmt|;
name|large_throws_on_copy
modifier|&
name|operator
init|=
operator|(
name|large_throws_on_copy
operator|&&
operator|)
operator|=
name|delete
decl_stmt|;
name|int
name|data
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|int
name|large_throws_on_copy
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|large_throws_on_copy
operator|::
name|copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|large_throws_on_copy
operator|::
name|moved
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_comment
comment|// A test type that throws when it is moved. This object will NOT trigger
end_comment

begin_comment
comment|// the small object optimization in 'any'.
end_comment

begin_struct
struct|struct
name|throws_on_move
block|{
specifier|static
name|int
name|count
decl_stmt|;
specifier|static
name|int
name|copied
decl_stmt|;
specifier|static
name|int
name|moved
decl_stmt|;
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|count
operator|=
name|copied
operator|=
name|moved
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|value
decl_stmt|;
name|explicit
name|throws_on_move
argument_list|(
argument|int val =
literal|0
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
name|explicit
name|throws_on_move
argument_list|(
argument|int
argument_list|,
argument|int val
argument_list|,
argument|int
argument_list|)
block|:
name|value
argument_list|(
argument|val
argument_list|)
block|{
operator|++
name|count
expr_stmt|;
block|}
name|throws_on_move
argument_list|(
argument|throws_on_move const& other
argument_list|)
block|{
name|value
operator|=
name|other
operator|.
name|value
expr_stmt|;
operator|++
name|count
expr_stmt|;
operator|++
name|copied
expr_stmt|;
block|}
name|throws_on_move
argument_list|(
argument|throws_on_move&&
argument_list|)
block|{
name|throwMyAnyExpression
argument_list|()
expr_stmt|;
block|}
operator|~
name|throws_on_move
argument_list|()
block|{
operator|--
name|count
block|;     }
name|private
operator|:
name|throws_on_move
operator|&
name|operator
operator|=
operator|(
name|throws_on_move
specifier|const
operator|&
operator|)
operator|=
name|delete
expr_stmt|;
name|throws_on_move
modifier|&
name|operator
init|=
operator|(
name|throws_on_move
operator|&&
operator|)
operator|=
name|delete
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|int
name|throws_on_move
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|throws_on_move
operator|::
name|copied
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|throws_on_move
operator|::
name|moved
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|small_tracked_t
block|{
name|small_tracked_t
argument_list|()
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<>()
argument_list|)
block|{}
name|small_tracked_t
argument_list|(
argument|small_tracked_t const&
argument_list|)
name|noexcept
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<small_tracked_t const&>()
argument_list|)
block|{}
name|small_tracked_t
argument_list|(
argument|small_tracked_t&&
argument_list|)
name|noexcept
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<small_tracked_t&&>()
argument_list|)
block|{}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|explicit
name|small_tracked_t
argument_list|(
name|Args
operator|&&
operator|...
argument_list|)
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<Args...>()
argument_list|)
block|{}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|explicit
name|small_tracked_t
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|int
operator|>
argument_list|,
name|Args
operator|&&
operator|...
argument_list|)
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<std::initializer_list<int>
argument_list|,
argument|Args...>()
argument_list|)
block|{}
name|TypeID
specifier|const
operator|*
name|arg_types
expr_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
name|IsSmallObject
operator|<
name|small_tracked_t
operator|>
operator|::
name|value
argument_list|,
literal|"must be small"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|large_tracked_t
block|{
name|large_tracked_t
argument_list|()
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<>()
argument_list|)
block|{
name|dummy
index|[
literal|0
index|]
operator|=
literal|42
block|; }
name|large_tracked_t
argument_list|(
argument|large_tracked_t const&
argument_list|)
name|noexcept
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<large_tracked_t const&>()
argument_list|)
block|{}
name|large_tracked_t
argument_list|(
argument|large_tracked_t&&
argument_list|)
name|noexcept
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<large_tracked_t&&>()
argument_list|)
block|{}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|explicit
name|large_tracked_t
argument_list|(
name|Args
operator|&&
operator|...
argument_list|)
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<Args...>()
argument_list|)
block|{}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|explicit
name|large_tracked_t
argument_list|(
name|std
operator|::
name|initializer_list
operator|<
name|int
operator|>
argument_list|,
name|Args
operator|&&
operator|...
argument_list|)
operator|:
name|arg_types
argument_list|(
argument|&makeArgumentID<std::initializer_list<int>
argument_list|,
argument|Args...>()
argument_list|)
block|{}
name|TypeID
specifier|const
operator|*
name|arg_types
expr_stmt|;
name|int
name|dummy
index|[
literal|10
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|static_assert
argument_list|(
operator|!
name|IsSmallObject
operator|<
name|large_tracked_t
operator|>
operator|::
name|value
argument_list|,
literal|"must be small"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Type
operator|,
name|class
operator|...
name|Args
operator|>
name|void
name|assertArgsMatch
argument_list|(
argument|std::any const& a
argument_list|)
block|{
name|using
name|namespace
name|std
block|;
name|using
name|namespace
name|std
operator|::
name|experimental
block|;
name|assert
argument_list|(
name|a
operator|.
name|has_value
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|containsType
operator|<
name|Type
operator|>
operator|(
name|a
operator|)
argument_list|)
block|;
name|assert
argument_list|(
name|any_cast
operator|<
name|Type
specifier|const
operator|&
operator|>
operator|(
name|a
operator|)
operator|.
name|arg_types
operator|==
operator|&
name|makeArgumentID
operator|<
name|Args
operator|...
operator|>
operator|(
operator|)
argument_list|)
block|; }
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

