begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TRANSPARENT_H
end_ifndef

begin_define
define|#
directive|define
name|TRANSPARENT_H
end_define

begin_comment
comment|// testing transparent
end_comment

begin_if
if|#
directive|if
name|_LIBCPP_STD_VER
operator|>
literal|11
end_if

begin_struct
struct|struct
name|transparent_less
block|{
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
name|constexpr
name|auto
name|operator
argument_list|()
operator|(
name|T
operator|&&
name|t
operator|,
name|U
operator|&&
name|u
operator|)
specifier|const
name|noexcept
argument_list|(
name|noexcept
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
argument_list|)
argument_list|)
operator|->
name|decltype
argument_list|(
argument|std::forward<T>(t)< std::forward<U>(u)
argument_list|)
block|{
return|return
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
return|;
block|}
typedef|typedef
name|void
name|is_transparent
typedef|;
comment|// correct
block|}
struct|;
end_struct

begin_struct
struct|struct
name|transparent_less_no_type
block|{
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
name|constexpr
name|auto
name|operator
argument_list|()
operator|(
name|T
operator|&&
name|t
operator|,
name|U
operator|&&
name|u
operator|)
specifier|const
name|noexcept
argument_list|(
name|noexcept
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
argument_list|)
argument_list|)
operator|->
name|decltype
argument_list|(
argument|std::forward<T>(t)< std::forward<U>(u)
argument_list|)
block|{
return|return
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
return|;
block|}
name|private
label|:
comment|//    typedef void is_transparent;  // error - should exist
block|}
struct|;
end_struct

begin_struct
struct|struct
name|transparent_less_private
block|{
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
name|constexpr
name|auto
name|operator
argument_list|()
operator|(
name|T
operator|&&
name|t
operator|,
name|U
operator|&&
name|u
operator|)
specifier|const
name|noexcept
argument_list|(
name|noexcept
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
argument_list|)
argument_list|)
operator|->
name|decltype
argument_list|(
argument|std::forward<T>(t)< std::forward<U>(u)
argument_list|)
block|{
return|return
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
return|;
block|}
name|private
label|:
typedef|typedef
name|void
name|is_transparent
typedef|;
comment|// error - should be accessible
block|}
struct|;
end_struct

begin_struct
struct|struct
name|transparent_less_not_a_type
block|{
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
name|constexpr
name|auto
name|operator
argument_list|()
operator|(
name|T
operator|&&
name|t
operator|,
name|U
operator|&&
name|u
operator|)
specifier|const
name|noexcept
argument_list|(
name|noexcept
argument_list|(
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
argument_list|)
argument_list|)
operator|->
name|decltype
argument_list|(
argument|std::forward<T>(t)< std::forward<U>(u)
argument_list|)
block|{
return|return
name|std
operator|::
name|forward
operator|<
name|T
operator|>
operator|(
name|t
operator|)
operator|<
name|std
operator|::
name|forward
operator|<
name|U
operator|>
operator|(
name|u
operator|)
return|;
block|}
name|int
name|is_transparent
decl_stmt|;
comment|// error - should be a type
block|}
struct|;
end_struct

begin_struct
struct|struct
name|C2Int
block|{
comment|// comparable to int
name|C2Int
argument_list|()
operator|:
name|i_
argument_list|(
literal|0
argument_list|)
block|{}
name|C2Int
argument_list|(
argument|int i
argument_list|)
operator|:
name|i_
argument_list|(
argument|i
argument_list|)
block|{}
name|int
name|get
argument_list|()
specifier|const
block|{
return|return
name|i_
return|;
block|}
name|private
label|:
name|int
name|i_
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
name|int
name|rhs
operator|,
specifier|const
name|C2Int
operator|&
name|lhs
operator|)
block|{
return|return
name|rhs
operator|<
name|lhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|C2Int
operator|&
name|rhs
operator|,
specifier|const
name|C2Int
operator|&
name|lhs
operator|)
block|{
return|return
name|rhs
operator|.
name|get
argument_list|()
operator|<
name|lhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|C2Int
operator|&
name|rhs
operator|,
name|int
name|lhs
operator|)
block|{
return|return
name|rhs
operator|.
name|get
argument_list|()
operator|<
name|lhs
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TRANSPARENT_H
end_comment

end_unit

