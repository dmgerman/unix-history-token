begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_CONTAINER_TEST_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_CONTAINER_TEST_TYPES_H
end_define

begin_comment
comment|// container_test_types.h - A set of types used for testing STL containers.
end_comment

begin_comment
comment|// The types container within this header are used to test the requirements in
end_comment

begin_comment
comment|// [container.requirements.general]. The header is made up of 3 main components:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * test-types: 'CopyInsertable', 'MoveInsertable' and 'EmplaceConstructible' -
end_comment

begin_comment
comment|//    These test types are used to test the container requirements of the same
end_comment

begin_comment
comment|//    name. These test types use the global 'AllocatorConstructController' to
end_comment

begin_comment
comment|//    assert that they are only constructed by the containers allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * test-allocator: 'ContainerTestAllocator' - This test allocator is used to
end_comment

begin_comment
comment|//    test the portions of [container.requirements.general] that pertain to the
end_comment

begin_comment
comment|//    containers allocator. The three primary jobs of the test allocator are:
end_comment

begin_comment
comment|//      1. Enforce that 'a.construct(...)' and 'a.destroy(...)' are only ever
end_comment

begin_comment
comment|//         instantiated for 'Container::value_type'.
end_comment

begin_comment
comment|//      2. Provide a mechanism of checking calls to 'a.construct(Args...)'.
end_comment

begin_comment
comment|//         Including controlling when and with what types 'a.construct(...)'
end_comment

begin_comment
comment|//         may be called with.
end_comment

begin_comment
comment|//      3. Support the test types internals by controlling the global
end_comment

begin_comment
comment|//        'AllocatorConstructController' object.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// * 'AllocatorConstructController' - This type defines an interface for testing
end_comment

begin_comment
comment|//   the construction of types using an allocator. This type is used to communicate
end_comment

begin_comment
comment|//   between the test author, the containers allocator, and the types
end_comment

begin_comment
comment|//   being constructed by the container.
end_comment

begin_comment
comment|//   The controllers primary functions are:
end_comment

begin_comment
comment|//     1. Allow calls to 'a.construct(p, args...)' to be checked by a test.
end_comment

begin_comment
comment|//        The test uses 'cc->expect<Args...>()' to specify that the allocator
end_comment

begin_comment
comment|//        should expect one call to 'a.construct' with the specified argument
end_comment

begin_comment
comment|//        types.
end_comment

begin_comment
comment|//     2. Controlling the value of 'cc->isInAllocatorConstruct()' within the
end_comment

begin_comment
comment|//        'construct' method. The test-types use this value to assert that
end_comment

begin_comment
comment|//         they are being constructed by the allocator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   'AllocatorConstructController' enforces the Singleton pattern since the
end_comment

begin_comment
comment|//    test-types, test-allocator and test need to share the same controller
end_comment

begin_comment
comment|//    object. A pointer to the global controller is returned by
end_comment

begin_comment
comment|//   'getConstructController()'.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//----------------------------------------------------------------------------
end_comment

begin_comment
comment|/*  * Usage: The following example checks that 'unordered_map::emplace(Args&&...)'  *        with 'Args = [CopyInsertable<1> const&, CopyInsertible<2>&&]'  *        calls 'alloc.construct(value_type*, Args&&...)' with the same types.  *  * // Typedefs for container  * using Key = CopyInsertible<1>;  * using Value = CopyInsertible<2>;  * using ValueTp = std::pair<const Key, Value>;  * using Alloc = ContainerTestAllocator<ValueTp, ValueTp>;  * using Map = std::unordered_map<Key, Value, std::hash<Key>, std::equal_to<Key>, Alloc>;  *  * // Get the global controller, reset it, and construct an allocator with  * // the controller.  * ConstructController* cc = getConstructController();  * cc->reset();  *  * // Create a Map and a Key and Value to insert. Note that the test-allocator  * // does not need to be given 'cc'.  * Map m;  * const Key k(1);  * Value v(1);  *  * // Tell the controller to expect a construction from the specified types.  * cc->expect<Key const&, Value&&>();  *  * // Emplace the objects into the container. 'Alloc.construct(p, UArgs...)'  * // will assert 'cc->check<UArgs&&>()' is true which will consume  * // the call to 'cc->expect<...>()'.  * m.emplace(k, std::move(v));  *  * // Assert that the "expect" was consumed by a matching "check" call within  * // Alloc.  * assert(!cc->unexpected());  *  */
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_if
if|#
directive|if
name|TEST_STD_VER
operator|<
literal|11
end_if

begin_error
error|#
directive|error
error|This header requires C++11 or greater
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|detail
block|{
comment|// TypeID - Represent a unique identifier for a type. TypeID allows equality
comment|// comparisons between different types.
struct|struct
name|TypeID
block|{
name|friend
name|bool
name|operator
operator|==
operator|(
name|TypeID
specifier|const
operator|&
name|LHS
operator|,
name|TypeID
specifier|const
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|m_id
operator|==
name|RHS
operator|.
name|m_id
return|;
block|}
name|friend
name|bool
name|operator
operator|!=
operator|(
name|TypeID
specifier|const
operator|&
name|LHS
operator|,
name|TypeID
specifier|const
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|m_id
operator|!=
name|RHS
operator|.
name|m_id
return|;
block|}
name|private
label|:
name|explicit
name|constexpr
name|TypeID
argument_list|(
specifier|const
name|int
operator|*
name|xid
argument_list|)
operator|:
name|m_id
argument_list|(
argument|xid
argument_list|)
block|{}
specifier|const
name|int
operator|*
specifier|const
name|m_id
expr_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|friend
name|class
name|TypeInfo
expr_stmt|;
block|}
struct|;
comment|// TypeInfo - Represent information for the specified type 'T', including a
comment|// unique TypeID.
name|template
operator|<
name|class
name|T
operator|>
name|class
name|TypeInfo
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
typedef|typedef
name|TypeID
name|ID
typedef|;
specifier|static
name|ID
specifier|const
modifier|&
name|GetID
parameter_list|()
block|{
specifier|static
name|ID
name|id
argument_list|(
operator|&
name|dummy_addr
argument_list|)
decl_stmt|;
return|return
name|id
return|;
block|}
name|private
label|:
specifier|static
specifier|const
name|int
name|dummy_addr
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|L
operator|,
name|class
name|R
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|TypeInfo
operator|<
name|L
operator|>
specifier|const
operator|&
operator|,
name|TypeInfo
operator|<
name|R
operator|>
specifier|const
operator|&
operator|)
block|{
return|return
name|std
operator|::
name|is_same
operator|<
name|L
operator|,
name|R
operator|>
operator|::
name|value
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|L
operator|,
name|class
name|R
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|TypeInfo
operator|<
name|L
operator|>
specifier|const
operator|&
name|lhs
operator|,
name|TypeInfo
operator|<
name|R
operator|>
specifier|const
operator|&
name|rhs
operator|)
block|{
return|return
operator|!
operator|(
name|lhs
operator|==
name|rhs
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|const
name|int
name|TypeInfo
operator|<
name|T
operator|>
operator|::
name|dummy_addr
operator|=
literal|42
expr_stmt|;
end_expr_stmt

begin_comment
comment|// makeTypeID - Return the TypeID for the specified type 'T'.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|constexpr
name|TypeID
specifier|const
operator|&
name|makeTypeID
argument_list|()
block|{
return|return
name|TypeInfo
operator|<
name|T
operator|>
operator|::
name|GetID
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
operator|...
name|Args
operator|>
expr|struct
name|ArgumentListID
block|{}
expr_stmt|;
end_expr_stmt

begin_comment
comment|// makeArgumentID - Create and return a unique identifier for a given set
end_comment

begin_comment
comment|// of arguments.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
operator|...
name|Args
operator|>
specifier|inline
name|constexpr
name|TypeID
specifier|const
operator|&
name|makeArgumentID
argument_list|()
block|{
return|return
name|makeTypeID
operator|<
name|ArgumentListID
operator|<
name|Args
operator|...
operator|>>
operator|(
operator|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace detail
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//                        AllocatorConstructController
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_macro
unit|struct
name|AllocatorConstructController
end_macro

begin_block
block|{
specifier|const
name|detail
operator|::
name|TypeID
operator|*
name|m_expected_args
expr_stmt|;
name|bool
name|m_allow_constructions
decl_stmt|;
name|bool
name|m_allow_unchecked
decl_stmt|;
name|int
name|m_expected_count
decl_stmt|;
name|void
name|clear
parameter_list|()
block|{
name|m_expected_args
operator|=
name|nullptr
expr_stmt|;
name|m_expected_count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// Check for and consume an expected construction added by 'expect'.
comment|// Return true if the construction was expected and false otherwise.
comment|// This should only be called by 'Allocator.construct'.
name|bool
name|check
argument_list|(
name|detail
operator|::
name|TypeID
specifier|const
operator|&
name|tid
argument_list|)
block|{
if|if
condition|(
operator|!
name|m_expected_args
condition|)
name|assert
argument_list|(
name|m_allow_unchecked
argument_list|)
expr_stmt|;
name|bool
name|res
init|=
operator|*
name|m_expected_args
operator|==
name|tid
decl_stmt|;
if|if
condition|(
name|m_expected_count
operator|==
operator|-
literal|1
operator|||
operator|--
name|m_expected_count
operator|==
operator|-
literal|1
condition|)
name|m_expected_args
operator|=
name|nullptr
expr_stmt|;
return|return
name|res
return|;
block|}
comment|// Return true iff there is an unchecked construction expression.
name|bool
name|unchecked
parameter_list|()
block|{
return|return
name|m_expected_args
operator|!=
name|nullptr
return|;
block|}
comment|// Expect a call to Allocator::construct with Args that match 'tid'.
name|void
name|expect
argument_list|(
name|detail
operator|::
name|TypeID
specifier|const
operator|&
name|tid
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|unchecked
argument_list|()
argument_list|)
expr_stmt|;
name|m_expected_args
operator|=
operator|&
name|tid
expr_stmt|;
block|}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|void
name|expect
argument_list|(
argument|int times =
literal|1
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|unchecked
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|times
operator|>
literal|0
argument_list|)
block|;
name|m_expected_count
operator|=
name|times
operator|-
literal|1
block|;
name|m_expected_args
operator|=
operator|&
name|detail
operator|::
name|makeArgumentID
operator|<
name|Args
operator|...
operator|>
operator|(
operator|)
block|;   }
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|bool
name|check
argument_list|()
block|{
return|return
name|check
argument_list|(
name|detail
operator|::
name|makeArgumentID
operator|<
name|Args
operator|...
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
comment|// Return true iff the program is currently within a call to "Allocator::construct"
name|bool
name|isInAllocatorConstruct
argument_list|()
specifier|const
block|{
return|return
name|m_allow_constructions
return|;
block|}
name|void
name|inAllocatorConstruct
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
name|m_allow_constructions
operator|=
name|value
expr_stmt|;
block|}
name|void
name|allowUnchecked
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
name|m_allow_unchecked
operator|=
name|value
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|m_allow_constructions
operator|=
name|false
expr_stmt|;
name|m_expected_args
operator|=
name|nullptr
expr_stmt|;
name|m_allow_unchecked
operator|=
name|false
expr_stmt|;
name|m_expected_count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|private
label|:
name|friend
name|AllocatorConstructController
modifier|*
name|getConstructController
parameter_list|()
function_decl|;
name|AllocatorConstructController
argument_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
name|AllocatorConstructController
argument_list|(
name|AllocatorConstructController
specifier|const
operator|&
argument_list|)
expr_stmt|;
name|AllocatorConstructController
modifier|&
name|operator
init|=
operator|(
name|AllocatorConstructController
specifier|const
operator|&
operator|)
decl_stmt|;
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|AllocatorConstructController
name|ConstructController
typedef|;
end_typedef

begin_comment
comment|// getConstructController - Return the global allocator construction controller.
end_comment

begin_function
specifier|inline
name|ConstructController
modifier|*
name|getConstructController
parameter_list|()
block|{
specifier|static
name|ConstructController
name|c
decl_stmt|;
return|return
operator|&
name|c
return|;
block|}
end_function

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//                       ContainerTestAllocator
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// ContainerTestAllocator - A STL allocator type that only allows 'construct'
end_comment

begin_comment
comment|// and 'destroy' to be called for 'AllowConstructT' types. ContainerTestAllocator
end_comment

begin_comment
comment|// uses the 'AllocatorConstructionController' interface.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|AllowConstructT
operator|>
name|class
name|ContainerTestAllocator
block|{   struct
name|InAllocatorConstructGuard
block|{
name|ConstructController
operator|*
name|m_cc
block|;
name|bool
name|m_old
block|;
name|InAllocatorConstructGuard
argument_list|(
name|ConstructController
operator|*
name|cc
argument_list|)
operator|:
name|m_cc
argument_list|(
argument|cc
argument_list|)
block|{
if|if
condition|(
name|m_cc
condition|)
block|{
name|m_old
operator|=
name|m_cc
operator|->
name|isInAllocatorConstruct
argument_list|()
expr_stmt|;
name|m_cc
operator|->
name|inAllocatorConstruct
argument_list|(
name|true
argument_list|)
expr_stmt|;
block|}
block|}
operator|~
name|InAllocatorConstructGuard
argument_list|()
block|{
if|if
condition|(
name|m_cc
condition|)
name|m_cc
operator|->
name|inAllocatorConstruct
argument_list|(
name|m_old
argument_list|)
expr_stmt|;
block|}
name|private
operator|:
name|InAllocatorConstructGuard
argument_list|(
name|InAllocatorConstructGuard
specifier|const
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|InAllocatorConstructGuard
modifier|&
name|operator
init|=
operator|(
name|InAllocatorConstructGuard
specifier|const
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_label
unit|};
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_decl_stmt
name|int
name|construct_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|destroy_called
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstructController
modifier|*
name|controller
decl_stmt|;
end_decl_stmt

begin_macro
name|ContainerTestAllocator
argument_list|()
end_macro

begin_label
name|TEST_NOEXCEPT
label|:
end_label

begin_macro
name|controller
argument_list|(
argument|getConstructController()
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|ContainerTestAllocator
argument_list|(
name|ConstructController
operator|*
name|c
argument_list|)
operator|:
name|controller
argument_list|(
argument|c
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|ContainerTestAllocator
argument_list|(
argument|ContainerTestAllocator<U
argument_list|,
argument|AllowConstructT> other
argument_list|)
name|TEST_NOEXCEPT
operator|:
name|controller
argument_list|(
argument|other.controller
argument_list|)
block|{}
name|T
operator|*
name|allocate
argument_list|(
argument|std::size_t n
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
operator|::
name|operator
name|new
argument_list|(
name|n
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|deallocate
argument_list|(
name|T
operator|*
name|p
argument_list|,
name|std
operator|::
name|size_t
argument_list|)
block|{
return|return
operator|::
name|operator
name|delete
argument_list|(
name|static_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|p
operator|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Up
operator|,
name|class
operator|...
name|Args
operator|>
name|void
name|construct
argument_list|(
argument|Up* p
argument_list|,
argument|Args&&... args
argument_list|)
block|{
name|static_assert
argument_list|(
operator|(
name|std
operator|::
name|is_same
operator|<
name|Up
operator|,
name|AllowConstructT
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Only allowed to construct Up"
argument_list|)
block|;
name|assert
argument_list|(
name|controller
operator|->
name|check
operator|<
name|Args
operator|&&
operator|...
operator|>
operator|(
operator|)
argument_list|)
block|;
block|{
name|InAllocatorConstructGuard
name|g
argument_list|(
name|controller
argument_list|)
block|;
operator|::
name|new
argument_list|(
argument|(void*)p
argument_list|)
name|Up
argument_list|(
name|std
operator|::
name|forward
operator|<
name|Args
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
block|;       }
block|}
name|template
operator|<
name|class
name|Up
operator|>
name|void
name|destroy
argument_list|(
argument|Up* p
argument_list|)
block|{
name|static_assert
argument_list|(
operator|(
name|std
operator|::
name|is_same
operator|<
name|Up
operator|,
name|AllowConstructT
operator|>
operator|::
name|value
operator|)
argument_list|,
literal|"Only allowed to destroy Up"
argument_list|)
block|;
block|{
name|InAllocatorConstructGuard
name|g
argument_list|(
name|controller
argument_list|)
block|;
name|p
operator|->
expr|~
name|Up
argument_list|()
block|;       }
block|}
name|friend
name|bool
name|operator
operator|==
operator|(
name|ContainerTestAllocator
operator|,
name|ContainerTestAllocator
operator|)
block|{
return|return
name|true
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|ContainerTestAllocator
name|x
operator|,
name|ContainerTestAllocator
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|namespace
name|test_detail
block|{
typedef|typedef
name|ContainerTestAllocator
operator|<
name|int
operator|,
name|int
operator|>
name|A1
expr_stmt|;
typedef|typedef
name|std
operator|::
name|allocator_traits
operator|<
name|A1
operator|>
name|A1T
expr_stmt|;
typedef|typedef
name|ContainerTestAllocator
operator|<
name|float
operator|,
name|int
operator|>
name|A2
expr_stmt|;
typedef|typedef
name|std
operator|::
name|allocator_traits
operator|<
name|A2
operator|>
name|A2T
expr_stmt|;
name|static_assert
argument_list|(
name|std
operator|::
name|is_same
operator|<
name|A1T
operator|::
name|rebind_traits
operator|<
name|float
operator|>
argument_list|,
name|A2T
operator|>
operator|::
name|value
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|static_assert
argument_list|(
name|std
operator|::
name|is_same
operator|<
name|A2T
operator|::
name|rebind_traits
operator|<
name|int
operator|>
argument_list|,
name|A1T
operator|>
operator|::
name|value
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace test_detail
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//  'CopyInsertable', 'MoveInsertable' and 'EmplaceConstructible' test types
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_expr_stmt
name|template
operator|<
name|int
name|Dummy
operator|=
literal|0
operator|>
expr|struct
name|CopyInsertable
block|{
name|int
name|data
block|;
name|mutable
name|bool
name|copied_once
block|;
name|bool
name|constructed_under_allocator
block|;
name|explicit
name|CopyInsertable
argument_list|(
argument|int val
argument_list|)
operator|:
name|data
argument_list|(
name|val
argument_list|)
block|,
name|copied_once
argument_list|(
name|false
argument_list|)
block|,
name|constructed_under_allocator
argument_list|(
argument|false
argument_list|)
block|{
if|if
condition|(
name|getConstructController
argument_list|()
operator|->
name|isInAllocatorConstruct
argument_list|()
condition|)
block|{
name|copied_once
operator|=
name|true
expr_stmt|;
name|constructed_under_allocator
operator|=
name|true
expr_stmt|;
block|}
block|}
name|CopyInsertable
argument_list|()
operator|:
name|data
argument_list|(
literal|0
argument_list|)
operator|,
name|copied_once
argument_list|(
name|false
argument_list|)
operator|,
name|constructed_under_allocator
argument_list|(
argument|true
argument_list|)
block|{
name|assert
argument_list|(
name|getConstructController
argument_list|()
operator|->
name|isInAllocatorConstruct
argument_list|()
argument_list|)
block|;   }
name|CopyInsertable
argument_list|(
name|CopyInsertable
specifier|const
operator|&
name|other
argument_list|)
operator|:
name|data
argument_list|(
name|other
operator|.
name|data
argument_list|)
operator|,
name|copied_once
argument_list|(
name|true
argument_list|)
operator|,
name|constructed_under_allocator
argument_list|(
argument|true
argument_list|)
block|{
name|assert
argument_list|(
name|getConstructController
argument_list|()
operator|->
name|isInAllocatorConstruct
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|other
operator|.
name|copied_once
operator|==
name|false
argument_list|)
block|;
name|other
operator|.
name|copied_once
operator|=
name|true
block|;   }
name|CopyInsertable
argument_list|(
name|CopyInsertable
operator|&
name|other
argument_list|)
operator|:
name|data
argument_list|(
name|other
operator|.
name|data
argument_list|)
operator|,
name|copied_once
argument_list|(
name|true
argument_list|)
operator|,
name|constructed_under_allocator
argument_list|(
argument|true
argument_list|)
block|{
name|assert
argument_list|(
name|getConstructController
argument_list|()
operator|->
name|isInAllocatorConstruct
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|other
operator|.
name|copied_once
operator|==
name|false
argument_list|)
block|;
name|other
operator|.
name|copied_once
operator|=
name|true
block|;   }
name|CopyInsertable
argument_list|(
name|CopyInsertable
operator|&&
name|other
argument_list|)
operator|:
name|CopyInsertable
argument_list|(
argument|other
argument_list|)
block|{}
comment|// Forgive pair for not downcasting this to an lvalue it its constructors.
name|CopyInsertable
argument_list|(
name|CopyInsertable
specifier|const
operator|&&
name|other
argument_list|)
operator|:
name|CopyInsertable
argument_list|(
argument|other
argument_list|)
block|{}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
name|CopyInsertable
argument_list|(
argument|Args&&... args
argument_list|)
block|{
name|assert
argument_list|(
name|false
argument_list|)
block|;   }
operator|~
name|CopyInsertable
argument_list|()
block|{
name|assert
argument_list|(
name|constructed_under_allocator
operator|==
name|getConstructController
argument_list|()
operator|->
name|isInAllocatorConstruct
argument_list|()
argument_list|)
block|;   }
name|void
name|reset
argument_list|(
argument|int value
argument_list|)
block|{
name|data
operator|=
name|value
block|;
name|copied_once
operator|=
name|false
block|;
name|constructed_under_allocator
operator|=
name|false
block|;   }
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|int
name|ID
operator|>
name|bool
name|operator
operator|==
operator|(
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|L
operator|,
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|R
operator|)
block|{
return|return
name|L
operator|.
name|data
operator|==
name|R
operator|.
name|data
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|ID
operator|>
name|bool
name|operator
operator|!=
operator|(
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|L
operator|,
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|R
operator|)
block|{
return|return
name|L
operator|.
name|data
operator|!=
name|R
operator|.
name|data
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|ID
operator|>
name|bool
name|operator
operator|<
operator|(
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|L
operator|,
name|CopyInsertable
operator|<
name|ID
operator|>
specifier|const
operator|&
name|R
operator|)
block|{
return|return
name|L
operator|.
name|data
operator|<
name|R
operator|.
name|data
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_LIBCPP_BEGIN_NAMESPACE_STD
end_ifdef

begin_decl_stmt
name|_LIBCPP_BEGIN_NAMESPACE_STD
else|#
directive|else
name|namespace
name|std
block|{
endif|#
directive|endif
name|template
operator|<
name|int
name|ID
operator|>
expr|struct
name|hash
operator|<
operator|::
name|CopyInsertable
operator|<
name|ID
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|CopyInsertable
operator|<
name|ID
operator|>
name|argument_type
expr_stmt|;
typedef|typedef
name|size_t
name|result_type
typedef|;
name|size_t
name|operator
argument_list|()
operator|(
name|argument_type
specifier|const
operator|&
name|arg
operator|)
specifier|const
block|{
return|return
name|arg
operator|.
name|data
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Key
operator|,
name|class
name|_Value
operator|,
name|class
name|_Less
operator|,
name|class
name|_Alloc
operator|>
name|class
name|map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Key
operator|,
name|class
name|_Value
operator|,
name|class
name|_Less
operator|,
name|class
name|_Alloc
operator|>
name|class
name|multimap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_Less
operator|,
name|class
name|_Alloc
operator|>
name|class
name|set
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_Less
operator|,
name|class
name|_Alloc
operator|>
name|class
name|multiset
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Key
operator|,
name|class
name|_Value
operator|,
name|class
name|_Hash
operator|,
name|class
name|_Equals
operator|,
name|class
name|_Alloc
operator|>
name|class
name|unordered_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Key
operator|,
name|class
name|_Value
operator|,
name|class
name|_Hash
operator|,
name|class
name|_Equals
operator|,
name|class
name|_Alloc
operator|>
name|class
name|unordered_multimap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_Hash
operator|,
name|class
name|_Equals
operator|,
name|class
name|_Alloc
operator|>
name|class
name|unordered_set
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_Hash
operator|,
name|class
name|_Equals
operator|,
name|class
name|_Alloc
operator|>
name|class
name|unordered_multiset
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_LIBCPP_END_NAMESPACE_STD
end_ifdef

begin_expr_stmt
name|_LIBCPP_END_NAMESPACE_STD
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
unit|}
comment|// end namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// TCT - Test container type
end_comment

begin_macro
unit|namespace
name|TCT
end_macro

begin_block
block|{
name|template
operator|<
name|class
name|Key
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
operator|,
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|2
operator|>
operator|,
name|class
name|ValueTp
operator|=
name|std
operator|::
name|pair
operator|<
specifier|const
name|Key
operator|,
name|Value
operator|>
expr|>
name|using
name|unordered_map
operator|=
name|std
operator|::
name|unordered_map
operator|<
name|Key
operator|,
name|Value
operator|,
name|std
operator|::
name|hash
operator|<
name|Key
operator|>
operator|,
name|std
operator|::
name|equal_to
operator|<
name|Key
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|ValueTp
operator|,
name|ValueTp
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Key
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
operator|,
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|2
operator|>
operator|,
name|class
name|ValueTp
operator|=
name|std
operator|::
name|pair
operator|<
specifier|const
name|Key
operator|,
name|Value
operator|>
expr|>
name|using
name|map
operator|=
name|std
operator|::
name|map
operator|<
name|Key
operator|,
name|Value
operator|,
name|std
operator|::
name|less
operator|<
name|Key
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|ValueTp
operator|,
name|ValueTp
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Key
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
operator|,
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|2
operator|>
operator|,
name|class
name|ValueTp
operator|=
name|std
operator|::
name|pair
operator|<
specifier|const
name|Key
operator|,
name|Value
operator|>
expr|>
name|using
name|unordered_multimap
operator|=
name|std
operator|::
name|unordered_multimap
operator|<
name|Key
operator|,
name|Value
operator|,
name|std
operator|::
name|hash
operator|<
name|Key
operator|>
operator|,
name|std
operator|::
name|equal_to
operator|<
name|Key
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|ValueTp
operator|,
name|ValueTp
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Key
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
operator|,
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|2
operator|>
operator|,
name|class
name|ValueTp
operator|=
name|std
operator|::
name|pair
operator|<
specifier|const
name|Key
operator|,
name|Value
operator|>
expr|>
name|using
name|multimap
operator|=
name|std
operator|::
name|multimap
operator|<
name|Key
operator|,
name|Value
operator|,
name|std
operator|::
name|less
operator|<
name|Key
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|ValueTp
operator|,
name|ValueTp
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
expr|>
name|using
name|unordered_set
operator|=
name|std
operator|::
name|unordered_set
operator|<
name|Value
operator|,
name|std
operator|::
name|hash
operator|<
name|Value
operator|>
operator|,
name|std
operator|::
name|equal_to
operator|<
name|Value
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|Value
operator|,
name|Value
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
expr|>
name|using
name|set
operator|=
name|std
operator|::
name|set
operator|<
name|Value
operator|,
name|std
operator|::
name|less
operator|<
name|Value
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|Value
operator|,
name|Value
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
expr|>
name|using
name|unordered_multiset
operator|=
name|std
operator|::
name|unordered_multiset
operator|<
name|Value
operator|,
name|std
operator|::
name|hash
operator|<
name|Value
operator|>
operator|,
name|std
operator|::
name|equal_to
operator|<
name|Value
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|Value
operator|,
name|Value
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|class
name|Value
operator|=
name|CopyInsertable
operator|<
literal|1
operator|>
expr|>
name|using
name|multiset
operator|=
name|std
operator|::
name|multiset
operator|<
name|Value
operator|,
name|std
operator|::
name|less
operator|<
name|Value
operator|>
operator|,
name|ContainerTestAllocator
operator|<
name|Value
operator|,
name|Value
operator|>
expr|>
expr_stmt|;
block|}
end_block

begin_comment
comment|// end namespace TCT
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SUPPORT_CONTAINER_TEST_TYPES_H
end_comment

end_unit

