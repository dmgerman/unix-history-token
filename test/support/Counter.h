begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|COUNTER_H
end_ifndef

begin_define
define|#
directive|define
name|COUNTER_H
end_define

begin_include
include|#
directive|include
file|<functional>
end_include

begin_comment
comment|// for std::hash
end_comment

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_struct
struct|struct
name|Counter_base
block|{
specifier|static
name|int
name|gConstructed
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Counter
operator|:
name|public
name|Counter_base
block|{
name|public
operator|:
name|Counter
argument_list|()
operator|:
name|data_
argument_list|()
block|{
operator|++
name|gConstructed
block|; }
name|Counter
argument_list|(
specifier|const
name|T
operator|&
name|data
argument_list|)
operator|:
name|data_
argument_list|(
argument|data
argument_list|)
block|{
operator|++
name|gConstructed
block|; }
name|Counter
argument_list|(
specifier|const
name|Counter
operator|&
name|rhs
argument_list|)
operator|:
name|data_
argument_list|(
argument|rhs.data_
argument_list|)
block|{
operator|++
name|gConstructed
block|; }
name|Counter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Counter
operator|&
name|rhs
operator|)
block|{
operator|++
name|gConstructed
block|;
name|data_
operator|=
name|rhs
operator|.
name|data_
block|;
return|return
operator|*
name|this
return|;
block|}
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
name|Counter
argument_list|(
name|Counter
operator|&&
name|rhs
argument_list|)
operator|:
name|data_
argument_list|(
argument|std::move(rhs.data_)
argument_list|)
block|{
operator|++
name|gConstructed
block|; }
name|Counter
operator|&
name|operator
operator|=
operator|(
name|Counter
operator|&&
name|rhs
operator|)
block|{
operator|++
name|gConstructed
block|;
name|data_
operator|=
name|std
operator|::
name|move
argument_list|(
name|rhs
operator|.
name|data_
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
operator|~
name|Counter
argument_list|()
block|{
operator|--
name|gConstructed
block|; }
specifier|const
name|T
operator|&
name|get
argument_list|()
specifier|const
block|{
return|return
name|data_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Counter
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|data_
operator|==
name|x
operator|.
name|data_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|Counter
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|data_
operator|<
name|x
operator|.
name|data_
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|T
name|data_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|int
name|Counter_base
operator|::
name|gConstructed
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|hash
operator|<
name|Counter
operator|<
name|T
operator|>
expr|>
operator|:
name|public
name|std
operator|::
name|unary_function
operator|<
name|Counter
operator|<
name|T
operator|>
operator|,
name|std
operator|::
name|size_t
operator|>
block|{
name|std
operator|::
name|size_t
name|operator
argument_list|()
operator|(
specifier|const
name|Counter
operator|<
name|T
operator|>
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|std
operator|::
name|hash
operator|<
name|T
operator|>
operator|(
name|x
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
expr|}
block|; }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

