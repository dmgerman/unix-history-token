begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//<memory>
end_comment

begin_comment
comment|// unique_ptr
end_comment

begin_comment
comment|// Example move-only deleter
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SUPPORT_DELETER_TYPES_H
end_ifndef

begin_define
define|#
directive|define
name|SUPPORT_DELETER_TYPES_H
end_define

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_include
include|#
directive|include
file|"min_allocator.h"
end_include

begin_if
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
end_if

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Deleter
block|{
name|int
name|state_
block|;
name|Deleter
argument_list|(
specifier|const
name|Deleter
operator|&
argument_list|)
block|;
name|Deleter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Deleter
operator|&
operator|)
block|;
name|public
operator|:
name|Deleter
argument_list|(
name|Deleter
operator|&&
name|r
argument_list|)
operator|:
name|state_
argument_list|(
argument|r.state_
argument_list|)
block|{
name|r
operator|.
name|state_
operator|=
literal|0
block|;}
name|Deleter
operator|&
name|operator
operator|=
operator|(
name|Deleter
operator|&&
name|r
operator|)
block|{
name|state_
operator|=
name|r
operator|.
name|state_
block|;
name|r
operator|.
name|state_
operator|=
literal|0
block|;
return|return
operator|*
name|this
return|;
block|}
name|Deleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|Deleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|Deleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|template
operator|<
name|class
name|U
operator|>
name|Deleter
argument_list|(
argument|Deleter<U>&& d
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
operator|:
name|state_
argument_list|(
argument|d.state()
argument_list|)
block|{
name|d
operator|.
name|set_state
argument_list|(
literal|0
argument_list|)
block|;}
name|private
operator|:
name|template
operator|<
name|class
name|U
operator|>
name|Deleter
argument_list|(
argument|const Deleter<U>& d
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Deleter
operator|<
name|T
index|[]
operator|>
block|{
name|int
name|state_
block|;
name|Deleter
argument_list|(
specifier|const
name|Deleter
operator|&
argument_list|)
block|;
name|Deleter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Deleter
operator|&
operator|)
block|;
name|public
operator|:
name|Deleter
argument_list|(
name|Deleter
operator|&&
name|r
argument_list|)
operator|:
name|state_
argument_list|(
argument|r.state_
argument_list|)
block|{
name|r
operator|.
name|state_
operator|=
literal|0
block|;}
name|Deleter
operator|&
name|operator
operator|=
operator|(
name|Deleter
operator|&&
name|r
operator|)
block|{
name|state_
operator|=
name|r
operator|.
name|state_
block|;
name|r
operator|.
name|state_
operator|=
literal|0
block|;
return|return
operator|*
name|this
return|;
block|}
name|Deleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|Deleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|Deleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_else
unit|};
else|#
directive|else
end_else

begin_comment
comment|// TEST_STD_VER< 11
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Deleter
block|{
name|mutable
name|int
name|state_
block|;
name|public
operator|:
name|Deleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|Deleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
name|Deleter
argument_list|(
name|Deleter
specifier|const
operator|&
name|other
argument_list|)
operator|:
name|state_
argument_list|(
argument|other.state_
argument_list|)
block|{
name|other
operator|.
name|state_
operator|=
literal|0
block|;     }
name|Deleter
operator|&
name|operator
operator|=
operator|(
name|Deleter
specifier|const
operator|&
name|other
operator|)
block|{
name|state_
operator|=
name|other
operator|.
name|state_
block|;
name|other
operator|.
name|state_
operator|=
literal|0
block|;
return|return
operator|*
name|this
return|;
block|}
operator|~
name|Deleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|template
operator|<
name|class
name|U
operator|>
name|Deleter
argument_list|(
argument|Deleter<U> d
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
operator|:
name|state_
argument_list|(
argument|d.state()
argument_list|)
block|{}
name|public
operator|:
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|Deleter
operator|<
name|T
index|[]
operator|>
block|{
name|mutable
name|int
name|state_
block|;
name|public
operator|:
name|Deleter
argument_list|(
name|Deleter
specifier|const
operator|&
name|other
argument_list|)
operator|:
name|state_
argument_list|(
argument|other.state_
argument_list|)
block|{
name|other
operator|.
name|state_
operator|=
literal|0
block|;     }
name|Deleter
operator|&
name|operator
operator|=
operator|(
name|Deleter
specifier|const
operator|&
name|other
operator|)
block|{
name|state_
operator|=
name|other
operator|.
name|state_
block|;
name|other
operator|.
name|state_
operator|=
literal|0
block|;
return|return
operator|*
name|this
return|;
block|}
name|Deleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|Deleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|Deleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|swap
argument_list|(
argument|Deleter<T>& x
argument_list|,
argument|Deleter<T>& y
argument_list|)
block|{
name|Deleter
operator|<
name|T
operator|>
name|t
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|x
argument_list|)
argument_list|)
block|;
name|x
operator|=
name|std
operator|::
name|move
argument_list|(
name|y
argument_list|)
block|;
name|y
operator|=
name|std
operator|::
name|move
argument_list|(
name|t
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|class
name|CDeleter
block|{
name|int
name|state_
block|;
name|public
operator|:
name|CDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|CDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|CDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|template
operator|<
name|class
name|U
operator|>
name|CDeleter
argument_list|(
specifier|const
name|CDeleter
operator|<
name|U
operator|>
operator|&
name|d
argument_list|)
operator|:
name|state_
argument_list|(
argument|d.state()
argument_list|)
block|{}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|CDeleter
operator|<
name|T
index|[]
operator|>
block|{
name|int
name|state_
block|;
name|public
operator|:
name|CDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|CDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|CDeleter
argument_list|(
specifier|const
name|CDeleter
operator|<
name|U
operator|>
operator|&
name|d
argument_list|)
operator|:
name|state_
argument_list|(
argument|d.state()
argument_list|)
block|{}
operator|~
name|CDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|void
name|swap
argument_list|(
argument|CDeleter<T>& x
argument_list|,
argument|CDeleter<T>& y
argument_list|)
block|{
name|CDeleter
operator|<
name|T
operator|>
name|t
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|x
argument_list|)
argument_list|)
block|;
name|x
operator|=
name|std
operator|::
name|move
argument_list|(
name|y
argument_list|)
block|;
name|y
operator|=
name|std
operator|::
name|move
argument_list|(
name|t
argument_list|)
block|; }
comment|// Non-copyable deleter
name|template
operator|<
name|class
name|T
operator|>
name|class
name|NCDeleter
block|{
name|int
name|state_
block|;
name|NCDeleter
argument_list|(
name|NCDeleter
specifier|const
operator|&
argument_list|)
block|;
name|NCDeleter
operator|&
name|operator
operator|=
operator|(
name|NCDeleter
specifier|const
operator|&
operator|)
block|;
name|public
operator|:
name|NCDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|NCDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|NCDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|NCDeleter
operator|<
name|T
index|[]
operator|>
block|{
name|int
name|state_
block|;
name|NCDeleter
argument_list|(
name|NCDeleter
specifier|const
operator|&
argument_list|)
block|;
name|NCDeleter
operator|&
name|operator
operator|=
operator|(
name|NCDeleter
specifier|const
operator|&
operator|)
block|;
name|public
operator|:
name|NCDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|NCDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|NCDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_comment
unit|};
comment|// Non-copyable deleter
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|NCConstDeleter
block|{
name|int
name|state_
block|;
name|NCConstDeleter
argument_list|(
name|NCConstDeleter
specifier|const
operator|&
argument_list|)
block|;
name|NCConstDeleter
operator|&
name|operator
operator|=
operator|(
name|NCConstDeleter
specifier|const
operator|&
operator|)
block|;
name|public
operator|:
name|NCConstDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|NCConstDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|NCConstDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
specifier|const
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|NCConstDeleter
operator|<
name|T
index|[]
operator|>
block|{
name|int
name|state_
block|;
name|NCConstDeleter
argument_list|(
name|NCConstDeleter
specifier|const
operator|&
argument_list|)
block|;
name|NCConstDeleter
operator|&
name|operator
operator|=
operator|(
name|NCConstDeleter
specifier|const
operator|&
operator|)
block|;
name|public
operator|:
name|NCConstDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|NCConstDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|NCConstDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
specifier|const
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_comment
unit|};
comment|// Non-copyable deleter
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|CopyDeleter
block|{
name|int
name|state_
block|;
name|public
operator|:
name|CopyDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|CopyDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|CopyDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|CopyDeleter
argument_list|(
name|CopyDeleter
specifier|const
operator|&
name|other
argument_list|)
operator|:
name|state_
argument_list|(
argument|other.state_
argument_list|)
block|{}
name|CopyDeleter
operator|&
name|operator
operator|=
operator|(
name|CopyDeleter
specifier|const
operator|&
name|other
operator|)
block|{
name|state_
operator|=
name|other
operator|.
name|state_
block|;
return|return
operator|*
name|this
return|;
block|}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
name|p
block|;}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|CopyDeleter
operator|<
name|T
index|[]
operator|>
block|{
name|int
name|state_
block|;
name|public
operator|:
name|CopyDeleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|CopyDeleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{}
operator|~
name|CopyDeleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|CopyDeleter
argument_list|(
name|CopyDeleter
specifier|const
operator|&
name|other
argument_list|)
operator|:
name|state_
argument_list|(
argument|other.state_
argument_list|)
block|{}
name|CopyDeleter
operator|&
name|operator
operator|=
operator|(
name|CopyDeleter
specifier|const
operator|&
name|other
operator|)
block|{
name|state_
operator|=
name|other
operator|.
name|state_
block|;
return|return
operator|*
name|this
return|;
block|}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_state
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|state_
operator|=
name|i
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|delete
index|[]
name|p
block|;}
end_expr_stmt

begin_struct
unit|};
struct|struct
name|test_deleter_base
block|{
specifier|static
name|int
name|count
decl_stmt|;
specifier|static
name|int
name|dealloc_count
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|int
name|test_deleter_base
operator|::
name|count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|test_deleter_base
operator|::
name|dealloc_count
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|test_deleter
operator|:
name|public
name|test_deleter_base
block|{
name|int
name|state_
block|;
name|public
operator|:
name|test_deleter
argument_list|()
operator|:
name|state_
argument_list|(
literal|0
argument_list|)
block|{
operator|++
name|count
block|;}
name|explicit
name|test_deleter
argument_list|(
argument|int s
argument_list|)
operator|:
name|state_
argument_list|(
argument|s
argument_list|)
block|{
operator|++
name|count
block|;}
name|test_deleter
argument_list|(
specifier|const
name|test_deleter
operator|&
name|d
argument_list|)
operator|:
name|state_
argument_list|(
argument|d.state_
argument_list|)
block|{
operator|++
name|count
block|;}
operator|~
name|test_deleter
argument_list|()
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
operator|--
name|count
block|;
name|state_
operator|=
operator|-
literal|1
block|;}
name|int
name|state
argument_list|()
specifier|const
block|{
return|return
name|state_
return|;
block|}
name|void
name|set_state
argument_list|(
argument|int i
argument_list|)
block|{
name|state_
operator|=
name|i
block|;}
name|void
name|operator
argument_list|()
operator|(
name|T
operator|*
name|p
operator|)
block|{
name|assert
argument_list|(
name|state_
operator|>=
literal|0
argument_list|)
block|;
operator|++
name|dealloc_count
block|;
name|delete
name|p
block|;}
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
name|test_deleter
operator|*
name|operator
operator|&
operator|(
operator|)
specifier|const
operator|=
name|delete
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|test_deleter
operator|*
name|operator
operator|&
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|void
name|swap
argument_list|(
argument|test_deleter<T>& x
argument_list|,
argument|test_deleter<T>& y
argument_list|)
block|{
name|test_deleter
operator|<
name|T
operator|>
name|t
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|x
argument_list|)
argument_list|)
block|;
name|x
operator|=
name|std
operator|::
name|move
argument_list|(
name|y
argument_list|)
block|;
name|y
operator|=
name|std
operator|::
name|move
argument_list|(
name|t
argument_list|)
block|; }
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
name|template
operator|<
name|class
name|T
operator|,
name|size_t
name|ID
operator|=
literal|0
operator|>
name|class
name|PointerDeleter
block|{
name|PointerDeleter
argument_list|(
specifier|const
name|PointerDeleter
operator|&
argument_list|)
block|;
name|PointerDeleter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|PointerDeleter
operator|&
operator|)
block|;
name|public
operator|:
typedef|typedef
name|min_pointer
operator|<
name|T
operator|,
name|std
operator|::
name|integral_constant
operator|<
name|size_t
operator|,
name|ID
operator|>>
name|pointer
expr_stmt|;
name|PointerDeleter
argument_list|()
operator|=
block|default
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|PointerDeleter
argument_list|(
name|PointerDeleter
operator|&&
argument_list|)
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|PointerDeleter
modifier|&
name|operator
init|=
operator|(
name|PointerDeleter
operator|&&
operator|)
operator|=
expr|default
decl_stmt|;
end_decl_stmt

begin_function
name|explicit
name|PointerDeleter
parameter_list|(
name|int
parameter_list|)
block|{}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|PointerDeleter
argument_list|(
argument|PointerDeleter<U
argument_list|,
argument|ID>&&
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
name|pointer
name|p
operator|)
block|{
if|if
condition|(
name|p
condition|)
block|{
name|delete
name|std
operator|::
name|addressof
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  private:
name|template
operator|<
name|class
name|U
operator|>
name|PointerDeleter
argument_list|(
argument|const PointerDeleter<U
argument_list|,
argument|ID>&
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|size_t
name|ID
operator|>
name|class
name|PointerDeleter
operator|<
name|T
index|[]
operator|,
name|ID
operator|>
block|{
name|PointerDeleter
argument_list|(
specifier|const
name|PointerDeleter
operator|&
argument_list|)
block|;
name|PointerDeleter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|PointerDeleter
operator|&
operator|)
block|;
name|public
operator|:
typedef|typedef
name|min_pointer
operator|<
name|T
operator|,
name|std
operator|::
name|integral_constant
operator|<
name|size_t
operator|,
name|ID
operator|>
expr|>
name|pointer
expr_stmt|;
name|PointerDeleter
argument_list|()
operator|=
block|default
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|PointerDeleter
argument_list|(
name|PointerDeleter
operator|&&
argument_list|)
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|PointerDeleter
modifier|&
name|operator
init|=
operator|(
name|PointerDeleter
operator|&&
operator|)
operator|=
expr|default
decl_stmt|;
end_decl_stmt

begin_function
name|explicit
name|PointerDeleter
parameter_list|(
name|int
parameter_list|)
block|{}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|PointerDeleter
argument_list|(
argument|PointerDeleter<U
argument_list|,
argument|ID>&&
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
block|{}
name|void
name|operator
argument_list|()
operator|(
name|pointer
name|p
operator|)
block|{
if|if
condition|(
name|p
condition|)
block|{
name|delete
index|[]
name|std
operator|::
name|addressof
argument_list|(
operator|*
name|p
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  private:
name|template
operator|<
name|class
name|U
operator|>
name|PointerDeleter
argument_list|(
argument|const PointerDeleter<U
argument_list|,
argument|ID>&
argument_list|,
argument|typename std::enable_if<!std::is_same<U
argument_list|,
argument|T>::value>::type* =
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|// TEST_STD_VER>= 11
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SUPPORT_DELETER_TYPES_H
end_comment

end_unit

