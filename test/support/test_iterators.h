begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ITERATORS_H
end_ifndef

begin_define
define|#
directive|define
name|ITERATORS_H
end_define

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<stdexcept>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|"test_macros.h"
end_include

begin_if
if|#
directive|if
name|TEST_STD_VER
operator|>=
literal|11
end_if

begin_define
define|#
directive|define
name|DELETE_FUNCTION
value|= delete
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DELETE_FUNCTION
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|output_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|output_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|output_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|output_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|output_iterator
argument_list|(
argument|It it
argument_list|)
end_macro

begin_macro
unit|:
name|it_
argument_list|(
argument|it
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|output_iterator
argument_list|(
specifier|const
name|output_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|output_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|output_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|output_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|It
operator|,
name|class
name|ItTraits
operator|=
name|It
operator|>
name|class
name|input_iterator
block|{
typedef|typedef
name|std
operator|::
name|iterator_traits
operator|<
name|ItTraits
operator|>
name|Traits
expr_stmt|;
name|It
name|it_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|,
name|class
name|T
operator|>
name|friend
name|class
name|input_iterator
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|std
operator|::
name|input_iterator_tag
name|iterator_category
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Traits
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Traits
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Traits
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|TEST_CONSTEXPR_CXX14
end_macro

begin_expr_stmt
name|input_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|TEST_CONSTEXPR_CXX14
name|input_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|,
name|class
name|T
operator|>
name|TEST_CONSTEXPR_CXX14
name|input_iterator
argument_list|(
specifier|const
name|input_iterator
operator|<
name|U
argument_list|,
name|T
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|TEST_CONSTEXPR_CXX14
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|input_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|input_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|input_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|TEST_CONSTEXPR_CXX14
name|bool
name|operator
operator|==
operator|(
specifier|const
name|input_iterator
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|it_
operator|==
name|y
operator|.
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|TEST_CONSTEXPR_CXX14
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|input_iterator
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|TV
operator|,
name|class
name|U
operator|,
name|class
name|UV
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|input_iterator
operator|<
name|T
operator|,
name|TV
operator|>
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|<
name|U
operator|,
name|UV
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|TV
operator|,
name|class
name|U
operator|,
name|class
name|UV
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|input_iterator
operator|<
name|T
operator|,
name|TV
operator|>
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|<
name|U
operator|,
name|UV
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|forward_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|forward_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|TEST_CONSTEXPR_CXX14
end_macro

begin_expr_stmt
name|forward_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|TEST_CONSTEXPR_CXX14
name|forward_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|TEST_CONSTEXPR_CXX14
name|forward_iterator
argument_list|(
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|TEST_CONSTEXPR_CXX14
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|forward_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|forward_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|forward_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|TEST_CONSTEXPR_CXX14
name|bool
name|operator
operator|==
operator|(
specifier|const
name|forward_iterator
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|it_
operator|==
name|y
operator|.
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|TEST_CONSTEXPR_CXX14
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|forward_iterator
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|==
operator|(
specifier|const
name|forward_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|!=
operator|(
specifier|const
name|forward_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|bidirectional_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|bidirectional_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|TEST_CONSTEXPR_CXX14
end_macro

begin_expr_stmt
name|bidirectional_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
argument_list|(
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|TEST_CONSTEXPR_CXX14
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|bidirectional_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|bidirectional_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|bidirectional_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|==
operator|(
specifier|const
name|bidirectional_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|!=
operator|(
specifier|const
name|bidirectional_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|random_access_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|random_access_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|TEST_CONSTEXPR_CXX14
end_macro

begin_expr_stmt
name|random_access_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
argument_list|(
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|TEST_CONSTEXPR_CXX14
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|it_
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|+=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|,
name|random_access_iterator
name|x
operator|)
block|{
name|x
operator|+=
name|n
block|;
return|return
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|TEST_CONSTEXPR_CXX14
name|random_access_iterator
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|-=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|TEST_CONSTEXPR_CXX14
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
name|it_
index|[
name|n
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|==
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|!=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|<
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|<
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|<=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|y
operator|<
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|>
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|TEST_CONSTEXPR_CXX14
name|operator
operator|>=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|<
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|T
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|-
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|output_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|input_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|forward_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|bidirectional_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|random_access_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
comment|// everything else
specifier|inline
name|TEST_CONSTEXPR_CXX14
name|Iter
name|base
argument_list|(
argument|Iter i
argument_list|)
block|{
return|return
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|ThrowingIterator
block|{
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_enum
enum|enum
name|ThrowingAction
block|{
name|TAIncrement
block|,
name|TADecrement
block|,
name|TADereference
block|,
name|TAAssignment
block|,
name|TAComparison
block|}
enum|;
end_enum

begin_comment
comment|//  Constructors
end_comment

begin_expr_stmt
name|ThrowingIterator
argument_list|()
operator|:
name|begin_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|end_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|current_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|action_
argument_list|(
name|TADereference
argument_list|)
operator|,
name|index_
argument_list|(
literal|0
argument_list|)
block|{}
name|ThrowingIterator
argument_list|(
argument|const T *first
argument_list|,
argument|const T *last
argument_list|,
argument|size_t index =
literal|0
argument_list|,
argument|ThrowingAction action = TADereference
argument_list|)
operator|:
name|begin_
argument_list|(
name|first
argument_list|)
operator|,
name|end_
argument_list|(
name|last
argument_list|)
operator|,
name|current_
argument_list|(
name|first
argument_list|)
operator|,
name|action_
argument_list|(
name|action
argument_list|)
operator|,
name|index_
argument_list|(
argument|index
argument_list|)
block|{}
name|ThrowingIterator
argument_list|(
specifier|const
name|ThrowingIterator
operator|&
name|rhs
argument_list|)
operator|:
name|begin_
argument_list|(
name|rhs
operator|.
name|begin_
argument_list|)
operator|,
name|end_
argument_list|(
name|rhs
operator|.
name|end_
argument_list|)
operator|,
name|current_
argument_list|(
name|rhs
operator|.
name|current_
argument_list|)
operator|,
name|action_
argument_list|(
name|rhs
operator|.
name|action_
argument_list|)
operator|,
name|index_
argument_list|(
argument|rhs.index_
argument_list|)
block|{}
name|ThrowingIterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ThrowingIterator
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|action_
operator|==
name|TAAssignment
condition|)
block|{
if|if
condition|(
name|index_
operator|==
literal|0
condition|)
ifndef|#
directive|ifndef
name|TEST_HAS_NO_EXCEPTIONS
name|throw
name|std
operator|::
name|runtime_error
argument_list|(
literal|"throw from iterator assignment"
argument_list|)
expr_stmt|;
else|#
directive|else
name|assert
argument_list|(
name|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
operator|--
name|index_
expr_stmt|;
block|}
name|begin_
operator|=
name|rhs
operator|.
name|begin_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|end_
operator|=
name|rhs
operator|.
name|end_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|current_
operator|=
name|rhs
operator|.
name|current_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|action_
operator|=
name|rhs
operator|.
name|action_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|index_
operator|=
name|rhs
operator|.
name|index_
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|//  iterator operations
end_comment

begin_macro
unit|reference
name|operator
end_macro

begin_expr_stmt
operator|*
operator|(
operator|)
specifier|const
block|{
if|if
condition|(
name|action_
operator|==
name|TADereference
condition|)
block|{
if|if
condition|(
name|index_
operator|==
literal|0
condition|)
ifndef|#
directive|ifndef
name|TEST_HAS_NO_EXCEPTIONS
name|throw
name|std
operator|::
name|runtime_error
argument_list|(
literal|"throw from iterator dereference"
argument_list|)
expr_stmt|;
else|#
directive|else
name|assert
argument_list|(
name|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
operator|--
name|index_
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|current_
return|;
end_return

begin_expr_stmt
unit|}      ThrowingIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
name|action_
operator|==
name|TAIncrement
condition|)
block|{
if|if
condition|(
name|index_
operator|==
literal|0
condition|)
ifndef|#
directive|ifndef
name|TEST_HAS_NO_EXCEPTIONS
name|throw
name|std
operator|::
name|runtime_error
argument_list|(
literal|"throw from iterator increment"
argument_list|)
expr_stmt|;
else|#
directive|else
name|assert
argument_list|(
name|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
operator|--
name|index_
expr_stmt|;
block|}
operator|++
name|current_
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}      ThrowingIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|ThrowingIterator
name|temp
operator|=
operator|*
name|this
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|temp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ThrowingIterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|action_
operator|==
name|TADecrement
condition|)
block|{
if|if
condition|(
name|index_
operator|==
literal|0
condition|)
ifndef|#
directive|ifndef
name|TEST_HAS_NO_EXCEPTIONS
name|throw
name|std
operator|::
name|runtime_error
argument_list|(
literal|"throw from iterator decrement"
argument_list|)
expr_stmt|;
else|#
directive|else
name|assert
argument_list|(
name|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
operator|--
name|index_
expr_stmt|;
block|}
operator|--
name|current_
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}      ThrowingIterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|ThrowingIterator
name|temp
operator|=
operator|*
name|this
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|temp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ThrowingIterator
operator|&
name|rhs
operator|)
specifier|const
block|{
if|if
condition|(
name|action_
operator|==
name|TAComparison
condition|)
block|{
if|if
condition|(
name|index_
operator|==
literal|0
condition|)
ifndef|#
directive|ifndef
name|TEST_HAS_NO_EXCEPTIONS
name|throw
name|std
operator|::
name|runtime_error
argument_list|(
literal|"throw from iterator comparison"
argument_list|)
expr_stmt|;
else|#
directive|else
name|assert
argument_list|(
name|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
operator|--
name|index_
expr_stmt|;
block|}
name|bool
name|atEndL
operator|=
name|current_
operator|==
name|end_
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|atEndR
init|=
name|rhs
operator|.
name|current_
operator|==
name|rhs
operator|.
name|end_
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|atEndL
operator|!=
name|atEndR
condition|)
return|return
name|false
return|;
end_if

begin_comment
comment|// one is at the end (or empty), the other is not.
end_comment

begin_if
if|if
condition|(
name|atEndL
condition|)
return|return
name|true
return|;
end_if

begin_comment
comment|// both are at the end (or empty)
end_comment

begin_return
return|return
name|current_
operator|==
name|rhs
operator|.
name|current_
return|;
end_return

begin_decl_stmt
unit|}  private:
specifier|const
name|T
modifier|*
name|begin_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|T
modifier|*
name|end_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|T
modifier|*
name|current_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ThrowingAction
name|action_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|mutable
name|size_t
name|index_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ThrowingIterator
operator|<
name|T
operator|>
operator|&
name|a
operator|,
specifier|const
name|ThrowingIterator
operator|<
name|T
operator|>
operator|&
name|b
operator|)
block|{
return|return
name|a
operator|.
name|operator
operator|==
operator|(
name|b
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ThrowingIterator
operator|<
name|T
operator|>
operator|&
name|a
operator|,
specifier|const
name|ThrowingIterator
operator|<
name|T
operator|>
operator|&
name|b
operator|)
block|{
return|return
operator|!
name|a
operator|.
name|operator
operator|==
operator|(
name|b
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|NonThrowingIterator
block|{
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_comment
comment|//  Constructors
end_comment

begin_expr_stmt
name|NonThrowingIterator
argument_list|()
operator|:
name|begin_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|end_
argument_list|(
name|nullptr
argument_list|)
operator|,
name|current_
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|NonThrowingIterator
argument_list|(
specifier|const
name|T
operator|*
name|first
argument_list|,
specifier|const
name|T
operator|*
name|last
argument_list|)
operator|:
name|begin_
argument_list|(
name|first
argument_list|)
operator|,
name|end_
argument_list|(
name|last
argument_list|)
operator|,
name|current_
argument_list|(
argument|first
argument_list|)
block|{}
name|NonThrowingIterator
argument_list|(
specifier|const
name|NonThrowingIterator
operator|&
name|rhs
argument_list|)
operator|:
name|begin_
argument_list|(
name|rhs
operator|.
name|begin_
argument_list|)
operator|,
name|end_
argument_list|(
name|rhs
operator|.
name|end_
argument_list|)
operator|,
name|current_
argument_list|(
argument|rhs.current_
argument_list|)
block|{}
name|NonThrowingIterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|NonThrowingIterator
operator|&
name|rhs
operator|)
name|TEST_NOEXCEPT
block|{
name|begin_
operator|=
name|rhs
operator|.
name|begin_
block|;
name|end_
operator|=
name|rhs
operator|.
name|end_
block|;
name|current_
operator|=
name|rhs
operator|.
name|current_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|//  iterator operations
end_comment

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
name|TEST_NOEXCEPT
block|{
return|return
operator|*
name|current_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|NonThrowingIterator
operator|&
name|operator
operator|++
operator|(
operator|)
name|TEST_NOEXCEPT
block|{
operator|++
name|current_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|NonThrowingIterator
name|operator
operator|++
operator|(
name|int
operator|)
name|TEST_NOEXCEPT
block|{
name|NonThrowingIterator
name|temp
operator|=
operator|*
name|this
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|temp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|NonThrowingIterator
operator|&
name|operator
operator|--
operator|(
operator|)
name|TEST_NOEXCEPT
block|{
operator|--
name|current_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|NonThrowingIterator
name|operator
operator|--
operator|(
name|int
operator|)
name|TEST_NOEXCEPT
block|{
name|NonThrowingIterator
name|temp
operator|=
operator|*
name|this
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|temp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|NonThrowingIterator
operator|&
name|rhs
operator|)
specifier|const
name|TEST_NOEXCEPT
block|{
name|bool
name|atEndL
operator|=
name|current_
operator|==
name|end_
block|;
name|bool
name|atEndR
operator|=
name|rhs
operator|.
name|current_
operator|==
name|rhs
operator|.
name|end_
block|;
if|if
condition|(
name|atEndL
operator|!=
name|atEndR
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_comment
comment|// one is at the end (or empty), the other is not.
end_comment

begin_if
if|if
condition|(
name|atEndL
condition|)
return|return
name|true
return|;
end_if

begin_comment
comment|// both are at the end (or empty)
end_comment

begin_return
return|return
name|current_
operator|==
name|rhs
operator|.
name|current_
return|;
end_return

begin_decl_stmt
unit|}  private:
specifier|const
name|T
modifier|*
name|begin_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|T
modifier|*
name|end_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|T
modifier|*
name|current_
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|NonThrowingIterator
operator|<
name|T
operator|>
operator|&
name|a
operator|,
specifier|const
name|NonThrowingIterator
operator|<
name|T
operator|>
operator|&
name|b
operator|)
name|TEST_NOEXCEPT
block|{
return|return
name|a
operator|.
name|operator
operator|==
operator|(
name|b
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|NonThrowingIterator
operator|<
name|T
operator|>
operator|&
name|a
operator|,
specifier|const
name|NonThrowingIterator
operator|<
name|T
operator|>
operator|&
name|b
operator|)
name|TEST_NOEXCEPT
block|{
return|return
operator|!
name|a
operator|.
name|operator
operator|==
operator|(
name|b
operator|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|DELETE_FUNCTION
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ITERATORS_H
end_comment

end_unit

