begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ITERATORS_H
end_ifndef

begin_define
define|#
directive|define
name|ITERATORS_H
end_define

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBCPP_HAS_NO_DELETED_FUNCTIONS
end_ifndef

begin_define
define|#
directive|define
name|DELETE_FUNCTION
value|= delete
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DELETE_FUNCTION
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|output_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|output_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|output_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_macro
name|output_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|output_iterator
argument_list|(
argument|It it
argument_list|)
end_macro

begin_macro
unit|:
name|it_
argument_list|(
argument|it
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|template
operator|<
name|class
name|U
operator|>
name|output_iterator
argument_list|(
specifier|const
name|output_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|output_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|output_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|output_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|It
operator|>
name|class
name|input_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|input_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|input_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|input_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|input_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|input_iterator
argument_list|(
specifier|const
name|input_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|input_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|input_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|input_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|input_iterator
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|it_
operator|==
name|y
operator|.
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|input_iterator
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|input_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|input_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|input_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|forward_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|forward_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|forward_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|forward_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|forward_iterator
argument_list|(
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|forward_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|forward_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|forward_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|forward_iterator
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|it_
operator|==
name|y
operator|.
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|forward_iterator
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|forward_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|forward_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|forward_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|bidirectional_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|bidirectional_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|bidirectional_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bidirectional_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|bidirectional_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|bidirectional_iterator
argument_list|(
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bidirectional_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bidirectional_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|bidirectional_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bidirectional_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bidirectional_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|bidirectional_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|bidirectional_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|bidirectional_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|bidirectional_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|It
operator|>
name|class
name|random_access_iterator
block|{
name|It
name|it_
block|;
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|random_access_iterator
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|It
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|It
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
name|It
name|base
argument_list|()
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
argument_list|()
operator|:
name|it_
argument_list|()
block|{}
name|explicit
name|random_access_iterator
argument_list|(
argument|It it
argument_list|)
operator|:
name|it_
argument_list|(
argument|it
argument_list|)
block|{}
name|template
operator|<
name|class
name|U
operator|>
name|random_access_iterator
argument_list|(
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|u
argument_list|)
operator|:
name|it_
argument_list|(
argument|u.it_
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|it_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|it_
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|it_
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|+=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|random_access_iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|,
name|random_access_iterator
name|x
operator|)
block|{
name|x
operator|+=
name|n
block|;
return|return
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|random_access_iterator
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|random_access_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|tmp
operator|-=
name|n
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
name|it_
index|[
name|n
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|operator
operator|,
operator|(
name|T
specifier|const
operator|&
operator|)
name|DELETE_FUNCTION
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|<
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|y
operator|<
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|<
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|T
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|random_access_iterator
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|random_access_iterator
operator|<
name|U
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|-
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|Iter
name|base
argument_list|(
argument|output_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|Iter
name|base
argument_list|(
argument|input_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|Iter
name|base
argument_list|(
argument|forward_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|Iter
name|base
argument_list|(
argument|bidirectional_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
specifier|inline
name|Iter
name|base
argument_list|(
argument|random_access_iterator<Iter> i
argument_list|)
block|{
return|return
name|i
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iter
operator|>
comment|// everything else
specifier|inline
name|Iter
name|base
argument_list|(
argument|Iter i
argument_list|)
block|{
return|return
name|i
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|DELETE_FUNCTION
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ITERATORS_H
end_comment

end_unit

