begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Like the compiler, the static analyzer treats some functions differently if
end_comment

begin_comment
comment|// they come from a system header -- for example, it is assumed that system
end_comment

begin_comment
comment|// functions do not arbitrarily free() their parameters, and that some bugs
end_comment

begin_comment
comment|// found in system headers cannot be fixed by the user and should be
end_comment

begin_comment
comment|// suppressed.
end_comment

begin_pragma
pragma|#
directive|pragma
name|clang
name|system_header
end_pragma

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
expr|struct
name|pair
block|{
name|T1
name|first
block|;
name|T2
name|second
block|;
name|pair
argument_list|()
operator|:
name|first
argument_list|()
block|,
name|second
argument_list|()
block|{}
name|pair
argument_list|(
specifier|const
name|T1
operator|&
name|a
argument_list|,
specifier|const
name|T2
operator|&
name|b
argument_list|)
operator|:
name|first
argument_list|(
name|a
argument_list|)
block|,
name|second
argument_list|(
argument|b
argument_list|)
block|{}
name|template
operator|<
name|class
name|U1
block|,
name|class
name|U2
operator|>
name|pair
argument_list|(
specifier|const
name|pair
operator|<
name|U1
argument_list|,
name|U2
operator|>
operator|&
name|other
argument_list|)
operator|:
name|first
argument_list|(
name|other
operator|.
name|first
argument_list|)
block|,
name|second
argument_list|(
argument|other.second
argument_list|)
block|{}
block|}
expr_stmt|;
typedef|typedef
name|__typeof__
argument_list|(
argument|sizeof(int)
argument_list|)
name|size_t
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|vector
block|{
name|T
operator|*
name|_start
block|;
name|T
operator|*
name|_finish
block|;
name|T
operator|*
name|_end_of_storage
block|;
name|public
operator|:
name|vector
argument_list|()
operator|:
name|_start
argument_list|(
literal|0
argument_list|)
block|,
name|_finish
argument_list|(
literal|0
argument_list|)
block|,
name|_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|vector
argument_list|()
block|;
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_t
argument_list|(
name|_finish
operator|-
name|_start
argument_list|)
return|;
block|}
name|void
name|push_back
argument_list|()
block|;
name|T
name|pop_back
argument_list|()
block|;
name|T
operator|&
name|operator
index|[]
operator|(
name|size_t
name|n
operator|)
block|{
return|return
name|_start
index|[
name|n
index|]
return|;
block|}
specifier|const
name|T
operator|&
name|operator
index|[]
operator|(
name|size_t
name|n
operator|)
specifier|const
block|{
return|return
name|_start
index|[
name|n
index|]
return|;
block|}
name|T
operator|*
name|begin
argument_list|()
block|{
return|return
name|_start
return|;
block|}
specifier|const
name|T
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_start
return|;
block|}
name|T
operator|*
name|end
argument_list|()
block|{
return|return
name|_finish
return|;
block|}
specifier|const
name|T
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|_finish
return|;
block|}
expr|}
block|;
name|class
name|exception
block|{
name|public
operator|:
name|exception
argument_list|()
name|throw
argument_list|()
block|;
name|virtual
operator|~
name|exception
argument_list|()
name|throw
argument_list|()
block|;
name|virtual
specifier|const
name|char
operator|*
name|what
argument_list|()
specifier|const
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;
name|class
name|bad_alloc
operator|:
name|public
name|exception
block|{
name|public
operator|:
name|bad_alloc
argument_list|()
name|throw
argument_list|()
block|;
name|bad_alloc
argument_list|(
argument|const bad_alloc&
argument_list|)
name|throw
argument_list|()
block|;
name|bad_alloc
operator|&
name|operator
operator|=
operator|(
specifier|const
name|bad_alloc
operator|&
operator|)
name|throw
argument_list|()
block|;
name|virtual
specifier|const
name|char
operator|*
name|what
argument_list|()
specifier|const
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;    struct
name|nothrow_t
block|{}
block|;
specifier|extern
specifier|const
name|nothrow_t
name|nothrow
block|;
name|template
operator|<
name|class
name|InputIter
block|,
name|class
name|OutputIter
operator|>
name|OutputIter
name|copy
argument_list|(
argument|InputIter II
argument_list|,
argument|InputIter IE
argument_list|,
argument|OutputIter OI
argument_list|)
block|{
while|while
condition|(
name|II
operator|!=
name|IE
condition|)
operator|*
name|OI
operator|++
operator|=
operator|*
name|II
operator|++
expr_stmt|;
return|return
name|OI
return|;
block|}
expr|}
name|void
operator|*
name|operator
name|new
argument_list|(
argument|std::size_t
argument_list|,
argument|const std::nothrow_t&
argument_list|)
name|throw
argument_list|()
block|;
name|void
operator|*
name|operator
name|new
index|[]
operator|(
name|std
operator|::
name|size_t
operator|,
specifier|const
name|std
operator|::
name|nothrow_t
operator|&
operator|)
name|throw
argument_list|()
block|;
name|void
name|operator
name|delete
argument_list|(
argument|void*
argument_list|,
argument|const std::nothrow_t&
argument_list|)
name|throw
argument_list|()
block|;
name|void
name|operator
name|delete
index|[]
operator|(
name|void
operator|*
operator|,
specifier|const
name|std
operator|::
name|nothrow_t
operator|&
operator|)
name|throw
argument_list|()
block|;
name|void
operator|*
name|operator
name|new
argument_list|(
argument|std::size_t size
argument_list|,
argument|void* ptr
argument_list|)
name|throw
argument_list|()
block|{
return|return
name|ptr
return|;
block|}
block|;
name|void
operator|*
name|operator
name|new
index|[]
operator|(
name|std
operator|::
name|size_t
name|size
operator|,
name|void
operator|*
name|ptr
operator|)
name|throw
argument_list|()
block|{
return|return
name|ptr
return|;
block|}
block|;
name|void
name|operator
name|delete
argument_list|(
argument|void* ptr
argument_list|,
argument|void*
argument_list|)
name|throw
argument_list|()
block|{}
block|;
name|void
name|operator
name|delete
index|[]
operator|(
name|void
operator|*
name|ptr
operator|,
name|void
operator|*
operator|)
name|throw
argument_list|()
block|{}
block|;
end_decl_stmt

end_unit

