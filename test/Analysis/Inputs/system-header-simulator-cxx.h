begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Like the compiler, the static analyzer treats some functions differently if
end_comment

begin_comment
comment|// they come from a system header -- for example, it is assumed that system
end_comment

begin_comment
comment|// functions do not arbitrarily free() their parameters, and that some bugs
end_comment

begin_comment
comment|// found in system headers cannot be fixed by the user and should be
end_comment

begin_comment
comment|// suppressed.
end_comment

begin_pragma
pragma|#
directive|pragma
name|clang
name|system_header
end_pragma

begin_typedef
typedef|typedef
name|unsigned
name|char
name|uint8_t
typedef|;
end_typedef

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
expr|struct
name|pair
block|{
name|T1
name|first
block|;
name|T2
name|second
block|;
name|pair
argument_list|()
operator|:
name|first
argument_list|()
block|,
name|second
argument_list|()
block|{}
name|pair
argument_list|(
specifier|const
name|T1
operator|&
name|a
argument_list|,
specifier|const
name|T2
operator|&
name|b
argument_list|)
operator|:
name|first
argument_list|(
name|a
argument_list|)
block|,
name|second
argument_list|(
argument|b
argument_list|)
block|{}
name|template
operator|<
name|class
name|U1
block|,
name|class
name|U2
operator|>
name|pair
argument_list|(
specifier|const
name|pair
operator|<
name|U1
argument_list|,
name|U2
operator|>
operator|&
name|other
argument_list|)
operator|:
name|first
argument_list|(
name|other
operator|.
name|first
argument_list|)
block|,
name|second
argument_list|(
argument|other.second
argument_list|)
block|{}
block|}
expr_stmt|;
typedef|typedef
name|__typeof__
argument_list|(
argument|sizeof(int)
argument_list|)
name|size_t
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|vector
block|{
name|T
operator|*
name|_start
block|;
name|T
operator|*
name|_finish
block|;
name|T
operator|*
name|_end_of_storage
block|;
name|public
operator|:
name|vector
argument_list|()
operator|:
name|_start
argument_list|(
literal|0
argument_list|)
block|,
name|_finish
argument_list|(
literal|0
argument_list|)
block|,
name|_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|vector
argument_list|()
block|;
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_t
argument_list|(
name|_finish
operator|-
name|_start
argument_list|)
return|;
block|}
name|void
name|push_back
argument_list|()
block|;
name|T
name|pop_back
argument_list|()
block|;
name|T
operator|&
name|operator
index|[]
operator|(
name|size_t
name|n
operator|)
block|{
return|return
name|_start
index|[
name|n
index|]
return|;
block|}
specifier|const
name|T
operator|&
name|operator
index|[]
operator|(
name|size_t
name|n
operator|)
specifier|const
block|{
return|return
name|_start
index|[
name|n
index|]
return|;
block|}
name|T
operator|*
name|begin
argument_list|()
block|{
return|return
name|_start
return|;
block|}
specifier|const
name|T
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_start
return|;
block|}
name|T
operator|*
name|end
argument_list|()
block|{
return|return
name|_finish
return|;
block|}
specifier|const
name|T
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|_finish
return|;
block|}
expr|}
block|;
name|class
name|exception
block|{
name|public
operator|:
name|exception
argument_list|()
name|throw
argument_list|()
block|;
name|virtual
operator|~
name|exception
argument_list|()
name|throw
argument_list|()
block|;
name|virtual
specifier|const
name|char
operator|*
name|what
argument_list|()
specifier|const
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;
name|class
name|bad_alloc
operator|:
name|public
name|exception
block|{
name|public
operator|:
name|bad_alloc
argument_list|()
name|throw
argument_list|()
block|;
name|bad_alloc
argument_list|(
argument|const bad_alloc&
argument_list|)
name|throw
argument_list|()
block|;
name|bad_alloc
operator|&
name|operator
operator|=
operator|(
specifier|const
name|bad_alloc
operator|&
operator|)
name|throw
argument_list|()
block|;
name|virtual
specifier|const
name|char
operator|*
name|what
argument_list|()
specifier|const
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
expr|}
block|;    struct
name|nothrow_t
block|{}
block|;
specifier|extern
specifier|const
name|nothrow_t
name|nothrow
block|;
comment|// libc++'s implementation
name|template
operator|<
name|class
name|_E
operator|>
name|class
name|initializer_list
block|{
specifier|const
name|_E
operator|*
name|__begin_
block|;
name|size_t
name|__size_
block|;
name|initializer_list
argument_list|(
argument|const _E* __b
argument_list|,
argument|size_t __s
argument_list|)
operator|:
name|__begin_
argument_list|(
name|__b
argument_list|)
block|,
name|__size_
argument_list|(
argument|__s
argument_list|)
block|{}
name|public
operator|:
typedef|typedef
name|_E
name|value_type
typedef|;
typedef|typedef
specifier|const
name|_E
modifier|&
name|reference
typedef|;
typedef|typedef
specifier|const
name|_E
modifier|&
name|const_reference
typedef|;
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
specifier|const
name|_E
modifier|*
name|iterator
typedef|;
typedef|typedef
specifier|const
name|_E
modifier|*
name|const_iterator
typedef|;
name|initializer_list
argument_list|()
operator|:
name|__begin_
argument_list|(
literal|0
argument_list|)
operator|,
name|__size_
argument_list|(
literal|0
argument_list|)
block|{}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|__size_
return|;
block|}
specifier|const
name|_E
operator|*
name|begin
argument_list|()
specifier|const
block|{
return|return
name|__begin_
return|;
block|}
specifier|const
name|_E
operator|*
name|end
argument_list|()
specifier|const
block|{
return|return
name|__begin_
operator|+
name|__size_
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIter
operator|,
name|class
name|OutputIter
operator|>
name|OutputIter
name|copy
argument_list|(
argument|InputIter II
argument_list|,
argument|InputIter IE
argument_list|,
argument|OutputIter OI
argument_list|)
block|{
while|while
condition|(
name|II
operator|!=
name|IE
condition|)
operator|*
name|OI
operator|++
operator|=
operator|*
name|II
operator|++
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|OI
return|;
end_return

begin_macro
unit|}    struct
name|input_iterator_tag
end_macro

begin_block
block|{ }
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_struct
struct|struct
name|output_iterator_tag
block|{ }
struct|;
end_struct

begin_decl_stmt
name|struct
name|forward_iterator_tag
range|:
name|public
name|input_iterator_tag
block|{ }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|bidirectional_iterator_tag
range|:
name|public
name|forward_iterator_tag
block|{ }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|random_access_iterator_tag
range|:
name|public
name|bidirectional_iterator_tag
block|{ }
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|allocator
block|{
name|public
operator|:
name|void
name|deallocate
argument_list|(
argument|void *p
argument_list|)
block|{
operator|::
name|delete
name|p
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Alloc
operator|>
name|class
name|allocator_traits
block|{
name|public
operator|:
specifier|static
name|void
name|deallocate
argument_list|(
argument|void *p
argument_list|)
block|{
name|_Alloc
argument_list|()
operator|.
name|deallocate
argument_list|(
name|p
argument_list|)
block|;     }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|class
name|__list_imp
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|=
name|allocator
operator|<
name|_Tp
operator|>
expr|>
name|class
name|list
operator|:
name|private
name|__list_imp
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
name|public
operator|:
name|void
name|pop_front
argument_list|()
block|{
comment|// Fake use-after-free.
comment|// No warning is expected as we are suppressing warning comming
comment|// out of std::list.
name|int
name|z
operator|=
literal|0
block|;
name|z
operator|=
literal|5
operator|/
name|z
block|;     }
name|bool
name|empty
argument_list|()
specifier|const
block|;   }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// basic_string
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_CharT
operator|,
name|class
name|_Alloc
operator|=
name|allocator
operator|<
name|_CharT
operator|>
expr|>
name|class
name|__attribute__
argument_list|(
argument|(__type_visibility__(
literal|"default"
argument|))
argument_list|)
name|basic_string
block|{
name|_CharT
name|localStorage
index|[
literal|4
index|]
block|;
typedef|typedef
name|allocator_traits
operator|<
name|_Alloc
operator|>
name|__alloc_traits
expr_stmt|;
name|public
operator|:
name|void
name|push_back
argument_list|(
argument|int c
argument_list|)
block|{
comment|// Fake error trigger.
comment|// No warning is expected as we are suppressing warning comming
comment|// out of std::basic_string.
name|int
name|z
operator|=
literal|0
block|;
name|z
operator|=
literal|5
operator|/
name|z
block|;     }
name|basic_string
operator|&
name|operator
operator|+=
operator|(
name|int
name|c
operator|)
block|{
comment|// Fake deallocate stack-based storage.
comment|// No warning is expected as we are suppressing warnings within
comment|// allocators being used by std::basic_string.
name|__alloc_traits
operator|::
name|deallocate
argument_list|(
operator|&
name|localStorage
argument_list|)
block|;     }
end_expr_stmt

begin_expr_stmt
unit|}; }  void
operator|*
name|operator
name|new
argument_list|(
argument|std::size_t
argument_list|,
argument|const std::nothrow_t&
argument_list|)
name|throw
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
modifier|*
name|operator
name|new
index|[]
argument_list|(
name|std
operator|::
name|size_t
argument_list|,
specifier|const
name|std
operator|::
name|nothrow_t
operator|&
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|operator
name|delete
argument_list|(
name|void
operator|*
argument_list|,
specifier|const
name|std
operator|::
name|nothrow_t
operator|&
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|operator
name|delete
index|[]
argument_list|(
name|void
operator|*
argument_list|,
specifier|const
name|std
operator|::
name|nothrow_t
operator|&
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|operator
name|new
argument_list|(
name|std
operator|::
name|size_t
name|size
argument_list|,
name|void
operator|*
name|ptr
argument_list|)
name|throw
argument_list|()
block|{
return|return
name|ptr
return|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
modifier|*
name|operator
name|new
index|[]
argument_list|(
name|std
operator|::
name|size_t
name|size
argument_list|,
name|void
operator|*
name|ptr
argument_list|)
name|throw
argument_list|()
block|{
return|return
name|ptr
return|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
parameter_list|)
function|throw
parameter_list|()
block|{}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
name|void
name|operator
name|delete
function|[]
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|void
modifier|*
parameter_list|)
function|throw
parameter_list|()
block|{}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

