begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------------------------- fp_test.h - ------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines shared functions for the test.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_enum
enum|enum
name|EXPECTED_RESULT
block|{
name|LESS_0
block|,
name|LESS_EQUAL_0
block|,
name|EQUAL_0
block|,
name|GREATER_0
block|,
name|GREATER_EQUAL_0
block|,
name|NEQUAL_0
block|}
enum|;
end_enum

begin_function
specifier|static
specifier|inline
name|uint16_t
name|fromRep16
parameter_list|(
name|uint16_t
name|x
parameter_list|)
block|{
return|return
name|x
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
name|fromRep32
parameter_list|(
name|uint32_t
name|x
parameter_list|)
block|{
name|float
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|double
name|fromRep64
parameter_list|(
name|uint64_t
name|x
parameter_list|)
block|{
name|double
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_function
specifier|static
specifier|inline
name|long
name|double
name|fromRep128
parameter_list|(
name|uint64_t
name|hi
parameter_list|,
name|uint64_t
name|lo
parameter_list|)
block|{
name|__uint128_t
name|x
init|=
operator|(
operator|(
name|__uint128_t
operator|)
name|hi
operator|<<
literal|64
operator|)
operator|+
name|lo
decl_stmt|;
name|long
name|double
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|16
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|uint16_t
name|toRep16
parameter_list|(
name|uint16_t
name|x
parameter_list|)
block|{
return|return
name|x
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint32_t
name|toRep32
parameter_list|(
name|float
name|x
parameter_list|)
block|{
name|uint32_t
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint64_t
name|toRep64
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|uint64_t
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_function
specifier|static
specifier|inline
name|__uint128_t
name|toRep128
parameter_list|(
name|long
name|double
name|x
parameter_list|)
block|{
name|__uint128_t
name|ret
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|ret
argument_list|,
operator|&
name|x
argument_list|,
literal|16
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|compareResultH
parameter_list|(
name|uint16_t
name|result
parameter_list|,
name|uint16_t
name|expected
parameter_list|)
block|{
name|uint16_t
name|rep
init|=
name|toRep16
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|==
name|expected
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// test other posible NaN representation(signal NaN)
elseif|else
if|if
condition|(
name|expected
operator|==
literal|0x7e00U
condition|)
block|{
if|if
condition|(
operator|(
name|rep
operator|&
literal|0x7c00U
operator|)
operator|==
literal|0x7c00U
operator|&&
operator|(
name|rep
operator|&
literal|0x3ffU
operator|)
operator|>
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|compareResultF
parameter_list|(
name|float
name|result
parameter_list|,
name|uint32_t
name|expected
parameter_list|)
block|{
name|uint32_t
name|rep
init|=
name|toRep32
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|==
name|expected
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// test other posible NaN representation(signal NaN)
elseif|else
if|if
condition|(
name|expected
operator|==
literal|0x7fc00000U
condition|)
block|{
if|if
condition|(
operator|(
name|rep
operator|&
literal|0x7f800000U
operator|)
operator|==
literal|0x7f800000U
operator|&&
operator|(
name|rep
operator|&
literal|0x7fffffU
operator|)
operator|>
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|compareResultD
parameter_list|(
name|double
name|result
parameter_list|,
name|uint64_t
name|expected
parameter_list|)
block|{
name|uint64_t
name|rep
init|=
name|toRep64
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|rep
operator|==
name|expected
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// test other posible NaN representation(signal NaN)
elseif|else
if|if
condition|(
name|expected
operator|==
literal|0x7ff8000000000000UL
condition|)
block|{
if|if
condition|(
operator|(
name|rep
operator|&
literal|0x7ff0000000000000UL
operator|)
operator|==
literal|0x7ff0000000000000UL
operator|&&
operator|(
name|rep
operator|&
literal|0xfffffffffffffUL
operator|)
operator|>
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_comment
comment|// return 0 if equal
end_comment

begin_comment
comment|// use two 64-bit integers intead of one 128-bit integer
end_comment

begin_comment
comment|// because 128-bit integer constant can't be assigned directly
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|compareResultLD
parameter_list|(
name|long
name|double
name|result
parameter_list|,
name|uint64_t
name|expectedHi
parameter_list|,
name|uint64_t
name|expectedLo
parameter_list|)
block|{
name|__uint128_t
name|rep
init|=
name|toRep128
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|uint64_t
name|hi
init|=
name|rep
operator|>>
literal|64
decl_stmt|;
name|uint64_t
name|lo
init|=
name|rep
decl_stmt|;
if|if
condition|(
name|hi
operator|==
name|expectedHi
operator|&&
name|lo
operator|==
name|expectedLo
condition|)
block|{
return|return
literal|0
return|;
block|}
comment|// test other posible NaN representation(signal NaN)
elseif|else
if|if
condition|(
name|expectedHi
operator|==
literal|0x7fff800000000000UL
operator|&&
name|expectedLo
operator|==
literal|0x0UL
condition|)
block|{
if|if
condition|(
operator|(
name|hi
operator|&
literal|0x7fff000000000000UL
operator|)
operator|==
literal|0x7fff000000000000UL
operator|&&
operator|(
operator|(
name|hi
operator|&
literal|0xffffffffffffUL
operator|)
operator|>
literal|0
operator|||
name|lo
operator|>
literal|0
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
literal|1
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|int
name|compareResultCMP
parameter_list|(
name|int
name|result
parameter_list|,
name|enum
name|EXPECTED_RESULT
name|expected
parameter_list|)
block|{
switch|switch
condition|(
name|expected
condition|)
block|{
case|case
name|LESS_0
case|:
if|if
condition|(
name|result
operator|<
literal|0
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|LESS_EQUAL_0
case|:
if|if
condition|(
name|result
operator|<=
literal|0
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|EQUAL_0
case|:
if|if
condition|(
name|result
operator|==
literal|0
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|NEQUAL_0
case|:
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|GREATER_EQUAL_0
case|:
if|if
condition|(
name|result
operator|>=
literal|0
condition|)
return|return
literal|0
return|;
break|break;
case|case
name|GREATER_0
case|:
if|if
condition|(
name|result
operator|>
literal|0
condition|)
return|return
literal|0
return|;
break|break;
default|default:
return|return
literal|1
return|;
block|}
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|expectedStr
parameter_list|(
name|enum
name|EXPECTED_RESULT
name|expected
parameter_list|)
block|{
switch|switch
condition|(
name|expected
condition|)
block|{
case|case
name|LESS_0
case|:
return|return
literal|"<0"
return|;
case|case
name|LESS_EQUAL_0
case|:
return|return
literal|"<=0"
return|;
case|case
name|EQUAL_0
case|:
return|return
literal|"=0"
return|;
case|case
name|NEQUAL_0
case|:
return|return
literal|"!=0"
return|;
case|case
name|GREATER_EQUAL_0
case|:
return|return
literal|">=0"
return|;
case|case
name|GREATER_0
case|:
return|return
literal|">0"
return|;
default|default:
return|return
literal|""
return|;
block|}
return|return
literal|""
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|uint16_t
name|makeQNaN16
parameter_list|()
block|{
return|return
name|fromRep16
argument_list|(
literal|0x7e00U
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
name|makeQNaN32
parameter_list|()
block|{
return|return
name|fromRep32
argument_list|(
literal|0x7fc00000U
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|double
name|makeQNaN64
parameter_list|()
block|{
return|return
name|fromRep64
argument_list|(
literal|0x7ff8000000000000UL
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_function
specifier|static
specifier|inline
name|long
name|double
name|makeQNaN128
parameter_list|()
block|{
return|return
name|fromRep128
argument_list|(
literal|0x7fff800000000000UL
argument_list|,
literal|0x0UL
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|uint16_t
name|makeNaN16
parameter_list|(
name|uint16_t
name|rand
parameter_list|)
block|{
return|return
name|fromRep16
argument_list|(
literal|0x7c00U
operator||
operator|(
name|rand
operator|&
literal|0x7fffU
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
name|makeNaN32
parameter_list|(
name|uint32_t
name|rand
parameter_list|)
block|{
return|return
name|fromRep32
argument_list|(
literal|0x7f800000U
operator||
operator|(
name|rand
operator|&
literal|0x7fffffU
operator|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|double
name|makeNaN64
parameter_list|(
name|uint64_t
name|rand
parameter_list|)
block|{
return|return
name|fromRep64
argument_list|(
literal|0x7ff0000000000000UL
operator||
operator|(
name|rand
operator|&
literal|0xfffffffffffffUL
operator|)
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_function
specifier|static
specifier|inline
name|long
name|double
name|makeNaN128
parameter_list|(
name|uint64_t
name|rand
parameter_list|)
block|{
return|return
name|fromRep128
argument_list|(
literal|0x7fff000000000000UL
operator||
operator|(
name|rand
operator|&
literal|0xffffffffffffUL
operator|)
argument_list|,
literal|0x0UL
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
specifier|inline
name|uint16_t
name|makeInf16
parameter_list|()
block|{
return|return
name|fromRep16
argument_list|(
literal|0x7c00U
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|float
name|makeInf32
parameter_list|()
block|{
return|return
name|fromRep32
argument_list|(
literal|0x7f800000U
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|double
name|makeInf64
parameter_list|()
block|{
return|return
name|fromRep64
argument_list|(
literal|0x7ff0000000000000UL
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|__LDBL_MANT_DIG__
operator|==
literal|113
end_if

begin_function
specifier|static
specifier|inline
name|long
name|double
name|makeInf128
parameter_list|()
block|{
return|return
name|fromRep128
argument_list|(
literal|0x7fff000000000000UL
argument_list|,
literal|0x0UL
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

