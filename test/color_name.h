begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/****************************************************************************  * Copyright (c) 2011,2012 Free Software Foundation, Inc.                   *  *                                                                          *  * Permission is hereby granted, free of charge, to any person obtaining a  *  * copy of this software and associated documentation files (the            *  * "Software"), to deal in the Software without restriction, including      *  * without limitation the rights to use, copy, modify, merge, publish,      *  * distribute, distribute with modifications, sublicense, and/or sell       *  * copies of the Software, and to permit persons to whom the Software is    *  * furnished to do so, subject to the following conditions:                 *  *                                                                          *  * The above copyright notice and this permission notice shall be included  *  * in all copies or substantial portions of the Software.                   *  *                                                                          *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *  * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *  * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *  * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *  *                                                                          *  * Except as contained in this notice, the name(s) of the above copyright   *  * holders shall not be used in advertising or otherwise to promote the     *  * sale, use or other dealings in this Software without prior written       *  * authorization.                                                           *  ****************************************************************************/
end_comment

begin_comment
comment|/*  * $Id: color_name.h,v 1.4 2012/11/18 01:59:32 tom Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__COLORNAME_H
end_ifndef

begin_define
define|#
directive|define
name|__COLORNAME_H
value|1
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__TEST_PRIV_H
end_ifndef

begin_include
include|#
directive|include
file|<test.priv.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
name|NCURSES_CONST
name|char
modifier|*
name|the_color_names
index|[]
init|=
block|{
literal|"black"
block|,
literal|"red"
block|,
literal|"green"
block|,
literal|"yellow"
block|,
literal|"blue"
block|,
literal|"magenta"
block|,
literal|"cyan"
block|,
literal|"white"
block|,
literal|"BLACK"
block|,
literal|"RED"
block|,
literal|"GREEN"
block|,
literal|"YELLOW"
block|,
literal|"BLUE"
block|,
literal|"MAGENTA"
block|,
literal|"CYAN"
block|,
literal|"WHITE"
block|}
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_COLOR_CODE
end_ifdef

begin_function
specifier|static
name|int
name|color_code
parameter_list|(
specifier|const
name|char
modifier|*
name|color
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|char
modifier|*
name|endp
init|=
literal|0
decl_stmt|;
name|size_t
name|n
decl_stmt|;
if|if
condition|(
operator|(
name|result
operator|=
operator|(
name|int
operator|)
name|strtol
argument_list|(
name|color
argument_list|,
operator|&
name|endp
argument_list|,
literal|0
argument_list|)
operator|)
operator|>=
literal|0
operator|&&
operator|(
name|endp
operator|==
literal|0
operator|||
operator|*
name|endp
operator|==
literal|0
operator|)
condition|)
block|{
empty_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|color
argument_list|,
literal|"default"
argument_list|)
condition|)
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|n
operator|=
literal|0
init|;
name|n
operator|<
name|SIZEOF
argument_list|(
name|the_color_names
argument_list|)
condition|;
operator|++
name|n
control|)
block|{
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|the_color_names
index|[
name|n
index|]
argument_list|,
name|color
argument_list|)
condition|)
block|{
name|result
operator|=
operator|(
name|int
operator|)
name|n
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_COLOR_NAME */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_COLOR_NAME
end_ifdef

begin_function
specifier|static
specifier|const
name|char
modifier|*
name|color_name
parameter_list|(
name|int
name|color
parameter_list|)
block|{
specifier|static
name|char
name|temp
index|[
literal|20
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|color
operator|>=
operator|(
name|int
operator|)
name|SIZEOF
argument_list|(
name|the_color_names
argument_list|)
condition|)
block|{
name|sprintf
argument_list|(
name|temp
argument_list|,
literal|"%d"
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|result
operator|=
name|temp
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|color
operator|<
literal|0
condition|)
block|{
name|result
operator|=
literal|"default"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|the_color_names
index|[
name|color
index|]
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_COLOR_NAME */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __COLORNAME_H */
end_comment

end_unit

