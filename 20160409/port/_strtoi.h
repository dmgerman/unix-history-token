begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: _strtoi.h,v 1.1 2015/01/22 02:15:59 christos Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 1990, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Original version ID:  * NetBSD: src/lib/libc/locale/_wcstoul.h,v 1.2 2003/08/07 16:43:03 agc Exp  *  * Created by Kamil Rytarowski, based on ID:  * NetBSD: src/common/lib/libc/stdlib/_strtoul.h,v 1.7 2013/05/17 12:55:56 joerg Exp  */
end_comment

begin_comment
comment|/*  * function template for strtoi and strtou  *  * parameters:  *	_FUNCNAME    : function name  *      __TYPE       : return and range limits type  *      __WRAPPED    : wrapped function, strtoimax or strtoumax  */
end_comment

begin_function
name|__TYPE
name|_FUNCNAME
parameter_list|(
specifier|const
name|char
modifier|*
name|__restrict
name|nptr
parameter_list|,
name|char
modifier|*
modifier|*
name|__restrict
name|endptr
parameter_list|,
name|int
name|base
parameter_list|,
name|__TYPE
name|lo
parameter_list|,
name|__TYPE
name|hi
parameter_list|,
name|int
modifier|*
name|rstatus
parameter_list|)
block|{
name|int
name|serrno
decl_stmt|;
name|__TYPE
name|im
decl_stmt|;
name|char
modifier|*
name|ep
decl_stmt|;
name|int
name|rep
decl_stmt|;
comment|/* endptr may be NULL */
if|if
condition|(
name|endptr
operator|==
name|NULL
condition|)
name|endptr
operator|=
operator|&
name|ep
expr_stmt|;
if|if
condition|(
name|rstatus
operator|==
name|NULL
condition|)
name|rstatus
operator|=
operator|&
name|rep
expr_stmt|;
name|serrno
operator|=
name|errno
expr_stmt|;
name|errno
operator|=
literal|0
expr_stmt|;
name|im
operator|=
name|__WRAPPED
argument_list|(
name|nptr
argument_list|,
name|endptr
argument_list|,
name|base
argument_list|)
expr_stmt|;
operator|*
name|rstatus
operator|=
name|errno
expr_stmt|;
name|errno
operator|=
name|serrno
expr_stmt|;
if|if
condition|(
operator|*
name|rstatus
operator|==
literal|0
condition|)
block|{
comment|/* No digits were found */
if|if
condition|(
name|nptr
operator|==
operator|*
name|endptr
condition|)
operator|*
name|rstatus
operator|=
name|ECANCELED
expr_stmt|;
comment|/* There are further characters after number */
elseif|else
if|if
condition|(
operator|*
operator|*
name|endptr
operator|!=
literal|'\0'
condition|)
operator|*
name|rstatus
operator|=
name|ENOTSUP
expr_stmt|;
block|}
if|if
condition|(
name|im
operator|<
name|lo
condition|)
block|{
if|if
condition|(
operator|*
name|rstatus
operator|==
literal|0
condition|)
operator|*
name|rstatus
operator|=
name|ERANGE
expr_stmt|;
return|return
name|lo
return|;
block|}
if|if
condition|(
name|im
operator|>
name|hi
condition|)
block|{
if|if
condition|(
operator|*
name|rstatus
operator|==
literal|0
condition|)
operator|*
name|rstatus
operator|=
name|ERANGE
expr_stmt|;
return|return
name|hi
return|;
block|}
return|return
name|im
return|;
block|}
end_function

end_unit

