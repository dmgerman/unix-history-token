begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- KaleidoscopeJIT.h - A simple JIT for Kaleidoscope --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Contains a simple JIT definition for use in the kaleidoscope tutorials.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_EXECUTIONENGINE_ORC_KALEIDOSCOPEJIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_EXECUTIONENGINE_ORC_KALEIDOSCOPEJIT_H
end_define

begin_include
include|#
directive|include
file|"RemoteJITUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/ExecutionEngine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JITSymbol.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/CompileUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IndirectionUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IRCompileLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IRTransformLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/LambdaResolver.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/OrcRemoteTargetClient.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LegacyPassManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Mangler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DynamicLibrary.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Scalar.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Scalar/GVN.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|class
name|PrototypeAST
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ExprAST
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// FunctionAST - This class represents a function definition itself.
end_comment

begin_decl_stmt
name|class
name|FunctionAST
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|PrototypeAST
operator|>
name|Proto
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|ExprAST
operator|>
name|Body
expr_stmt|;
name|public
label|:
name|FunctionAST
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|PrototypeAST
operator|>
name|Proto
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|ExprAST
operator|>
name|Body
argument_list|)
operator|:
name|Proto
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Proto
argument_list|)
argument_list|)
operator|,
name|Body
argument_list|(
argument|std::move(Body)
argument_list|)
block|{}
specifier|const
name|PrototypeAST
operator|&
name|getProto
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|Function
operator|*
name|codegen
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// This will compile FnAST to IR, rename the function to add the given
end_comment

begin_comment
comment|/// suffix (needed to prevent a name-clash with the function's stub),
end_comment

begin_comment
comment|/// and then take ownership of the module that the function was compiled
end_comment

begin_comment
comment|/// into.
end_comment

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|Module
operator|>
name|irgenAndTakeOwnership
argument_list|(
name|FunctionAST
operator|&
name|FnAST
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Suffix
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|orc
block|{
comment|// Typedef the remote-client API.
name|using
name|MyRemote
init|=
name|remote
operator|::
name|OrcRemoteTargetClient
operator|<
name|FDRPCChannel
operator|>
decl_stmt|;
name|class
name|KaleidoscopeJIT
block|{
name|private
label|:
name|std
operator|::
name|unique_ptr
operator|<
name|TargetMachine
operator|>
name|TM
expr_stmt|;
specifier|const
name|DataLayout
name|DL
decl_stmt|;
name|RTDyldObjectLinkingLayer
name|ObjectLayer
decl_stmt|;
name|IRCompileLayer
operator|<
name|decltype
argument_list|(
name|ObjectLayer
argument_list|)
operator|,
name|SimpleCompiler
operator|>
name|CompileLayer
expr_stmt|;
name|using
name|OptimizeFunction
init|=
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
operator|(
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
operator|)
operator|>
decl_stmt|;
name|IRTransformLayer
operator|<
name|decltype
argument_list|(
name|CompileLayer
argument_list|)
operator|,
name|OptimizeFunction
operator|>
name|OptimizeLayer
expr_stmt|;
name|JITCompileCallbackManager
modifier|*
name|CompileCallbackMgr
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|IndirectStubsManager
operator|>
name|IndirectStubsMgr
expr_stmt|;
name|MyRemote
modifier|&
name|Remote
decl_stmt|;
name|public
label|:
name|using
name|ModuleHandle
init|=
name|decltype
argument_list|(
name|OptimizeLayer
argument_list|)
operator|::
name|ModuleHandleT
decl_stmt|;
name|KaleidoscopeJIT
argument_list|(
name|MyRemote
operator|&
name|Remote
argument_list|)
operator|:
name|TM
argument_list|(
name|EngineBuilder
argument_list|()
operator|.
name|selectTarget
argument_list|(
name|Triple
argument_list|(
name|Remote
operator|.
name|getTargetTriple
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
name|SmallVector
operator|<
name|std
operator|::
name|string
argument_list|,
literal|0
operator|>
operator|(
operator|)
argument_list|)
argument_list|)
operator|,
name|DL
argument_list|(
name|TM
operator|->
name|createDataLayout
argument_list|()
argument_list|)
operator|,
name|CompileLayer
argument_list|(
name|ObjectLayer
argument_list|,
name|SimpleCompiler
argument_list|(
operator|*
name|TM
argument_list|)
argument_list|)
operator|,
name|OptimizeLayer
argument_list|(
name|CompileLayer
argument_list|,
index|[
name|this
index|]
operator|(
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|M
operator|)
block|{
return|return
name|optimizeModule
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
return|;
block|}
block|)
decl_stmt|,
name|Remote
argument_list|(
name|Remote
argument_list|)
block|{
name|auto
name|CCMgrOrErr
init|=
name|Remote
operator|.
name|enableCompileCallbacks
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|CCMgrOrErr
condition|)
block|{
name|logAllUnhandledErrors
argument_list|(
name|CCMgrOrErr
operator|.
name|takeError
argument_list|()
argument_list|,
name|errs
argument_list|()
argument_list|,
literal|"Error enabling remote compile callbacks:"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|CompileCallbackMgr
operator|=
operator|&
operator|*
name|CCMgrOrErr
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|MyRemote
operator|::
name|RCIndirectStubsManager
operator|>
name|ISM
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Remote
operator|.
name|createIndirectStubsManager
argument_list|(
name|ISM
argument_list|)
condition|)
block|{
name|logAllUnhandledErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
name|errs
argument_list|()
argument_list|,
literal|"Error creating indirect stubs manager:"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|IndirectStubsMgr
operator|=
name|std
operator|::
name|move
argument_list|(
name|ISM
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|sys
operator|::
name|DynamicLibrary
operator|::
name|LoadLibraryPermanently
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
block|}
name|TargetMachine
modifier|&
name|getTargetMachine
parameter_list|()
block|{
return|return
operator|*
name|TM
return|;
block|}
name|ModuleHandle
name|addModule
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|M
argument_list|)
block|{
comment|// Build our symbol resolver:
comment|// Lambda 1: Look back into the JIT itself to find symbols that are part of
comment|//           the same "logical dylib".
comment|// Lambda 2: Search for external symbols in the host process.
name|auto
name|Resolver
init|=
name|createLambdaResolver
argument_list|(
index|[
operator|&
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Sym
init|=
name|IndirectStubsMgr
operator|->
name|findStub
argument_list|(
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Sym
return|;
if|if
condition|(
name|auto
name|Sym
init|=
name|OptimizeLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|Sym
return|;
return|return
name|JITSymbol
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
operator|,
index|[
operator|&
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|AddrOrErr
init|=
name|Remote
operator|.
name|getSymbolAddress
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|JITSymbol
argument_list|(
operator|*
name|AddrOrErr
argument_list|,
name|JITSymbolFlags
operator|::
name|Exported
argument_list|)
return|;
else|else
block|{
name|logAllUnhandledErrors
argument_list|(
name|AddrOrErr
operator|.
name|takeError
argument_list|()
argument_list|,
name|errs
argument_list|()
argument_list|,
literal|"Error resolving remote symbol:"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|JITSymbol
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
block|)
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|MyRemote
operator|::
name|RCMemoryManager
operator|>
name|MemMgr
expr_stmt|;
if|if
condition|(
name|auto
name|Err
init|=
name|Remote
operator|.
name|createRemoteMemoryManager
argument_list|(
name|MemMgr
argument_list|)
condition|)
block|{
name|logAllUnhandledErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
name|errs
argument_list|()
argument_list|,
literal|"Error creating remote memory manager:"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Add the set to the JIT with the resolver we created above and a newly
comment|// created SectionMemoryManager.
return|return
name|OptimizeLayer
operator|.
name|addModule
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Error
name|addFunctionAST
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|FunctionAST
operator|>
name|FnAST
argument_list|)
block|{
comment|// Create a CompileCallback - this is the re-entry point into the compiler
comment|// for functions that haven't been compiled yet.
name|auto
name|CCInfo
init|=
name|CompileCallbackMgr
operator|->
name|getCompileCallback
argument_list|()
decl_stmt|;
comment|// Create an indirect stub. This serves as the functions "canonical
comment|// definition" - an unchanging (constant address) entry point to the
comment|// function implementation.
comment|// Initially we point the stub's function-pointer at the compile callback
comment|// that we just created. In the compile action for the callback (see below)
comment|// we will update the stub's function pointer to point at the function
comment|// implementation that we just implemented.
if|if
condition|(
name|auto
name|Err
init|=
name|IndirectStubsMgr
operator|->
name|createStub
argument_list|(
name|mangle
argument_list|(
name|FnAST
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|,
name|CCInfo
operator|.
name|getAddress
argument_list|()
argument_list|,
name|JITSymbolFlags
operator|::
name|Exported
argument_list|)
condition|)
return|return
name|Err
return|;
comment|// Move ownership of FnAST to a shared pointer - C++11 lambdas don't support
comment|// capture-by-move, which is be required for unique_ptr.
name|auto
name|SharedFnAST
init|=
name|std
operator|::
name|shared_ptr
operator|<
name|FunctionAST
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|FnAST
argument_list|)
operator|)
decl_stmt|;
comment|// Set the action to compile our AST. This lambda will be run if/when
comment|// execution hits the compile callback (via the stub).
comment|//
comment|// The steps to compile are:
comment|// (1) IRGen the function.
comment|// (2) Add the IR module to the JIT to make it executable like any other
comment|//     module.
comment|// (3) Use findSymbol to get the address of the compiled function.
comment|// (4) Update the stub pointer to point at the implementation so that
comment|///    subsequent calls go directly to it and bypass the compiler.
comment|// (5) Return the address of the implementation: this lambda will actually
comment|//     be run inside an attempted call to the function, and we need to
comment|//     continue on to the implementation to complete the attempted call.
comment|//     The JIT runtime (the resolver block) will use the return address of
comment|//     this function as the address to continue at once it has reset the
comment|//     CPU state to what it was immediately before the call.
name|CCInfo
operator|.
name|setCompileAction
argument_list|(
index|[
name|this
operator|,
name|SharedFnAST
index|]
operator|(
operator|)
block|{
name|auto
name|M
operator|=
name|irgenAndTakeOwnership
argument_list|(
operator|*
name|SharedFnAST
argument_list|,
literal|"$impl"
argument_list|)
block|;
name|addModule
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
block|;
name|auto
name|Sym
operator|=
name|findSymbol
argument_list|(
name|SharedFnAST
operator|->
name|getName
argument_list|()
operator|+
literal|"$impl"
argument_list|)
block|;
name|assert
argument_list|(
name|Sym
operator|&&
literal|"Couldn't find compiled function?"
argument_list|)
block|;
name|JITTargetAddress
name|SymAddr
operator|=
name|Sym
operator|.
name|getAddress
argument_list|()
block|;
if|if
condition|(
name|auto
name|Err
init|=
name|IndirectStubsMgr
operator|->
name|updatePointer
argument_list|(
name|mangle
argument_list|(
name|SharedFnAST
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|,
name|SymAddr
argument_list|)
condition|)
block|{
name|logAllUnhandledErrors
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|,
name|errs
argument_list|()
argument_list|,
literal|"Error updating function pointer: "
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|SymAddr
return|;
block|}
block|)
decl_stmt|;
end_decl_stmt

begin_return
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
end_return

begin_macro
unit|}    Error
name|executeRemoteExpr
argument_list|(
argument|JITTargetAddress ExprAddr
argument_list|)
end_macro

begin_block
block|{
return|return
name|Remote
operator|.
name|callVoidVoid
argument_list|(
name|ExprAddr
argument_list|)
return|;
block|}
end_block

begin_decl_stmt
name|JITSymbol
name|findSymbol
argument_list|(
specifier|const
name|std
operator|::
name|string
name|Name
argument_list|)
block|{
return|return
name|OptimizeLayer
operator|.
name|findSymbol
argument_list|(
name|mangle
argument_list|(
name|Name
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|void
name|removeModule
parameter_list|(
name|ModuleHandle
name|H
parameter_list|)
block|{
name|OptimizeLayer
operator|.
name|removeModule
argument_list|(
name|H
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|mangle
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|std
operator|::
name|string
name|MangledName
block|;
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|Mangler
operator|::
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|,
name|DL
argument_list|)
block|;
return|return
name|MangledNameStream
operator|.
name|str
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|Module
operator|>
name|optimizeModule
argument_list|(
argument|std::shared_ptr<Module> M
argument_list|)
block|{
comment|// Create a function pass manager.
name|auto
name|FPM
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|legacy
operator|::
name|FunctionPassManager
operator|>
operator|(
name|M
operator|.
name|get
argument_list|()
operator|)
block|;
comment|// Add some optimizations.
name|FPM
operator|->
name|add
argument_list|(
name|createInstructionCombiningPass
argument_list|()
argument_list|)
block|;
name|FPM
operator|->
name|add
argument_list|(
name|createReassociatePass
argument_list|()
argument_list|)
block|;
name|FPM
operator|->
name|add
argument_list|(
name|createGVNPass
argument_list|()
argument_list|)
block|;
name|FPM
operator|->
name|add
argument_list|(
name|createCFGSimplificationPass
argument_list|()
argument_list|)
block|;
name|FPM
operator|->
name|doInitialization
argument_list|()
block|;
comment|// Run the optimizations over all functions in the module being added to
comment|// the JIT.
for|for
control|(
name|auto
operator|&
name|F
operator|:
operator|*
name|M
control|)
name|FPM
operator|->
name|run
argument_list|(
name|F
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|M
return|;
end_return

begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace orc
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_EXECUTIONENGINE_ORC_KALEIDOSCOPEJIT_H
end_comment

end_unit

