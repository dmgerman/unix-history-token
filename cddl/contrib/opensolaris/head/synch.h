begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYNCH_H
end_ifndef

begin_define
define|#
directive|define
name|_SYNCH_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_comment
comment|/*  * synch.h:  * definitions needed to use the thread synchronization interface  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ASM
end_ifndef

begin_include
include|#
directive|include
file|<sys/machlock.h>
end_include

begin_include
include|#
directive|include
file|<sys/time_impl.h>
end_include

begin_include
include|#
directive|include
file|<sys/synch.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ASM */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ASM
comment|/*  * Semaphores  */
typedef|typedef
struct|struct
name|_sema
block|{
comment|/* this structure must be the same as sem_t in<semaphore.h> */
name|uint32_t
name|count
decl_stmt|;
comment|/* semaphore count */
name|uint16_t
name|type
decl_stmt|;
name|uint16_t
name|magic
decl_stmt|;
name|upad64_t
name|pad1
index|[
literal|3
index|]
decl_stmt|;
comment|/* reserved for a mutex_t */
name|upad64_t
name|pad2
index|[
literal|2
index|]
decl_stmt|;
comment|/* reserved for a cond_t */
block|}
name|sema_t
typedef|;
comment|/*  * POSIX.1c Note:  * POSIX.1c requires that<pthread.h> define the structures pthread_mutex_t  * and pthread_cond_t.  These structures are identical to mutex_t (lwp_mutex_t)  * and cond_t (lwp_cond_t) which are defined in<synch.h>.  A nested included  * of<synch.h> (to allow a "#typedef mutex_t  pthread_mutex_t") would pull in  * non-posix symbols/constants violating the namespace restrictions.  Hence,  * pthread_mutex_t/pthread_cond_t have been redefined in<pthread.h> (actually  * in<sys/types.h>).  Any modifications done to mutex_t/lwp_mutex_t or  * cond_t/lwp_cond_t should also be done to pthread_mutex_t/pthread_cond_t.  */
typedef|typedef
name|lwp_mutex_t
name|mutex_t
typedef|;
typedef|typedef
name|lwp_cond_t
name|cond_t
typedef|;
comment|/*  * Readers/writer locks  *  * NOTE: The layout of this structure should be kept in sync with the layout  * of the correponding structure of pthread_rwlock_t in sys/types.h.  * Also, there is an identical structure for lwp_rwlock_t in<sys/synch.h>.  * Because we have to deal with C++, we cannot redefine this one as that one.  */
typedef|typedef
struct|struct
name|_rwlock
block|{
name|int32_t
name|readers
decl_stmt|;
comment|/* rwstate word */
name|uint16_t
name|type
decl_stmt|;
name|uint16_t
name|magic
decl_stmt|;
name|mutex_t
name|mutex
decl_stmt|;
comment|/* used with process-shared rwlocks */
name|cond_t
name|readercv
decl_stmt|;
comment|/* used only to indicate ownership */
name|cond_t
name|writercv
decl_stmt|;
comment|/* used only to indicate ownership */
block|}
name|rwlock_t
typedef|;
ifdef|#
directive|ifdef
name|__STDC__
name|int
name|_lwp_mutex_lock
parameter_list|(
name|lwp_mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_mutex_unlock
parameter_list|(
name|lwp_mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_mutex_trylock
parameter_list|(
name|lwp_mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_cond_wait
parameter_list|(
name|lwp_cond_t
modifier|*
parameter_list|,
name|lwp_mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_cond_timedwait
parameter_list|(
name|lwp_cond_t
modifier|*
parameter_list|,
name|lwp_mutex_t
modifier|*
parameter_list|,
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_cond_reltimedwait
parameter_list|(
name|lwp_cond_t
modifier|*
parameter_list|,
name|lwp_mutex_t
modifier|*
parameter_list|,
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_cond_signal
parameter_list|(
name|lwp_cond_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_cond_broadcast
parameter_list|(
name|lwp_cond_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_sema_init
parameter_list|(
name|lwp_sema_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|_lwp_sema_wait
parameter_list|(
name|lwp_sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_sema_trywait
parameter_list|(
name|lwp_sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_lwp_sema_post
parameter_list|(
name|lwp_sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_init
parameter_list|(
name|cond_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_destroy
parameter_list|(
name|cond_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_wait
parameter_list|(
name|cond_t
modifier|*
parameter_list|,
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_timedwait
parameter_list|(
name|cond_t
modifier|*
parameter_list|,
name|mutex_t
modifier|*
parameter_list|,
specifier|const
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_reltimedwait
parameter_list|(
name|cond_t
modifier|*
parameter_list|,
name|mutex_t
modifier|*
parameter_list|,
specifier|const
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_signal
parameter_list|(
name|cond_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|cond_broadcast
parameter_list|(
name|cond_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_init
parameter_list|(
name|mutex_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_destroy
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_consistent
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_lock
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_trylock
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|mutex_unlock
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rwlock_init
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|rwlock_destroy
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rw_rdlock
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rw_wrlock
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rw_unlock
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rw_tryrdlock
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|rw_trywrlock
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_init
parameter_list|(
name|sema_t
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_destroy
parameter_list|(
name|sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_wait
parameter_list|(
name|sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_timedwait
parameter_list|(
name|sema_t
modifier|*
parameter_list|,
specifier|const
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_reltimedwait
parameter_list|(
name|sema_t
modifier|*
parameter_list|,
specifier|const
name|timespec_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_post
parameter_list|(
name|sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|sema_trywait
parameter_list|(
name|sema_t
modifier|*
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* __STDC__ */
name|int
name|_lwp_mutex_lock
parameter_list|()
function_decl|;
name|int
name|_lwp_mutex_unlock
parameter_list|()
function_decl|;
name|int
name|_lwp_mutex_trylock
parameter_list|()
function_decl|;
name|int
name|_lwp_cond_wait
parameter_list|()
function_decl|;
name|int
name|_lwp_cond_timedwait
parameter_list|()
function_decl|;
name|int
name|_lwp_cond_reltimedwait
parameter_list|()
function_decl|;
name|int
name|_lwp_cond_signal
parameter_list|()
function_decl|;
name|int
name|_lwp_cond_broadcast
parameter_list|()
function_decl|;
name|int
name|_lwp_sema_init
parameter_list|()
function_decl|;
name|int
name|_lwp_sema_wait
parameter_list|()
function_decl|;
name|int
name|_lwp_sema_trywait
parameter_list|()
function_decl|;
name|int
name|_lwp_sema_post
parameter_list|()
function_decl|;
name|int
name|cond_init
parameter_list|()
function_decl|;
name|int
name|cond_destroy
parameter_list|()
function_decl|;
name|int
name|cond_wait
parameter_list|()
function_decl|;
name|int
name|cond_timedwait
parameter_list|()
function_decl|;
name|int
name|cond_reltimedwait
parameter_list|()
function_decl|;
name|int
name|cond_signal
parameter_list|()
function_decl|;
name|int
name|cond_broadcast
parameter_list|()
function_decl|;
name|int
name|mutex_init
parameter_list|()
function_decl|;
name|int
name|mutex_destroy
parameter_list|()
function_decl|;
name|int
name|mutex_consistent
parameter_list|()
function_decl|;
name|int
name|mutex_lock
parameter_list|()
function_decl|;
name|int
name|mutex_trylock
parameter_list|()
function_decl|;
name|int
name|mutex_unlock
parameter_list|()
function_decl|;
name|int
name|rwlock_init
parameter_list|()
function_decl|;
name|int
name|rwlock_destroy
parameter_list|()
function_decl|;
name|int
name|rw_rdlock
parameter_list|()
function_decl|;
name|int
name|rw_wrlock
parameter_list|()
function_decl|;
name|int
name|rw_unlock
parameter_list|()
function_decl|;
name|int
name|rw_tryrdlock
parameter_list|()
function_decl|;
name|int
name|rw_trywrlock
parameter_list|()
function_decl|;
name|int
name|sema_init
parameter_list|()
function_decl|;
name|int
name|sema_destroy
parameter_list|()
function_decl|;
name|int
name|sema_wait
parameter_list|()
function_decl|;
name|int
name|sema_timedwait
parameter_list|()
function_decl|;
name|int
name|sema_reltimedwait
parameter_list|()
function_decl|;
name|int
name|sema_post
parameter_list|()
function_decl|;
name|int
name|sema_trywait
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* __STDC__ */
endif|#
directive|endif
comment|/* _ASM */
comment|/* "Magic numbers" tagging synchronization object types */
define|#
directive|define
name|MUTEX_MAGIC
value|_MUTEX_MAGIC
define|#
directive|define
name|SEMA_MAGIC
value|_SEMA_MAGIC
define|#
directive|define
name|COND_MAGIC
value|_COND_MAGIC
define|#
directive|define
name|RWL_MAGIC
value|_RWL_MAGIC
comment|/*  * POSIX.1c Note:  * DEFAULTMUTEX is defined same as PTHREAD_MUTEX_INITIALIZER in<pthread.h>.  * DEFAULTCV is defined same as PTHREAD_COND_INITIALIZER in<pthread.h>.  * DEFAULTRWLOCK is defined same as PTHREAD_RWLOCK_INITIALIZER in<pthread.h>.  * Any changes to these macros should be reflected in<pthread.h>  */
define|#
directive|define
name|DEFAULTMUTEX
define|\
value|{{0, 0, 0, {USYNC_THREAD}, MUTEX_MAGIC}, \ 	{{{0, 0, 0, 0, 0, 0, 0, 0}}}, 0}
define|#
directive|define
name|SHAREDMUTEX
define|\
value|{{0, 0, 0, {USYNC_PROCESS}, MUTEX_MAGIC}, \ 	{{{0, 0, 0, 0, 0, 0, 0, 0}}}, 0}
define|#
directive|define
name|RECURSIVEMUTEX
define|\
value|{{0, 0, 0, {USYNC_THREAD|LOCK_RECURSIVE}, MUTEX_MAGIC}, \ 	{{{0, 0, 0, 0, 0, 0, 0, 0}}}, 0}
define|#
directive|define
name|ERRORCHECKMUTEX
define|\
value|{{0, 0, 0, {USYNC_THREAD|LOCK_ERRORCHECK}, MUTEX_MAGIC}, \ 	{{{0, 0, 0, 0, 0, 0, 0, 0}}}, 0}
define|#
directive|define
name|RECURSIVE_ERRORCHECKMUTEX
define|\
value|{{0, 0, 0, {USYNC_THREAD|LOCK_RECURSIVE|LOCK_ERRORCHECK}, \ 	MUTEX_MAGIC}, {{{0, 0, 0, 0, 0, 0, 0, 0}}}, 0}
define|#
directive|define
name|DEFAULTCV
define|\
value|{{{0, 0, 0, 0}, USYNC_THREAD, COND_MAGIC}, 0}
define|#
directive|define
name|SHAREDCV
define|\
value|{{{0, 0, 0, 0}, USYNC_PROCESS, COND_MAGIC}, 0}
define|#
directive|define
name|DEFAULTSEMA
define|\
value|{0, USYNC_THREAD, SEMA_MAGIC, {0, 0, 0}, {0, 0}}
define|#
directive|define
name|SHAREDSEMA
define|\
value|{0, USYNC_PROCESS, SEMA_MAGIC, {0, 0, 0}, {0, 0}}
define|#
directive|define
name|DEFAULTRWLOCK
define|\
value|{0, USYNC_THREAD, RWL_MAGIC, DEFAULTMUTEX, DEFAULTCV, DEFAULTCV}
define|#
directive|define
name|SHAREDRWLOCK
define|\
value|{0, USYNC_PROCESS, RWL_MAGIC, SHAREDMUTEX, SHAREDCV, SHAREDCV}
comment|/*  * Tests on lock states.  */
define|#
directive|define
name|SEMA_HELD
parameter_list|(
name|x
parameter_list|)
value|_sema_held(x)
define|#
directive|define
name|RW_READ_HELD
parameter_list|(
name|x
parameter_list|)
value|_rw_read_held(x)
define|#
directive|define
name|RW_WRITE_HELD
parameter_list|(
name|x
parameter_list|)
value|_rw_write_held(x)
define|#
directive|define
name|RW_LOCK_HELD
parameter_list|(
name|x
parameter_list|)
value|(RW_READ_HELD(x) || RW_WRITE_HELD(x))
define|#
directive|define
name|MUTEX_HELD
parameter_list|(
name|x
parameter_list|)
value|_mutex_held(x)
comment|/*  * The following definitions are for assertions which can be checked  * statically by tools like lock_lint.  You can also define your own  * run-time test for each.  If you don't, we define them to 1 so that  * such assertions simply pass.  */
ifndef|#
directive|ifndef
name|NO_LOCKS_HELD
define|#
directive|define
name|NO_LOCKS_HELD
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NO_COMPETING_THREADS
define|#
directive|define
name|NO_COMPETING_THREADS
value|1
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ASM
ifdef|#
directive|ifdef
name|__STDC__
name|int
name|_sema_held
parameter_list|(
name|sema_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_rw_read_held
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_rw_write_held
parameter_list|(
name|rwlock_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|_mutex_held
parameter_list|(
name|mutex_t
modifier|*
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* __STDC__ */
name|int
name|_sema_held
parameter_list|()
function_decl|;
name|int
name|_rw_read_held
parameter_list|()
function_decl|;
name|int
name|_rw_write_held
parameter_list|()
function_decl|;
name|int
name|_mutex_held
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* __STDC__ */
endif|#
directive|endif
comment|/* _ASM */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYNCH_H */
end_comment

end_unit

