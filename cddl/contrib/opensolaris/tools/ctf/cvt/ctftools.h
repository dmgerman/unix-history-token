begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2006 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CTFTOOLS_H
end_ifndef

begin_define
define|#
directive|define
name|_CTFTOOLS_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_comment
comment|/*  * Functions and data structures used in the manipulation of stabs and CTF data  */
end_comment

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<libelf.h>
end_include

begin_include
include|#
directive|include
file|<gelf.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|"list.h"
include|#
directive|include
file|"hash.h"
ifndef|#
directive|ifndef
name|DEBUG_LEVEL
define|#
directive|define
name|DEBUG_LEVEL
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|DEBUG_PARSE
define|#
directive|define
name|DEBUG_PARSE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|DEBUG_STREAM
define|#
directive|define
name|DEBUG_STREAM
value|stderr
endif|#
directive|endif
ifndef|#
directive|ifndef
name|MAX
define|#
directive|define
name|MAX
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)< (b) ? (b) : (a))
endif|#
directive|endif
ifndef|#
directive|ifndef
name|MIN
define|#
directive|define
name|MIN
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|((a)> (b) ? (b) : (a))
endif|#
directive|endif
define|#
directive|define
name|TRUE
value|1
define|#
directive|define
name|FALSE
value|0
define|#
directive|define
name|CTF_ELF_SCN_NAME
value|".SUNW_ctf"
define|#
directive|define
name|CTF_LABEL_LASTIDX
value|-1
define|#
directive|define
name|CTF_DEFAULT_LABEL
value|"*** No Label Provided ***"
comment|/*  * Default hash sizes  */
define|#
directive|define
name|TDATA_LAYOUT_HASH_SIZE
value|8191
comment|/* A tdesc hash based on layout */
define|#
directive|define
name|TDATA_ID_HASH_SIZE
value|997
comment|/* A tdesc hash based on type id */
define|#
directive|define
name|IIDESC_HASH_SIZE
value|8191
comment|/* Hash of iidesc's */
comment|/*  * The default function argument array size.  We'll realloc the array larger  * if we need to, but we want a default value that will allow us to avoid  * reallocation in the common case.  */
define|#
directive|define
name|FUNCARG_DEF
value|5
specifier|extern
specifier|const
name|char
modifier|*
name|progname
decl_stmt|;
specifier|extern
name|int
name|debug_level
decl_stmt|;
specifier|extern
name|int
name|debug_parse
decl_stmt|;
specifier|extern
name|char
modifier|*
name|curhdr
decl_stmt|;
comment|/*  * This is a partial copy of the stab.h that DevPro includes with their  * compiler.  */
typedef|typedef
struct|struct
name|stab
block|{
name|uint32_t
name|n_strx
decl_stmt|;
name|uint8_t
name|n_type
decl_stmt|;
name|int8_t
name|n_other
decl_stmt|;
name|int16_t
name|n_desc
decl_stmt|;
name|uint32_t
name|n_value
decl_stmt|;
block|}
name|stab_t
typedef|;
define|#
directive|define
name|N_GSYM
value|0x20
comment|/* global symbol: name,,0,type,0 */
define|#
directive|define
name|N_FUN
value|0x24
comment|/* procedure: name,,0,linenumber,0 */
define|#
directive|define
name|N_STSYM
value|0x26
comment|/* static symbol: name,,0,type,0 or section relative */
define|#
directive|define
name|N_LCSYM
value|0x28
comment|/* .lcomm symbol: name,,0,type,0 or section relative */
define|#
directive|define
name|N_ROSYM
value|0x2c
comment|/* ro_data: name,,0,type,0 or section relative */
define|#
directive|define
name|N_OPT
value|0x3c
comment|/* compiler options */
define|#
directive|define
name|N_RSYM
value|0x40
comment|/* register sym: name,,0,type,register */
define|#
directive|define
name|N_SO
value|0x64
comment|/* source file name: name,,0,0,0 */
define|#
directive|define
name|N_LSYM
value|0x80
comment|/* local sym: name,,0,type,offset */
define|#
directive|define
name|N_SOL
value|0x84
comment|/* #included file name: name,,0,0,0 */
define|#
directive|define
name|N_PSYM
value|0xa0
comment|/* parameter: name,,0,type,offset */
define|#
directive|define
name|N_LBRAC
value|0xc0
comment|/* left bracket: 0,,0,nesting level,function relative */
define|#
directive|define
name|N_RBRAC
value|0xe0
comment|/* right bracket: 0,,0,nesting level,func relative */
define|#
directive|define
name|N_BINCL
value|0x82
comment|/* header file: name,,0,0,0 */
define|#
directive|define
name|N_EINCL
value|0xa2
comment|/* end of include file */
comment|/*  * Nodes in the type tree  *  * Each node consists of a single tdesc_t, with one of several auxiliary  * structures linked in via the `data' union.  */
comment|/* The type of tdesc_t node */
typedef|typedef
enum|enum
name|stabtype
block|{
name|STABTYPE_FIRST
block|,
comment|/* do not use */
name|INTRINSIC
block|,
name|POINTER
block|,
name|ARRAY
block|,
name|FUNCTION
block|,
name|STRUCT
block|,
name|UNION
block|,
name|ENUM
block|,
name|FORWARD
block|,
name|TYPEDEF
block|,
name|TYPEDEF_UNRES
block|,
name|VOLATILE
block|,
name|CONST
block|,
name|RESTRICT
block|,
name|STABTYPE_LAST
comment|/* do not use */
block|}
name|stabtype_t
typedef|;
typedef|typedef
name|struct
name|tdesc
name|tdesc_t
typedef|;
comment|/* Auxiliary structure for array tdesc_t */
typedef|typedef
struct|struct
name|ardef
block|{
name|tdesc_t
modifier|*
name|ad_contents
decl_stmt|;
name|tdesc_t
modifier|*
name|ad_idxtype
decl_stmt|;
name|uint_t
name|ad_nelems
decl_stmt|;
block|}
name|ardef_t
typedef|;
comment|/* Auxiliary structure for structure/union tdesc_t */
typedef|typedef
struct|struct
name|mlist
block|{
name|int
name|ml_offset
decl_stmt|;
comment|/* Offset from start of structure (in bits) */
name|uint_t
name|ml_size
decl_stmt|;
comment|/* Member size (in bits) */
name|char
modifier|*
name|ml_name
decl_stmt|;
comment|/* Member name */
name|struct
name|tdesc
modifier|*
name|ml_type
decl_stmt|;
comment|/* Member type */
name|struct
name|mlist
modifier|*
name|ml_next
decl_stmt|;
comment|/* Next member */
block|}
name|mlist_t
typedef|;
comment|/* Auxiliary structure for enum tdesc_t */
typedef|typedef
struct|struct
name|elist
block|{
name|char
modifier|*
name|el_name
decl_stmt|;
name|int
name|el_number
decl_stmt|;
name|struct
name|elist
modifier|*
name|el_next
decl_stmt|;
block|}
name|elist_t
typedef|;
comment|/* Auxiliary structure for intrinsics (integers and reals) */
typedef|typedef
enum|enum
block|{
name|INTR_INT
block|,
name|INTR_REAL
block|}
name|intrtype_t
typedef|;
typedef|typedef
struct|struct
name|intr
block|{
name|intrtype_t
name|intr_type
decl_stmt|;
name|int
name|intr_signed
decl_stmt|;
union|union
block|{
name|char
name|_iformat
decl_stmt|;
name|int
name|_fformat
decl_stmt|;
block|}
name|_u
union|;
name|int
name|intr_offset
decl_stmt|;
name|int
name|intr_nbits
decl_stmt|;
block|}
name|intr_t
typedef|;
define|#
directive|define
name|intr_iformat
value|_u._iformat
define|#
directive|define
name|intr_fformat
value|_u._fformat
typedef|typedef
struct|struct
name|fnarg
block|{
name|char
modifier|*
name|fna_name
decl_stmt|;
name|struct
name|tdesc
modifier|*
name|fna_type
decl_stmt|;
block|}
name|fnarg_t
typedef|;
define|#
directive|define
name|FN_F_GLOBAL
value|0x1
define|#
directive|define
name|FN_F_VARARGS
value|0x2
typedef|typedef
struct|struct
name|fndef
block|{
name|struct
name|tdesc
modifier|*
name|fn_ret
decl_stmt|;
name|uint_t
name|fn_nargs
decl_stmt|;
name|tdesc_t
modifier|*
modifier|*
name|fn_args
decl_stmt|;
name|uint_t
name|fn_vargs
decl_stmt|;
block|}
name|fndef_t
typedef|;
typedef|typedef
name|int32_t
name|tid_t
typedef|;
comment|/*  * The tdesc_t (Type DESCription) is the basic node type used in the stabs data  * structure.  Each data node gets a tdesc structure.  Each node is linked into  * a directed graph (think of it as a tree with multiple roots and multiple  * leaves), with the root nodes at the top, and intrinsics at the bottom.  The  * root nodes, which are pointed to by iidesc nodes, correspond to the types,  * globals, and statics defined by the stabs.  */
struct|struct
name|tdesc
block|{
name|char
modifier|*
name|t_name
decl_stmt|;
name|tdesc_t
modifier|*
name|t_next
decl_stmt|;
comment|/* Name hash next pointer */
name|tid_t
name|t_id
decl_stmt|;
name|tdesc_t
modifier|*
name|t_hash
decl_stmt|;
comment|/* ID hash next pointer */
name|stabtype_t
name|t_type
decl_stmt|;
name|int
name|t_size
decl_stmt|;
comment|/* Size in bytes of object represented by this node */
union|union
block|{
name|intr_t
modifier|*
name|intr
decl_stmt|;
comment|/* int, real */
name|tdesc_t
modifier|*
name|tdesc
decl_stmt|;
comment|/* ptr, typedef, vol, const, restr */
name|ardef_t
modifier|*
name|ardef
decl_stmt|;
comment|/* array */
name|mlist_t
modifier|*
name|members
decl_stmt|;
comment|/* struct, union */
name|elist_t
modifier|*
name|emem
decl_stmt|;
comment|/* enum */
name|fndef_t
modifier|*
name|fndef
decl_stmt|;
comment|/* function - first is return type */
block|}
name|t_data
union|;
name|int
name|t_flags
decl_stmt|;
name|int
name|t_vgen
decl_stmt|;
comment|/* Visitation generation (see traverse.c) */
name|int
name|t_emark
decl_stmt|;
comment|/* Equality mark (see equiv_cb() in merge.c) */
block|}
struct|;
define|#
directive|define
name|t_intr
value|t_data.intr
define|#
directive|define
name|t_tdesc
value|t_data.tdesc
define|#
directive|define
name|t_ardef
value|t_data.ardef
define|#
directive|define
name|t_members
value|t_data.members
define|#
directive|define
name|t_emem
value|t_data.emem
define|#
directive|define
name|t_fndef
value|t_data.fndef
define|#
directive|define
name|TDESC_F_ISROOT
value|0x1
comment|/* Has an iidesc_t (see below) */
define|#
directive|define
name|TDESC_F_GLOBAL
value|0x2
define|#
directive|define
name|TDESC_F_RESOLVED
value|0x4
comment|/*  * iidesc_t (Interesting Item DESCription) nodes point to tdesc_t nodes that  * correspond to "interesting" stabs.  A stab is interesting if it defines a  * global or static variable, a global or static function, or a data type.  */
typedef|typedef
enum|enum
name|iitype
block|{
name|II_NOT
init|=
literal|0
block|,
name|II_GFUN
block|,
comment|/* Global function */
name|II_SFUN
block|,
comment|/* Static function */
name|II_GVAR
block|,
comment|/* Global variable */
name|II_SVAR
block|,
comment|/* Static variable */
name|II_PSYM
block|,
comment|/* Function argument */
name|II_SOU
block|,
comment|/* Struct or union */
name|II_TYPE
comment|/* Type (typedef) */
block|}
name|iitype_t
typedef|;
typedef|typedef
struct|struct
name|iidesc
block|{
name|iitype_t
name|ii_type
decl_stmt|;
name|char
modifier|*
name|ii_name
decl_stmt|;
name|tdesc_t
modifier|*
name|ii_dtype
decl_stmt|;
name|char
modifier|*
name|ii_owner
decl_stmt|;
comment|/* File that defined this node */
name|int
name|ii_flags
decl_stmt|;
comment|/* Function arguments (if any) */
name|int
name|ii_nargs
decl_stmt|;
name|tdesc_t
modifier|*
modifier|*
name|ii_args
decl_stmt|;
name|int
name|ii_vargs
decl_stmt|;
comment|/* Function uses varargs */
block|}
name|iidesc_t
typedef|;
define|#
directive|define
name|IIDESC_F_USED
value|0x1
comment|/* Write this iidesc out */
comment|/*  * labelent_t nodes identify labels and corresponding type ranges associated  * with them.  The label in a given labelent_t is associated with types with  * ids<= le_idx.  */
typedef|typedef
struct|struct
name|labelent
block|{
name|char
modifier|*
name|le_name
decl_stmt|;
name|int
name|le_idx
decl_stmt|;
block|}
name|labelent_t
typedef|;
comment|/*  * The tdata_t (Type DATA) structure contains or references all type data for  * a given file or, during merging, several files.  */
typedef|typedef
struct|struct
name|tdata
block|{
name|int
name|td_curemark
decl_stmt|;
comment|/* Equality mark (see merge.c) */
name|int
name|td_curvgen
decl_stmt|;
comment|/* Visitation generation (see traverse.c) */
name|int
name|td_nextid
decl_stmt|;
comment|/* The ID for the next tdesc_t created */
name|hash_t
modifier|*
name|td_iihash
decl_stmt|;
comment|/* The iidesc_t nodes for this file */
name|hash_t
modifier|*
name|td_layouthash
decl_stmt|;
comment|/* The tdesc nodes, hashed by structure */
name|hash_t
modifier|*
name|td_idhash
decl_stmt|;
comment|/* The tdesc nodes, hashed by type id */
name|list_t
modifier|*
name|td_fwdlist
decl_stmt|;
comment|/* All forward declaration tdesc nodes */
name|char
modifier|*
name|td_parlabel
decl_stmt|;
comment|/* Top label uniq'd against in parent */
name|char
modifier|*
name|td_parname
decl_stmt|;
comment|/* Basename of parent */
name|list_t
modifier|*
name|td_labels
decl_stmt|;
comment|/* Labels and their type ranges */
name|pthread_mutex_t
name|td_mergelock
decl_stmt|;
name|int
name|td_ref
decl_stmt|;
block|}
name|tdata_t
typedef|;
comment|/*  * By design, the iidesc hash is heterogeneous.  The CTF emitter, on the  * other hand, needs to be able to access the elements of the list by type,  * and in a specific sorted order.  An iiburst holds these elements in that  * order.  (A burster is a machine that separates carbon-copy forms)  */
typedef|typedef
struct|struct
name|iiburst
block|{
name|int
name|iib_nfuncs
decl_stmt|;
name|int
name|iib_curfunc
decl_stmt|;
name|iidesc_t
modifier|*
modifier|*
name|iib_funcs
decl_stmt|;
name|int
name|iib_nobjts
decl_stmt|;
name|int
name|iib_curobjt
decl_stmt|;
name|iidesc_t
modifier|*
modifier|*
name|iib_objts
decl_stmt|;
name|list_t
modifier|*
name|iib_types
decl_stmt|;
name|int
name|iib_maxtypeid
decl_stmt|;
name|tdata_t
modifier|*
name|iib_td
decl_stmt|;
name|struct
name|tdtrav_data
modifier|*
name|iib_tdtd
decl_stmt|;
comment|/* tdtrav_data_t */
block|}
name|iiburst_t
typedef|;
typedef|typedef
name|struct
name|ctf_buf
name|ctf_buf_t
typedef|;
typedef|typedef
name|struct
name|symit_data
name|symit_data_t
typedef|;
comment|/* fixup_tdescs.c */
name|void
name|cvt_fixstabs
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|cvt_fixups
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
comment|/* ctf.c */
name|caddr_t
name|ctf_gen
parameter_list|(
name|iiburst_t
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|tdata_t
modifier|*
name|ctf_load
parameter_list|(
name|char
modifier|*
parameter_list|,
name|caddr_t
parameter_list|,
name|size_t
parameter_list|,
name|symit_data_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* iidesc.c */
name|iidesc_t
modifier|*
name|iidesc_new
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|iidesc_hash
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|iter_iidescs_by_name
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|iidesc_t
modifier|*
name|iidesc_dup
parameter_list|(
name|iidesc_t
modifier|*
parameter_list|)
function_decl|;
name|iidesc_t
modifier|*
name|iidesc_dup_rename
parameter_list|(
name|iidesc_t
modifier|*
parameter_list|,
name|char
specifier|const
modifier|*
parameter_list|,
name|char
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|void
name|iidesc_add
parameter_list|(
name|hash_t
modifier|*
parameter_list|,
name|iidesc_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|iidesc_free
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|iidesc_count_type
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|iidesc_stats
parameter_list|(
name|hash_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|iidesc_dump
parameter_list|(
name|iidesc_t
modifier|*
parameter_list|)
function_decl|;
comment|/* input.c */
typedef|typedef
enum|enum
name|source_types
block|{
name|SOURCE_NONE
init|=
literal|0
block|,
name|SOURCE_UNKNOWN
init|=
literal|1
block|,
name|SOURCE_C
init|=
literal|2
block|,
name|SOURCE_S
init|=
literal|4
block|}
name|source_types_t
typedef|;
name|source_types_t
name|built_source_types
parameter_list|(
name|Elf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|count_files
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|read_ctf
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|read_ctf_save_cb
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|symit_data_t
modifier|*
name|symit_new
parameter_list|(
name|Elf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|symit_reset
parameter_list|(
name|symit_data_t
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|symit_curfile
parameter_list|(
name|symit_data_t
modifier|*
parameter_list|)
function_decl|;
name|GElf_Sym
modifier|*
name|symit_next
parameter_list|(
name|symit_data_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|char
modifier|*
name|symit_name
parameter_list|(
name|symit_data_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|symit_free
parameter_list|(
name|symit_data_t
modifier|*
parameter_list|)
function_decl|;
comment|/* merge.c */
name|void
name|merge_into_master
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|tdata_t
modifier|*
parameter_list|,
name|tdata_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* output.c */
define|#
directive|define
name|CTF_FUZZY_MATCH
value|0x1
comment|/* match local symbols to global CTF */
define|#
directive|define
name|CTF_USE_DYNSYM
value|0x2
comment|/* use .dynsym not .symtab */
define|#
directive|define
name|CTF_COMPRESS
value|0x4
comment|/* compress CTF output */
define|#
directive|define
name|CTF_KEEP_STABS
value|0x8
comment|/* keep .stabs sections */
define|#
directive|define
name|CTF_SWAP_BYTES
value|0x10
comment|/* target byte order is different from host */
name|void
name|write_ctf
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* parse.c */
name|void
name|parse_init
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|parse_finish
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|parse_stab
parameter_list|(
name|stab_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|iidesc_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|tdesc_t
modifier|*
name|lookup
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|tdesc_t
modifier|*
name|lookupname
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|check_hash
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|resolve_typed_bitfields
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* stabs.c */
name|int
name|stabs_read
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|Elf
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* dwarf.c */
name|int
name|dw_read
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|Elf
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|dw_tag2str
parameter_list|(
name|uint_t
parameter_list|)
function_decl|;
comment|/* tdata.c */
name|tdata_t
modifier|*
name|tdata_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|tdata_free
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdata_build_hashes
parameter_list|(
name|tdata_t
modifier|*
name|td
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|tdesc_name
parameter_list|(
name|tdesc_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_idhash
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_idcmp
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_namehash
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_namecmp
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_layouthash
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdesc_layoutcmp
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdesc_free
parameter_list|(
name|tdesc_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdata_label_add
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|labelent_t
modifier|*
name|tdata_label_top
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|tdata_label_find
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdata_label_free
parameter_list|(
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdata_merge
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|tdata_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|tdata_label_newmax
parameter_list|(
name|tdata_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* util.c */
name|int
name|streq
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|findelfsecidx
parameter_list|(
name|Elf
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|elf_ptrsz
parameter_list|(
name|Elf
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|mktmpname
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|terminate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|aborterr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|set_terminate_cleanup
parameter_list|(
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
name|void
name|elfterminate
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|warning
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|vadebug
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
name|void
name|debug
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|watch_dump
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|watch_set
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CTFTOOLS_H */
end_comment

end_unit

