begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.  * Copyright (c) 2013 by Delphix. All rights reserved.  * Copyright (c) 2012, Joyent, Inc. All rights reserved.  */
end_comment

begin_comment
comment|/*  * Copyright 2011 Nexenta Systems, Inc.  All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SYS_ZFS_CONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|_SYS_ZFS_CONTEXT_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|_SYS_MUTEX_H
define|#
directive|define
name|_SYS_RWLOCK_H
define|#
directive|define
name|_SYS_CONDVAR_H
define|#
directive|define
name|_SYS_SYSTM_H
define|#
directive|define
name|_SYS_T_LOCK_H
define|#
directive|define
name|_SYS_VNODE_H
define|#
directive|define
name|_SYS_VFS_H
define|#
directive|define
name|_SYS_SUNDDI_H
define|#
directive|define
name|_SYS_CALLB_H
define|#
directive|define
name|_SYS_SCHED_H_
include|#
directive|include
file|<solaris.h>
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<stdlib.h>
include|#
directive|include
file|<stddef.h>
include|#
directive|include
file|<stdarg.h>
include|#
directive|include
file|<fcntl.h>
include|#
directive|include
file|<unistd.h>
include|#
directive|include
file|<errno.h>
include|#
directive|include
file|<string.h>
include|#
directive|include
file|<strings.h>
include|#
directive|include
file|<thread.h>
include|#
directive|include
file|<assert.h>
include|#
directive|include
file|<limits.h>
include|#
directive|include
file|<dirent.h>
include|#
directive|include
file|<time.h>
include|#
directive|include
file|<math.h>
include|#
directive|include
file|<umem.h>
include|#
directive|include
file|<inttypes.h>
include|#
directive|include
file|<fsshare.h>
include|#
directive|include
file|<pthread.h>
include|#
directive|include
file|<sys/debug.h>
include|#
directive|include
file|<sys/note.h>
include|#
directive|include
file|<sys/types.h>
include|#
directive|include
file|<sys/cred.h>
include|#
directive|include
file|<sys/atomic.h>
include|#
directive|include
file|<sys/sysmacros.h>
include|#
directive|include
file|<sys/bitmap.h>
include|#
directive|include
file|<sys/resource.h>
include|#
directive|include
file|<sys/byteorder.h>
include|#
directive|include
file|<sys/list.h>
include|#
directive|include
file|<sys/time.h>
include|#
directive|include
file|<sys/uio.h>
include|#
directive|include
file|<sys/mntent.h>
include|#
directive|include
file|<sys/mnttab.h>
include|#
directive|include
file|<sys/zfs_debug.h>
include|#
directive|include
file|<sys/sdt.h>
include|#
directive|include
file|<sys/kstat.h>
include|#
directive|include
file|<sys/u8_textprep.h>
include|#
directive|include
file|<sys/kernel.h>
include|#
directive|include
file|<sys/disk.h>
include|#
directive|include
file|<sys/sysevent.h>
include|#
directive|include
file|<sys/sysevent/eventdefs.h>
include|#
directive|include
file|<sys/sysevent/dev.h>
include|#
directive|include
file|<machine/atomic.h>
include|#
directive|include
file|<sys/debug.h>
ifdef|#
directive|ifdef
name|illumos
include|#
directive|include
file|"zfs.h"
endif|#
directive|endif
define|#
directive|define
name|ZFS_EXPORTS_PATH
value|"/etc/zfs/exports"
comment|/*  * Debugging  */
comment|/*  * Note that we are not using the debugging levels.  */
define|#
directive|define
name|CE_CONT
value|0
comment|/* continuation		*/
define|#
directive|define
name|CE_NOTE
value|1
comment|/* notice		*/
define|#
directive|define
name|CE_WARN
value|2
comment|/* warning		*/
define|#
directive|define
name|CE_PANIC
value|3
comment|/* panic		*/
define|#
directive|define
name|CE_IGNORE
value|4
comment|/* print nothing	*/
comment|/*  * ZFS debugging  */
define|#
directive|define
name|ZFS_LOG
parameter_list|(
modifier|...
parameter_list|)
value|do {  } while (0)
typedef|typedef
name|u_longlong_t
name|rlim64_t
typedef|;
define|#
directive|define
name|RLIM64_INFINITY
value|((rlim64_t)-3)
ifdef|#
directive|ifdef
name|ZFS_DEBUG
specifier|extern
name|void
name|dprintf_setup
parameter_list|(
name|int
modifier|*
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* ZFS_DEBUG */
specifier|extern
name|void
name|cmn_err
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vcmn_err
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|__va_list
parameter_list|)
function_decl|;
specifier|extern
name|void
name|panic
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vpanic
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|__va_list
parameter_list|)
function_decl|;
define|#
directive|define
name|fm_panic
value|panic
specifier|extern
name|int
name|aok
decl_stmt|;
comment|/*  * DTrace SDT probes have different signatures in userland than they do in  * kernel.  If they're being used in kernel code, re-define them out of  * existence for their counterparts in libzpool.  */
ifdef|#
directive|ifdef
name|DTRACE_PROBE
undef|#
directive|undef
name|DTRACE_PROBE
endif|#
directive|endif
comment|/* DTRACE_PROBE */
ifdef|#
directive|ifdef
name|illumos
define|#
directive|define
name|DTRACE_PROBE
parameter_list|(
name|a
parameter_list|)
define|\
value|ZFS_PROBE0(#a)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE1
undef|#
directive|undef
name|DTRACE_PROBE1
endif|#
directive|endif
comment|/* DTRACE_PROBE1 */
ifdef|#
directive|ifdef
name|illumos
define|#
directive|define
name|DTRACE_PROBE1
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
define|\
value|ZFS_PROBE1(#a, (unsigned long)c)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE2
undef|#
directive|undef
name|DTRACE_PROBE2
endif|#
directive|endif
comment|/* DTRACE_PROBE2 */
ifdef|#
directive|ifdef
name|illumos
define|#
directive|define
name|DTRACE_PROBE2
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
define|\
value|ZFS_PROBE2(#a, (unsigned long)c, (unsigned long)e)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE3
undef|#
directive|undef
name|DTRACE_PROBE3
endif|#
directive|endif
comment|/* DTRACE_PROBE3 */
ifdef|#
directive|ifdef
name|illumos
define|#
directive|define
name|DTRACE_PROBE3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|)
define|\
value|ZFS_PROBE3(#a, (unsigned long)c, (unsigned long)e, (unsigned long)g)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DTRACE_PROBE4
undef|#
directive|undef
name|DTRACE_PROBE4
endif|#
directive|endif
comment|/* DTRACE_PROBE4 */
ifdef|#
directive|ifdef
name|illumos
define|#
directive|define
name|DTRACE_PROBE4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|,
name|h
parameter_list|,
name|i
parameter_list|)
define|\
value|ZFS_PROBE4(#a, (unsigned long)c, (unsigned long)e, (unsigned long)g, \ 	(unsigned long)i)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|illumos
comment|/*  * We use the comma operator so that this macro can be used without much  * additional code.  For example, "return (EINVAL);" becomes  * "return (SET_ERROR(EINVAL));".  Note that the argument will be evaluated  * twice, so it should not have side effects (e.g. something like:  * "return (SET_ERROR(log_error(EINVAL, info)));" would log the error twice).  */
define|#
directive|define
name|SET_ERROR
parameter_list|(
name|err
parameter_list|)
value|(ZFS_SET_ERROR(err), err)
else|#
directive|else
comment|/* !illumos */
define|#
directive|define
name|DTRACE_PROBE
parameter_list|(
name|a
parameter_list|)
value|((void)0)
define|#
directive|define
name|DTRACE_PROBE1
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|((void)0)
define|#
directive|define
name|DTRACE_PROBE2
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|)
value|((void)0)
define|#
directive|define
name|DTRACE_PROBE3
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|)
value|((void)0)
define|#
directive|define
name|DTRACE_PROBE4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|f
parameter_list|,
name|g
parameter_list|,
name|h
parameter_list|,
name|i
parameter_list|)
value|((void)0)
define|#
directive|define
name|SET_ERROR
parameter_list|(
name|err
parameter_list|)
value|(err)
endif|#
directive|endif
comment|/* !illumos */
comment|/*  * Threads  */
define|#
directive|define
name|curthread
value|((void *)(uintptr_t)thr_self())
typedef|typedef
name|struct
name|kthread
name|kthread_t
typedef|;
define|#
directive|define
name|thread_create
parameter_list|(
name|stk
parameter_list|,
name|stksize
parameter_list|,
name|func
parameter_list|,
name|arg
parameter_list|,
name|len
parameter_list|,
name|pp
parameter_list|,
name|state
parameter_list|,
name|pri
parameter_list|)
define|\
value|zk_thread_create(func, arg)
define|#
directive|define
name|thread_exit
parameter_list|()
value|thr_exit(NULL)
define|#
directive|define
name|thread_join
parameter_list|(
name|t
parameter_list|)
value|panic("libzpool cannot join threads")
define|#
directive|define
name|newproc
parameter_list|(
name|f
parameter_list|,
name|a
parameter_list|,
name|cid
parameter_list|,
name|pri
parameter_list|,
name|ctp
parameter_list|,
name|pid
parameter_list|)
value|(ENOSYS)
comment|/* in libzpool, p0 exists only to have its address taken */
struct|struct
name|proc
block|{
name|uintptr_t
name|this_is_never_used_dont_dereference_it
decl_stmt|;
block|}
struct|;
specifier|extern
name|struct
name|proc
name|p0
decl_stmt|;
define|#
directive|define
name|curproc
value|(&p0)
define|#
directive|define
name|PS_NONE
value|-1
specifier|extern
name|kthread_t
modifier|*
name|zk_thread_create
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|()
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
define|#
directive|define
name|issig
parameter_list|(
name|why
parameter_list|)
value|(FALSE)
define|#
directive|define
name|ISSIG
parameter_list|(
name|thr
parameter_list|,
name|why
parameter_list|)
value|(FALSE)
comment|/*  * Mutexes  */
typedef|typedef
struct|struct
name|kmutex
block|{
name|void
modifier|*
name|m_owner
decl_stmt|;
name|boolean_t
name|initialized
decl_stmt|;
name|mutex_t
name|m_lock
decl_stmt|;
block|}
name|kmutex_t
typedef|;
define|#
directive|define
name|MUTEX_DEFAULT
value|USYNC_THREAD
undef|#
directive|undef
name|MUTEX_HELD
undef|#
directive|undef
name|MUTEX_NOT_HELD
define|#
directive|define
name|MUTEX_HELD
parameter_list|(
name|m
parameter_list|)
value|((m)->m_owner == curthread)
define|#
directive|define
name|MUTEX_NOT_HELD
parameter_list|(
name|m
parameter_list|)
value|(!MUTEX_HELD(m))
define|#
directive|define
name|_mutex_held
parameter_list|(
name|m
parameter_list|)
value|pthread_mutex_isowned_np(m)
comment|/*  * Argh -- we have to get cheesy here because the kernel and userland  * have different signatures for the same routine.  */
comment|//extern int _mutex_init(mutex_t *mp, int type, void *arg);
comment|//extern int _mutex_destroy(mutex_t *mp);
comment|//extern int _mutex_owned(mutex_t *mp);
define|#
directive|define
name|mutex_init
parameter_list|(
name|mp
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|zmutex_init((kmutex_t *)(mp))
define|#
directive|define
name|mutex_destroy
parameter_list|(
name|mp
parameter_list|)
value|zmutex_destroy((kmutex_t *)(mp))
define|#
directive|define
name|mutex_owned
parameter_list|(
name|mp
parameter_list|)
value|zmutex_owned((kmutex_t *)(mp))
specifier|extern
name|void
name|zmutex_init
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zmutex_destroy
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zmutex_owned
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|mutex_enter
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|mutex_exit
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|int
name|mutex_tryenter
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|mutex_owner
parameter_list|(
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
comment|/*  * RW locks  */
typedef|typedef
struct|struct
name|krwlock
block|{
name|int
name|rw_count
decl_stmt|;
name|void
modifier|*
name|rw_owner
decl_stmt|;
name|boolean_t
name|initialized
decl_stmt|;
name|rwlock_t
name|rw_lock
decl_stmt|;
block|}
name|krwlock_t
typedef|;
typedef|typedef
name|int
name|krw_t
typedef|;
define|#
directive|define
name|RW_READER
value|0
define|#
directive|define
name|RW_WRITER
value|1
define|#
directive|define
name|RW_DEFAULT
value|USYNC_THREAD
undef|#
directive|undef
name|RW_READ_HELD
define|#
directive|define
name|RW_READ_HELD
parameter_list|(
name|x
parameter_list|)
value|((x)->rw_owner == NULL&& (x)->rw_count> 0)
undef|#
directive|undef
name|RW_WRITE_HELD
define|#
directive|define
name|RW_WRITE_HELD
parameter_list|(
name|x
parameter_list|)
value|((x)->rw_owner == curthread)
define|#
directive|define
name|RW_LOCK_HELD
parameter_list|(
name|x
parameter_list|)
value|rw_lock_held(x)
undef|#
directive|undef
name|RW_LOCK_HELD
define|#
directive|define
name|RW_LOCK_HELD
parameter_list|(
name|x
parameter_list|)
value|(RW_READ_HELD(x) || RW_WRITE_HELD(x))
specifier|extern
name|void
name|rw_init
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|rw_destroy
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|rw_enter
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|,
name|krw_t
name|rw
parameter_list|)
function_decl|;
specifier|extern
name|int
name|rw_tryenter
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|,
name|krw_t
name|rw
parameter_list|)
function_decl|;
specifier|extern
name|int
name|rw_tryupgrade
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|rw_exit
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|)
function_decl|;
specifier|extern
name|int
name|rw_lock_held
parameter_list|(
name|krwlock_t
modifier|*
name|rwlp
parameter_list|)
function_decl|;
define|#
directive|define
name|rw_downgrade
parameter_list|(
name|rwlp
parameter_list|)
value|do { } while (0)
specifier|extern
name|uid_t
name|crgetuid
parameter_list|(
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|uid_t
name|crgetruid
parameter_list|(
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|gid_t
name|crgetgid
parameter_list|(
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|crgetngroups
parameter_list|(
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|gid_t
modifier|*
name|crgetgroups
parameter_list|(
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
comment|/*  * Condition variables  */
typedef|typedef
name|cond_t
name|kcondvar_t
typedef|;
define|#
directive|define
name|CV_DEFAULT
value|USYNC_THREAD
specifier|extern
name|void
name|cv_init
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cv_destroy
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cv_wait
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|,
name|kmutex_t
modifier|*
name|mp
parameter_list|)
function_decl|;
specifier|extern
name|clock_t
name|cv_timedwait
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|,
name|kmutex_t
modifier|*
name|mp
parameter_list|,
name|clock_t
name|abstime
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cv_signal
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cv_broadcast
parameter_list|(
name|kcondvar_t
modifier|*
name|cv
parameter_list|)
function_decl|;
comment|/*  * Thread-specific data  */
define|#
directive|define
name|tsd_get
parameter_list|(
name|k
parameter_list|)
value|pthread_getspecific(k)
define|#
directive|define
name|tsd_set
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
value|pthread_setspecific(k, v)
define|#
directive|define
name|tsd_create
parameter_list|(
name|kp
parameter_list|,
name|d
parameter_list|)
value|pthread_key_create(kp, d)
define|#
directive|define
name|tsd_destroy
parameter_list|(
name|kp
parameter_list|)
comment|/* nothing */
comment|/*  * Kernel memory  */
define|#
directive|define
name|KM_SLEEP
value|UMEM_NOFAIL
define|#
directive|define
name|KM_PUSHPAGE
value|KM_SLEEP
define|#
directive|define
name|KM_NOSLEEP
value|UMEM_DEFAULT
define|#
directive|define
name|KM_NODEBUG
value|0
define|#
directive|define
name|KMC_NODEBUG
value|UMC_NODEBUG
define|#
directive|define
name|KMC_NOTOUCH
value|0
comment|/* not needed for userland caches */
define|#
directive|define
name|kmem_alloc
parameter_list|(
name|_s
parameter_list|,
name|_f
parameter_list|)
value|umem_alloc(_s, _f)
define|#
directive|define
name|kmem_zalloc
parameter_list|(
name|_s
parameter_list|,
name|_f
parameter_list|)
value|umem_zalloc(_s, _f)
define|#
directive|define
name|kmem_free
parameter_list|(
name|_b
parameter_list|,
name|_s
parameter_list|)
value|umem_free(_b, _s)
define|#
directive|define
name|kmem_size
parameter_list|()
value|(physmem * PAGESIZE)
define|#
directive|define
name|kmem_cache_create
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|,
name|_e
parameter_list|,
name|_f
parameter_list|,
name|_g
parameter_list|,
name|_h
parameter_list|,
name|_i
parameter_list|)
define|\
value|umem_cache_create(_a, _b, _c, _d, _e, _f, _g, _h, _i)
define|#
directive|define
name|kmem_cache_destroy
parameter_list|(
name|_c
parameter_list|)
value|umem_cache_destroy(_c)
define|#
directive|define
name|kmem_cache_alloc
parameter_list|(
name|_c
parameter_list|,
name|_f
parameter_list|)
value|umem_cache_alloc(_c, _f)
define|#
directive|define
name|kmem_cache_free
parameter_list|(
name|_c
parameter_list|,
name|_b
parameter_list|)
value|umem_cache_free(_c, _b)
define|#
directive|define
name|kmem_debugging
parameter_list|()
value|0
define|#
directive|define
name|kmem_cache_reap_now
parameter_list|(
name|_c
parameter_list|)
comment|/* nothing */
define|#
directive|define
name|kmem_cache_set_move
parameter_list|(
name|_c
parameter_list|,
name|_cb
parameter_list|)
comment|/* nothing */
define|#
directive|define
name|POINTER_INVALIDATE
parameter_list|(
name|_pp
parameter_list|)
comment|/* nothing */
define|#
directive|define
name|POINTER_IS_VALID
parameter_list|(
name|_p
parameter_list|)
value|0
typedef|typedef
name|umem_cache_t
name|kmem_cache_t
typedef|;
typedef|typedef
enum|enum
name|kmem_cbrc
block|{
name|KMEM_CBRC_YES
block|,
name|KMEM_CBRC_NO
block|,
name|KMEM_CBRC_LATER
block|,
name|KMEM_CBRC_DONT_NEED
block|,
name|KMEM_CBRC_DONT_KNOW
block|}
name|kmem_cbrc_t
typedef|;
comment|/*  * Task queues  */
typedef|typedef
name|struct
name|taskq
name|taskq_t
typedef|;
typedef|typedef
name|uintptr_t
name|taskqid_t
typedef|;
typedef|typedef
name|void
function_decl|(
name|task_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|taskq_ent
block|{
name|struct
name|taskq_ent
modifier|*
name|tqent_next
decl_stmt|;
name|struct
name|taskq_ent
modifier|*
name|tqent_prev
decl_stmt|;
name|task_func_t
modifier|*
name|tqent_func
decl_stmt|;
name|void
modifier|*
name|tqent_arg
decl_stmt|;
name|uintptr_t
name|tqent_flags
decl_stmt|;
block|}
name|taskq_ent_t
typedef|;
define|#
directive|define
name|TQENT_FLAG_PREALLOC
value|0x1
comment|/* taskq_dispatch_ent used */
define|#
directive|define
name|TASKQ_PREPOPULATE
value|0x0001
define|#
directive|define
name|TASKQ_CPR_SAFE
value|0x0002
comment|/* Use CPR safe protocol */
define|#
directive|define
name|TASKQ_DYNAMIC
value|0x0004
comment|/* Use dynamic thread scheduling */
define|#
directive|define
name|TASKQ_THREADS_CPU_PCT
value|0x0008
comment|/* Scale # threads by # cpus */
define|#
directive|define
name|TASKQ_DC_BATCH
value|0x0010
comment|/* Mark threads as batch */
define|#
directive|define
name|TQ_SLEEP
value|KM_SLEEP
comment|/* Can block for memory */
define|#
directive|define
name|TQ_NOSLEEP
value|KM_NOSLEEP
comment|/* cannot block for memory; may fail */
define|#
directive|define
name|TQ_NOQUEUE
value|0x02
comment|/* Do not enqueue if can't dispatch */
define|#
directive|define
name|TQ_FRONT
value|0x08
comment|/* Queue in front */
specifier|extern
name|taskq_t
modifier|*
name|system_taskq
decl_stmt|;
specifier|extern
name|taskq_t
modifier|*
name|taskq_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pri_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
define|#
directive|define
name|taskq_create_proc
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|p
parameter_list|,
name|f
parameter_list|)
define|\
value|(taskq_create(a, b, c, d, e, f))
define|#
directive|define
name|taskq_create_sysdc
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|d
parameter_list|,
name|e
parameter_list|,
name|p
parameter_list|,
name|dc
parameter_list|,
name|f
parameter_list|)
define|\
value|(taskq_create(a, b, maxclsyspri, d, e, f))
specifier|extern
name|taskqid_t
name|taskq_dispatch
parameter_list|(
name|taskq_t
modifier|*
parameter_list|,
name|task_func_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|taskq_dispatch_ent
parameter_list|(
name|taskq_t
modifier|*
parameter_list|,
name|task_func_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint_t
parameter_list|,
name|taskq_ent_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|taskq_destroy
parameter_list|(
name|taskq_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|taskq_wait
parameter_list|(
name|taskq_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|taskq_member
parameter_list|(
name|taskq_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|system_taskq_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|system_taskq_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
define|#
directive|define
name|taskq_dispatch_safe
parameter_list|(
name|tq
parameter_list|,
name|func
parameter_list|,
name|arg
parameter_list|,
name|flags
parameter_list|,
name|task
parameter_list|)
define|\
value|taskq_dispatch((tq), (func), (arg), (flags))
define|#
directive|define
name|XVA_MAPSIZE
value|3
define|#
directive|define
name|XVA_MAGIC
value|0x78766174
comment|/*  * vnodes  */
typedef|typedef
struct|struct
name|vnode
block|{
name|uint64_t
name|v_size
decl_stmt|;
name|int
name|v_fd
decl_stmt|;
name|char
modifier|*
name|v_path
decl_stmt|;
block|}
name|vnode_t
typedef|;
define|#
directive|define
name|AV_SCANSTAMP_SZ
value|32
comment|/* length of anti-virus scanstamp */
typedef|typedef
struct|struct
name|xoptattr
block|{
name|timestruc_t
name|xoa_createtime
decl_stmt|;
comment|/* Create time of file */
name|uint8_t
name|xoa_archive
decl_stmt|;
name|uint8_t
name|xoa_system
decl_stmt|;
name|uint8_t
name|xoa_readonly
decl_stmt|;
name|uint8_t
name|xoa_hidden
decl_stmt|;
name|uint8_t
name|xoa_nounlink
decl_stmt|;
name|uint8_t
name|xoa_immutable
decl_stmt|;
name|uint8_t
name|xoa_appendonly
decl_stmt|;
name|uint8_t
name|xoa_nodump
decl_stmt|;
name|uint8_t
name|xoa_settable
decl_stmt|;
name|uint8_t
name|xoa_opaque
decl_stmt|;
name|uint8_t
name|xoa_av_quarantined
decl_stmt|;
name|uint8_t
name|xoa_av_modified
decl_stmt|;
name|uint8_t
name|xoa_av_scanstamp
index|[
name|AV_SCANSTAMP_SZ
index|]
decl_stmt|;
name|uint8_t
name|xoa_reparse
decl_stmt|;
name|uint8_t
name|xoa_offline
decl_stmt|;
name|uint8_t
name|xoa_sparse
decl_stmt|;
block|}
name|xoptattr_t
typedef|;
typedef|typedef
struct|struct
name|vattr
block|{
name|uint_t
name|va_mask
decl_stmt|;
comment|/* bit-mask of attributes */
name|u_offset_t
name|va_size
decl_stmt|;
comment|/* file size in bytes */
block|}
name|vattr_t
typedef|;
typedef|typedef
struct|struct
name|xvattr
block|{
name|vattr_t
name|xva_vattr
decl_stmt|;
comment|/* Embedded vattr structure */
name|uint32_t
name|xva_magic
decl_stmt|;
comment|/* Magic Number */
name|uint32_t
name|xva_mapsize
decl_stmt|;
comment|/* Size of attr bitmap (32-bit words) */
name|uint32_t
modifier|*
name|xva_rtnattrmapp
decl_stmt|;
comment|/* Ptr to xva_rtnattrmap[] */
name|uint32_t
name|xva_reqattrmap
index|[
name|XVA_MAPSIZE
index|]
decl_stmt|;
comment|/* Requested attrs */
name|uint32_t
name|xva_rtnattrmap
index|[
name|XVA_MAPSIZE
index|]
decl_stmt|;
comment|/* Returned attrs */
name|xoptattr_t
name|xva_xoptattrs
decl_stmt|;
comment|/* Optional attributes */
block|}
name|xvattr_t
typedef|;
typedef|typedef
struct|struct
name|vsecattr
block|{
name|uint_t
name|vsa_mask
decl_stmt|;
comment|/* See below */
name|int
name|vsa_aclcnt
decl_stmt|;
comment|/* ACL entry count */
name|void
modifier|*
name|vsa_aclentp
decl_stmt|;
comment|/* pointer to ACL entries */
name|int
name|vsa_dfaclcnt
decl_stmt|;
comment|/* default ACL entry count */
name|void
modifier|*
name|vsa_dfaclentp
decl_stmt|;
comment|/* pointer to default ACL entries */
name|size_t
name|vsa_aclentsz
decl_stmt|;
comment|/* ACE size in bytes of vsa_aclentp */
block|}
name|vsecattr_t
typedef|;
define|#
directive|define
name|AT_TYPE
value|0x00001
define|#
directive|define
name|AT_MODE
value|0x00002
define|#
directive|define
name|AT_UID
value|0x00004
define|#
directive|define
name|AT_GID
value|0x00008
define|#
directive|define
name|AT_FSID
value|0x00010
define|#
directive|define
name|AT_NODEID
value|0x00020
define|#
directive|define
name|AT_NLINK
value|0x00040
define|#
directive|define
name|AT_SIZE
value|0x00080
define|#
directive|define
name|AT_ATIME
value|0x00100
define|#
directive|define
name|AT_MTIME
value|0x00200
define|#
directive|define
name|AT_CTIME
value|0x00400
define|#
directive|define
name|AT_RDEV
value|0x00800
define|#
directive|define
name|AT_BLKSIZE
value|0x01000
define|#
directive|define
name|AT_NBLOCKS
value|0x02000
define|#
directive|define
name|AT_SEQ
value|0x08000
define|#
directive|define
name|AT_XVATTR
value|0x10000
define|#
directive|define
name|CRCREAT
value|0
specifier|extern
name|int
name|fop_getattr
parameter_list|(
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|vattr_t
modifier|*
name|vap
parameter_list|)
function_decl|;
define|#
directive|define
name|VOP_CLOSE
parameter_list|(
name|vp
parameter_list|,
name|f
parameter_list|,
name|c
parameter_list|,
name|o
parameter_list|,
name|cr
parameter_list|,
name|ct
parameter_list|)
value|0
define|#
directive|define
name|VOP_PUTPAGE
parameter_list|(
name|vp
parameter_list|,
name|of
parameter_list|,
name|sz
parameter_list|,
name|fl
parameter_list|,
name|cr
parameter_list|,
name|ct
parameter_list|)
value|0
define|#
directive|define
name|VOP_GETATTR
parameter_list|(
name|vp
parameter_list|,
name|vap
parameter_list|,
name|cr
parameter_list|)
value|fop_getattr((vp), (vap));
define|#
directive|define
name|VOP_FSYNC
parameter_list|(
name|vp
parameter_list|,
name|f
parameter_list|,
name|cr
parameter_list|,
name|ct
parameter_list|)
value|fsync((vp)->v_fd)
define|#
directive|define
name|VN_RELE
parameter_list|(
name|vp
parameter_list|)
value|vn_close(vp, 0, NULL, NULL)
define|#
directive|define
name|VN_RELE_ASYNC
parameter_list|(
name|vp
parameter_list|,
name|taskq
parameter_list|)
value|vn_close(vp, 0, NULL, NULL)
define|#
directive|define
name|vn_lock
parameter_list|(
name|vp
parameter_list|,
name|type
parameter_list|)
define|#
directive|define
name|VOP_UNLOCK
parameter_list|(
name|vp
parameter_list|,
name|type
parameter_list|)
ifdef|#
directive|ifdef
name|VFS_LOCK_GIANT
undef|#
directive|undef
name|VFS_LOCK_GIANT
endif|#
directive|endif
define|#
directive|define
name|VFS_LOCK_GIANT
parameter_list|(
name|mp
parameter_list|)
value|0
ifdef|#
directive|ifdef
name|VFS_UNLOCK_GIANT
undef|#
directive|undef
name|VFS_UNLOCK_GIANT
endif|#
directive|endif
define|#
directive|define
name|VFS_UNLOCK_GIANT
parameter_list|(
name|vfslocked
parameter_list|)
specifier|extern
name|int
name|vn_open
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|oflags
parameter_list|,
name|int
name|mode
parameter_list|,
name|vnode_t
modifier|*
modifier|*
name|vpp
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|x3
parameter_list|)
function_decl|;
specifier|extern
name|int
name|vn_openat
parameter_list|(
name|char
modifier|*
name|path
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|oflags
parameter_list|,
name|int
name|mode
parameter_list|,
name|vnode_t
modifier|*
modifier|*
name|vpp
parameter_list|,
name|int
name|x2
parameter_list|,
name|int
name|x3
parameter_list|,
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
specifier|extern
name|int
name|vn_rdwr
parameter_list|(
name|int
name|uio
parameter_list|,
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|ssize_t
name|len
parameter_list|,
name|offset_t
name|offset
parameter_list|,
name|int
name|x1
parameter_list|,
name|int
name|x2
parameter_list|,
name|rlim64_t
name|x3
parameter_list|,
name|void
modifier|*
name|x4
parameter_list|,
name|ssize_t
modifier|*
name|residp
parameter_list|)
function_decl|;
specifier|extern
name|void
name|vn_close
parameter_list|(
name|vnode_t
modifier|*
name|vp
parameter_list|,
name|int
name|openflag
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|,
name|kthread_t
modifier|*
name|td
parameter_list|)
function_decl|;
define|#
directive|define
name|vn_remove
parameter_list|(
name|path
parameter_list|,
name|x1
parameter_list|,
name|x2
parameter_list|)
value|remove(path)
define|#
directive|define
name|vn_rename
parameter_list|(
name|from
parameter_list|,
name|to
parameter_list|,
name|seg
parameter_list|)
value|rename((from), (to))
define|#
directive|define
name|vn_is_readonly
parameter_list|(
name|vp
parameter_list|)
value|B_FALSE
specifier|extern
name|vnode_t
modifier|*
name|rootdir
decl_stmt|;
include|#
directive|include
file|<sys/file.h>
comment|/* for FREAD, FWRITE, etc */
define|#
directive|define
name|FTRUNC
value|O_TRUNC
comment|/*  * Random stuff  */
define|#
directive|define
name|ddi_get_lbolt
parameter_list|()
value|(gethrtime()>> 23)
define|#
directive|define
name|ddi_get_lbolt64
parameter_list|()
value|(gethrtime()>> 23)
define|#
directive|define
name|hz
value|119
comment|/* frequency when using gethrtime()>> 23 for lbolt */
specifier|extern
name|void
name|delay
parameter_list|(
name|clock_t
name|ticks
parameter_list|)
function_decl|;
define|#
directive|define
name|SEC_TO_TICK
parameter_list|(
name|sec
parameter_list|)
value|((sec) * hz)
define|#
directive|define
name|NSEC_TO_TICK
parameter_list|(
name|usec
parameter_list|)
value|((usec) / (NANOSEC / hz))
define|#
directive|define
name|gethrestime_sec
parameter_list|()
value|time(NULL)
define|#
directive|define
name|gethrestime
parameter_list|(
name|t
parameter_list|)
define|\
value|do {\ 		(t)->tv_sec = gethrestime_sec();\ 		(t)->tv_nsec = 0;\ 	} while (0);
define|#
directive|define
name|max_ncpus
value|64
define|#
directive|define
name|minclsyspri
value|60
define|#
directive|define
name|maxclsyspri
value|99
define|#
directive|define
name|CPU_SEQID
value|(thr_self()& (max_ncpus - 1))
define|#
directive|define
name|kcred
value|NULL
define|#
directive|define
name|CRED
parameter_list|()
value|NULL
ifndef|#
directive|ifndef
name|ptob
define|#
directive|define
name|ptob
parameter_list|(
name|x
parameter_list|)
value|((x) * PAGESIZE)
endif|#
directive|endif
specifier|extern
name|uint64_t
name|physmem
decl_stmt|;
specifier|extern
name|int
name|highbit
parameter_list|(
name|ulong_t
name|i
parameter_list|)
function_decl|;
specifier|extern
name|int
name|random_get_bytes
parameter_list|(
name|uint8_t
modifier|*
name|ptr
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
specifier|extern
name|int
name|random_get_pseudo_bytes
parameter_list|(
name|uint8_t
modifier|*
name|ptr
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
specifier|extern
name|void
name|kernel_init
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|kernel_fini
parameter_list|(
name|void
parameter_list|)
function_decl|;
struct_decl|struct
name|spa
struct_decl|;
specifier|extern
name|void
name|nicenum
parameter_list|(
name|uint64_t
name|num
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
specifier|extern
name|void
name|show_pool_stats
parameter_list|(
name|struct
name|spa
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|callb_cpr
block|{
name|kmutex_t
modifier|*
name|cc_lockp
decl_stmt|;
block|}
name|callb_cpr_t
typedef|;
define|#
directive|define
name|CALLB_CPR_INIT
parameter_list|(
name|cp
parameter_list|,
name|lockp
parameter_list|,
name|func
parameter_list|,
name|name
parameter_list|)
value|{		\ 	(cp)->cc_lockp = lockp;					\ }
define|#
directive|define
name|CALLB_CPR_SAFE_BEGIN
parameter_list|(
name|cp
parameter_list|)
value|{				\ 	ASSERT(MUTEX_HELD((cp)->cc_lockp));			\ }
define|#
directive|define
name|CALLB_CPR_SAFE_END
parameter_list|(
name|cp
parameter_list|,
name|lockp
parameter_list|)
value|{				\ 	ASSERT(MUTEX_HELD((cp)->cc_lockp));			\ }
define|#
directive|define
name|CALLB_CPR_EXIT
parameter_list|(
name|cp
parameter_list|)
value|{					\ 	ASSERT(MUTEX_HELD((cp)->cc_lockp));			\ 	mutex_exit((cp)->cc_lockp);				\ }
define|#
directive|define
name|zone_dataset_visible
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|(1)
define|#
directive|define
name|INGLOBALZONE
parameter_list|(
name|z
parameter_list|)
value|(1)
specifier|extern
name|char
modifier|*
name|kmem_asprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
define|#
directive|define
name|strfree
parameter_list|(
name|str
parameter_list|)
value|kmem_free((str), strlen(str) + 1)
comment|/*  * Hostname information  */
specifier|extern
name|struct
name|utsname
name|utsname
decl_stmt|;
specifier|extern
name|char
name|hw_serial
index|[]
decl_stmt|;
comment|/* for userland-emulated hostid access */
specifier|extern
name|int
name|ddi_strtoul
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|char
modifier|*
modifier|*
name|nptr
parameter_list|,
name|int
name|base
parameter_list|,
name|unsigned
name|long
modifier|*
name|result
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ddi_strtoull
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|char
modifier|*
modifier|*
name|nptr
parameter_list|,
name|int
name|base
parameter_list|,
name|u_longlong_t
modifier|*
name|result
parameter_list|)
function_decl|;
comment|/* ZFS Boot Related stuff. */
struct|struct
name|_buf
block|{
name|intptr_t
name|_fd
decl_stmt|;
block|}
struct|;
struct|struct
name|bootstat
block|{
name|uint64_t
name|st_size
decl_stmt|;
block|}
struct|;
typedef|typedef
struct|struct
name|ace_object
block|{
name|uid_t
name|a_who
decl_stmt|;
name|uint32_t
name|a_access_mask
decl_stmt|;
name|uint16_t
name|a_flags
decl_stmt|;
name|uint16_t
name|a_type
decl_stmt|;
name|uint8_t
name|a_obj_type
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|a_inherit_obj_type
index|[
literal|16
index|]
decl_stmt|;
block|}
name|ace_object_t
typedef|;
define|#
directive|define
name|ACE_ACCESS_ALLOWED_OBJECT_ACE_TYPE
value|0x05
define|#
directive|define
name|ACE_ACCESS_DENIED_OBJECT_ACE_TYPE
value|0x06
define|#
directive|define
name|ACE_SYSTEM_AUDIT_OBJECT_ACE_TYPE
value|0x07
define|#
directive|define
name|ACE_SYSTEM_ALARM_OBJECT_ACE_TYPE
value|0x08
specifier|extern
name|struct
name|_buf
modifier|*
name|kobj_open_file
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|extern
name|int
name|kobj_read_file
parameter_list|(
name|struct
name|_buf
modifier|*
name|file
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|unsigned
name|size
parameter_list|,
name|unsigned
name|off
parameter_list|)
function_decl|;
specifier|extern
name|void
name|kobj_close_file
parameter_list|(
name|struct
name|_buf
modifier|*
name|file
parameter_list|)
function_decl|;
specifier|extern
name|int
name|kobj_get_filesize
parameter_list|(
name|struct
name|_buf
modifier|*
name|file
parameter_list|,
name|uint64_t
modifier|*
name|size
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_secpolicy_snapshot_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_secpolicy_rename_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|from
parameter_list|,
specifier|const
name|char
modifier|*
name|to
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_secpolicy_destroy_perms
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|cred_t
modifier|*
name|cr
parameter_list|)
function_decl|;
specifier|extern
name|zoneid_t
name|getzoneid
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Random compatibility stuff. */
define|#
directive|define
name|lbolt
value|(gethrtime()>> 23)
define|#
directive|define
name|lbolt64
value|(gethrtime()>> 23)
specifier|extern
name|uint64_t
name|physmem
decl_stmt|;
define|#
directive|define
name|gethrestime_sec
parameter_list|()
value|time(NULL)
define|#
directive|define
name|pwrite64
parameter_list|(
name|d
parameter_list|,
name|p
parameter_list|,
name|n
parameter_list|,
name|o
parameter_list|)
value|pwrite(d, p, n, o)
define|#
directive|define
name|readdir64
parameter_list|(
name|d
parameter_list|)
value|readdir(d)
define|#
directive|define
name|SIGPENDING
parameter_list|(
name|td
parameter_list|)
value|(0)
define|#
directive|define
name|root_mount_wait
parameter_list|()
value|do { } while (0)
define|#
directive|define
name|root_mounted
parameter_list|()
value|(1)
struct|struct
name|file
block|{
name|void
modifier|*
name|dummy
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|FCREAT
value|O_CREAT
define|#
directive|define
name|FOFFMAX
value|0x0
comment|/* SID stuff */
typedef|typedef
struct|struct
name|ksiddomain
block|{
name|uint_t
name|kd_ref
decl_stmt|;
name|uint_t
name|kd_len
decl_stmt|;
name|char
modifier|*
name|kd_name
decl_stmt|;
block|}
name|ksiddomain_t
typedef|;
name|ksiddomain_t
modifier|*
name|ksid_lookupdomain
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|ksiddomain_rele
parameter_list|(
name|ksiddomain_t
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|uint32_t
name|idmap_rid_t
typedef|;
define|#
directive|define
name|DDI_SLEEP
value|KM_SLEEP
define|#
directive|define
name|ddi_log_sysevent
parameter_list|(
name|_a
parameter_list|,
name|_b
parameter_list|,
name|_c
parameter_list|,
name|_d
parameter_list|,
name|_e
parameter_list|,
name|_f
parameter_list|,
name|_g
parameter_list|)
value|(0)
define|#
directive|define
name|SX_SYSINIT
parameter_list|(
name|name
parameter_list|,
name|lock
parameter_list|,
name|desc
parameter_list|)
define|#
directive|define
name|SYSCTL_DECL
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_NODE
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_INT
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_UINT
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_ULONG
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_QUAD
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|SYSCTL_UQUAD
parameter_list|(
modifier|...
parameter_list|)
ifdef|#
directive|ifdef
name|TUNABLE_INT
undef|#
directive|undef
name|TUNABLE_INT
undef|#
directive|undef
name|TUNABLE_ULONG
undef|#
directive|undef
name|TUNABLE_QUAD
endif|#
directive|endif
define|#
directive|define
name|TUNABLE_INT
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|TUNABLE_ULONG
parameter_list|(
modifier|...
parameter_list|)
define|#
directive|define
name|TUNABLE_QUAD
parameter_list|(
modifier|...
parameter_list|)
comment|/* Errors */
ifndef|#
directive|ifndef
name|ERESTART
define|#
directive|define
name|ERESTART
value|(-1)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|illumos
comment|/*  * Cyclic information  */
specifier|extern
name|kmutex_t
name|cpu_lock
decl_stmt|;
typedef|typedef
name|uintptr_t
name|cyclic_id_t
typedef|;
typedef|typedef
name|uint16_t
name|cyc_level_t
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|cyc_func_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|CY_LOW_LEVEL
value|0
define|#
directive|define
name|CY_INFINITY
value|INT64_MAX
define|#
directive|define
name|CYCLIC_NONE
value|((cyclic_id_t)0)
typedef|typedef
struct|struct
name|cyc_time
block|{
name|hrtime_t
name|cyt_when
decl_stmt|;
name|hrtime_t
name|cyt_interval
decl_stmt|;
block|}
name|cyc_time_t
typedef|;
typedef|typedef
struct|struct
name|cyc_handler
block|{
name|cyc_func_t
name|cyh_func
decl_stmt|;
name|void
modifier|*
name|cyh_arg
decl_stmt|;
name|cyc_level_t
name|cyh_level
decl_stmt|;
block|}
name|cyc_handler_t
typedef|;
specifier|extern
name|cyclic_id_t
name|cyclic_add
parameter_list|(
name|cyc_handler_t
modifier|*
parameter_list|,
name|cyc_time_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|cyclic_remove
parameter_list|(
name|cyclic_id_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|cyclic_reprogram
parameter_list|(
name|cyclic_id_t
parameter_list|,
name|hrtime_t
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* illumos */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SYS_ZFS_CONTEXT_H */
end_comment

end_unit

