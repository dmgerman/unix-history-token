begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2008 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBUUTIL_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBUUTIL_H
end_define

begin_include
include|#
directive|include
file|<solaris.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Standard flags codes.  */
define|#
directive|define
name|UU_DEFAULT
value|0
comment|/*  * Standard error codes.  */
define|#
directive|define
name|UU_ERROR_NONE
value|0
comment|/* no error */
define|#
directive|define
name|UU_ERROR_INVALID_ARGUMENT
value|1
comment|/* invalid argument */
define|#
directive|define
name|UU_ERROR_UNKNOWN_FLAG
value|2
comment|/* passed flag invalid */
define|#
directive|define
name|UU_ERROR_NO_MEMORY
value|3
comment|/* out of memory */
define|#
directive|define
name|UU_ERROR_CALLBACK_FAILED
value|4
comment|/* callback-initiated error */
define|#
directive|define
name|UU_ERROR_NOT_SUPPORTED
value|5
comment|/* operation not supported */
define|#
directive|define
name|UU_ERROR_EMPTY
value|6
comment|/* no value provided */
define|#
directive|define
name|UU_ERROR_UNDERFLOW
value|7
comment|/* value is too small */
define|#
directive|define
name|UU_ERROR_OVERFLOW
value|8
comment|/* value is too value */
define|#
directive|define
name|UU_ERROR_INVALID_CHAR
value|9
comment|/* value contains unexpected char */
define|#
directive|define
name|UU_ERROR_INVALID_DIGIT
value|10
comment|/* value contains digit not in base */
define|#
directive|define
name|UU_ERROR_SYSTEM
value|99
comment|/* underlying system error */
define|#
directive|define
name|UU_ERROR_UNKNOWN
value|100
comment|/* error status not known */
comment|/*  * Standard program exit codes.  */
define|#
directive|define
name|UU_EXIT_OK
value|(*(uu_exit_ok()))
define|#
directive|define
name|UU_EXIT_FATAL
value|(*(uu_exit_fatal()))
define|#
directive|define
name|UU_EXIT_USAGE
value|(*(uu_exit_usage()))
comment|/*  * Exit status profiles.  */
define|#
directive|define
name|UU_PROFILE_DEFAULT
value|0
define|#
directive|define
name|UU_PROFILE_LAUNCHER
value|1
comment|/*  * Error reporting functions.  */
name|uint32_t
name|uu_error
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|uu_strerror
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
comment|/*  * Program notification functions.  */
specifier|extern
name|void
name|uu_alt_exit
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|uu_setpname
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|uu_getpname
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*PRINTFLIKE1*/
specifier|extern
name|void
name|uu_warn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|uu_vwarn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
comment|/*PRINTFLIKE1*/
specifier|extern
name|void
name|uu_die
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__NORETURN
decl_stmt|;
specifier|extern
name|void
name|uu_vdie
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|va_list
argument_list|)
name|__NORETURN
decl_stmt|;
comment|/*PRINTFLIKE2*/
specifier|extern
name|void
name|uu_xdie
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|__NORETURN
decl_stmt|;
specifier|extern
name|void
name|uu_vxdie
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|va_list
argument_list|)
name|__NORETURN
decl_stmt|;
comment|/*  * Exit status functions (not to be used directly)  */
specifier|extern
name|int
modifier|*
name|uu_exit_ok
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
modifier|*
name|uu_exit_fatal
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
modifier|*
name|uu_exit_usage
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/*  * string->number conversions  */
specifier|extern
name|int
name|uu_strtoint
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|,
name|int64_t
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|uu_strtouint
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|)
function_decl|;
comment|/*  * Debug print facility functions.  */
typedef|typedef
name|struct
name|uu_dprintf
name|uu_dprintf_t
typedef|;
typedef|typedef
enum|enum
block|{
name|UU_DPRINTF_SILENT
block|,
name|UU_DPRINTF_FATAL
block|,
name|UU_DPRINTF_WARNING
block|,
name|UU_DPRINTF_NOTICE
block|,
name|UU_DPRINTF_INFO
block|,
name|UU_DPRINTF_DEBUG
block|}
name|uu_dprintf_severity_t
typedef|;
specifier|extern
name|uu_dprintf_t
modifier|*
name|uu_dprintf_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|uu_dprintf_severity_t
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
comment|/*PRINTFLIKE3*/
specifier|extern
name|void
name|uu_dprintf
parameter_list|(
name|uu_dprintf_t
modifier|*
parameter_list|,
name|uu_dprintf_severity_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|uu_dprintf_destroy
parameter_list|(
name|uu_dprintf_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|uu_dprintf_getname
parameter_list|(
name|uu_dprintf_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Identifier test flags and function.  */
define|#
directive|define
name|UU_NAME_DOMAIN
value|0x1
comment|/* allow SUNW, or com.sun, prefix */
define|#
directive|define
name|UU_NAME_PATH
value|0x2
comment|/* allow '/'-delimited paths */
name|int
name|uu_check_name
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
comment|/*  * File creation functions.  */
specifier|extern
name|int
name|uu_open_tmp
parameter_list|(
specifier|const
name|char
modifier|*
name|dir
parameter_list|,
name|uint_t
name|uflags
parameter_list|)
function_decl|;
comment|/*  * Convenience functions.  */
comment|/*PRINTFLIKE1*/
specifier|extern
name|char
modifier|*
name|uu_msprintf
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|uu_zalloc
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|char
modifier|*
name|uu_strdup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|uu_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Comparison function type definition.  *   Developers should be careful in their use of the _private argument. If you  *   break interface guarantees, you get undefined behavior.  */
typedef|typedef
name|int
name|uu_compare_fn_t
parameter_list|(
specifier|const
name|void
modifier|*
name|__left
parameter_list|,
specifier|const
name|void
modifier|*
name|__right
parameter_list|,
name|void
modifier|*
name|__private
parameter_list|)
function_decl|;
comment|/*  * Walk variant flags.  *   A data structure need not provide support for all variants and  *   combinations.  Refer to the appropriate documentation.  */
define|#
directive|define
name|UU_WALK_ROBUST
value|0x00000001
comment|/* walk can survive removes */
define|#
directive|define
name|UU_WALK_REVERSE
value|0x00000002
comment|/* reverse walk order */
define|#
directive|define
name|UU_WALK_PREORDER
value|0x00000010
comment|/* walk tree in pre-order */
define|#
directive|define
name|UU_WALK_POSTORDER
value|0x00000020
comment|/* walk tree in post-order */
comment|/*  * Walk callback function return codes.  */
define|#
directive|define
name|UU_WALK_ERROR
value|-1
define|#
directive|define
name|UU_WALK_NEXT
value|0
define|#
directive|define
name|UU_WALK_DONE
value|1
comment|/*  * Walk callback function type definition.  */
typedef|typedef
name|int
name|uu_walk_fn_t
parameter_list|(
name|void
modifier|*
name|_elem
parameter_list|,
name|void
modifier|*
name|_private
parameter_list|)
function_decl|;
comment|/*  * lists: opaque structures  */
typedef|typedef
name|struct
name|uu_list_pool
name|uu_list_pool_t
typedef|;
typedef|typedef
name|struct
name|uu_list
name|uu_list_t
typedef|;
typedef|typedef
struct|struct
name|uu_list_node
block|{
name|uintptr_t
name|uln_opaque
index|[
literal|2
index|]
decl_stmt|;
block|}
name|uu_list_node_t
typedef|;
typedef|typedef
name|struct
name|uu_list_walk
name|uu_list_walk_t
typedef|;
typedef|typedef
name|uintptr_t
name|uu_list_index_t
typedef|;
comment|/*  * lists: interface  *  * basic usage:  *	typedef struct foo {  *		...  *		uu_list_node_t foo_node;  *		...  *	} foo_t;  *  *	static int  *	foo_compare(void *l_arg, void *r_arg, void *private)  *	{  *		foo_t *l = l_arg;  *		foo_t *r = r_arg;  *  *		if (... l greater than r ...)  *			return (1);  *		if (... l less than r ...)  *			return (-1);  *		return (0);  *	}  *  *	...  *		// at initialization time  *		foo_pool = uu_list_pool_create("foo_pool",  *		    sizeof (foo_t), offsetof(foo_t, foo_node), foo_compare,  *		    debugging? 0 : UU_AVL_POOL_DEBUG);  *	...  */
name|uu_list_pool_t
modifier|*
name|uu_list_pool_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|uu_compare_fn_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
define|#
directive|define
name|UU_LIST_POOL_DEBUG
value|0x00000001
name|void
name|uu_list_pool_destroy
parameter_list|(
name|uu_list_pool_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * usage:  *  *	foo_t *a;  *	a = malloc(sizeof(*a));  *	uu_list_node_init(a,&a->foo_list, pool);  *	...  *	uu_list_node_fini(a,&a->foo_list, pool);  *	free(a);  */
name|void
name|uu_list_node_init
parameter_list|(
name|void
modifier|*
parameter_list|,
name|uu_list_node_t
modifier|*
parameter_list|,
name|uu_list_pool_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_list_node_fini
parameter_list|(
name|void
modifier|*
parameter_list|,
name|uu_list_node_t
modifier|*
parameter_list|,
name|uu_list_pool_t
modifier|*
parameter_list|)
function_decl|;
name|uu_list_t
modifier|*
name|uu_list_create
parameter_list|(
name|uu_list_pool_t
modifier|*
parameter_list|,
name|void
modifier|*
name|_parent
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
define|#
directive|define
name|UU_LIST_DEBUG
value|0x00000001
define|#
directive|define
name|UU_LIST_SORTED
value|0x00000002
comment|/* list is sorted */
name|void
name|uu_list_destroy
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|)
function_decl|;
comment|/* list must be empty */
name|size_t
name|uu_list_numnodes
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_first
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_last
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_next
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_prev
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|uu_list_walk
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|uu_walk_fn_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|uu_list_walk_t
modifier|*
name|uu_list_walk_start
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_walk_next
parameter_list|(
name|uu_list_walk_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_list_walk_end
parameter_list|(
name|uu_list_walk_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_find
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uu_list_index_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_list_insert
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uu_list_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_nearest_next
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|uu_list_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_nearest_prev
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|uu_list_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_list_teardown
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_list_remove
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * lists: interfaces for non-sorted lists only  */
name|int
name|uu_list_insert_before
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
name|_target
parameter_list|,
name|void
modifier|*
name|_elem
parameter_list|)
function_decl|;
name|int
name|uu_list_insert_after
parameter_list|(
name|uu_list_t
modifier|*
parameter_list|,
name|void
modifier|*
name|_target
parameter_list|,
name|void
modifier|*
name|_elem
parameter_list|)
function_decl|;
comment|/*  * avl trees: opaque structures  */
typedef|typedef
name|struct
name|uu_avl_pool
name|uu_avl_pool_t
typedef|;
typedef|typedef
name|struct
name|uu_avl
name|uu_avl_t
typedef|;
typedef|typedef
struct|struct
name|uu_avl_node
block|{
ifdef|#
directive|ifdef
name|_LP64
name|uintptr_t
name|uan_opaque
index|[
literal|3
index|]
decl_stmt|;
else|#
directive|else
name|uintptr_t
name|uan_opaque
index|[
literal|4
index|]
decl_stmt|;
endif|#
directive|endif
block|}
name|uu_avl_node_t
typedef|;
typedef|typedef
name|struct
name|uu_avl_walk
name|uu_avl_walk_t
typedef|;
typedef|typedef
name|uintptr_t
name|uu_avl_index_t
typedef|;
comment|/*  * avl trees: interface  *  * basic usage:  *	typedef struct foo {  *		...  *		uu_avl_node_t foo_node;  *		...  *	} foo_t;  *  *	static int  *	foo_compare(void *l_arg, void *r_arg, void *private)  *	{  *		foo_t *l = l_arg;  *		foo_t *r = r_arg;  *  *		if (... l greater than r ...)  *			return (1);  *		if (... l less than r ...)  *			return (-1);  *		return (0);  *	}  *  *	...  *		// at initialization time  *		foo_pool = uu_avl_pool_create("foo_pool",  *		    sizeof (foo_t), offsetof(foo_t, foo_node), foo_compare,  *		    debugging? 0 : UU_AVL_POOL_DEBUG);  *	...  */
name|uu_avl_pool_t
modifier|*
name|uu_avl_pool_create
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|uu_compare_fn_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
define|#
directive|define
name|UU_AVL_POOL_DEBUG
value|0x00000001
name|void
name|uu_avl_pool_destroy
parameter_list|(
name|uu_avl_pool_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * usage:  *  *	foo_t *a;  *	a = malloc(sizeof(*a));  *	uu_avl_node_init(a,&a->foo_avl, pool);  *	...  *	uu_avl_node_fini(a,&a->foo_avl, pool);  *	free(a);  */
name|void
name|uu_avl_node_init
parameter_list|(
name|void
modifier|*
parameter_list|,
name|uu_avl_node_t
modifier|*
parameter_list|,
name|uu_avl_pool_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_avl_node_fini
parameter_list|(
name|void
modifier|*
parameter_list|,
name|uu_avl_node_t
modifier|*
parameter_list|,
name|uu_avl_pool_t
modifier|*
parameter_list|)
function_decl|;
name|uu_avl_t
modifier|*
name|uu_avl_create
parameter_list|(
name|uu_avl_pool_t
modifier|*
parameter_list|,
name|void
modifier|*
name|_parent
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
define|#
directive|define
name|UU_AVL_DEBUG
value|0x00000001
name|void
name|uu_avl_destroy
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|)
function_decl|;
comment|/* list must be empty */
name|size_t
name|uu_avl_numnodes
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_first
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_last
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_next
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_prev
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|uu_avl_walk
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|uu_walk_fn_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|uu_avl_walk_t
modifier|*
name|uu_avl_walk_start
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|uint32_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_walk_next
parameter_list|(
name|uu_avl_walk_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_avl_walk_end
parameter_list|(
name|uu_avl_walk_t
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_find
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uu_avl_index_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_avl_insert
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|uu_avl_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_nearest_next
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|uu_avl_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_nearest_prev
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|uu_avl_index_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|uu_avl_teardown
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|uu_avl_remove
parameter_list|(
name|uu_avl_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBUUTIL_H */
end_comment

end_unit

