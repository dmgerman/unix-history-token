begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER SART  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2009 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBFS_IMPL_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBFS_IMPL_H
end_define

begin_include
include|#
directive|include
file|<sys/dmu.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_ioctl.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_acl.h>
end_include

begin_include
include|#
directive|include
file|<sys/spa.h>
end_include

begin_include
include|#
directive|include
file|<sys/nvpair.h>
end_include

begin_include
include|#
directive|include
file|<libshare.h>
end_include

begin_include
include|#
directive|include
file|<libuutil.h>
end_include

begin_include
include|#
directive|include
file|<libzfs.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|VERIFY
undef|#
directive|undef
name|VERIFY
endif|#
directive|endif
define|#
directive|define
name|VERIFY
value|verify
struct|struct
name|libzfs_handle
block|{
name|int
name|libzfs_error
decl_stmt|;
name|int
name|libzfs_fd
decl_stmt|;
name|FILE
modifier|*
name|libzfs_mnttab
decl_stmt|;
name|FILE
modifier|*
name|libzfs_sharetab
decl_stmt|;
name|zpool_handle_t
modifier|*
name|libzfs_pool_handles
decl_stmt|;
name|uu_avl_pool_t
modifier|*
name|libzfs_ns_avlpool
decl_stmt|;
name|uu_avl_t
modifier|*
name|libzfs_ns_avl
decl_stmt|;
name|uint64_t
name|libzfs_ns_gen
decl_stmt|;
name|int
name|libzfs_desc_active
decl_stmt|;
name|char
name|libzfs_action
index|[
literal|1024
index|]
decl_stmt|;
name|char
name|libzfs_desc
index|[
literal|1024
index|]
decl_stmt|;
name|char
modifier|*
name|libzfs_log_str
decl_stmt|;
name|int
name|libzfs_printerr
decl_stmt|;
name|void
modifier|*
name|libzfs_sharehdl
decl_stmt|;
comment|/* libshare handle */
name|uint_t
name|libzfs_shareflags
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|ZFSSHARE_MISS
value|0x01
comment|/* Didn't find entry in cache */
struct|struct
name|zfs_handle
block|{
name|libzfs_handle_t
modifier|*
name|zfs_hdl
decl_stmt|;
name|zpool_handle_t
modifier|*
name|zpool_hdl
decl_stmt|;
name|char
name|zfs_name
index|[
name|ZFS_MAXNAMELEN
index|]
decl_stmt|;
name|zfs_type_t
name|zfs_type
decl_stmt|;
comment|/* type including snapshot */
name|zfs_type_t
name|zfs_head_type
decl_stmt|;
comment|/* type excluding snapshot */
name|dmu_objset_stats_t
name|zfs_dmustats
decl_stmt|;
name|nvlist_t
modifier|*
name|zfs_props
decl_stmt|;
name|nvlist_t
modifier|*
name|zfs_user_props
decl_stmt|;
name|boolean_t
name|zfs_mntcheck
decl_stmt|;
name|char
modifier|*
name|zfs_mntopts
decl_stmt|;
name|uint8_t
modifier|*
name|zfs_props_table
decl_stmt|;
block|}
struct|;
comment|/*  * This is different from checking zfs_type, because it will also catch  * snapshots of volumes.  */
define|#
directive|define
name|ZFS_IS_VOLUME
parameter_list|(
name|zhp
parameter_list|)
value|((zhp)->zfs_head_type == ZFS_TYPE_VOLUME)
struct|struct
name|zpool_handle
block|{
name|libzfs_handle_t
modifier|*
name|zpool_hdl
decl_stmt|;
name|zpool_handle_t
modifier|*
name|zpool_next
decl_stmt|;
name|char
name|zpool_name
index|[
name|ZPOOL_MAXNAMELEN
index|]
decl_stmt|;
name|int
name|zpool_state
decl_stmt|;
name|size_t
name|zpool_config_size
decl_stmt|;
name|nvlist_t
modifier|*
name|zpool_config
decl_stmt|;
name|nvlist_t
modifier|*
name|zpool_old_config
decl_stmt|;
name|nvlist_t
modifier|*
name|zpool_props
decl_stmt|;
name|diskaddr_t
name|zpool_start_block
decl_stmt|;
block|}
struct|;
typedef|typedef
enum|enum
block|{
name|PROTO_NFS
init|=
literal|0
block|,
name|PROTO_SMB
init|=
literal|1
block|,
name|PROTO_END
init|=
literal|2
block|}
name|zfs_share_proto_t
typedef|;
comment|/*  * The following can be used as a bitmask and any new values  * added must preserve that capability.  */
typedef|typedef
enum|enum
block|{
name|SHARED_NOT_SHARED
init|=
literal|0x0
block|,
name|SHARED_ISCSI
init|=
literal|0x1
block|,
name|SHARED_NFS
init|=
literal|0x2
block|,
name|SHARED_SMB
init|=
literal|0x4
block|}
name|zfs_share_type_t
typedef|;
name|int
name|zfs_error
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_error_fmt
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|zfs_error_aux
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
modifier|*
name|zfs_alloc
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
modifier|*
name|zfs_realloc
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|char
modifier|*
name|zfs_strdup
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|no_memory
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_standard_error
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zfs_standard_error_fmt
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|zpool_standard_error
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zpool_standard_error_fmt
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|get_dependents
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zprop_parse_value
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|nvpair_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|zfs_type_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|uint64_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zprop_expand_list
parameter_list|(
name|libzfs_handle_t
modifier|*
name|hdl
parameter_list|,
name|zprop_list_t
modifier|*
modifier|*
name|plp
parameter_list|,
name|zfs_type_t
name|type
parameter_list|)
function_decl|;
comment|/*  * Use this changelist_gather() flag to force attempting mounts  * on each change node regardless of whether or not it is currently  * mounted.  */
define|#
directive|define
name|CL_GATHER_MOUNT_ALWAYS
value|1
typedef|typedef
name|struct
name|prop_changelist
name|prop_changelist_t
typedef|;
name|int
name|zcmd_alloc_dst_nvlist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_cmd_t
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|zcmd_write_src_nvlist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_cmd_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcmd_write_conf_nvlist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_cmd_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcmd_expand_dst_nvlist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_cmd_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|zcmd_read_dst_nvlist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_cmd_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
name|zcmd_free_nvlists
parameter_list|(
name|zfs_cmd_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|changelist_prefix
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|changelist_postfix
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|changelist_rename
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|changelist_remove
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|changelist_free
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|)
function_decl|;
name|prop_changelist_t
modifier|*
name|changelist_gather
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|changelist_unshare
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|,
name|zfs_share_proto_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|changelist_haszonedchild
parameter_list|(
name|prop_changelist_t
modifier|*
parameter_list|)
function_decl|;
name|void
name|remove_mountpoint
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
name|int
name|create_parents
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|boolean_t
name|isa_child_of
parameter_list|(
specifier|const
name|char
modifier|*
name|dataset
parameter_list|,
specifier|const
name|char
modifier|*
name|parent
parameter_list|)
function_decl|;
name|zfs_handle_t
modifier|*
name|make_dataset_handle
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zpool_open_silent
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zpool_handle_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|int
name|zvol_create_link
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zvol_remove_link
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|zpool_iter_zvol
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|boolean_t
name|zpool_name_valid
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|namespace_clear
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * libshare (sharemgr) interfaces used internally.  */
specifier|extern
name|int
name|zfs_init_libshare
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_uninit_libshare
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_parse_options
parameter_list|(
name|char
modifier|*
parameter_list|,
name|zfs_share_proto_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare_proto
parameter_list|(
name|zfs_handle_t
modifier|*
name|zhp
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_share_proto_t
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__FreeBSD__
comment|/*  * This is FreeBSD version of ioctl, because Solaris' ioctl() updates  * zc_nvlist_dst_size even if an error is returned, on FreeBSD if an  * error is returned zc_nvlist_dst_size won't be updated.  */
specifier|static
name|__inline
name|int
name|zcmd_ioctl
parameter_list|(
name|int
name|fd
parameter_list|,
name|unsigned
name|long
name|cmd
parameter_list|,
name|zfs_cmd_t
modifier|*
name|zc
parameter_list|)
block|{
name|size_t
name|oldsize
decl_stmt|;
name|int
name|ret
decl_stmt|;
name|oldsize
operator|=
name|zc
operator|->
name|zc_nvlist_dst_size
expr_stmt|;
name|ret
operator|=
name|ioctl
argument_list|(
name|fd
argument_list|,
name|cmd
argument_list|,
name|zc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|0
operator|&&
name|oldsize
operator|<
name|zc
operator|->
name|zc_nvlist_dst_size
condition|)
block|{
name|ret
operator|=
operator|-
literal|1
expr_stmt|;
name|errno
operator|=
name|ENOMEM
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
define|#
directive|define
name|ioctl
parameter_list|(
name|fd
parameter_list|,
name|cmd
parameter_list|,
name|zc
parameter_list|)
value|zcmd_ioctl((fd), (cmd), (zc))
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBFS_IMPL_H */
end_comment

end_unit

