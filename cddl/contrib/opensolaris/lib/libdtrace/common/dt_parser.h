begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DT_PARSER_H
end_ifndef

begin_define
define|#
directive|define
name|_DT_PARSER_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/dtrace.h>
end_include

begin_include
include|#
directive|include
file|<libctf.h>
end_include

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<dt_errtags.h>
include|#
directive|include
file|<dt_ident.h>
include|#
directive|include
file|<dt_decl.h>
include|#
directive|include
file|<dt_xlator.h>
include|#
directive|include
file|<dt_list.h>
typedef|typedef
struct|struct
name|dt_node
block|{
name|ctf_file_t
modifier|*
name|dn_ctfp
decl_stmt|;
comment|/* CTF type container for node's type */
name|ctf_id_t
name|dn_type
decl_stmt|;
comment|/* CTF type reference for node's type */
name|uchar_t
name|dn_kind
decl_stmt|;
comment|/* node kind (DT_NODE_*, defined below) */
name|uchar_t
name|dn_flags
decl_stmt|;
comment|/* node flags (DT_NF_*, defined below) */
name|ushort_t
name|dn_op
decl_stmt|;
comment|/* operator (DT_TOK_*, defined by lex) */
name|int
name|dn_line
decl_stmt|;
comment|/* line number for error messages */
name|int
name|dn_reg
decl_stmt|;
comment|/* register allocated by cg */
name|dtrace_attribute_t
name|dn_attr
decl_stmt|;
comment|/* node stability attributes */
comment|/* 	 * D compiler nodes, as is the usual style, contain a union of the 	 * different sub-elements required by the various kinds of nodes. 	 * These sub-elements are accessed using the macros defined below. 	 */
union|union
block|{
struct|struct
block|{
name|uintmax_t
name|_value
decl_stmt|;
comment|/* integer value */
name|char
modifier|*
name|_string
decl_stmt|;
comment|/* string value */
block|}
name|_const
struct|;
struct|struct
block|{
name|dt_ident_t
modifier|*
name|_ident
decl_stmt|;
comment|/* identifier reference */
name|struct
name|dt_node
modifier|*
name|_links
index|[
literal|3
index|]
decl_stmt|;
comment|/* child node pointers */
block|}
name|_nodes
struct|;
struct|struct
block|{
name|struct
name|dt_node
modifier|*
name|_descs
decl_stmt|;
comment|/* list of descriptions */
name|struct
name|dt_node
modifier|*
name|_pred
decl_stmt|;
comment|/* predicate expression */
name|struct
name|dt_node
modifier|*
name|_acts
decl_stmt|;
comment|/* action statement list */
name|dt_idhash_t
modifier|*
name|_locals
decl_stmt|;
comment|/* local variable hash */
name|dtrace_attribute_t
name|_attr
decl_stmt|;
comment|/* context attributes */
block|}
name|_clause
struct|;
struct|struct
block|{
name|char
modifier|*
name|_spec
decl_stmt|;
comment|/* specifier string (if any) */
name|dtrace_probedesc_t
modifier|*
name|_desc
decl_stmt|;
comment|/* final probe description */
block|}
name|_pdesc
struct|;
struct|struct
block|{
name|char
modifier|*
name|_name
decl_stmt|;
comment|/* string name of member */
name|struct
name|dt_node
modifier|*
name|_expr
decl_stmt|;
comment|/* expression node pointer */
name|dt_xlator_t
modifier|*
name|_xlator
decl_stmt|;
comment|/* translator reference */
name|uint_t
name|_id
decl_stmt|;
comment|/* member identifier */
block|}
name|_member
struct|;
struct|struct
block|{
name|dt_xlator_t
modifier|*
name|_xlator
decl_stmt|;
comment|/* translator reference */
name|struct
name|dt_node
modifier|*
name|_xmemb
decl_stmt|;
comment|/* individual xlator member */
name|struct
name|dt_node
modifier|*
name|_membs
decl_stmt|;
comment|/* list of member nodes */
block|}
name|_xlator
struct|;
struct|struct
block|{
name|char
modifier|*
name|_name
decl_stmt|;
comment|/* string name of provider */
name|struct
name|dt_provider
modifier|*
name|_pvp
decl_stmt|;
comment|/* provider references */
name|struct
name|dt_node
modifier|*
name|_probes
decl_stmt|;
comment|/* list of probe nodes */
name|int
name|_redecl
decl_stmt|;
comment|/* provider redeclared */
block|}
name|_provider
struct|;
block|}
name|dn_u
union|;
name|struct
name|dt_node
modifier|*
name|dn_list
decl_stmt|;
comment|/* parse tree list link */
name|struct
name|dt_node
modifier|*
name|dn_link
decl_stmt|;
comment|/* allocation list link */
block|}
name|dt_node_t
typedef|;
define|#
directive|define
name|dn_value
value|dn_u._const._value
comment|/* DT_NODE_INT */
define|#
directive|define
name|dn_string
value|dn_u._const._string
comment|/* STRING, IDENT, TYPE */
define|#
directive|define
name|dn_ident
value|dn_u._nodes._ident
comment|/* VAR,SYM,FUN,AGG,INL,PROBE */
define|#
directive|define
name|dn_args
value|dn_u._nodes._links[0]
comment|/* DT_NODE_VAR, FUNC */
define|#
directive|define
name|dn_child
value|dn_u._nodes._links[0]
comment|/* DT_NODE_OP1 */
define|#
directive|define
name|dn_left
value|dn_u._nodes._links[0]
comment|/* DT_NODE_OP2, OP3 */
define|#
directive|define
name|dn_right
value|dn_u._nodes._links[1]
comment|/* DT_NODE_OP2, OP3 */
define|#
directive|define
name|dn_expr
value|dn_u._nodes._links[2]
comment|/* DT_NODE_OP3, DEXPR */
define|#
directive|define
name|dn_aggfun
value|dn_u._nodes._links[0]
comment|/* DT_NODE_AGG */
define|#
directive|define
name|dn_aggtup
value|dn_u._nodes._links[1]
comment|/* DT_NODE_AGG */
define|#
directive|define
name|dn_pdescs
value|dn_u._clause._descs
comment|/* DT_NODE_CLAUSE */
define|#
directive|define
name|dn_pred
value|dn_u._clause._pred
comment|/* DT_NODE_CLAUSE */
define|#
directive|define
name|dn_acts
value|dn_u._clause._acts
comment|/* DT_NODE_CLAUSE */
define|#
directive|define
name|dn_locals
value|dn_u._clause._locals
comment|/* DT_NODE_CLAUSE */
define|#
directive|define
name|dn_ctxattr
value|dn_u._clause._attr
comment|/* DT_NODE_CLAUSE */
define|#
directive|define
name|dn_spec
value|dn_u._pdesc._spec
comment|/* DT_NODE_PDESC */
define|#
directive|define
name|dn_desc
value|dn_u._pdesc._desc
comment|/* DT_NODE_PDESC */
define|#
directive|define
name|dn_membname
value|dn_u._member._name
comment|/* DT_NODE_MEMBER */
define|#
directive|define
name|dn_membexpr
value|dn_u._member._expr
comment|/* DT_NODE_MEMBER */
define|#
directive|define
name|dn_membxlator
value|dn_u._member._xlator
comment|/* DT_NODE_MEMBER */
define|#
directive|define
name|dn_membid
value|dn_u._member._id
comment|/* DT_NODE_MEMBER */
define|#
directive|define
name|dn_xlator
value|dn_u._xlator._xlator
comment|/* DT_NODE_XLATOR */
define|#
directive|define
name|dn_xmember
value|dn_u._xlator._xmemb
comment|/* DT_NODE_XLATOR */
define|#
directive|define
name|dn_members
value|dn_u._xlator._membs
comment|/* DT_NODE_XLATOR */
define|#
directive|define
name|dn_provname
value|dn_u._provider._name
comment|/* DT_NODE_PROVIDER */
define|#
directive|define
name|dn_provider
value|dn_u._provider._pvp
comment|/* DT_NODE_PROVIDER */
define|#
directive|define
name|dn_provred
value|dn_u._provider._redecl
comment|/* DT_NODE_PROVIDER */
define|#
directive|define
name|dn_probes
value|dn_u._provider._probes
comment|/* DT_NODE_PROVIDER */
define|#
directive|define
name|DT_NODE_FREE
value|0
comment|/* unused node (waiting to be freed) */
define|#
directive|define
name|DT_NODE_INT
value|1
comment|/* integer value */
define|#
directive|define
name|DT_NODE_STRING
value|2
comment|/* string value */
define|#
directive|define
name|DT_NODE_IDENT
value|3
comment|/* identifier */
define|#
directive|define
name|DT_NODE_VAR
value|4
comment|/* variable reference */
define|#
directive|define
name|DT_NODE_SYM
value|5
comment|/* symbol reference */
define|#
directive|define
name|DT_NODE_TYPE
value|6
comment|/* type reference or formal parameter */
define|#
directive|define
name|DT_NODE_FUNC
value|7
comment|/* function call */
define|#
directive|define
name|DT_NODE_OP1
value|8
comment|/* unary operator */
define|#
directive|define
name|DT_NODE_OP2
value|9
comment|/* binary operator */
define|#
directive|define
name|DT_NODE_OP3
value|10
comment|/* ternary operator */
define|#
directive|define
name|DT_NODE_DEXPR
value|11
comment|/* D expression action */
define|#
directive|define
name|DT_NODE_DFUNC
value|12
comment|/* D function action */
define|#
directive|define
name|DT_NODE_AGG
value|13
comment|/* aggregation */
define|#
directive|define
name|DT_NODE_PDESC
value|14
comment|/* probe description */
define|#
directive|define
name|DT_NODE_CLAUSE
value|15
comment|/* clause definition */
define|#
directive|define
name|DT_NODE_INLINE
value|16
comment|/* inline definition */
define|#
directive|define
name|DT_NODE_MEMBER
value|17
comment|/* member definition */
define|#
directive|define
name|DT_NODE_XLATOR
value|18
comment|/* translator definition */
define|#
directive|define
name|DT_NODE_PROBE
value|19
comment|/* probe definition */
define|#
directive|define
name|DT_NODE_PROVIDER
value|20
comment|/* provider definition */
define|#
directive|define
name|DT_NODE_PROG
value|21
comment|/* program translation unit */
define|#
directive|define
name|DT_NF_SIGNED
value|0x01
comment|/* data is a signed quantity (else unsigned) */
define|#
directive|define
name|DT_NF_COOKED
value|0x02
comment|/* data is a known type (else still cooking) */
define|#
directive|define
name|DT_NF_REF
value|0x04
comment|/* pass by reference (array, struct, union) */
define|#
directive|define
name|DT_NF_LVALUE
value|0x08
comment|/* node is an l-value according to ANSI-C */
define|#
directive|define
name|DT_NF_WRITABLE
value|0x10
comment|/* node is writable (can be modified) */
define|#
directive|define
name|DT_NF_BITFIELD
value|0x20
comment|/* node is an integer bitfield */
define|#
directive|define
name|DT_NF_USERLAND
value|0x40
comment|/* data is a userland address */
define|#
directive|define
name|DT_TYPE_NAMELEN
value|128
comment|/* reasonable size for ctf_type_name() */
specifier|extern
name|int
name|dt_node_is_integer
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_float
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_scalar
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_arith
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_vfptr
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_dynamic
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_stack
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_symaddr
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_usymaddr
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_string
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_strcompat
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_pointer
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_void
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_ptrcompat
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|ctf_file_t
modifier|*
modifier|*
parameter_list|,
name|ctf_id_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_argcompat
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_posconst
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_is_actfunc
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_int
parameter_list|(
name|uintmax_t
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_string
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_ident
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_type
parameter_list|(
name|dt_decl_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_vatype
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_decl
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_func
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_offsetof
parameter_list|(
name|dt_decl_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_op1
parameter_list|(
name|int
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_op2
parameter_list|(
name|int
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_op3
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_statement
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_pdesc_by_name
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_pdesc_by_id
parameter_list|(
name|uintmax_t
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_clause
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_inline
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_member
parameter_list|(
name|dt_decl_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_xlator
parameter_list|(
name|dt_decl_t
modifier|*
parameter_list|,
name|dt_decl_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_probe
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_provider
parameter_list|(
name|char
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_program
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_link
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_cook
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|dt_node_t
modifier|*
name|dt_node_xalloc
parameter_list|(
name|dtrace_hdl_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_free
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dtrace_attribute_t
name|dt_node_list_cook
parameter_list|(
name|dt_node_t
modifier|*
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_list_free
parameter_list|(
name|dt_node_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_link_free
parameter_list|(
name|dt_node_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_attr_assign
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dtrace_attribute_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_type_assign
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_type_propagate
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|dt_node_type_name
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|dt_node_type_size
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|dt_ident_t
modifier|*
name|dt_node_resolve
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|uint_t
parameter_list|)
function_decl|;
specifier|extern
name|size_t
name|dt_node_sizeof
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_promote
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|,
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_diftype
parameter_list|(
name|dtrace_hdl_t
modifier|*
parameter_list|,
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|dtrace_diftype_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dt_node_printr
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|dt_node_name
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_node_root
parameter_list|(
name|dt_node_t
modifier|*
parameter_list|)
function_decl|;
struct_decl|struct
name|dtrace_typeinfo
struct_decl|;
comment|/* see<dtrace.h> */
struct_decl|struct
name|dt_pcb
struct_decl|;
comment|/* see<dt_impl.h> */
define|#
directive|define
name|IS_CHAR
parameter_list|(
name|e
parameter_list|)
define|\
value|(((e).cte_format& (CTF_INT_CHAR | CTF_INT_SIGNED)) == \ 	(CTF_INT_CHAR | CTF_INT_SIGNED)&& (e).cte_bits == NBBY)
define|#
directive|define
name|IS_VOID
parameter_list|(
name|e
parameter_list|)
define|\
value|((e).cte_offset == 0&& (e).cte_bits == 0)
specifier|extern
name|int
name|dt_type_lookup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|dtrace_typeinfo
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|dt_type_pointer
parameter_list|(
name|struct
name|dtrace_typeinfo
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|dt_type_name
parameter_list|(
name|ctf_file_t
modifier|*
parameter_list|,
name|ctf_id_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
typedef|typedef
enum|enum
block|{
name|YYS_CLAUSE
block|,
comment|/* lex/yacc state for finding program clauses */
name|YYS_DEFINE
block|,
comment|/* lex/yacc state for parsing persistent definitions */
name|YYS_EXPR
block|,
comment|/* lex/yacc state for parsing D expressions */
name|YYS_DONE
block|,
comment|/* lex/yacc state for indicating parse tree is done */
name|YYS_CONTROL
comment|/* lex/yacc state for parsing control lines */
block|}
name|yystate_t
typedef|;
specifier|extern
name|void
name|dnerror
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|dt_errtag_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dnwarn
parameter_list|(
specifier|const
name|dt_node_t
modifier|*
parameter_list|,
name|dt_errtag_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|xyerror
parameter_list|(
name|dt_errtag_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|xywarn
parameter_list|(
name|dt_errtag_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|xyvwarn
parameter_list|(
name|dt_errtag_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yyerror
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yywarn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yyvwarn
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yylabel
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yybegin
parameter_list|(
name|yystate_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|yyinit
parameter_list|(
name|struct
name|dt_pcb
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|yyparse
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|yyinput
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DT_PARSER_H */
end_comment

end_unit

