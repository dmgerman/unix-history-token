begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|X_HILINIT_H
end_ifndef

begin_define
define|#
directive|define
name|X_HILINIT_H
end_define

begin_comment
comment|/* $Header: /host/kaukau/disk2/X11R5/R5-hp300/mit/server/ddx/hpbsd/input/RCS/x_hilinit.h,v 1.1 1992/09/30 03:14:10 root Exp $ */
end_comment

begin_comment
comment|/*  Copyright (c) 1986, 1987 by Hewlett-Packard Company Copyright (c) 1986, 1987 by the Massachusetts Institute of Technology  Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the name of M.I.T. not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.  HEWLETT-PACKARD MAKES NO WARRANTY OF ANY KIND WITH REGARD TO THIS SOFWARE, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE.  Hewlett-Packard shall not be liable for errors  contained herein or direct, indirect, special, incidental or  consequential damages in connection with the furnishing,  performance, or use of this material.  This software is not subject to any license of the American Telephone and Telegraph Company or of the Regents of the University of California.  */
end_comment

begin_comment
comment|/**************************************************************************  *  * file: x_hilinit.h  *  * contains key definitions and other static information used by x_hilinit.c  *  */
end_comment

begin_define
define|#
directive|define
name|STARTUP
value|0
end_define

begin_define
define|#
directive|define
name|MAX_STRINGS
value|(sizeof (strings) / sizeof (struct str_table))
end_define

begin_define
define|#
directive|define
name|MAX_DEV_TYPES
value|(sizeof (devices) / sizeof (struct dev_table))
end_define

begin_define
define|#
directive|define
name|MAX_POINTER_FUNCS
value|(sizeof (pointerfunc) / sizeof (struct pointerfunc))
end_define

begin_define
define|#
directive|define
name|QUAD_INDEX
value|8
end_define

begin_comment
comment|/* index of quad entry in dev_table */
end_comment

begin_define
define|#
directive|define
name|NINE_KNOB_ID
value|0x61
end_define

begin_define
define|#
directive|define
name|KEY
value|0
end_define

begin_define
define|#
directive|define
name|UCHAR_NUMBER
value|1
end_define

begin_define
define|#
directive|define
name|STRING
value|2
end_define

begin_define
define|#
directive|define
name|MODIFIER
value|3
end_define

begin_define
define|#
directive|define
name|USHORT_NUMBER
value|4
end_define

begin_define
define|#
directive|define
name|UINT_NUMBER
value|5
end_define

begin_struct
struct|struct
name|opendevs
block|{
name|int
name|type
decl_stmt|;
name|int
name|pos
decl_stmt|;
name|int
name|use
decl_stmt|;
name|char
name|path
index|[
name|MAXNAMLEN
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|name
index|[
name|MAXNAMLEN
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|entry
index|[
name|MAXNAMLEN
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dev_table
block|{
name|int
name|lowid
decl_stmt|;
name|int
name|highid
decl_stmt|;
name|int
name|dev_type
decl_stmt|;
name|int
name|x_type
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|char
name|num_keys
decl_stmt|;
name|unsigned
name|char
name|min_kcode
decl_stmt|;
name|unsigned
name|char
name|max_kcode
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|struct
name|dev_table
name|devices
index|[]
init|=
block|{
block|{
literal|0x00
block|,
literal|0x1f
block|,
name|KEYPAD
block|,
name|KEYBOARD
block|,
literal|"KEYPAD"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x2f
block|,
literal|0x2f
block|,
name|APOLLO_LPFK
block|,
name|KEYBOARD
block|,
literal|"BUTTONBOX"
block|,
literal|33
block|,
literal|64
block|,
literal|32
block|}
block|,
block|{
literal|0x30
block|,
literal|0x33
block|,
name|BUTTONBOX
block|,
name|KEYBOARD
block|,
literal|"BUTTONBOX"
block|,
literal|32
block|,
literal|10
block|,
literal|41
block|}
block|,
block|{
literal|0x34
block|,
literal|0x34
block|,
name|ID_MODULE
block|,
name|XOTHER
block|,
literal|"ID_MODULE"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x35
block|,
literal|0x3f
block|,
name|BUTTONBOX
block|,
name|KEYBOARD
block|,
literal|"BUTTONBOX"
block|,
literal|32
block|,
literal|10
block|,
literal|41
block|}
block|,
block|{
literal|0x5c
block|,
literal|0x5f
block|,
name|BARCODE
block|,
name|KEYBOARD
block|,
literal|"BARCODE"
block|,
literal|109
block|,
literal|10
block|,
literal|135
block|}
block|,
block|{
literal|0x60
block|,
literal|0x60
block|,
name|ONE_KNOB
block|,
name|MOUSE
block|,
literal|"ONE_KNOB"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x61
block|,
literal|0x61
block|,
name|NINE_KNOB
block|,
name|MOUSE
block|,
literal|"NINE_KNOB"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x62
block|,
literal|0x67
block|,
name|QUADRATURE
block|,
name|MOUSE
block|,
literal|"QUADRATURE"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x68
block|,
literal|0x6b
block|,
name|MOUSE
block|,
name|MOUSE
block|,
literal|"MOUSE"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x6c
block|,
literal|0x6f
block|,
name|TRACKBALL
block|,
name|MOUSE
block|,
literal|"TRACKBALL"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x70
block|,
literal|0x70
block|,
name|VCD_8_DIALBOX
block|,
name|MOUSE
block|,
literal|"KNOB_BOX"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x71
block|,
literal|0x71
block|,
name|SS_SPACEBALL
block|,
name|MOUSE
block|,
literal|"SPACEBALL"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x88
block|,
literal|0x8b
block|,
name|TOUCHPAD
block|,
name|MOUSE
block|,
literal|"TOUCHPAD"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x8c
block|,
literal|0x8f
block|,
name|TOUCHSCREEN
block|,
name|MOUSE
block|,
literal|"TOUCHSCREEN"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x90
block|,
literal|0x97
block|,
name|TABLET
block|,
name|MOUSE
block|,
literal|"TABLET"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x98
block|,
literal|0x98
block|,
name|MMII_1812_TABLET
block|,
name|MOUSE
block|,
literal|"TABLET"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0x99
block|,
literal|0x99
block|,
name|MMII_1201_TABLET
block|,
name|MOUSE
block|,
literal|"TABLET"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|0xA0
block|,
literal|0xBF
block|,
name|KEYBOARD
block|,
name|KEYBOARD
block|,
literal|"KEYBOARD"
block|,
literal|93
block|,
literal|10
block|,
literal|135
block|}
block|,
block|{
literal|0xC0
block|,
literal|0xDF
block|,
name|KEYBOARD
block|,
name|KEYBOARD
block|,
literal|"KEYBOARD"
block|,
literal|109
block|,
literal|10
block|,
literal|135
block|}
block|,
block|{
literal|0xE0
block|,
literal|0xFF
block|,
name|KEYBOARD
block|,
name|KEYBOARD
block|,
literal|"KEYBOARD"
block|,
literal|87
block|,
literal|10
block|,
literal|135
block|}
block|,
block|{
literal|0x00
block|,
literal|0x00
block|,
name|NULL_DEVICE
block|,
name|NULL_DEVICE
block|,
literal|"NULL"
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|position
index|[]
init|=
block|{
literal|"FIRST"
block|,
literal|"SECOND"
block|,
literal|"THIRD"
block|,
literal|"FOURTH"
block|,
literal|"FIFTH"
block|,
literal|"SIXTH"
block|,
literal|"SEVENTH"
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|suffix
index|[]
init|=
if|#
directive|if
name|defined
argument_list|(
name|__hp9000s300
argument_list|)
operator|||
name|defined
argument_list|(
name|__hp9000s700
argument_list|)
operator|||
name|defined
argument_list|(
name|__hp_osf
argument_list|)
operator|||
name|defined
argument_list|(
name|hp300
argument_list|)
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|}
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_block
block|{
literal|"0.1"
operator|,
literal|"0.2"
operator|,
literal|"0.3"
operator|,
literal|"0.4"
operator|,
literal|"0.5"
operator|,
literal|"0.6"
operator|,
literal|"0.7"
operator|,
literal|"1.1"
operator|,
literal|"1.2"
operator|,
literal|"1.3"
operator|,
literal|"1.4"
operator|,
literal|"1.5"
operator|,
literal|"1.6"
operator|,
literal|"1.7"
operator|,
literal|"2.1"
operator|,
literal|"2.2"
operator|,
literal|"2.3"
operator|,
literal|"2.4"
operator|,
literal|"2.5"
operator|,
literal|"2.6"
operator|,
literal|"2.7"
operator|,
literal|"3.1"
operator|,
literal|"3.2"
operator|,
literal|"3.3"
operator|,
literal|"3.4"
operator|,
literal|"3.5"
operator|,
literal|"3.6"
operator|,
literal|"3.7"
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __hp9000s300 or __hp9000s700 */
end_comment

begin_decl_stmt
specifier|extern
name|u_char
name|cursor_down
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|cursor_left
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|cursor_right
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|cursor_up
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_4
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_5
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_6
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_7
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_8
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|pointer_key_mods
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|pointer_amt_mods
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|reset_mods
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|borrow_mode_mods
index|[
literal|3
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|pointer_move
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|pointer_mod1_amt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|pointer_mod2_amt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_short
name|pointer_mod3_amt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|borrow_mode
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|reset
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|screen_change_amt
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_chording
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|button_latching
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|ptr_button_map
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|isotropic_scaling
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|screen_orientation
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|screen_row_wrap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_char
name|screen_col_wrap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|tablet_xorigin
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|tablet_yorigin
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|tablet_width
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int
name|tablet_height
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|pointerfunc
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|u_char
modifier|*
name|code
decl_stmt|;
name|int
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
name|struct
name|pointerfunc
name|pointerfunc
index|[]
init|=
block|{
block|{
literal|"POINTER_LEFT_KEY"
block|,
operator|&
name|cursor_left
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_RIGHT_KEY"
block|,
operator|&
name|cursor_right
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_UP_KEY"
block|,
operator|&
name|cursor_up
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_DOWN_KEY"
block|,
operator|&
name|cursor_down
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_KEY_MOD1"
block|,
operator|&
name|pointer_key_mods
index|[
literal|0
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_KEY_MOD2"
block|,
operator|&
name|pointer_key_mods
index|[
literal|1
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_KEY_MOD3"
block|,
operator|&
name|pointer_key_mods
index|[
literal|2
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_BUTTON1_KEY"
block|,
operator|&
name|button_1
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON2_KEY"
block|,
operator|&
name|button_2
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON3_KEY"
block|,
operator|&
name|button_3
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON4_KEY"
block|,
operator|&
name|button_4
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON5_KEY"
block|,
operator|&
name|button_5
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON6_KEY"
block|,
operator|&
name|button_6
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON7_KEY"
block|,
operator|&
name|button_7
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_BUTTON8_KEY"
block|,
operator|&
name|button_8
block|,
name|KEY
block|}
block|,
block|{
literal|"POINTER_MOVE"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|pointer_move
block|,
name|USHORT_NUMBER
block|}
block|,
block|{
literal|"POINTER_MOD1_AMT"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|pointer_mod1_amt
block|,
name|USHORT_NUMBER
block|}
block|,
block|{
literal|"POINTER_MOD2_AMT"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|pointer_mod2_amt
block|,
name|USHORT_NUMBER
block|}
block|,
block|{
literal|"POINTER_MOD3_AMT"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|pointer_mod3_amt
block|,
name|USHORT_NUMBER
block|}
block|,
ifdef|#
directive|ifdef
name|__apollo
block|{
literal|"BORROW_MODE_KEY"
block|,
operator|&
name|borrow_mode
block|,
name|KEY
block|}
block|,
block|{
literal|"BORROW_MODE_MOD1_KEY"
block|,
operator|&
name|borrow_mode_mods
index|[
literal|0
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"BORROW_MODE_MOD2_KEY"
block|,
operator|&
name|borrow_mode_mods
index|[
literal|1
index|]
block|,
name|MODIFIER
block|}
block|,
endif|#
directive|endif
comment|/* __apollo */
block|{
literal|"RESET"
block|,
operator|&
name|reset
block|,
name|KEY
block|}
block|,
block|{
literal|"RESET_MOD1"
block|,
operator|&
name|reset_mods
index|[
literal|0
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"RESET_MOD2"
block|,
operator|&
name|reset_mods
index|[
literal|1
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"RESET_MOD3"
block|,
operator|&
name|reset_mods
index|[
literal|2
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_AMT_MOD1"
block|,
operator|&
name|pointer_amt_mods
index|[
literal|0
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_AMT_MOD2"
block|,
operator|&
name|pointer_amt_mods
index|[
literal|1
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"POINTER_AMT_MOD3"
block|,
operator|&
name|pointer_amt_mods
index|[
literal|2
index|]
block|,
name|MODIFIER
block|}
block|,
block|{
literal|"BUTTON_1_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|1
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_2_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|2
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_3_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|3
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_4_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|4
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_5_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|5
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_6_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|6
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_7_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|7
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_8_VALUE"
block|,
operator|&
name|ptr_button_map
index|[
literal|8
index|]
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"SCREEN_CHANGE_AMT"
block|,
operator|&
name|screen_change_amt
block|,
name|UCHAR_NUMBER
block|}
block|,
block|{
literal|"BUTTON_CHORDING"
block|,
operator|&
name|button_chording
block|,
name|STRING
block|}
block|,
block|{
literal|"BUTTON_LATCHING"
block|,
operator|&
name|button_latching
block|,
name|STRING
block|}
block|,
block|{
literal|"TABLET_SUBSET_XORIGIN"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|tablet_xorigin
block|,
name|UINT_NUMBER
block|}
block|,
block|{
literal|"TABLET_SUBSET_YORIGIN"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|tablet_yorigin
block|,
name|UINT_NUMBER
block|}
block|,
block|{
literal|"TABLET_SUBSET_WIDTH"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|tablet_width
block|,
name|UINT_NUMBER
block|}
block|,
block|{
literal|"TABLET_SUBSET_HEIGHT"
block|,
operator|(
name|u_char
operator|*
operator|)
operator|&
name|tablet_height
block|,
name|UINT_NUMBER
block|}
block|,
block|{
literal|"ISOTROPIC_SCALING"
block|,
operator|&
name|isotropic_scaling
block|,
name|STRING
block|}
block|,
block|{
literal|"SCREEN_ORIENTATION"
block|,
operator|&
name|screen_orientation
block|,
name|STRING
block|}
block|,
block|{
literal|"SCREEN_ROW_WRAP"
block|,
operator|&
name|screen_row_wrap
block|,
name|STRING
block|}
block|,
block|{
literal|"SCREEN_COL_WRAP"
block|,
operator|&
name|screen_col_wrap
block|,
name|STRING
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|str_table
block|{
name|char
modifier|*
name|string
decl_stmt|;
name|u_char
name|value
decl_stmt|;
block|}
name|strings
index|[]
init|=
block|{
block|{
literal|"OFF"
block|,
name|CHORDING_OFF
block|}
block|,
block|{
literal|"ON"
block|,
name|CHORDING_ON
block|}
block|,
block|{
literal|"DEFAULT"
block|,
name|CHORDING_DEFAULT
block|}
block|,
block|{
literal|"WRAP"
block|,
name|WRAP
block|}
block|,
block|{
literal|"NOWRAP"
block|,
name|NOWRAP
block|}
block|,
block|{
literal|"SAMESCREEN"
block|,
name|SAMESCREEN
block|}
block|,
block|{
literal|"CHANGE_BY_TWO"
block|,
name|CHANGE_BY_TWO
block|}
block|,
block|{
literal|"VERTICAL"
block|,
name|VERTICAL
block|}
block|,
block|{
literal|"HORIZONTAL"
block|,
name|HORIZONTAL
block|}
block|,
block|{
literal|"MATRIX"
block|,
name|MATRIX
block|}
block|}
struct|;
end_struct

begin_decl_stmt
name|char
modifier|*
name|keyset1
index|[]
init|=
block|{
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|||
name|defined
argument_list|(
name|__hp_osf
argument_list|)
operator|||
name|defined
argument_list|(
name|hp9000
argument_list|)
literal|"RIGHT_CONTROL"
block|,
literal|""
block|,
literal|"RIGHT_EXTEND"
block|,
literal|"LEFT_EXTEND"
block|,
literal|"RIGHT_SHIFT"
block|,
literal|"LEFT_SHIFT"
block|,
literal|"CONTROL"
block|,
literal|"BREAK"
block|,
literal|"KEYPAD_4"
block|,
literal|"KEYPAD_8"
block|,
literal|"KEYPAD_5"
block|,
literal|"KEYPAD_9"
block|,
literal|"KEYPAD_6"
block|,
literal|"KEYPAD_7"
block|,
literal|"KEYPAD_COMMA"
block|,
literal|"KEYPAD_ENTER"
block|,
literal|"KEYPAD_1"
block|,
literal|"KEYPAD_/"
block|,
literal|"KEYPAD_2"
block|,
literal|"KEYPAD_+"
block|,
literal|"KEYPAD_3"
block|,
literal|"KEYPAD_*"
block|,
literal|"KEYPAD_0"
block|,
literal|"KEYPAD_-"
block|,
literal|"B"
block|,
literal|"V"
block|,
literal|"C"
block|,
literal|"X"
block|,
literal|"Z"
block|,
literal|""
block|,
literal|""
block|,
literal|"ESCAPE"
block|,
literal|""
block|,
literal|"BLANK_F10"
block|,
literal|""
block|,
literal|"BLANK_F11"
block|,
literal|"KEYPAD_PERIOD"
block|,
literal|"BLANK_F9"
block|,
literal|"KEYPAD_TAB"
block|,
literal|"BLANK_F12"
block|,
literal|"H"
block|,
literal|"G"
block|,
literal|"F"
block|,
literal|"D"
block|,
literal|"S"
block|,
literal|"A"
block|,
literal|""
block|,
literal|"CAPS_LOCK"
block|,
literal|"U"
block|,
literal|"Y"
block|,
literal|"T"
block|,
literal|"R"
block|,
literal|"E"
block|,
literal|"W"
block|,
literal|"Q"
block|,
literal|"TAB"
block|,
literal|"7"
block|,
literal|"6"
block|,
literal|"5"
block|,
literal|"4"
block|,
literal|"3"
block|,
literal|"2"
block|,
literal|"1"
block|,
literal|"`"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"MENU"
block|,
literal|"F4"
block|,
literal|"F3"
block|,
literal|"F2"
block|,
literal|"F1"
block|,
literal|""
block|,
literal|"STOP"
block|,
literal|"ENTER"
block|,
literal|"SYSTEM"
block|,
literal|"F5"
block|,
literal|"F6"
block|,
literal|"F7"
block|,
literal|"F8"
block|,
literal|""
block|,
literal|"CLEAR_LINE"
block|,
literal|"CLEAR_DISPLAY"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"0"
block|,
literal|"-"
block|,
literal|"="
block|,
literal|"BACKSPACE"
block|,
literal|"INSERT_LINE"
block|,
literal|"DELETE_LINE"
block|,
literal|"I"
block|,
literal|"O"
block|,
literal|"P"
block|,
literal|"["
block|,
literal|"]"
block|,
literal|"\\"
block|,
literal|"INSERT_CHAR"
block|,
literal|"DELETE_CHAR"
block|,
literal|"J"
block|,
literal|"K"
block|,
literal|"L"
block|,
literal|";"
block|,
literal|"'"
block|,
literal|"RETURN"
block|,
literal|"HOME_CURSOR"
block|,
literal|"PREV"
block|,
literal|"M"
block|,
literal|","
block|,
literal|"."
block|,
literal|"/"
block|,
literal|""
block|,
literal|"SELECT"
block|,
literal|""
block|,
literal|"NEXT"
block|,
literal|"N"
block|,
literal|"SPACE_BAR"
block|,
literal|"."
block|,
literal|""
block|,
literal|"CURSOR_LEFT"
block|,
literal|"CURSOR_DOWN"
block|,
literal|"CURSOR_UP"
block|,
literal|"CURSOR_RIGHT"
block|,
endif|#
directive|endif
comment|/* __hpux */
ifdef|#
directive|ifdef
name|__apollo
literal|""
block|,
literal|"SELECT"
block|,
literal|"DREMOVE"
block|,
literal|"APCHARDEL"
block|,
literal|"F10"
block|,
literal|"F1"
block|,
literal|"F2"
block|,
literal|"F3"
block|,
literal|"F4"
block|,
literal|"F5"
block|,
literal|"F6"
block|,
literal|"F7"
block|,
literal|"F8"
block|,
literal|"F9"
block|,
literal|"REDO"
block|,
literal|"APREAD"
block|,
literal|"APEDIT"
block|,
literal|"APEXIT"
block|,
literal|"PAUSE"
block|,
literal|"APCOPY"
block|,
literal|"APPASTE"
block|,
literal|"APGROW"
block|,
literal|""
block|,
literal|"ESCAPE"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"0"
block|,
literal|"MINUS"
block|,
literal|"EQUAL"
block|,
literal|"GRAVE"
block|,
literal|"BACKSPACE"
block|,
literal|""
block|,
literal|"APLEFTBAR"
block|,
literal|"APCMD"
block|,
literal|"APRIGHTBAR"
block|,
literal|""
block|,
literal|""
block|,
literal|"TAB"
block|,
literal|"Q"
block|,
literal|"W"
block|,
literal|"E"
block|,
literal|"R"
block|,
literal|"T"
block|,
literal|"Y"
block|,
literal|"U"
block|,
literal|"I"
block|,
literal|"O"
block|,
literal|"P"
block|,
literal|"BRACKETLEFT"
block|,
literal|"BRACKETRIGHT"
block|,
literal|""
block|,
literal|"DELETE"
block|,
literal|""
block|,
literal|"KP_7"
block|,
literal|"KP_8"
block|,
literal|"KP_9"
block|,
literal|"KP_ADD"
block|,
literal|"APLEFTBOX"
block|,
literal|"UP"
block|,
literal|"APRIGHTBOX"
block|,
literal|"CONTROL_L"
block|,
literal|""
block|,
literal|""
block|,
literal|"A"
block|,
literal|"S"
block|,
literal|"D"
block|,
literal|"F"
block|,
literal|"G"
block|,
literal|"H"
block|,
literal|"J"
block|,
literal|"K"
block|,
literal|"L"
block|,
literal|"SEMICOLON"
block|,
literal|"APOSTROPHE"
block|,
literal|""
block|,
literal|"RETURN"
block|,
literal|"BACKSLASH"
block|,
literal|""
block|,
literal|"KP_4"
block|,
literal|"KP_5"
block|,
literal|"KP_6"
block|,
literal|"KP_SUBTRACT"
block|,
literal|"LEFT"
block|,
literal|"NEXT"
block|,
literal|"RIGHT"
block|,
literal|""
block|,
literal|"APREPEAT"
block|,
literal|"SHIFT_L"
block|,
literal|""
block|,
literal|"Z"
block|,
literal|"X"
block|,
literal|"C"
block|,
literal|"V"
block|,
literal|"B"
block|,
literal|"N"
block|,
literal|"M"
block|,
literal|"COMMA"
block|,
literal|"PERIOD"
block|,
literal|"SLASH"
block|,
literal|"SHIFT_R"
block|,
literal|""
block|,
literal|"APPOP"
block|,
literal|""
block|,
literal|"KP_1"
block|,
literal|"KP_2"
block|,
literal|"KP_3"
block|,
literal|""
block|,
literal|"APUPBOX"
block|,
literal|"DOWN"
block|,
literal|"APDOWNBOX"
block|,
literal|"ALT_L"
block|,
literal|"SPACE"
block|,
literal|"ALT_R"
block|,
literal|""
block|,
literal|"KP_0"
block|,
literal|""
block|,
literal|"KP_DECIMAL"
block|,
literal|"KP_ENTER"
block|,
literal|""
block|,
literal|"CAPS_LOCK"
block|,
literal|""
block|,
endif|#
directive|endif
comment|/* __apollo */
block|}
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__hpux
argument_list|)
operator|||
name|defined
argument_list|(
name|__hp_osf
argument_list|)
operator|||
name|defined
argument_list|(
name|hp9000
argument_list|)
end_if

begin_decl_stmt
name|char
modifier|*
name|newkeyset1
index|[]
init|=
block|{
literal|"CONTROL_R"
block|,
literal|""
block|,
literal|"META_R"
block|,
literal|"META_L"
block|,
literal|"SHIFT_R"
block|,
literal|"SHIFT_L"
block|,
literal|"CONTROL_L"
block|,
literal|"BREAK"
block|,
literal|"KP_4"
block|,
literal|"KP_8"
block|,
literal|"KP_5"
block|,
literal|"KP_9"
block|,
literal|"KP_6"
block|,
literal|"KP_7"
block|,
literal|"KP_SEPARATOR"
block|,
literal|"KP_ENTER"
block|,
literal|"KP_1"
block|,
literal|"KP_DIVIDE"
block|,
literal|"KP_2"
block|,
literal|"KP_ADD"
block|,
literal|"KP_3"
block|,
literal|"KP_MULTIPLY"
block|,
literal|"KP_0"
block|,
literal|"KP_SUBTRACT"
block|,
literal|"B"
block|,
literal|"V"
block|,
literal|"C"
block|,
literal|"X"
block|,
literal|"Z"
block|,
literal|""
block|,
literal|""
block|,
literal|"ESCAPE"
block|,
literal|""
block|,
literal|"F10"
block|,
literal|""
block|,
literal|"F11"
block|,
literal|"KP_DECIMAL"
block|,
literal|"F9"
block|,
literal|"KP_TAB"
block|,
literal|"F12"
block|,
literal|"H"
block|,
literal|"G"
block|,
literal|"F"
block|,
literal|"D"
block|,
literal|"S"
block|,
literal|"A"
block|,
literal|"NOSYMBOL"
block|,
literal|"CAPS_LOCK"
block|,
literal|"U"
block|,
literal|"Y"
block|,
literal|"T"
block|,
literal|"R"
block|,
literal|"E"
block|,
literal|"W"
block|,
literal|"Q"
block|,
literal|"TAB"
block|,
literal|"7"
block|,
literal|"6"
block|,
literal|"5"
block|,
literal|"4"
block|,
literal|"3"
block|,
literal|"2"
block|,
literal|"1"
block|,
literal|"QUOTELEFT"
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|""
block|,
literal|"MENU"
block|,
literal|"F4"
block|,
literal|"F3"
block|,
literal|"F2"
block|,
literal|"F1"
block|,
literal|""
block|,
literal|"CANCEL"
block|,
literal|"EXECUTE"
block|,
literal|"SYSTEM"
block|,
literal|"F5"
block|,
literal|"F6"
block|,
literal|"F7"
block|,
literal|"F8"
block|,
literal|""
block|,
literal|"CLEARLINE"
block|,
literal|"CLEAR"
block|,
literal|"8"
block|,
literal|"9"
block|,
literal|"0"
block|,
literal|"MINUS"
block|,
literal|"EQUAL"
block|,
literal|"BACKSPACE"
block|,
literal|"INSERTLINE"
block|,
literal|"DELETELINE"
block|,
literal|"I"
block|,
literal|"O"
block|,
literal|"P"
block|,
literal|"BRACKETLEFT"
block|,
literal|"BRACKETRIGHT"
block|,
literal|"BACKSLASH"
block|,
literal|"INSERTCHAR"
block|,
literal|"DELETECHAR"
block|,
literal|"J"
block|,
literal|"K"
block|,
literal|"L"
block|,
literal|"SEMICOLON"
block|,
literal|"QUOTERIGHT"
block|,
literal|"RETURN"
block|,
literal|"HOME"
block|,
literal|"PRIOR"
block|,
literal|"M"
block|,
literal|"COMMA"
block|,
literal|"PERIOD"
block|,
literal|"SLASH"
block|,
literal|""
block|,
literal|"SELECT"
block|,
literal|""
block|,
literal|"NEXT"
block|,
literal|"N"
block|,
literal|"SPACE"
block|,
literal|""
block|,
literal|""
block|,
literal|"LEFT"
block|,
literal|"DOWN"
block|,
literal|"UP"
block|,
literal|"RIGHT"
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __hpux */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* X_HILINIT_H */
end_comment

end_unit

