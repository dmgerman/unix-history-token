begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|XHPLIB_H
end_ifndef

begin_define
define|#
directive|define
name|XHPLIB_H
end_define

begin_comment
comment|/* $Header: /host/kaukau/disk2/X11R5/R5-hp300/mit/server/ddx/hpbsd/input/X11/RCS/XHPlib.h,v 1.1 1992/09/30 03:15:29 root Exp $ */
end_comment

begin_comment
comment|/* Definitions used by Xlib and the client */
end_comment

begin_include
include|#
directive|include
file|"XHPproto.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|_NO_PROTO
end_ifndef

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|c_plusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|_NO_PROTO
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STDC__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NO_PROTO */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_XLIB_H_
end_ifndef

begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_XUTIL_H_
end_ifndef

begin_include
include|#
directive|include
file|<X11/Xutil.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|GENERAL_PROMPT
value|0
define|#
directive|define
name|PROMPT_1
value|1
define|#
directive|define
name|PROMPT_2
value|2
define|#
directive|define
name|PROMPT_3
value|3
define|#
directive|define
name|PROMPT_4
value|4
define|#
directive|define
name|PROMPT_5
value|5
define|#
directive|define
name|PROMPT_6
value|6
define|#
directive|define
name|PROMPT_7
value|7
define|#
directive|define
name|GENERAL_ACKNOWLEDGE
value|0
define|#
directive|define
name|ACKNOWLEDGE_1
value|1
define|#
directive|define
name|ACKNOWLEDGE_2
value|2
define|#
directive|define
name|ACKNOWLEDGE_3
value|3
define|#
directive|define
name|ACKNOWLEDGE_4
value|4
define|#
directive|define
name|ACKNOWLEDGE_5
value|5
define|#
directive|define
name|ACKNOWLEDGE_6
value|6
define|#
directive|define
name|ACKNOWLEDGE_7
value|7
define|#
directive|define
name|HPDeviceKeyPressreq
value|1
define|#
directive|define
name|HPDeviceKeyReleasereq
value|2
define|#
directive|define
name|HPDeviceButtonPressreq
value|3
define|#
directive|define
name|HPDeviceButtonReleasereq
value|4
define|#
directive|define
name|HPDeviceMotionNotifyreq
value|5
define|#
directive|define
name|HPDeviceFocusInreq
value|6
define|#
directive|define
name|HPDeviceFocusOutreq
value|7
define|#
directive|define
name|HPProximityInreq
value|8
define|#
directive|define
name|HPProximityOutreq
value|9
define|#
directive|define
name|HPDeviceKeymapNotifyreq
value|10
define|#
directive|define
name|HPDeviceMappingNotifyreq
value|11
specifier|extern
name|int
name|HPDeviceKeyPress
decl_stmt|;
specifier|extern
name|int
name|HPDeviceKeyRelease
decl_stmt|;
specifier|extern
name|int
name|HPDeviceButtonPress
decl_stmt|;
specifier|extern
name|int
name|HPDeviceButtonRelease
decl_stmt|;
specifier|extern
name|int
name|HPDeviceMotionNotify
decl_stmt|;
specifier|extern
name|int
name|HPDeviceFocusIn
decl_stmt|;
specifier|extern
name|int
name|HPDeviceFocusOut
decl_stmt|;
specifier|extern
name|int
name|HPProximityIn
decl_stmt|;
specifier|extern
name|int
name|HPProximityOut
decl_stmt|;
specifier|extern
name|int
name|HPDeviceKeymapNotify
decl_stmt|;
specifier|extern
name|int
name|HPDeviceMappingNotify
decl_stmt|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|PtrFuncInt
function_decl|)
parameter_list|()
function_decl|;
typedef|typedef
name|unsigned
name|long
name|XHPFilterId
typedef|;
comment|/* structure used to split events queue between drivers and client */
typedef|typedef
name|struct
name|_XHProutines
modifier|*
name|_XHPrtnptr
typedef|;
typedef|typedef
struct|struct
name|_XHProutines
block|{
name|Display
modifier|*
name|display
decl_stmt|;
name|XHPFilterId
name|id
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|Mask
name|std_filtermask
decl_stmt|;
name|Mask
name|std_clientmask
decl_stmt|;
name|Mask
name|ext_filtermask
index|[
name|MAX_LOGICAL_DEVS
index|]
decl_stmt|;
name|Mask
name|ext_clientmask
index|[
name|MAX_LOGICAL_DEVS
index|]
decl_stmt|;
name|int
function_decl|(
modifier|*
name|callback
function_decl|)
parameter_list|()
function_decl|;
name|int
name|state_info
decl_stmt|;
name|_XHPrtnptr
name|next
decl_stmt|;
block|}
name|XHProutines
typedef|;
typedef|typedef
struct|struct
block|{
name|XKeyEvent
name|ev
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
block|}
name|XHPDeviceKeyEvent
typedef|;
comment|/***************************************************************  *  * The location of the X pointer is reported in the coordinate  * fields of the ev member.  The location of the device  * is determined from the previous DeviceMotionNotify event.  *  */
typedef|typedef
struct|struct
block|{
name|XButtonEvent
name|ev
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
block|}
name|XHPDeviceButtonEvent
typedef|;
comment|/***************************************************************  *  * The ax_num and ax_val fields contain the data reported by the  * device.  The values may be absolute or relative.  Any axis  * whose value changes will be reported.  *  */
typedef|typedef
struct|struct
block|{
name|int
name|ax_num
decl_stmt|;
name|int
name|ax_val
decl_stmt|;
block|}
name|XHPAxis_data
typedef|;
comment|/****************************************************************************  *  * Bug fix for alignment problem on s700/ s800.  *  * XHPDeviceMotionEvent embeds an XMotionEvent struct.  The XMotionEvent  * struct contains a char followed by an int.  68k CPUs add one byte of   * padding to align the int on a 16-bit boundary.  PA-RISC CPUs add three  * bytes of padding to align the int on a 32-bit boudary.  The result is   * that XMotionEvent structs are 58 bytes on 68k CPUs and 60 bytes on  * PA-RISC CPUs.    *  * The size is critical because the XHPScreen_events routine assumes that all  * HP input extension events contain a device id in bytes 60 - 63.  *  * The right way to fix this would be to define a 60-byte  * array and make it a union with the ev field, but this would break existing  * clients that reference this field.  *  * Instead we will ifdef the struct to make the padding come out right.  * A side effect of this is that on machines with 32-bit alignment, there's  * only room for 3 elements in the data array field, since the total XEvent  * size is 96 bytes.  This is probably ok, since no HP input devices report more  * than 3 axes of motion.  We will leave the s300 definition at 4 elements,  * since it was originally defined that way.  We will also put in code to  * cause a compiler error for undefined machines.  *  *  Mea culpa,   ---gms  */
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__hp9000s300
argument_list|)
operator|||
name|defined
argument_list|(
name|__apollo
argument_list|)
operator|||
name|defined
argument_list|(
name|hp300
argument_list|)
comment|/* 68k aligns to 16 bits */
name|XMotionEvent
name|ev
decl_stmt|;
name|char
name|pad
decl_stmt|;
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|XHPAxis_data
name|data
index|[
literal|4
index|]
decl_stmt|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__hp9000s800
argument_list|)
operator|||
name|defined
argument_list|(
name|__hp9000s700
argument_list|)
comment|/* 32-bit alignment */
name|XMotionEvent
name|ev
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|XHPAxis_data
name|data
index|[
literal|3
index|]
decl_stmt|;
name|unsigned
name|char
name|axes_count
decl_stmt|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__hp_osf
argument_list|)
operator|&&
name|defined
argument_list|(
name|__mc68000
argument_list|)
name|XMotionEvent
name|ev
decl_stmt|;
name|char
name|pad
decl_stmt|;
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|XHPAxis_data
name|data
index|[
literal|4
index|]
decl_stmt|;
else|#
directive|else
if|#
directive|if
name|defined
argument_list|(
name|__hp_osf
argument_list|)
operator|&&
name|defined
argument_list|(
name|__pa_risc
argument_list|)
name|XMotionEvent
name|ev
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|XHPAxis_data
name|data
index|[
literal|3
index|]
decl_stmt|;
name|unsigned
name|char
name|axes_count
decl_stmt|;
else|#
directive|else
name|This
name|is
name|a
name|bogus
name|line
name|to
name|force
name|a
name|compiler
name|error
name|on
name|undefined
name|machines
operator|-
name|gms
operator|.
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
endif|#
directive|endif
expr|}
name|XHPDeviceMotionEvent
expr_stmt|;
typedef|typedef
struct|struct
block|{
name|XFocusChangeEvent
name|ev
decl_stmt|;
name|char
name|pad
index|[
literal|32
index|]
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|char
name|pad1
index|[
literal|2
index|]
decl_stmt|;
block|}
name|XHPDeviceFocusChangeEvent
typedef|;
typedef|typedef
struct|struct
block|{
name|XMappingEvent
name|ev
decl_stmt|;
name|char
name|pad
index|[
literal|28
index|]
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|char
name|pad1
index|[
literal|2
index|]
decl_stmt|;
block|}
name|XHPDeviceMappingEvent
typedef|;
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* ProximityIn or ProximityOut */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* window of event */
name|Window
name|root
decl_stmt|;
comment|/* root window that the event occured on */
name|Window
name|subwindow
decl_stmt|;
comment|/* child window */
name|Time
name|time
decl_stmt|;
comment|/* milliseconds */
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/* pointer x, y coordinates in event window */
name|int
name|x_root
decl_stmt|,
name|y_root
decl_stmt|;
comment|/* coordinates relative to root */
name|unsigned
name|int
name|state
decl_stmt|;
comment|/* key or button mask */
name|Bool
name|same_screen
decl_stmt|;
comment|/* same screen flag */
name|char
name|pad
index|[
literal|4
index|]
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|char
name|pad1
index|[
literal|2
index|]
decl_stmt|;
block|}
name|XHPProximityNotifyEvent
typedef|;
typedef|typedef
name|XHPProximityNotifyEvent
name|XHPProximityInEvent
decl_stmt|;
typedef|typedef
name|XHPProximityNotifyEvent
name|XHPProximityOutEvent
decl_stmt|;
comment|/* generated on EnterWindow and FocusIn  when KeyMapState selected */
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
name|char
name|key_vector
index|[
literal|32
index|]
decl_stmt|;
name|char
name|pad
index|[
literal|8
index|]
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
block|}
name|XHPDeviceKeymapEvent
typedef|;
typedef|typedef
struct|struct
block|{
name|char
name|pad
index|[
literal|60
index|]
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
block|}
name|XHP_AnyEvent
typedef|;
typedef|typedef
struct|struct
block|{
name|unsigned
name|int
name|resolution
decl_stmt|;
name|unsigned
name|short
name|min_val
decl_stmt|;
name|unsigned
name|short
name|max_val
decl_stmt|;
block|}
name|XHPaxis_info
typedef|;
typedef|typedef
struct|struct
block|{
name|XID
name|x_id
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|XHPaxis_info
modifier|*
name|axes
decl_stmt|;
name|unsigned
name|short
name|type
decl_stmt|;
name|unsigned
name|short
name|min_keycode
decl_stmt|;
name|unsigned
name|short
name|max_keycode
decl_stmt|;
name|unsigned
name|char
name|hil_id
decl_stmt|;
name|unsigned
name|char
name|mode
decl_stmt|;
name|unsigned
name|char
name|num_axes
decl_stmt|;
name|unsigned
name|char
name|num_buttons
decl_stmt|;
name|unsigned
name|char
name|num_keys
decl_stmt|;
name|unsigned
name|char
name|io_byte
decl_stmt|;
name|unsigned
name|short
name|detailed_id
decl_stmt|;
name|unsigned
name|char
name|pad
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XHPDeviceList
typedef|;
typedef|typedef
struct|struct
block|{
name|int
name|key_click_percent
decl_stmt|;
name|int
name|bell_percent
decl_stmt|;
name|int
name|bell_pitch
decl_stmt|;
name|int
name|bell_duration
decl_stmt|;
name|int
name|led
decl_stmt|;
name|int
name|led_mode
decl_stmt|;
name|int
name|key
decl_stmt|;
name|int
name|auto_repeat_mode
decl_stmt|;
comment|/* On, Off, Default */
name|int
name|accelNumerator
decl_stmt|;
name|int
name|accelDenominator
decl_stmt|;
name|int
name|threshold
decl_stmt|;
block|}
name|XHPDeviceControl
typedef|;
comment|/* Data structure for XHPGetDeviceControl */
typedef|typedef
struct|struct
block|{
name|int
name|key_click_percent
decl_stmt|;
name|int
name|bell_percent
decl_stmt|;
name|unsigned
name|int
name|bell_pitch
decl_stmt|,
name|bell_duration
decl_stmt|;
name|unsigned
name|long
name|led_mask
decl_stmt|;
name|int
name|global_auto_repeat
decl_stmt|;
name|int
name|accelNumerator
decl_stmt|;
name|int
name|accelDenominator
decl_stmt|;
name|int
name|threshold
decl_stmt|;
name|char
name|auto_repeats
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XHPDeviceState
typedef|;
typedef|typedef
struct|struct
block|{
name|Time
name|time
decl_stmt|;
name|unsigned
name|short
modifier|*
name|data
decl_stmt|;
block|}
name|XHPTimeCoord
typedef|;
comment|/* This structure is used to pass Nlio ioctl style commands  * to the Nlio server */
define|#
directive|define
name|XNHPNlioctl
value|"HPNlioctl"
typedef|typedef
struct|struct
block|{
name|int
name|cmd
decl_stmt|;
name|XPointer
name|arg
decl_stmt|;
name|int
name|ret
decl_stmt|;
block|}
name|XhpNlioCmd
typedef|;
comment|/* These are the structures used for the XHPNlioctl call */
typedef|typedef
struct|struct
block|{
name|int
name|flags
decl_stmt|;
name|KeySym
name|invoke_nlio
decl_stmt|;
name|KeySym
name|terminate_nlio
decl_stmt|;
name|KeySym
name|set_alternate
decl_stmt|;
name|KeySym
name|unset_alternate
decl_stmt|;
block|}
name|K16_state
typedef|;
comment|/* These are the commands for the XHPNlioctl call */
include|#
directive|include
file|<sys/ioctl.h>
define|#
directive|define
name|K16_FOCUS_IN
value|_IO('X', 100)
define|#
directive|define
name|K16_FOCUS_OUT
value|_IO('X', 101)
define|#
directive|define
name|K16_EXEC_PROC
value|1
define|#
directive|define
name|K16_KILL_PROC
value|2
define|#
directive|define
name|K16_GET_STATEKEYS
value|3
define|#
directive|define
name|K16_SET_STATEKEYS
value|4
define|#
directive|define
name|K16_ALT_ON
value|5
define|#
directive|define
name|K16_NLIO_ON
value|6
define|#
directive|define
name|K16_IS_PROC
value|7
define|#
directive|define
name|K16_GET_ENCODING
value|8
define|#
directive|define
name|K16_SET_ENCODING
value|9
define|#
directive|define
name|K16_NLIOSTATE
value|1
define|#
directive|define
name|K16_ALTSTATE
value|2
comment|/* The following block of defines are required for XHPSetKeyboardMapping */
define|#
directive|define
name|DEF_FILENAME
value|"XHPKeymaps"
ifndef|#
directive|ifndef
name|DEF_DIRECTORY
define|#
directive|define
name|DEF_DIRECTORY
value|"/usr/lib/X11/"
endif|#
directive|endif
define|#
directive|define
name|VERIFY_MAGIC
value|"HPKeyMap Rev 1.0"
define|#
directive|define
name|MAGIC_SIZE
value|20
struct|struct
name|XHP_keymap_header
block|{
name|int
name|kbd
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|int
name|size
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|HPK_KEYDEVICE_NAME_TABLE_ID
value|19998
define|#
directive|define
name|HPK_MODMAP_TABLE_ID
value|19999
define|#
directive|define
name|HPK_FIRST_RESERVED_ID
value|20000
typedef|typedef
struct|struct
block|{
name|int
name|keydevice_id
decl_stmt|,
name|min_keycode
decl_stmt|,
name|max_keycode
decl_stmt|,
name|columns
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|,
modifier|*
name|modmap_name
decl_stmt|;
block|}
name|HPKKeyDeviceInfo
typedef|;
define|#
directive|define
name|MODMAP_SIZE
value|256
comment|/* aka MAP_LENGTH in server/include/input.h */
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|modmap_name
decl_stmt|;
name|CARD8
name|modmap
index|[
name|MODMAP_SIZE
index|]
decl_stmt|;
block|}
name|HPKModMap
typedef|;
comment|/* Error values returned by XHPSetKeyboardMapping                            */
define|#
directive|define
name|XHPKB_NOKEYFILE
value|1
define|#
directive|define
name|XHPKB_BADMAGIC
value|2
define|#
directive|define
name|XHPKB_BADKBID
value|3
define|#
directive|define
name|XHPKB_NONHPINPUTDEV
value|4
define|#
directive|define
name|XHPKB_NOMEM
value|5
comment|/* In the following list, several of the constants have duplicate names.    The duplicate names were added to provide a consistent name for the    tokens (i.e. each name represents a language). The original version    mixed country names and language names.                                    */
define|#
directive|define
name|KB_US_English
value|0
comment|/* For use with HP46021A */
define|#
directive|define
name|KB_Latin_Spanish
value|1
comment|/* For use with HP46021AM */
define|#
directive|define
name|KB_Katakana
value|2
comment|/* For use with HP46021AJ */
define|#
directive|define
name|KB_Danish
value|3
comment|/* For use with HP46021AY */
define|#
directive|define
name|KB_French
value|4
comment|/* For use with HP46021AF */
define|#
directive|define
name|KB_Norwegian
value|5
comment|/* For use with HP46021AN */
define|#
directive|define
name|KB_Swiss_German
value|6
comment|/* For use with HP46020AP 				  : HIL-ID(lower 5 bits)=19h */
define|#
directive|define
name|KB_Canada_French
value|7
comment|/* For use with HP46021AC */
define|#
directive|define
name|KB_UK_English
value|8
comment|/* For use with HP46021AU */
define|#
directive|define
name|KB_Finnish
value|9
comment|/* For use with HP46021AX */
define|#
directive|define
name|KB_Belgian
value|10
comment|/* For use with HP46021AW */
define|#
directive|define
name|KB_Swiss_German2
value|11
comment|/* For use with HP46021AP */
define|#
directive|define
name|KB_Euro_Spanish
value|12
comment|/* For use with HP46021AE */
define|#
directive|define
name|KB_Swiss_French2
value|13
comment|/* For use with HP46021AQ */
define|#
directive|define
name|KB_T_Chinese
value|14
comment|/* Trad. Chinese (ROC): For HP46021W#ZAA */
define|#
directive|define
name|KB_S_Chinese
value|15
comment|/* Simp. Chinese (PROC): For HP40621W#ZAC */
define|#
directive|define
name|KB_German
value|16
comment|/* For use with HP46021AD */
define|#
directive|define
name|KB_Swedish
value|17
comment|/* For use with HP46021AS */
define|#
directive|define
name|KB_Dutch
value|18
comment|/* For use with HP46021AH */
define|#
directive|define
name|KB_Korean
value|19
comment|/* Korean: For HP40621W#ZAB */
define|#
directive|define
name|KB_Italian
value|20
comment|/* For use with HP46021AZ */
define|#
directive|define
name|KB_Canada_English
value|21
comment|/* For use with HP46021AL */
define|#
directive|define
name|KB_Swiss_French
value|22
comment|/* For use with HP46020AQ 				  : HIL-ID(lower 5 bits)=03h */
define|#
directive|define
name|KB_Japanese
value|23
comment|/* For use with HP46021W#ZAL */
comment|/* ITF ethereal keyboards */
define|#
directive|define
name|KB_Hebrew
value|100
comment|/* Hebrew Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Cyrillic
value|101
comment|/* Cyrillic Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Czech
value|102
comment|/* Czech Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Hungarian
value|103
comment|/* Hungarian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_SerboCroatian
value|104
comment|/* SerboCroatian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Polish
value|105
comment|/* Polish Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Romanian
value|106
comment|/* Romanian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Rumanian
value|106
comment|/* alternate spelling */
define|#
directive|define
name|KB_Turkish
value|107
comment|/* Turkey Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Greek
value|108
comment|/* Greek Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_Arabic
value|109
comment|/* Greek Keymap - NO KEYBOARD */
comment|/* PS2 ethereal keyboards (which may never exist) */
define|#
directive|define
name|KB_PS2_Hebrew
value|150
comment|/* Hebrew Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Cyrillic
value|151
comment|/* Cyrillic Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Czech
value|152
comment|/* Czech Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Hungarian
value|153
comment|/* Hungarian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_SerboCroatian
value|154
comment|/* SerboCroatian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Polish
value|155
comment|/* Polish Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Romanian
value|156
comment|/* Romanian Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Rumanian
value|156
comment|/* alternate spelling */
define|#
directive|define
name|KB_PS2_Turkish
value|157
comment|/* Turkey Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Greek
value|158
comment|/* Greek Keymap - NO KEYBOARD */
define|#
directive|define
name|KB_PS2_Arabic
value|159
comment|/* Greek Keymap - NO KEYBOARD */
comment|/* ******************** HP hil PS2 keyboards *************** */
define|#
directive|define
name|KB_PS2_US_English
value|60
define|#
directive|define
name|KB_PS2_Latin_Spanish
value|61
define|#
directive|define
name|KB_PS2_Katakana
value|62
define|#
directive|define
name|KB_PS2_Danish
value|63
define|#
directive|define
name|KB_PS2_French
value|64
define|#
directive|define
name|KB_PS2_Norwegian
value|65
define|#
directive|define
name|KB_PS2_Swiss_German
value|66
define|#
directive|define
name|KB_PS2_Canada_French
value|67
define|#
directive|define
name|KB_PS2_UK_English
value|68
define|#
directive|define
name|KB_PS2_Finnish
value|69
define|#
directive|define
name|KB_PS2_Belgian
value|70
define|#
directive|define
name|KB_PS2_Swiss_German2
value|71
define|#
directive|define
name|KB_PS2_Euro_Spanish
value|72
define|#
directive|define
name|KB_PS2_Swiss_French2
value|73
define|#
directive|define
name|KB_PS2_T_Chinese
value|74
define|#
directive|define
name|KB_PS2_S_Chinese
value|75
define|#
directive|define
name|KB_PS2_German
value|76
define|#
directive|define
name|KB_PS2_Swedish
value|77
define|#
directive|define
name|KB_PS2_Dutch
value|78
define|#
directive|define
name|KB_PS2_Korean
value|79
define|#
directive|define
name|KB_PS2_Italian
value|80
define|#
directive|define
name|KB_PS2_Canada_English
value|84
define|#
directive|define
name|KB_PS2_Swiss_French
value|88
define|#
directive|define
name|KB_PS2_Japanese
value|89
define|#
directive|define
name|KB_NULL
value|201
comment|/* Device that needs a null keymap, modmap */
define|#
directive|define
name|KB_BUTTON_BOX
value|202
comment|/* HP button box(es) */
define|#
directive|define
name|KB_BARCODE_WAND
value|203
comment|/* HP barcode reader */
define|#
directive|define
name|KB_HPUNSUPP
value|-1
comment|/* For unsupported HP keyboards */
define|#
directive|define
name|KB_NONHP
value|-2
comment|/* For non-HP keyboards (for internal use) */
typedef|typedef
name|int
name|KEYBOARD_ID
decl_stmt|;
comment|/* Function definitions for clients. */
name|Status
name|XHPSetKeyboardMapping
parameter_list|()
function_decl|;
name|KEYBOARD_ID
name|XHPGetKeyboardID
parameter_list|()
function_decl|;
comment|/* End of entries required for XHPSetKeyboardMapping. */
typedef|typedef
struct|struct
block|{
name|unsigned
name|char
modifier|*
name|iso7to8
decl_stmt|;
name|unsigned
name|char
modifier|*
name|iso8to7
decl_stmt|;
name|char
modifier|*
modifier|*
name|mute8to7
decl_stmt|;
name|unsigned
name|int
name|mutekey
decl_stmt|;
block|}
name|_XHP_transptrs
typedef|;
define|#
directive|define
name|_XHP_ISO7To8
parameter_list|(
name|status
parameter_list|,
name|index
parameter_list|)
define|\
value|((_XHP_transptrs *) ((status)->compose_ptr)) -> iso7to8 [index]
define|#
directive|define
name|_XHP_ISO8To7
parameter_list|(
name|status
parameter_list|,
name|index
parameter_list|)
define|\
value|((_XHP_transptrs *) ((status)->compose_ptr)) -> iso8to7 [index]
define|#
directive|define
name|_XHP_MUTE8To7
parameter_list|(
name|status
parameter_list|,
name|index
parameter_list|)
define|\
value|((_XHP_transptrs *) ((status)->compose_ptr)) -> mute8to7[index-128]
define|#
directive|define
name|XHPInputInit
parameter_list|(
name|dpy
parameter_list|,
name|status
parameter_list|)
value|XHPNlioctl(dpy,status,K16_EXEC_PROC)
define|#
directive|define
name|XHPSetKbdMapInit
parameter_list|(
name|dpy
parameter_list|,
name|kbd
parameter_list|,
name|frc
parameter_list|,
name|status
parameter_list|)
define|\
value|{ \ 	XHPNlioctl(dpy,status,K16_KILL_PROC); \ 	XHPSetKeyboardMapping(dpy,kbd,frc); \ 	XHPNlioctl(dpy,status,K16_EXEC_PROC); \     }
comment|/* These are the tags in the compose structure for the different convert  * routines  */
define|#
directive|define
name|_XHP_INP_NLIO
value|0x81000000
define|#
directive|define
name|_XHP_INP_ROM8
value|0x82000000
define|#
directive|define
name|_XHP_INP_7SUB
value|0x84000000
comment|/* Function definitions for client programs */
name|PtrFuncInt
name|XHPSetErrorHandler
parameter_list|()
function_decl|;
name|XFontStruct
modifier|*
name|XHPGet16bitMixedFontStruct
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|_NO_PROTO
specifier|extern
name|PtrFuncInt
name|XHPGetEurasianCvt
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XGetHpKeyboardId
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPAcknowledge
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPDeviceAutoRepeatOff
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPDeviceAutoRepeatOn
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPChangeDeviceControl
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPChangeDeviceKeyMapping
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPDisableReset
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPDisableReset
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPFreeDeviceList
parameter_list|()
function_decl|;
specifier|extern
name|XHPTimeCoord
modifier|*
name|XHPGetDeviceMotionEvents
parameter_list|()
function_decl|;
specifier|extern
name|KeySym
modifier|*
name|XHPGetDeviceKeyMapping
parameter_list|()
function_decl|;
specifier|extern
name|XModifierKeymap
modifier|*
name|XHPGetDeviceModifierMapping
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGetServerMode
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGrabDeviceButton
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGrabDeviceKey
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGrabReset
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGrabDevice
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGetCurrentDeviceMask
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGetExtEventMask
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGetDeviceFocus
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPGetDeviceControl
parameter_list|()
function_decl|;
specifier|extern
name|XHPDeviceList
modifier|*
name|XHPListInputDevices
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPPrompt
parameter_list|()
function_decl|;
specifier|extern
name|XHPFilterId
name|XHPRegisterEventFilter
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPSetInputDevice
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPSelectExtensionEvent
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPUngrabDevice
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPUngrabDeviceButton
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPUngrabDeviceKey
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPSetDeviceFocus
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPSetDeviceModifierMapping
parameter_list|()
function_decl|;
specifier|extern
name|Cursor
name|XHPGetWindowCursor
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPConvertLookup
parameter_list|()
function_decl|;
specifier|extern
name|int
name|input_isolatin1
parameter_list|()
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetKeyboardID
parameter_list|()
function_decl|;
specifier|extern
name|void
name|XHPUpdateKIDList
parameter_list|()
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetCvtLang
parameter_list|()
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetHILandCvt
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_XHPInitKbdState
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_XHP_alt_on
parameter_list|()
function_decl|;
specifier|extern
name|void
name|_XHP_GetAltKeys
parameter_list|()
function_decl|;
specifier|extern
name|void
name|_XHP_SetAltKeys
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_XHPIgnoreLang
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPInputRoman8
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPInputLatin1
parameter_list|()
function_decl|;
specifier|extern
name|int
name|XHPInputISO8859_8
parameter_list|()
function_decl|;
else|#
directive|else
specifier|extern
name|PtrFuncInt
name|XHPGetEurasianCvt
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XGetHpKeyboardId
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|unsigned
name|char
modifier|*
name|kbd_id
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPAcknowledge
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|int
name|ack
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPDeviceAutoRepeatOff
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPDeviceAutoRepeatOn
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|int
name|rate
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPChangeDeviceControl
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|unsigned
name|long
name|mask
parameter_list|,
name|XHPDeviceControl
modifier|*
name|vlist
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPChangeDeviceKeyMapping
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|int
name|first
parameter_list|,
name|int
name|syms_per_code
parameter_list|,
name|KeySym
modifier|*
name|keysyms
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPDisableReset
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPDisableReset
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPFreeDeviceList
parameter_list|(
name|XHPDeviceList
modifier|*
name|list
parameter_list|)
function_decl|;
specifier|extern
name|XHPTimeCoord
modifier|*
name|XHPGetDeviceMotionEvents
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|Window
name|window
parameter_list|,
name|Time
name|start
parameter_list|,
name|Time
name|stop
parameter_list|,
name|int
modifier|*
name|nEvents
parameter_list|)
function_decl|;
specifier|extern
name|KeySym
modifier|*
name|XHPGetDeviceKeyMapping
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|KeyCode
name|first
parameter_list|,
name|int
name|keycount
parameter_list|,
name|int
modifier|*
name|syms_per_code
parameter_list|)
function_decl|;
specifier|extern
name|XModifierKeymap
modifier|*
name|XHPGetDeviceModifierMapping
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGetServerMode
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
specifier|register
name|int
name|screen
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGrabDeviceButton
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|unsigned
name|int
name|button
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|,
name|Window
name|grab_window
parameter_list|,
name|Bool
name|owner_events
parameter_list|,
name|unsigned
name|int
name|event_mask
parameter_list|,
name|int
name|pointer_mode
parameter_list|,
name|int
name|keyboard_mode
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGrabDeviceKey
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|unsigned
name|int
name|key
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|,
name|Window
name|grab_window
parameter_list|,
name|Bool
name|owner_events
parameter_list|,
name|int
name|pointer_mode
parameter_list|,
name|int
name|keyboard_mode
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGrabReset
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|Atom
modifier|*
name|type
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGrabDevice
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|id
parameter_list|,
name|Window
name|window
parameter_list|,
name|Bool
name|ownerEvents
parameter_list|,
name|int
name|pointer_mode
parameter_list|,
name|int
name|device_mode
parameter_list|,
name|Time
name|time
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGetCurrentDeviceMask
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|Window
name|w
parameter_list|,
name|XID
name|device
parameter_list|,
name|Mask
modifier|*
name|mask
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGetExtEventMask
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|long
name|evconst
parameter_list|,
name|int
modifier|*
name|type
parameter_list|,
name|Mask
modifier|*
name|mask
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGetDeviceFocus
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|Window
modifier|*
name|focus
parameter_list|,
name|int
modifier|*
name|revert_to
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPGetDeviceControl
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|XHPDeviceState
modifier|*
name|values
parameter_list|)
function_decl|;
specifier|extern
name|XHPDeviceList
modifier|*
name|XHPListInputDevices
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|int
modifier|*
name|ndevices
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPPrompt
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|int
name|prompt
parameter_list|)
function_decl|;
specifier|extern
name|XHPFilterId
name|XHPRegisterEventFilter
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|Window
name|window
parameter_list|,
name|int
name|device
parameter_list|,
name|Mask
name|mask
parameter_list|,
name|int
function_decl|(
modifier|*
name|routine
function_decl|)
parameter_list|()
parameter_list|,
name|int
name|state_info
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPSetInputDevice
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
specifier|register
name|XID
name|id
parameter_list|,
specifier|register
name|int
name|mode
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPSelectExtensionEvent
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|Window
name|w
parameter_list|,
name|XID
name|device
parameter_list|,
name|Mask
name|mask
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPUngrabDevice
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|Time
name|time
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPUngrabDeviceButton
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|unsigned
name|int
name|button
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|,
name|Window
name|grab_window
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPUngrabDeviceKey
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|device
parameter_list|,
name|unsigned
name|int
name|key
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|,
name|Window
name|grab_window
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPSetDeviceFocus
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|Window
name|focus
parameter_list|,
name|int
name|revert_to
parameter_list|,
name|Time
name|time
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPSetDeviceModifierMapping
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|XID
name|deviceid
parameter_list|,
name|XModifierKeymap
modifier|*
name|modmap
parameter_list|)
function_decl|;
specifier|extern
name|Cursor
name|XHPGetWindowCursor
parameter_list|(
specifier|register
name|Display
modifier|*
name|dpy
parameter_list|,
name|Window
name|window
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPConvertLookup
parameter_list|(
specifier|register
name|XKeyEvent
modifier|*
name|event
parameter_list|,
name|char
modifier|*
name|buffer
parameter_list|,
name|int
name|nbytes
parameter_list|,
name|KeySym
modifier|*
name|keysym
parameter_list|,
name|XComposeStatus
modifier|*
name|status
parameter_list|,
name|int
function_decl|(
modifier|*
name|convert_routine
function_decl|)
parameter_list|()
parameter_list|)
function_decl|;
specifier|extern
name|int
name|input_isolatin1
parameter_list|(
name|KeySym
name|keysym
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|char
modifier|*
name|buffer_return
parameter_list|,
name|int
name|bytes_buffer
parameter_list|,
name|XComposeStatus
modifier|*
name|status_in_out
parameter_list|)
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetKeyboardID
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|void
name|XHPUpdateKIDList
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|KEYBOARD_ID
name|kbd_id
parameter_list|)
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetCvtLang
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|KEYBOARD_ID
name|XHPGetHILandCvt
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_XHPInitKbdState
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_XHP_alt_on
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_XHP_GetAltKeys
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|K16_state
modifier|*
name|state
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_XHP_SetAltKeys
parameter_list|(
name|Display
modifier|*
name|dpy
parameter_list|,
name|K16_state
modifier|*
name|state
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_XHPIgnoreLang
parameter_list|(
name|int
name|value
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPInputRoman8
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|KeySym
modifier|*
name|keysym
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|unsigned
name|char
modifier|*
name|buffer_return
parameter_list|,
name|int
name|bytes_buffer
parameter_list|,
specifier|register
name|XComposeStatus
modifier|*
name|status_in_out
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPInputLatin1
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
specifier|register
name|KeySym
modifier|*
name|keysym
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|unsigned
name|char
modifier|*
name|buffer_return
parameter_list|,
name|int
name|bytes_buffer
parameter_list|,
specifier|register
name|XComposeStatus
modifier|*
name|status_in_out
parameter_list|)
function_decl|;
specifier|extern
name|int
name|XHPInputISO8859_8
parameter_list|(
name|Display
modifier|*
name|display
parameter_list|,
name|KeySym
modifier|*
name|keysym
parameter_list|,
name|unsigned
name|int
name|modifiers
parameter_list|,
name|char
modifier|*
name|buffer_return
parameter_list|,
name|int
name|bytes_buffer
parameter_list|,
name|XComposeStatus
modifier|*
name|status_in_out
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* _NO_PROTO */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|/* Close scope of 'extern "C"' declaration that encloses file */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XHPLIB_H */
end_comment

end_unit

