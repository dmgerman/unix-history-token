begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* C code produced by gperf version 2.5 (GNU C++ version) */
end_comment

begin_comment
comment|/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ./gplus.gperf  */
end_comment

begin_comment
comment|/* Command-line: gperf -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */
end_comment

begin_struct
struct|struct
name|resword
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|short
name|token
decl_stmt|;
name|enum
name|rid
name|rid
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|TOTAL_KEYWORDS
value|82
end_define

begin_define
define|#
directive|define
name|MIN_WORD_LENGTH
value|2
end_define

begin_define
define|#
directive|define
name|MAX_WORD_LENGTH
value|13
end_define

begin_define
define|#
directive|define
name|MIN_HASH_VALUE
value|4
end_define

begin_define
define|#
directive|define
name|MAX_HASH_VALUE
value|140
end_define

begin_comment
comment|/* maximum key range = 137, duplicates = 0 */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_function
specifier|inline
endif|#
directive|endif
specifier|static
name|unsigned
name|int
name|hash
parameter_list|(
name|str
parameter_list|,
name|len
parameter_list|)
specifier|register
name|char
modifier|*
name|str
decl_stmt|;
specifier|register
name|int
name|unsigned
name|len
decl_stmt|;
block|{
specifier|static
name|unsigned
name|char
name|asso_values
index|[]
init|=
block|{
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|0
block|,
literal|141
block|,
literal|49
block|,
literal|3
block|,
literal|28
block|,
literal|28
block|,
literal|0
block|,
literal|5
block|,
literal|11
block|,
literal|32
block|,
literal|37
block|,
literal|141
block|,
literal|2
block|,
literal|24
block|,
literal|35
block|,
literal|51
block|,
literal|0
block|,
literal|19
block|,
literal|141
block|,
literal|23
block|,
literal|0
block|,
literal|8
block|,
literal|48
block|,
literal|0
block|,
literal|36
block|,
literal|0
block|,
literal|11
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,
literal|141
block|,     }
decl_stmt|;
specifier|register
name|int
name|hval
init|=
name|len
decl_stmt|;
switch|switch
condition|(
name|hval
condition|)
block|{
default|default:
case|case
literal|7
case|:
name|hval
operator|+=
name|asso_values
index|[
name|str
index|[
literal|6
index|]
index|]
expr_stmt|;
case|case
literal|6
case|:
case|case
literal|5
case|:
case|case
literal|4
case|:
name|hval
operator|+=
name|asso_values
index|[
name|str
index|[
literal|3
index|]
index|]
expr_stmt|;
case|case
literal|3
case|:
case|case
literal|2
case|:
case|case
literal|1
case|:
name|hval
operator|+=
name|asso_values
index|[
name|str
index|[
literal|0
index|]
index|]
expr_stmt|;
block|}
return|return
name|hval
operator|+
name|asso_values
index|[
name|str
index|[
name|len
operator|-
literal|1
index|]
index|]
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_function
specifier|inline
endif|#
directive|endif
name|struct
name|resword
modifier|*
name|is_reserved_word
parameter_list|(
name|str
parameter_list|,
name|len
parameter_list|)
specifier|register
name|char
modifier|*
name|str
decl_stmt|;
specifier|register
name|unsigned
name|int
name|len
decl_stmt|;
block|{
specifier|static
name|struct
name|resword
name|wordlist
index|[]
init|=
block|{
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"else"
block|,
name|ELSE
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__asm__"
block|,
name|ASM_KEYWORD
block|,
name|NORID
block|}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__headof__"
block|,
name|HEADOF
block|,
name|NORID
block|}
block|,
block|{
literal|"sizeof"
block|,
name|SIZEOF
block|,
name|NORID
block|,}
block|,
block|{
literal|"this"
block|,
name|THIS
block|,
name|NORID
block|,}
block|,
block|{
literal|"__headof"
block|,
name|HEADOF
block|,
name|NORID
block|}
block|,
block|{
literal|"except"
block|,
name|EXCEPT
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"goto"
block|,
name|GOTO
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__const__"
block|,
name|TYPE_QUAL
block|,
name|RID_CONST
block|}
block|,
block|{
literal|"__volatile"
block|,
name|TYPE_QUAL
block|,
name|RID_VOLATILE
block|}
block|,
block|{
literal|"typeof"
block|,
name|TYPEOF
block|,
name|NORID
block|,}
block|,
block|{
literal|"__volatile__"
block|,
name|TYPE_QUAL
block|,
name|RID_VOLATILE
block|}
block|,
block|{
literal|"__typeof__"
block|,
name|TYPEOF
block|,
name|NORID
block|}
block|,
block|{
literal|"try"
block|,
name|TRY
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"__const"
block|,
name|TYPE_QUAL
block|,
name|RID_CONST
block|}
block|,
block|{
literal|"__typeof"
block|,
name|TYPEOF
block|,
name|NORID
block|}
block|,
block|{
literal|"typedef"
block|,
name|SCSPEC
block|,
name|RID_TYPEDEF
block|,}
block|,
block|{
literal|"private"
block|,
name|VISSPEC
block|,
name|RID_PRIVATE
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"raise"
block|,
name|RAISE
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"raises"
block|,
name|RAISES
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"do"
block|,
name|DO
block|,
name|NORID
block|,}
block|,
block|{
literal|"for"
block|,
name|FOR
block|,
name|NORID
block|,}
block|,
block|{
literal|"case"
block|,
name|CASE
block|,
name|NORID
block|,}
block|,
block|{
literal|"class"
block|,
name|AGGR
block|,
name|RID_CLASS
block|,}
block|,
block|{
literal|"delete"
block|,
name|DELETE
block|,
name|NORID
block|,}
block|,
block|{
literal|"__classof__"
block|,
name|CLASSOF
block|,
name|NORID
block|}
block|,
block|{
literal|"short"
block|,
name|TYPESPEC
block|,
name|RID_SHORT
block|,}
block|,
block|{
literal|"double"
block|,
name|TYPESPEC
block|,
name|RID_DOUBLE
block|,}
block|,
block|{
literal|"__classof"
block|,
name|CLASSOF
block|,
name|NORID
block|}
block|,
block|{
literal|"friend"
block|,
name|SCSPEC
block|,
name|RID_FRIEND
block|,}
block|,
block|{
literal|"__asm"
block|,
name|ASM_KEYWORD
block|,
name|NORID
block|}
block|,
block|{
literal|"const"
block|,
name|TYPE_QUAL
block|,
name|RID_CONST
block|,}
block|,
block|{
literal|"static"
block|,
name|SCSPEC
block|,
name|RID_STATIC
block|,}
block|,
block|{
literal|"template"
block|,
name|TEMPLATE
block|,
name|NORID
block|,}
block|,
block|{
literal|"if"
block|,
name|IF
block|,
name|NORID
block|,}
block|,
block|{
literal|"classof"
block|,
name|CLASSOF
block|,
name|NORID
block|,}
block|,
block|{
literal|"switch"
block|,
name|SWITCH
block|,
name|NORID
block|,}
block|,
block|{
literal|"__signed__"
block|,
name|TYPESPEC
block|,
name|RID_SIGNED
block|}
block|,
block|{
literal|"int"
block|,
name|TYPESPEC
block|,
name|RID_INT
block|,}
block|,
block|{
literal|"throw"
block|,
name|THROW
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"long"
block|,
name|TYPESPEC
block|,
name|RID_LONG
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"auto"
block|,
name|SCSPEC
block|,
name|RID_AUTO
block|,}
block|,
block|{
literal|"operator"
block|,
name|OPERATOR
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__attribute"
block|,
name|ATTRIBUTE
block|,
name|NORID
block|}
block|,
block|{
literal|"extern"
block|,
name|SCSPEC
block|,
name|RID_EXTERN
block|,}
block|,
block|{
literal|"__attribute__"
block|,
name|ATTRIBUTE
block|,
name|NORID
block|}
block|,
block|{
literal|"break"
block|,
name|BREAK
block|,
name|NORID
block|,}
block|,
block|{
literal|"void"
block|,
name|TYPESPEC
block|,
name|RID_VOID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"struct"
block|,
name|AGGR
block|,
name|RID_RECORD
block|,}
block|,
block|{
literal|"virtual"
block|,
name|SCSPEC
block|,
name|RID_VIRTUAL
block|,}
block|,
block|{
literal|"__extension__"
block|,
name|EXTENSION
block|,
name|NORID
block|}
block|,
block|{
literal|"while"
block|,
name|WHILE
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"float"
block|,
name|TYPESPEC
block|,
name|RID_FLOAT
block|,}
block|,
block|{
literal|"__wchar_t"
block|,
name|TYPESPEC
block|,
name|RID_WCHAR
comment|/* Unique to ANSI C++ */
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"headof"
block|,
name|HEADOF
block|,
name|NORID
block|,}
block|,
block|{
literal|"protected"
block|,
name|VISSPEC
block|,
name|RID_PROTECTED
block|,}
block|,
block|{
literal|"__signed"
block|,
name|TYPESPEC
block|,
name|RID_SIGNED
block|}
block|,
block|{
literal|"enum"
block|,
name|ENUM
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"all"
block|,
name|ALL
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"public"
block|,
name|VISSPEC
block|,
name|RID_PUBLIC
block|,}
block|,
block|{
literal|"char"
block|,
name|TYPESPEC
block|,
name|RID_CHAR
block|,}
block|,
block|{
literal|"reraise"
block|,
name|RERAISE
block|,
name|NORID
comment|/* Extension */
block|,}
block|,
block|{
literal|"inline"
block|,
name|SCSPEC
block|,
name|RID_INLINE
block|,}
block|,
block|{
literal|"volatile"
block|,
name|TYPE_QUAL
block|,
name|RID_VOLATILE
block|,}
block|,
block|{
literal|"__label__"
block|,
name|LABEL
block|,
name|NORID
block|}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"signed"
block|,
name|TYPESPEC
block|,
name|RID_SIGNED
block|,}
block|,
block|{
literal|"__alignof__"
block|,
name|ALIGNOF
block|,
name|NORID
block|}
block|,
block|{
literal|"asm"
block|,
name|ASM_KEYWORD
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__alignof"
block|,
name|ALIGNOF
block|,
name|NORID
block|}
block|,
block|{
literal|"new"
block|,
name|NEW
block|,
name|NORID
block|,}
block|,
block|{
literal|"register"
block|,
name|SCSPEC
block|,
name|RID_REGISTER
block|,}
block|,
block|{
literal|"continue"
block|,
name|CONTINUE
block|,
name|NORID
block|,}
block|,
block|{
literal|"catch"
block|,
name|CATCH
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"exception"
block|,
name|AGGR
block|,
name|RID_EXCEPTION
comment|/* Extension */
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"default"
block|,
name|DEFAULT
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"union"
block|,
name|AGGR
block|,
name|RID_UNION
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"overload"
block|,
name|OVERLOAD
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__inline"
block|,
name|SCSPEC
block|,
name|RID_INLINE
block|}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"__inline__"
block|,
name|SCSPEC
block|,
name|RID_INLINE
block|}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"unsigned"
block|,
name|TYPESPEC
block|,
name|RID_UNSIGNED
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"return"
block|,
name|RETURN
block|,
name|NORID
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|""
block|,}
block|,
block|{
literal|"dynamic"
block|,
name|DYNAMIC
block|,
name|NORID
block|,}
block|,     }
decl_stmt|;
if|if
condition|(
name|len
operator|<=
name|MAX_WORD_LENGTH
operator|&&
name|len
operator|>=
name|MIN_WORD_LENGTH
condition|)
block|{
specifier|register
name|int
name|key
init|=
name|hash
argument_list|(
name|str
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|<=
name|MAX_HASH_VALUE
operator|&&
name|key
operator|>=
literal|0
condition|)
block|{
specifier|register
name|char
modifier|*
name|s
init|=
name|wordlist
index|[
name|key
index|]
operator|.
name|name
decl_stmt|;
if|if
condition|(
operator|*
name|s
operator|==
operator|*
name|str
operator|&&
operator|!
name|strcmp
argument_list|(
name|str
operator|+
literal|1
argument_list|,
name|s
operator|+
literal|1
argument_list|)
condition|)
return|return
operator|&
name|wordlist
index|[
name|key
index|]
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function

end_unit

