begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1993  *	The Regents of the University of California.  All rights reserved.  *  * This code is derived from software contributed to Berkeley by  * Peter McIlroy.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *	This product includes software developed by the University of  *	California, Berkeley and its contributors.  * 4. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  *	@(#)extern.h	8.1 (Berkeley) 6/6/93  */
end_comment

begin_decl_stmt
name|void
name|append
name|__P
argument_list|(
operator|(
name|u_char
operator|*
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|FILE
operator|*
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|concat
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|length_t
name|enterkey
name|__P
argument_list|(
operator|(
expr|struct
name|recheader
operator|*
operator|,
name|DBT
operator|*
operator|,
name|int
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fixit
name|__P
argument_list|(
operator|(
name|int
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fldreset
name|__P
argument_list|(
operator|(
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|FILE
modifier|*
name|ftmp
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fmerge
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
name|int
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
name|FILE
operator|*
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|fsort
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
name|FILE
operator|*
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|geteasy
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
expr|struct
name|recheader
operator|*
operator|,
name|u_char
operator|*
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|getnext
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
expr|struct
name|recheader
operator|*
operator|,
name|u_char
operator|*
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|makekey
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
expr|struct
name|recheader
operator|*
operator|,
name|u_char
operator|*
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|makeline
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
expr|struct
name|recheader
operator|*
operator|,
name|u_char
operator|*
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|merge
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|int
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
name|FILE
operator|*
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|num_init
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|onepass
name|__P
argument_list|(
operator|(
name|u_char
operator|*
operator|*
operator|,
name|int
operator|,
name|long
operator|,
name|long
operator|*
operator|,
name|u_char
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|optval
name|__P
argument_list|(
operator|(
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|order
name|__P
argument_list|(
operator|(
expr|union
name|f_handle
operator|,
name|int
argument_list|(
operator|*
argument_list|)
argument_list|()
operator|,
expr|struct
name|field
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putline
name|__P
argument_list|(
operator|(
expr|struct
name|recheader
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putrec
name|__P
argument_list|(
operator|(
expr|struct
name|recheader
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rd_append
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|union
name|f_handle
operator|,
name|int
operator|,
name|FILE
operator|*
operator|,
name|u_char
operator|*
operator|,
name|u_char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|seq
name|__P
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|DBT
operator|*
operator|,
name|DBT
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|setfield
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|,
expr|struct
name|field
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|settables
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

