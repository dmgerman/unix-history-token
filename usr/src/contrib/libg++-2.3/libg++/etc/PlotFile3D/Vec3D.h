begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Header file for Vec3D class -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1990 Free Software Foundation     written by J. Thomas Ngo, Harvard University  This file is part of the GNU C++ Library.  The GNU C++ Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU General Public License for full details.  Everyone is granted permission to copy, modify and redistribute The GNU C++ Library, but only under the conditions described in the GNU General Public License.  A copy of this license is supposed to have been given to you along with The GNU C++ Library so you can know your rights and responsibilities.  It should be in a file named COPYING. Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Vec3D_h
end_ifndef

begin_define
define|#
directive|define
name|_Vec3D_h
value|1
end_define

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_comment
comment|//===========================================================================
end_comment

begin_comment
comment|// This class is used by PlotFile3D
end_comment

begin_comment
comment|//===========================================================================
end_comment

begin_decl_stmt
name|class
name|Vec3D
block|{
name|protected
label|:
name|double
name|n
index|[
literal|3
index|]
decl_stmt|;
name|public
label|:
comment|// Constructors and destructor
name|Vec3D
argument_list|()
expr_stmt|;
comment|// initialize to (0,0,0)
name|Vec3D
argument_list|(
argument|const double x
argument_list|,
argument|const double y
argument_list|,
argument|const double z
argument_list|)
empty_stmt|;
name|Vec3D
argument_list|(
specifier|const
name|Vec3D
operator|&
name|that
argument_list|)
expr_stmt|;
operator|~
name|Vec3D
argument_list|()
expr_stmt|;
comment|// Assignment operators
name|Vec3D
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
decl_stmt|;
name|Vec3D
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
expr_stmt|;
name|Vec3D
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
expr_stmt|;
name|Vec3D
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|double
name|that
operator|)
expr_stmt|;
name|Vec3D
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|double
name|that
operator|)
expr_stmt|;
comment|// You can read, but not set coordinates individually:
name|double
name|operator
index|[]
argument_list|(
specifier|const
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
comment|// Vector notation
name|double
name|x
argument_list|()
specifier|const
expr_stmt|;
comment|// Point notation
name|double
name|y
argument_list|()
specifier|const
expr_stmt|;
name|double
name|z
argument_list|()
specifier|const
expr_stmt|;
comment|// Error handling
specifier|volatile
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// associated operators defined inline below
end_comment

begin_function_decl
name|double
name|mod
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// sqrt of sum of squares
end_comment

begin_expr_stmt
name|Vec3D
name|operator
operator|-
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Vec3D
name|operator
operator|+
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Vec3D
name|operator
operator|-
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Vec3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|double
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// scale
end_comment

begin_function_decl
name|double
name|operator
modifier|*
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|Vec3D
modifier|&
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// dot
end_comment

begin_function_decl
name|Vec3D
name|operator
modifier|^
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|Vec3D
modifier|&
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// cross prod
end_comment

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Error handling
end_comment

begin_expr_stmt
specifier|inline
specifier|volatile
name|void
name|Vec3D
operator|::
name|error
argument_list|(
argument|const char* s
argument_list|)
specifier|const
block|{
call|(
modifier|*
name|lib_error_handler
call|)
argument_list|(
literal|"Vec3D"
argument_list|,
name|s
argument_list|)
block|; }
specifier|inline
name|Vec3D
operator|::
name|Vec3D
argument_list|()
block|{
name|n
index|[
literal|0
index|]
operator|=
name|n
index|[
literal|1
index|]
operator|=
name|n
index|[
literal|2
index|]
operator|=
literal|0
block|;  }
specifier|inline
name|Vec3D
operator|::
name|Vec3D
argument_list|(
argument|const double x
argument_list|,
argument|const double y
argument_list|,
argument|const double z
argument_list|)
block|{
name|n
index|[
literal|0
index|]
operator|=
name|x
block|;
name|n
index|[
literal|1
index|]
operator|=
name|y
block|;
name|n
index|[
literal|2
index|]
operator|=
name|z
block|;  }
specifier|inline
name|Vec3D
operator|::
name|Vec3D
argument_list|(
argument|const Vec3D& that
argument_list|)
block|{
name|n
index|[
literal|0
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|0
index|]
block|;
name|n
index|[
literal|1
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|1
index|]
block|;
name|n
index|[
literal|2
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|2
index|]
block|;  }
specifier|inline
name|Vec3D
operator|::
operator|~
name|Vec3D
argument_list|()
block|{}
specifier|inline
name|Vec3D
operator|&
name|Vec3D
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
block|{
name|n
index|[
literal|0
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|0
index|]
block|;
name|n
index|[
literal|1
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|1
index|]
block|;
name|n
index|[
literal|2
index|]
operator|=
name|that
operator|.
name|n
index|[
literal|2
index|]
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|double
name|Vec3D
operator|::
name|operator
index|[]
operator|(
specifier|const
name|int
name|i
operator|)
specifier|const
block|{
if|if
condition|(
name|i
operator|<
literal|0
operator|||
name|i
operator|>
literal|2
condition|)
name|error
argument_list|(
literal|"index out of range"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|n
index|[
name|i
index|]
return|;
end_return

begin_expr_stmt
unit|}  inline
specifier|const
name|double
name|Vec3D
operator|::
name|x
argument_list|()
specifier|const
block|{
return|return
name|n
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|double
name|Vec3D
operator|::
name|y
argument_list|()
specifier|const
block|{
return|return
name|n
index|[
literal|1
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|double
name|Vec3D
operator|::
name|z
argument_list|()
specifier|const
block|{
return|return
name|n
index|[
literal|2
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Vec3D
name|operator
operator|-
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|)
block|{
return|return
name|Vec3D
argument_list|(
operator|-
name|a
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|a
operator|.
name|y
argument_list|()
argument_list|,
operator|-
name|a
operator|.
name|z
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|double
name|mod
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|p
parameter_list|)
block|{
return|return
name|sqrt
argument_list|(
name|sqr
argument_list|(
name|p
operator|.
name|x
argument_list|()
argument_list|)
operator|+
name|sqr
argument_list|(
name|p
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|sqr
argument_list|(
name|p
operator|.
name|z
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Vec3D
name|operator
operator|+
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
block|{
return|return
name|Vec3D
argument_list|(
name|a
operator|.
name|x
argument_list|()
operator|+
name|b
operator|.
name|x
argument_list|()
argument_list|,
name|a
operator|.
name|y
argument_list|()
operator|+
name|b
operator|.
name|y
argument_list|()
argument_list|,
name|a
operator|.
name|z
argument_list|()
operator|+
name|b
operator|.
name|z
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Vec3D
name|operator
operator|-
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
block|{
return|return
name|Vec3D
argument_list|(
name|a
operator|.
name|x
argument_list|()
operator|-
name|b
operator|.
name|x
argument_list|()
argument_list|,
name|a
operator|.
name|y
argument_list|()
operator|-
name|b
operator|.
name|y
argument_list|()
argument_list|,
name|a
operator|.
name|z
argument_list|()
operator|-
name|b
operator|.
name|z
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Vec3D
name|operator
modifier|*
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|double
name|sc
parameter_list|)
comment|// scale
block|{
return|return
name|Vec3D
argument_list|(
name|a
operator|.
name|x
argument_list|()
operator|*
name|sc
argument_list|,
name|a
operator|.
name|y
argument_list|()
operator|*
name|sc
argument_list|,
name|a
operator|.
name|z
argument_list|()
operator|*
name|sc
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|operator
modifier|*
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|Vec3D
modifier|&
name|b
parameter_list|)
comment|// dot
block|{
return|return
name|a
operator|.
name|x
argument_list|()
operator|*
name|b
operator|.
name|x
argument_list|()
operator|+
name|a
operator|.
name|y
argument_list|()
operator|*
name|b
operator|.
name|y
argument_list|()
operator|+
name|a
operator|.
name|z
argument_list|()
operator|*
name|b
operator|.
name|z
argument_list|()
return|;
block|}
end_function

begin_function
specifier|inline
name|Vec3D
name|operator
modifier|^
parameter_list|(
specifier|const
name|Vec3D
modifier|&
name|a
parameter_list|,
specifier|const
name|Vec3D
modifier|&
name|b
parameter_list|)
comment|// cross
block|{
return|return
name|Vec3D
argument_list|(
name|a
operator|.
name|y
argument_list|()
operator|*
name|b
operator|.
name|z
argument_list|()
operator|-
name|a
operator|.
name|z
argument_list|()
operator|*
name|b
operator|.
name|y
argument_list|()
argument_list|,
comment|// UK style
name|a
operator|.
name|z
argument_list|()
operator|*
name|b
operator|.
name|x
argument_list|()
operator|-
name|a
operator|.
name|x
argument_list|()
operator|*
name|b
operator|.
name|z
argument_list|()
argument_list|,
comment|// notation
name|a
operator|.
name|x
argument_list|()
operator|*
name|b
operator|.
name|y
argument_list|()
operator|-
name|a
operator|.
name|y
argument_list|()
operator|*
name|b
operator|.
name|x
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Vec3D
operator|&
name|Vec3D
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
block|{
name|n
index|[
literal|0
index|]
operator|+=
name|that
operator|.
name|x
argument_list|()
block|;
name|n
index|[
literal|1
index|]
operator|+=
name|that
operator|.
name|y
argument_list|()
block|;
name|n
index|[
literal|2
index|]
operator|+=
name|that
operator|.
name|z
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Vec3D
operator|&
name|Vec3D
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Vec3D
operator|&
name|that
operator|)
block|{
name|n
index|[
literal|0
index|]
operator|-=
name|that
operator|.
name|x
argument_list|()
block|;
name|n
index|[
literal|1
index|]
operator|-=
name|that
operator|.
name|y
argument_list|()
block|;
name|n
index|[
literal|2
index|]
operator|-=
name|that
operator|.
name|z
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Vec3D
operator|&
name|Vec3D
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|double
name|that
operator|)
block|{
name|n
index|[
literal|0
index|]
operator|*=
name|that
block|;
name|n
index|[
literal|1
index|]
operator|*=
name|that
block|;
name|n
index|[
literal|2
index|]
operator|*=
name|that
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Vec3D
operator|&
name|Vec3D
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|double
name|that
operator|)
block|{
name|n
index|[
literal|0
index|]
operator|/=
name|that
block|;
name|n
index|[
literal|1
index|]
operator|/=
name|that
block|;
name|n
index|[
literal|2
index|]
operator|/=
name|that
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
block|{
return|return
name|a
operator|.
name|x
argument_list|()
operator|==
name|b
operator|.
name|x
argument_list|()
operator|&&
name|a
operator|.
name|y
argument_list|()
operator|==
name|b
operator|.
name|y
argument_list|()
operator|&&
name|a
operator|.
name|z
argument_list|()
operator|==
name|b
operator|.
name|z
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Vec3D
operator|&
name|a
operator|,
specifier|const
name|Vec3D
operator|&
name|b
operator|)
block|{
return|return
operator|!
operator|(
name|a
operator|==
name|b
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _Vec3D_h
end_comment

end_unit

