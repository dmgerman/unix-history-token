begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_G_curses_h
end_ifndef

begin_include
include|#
directive|include
file|<_G_config.h>
end_include

begin_if
if|#
directive|if
name|_G_HAVE_CURSES
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|__curses_h_recursive
end_ifdef

begin_empty
empty|#include_next<curses.h>
end_empty

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__curses_h_recursive
end_define

begin_extern
extern|extern
literal|"C"
block|{
empty|#include_next<curses.h>
comment|/* Some systems (SVR4 for example) allow the definition of CHTYPE to set the    type of some arguments to the curses functions.  It can be set to "char"    to save space, or it can be set to something longer to store both a    character and some attributes.  By default they do not define CHTYPE,    and when CHTYPE is not defined, the default type is "unsigned long" instead    of the traditional "char".  However, SVR4<curses.h> does define    _VR3_COMPAT_CODE, so we can use that to detect when we should use the SVR4    default if CHTYPE is not defined.  For other systems, just default to the    traditional default "char". */
ifdef|#
directive|ifdef
name|CHTYPE
typedef|typedef
name|CHTYPE
name|_G_chtype
typedef|;
comment|/* Use specified type. */
else|#
directive|else
ifdef|#
directive|ifdef
name|_VR3_COMPAT_CODE
typedef|typedef
name|unsigned
name|long
name|_G_chtype
typedef|;
comment|/* SVR4 default is "unsigned long" */
elif|#
directive|elif
name|defined
argument_list|(
name|hpux
argument_list|)
typedef|typedef
name|unsigned
name|int
name|_G_chtype
typedef|;
else|#
directive|else
typedef|typedef
name|char
name|_G_chtype
typedef|;
comment|/* Traditional default is "char" */
endif|#
directive|endif
endif|#
directive|endif
comment|/* Some args are conceptually const, but SVR4 (and others?) get it wrong. */
define|#
directive|define
name|_C_const
comment|/* const */
name|WINDOW
modifier|*
function_decl|(
name|newwin
function_decl|)
parameter_list|(
name|int
name|lines
parameter_list|,
name|int
name|cols
parameter_list|,
name|int
name|sy
parameter_list|,
name|int
name|sx
parameter_list|)
function_decl|;
name|WINDOW
modifier|*
function_decl|(
name|subwin
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
name|w
parameter_list|,
name|int
name|lines
parameter_list|,
name|int
name|cols
parameter_list|,
name|int
name|sy
parameter_list|,
name|int
name|sx
parameter_list|)
function_decl|;
name|WINDOW
modifier|*
function_decl|(
name|initscr
function_decl|)
parameter_list|()
function_decl|;
name|int
function_decl|(
name|box
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_G_chtype
parameter_list|,
name|_G_chtype
parameter_list|)
function_decl|;
name|int
function_decl|(
name|delwin
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|getcurx
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|getcury
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|mvcur
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
name|overlay
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|overwrite
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|scroll
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|touchwin
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|waddch
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_G_chtype
parameter_list|)
function_decl|;
name|int
function_decl|(
name|waddstr
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_C_const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wclear
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wclrtobot
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wclrtoeol
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wdelch
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wdeleteln
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|werase
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wgetch
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wgetstr
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|winsch
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_G_chtype
parameter_list|)
function_decl|;
name|int
function_decl|(
name|winsertln
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wmove
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wrefresh
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wstandend
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wstandout
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|)
function_decl|;
comment|// SVR4 rather inanely bundles the format-string parameter with the '...'.
comment|// This breaks VMS, and I don't want to penalize VMS for being right for once!
ifdef|#
directive|ifdef
name|_VR3_COMPAT_CODE
comment|/* Magic cookie to recognize SVR4 */
define|#
directive|define
name|_CURSES_FORMAT_ARG
comment|/*const char* fmt, */
else|#
directive|else
define|#
directive|define
name|_CURSES_FORMAT_ARG
value|const char* fmt,
endif|#
directive|endif
name|int
function_decl|(
name|wprintw
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_CURSES_FORMAT_ARG
modifier|...
parameter_list|)
function_decl|;
name|int
function_decl|(
name|mvwprintw
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|_CURSES_FORMAT_ARG
modifier|...
parameter_list|)
function_decl|;
name|int
function_decl|(
name|wscanw
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|_CURSES_FORMAT_ARG
modifier|...
parameter_list|)
function_decl|;
name|int
function_decl|(
name|mvwscanw
function_decl|)
parameter_list|(
name|WINDOW
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|_CURSES_FORMAT_ARG
modifier|...
parameter_list|)
function_decl|;
name|int
function_decl|(
name|endwin
function_decl|)
parameter_list|()
function_decl|;
block|}
end_extern

begin_define
define|#
directive|define
name|_G_curses_h
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _G_HAVE_CURSES */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _G_curses_h */
end_comment

end_unit

