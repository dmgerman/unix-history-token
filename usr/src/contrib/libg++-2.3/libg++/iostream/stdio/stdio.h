begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* This is part of the iostream/stdio library, providing -*- C -*- I/O.    Define ANSI C stdio on top of C++ iostreams.    Copyright (C) 1991 Per Bothner.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.   This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details.  You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_STDIO_H
end_ifndef

begin_define
define|#
directive|define
name|_STDIO_H
end_define

begin_define
define|#
directive|define
name|_STDIO_USES_IOSTREAM
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|NULL
end_ifndef

begin_define
define|#
directive|define
name|NULL
value|(void*)0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|EOF
end_ifndef

begin_define
define|#
directive|define
name|EOF
value|(-1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|BUFSIZ
end_ifndef

begin_define
define|#
directive|define
name|BUFSIZ
value|1024
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_IOFBF
value|0
end_define

begin_comment
comment|/* Fully buffered. */
end_comment

begin_define
define|#
directive|define
name|_IOLBF
value|1
end_define

begin_comment
comment|/* Line buffered. */
end_comment

begin_define
define|#
directive|define
name|_IONBF
value|2
end_define

begin_comment
comment|/* No buffering. */
end_comment

begin_define
define|#
directive|define
name|SEEK_SET
value|0
end_define

begin_define
define|#
directive|define
name|SEEK_CUR
value|1
end_define

begin_define
define|#
directive|define
name|SEEK_END
value|2
end_define

begin_include
include|#
directive|include
file|<_G_config.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_G_NEED_STDARG_H
end_ifdef

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* define size_t.  Crud in case<sys/types.h> has defined it. */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_T_SIZE_
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_T_SIZE
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_SIZE_T_
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|___int_size_t_h
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_GCC_SIZE_T
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_SIZET_
argument_list|)
end_if

begin_define
define|#
directive|define
name|_SIZE_T
end_define

begin_define
define|#
directive|define
name|_T_SIZE_
end_define

begin_define
define|#
directive|define
name|_T_SIZE
end_define

begin_define
define|#
directive|define
name|__SIZE_T
end_define

begin_define
define|#
directive|define
name|_SIZE_T_
end_define

begin_define
define|#
directive|define
name|___int_size_t_h
end_define

begin_define
define|#
directive|define
name|_GCC_SIZE_T
end_define

begin_define
define|#
directive|define
name|_SIZET_
end_define

begin_typedef
typedef|typedef
name|_G_size_t
name|size_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|fpos_t
end_ifndef

begin_define
define|#
directive|define
name|fpos_t
value|_G_fpos_t
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|FOPEN_MAX
value|_G_FOPEN_MAX
end_define

begin_define
define|#
directive|define
name|FILENAME_MAX
value|_G_FILENAME_MAX
end_define

begin_define
define|#
directive|define
name|TMP_MAX
value|999
end_define

begin_comment
comment|/* Only limited by filename length */
end_comment

begin_define
define|#
directive|define
name|L_ctermid
value|9
end_define

begin_define
define|#
directive|define
name|L_cuserid
value|9
end_define

begin_define
define|#
directive|define
name|P_tmpdir
value|"/tmp"
end_define

begin_define
define|#
directive|define
name|L_tmpnam
value|20
end_define

begin_struct
struct|struct
name|__FILE
block|{
comment|/* NOTE: Must match (or be a prefix of) __streambuf! */
name|int
name|_flags
decl_stmt|;
comment|/* High-order word is _IO_MAGIC; rest is flags. */
name|char
modifier|*
name|_gptr
decl_stmt|;
comment|/* Current get pointer */
name|char
modifier|*
name|_egptr
decl_stmt|;
comment|/* End of get area. */
name|char
modifier|*
name|_eback
decl_stmt|;
comment|/* Start of putback+get area. */
name|char
modifier|*
name|_pbase
decl_stmt|;
comment|/* Start of put area. */
name|char
modifier|*
name|_pptr
decl_stmt|;
comment|/* Current put pointer. */
name|char
modifier|*
name|_epptr
decl_stmt|;
comment|/* End of put area. */
name|char
modifier|*
name|_base
decl_stmt|;
comment|/* Start of reserve area. */
name|char
modifier|*
name|_ebuf
decl_stmt|;
comment|/* End of reserve area. */
name|struct
name|streambuf
modifier|*
name|_chain
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|__FILE
name|FILE
typedef|;
end_typedef

begin_comment
comment|/* For use by debuggers. These are linked in if printf or fprintf are used. */
end_comment

begin_decl_stmt
specifier|extern
name|FILE
modifier|*
name|stdin
decl_stmt|,
modifier|*
name|stdout
decl_stmt|,
modifier|*
name|stderr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|_fake_filebuf
name|__std_filebuf_0
decl_stmt|,
name|__std_filebuf_1
decl_stmt|,
name|__std_filebuf_2
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|stdin
value|((FILE*)&__std_filebuf_0)
end_define

begin_define
define|#
directive|define
name|stdout
value|((FILE*)&__std_filebuf_1)
end_define

begin_define
define|#
directive|define
name|stderr
value|((FILE*)&__std_filebuf_2)
end_define

begin_define
define|#
directive|define
name|getc
parameter_list|(
name|fp
parameter_list|)
define|\
value|((fp)->_gptr>= (fp)->_egptr \&& __underflow((struct streambuf*)(fp)) == EOF ? EOF \    : *(unsigned char*)(fp)->_gptr++)
end_define

begin_define
define|#
directive|define
name|putc
parameter_list|(
name|c
parameter_list|,
name|fp
parameter_list|)
define|\
value|(((fp)->_pptr>= (fp)->_epptr) ? __overflow((struct streambuf*)(fp), (unsigned char)c) \    : (unsigned char)(*(fp)->_pptr++ = c))
end_define

begin_define
define|#
directive|define
name|putchar
parameter_list|(
name|c
parameter_list|)
value|putc(c, stdout)
end_define

begin_define
define|#
directive|define
name|getchar
parameter_list|()
value|getc(stdin)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
define|#
directive|define
name|_ARGS
parameter_list|(
name|args
parameter_list|)
value|args
else|#
directive|else
define|#
directive|define
name|_ARGS
parameter_list|(
name|args
parameter_list|)
value|()
endif|#
directive|endif
specifier|extern
name|void
name|clearerr
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fclose
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|feof
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ferror
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fflush
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fgetc
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fgetpos
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|fpos_t
operator|*
name|pos
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|fgets
name|_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|fopen
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fprintf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputc
name|_ARGS
argument_list|(
operator|(
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fputs
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|str
operator|,
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fread
name|_ARGS
argument_list|(
operator|(
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|freopen
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fscanf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fseek
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|long
name|int
name|offset
operator|,
name|int
name|whence
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fsetpos
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
specifier|const
name|fpos_t
operator|*
name|pos
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|long
name|int
name|ftell
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|size_t
name|fwrite
name|_ARGS
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|,
name|size_t
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|gets
name|_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|perror
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|printf
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|puts
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|str
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|remove
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|rename
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|_old
operator|,
specifier|const
name|char
operator|*
name|_new
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|rewind
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|scanf
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setbuf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setlinebuf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|setbuffer
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|setvbuf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|int
name|mode
operator|,
name|size_t
name|size
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|sprintf
name|_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|sscanf
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|string
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|tmpfile
name|_ARGS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|tmpnam
name|_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ungetc
name|_ARGS
argument_list|(
operator|(
name|int
name|c
operator|,
name|FILE
operator|*
name|fp
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vfprintf
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
name|fp
operator|,
name|char
specifier|const
operator|*
name|fmt0
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vprintf
name|_ARGS
argument_list|(
operator|(
name|char
specifier|const
operator|*
name|fmt
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|vsprintf
name|_ARGS
argument_list|(
operator|(
name|char
operator|*
name|string
operator|,
specifier|const
name|char
operator|*
name|format
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
operator|||
name|defined
argument_list|(
name|_POSIX_SOURCE
argument_list|)
specifier|extern
name|FILE
modifier|*
name|fdopen
name|_ARGS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|fileno
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|FILE
modifier|*
name|popen
name|_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|pclose
name|_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
specifier|extern
name|int
name|__underflow
name|_ARGS
argument_list|(
operator|(
expr|struct
name|streambuf
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|__overflow
name|_ARGS
argument_list|(
operator|(
expr|struct
name|streambuf
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*!_STDIO_H*/
end_comment

end_unit

