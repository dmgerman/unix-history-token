begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Dirk Grunwald (grunwald@cs.uiuc.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SampleStatistic_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|SampleStatistic_h
value|1
end_define

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_decl_stmt
name|class
name|SampleStatistic
block|{
name|protected
label|:
name|int
name|n
decl_stmt|;
name|double
name|x
decl_stmt|;
name|double
name|x2
decl_stmt|;
name|double
name|minValue
decl_stmt|,
name|maxValue
decl_stmt|;
name|public
label|:
name|SampleStatistic
argument_list|()
expr_stmt|;
name|virtual
name|void
name|reset
parameter_list|()
function_decl|;
name|virtual
name|void
name|operator
operator|+=
operator|(
name|double
operator|)
expr_stmt|;
name|int
name|samples
parameter_list|()
function_decl|;
name|double
name|mean
parameter_list|()
function_decl|;
name|double
name|stdDev
parameter_list|()
function_decl|;
name|double
name|var
parameter_list|()
function_decl|;
name|double
name|min
parameter_list|()
function_decl|;
name|double
name|max
parameter_list|()
function_decl|;
name|double
name|confidence
parameter_list|(
name|int
name|p_percentage
parameter_list|)
function_decl|;
name|double
name|confidence
parameter_list|(
name|double
name|p_value
parameter_list|)
function_decl|;
name|void
name|error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_function_decl
specifier|extern
name|void
name|default_SampleStatistic_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|SampleStatistic_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|one_arg_error_handler_t
name|set_SampleStatistic_error_handler
parameter_list|(
name|one_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|SampleStatistic
operator|::
name|SampleStatistic
argument_list|()
block|{
name|reset
argument_list|()
block|;}
specifier|inline
name|int
name|SampleStatistic
operator|::
name|samples
argument_list|()
block|{
return|return
operator|(
name|n
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|SampleStatistic
operator|::
name|min
argument_list|()
block|{
return|return
operator|(
name|minValue
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|SampleStatistic
operator|::
name|max
argument_list|()
block|{
return|return
operator|(
name|maxValue
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

