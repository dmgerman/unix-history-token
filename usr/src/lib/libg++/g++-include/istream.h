begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1989 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_comment
comment|/* *** Version 1.2 -- nearly 100% AT&T 1.2 compatible *** */
end_comment

begin_comment
comment|/* istream.h now separately includable */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_istream_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_istream_h
value|1
end_define

begin_include
include|#
directive|include
file|<File.h>
end_include

begin_include
include|#
directive|include
file|<streambuf.h>
end_include

begin_include
include|#
directive|include
file|<filebuf.h>
end_include

begin_include
include|#
directive|include
file|<Filebuf.h>
end_include

begin_decl_stmt
name|class
name|whitespace
comment|// a class used only to input and
block|{
comment|// discard white space characters
name|char
name|filler
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ostream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|istream
block|{
name|friend
name|void
name|eatwhite
parameter_list|(
name|istream
modifier|&
name|s
parameter_list|)
function_decl|;
name|protected
label|:
name|streambuf
modifier|*
name|bp
decl_stmt|;
name|state_value
name|state
decl_stmt|;
comment|// _good/_eof/_fail/_bad
name|ostream
modifier|*
name|tied_to
decl_stmt|;
name|char
name|skipws
decl_stmt|;
name|char
name|ownbuf
decl_stmt|;
name|void
name|_flush
parameter_list|()
function_decl|;
name|char
modifier|*
name|readline
parameter_list|(
name|int
name|chunk_number
parameter_list|,
name|char
name|terminator
parameter_list|)
function_decl|;
name|public
label|:
name|istream
argument_list|(
argument|const char* filename
argument_list|,
argument|io_mode m
argument_list|,
argument|access_mode a
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|const char* filename
argument_list|,
argument|const char* m
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|int filedesc
argument_list|,
argument|io_mode m
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|FILE* fileptr
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|int sz
argument_list|,
argument|char* buf
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|int filedesc
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|int filedesc
argument_list|,
argument|char* buf
argument_list|,
argument|int buflen
argument_list|,
argument|int sk
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
name|istream
argument_list|(
argument|streambuf* s
argument_list|,
argument|int sk=
literal|1
argument_list|,
argument|ostream* t =
literal|0
argument_list|)
empty_stmt|;
operator|~
name|istream
argument_list|()
expr_stmt|;
name|istream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|io_mode
name|m
parameter_list|,
name|access_mode
name|a
parameter_list|)
function_decl|;
name|istream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|m
parameter_list|)
function_decl|;
name|istream
modifier|&
name|open
parameter_list|(
name|int
name|filedesc
parameter_list|,
name|io_mode
name|m
parameter_list|)
function_decl|;
name|istream
modifier|&
name|open
parameter_list|(
name|FILE
modifier|*
name|fileptr
parameter_list|)
function_decl|;
name|istream
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filenam
parameter_list|,
name|open_mode
name|m
parameter_list|)
function_decl|;
name|istream
modifier|&
name|close
parameter_list|()
function_decl|;
name|ostream
modifier|*
name|tie
parameter_list|(
name|ostream
modifier|*
name|s
parameter_list|)
function_decl|;
name|int
name|skip
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|// stream status
name|int
name|rdstate
parameter_list|()
function_decl|;
name|int
name|eof
parameter_list|()
function_decl|;
name|int
name|fail
parameter_list|()
function_decl|;
name|int
name|bad
parameter_list|()
function_decl|;
name|int
name|good
parameter_list|()
function_decl|;
comment|// other status queries
name|int
name|readable
parameter_list|()
function_decl|;
name|int
name|writable
parameter_list|()
function_decl|;
name|int
name|is_open
parameter_list|()
function_decl|;
name|operator
name|void
modifier|*
parameter_list|()
function_decl|;
name|int
name|operator
operator|!
operator|(
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|name
parameter_list|()
function_decl|;
name|char
modifier|*
name|bufptr
parameter_list|()
function_decl|;
comment|// error handling
name|void
name|error
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|(
name|state_value
name|f
init|=
name|_good
parameter_list|)
function_decl|;
comment|// poorly named
name|void
name|set
parameter_list|(
name|state_value
name|f
parameter_list|)
function_decl|;
comment|// set corresponding bit
name|void
name|unset
parameter_list|(
name|state_value
name|f
parameter_list|)
function_decl|;
comment|// clear corresponding bit
name|istream
modifier|&
name|failif
parameter_list|(
name|int
name|cond
parameter_list|)
function_decl|;
comment|// unformatted IO
name|istream
modifier|&
name|get
parameter_list|(
name|char
modifier|&
name|c
parameter_list|)
function_decl|;
name|istream
modifier|&
name|unget
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|istream
modifier|&
name|putback
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
comment|// a synonym for unget
name|istream
modifier|&
name|get
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|int
name|n
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
name|istream
modifier|&
name|getline
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|int
name|n
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
name|istream
modifier|&
name|gets
parameter_list|(
name|char
modifier|*
modifier|*
name|s
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|char
operator|&
name|c
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|short
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|short
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|int
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|int
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|long
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
operator|&
name|n
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|istream
operator|&
name|operator
operator|>>
operator|(
name|long
name|long
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
name|long
operator|&
name|n
operator|)
expr_stmt|;
endif|#
directive|endif
name|istream
operator|&
name|operator
operator|>>
operator|(
name|float
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|double
operator|&
name|n
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|char
operator|*
name|s
operator|)
expr_stmt|;
name|istream
operator|&
name|operator
operator|>>
operator|(
name|whitespace
operator|&
name|w
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// pre-declared streams
end_comment

begin_decl_stmt
specifier|extern
name|istream
name|cin
decl_stmt|;
end_decl_stmt

begin_comment
comment|// stdin
end_comment

begin_decl_stmt
specifier|extern
name|whitespace
name|WS
decl_stmt|;
end_decl_stmt

begin_comment
comment|// for convenience
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|void
name|istream
operator|::
name|clear
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|flag
block|; }
specifier|inline
name|void
name|istream
operator|::
name|set
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator||
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|istream
operator|::
name|unset
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator|&
operator|~
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|int
name|istream
operator|::
name|rdstate
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|good
argument_list|()
block|{
return|return
name|state
operator|==
name|_good
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|eof
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_eof
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|fail
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_fail
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|bad
argument_list|()
block|{
return|return
name|int
argument_list|(
name|state
argument_list|)
operator|&
name|int
argument_list|(
name|_bad
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|::
name|operator
name|void
operator|*
operator|(
operator|)
block|{
return|return
operator|(
name|state
operator|==
name|_good
operator|)
operator|?
name|this
operator|:
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|operator
operator|!
operator|(
operator|)
block|{
return|return
operator|(
name|state
operator|!=
name|_good
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|&
name|istream
operator|::
name|failif
argument_list|(
argument|int cond
argument_list|)
block|{
if|if
condition|(
name|cond
condition|)
name|set
argument_list|(
name|_fail
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|istream
operator|::
name|is_open
argument_list|()
block|{
return|return
name|bp
operator|->
name|is_open
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|readable
argument_list|()
block|{
return|return
operator|(
name|bp
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|bp
operator|->
name|is_open
argument_list|()
operator|)
operator|&&
operator|(
name|state
operator|==
name|_good
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|writable
argument_list|()
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|char
operator|*
name|istream
operator|::
name|bufptr
argument_list|()
block|{
return|return
name|bp
operator|->
name|base
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|&
name|istream
operator|::
name|close
argument_list|()
block|{
name|bp
operator|->
name|close
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|istream
operator|::
name|skip
argument_list|(
argument|int sk
argument_list|)
block|{
name|int
name|was
operator|=
name|skipws
block|;
name|skipws
operator|=
name|sk
block|;
return|return
name|was
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|&
name|istream
operator|::
name|unget
argument_list|(
argument|char c
argument_list|)
block|{
if|if
condition|(
name|bp
operator|->
name|sputbackc
argument_list|(
name|c
argument_list|)
operator|==
name|EOF
condition|)
name|set
argument_list|(
name|_fail
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|istream
operator|&
name|istream
operator|::
name|putback
argument_list|(
argument|char c
argument_list|)
block|{
if|if
condition|(
name|bp
operator|->
name|sputbackc
argument_list|(
name|c
argument_list|)
operator|==
name|EOF
condition|)
name|set
argument_list|(
name|_fail
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_function
unit|}  inline
name|void
name|eatwhite
parameter_list|(
name|istream
modifier|&
name|s
parameter_list|)
block|{
name|s
operator|>>
name|WS
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

