begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|SHORT_NAMES
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
end_if

begin_define
define|#
directive|define
name|re_compile_pattern
value|recmppat
end_define

begin_define
define|#
directive|define
name|re_pattern_buffer
value|repatbuf
end_define

begin_define
define|#
directive|define
name|re_registers
value|reregs
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_String_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_String_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<Regex.h>
end_include

begin_struct
struct|struct
name|StrRep
comment|// internal String representations
block|{
name|unsigned
name|short
name|len
decl_stmt|;
comment|// string length
name|unsigned
name|short
name|sz
decl_stmt|;
comment|// allocated space
name|char
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// the string starts here
comment|// (at least 1 char for trailing null)
comment|// allocated& expanded via non-public fcts
block|}
struct|;
end_struct

begin_comment
comment|// primitive ops on StrReps -- nearly all String fns go through these.
end_comment

begin_function_decl
name|StrRep
modifier|*
name|Salloc
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Scopy
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|StrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Sresize
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Scat
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Scat
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Sprepend
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Sreverse
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|StrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Supcase
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|StrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Sdowncase
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|StrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|StrRep
modifier|*
name|Scapitalize
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
name|StrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// These classes need to be defined in the order given
end_comment

begin_decl_stmt
name|class
name|String
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|SubString
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|SubString
block|{
name|friend
name|class
name|String
decl_stmt|;
name|protected
label|:
name|String
modifier|&
name|S
decl_stmt|;
comment|// The String I'm a substring of
name|unsigned
name|short
name|pos
decl_stmt|;
comment|// starting position in S's rep
name|unsigned
name|short
name|len
decl_stmt|;
comment|// length of substring
name|void
name|assign
parameter_list|(
name|StrRep
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|SubString
argument_list|(
argument|String& x
argument_list|,
argument|int p
argument_list|,
argument|int l
argument_list|)
empty_stmt|;
name|SubString
argument_list|(
specifier|const
name|SubString
operator|&
name|x
argument_list|)
expr_stmt|;
name|public
label|:
comment|// Note there are no public constructors. SubStrings are always
comment|// created via String operations
operator|~
name|SubString
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
name|t
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
name|char
name|c
operator|)
decl_stmt|;
comment|// return 1 if target appears anywhere in SubString; else 0
name|int
name|contains
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|)
decl|const
decl_stmt|;
comment|// return 1 if target matches entire SubString
name|int
name|matches
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|)
decl|const
decl_stmt|;
comment|// IO
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|SubString
operator|&
name|x
operator|)
expr_stmt|;
comment|// status
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|chars
argument_list|()
specifier|const
expr_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|String
block|{
name|friend
name|class
name|SubString
decl_stmt|;
name|protected
label|:
name|StrRep
modifier|*
name|rep
decl_stmt|;
comment|// Strings are pointers to their representations
comment|// some helper functions
name|int
name|search
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|search
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|char
argument_list|)
decl|const
decl_stmt|;
name|int
name|match
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|,
name|int
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|_gsub
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|_gsub
parameter_list|(
specifier|const
name|Regex
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|SubString
name|_substr
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|public
label|:
comment|// constructors& assignment
name|String
argument_list|()
expr_stmt|;
name|String
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
expr_stmt|;
name|String
argument_list|(
specifier|const
name|SubString
operator|&
name|x
argument_list|)
expr_stmt|;
name|String
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|)
expr_stmt|;
name|String
argument_list|(
argument|const char* t
argument_list|,
argument|int len
argument_list|)
empty_stmt|;
name|String
argument_list|(
argument|char c
argument_list|)
empty_stmt|;
operator|~
name|String
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
name|y
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
name|char
name|c
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
decl_stmt|;
comment|// concatenation
name|void
name|operator
operator|+=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
name|char
name|c
operator|)
expr_stmt|;
name|void
name|prepend
parameter_list|(
specifier|const
name|String
modifier|&
name|y
parameter_list|)
function_decl|;
name|void
name|prepend
parameter_list|(
specifier|const
name|SubString
modifier|&
name|y
parameter_list|)
function_decl|;
name|void
name|prepend
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|)
function_decl|;
name|void
name|prepend
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
comment|// procedural versions:
comment|// concatenate first 2 args, store result in last arg
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|SubString
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
comment|// double concatenation, by request. (yes, there are too many versions,
comment|// but if one is supported, then the others should be too...)
comment|// Concatenate first 3 args, store in last arg
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|String
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|SubString
modifier|&
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
parameter_list|,
name|String
modifier|&
parameter_list|)
function_decl|;
comment|// searching& matching
comment|// return position of target in string or -1 for failure
name|int
name|index
argument_list|(
name|char
name|c
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|// return 1 if target appears anyhere in String; else 0
name|int
name|contains
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|)
decl|const
decl_stmt|;
comment|// return 1 if target appears anywhere after position pos
comment|// (or before, if pos is negative) in String; else 0
name|int
name|contains
argument_list|(
name|char
name|c
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
comment|// return 1 if target appears at position pos in String; else 0
name|int
name|matches
argument_list|(
name|char
name|c
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|Regex
operator|&
name|r
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|//  return number of occurences of target in String
name|int
name|freq
argument_list|(
name|char
name|c
argument_list|)
decl|const
decl_stmt|;
name|int
name|freq
argument_list|(
specifier|const
name|String
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|freq
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|)
decl|const
decl_stmt|;
name|int
name|freq
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|)
decl|const
decl_stmt|;
comment|// SubString extraction
comment|// Note that you can't take a substring of a const String, since
comment|// this leaves open the possiblility of indirectly modifying the
comment|// String through the SubString
name|SubString
name|at
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|SubString
name|operator
argument_list|()
operator|(
name|int
name|pos
operator|,
name|int
name|len
operator|)
expr_stmt|;
comment|// synonym for at
name|SubString
name|at
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|at
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|at
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|at
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|at
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|before
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|through
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|from
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|SubString
name|after
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
comment|// deletion
comment|// delete len chars starting at pos
name|void
name|del
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
comment|// delete the first occurrence of target after startpos
name|void
name|del
parameter_list|(
specifier|const
name|String
modifier|&
name|y
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|del
parameter_list|(
specifier|const
name|SubString
modifier|&
name|y
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|del
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|del
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|del
parameter_list|(
specifier|const
name|Regex
modifier|&
name|r
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
comment|// global substitution: substitute all occurrences of pat with repl
name|int
name|gsub
parameter_list|(
specifier|const
name|String
modifier|&
name|pat
parameter_list|,
specifier|const
name|String
modifier|&
name|repl
parameter_list|)
function_decl|;
name|int
name|gsub
parameter_list|(
specifier|const
name|SubString
modifier|&
name|pat
parameter_list|,
specifier|const
name|String
modifier|&
name|repl
parameter_list|)
function_decl|;
name|int
name|gsub
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
specifier|const
name|String
modifier|&
name|repl
parameter_list|)
function_decl|;
name|int
name|gsub
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
specifier|const
name|char
modifier|*
name|repl
parameter_list|)
function_decl|;
name|int
name|gsub
parameter_list|(
specifier|const
name|Regex
modifier|&
name|pat
parameter_list|,
specifier|const
name|String
modifier|&
name|repl
parameter_list|)
function_decl|;
comment|// friends& utilities
comment|// split string into array res at separators; return number of elements
name|friend
name|int
name|split
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|String
name|res
index|[]
parameter_list|,
name|int
name|maxn
parameter_list|,
specifier|const
name|String
modifier|&
name|sep
parameter_list|)
function_decl|;
name|friend
name|int
name|split
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
name|String
name|res
index|[]
parameter_list|,
name|int
name|maxn
parameter_list|,
specifier|const
name|Regex
modifier|&
name|sep
parameter_list|)
function_decl|;
name|friend
name|String
name|common_prefix
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|String
modifier|&
name|y
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|friend
name|String
name|common_suffix
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|String
modifier|&
name|y
parameter_list|,
name|int
name|startpos
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|friend
name|String
name|replicate
parameter_list|(
name|char
name|c
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|friend
name|String
name|replicate
parameter_list|(
specifier|const
name|String
modifier|&
name|y
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|friend
name|String
name|join
parameter_list|(
name|String
name|src
index|[]
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|String
modifier|&
name|sep
parameter_list|)
function_decl|;
comment|// simple builtin transformations
name|friend
name|String
name|reverse
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
function_decl|;
name|friend
name|String
name|upcase
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
function_decl|;
name|friend
name|String
name|downcase
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
function_decl|;
name|friend
name|String
name|capitalize
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
function_decl|;
comment|// in-place versions of above
name|void
name|reverse
parameter_list|()
function_decl|;
name|void
name|upcase
parameter_list|()
function_decl|;
name|void
name|downcase
parameter_list|()
function_decl|;
name|void
name|capitalize
parameter_list|()
function_decl|;
comment|// element extraction
name|char
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
name|char
name|elem
argument_list|(
name|int
name|i
argument_list|)
decl|const
decl_stmt|;
name|char
name|firstchar
argument_list|()
specifier|const
expr_stmt|;
name|char
name|lastchar
argument_list|()
specifier|const
expr_stmt|;
comment|// conversion
name|operator
specifier|const
name|char
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|chars
argument_list|()
specifier|const
expr_stmt|;
comment|// IO
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|String
operator|&
name|x
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|SubString
operator|&
name|x
operator|)
expr_stmt|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|String
operator|&
name|x
operator|)
expr_stmt|;
name|friend
name|int
name|readline
parameter_list|(
name|istream
modifier|&
name|s
parameter_list|,
name|String
modifier|&
name|x
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|,
name|int
name|discard_terminator
init|=
literal|1
parameter_list|)
function_decl|;
comment|// status
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
comment|// preallocate some space for String
name|void
name|alloc
parameter_list|(
name|int
name|newsize
parameter_list|)
function_decl|;
comment|// report current allocation (not length!)
name|int
name|allocation
argument_list|()
specifier|const
expr_stmt|;
specifier|volatile
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|String
name|StrTmp
typedef|;
end_typedef

begin_comment
comment|// for backward compatibility
end_comment

begin_comment
comment|// other externs
end_comment

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|String
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|SubString
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|char
modifier|*
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
specifier|const
name|String
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
specifier|const
name|SubString
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|compare
parameter_list|(
specifier|const
name|SubString
modifier|&
name|x
parameter_list|,
specifier|const
name|char
modifier|*
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|fcompare
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|,
specifier|const
name|String
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// ignore case
end_comment

begin_decl_stmt
specifier|extern
name|StrRep
name|_nilStrRep
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|String
name|_nilString
decl_stmt|;
end_decl_stmt

begin_comment
comment|// other inlines
end_comment

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
name|char
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
name|char
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_comment
comment|// status reports, needed before defining other things
end_comment

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|empty
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|len
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|char
operator|*
name|String
operator|::
name|chars
argument_list|()
specifier|const
block|{
return|return
operator|&
operator|(
name|rep
operator|->
name|s
index|[
literal|0
index|]
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|allocation
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|sz
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|String
operator|::
name|alloc
argument_list|(
argument|int newsize
argument_list|)
block|{
name|rep
operator|=
name|Sresize
argument_list|(
name|rep
argument_list|,
name|newsize
argument_list|)
block|; }
specifier|inline
name|int
name|SubString
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|empty
argument_list|()
specifier|const
block|{
return|return
name|len
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|char
operator|*
name|SubString
operator|::
name|chars
argument_list|()
specifier|const
block|{
return|return
operator|&
operator|(
name|S
operator|.
name|rep
operator|->
name|s
index|[
name|pos
index|]
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// constructors
end_comment

begin_expr_stmt
specifier|inline
name|String
operator|::
name|String
argument_list|()
operator|:
name|rep
argument_list|(
argument|&_nilStrRep
argument_list|)
block|{}
specifier|inline
name|String
operator|::
name|String
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
operator|:
name|rep
argument_list|(
argument|Scopy(
literal|0
argument|, x.rep)
argument_list|)
block|{}
specifier|inline
name|String
operator|::
name|String
argument_list|(
specifier|const
name|char
operator|*
name|t
argument_list|)
operator|:
name|rep
argument_list|(
argument|Salloc(
literal|0
argument|, t, -
literal|1
argument|, -
literal|1
argument|)
argument_list|)
block|{}
specifier|inline
name|String
operator|::
name|String
argument_list|(
argument|const char* t
argument_list|,
argument|int tlen
argument_list|)
operator|:
name|rep
argument_list|(
argument|Salloc(
literal|0
argument|, t, tlen, tlen)
argument_list|)
block|{}
specifier|inline
name|String
operator|::
name|String
argument_list|(
specifier|const
name|SubString
operator|&
name|y
argument_list|)
operator|:
name|rep
argument_list|(
argument|Salloc(
literal|0
argument|, y.chars(), y.length(), y.length())
argument_list|)
block|{}
specifier|inline
name|String
operator|::
name|String
argument_list|(
argument|char c
argument_list|)
operator|:
name|rep
argument_list|(
argument|Salloc(
literal|0
argument|,&c,
literal|1
argument|,
literal|1
argument|)
argument_list|)
block|{}
specifier|inline
name|String
operator|::
operator|~
name|String
argument_list|()
block|{
if|if
condition|(
name|rep
operator|!=
operator|&
name|_nilStrRep
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SubString
operator|::
name|SubString
argument_list|(
specifier|const
name|SubString
operator|&
name|x
argument_list|)
operator|:
name|S
argument_list|(
name|x
operator|.
name|S
argument_list|)
operator|,
name|pos
argument_list|(
name|x
operator|.
name|pos
argument_list|)
operator|,
name|len
argument_list|(
argument|x.len
argument_list|)
block|{}
specifier|inline
name|SubString
operator|::
name|SubString
argument_list|(
argument|String& x
argument_list|,
argument|int first
argument_list|,
argument|int l
argument_list|)
operator|:
name|S
argument_list|(
name|x
argument_list|)
operator|,
name|pos
argument_list|(
name|first
argument_list|)
operator|,
name|len
argument_list|(
argument|l
argument_list|)
block|{}
specifier|inline
name|SubString
operator|::
operator|~
name|SubString
argument_list|()
block|{}
comment|// assignment
specifier|inline
name|void
name|String
operator|::
name|operator
operator|=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|Scopy
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|=
operator|(
specifier|const
name|char
operator|*
name|t
operator|)
block|{
name|rep
operator|=
name|Salloc
argument_list|(
name|rep
argument_list|,
name|t
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
block|;  }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|Salloc
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|=
operator|(
name|char
name|c
operator|)
block|{
name|rep
operator|=
name|Salloc
argument_list|(
name|rep
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|;  }
specifier|inline
name|void
name|SubString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|char
operator|*
name|ys
operator|)
block|{
name|assign
argument_list|(
literal|0
argument_list|,
name|ys
argument_list|)
block|; }
specifier|inline
name|void
name|SubString
operator|::
name|operator
operator|=
operator|(
name|char
name|ch
operator|)
block|{
name|assign
argument_list|(
literal|0
argument_list|,
operator|&
name|ch
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|SubString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|assign
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|SubString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|assign
argument_list|(
name|y
operator|.
name|S
operator|.
name|rep
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
comment|// Zillions of cats...
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const SubString& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const SubString& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const SubString& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const SubString& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const String& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const String& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const String& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const String& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const SubString& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const char* x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const char* x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const char* x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const String& a
argument_list|,
argument|const char* x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
operator|.
name|chars
argument_list|()
argument_list|,
name|a
operator|.
name|length
argument_list|()
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const String& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const String& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const String& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const String& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const SubString& x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const SubString& x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
operator|.
name|chars
argument_list|()
argument_list|,
name|x
operator|.
name|length
argument_list|()
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const char* x
argument_list|,
argument|const String& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const char* x
argument_list|,
argument|const SubString& y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const char* x
argument_list|,
argument|const char* y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const char* a
argument_list|,
argument|const char* x
argument_list|,
argument|char y
argument_list|,
argument|String& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|Scat
argument_list|(
name|r
operator|.
name|rep
argument_list|,
name|a
argument_list|,
operator|-
literal|1
argument_list|,
name|x
argument_list|,
operator|-
literal|1
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|; }
comment|// operator versions
specifier|inline
name|void
name|String
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|operator
operator|+=
operator|(
name|char
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
comment|// constructive concatenation
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_NRV
argument_list|)
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
name|char
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
name|char
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
specifier|inline
name|String
name|reverse
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
decl|return
name|r
decl_stmt|;
end_decl_stmt

begin_block
block|{
name|r
operator|.
name|rep
operator|=
name|Sreverse
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
specifier|inline
name|String
name|upcase
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
decl|return
name|r
decl_stmt|;
end_decl_stmt

begin_block
block|{
name|r
operator|.
name|rep
operator|=
name|Supcase
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
specifier|inline
name|String
name|downcase
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
decl|return
name|r
decl_stmt|;
end_decl_stmt

begin_block
block|{
name|r
operator|.
name|rep
operator|=
name|Sdowncase
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
specifier|inline
name|String
name|capitalize
argument_list|(
specifier|const
name|String
operator|&
name|x
argument_list|)
decl|return
name|r
decl_stmt|;
end_decl_stmt

begin_block
block|{
name|r
operator|.
name|rep
operator|=
name|Scapitalize
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_block

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* NO_NRV */
end_comment

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
name|char
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
name|char
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
name|String
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|String
name|reverse
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
block|{
name|String
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|Sreverse
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|String
name|upcase
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
block|{
name|String
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|Supcase
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|String
name|downcase
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
block|{
name|String
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|Sdowncase
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|String
name|capitalize
parameter_list|(
specifier|const
name|String
modifier|&
name|x
parameter_list|)
block|{
name|String
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|Scapitalize
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// prepend
end_comment

begin_expr_stmt
specifier|inline
name|void
name|String
operator|::
name|prepend
argument_list|(
argument|const String& y
argument_list|)
block|{
name|rep
operator|=
name|Sprepend
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|prepend
argument_list|(
argument|const char* y
argument_list|)
block|{
name|rep
operator|=
name|Sprepend
argument_list|(
name|rep
argument_list|,
name|y
argument_list|,
operator|-
literal|1
argument_list|)
block|;  }
specifier|inline
name|void
name|String
operator|::
name|prepend
argument_list|(
argument|char y
argument_list|)
block|{
name|rep
operator|=
name|Sprepend
argument_list|(
name|rep
argument_list|,
operator|&
name|y
argument_list|,
literal|1
argument_list|)
block|;  }
specifier|inline
name|void
name|String
operator|::
name|prepend
argument_list|(
argument|const SubString& y
argument_list|)
block|{
name|rep
operator|=
name|Sprepend
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
block|; }
comment|// misc transformations
specifier|inline
name|void
name|String
operator|::
name|reverse
argument_list|()
block|{
name|rep
operator|=
name|Sreverse
argument_list|(
name|rep
argument_list|,
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|upcase
argument_list|()
block|{
name|rep
operator|=
name|Supcase
argument_list|(
name|rep
argument_list|,
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|downcase
argument_list|()
block|{
name|rep
operator|=
name|Sdowncase
argument_list|(
name|rep
argument_list|,
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|String
operator|::
name|capitalize
argument_list|()
block|{
name|rep
operator|=
name|Scapitalize
argument_list|(
name|rep
argument_list|,
name|rep
argument_list|)
block|; }
comment|// element extraction
specifier|inline
name|char
operator|&
name|String
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
if|if
condition|(
operator|(
operator|(
name|unsigned
operator|)
name|i
operator|)
operator|>=
name|length
argument_list|()
condition|)
name|error
argument_list|(
literal|"invalid index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|rep
operator|->
name|s
index|[
name|i
index|]
return|;
end_return

begin_expr_stmt
unit|}  inline
name|char
name|String
operator|::
name|elem
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|(
operator|(
name|unsigned
operator|)
name|i
operator|)
operator|>=
name|length
argument_list|()
condition|)
name|error
argument_list|(
literal|"invalid index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|rep
operator|->
name|s
index|[
name|i
index|]
return|;
end_return

begin_expr_stmt
unit|}  inline
name|char
name|String
operator|::
name|firstchar
argument_list|()
specifier|const
block|{
return|return
name|elem
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|char
name|String
operator|::
name|lastchar
argument_list|()
specifier|const
block|{
return|return
name|elem
argument_list|(
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// searching
end_comment

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|index
argument_list|(
argument|char c
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|length
argument_list|()
argument_list|,
name|c
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|index
argument_list|(
argument|const char* t
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|length
argument_list|()
argument_list|,
name|t
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|index
argument_list|(
argument|const String& y
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|index
argument_list|(
argument|const SubString& y
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|index
argument_list|(
argument|const Regex& r
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
name|int
name|unused
block|;
return|return
name|r
operator|.
name|search
argument_list|(
name|chars
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|unused
argument_list|,
name|startpos
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|char c
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|length
argument_list|()
argument_list|,
name|c
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const char* t
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|length
argument_list|()
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const String& y
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const SubString& y
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|length
argument_list|()
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|char c
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const char* t
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const String& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const SubString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const Regex& r
argument_list|)
specifier|const
block|{
name|int
name|unused
block|;
return|return
name|r
operator|.
name|search
argument_list|(
name|chars
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|unused
argument_list|,
literal|0
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|contains
argument_list|(
argument|const Regex& r
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|match
argument_list|(
name|chars
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|p
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|matches
argument_list|(
argument|const SubString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|matches
argument_list|(
argument|const String& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|1
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|matches
argument_list|(
argument|const char* t
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|1
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|matches
argument_list|(
argument|char c
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|length
argument_list|()
argument_list|,
literal|1
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|matches
argument_list|(
argument|const Regex& r
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
name|int
name|l
operator|=
operator|(
name|p
operator|<
literal|0
operator|)
operator|?
operator|-
name|p
operator|:
name|length
argument_list|()
operator|-
name|p
block|;
return|return
name|r
operator|.
name|match
argument_list|(
name|chars
argument_list|()
argument_list|,
name|length
argument_list|()
argument_list|,
name|p
argument_list|)
operator|==
name|l
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|contains
argument_list|(
argument|const char* t
argument_list|)
specifier|const
block|{
return|return
name|S
operator|.
name|search
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|contains
argument_list|(
argument|const String& y
argument_list|)
specifier|const
block|{
return|return
name|S
operator|.
name|search
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|contains
argument_list|(
argument|const SubString&  y
argument_list|)
specifier|const
block|{
return|return
name|S
operator|.
name|search
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
name|y
operator|.
name|chars
argument_list|()
argument_list|,
name|y
operator|.
name|length
argument_list|()
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|contains
argument_list|(
argument|char c
argument_list|)
specifier|const
block|{
return|return
name|S
operator|.
name|search
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|len
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|contains
argument_list|(
argument|const Regex& r
argument_list|)
specifier|const
block|{
name|int
name|unused
block|;
return|return
name|r
operator|.
name|search
argument_list|(
name|chars
argument_list|()
argument_list|,
name|len
argument_list|,
name|unused
argument_list|,
literal|0
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|SubString
operator|::
name|matches
argument_list|(
argument|const Regex& r
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|match
argument_list|(
name|chars
argument_list|()
argument_list|,
name|len
argument_list|,
literal|0
argument_list|)
operator|==
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|gsub
argument_list|(
argument|const String& pat
argument_list|,
argument|const String& r
argument_list|)
block|{
return|return
name|_gsub
argument_list|(
name|pat
operator|.
name|chars
argument_list|()
argument_list|,
name|pat
operator|.
name|length
argument_list|()
argument_list|,
name|r
operator|.
name|chars
argument_list|()
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|gsub
argument_list|(
argument|const SubString&  pat
argument_list|,
argument|const String& r
argument_list|)
block|{
return|return
name|_gsub
argument_list|(
name|pat
operator|.
name|chars
argument_list|()
argument_list|,
name|pat
operator|.
name|length
argument_list|()
argument_list|,
name|r
operator|.
name|chars
argument_list|()
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|gsub
argument_list|(
argument|const Regex& pat
argument_list|,
argument|const String& r
argument_list|)
block|{
return|return
name|_gsub
argument_list|(
name|pat
argument_list|,
name|r
operator|.
name|chars
argument_list|()
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|gsub
argument_list|(
argument|const char* pat
argument_list|,
argument|const String& r
argument_list|)
block|{
return|return
name|_gsub
argument_list|(
name|pat
argument_list|,
operator|-
literal|1
argument_list|,
name|r
operator|.
name|chars
argument_list|()
argument_list|,
name|r
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|String
operator|::
name|gsub
argument_list|(
argument|const char* pat
argument_list|,
argument|const char* r
argument_list|)
block|{
return|return
name|_gsub
argument_list|(
name|pat
argument_list|,
operator|-
literal|1
argument_list|,
name|r
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|String
operator|::
name|operator
specifier|const
name|char
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|str
argument_list|(
name|chars
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|String
operator|&
name|x
operator|)
block|{
ifdef|#
directive|ifdef
name|VMS
name|s
operator|<<
name|x
operator|.
name|chars
argument_list|()
block|;
return|return
name|s
return|;
else|#
directive|else
name|s
operator|.
name|put
argument_list|(
name|x
operator|.
name|chars
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|s
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// a zillion comparison operators
end_comment

begin_expr_stmt
unit|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|String
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|String
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|y
argument_list|,
name|x
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|SubString
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|SubString
operator|&
name|x
operator|,
specifier|const
name|char
operator|*
name|t
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|t
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|// a helper needed by at, before, etc.
end_comment

begin_expr_stmt
specifier|inline
name|SubString
name|String
operator|::
name|_substr
argument_list|(
argument|int first
argument_list|,
argument|int l
argument_list|)
block|{
if|if
condition|(
name|first
operator|<
literal|0
operator|||
call|(
name|unsigned
call|)
argument_list|(
name|first
operator|+
name|l
argument_list|)
operator|>
name|length
argument_list|()
condition|)
return|return
name|SubString
argument_list|(
name|_nilString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
else|else
return|return
name|SubString
argument_list|(
operator|*
name|this
argument_list|,
name|first
argument_list|,
name|l
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

