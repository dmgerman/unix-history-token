begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1989 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Int_h
end_ifndef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_define
define|#
directive|define
name|_Int_h
value|1
end_define

begin_comment
comment|/* compile with      -DBUILTIN  - to get standard ints     -DCALL     - to get calls instead of inlines                   (in which case don't use -finline-functions!)     -DVIRT     - to make all members virtual     -DBYVAL    - to use call-by-value, not by-reference             (-DNO_GNU_CONST - to eliminate calling const functions const               **** REMOVED, NO LONGER SUPPORTED IN g++ ***** )     -DCONVERT  - to eliminate mixed mode fns that avoid constructors     -DNO_NRV   - to eliminate use of named return values     -DFAKEVPTR - to get one pointer per object padding     -DRETREF   - to make =, +=, etc. return *this, not void */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|BUILTIN
end_ifdef

begin_typedef
typedef|typedef
name|int
name|Int
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|CALL
end_ifdef

begin_define
define|#
directive|define
name|INLINE
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|INLINE
value|inline
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|VIRT
end_ifndef

begin_define
define|#
directive|define
name|VIRTUAL
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VIRTUAL
value|virtual
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|BYVAL
end_ifdef

begin_define
define|#
directive|define
name|REF
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|REF
value|&
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CONVERT
end_ifndef

begin_define
define|#
directive|define
name|EXPLICIT
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|RETREF
end_ifndef

begin_define
define|#
directive|define
name|IntR
value|void
end_define

begin_define
define|#
directive|define
name|ReturnIntR
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|IntR
value|Int&
end_define

begin_define
define|#
directive|define
name|ReturnIntr
value|return *this
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|class
name|Int
block|{
name|protected
label|:
name|int
name|rep
decl_stmt|;
ifdef|#
directive|ifdef
name|FAKEVPTR
name|void
modifier|*
name|fake_vptr
decl_stmt|;
endif|#
directive|endif
name|public
label|:
name|Int
argument_list|()
expr_stmt|;
name|Int
argument_list|(
argument|const int  b
argument_list|)
empty_stmt|;
name|Int
argument_list|(
specifier|const
name|Int
operator|&
name|b
argument_list|)
expr_stmt|;
operator|~
name|Int
argument_list|()
expr_stmt|;
name|operator
name|int
argument_list|()
specifier|const
expr_stmt|;
name|VIRTUAL
name|int
name|val
argument_list|()
specifier|const
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
init|=
operator|(
specifier|const
name|int
operator|)
decl_stmt|;
name|VIRTUAL
name|IntR
name|operator
init|=
operator|(
specifier|const
name|Int
operator|&
operator|)
decl_stmt|;
name|VIRTUAL
name|IntR
name|negate
parameter_list|()
function_decl|;
name|VIRTUAL
name|IntR
name|complement
parameter_list|()
function_decl|;
name|VIRTUAL
name|IntR
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|--
operator|(
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|+=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|-=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|*=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|/=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|%=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator||=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|&=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|^=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|<<=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|>>=
operator|(
specifier|const
name|Int
name|REF
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|EXPLICIT
name|VIRTUAL
name|IntR
name|operator
operator|+=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|-=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|*=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|/=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|%=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator||=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|&=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|^=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|<<=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
name|VIRTUAL
name|IntR
name|operator
operator|>>=
operator|(
specifier|const
name|int
operator|)
expr_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|INLINE
name|int
name|Int
operator|::
name|val
argument_list|()
specifier|const
block|{
return|return
name|rep
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
operator|::
name|operator
name|int
argument_list|()
specifier|const
block|{
return|return
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
operator|::
name|Int
argument_list|()
operator|:
name|rep
argument_list|(
literal|0
argument_list|)
block|{}
name|INLINE
name|Int
operator|::
name|Int
argument_list|(
argument|const int  b
argument_list|)
operator|:
name|rep
argument_list|(
argument|b
argument_list|)
block|{}
name|INLINE
name|Int
operator|::
name|Int
argument_list|(
specifier|const
name|Int
operator|&
name|b
argument_list|)
operator|:
name|rep
argument_list|(
argument|b.Int::val()
argument_list|)
block|{}
name|INLINE
name|Int
operator|::
operator|~
name|Int
argument_list|()
block|{}
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Int
operator|&
name|b
operator|)
block|{
name|rep
operator|=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|complement
argument_list|()
block|{
name|rep
operator|=
operator|~
name|rep
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|negate
argument_list|()
block|{
name|rep
operator|=
operator|-
name|rep
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|rep
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|rep
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|%=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator||=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|<<=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|>>=
operator|(
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|rep
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
name|ReturnIntR
block|; }
ifdef|#
directive|ifdef
name|EXPLICIT
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|+=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|-=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|*=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|/=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|%=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|%=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator||=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator||=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|&=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|^=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|<<=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|<<=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|IntR
name|Int
operator|::
name|operator
operator|>>=
operator|(
specifier|const
name|int
name|b
operator|)
block|{
name|rep
operator|>>=
name|b
block|;
name|ReturnIntR
block|; }
name|INLINE
name|int
operator|&
name|operator
operator|=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|+=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|-=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|*=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|/=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|%=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator||=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|&=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|^=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|<<=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
operator|&
name|operator
operator|>>=
operator|(
name|int
operator|&
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|a
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|a
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|NO_NRV
end_ifdef

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|.
name|negate
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|~
operator|(
specifier|const
name|Int
name|REF
name|a
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|.
name|complement
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|*
parameter_list|(
specifier|const
name|Int
name|REF
name|a
parameter_list|,
specifier|const
name|Int
name|REF
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
function|&  (const
name|Int
name|REF
name|a
decl_stmt|,
decl|const
name|Int
name|REF
name|b
decl_stmt|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|^
parameter_list|(
specifier|const
name|Int
name|REF
name|a
parameter_list|,
specifier|const
name|Int
name|REF
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|+=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|-=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|*
parameter_list|(
specifier|const
name|Int
name|REF
name|a
parameter_list|,
specifier|const
name|int
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|*=
name|b
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|/=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|%=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|<<=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|>>=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
function|&  (const
name|Int
name|REF
name|a
decl_stmt|,
decl|const
name|int
name|b
decl_stmt|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|&=
name|b
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator||=
name|b
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|^
parameter_list|(
specifier|const
name|Int
name|REF
name|a
parameter_list|,
specifier|const
name|int
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|^=
name|b
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|*
parameter_list|(
specifier|const
name|int
name|a
parameter_list|,
specifier|const
name|Int
name|REF
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
function|&  (const
name|int
function|a
operator|,
function|const Int REF  b
end_function

begin_block
unit|)
block|{
name|Int
name|r
parameter_list|(
name|a
parameter_list|)
function_decl|;
name|r
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_block

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
block|;
name|r
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
name|INLINE
name|Int
name|operator
modifier|^
parameter_list|(
specifier|const
name|int
name|a
parameter_list|,
specifier|const
name|Int
name|REF
name|b
parameter_list|)
block|{
name|Int
name|r
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|r
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_expr_stmt
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|)
end_expr_stmt

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|.
name|negate
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|~
operator|(
specifier|const
name|Int
name|REF
name|a
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|.
name|complement
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|*
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|&
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|^
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|+=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|-=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|*
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|*=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|/=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|%=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|<<=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|>>=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|&
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|&=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator||=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|^
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|^=
name|b
block|;  }
name|INLINE
name|Int
name|operator
operator|+
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|+=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|-
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|-=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|*
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|*=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|/
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|/=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|%
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|%=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|<<
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|<<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|>>
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|>>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|&
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|&=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator||
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator||=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
name|INLINE
name|Int
name|operator
operator|^
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|a
argument_list|)
block|{
name|r
operator|^=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
block|;  }
endif|#
directive|endif
name|INLINE
name|int
name|operator
operator|!
operator|(
specifier|const
name|Int
name|REF
name|a
operator|)
block|{
return|return
operator|!
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_return

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|==
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|==
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|!=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|<
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|>
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|==
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|==
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|!=
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|<
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|<=
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|>
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Int
name|REF
name|a
operator|,
specifier|const
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|Int
operator|::
name|val
argument_list|()
operator|>=
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|==
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|==
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|!=
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|!=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|<
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|<=
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|<=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|>
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|INLINE
name|int
name|operator
operator|>=
operator|(
specifier|const
name|int
name|a
operator|,
specifier|const
name|Int
name|REF
name|b
operator|)
block|{
return|return
name|a
operator|>=
name|b
operator|.
name|Int
operator|::
name|val
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

