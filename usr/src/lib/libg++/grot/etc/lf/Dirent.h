begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Define a portable UNIX directory-entry manipulation interface.      This code is heavily based upon Doug Gwyn's public domain directory-access    routines.  Hacked into C++ conformance by Doug Schmidt (schmidt@ics.uci.edu). */
end_comment

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_extern
extern|extern
literal|"C"
block|{
include|#
directive|include
file|<sys/dir.h>
block|}
end_extern

begin_ifdef
ifdef|#
directive|ifdef
name|rewinddir
end_ifdef

begin_undef
undef|#
directive|undef
name|rewinddir
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|class
name|Dirent
block|{
name|private
label|:
name|DIR
modifier|*
name|dirp
decl_stmt|;
name|public
label|:
name|Dirent
argument_list|(
name|char
operator|*
name|dirname
argument_list|)
expr_stmt|;
operator|~
name|Dirent
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|struct
name|direct
modifier|*
name|readdir
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|opendir
parameter_list|(
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
name|void
name|closedir
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|long
name|telldir
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|seekdir
parameter_list|(
name|long
name|loc
parameter_list|)
function_decl|;
name|void
name|rewinddir
parameter_list|(
name|void
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_function_decl
specifier|extern
name|void
name|verbose_Dirent_error_handler
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|quiet_Dirent_error_handler
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|fatal_Dirent_error_handler
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|Dirent_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|one_arg_error_handler_t
name|set_Dirent_error_handler
parameter_list|(
name|one_arg_error_handler_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// OPTIMIZE
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__OPTIMIZE__
end_ifdef

begin_expr_stmt
specifier|inline
name|Dirent
operator|::
name|Dirent
argument_list|(
argument|char *dirname
argument_list|)
block|{
if|if
condition|(
operator|(
name|dirp
operator|=
operator|::
name|opendir
argument_list|(
name|dirname
argument_list|)
operator|)
operator|==
literal|0
condition|)
call|(
modifier|*
name|Dirent_error_handler
call|)
argument_list|(
literal|"Dirent::Dirent"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Dirent
operator|::
operator|~
name|Dirent
argument_list|(
argument|void
argument_list|)
block|{
operator|::
name|closedir
argument_list|(
name|dirp
argument_list|)
block|; }
specifier|inline
name|void
name|Dirent
operator|::
name|opendir
argument_list|(
argument|char *dirname
argument_list|)
block|{
if|if
condition|(
operator|(
name|dirp
operator|=
operator|::
name|opendir
argument_list|(
name|dirname
argument_list|)
operator|)
operator|==
literal|0
condition|)
call|(
modifier|*
name|Dirent_error_handler
call|)
argument_list|(
literal|"Dirent::Dirent"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
expr|struct
name|direct
operator|*
name|Dirent
operator|::
name|readdir
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|::
name|readdir
argument_list|(
name|dirp
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|Dirent
operator|::
name|closedir
argument_list|(
argument|void
argument_list|)
block|{
operator|::
name|closedir
argument_list|(
name|dirp
argument_list|)
block|; }
specifier|inline
name|void
name|Dirent
operator|::
name|rewinddir
argument_list|(
argument|void
argument_list|)
block|{
operator|::
name|seekdir
argument_list|(
name|dirp
argument_list|,
name|long
argument_list|(
literal|0
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|Dirent
operator|::
name|seekdir
argument_list|(
argument|long loc
argument_list|)
block|{
operator|::
name|seekdir
argument_list|(
name|dirp
argument_list|,
name|loc
argument_list|)
block|; }
specifier|inline
name|long
name|Dirent
operator|::
name|telldir
argument_list|(
argument|void
argument_list|)
block|{
return|return
operator|::
name|telldir
argument_list|(
name|dirp
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __OPTIMIZE__
end_comment

end_unit

