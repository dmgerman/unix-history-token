begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1987, 1993  *	The Regents of the University of California.  All rights reserved.  *  * %sccs.include.redist.c%  *  *	@(#)trig.h	8.1 (Berkeley) %G%  */
end_comment

begin_include
include|#
directive|include
file|"mathimpl.h"
end_include

begin_macro
name|vc
argument_list|(
argument|thresh
argument_list|,
literal|2.6117239648121182150E
argument|-
literal|1
argument_list|,
argument|b863
argument_list|,
literal|3f85
argument_list|,
literal|6ea0
argument_list|,
literal|6b02
argument_list|,
argument|-
literal|1
argument_list|,
literal|.85B8636B026EA0
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|PIo4
argument_list|,
literal|7.8539816339744830676E
argument|-
literal|1
argument_list|,
literal|0fda
argument_list|,
literal|4049
argument_list|,
literal|68c2
argument_list|,
argument|a221
argument_list|,
literal|0
argument_list|,
argument|.C90FDAA22168C2
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|PIo2
argument_list|,
literal|1.5707963267948966135E0
argument_list|,
literal|0fda
argument_list|,
literal|40c9
argument_list|,
literal|68c2
argument_list|,
argument|a221
argument_list|,
literal|1
argument_list|,
argument|.C90FDAA22168C2
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|PI3o4
argument_list|,
literal|2.3561944901923449203E0
argument_list|,
argument|cbe3
argument_list|,
literal|4116
argument_list|,
literal|0e92
argument_list|,
argument|f999
argument_list|,
literal|2
argument_list|,
literal|.96CBE3F9990E92
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|PI
argument_list|,
literal|3.1415926535897932270E0
argument_list|,
literal|0fda
argument_list|,
literal|4149
argument_list|,
literal|68c2
argument_list|,
argument|a221
argument_list|,
literal|2
argument_list|,
argument|.C90FDAA22168C2
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|PI2
argument_list|,
literal|6.2831853071795864540E0
argument_list|,
literal|0fda
argument_list|,
literal|41c9
argument_list|,
literal|68c2
argument_list|,
argument|a221
argument_list|,
literal|3
argument_list|,
argument|.C90FDAA22168C2
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|thresh
argument_list|,
literal|2.6117239648121182150E
argument|-
literal|1
argument_list|,
argument|-
literal|2
argument_list|,
literal|1.0B70C6D604DD4
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|PIo4
argument_list|,
literal|7.8539816339744827900E
argument|-
literal|1
argument_list|,
argument|-
literal|1
argument_list|,
literal|1.921FB54442D18
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|PIo2
argument_list|,
literal|1.5707963267948965580E0
argument_list|,
literal|0
argument_list|,
literal|1.921FB54442D18
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|PI3o4
argument_list|,
literal|2.3561944901923448370E0
argument_list|,
literal|1
argument_list|,
literal|1.2D97C7F3321D2
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|PI
argument_list|,
literal|3.1415926535897931160E0
argument_list|,
literal|1
argument_list|,
literal|1.921FB54442D18
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|PI2
argument_list|,
literal|6.2831853071795862320E0
argument_list|,
literal|2
argument_list|,
literal|1.921FB54442D18
argument_list|)
end_macro

begin_ifdef
ifdef|#
directive|ifdef
name|vccast
end_ifdef

begin_define
define|#
directive|define
name|thresh
value|vccast(thresh)
end_define

begin_define
define|#
directive|define
name|PIo4
value|vccast(PIo4)
end_define

begin_define
define|#
directive|define
name|PIo2
value|vccast(PIo2)
end_define

begin_define
define|#
directive|define
name|PI3o4
value|vccast(PI3o4)
end_define

begin_define
define|#
directive|define
name|PI
value|vccast(PI)
end_define

begin_define
define|#
directive|define
name|PI2
value|vccast(PI2)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|national
end_ifdef

begin_decl_stmt
specifier|static
name|long
name|fmaxx
index|[]
init|=
block|{
literal|0xffffffff
block|,
literal|0x7fefffff
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|fmax
value|(*(double*)fmaxx)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* national */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|double
name|zero
init|=
literal|0
decl_stmt|,
name|one
init|=
literal|1
decl_stmt|,
name|negone
init|=
operator|-
literal|1
decl_stmt|,
name|half
init|=
literal|1.0
operator|/
literal|2.0
decl_stmt|,
name|small
init|=
literal|1E
operator|-
literal|10
decl_stmt|,
comment|/* 1+small**2 == 1; better values for small: 			 *		small	= 1.5E-9 for VAX D 			 *			= 1.2E-8 for IEEE Double 			 *			= 2.8E-10 for IEEE Extended 			 */
name|big
init|=
literal|1E20
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* big := 1/(small**2) */
end_comment

begin_comment
comment|/* sin__S(x*x) ... re-implemented as a macro  * DOUBLE PRECISION (VAX D format 56 bits, IEEE DOUBLE 53 BITS)  * STATIC KERNEL FUNCTION OF SIN(X), COS(X), AND TAN(X)   * CODED IN C BY K.C. NG, 1/21/85;   * REVISED BY K.C. NG on 8/13/85.  *  *	    sin(x*k) - x  * RETURN  --------------- on [-PI/4,PI/4] , where k=pi/PI, PI is the rounded  *	            x	  * value of pi in machine precision:  *  *	Decimal:  *		pi = 3.141592653589793 23846264338327 .....   *    53 bits   PI = 3.141592653589793 115997963 ..... ,  *    56 bits   PI = 3.141592653589793 227020265 ..... ,    *  *	Hexadecimal:  *		pi = 3.243F6A8885A308D313198A2E....  *    53 bits   PI = 3.243F6A8885A30  =  2 * 1.921FB54442D18  *    56 bits   PI = 3.243F6A8885A308 =  4 * .C90FDAA22168C2      *  * Method:  *	1. Let z=x*x. Create a polynomial approximation to   *	    (sin(k*x)-x)/x  =  z*(S0 + S1*z^1 + ... + S5*z^5).  *	Then  *      sin__S(x*x) = z*(S0 + S1*z^1 + ... + S5*z^5)  *  *	The coefficient S's are obtained by a special Remez algorithm.  *  * Accuracy:  *	In the absence of rounding error, the approximation has absolute error   *	less than 2**(-61.11) for VAX D FORMAT, 2**(-57.45) for IEEE DOUBLE.   *  * Constants:  * The hexadecimal values are the intended ones for the following constants.  * The decimal values may be used, provided that the compiler will convert  * from decimal to binary accurately enough to produce the hexadecimal values  * shown.  *  */
end_comment

begin_macro
name|vc
argument_list|(
argument|S0
argument_list|,
argument|-
literal|1.6666666666666646660E
argument|-
literal|1
argument_list|,
argument|aaaa
argument_list|,
argument|bf2a
argument_list|,
argument|aa71
argument_list|,
argument|aaaa
argument_list|,
argument|-
literal|2
argument_list|,
argument|-.AAAAAAAAAAAA71
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S1
argument_list|,
literal|8.3333333333297230413E
argument|-
literal|3
argument_list|,
literal|8888
argument_list|,
literal|3d08
argument_list|,
literal|477f
argument_list|,
literal|8888
argument_list|,
argument|-
literal|6
argument_list|,
literal|.8888888888477F
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S2
argument_list|,
argument|-
literal|1.9841269838362403710E
argument|-
literal|4
argument_list|,
literal|0d00
argument_list|,
argument|ba50
argument_list|,
literal|1057
argument_list|,
argument|cf8a
argument_list|,
argument|-
literal|12
argument_list|,
argument|-.D00D00CF8A1057
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S3
argument_list|,
literal|2.7557318019967078930E
argument|-
literal|6
argument_list|,
argument|ef1c
argument_list|,
literal|3738
argument_list|,
argument|bedc
argument_list|,
argument|a326
argument_list|,
argument|-
literal|18
argument_list|,
argument|.B8EF1CA326BEDC
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S4
argument_list|,
argument|-
literal|2.5051841873876551398E
argument|-
literal|8
argument_list|,
literal|3195
argument_list|,
argument|b3d7
argument_list|,
argument|e1d3
argument_list|,
literal|374c
argument_list|,
argument|-
literal|25
argument_list|,
argument|-.D73195374CE1D3
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S5
argument_list|,
literal|1.6028995389845827653E
argument|-
literal|10
argument_list|,
literal|3d9c
argument_list|,
literal|3030
argument_list|,
argument|cccc
argument_list|,
literal|6d26
argument_list|,
argument|-
literal|32
argument_list|,
argument|.B03D9C6D26CCCC
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|S6
argument_list|,
argument|-
literal|6.2723499671769283121E
argument|-
literal|13
argument_list|,
literal|8d0b
argument_list|,
argument|ac30
argument_list|,
argument|ea82
argument_list|,
literal|7561
argument_list|,
argument|-
literal|40
argument_list|,
argument|-.B08D0B7561EA82
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S0
argument_list|,
argument|-
literal|1.6666666666666463126E
argument|-
literal|1
argument_list|,
argument|-
literal|3
argument_list|,
argument|-
literal|1.555555555550C
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S1
argument_list|,
literal|8.3333333332992771264E
argument|-
literal|3
argument_list|,
argument|-
literal|7
argument_list|,
literal|1.111111110C461
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S2
argument_list|,
argument|-
literal|1.9841269816180999116E
argument|-
literal|4
argument_list|,
argument|-
literal|13
argument_list|,
argument|-
literal|1.A01A019746345
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S3
argument_list|,
literal|2.7557309793219876880E
argument|-
literal|6
argument_list|,
argument|-
literal|19
argument_list|,
literal|1.71DE3209CDCD9
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S4
argument_list|,
argument|-
literal|2.5050225177523807003E
argument|-
literal|8
argument_list|,
argument|-
literal|26
argument_list|,
argument|-
literal|1.AE5C0E319A4EF
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|S5
argument_list|,
literal|1.5868926979889205164E
argument|-
literal|10
argument_list|,
argument|-
literal|33
argument_list|,
literal|1.5CF61DF672B13
argument_list|)
end_macro

begin_ifdef
ifdef|#
directive|ifdef
name|vccast
end_ifdef

begin_define
define|#
directive|define
name|S0
value|vccast(S0)
end_define

begin_define
define|#
directive|define
name|S1
value|vccast(S1)
end_define

begin_define
define|#
directive|define
name|S2
value|vccast(S2)
end_define

begin_define
define|#
directive|define
name|S3
value|vccast(S3)
end_define

begin_define
define|#
directive|define
name|S4
value|vccast(S4)
end_define

begin_define
define|#
directive|define
name|S5
value|vccast(S5)
end_define

begin_define
define|#
directive|define
name|S6
value|vccast(S6)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|vax
argument_list|)
operator|||
name|defined
argument_list|(
name|tahoe
argument_list|)
end_if

begin_define
define|#
directive|define
name|sin__S
parameter_list|(
name|z
parameter_list|)
value|(z*(S0+z*(S1+z*(S2+z*(S3+z*(S4+z*(S5+z*S6)))))))
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* defined(vax)||defined(tahoe) */
end_comment

begin_define
define|#
directive|define
name|sin__S
parameter_list|(
name|z
parameter_list|)
value|(z*(S0+z*(S1+z*(S2+z*(S3+z*(S4+z*S5))))))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined(vax)||defined(tahoe) */
end_comment

begin_comment
comment|/* cos__C(x*x) ... re-implemented as a macro  * DOUBLE PRECISION (VAX D FORMAT 56 BITS, IEEE DOUBLE 53 BITS)  * STATIC KERNEL FUNCTION OF SIN(X), COS(X), AND TAN(X)   * CODED IN C BY K.C. NG, 1/21/85;   * REVISED BY K.C. NG on 8/13/85.  *  *	   		    x*x	  * RETURN   cos(k*x) - 1 + ----- on [-PI/4,PI/4],  where k = pi/PI,  *	  		     2	  * PI is the rounded value of pi in machine precision :  *  *	Decimal:  *		pi = 3.141592653589793 23846264338327 .....   *    53 bits   PI = 3.141592653589793 115997963 ..... ,  *    56 bits   PI = 3.141592653589793 227020265 ..... ,    *  *	Hexadecimal:  *		pi = 3.243F6A8885A308D313198A2E....  *    53 bits   PI = 3.243F6A8885A30  =  2 * 1.921FB54442D18  *    56 bits   PI = 3.243F6A8885A308 =  4 * .C90FDAA22168C2      *  *  * Method:  *	1. Let z=x*x. Create a polynomial approximation to   *	    cos(k*x)-1+z/2  =  z*z*(C0 + C1*z^1 + ... + C5*z^5)  *	then  *      cos__C(z) =  z*z*(C0 + C1*z^1 + ... + C5*z^5)  *  *	The coefficient C's are obtained by a special Remez algorithm.  *  * Accuracy:  *	In the absence of rounding error, the approximation has absolute error   *	less than 2**(-64) for VAX D FORMAT, 2**(-58.3) for IEEE DOUBLE.   *	  *  * Constants:  * The hexadecimal values are the intended ones for the following constants.  * The decimal values may be used, provided that the compiler will convert  * from decimal to binary accurately enough to produce the hexadecimal values  * shown.  */
end_comment

begin_macro
name|vc
argument_list|(
argument|C0
argument_list|,
literal|4.1666666666666504759E
argument|-
literal|2
argument_list|,
argument|aaaa
argument_list|,
literal|3e2a
argument_list|,
argument|a9f0
argument_list|,
argument|aaaa
argument_list|,
argument|-
literal|4
argument_list|,
argument|.AAAAAAAAAAA9F0
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|C1
argument_list|,
argument|-
literal|1.3888888888865302059E
argument|-
literal|3
argument_list|,
literal|0b60
argument_list|,
argument|bbb6
argument_list|,
literal|0cca
argument_list|,
argument|b60a
argument_list|,
argument|-
literal|9
argument_list|,
argument|-.B60B60B60A0CCA
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|C2
argument_list|,
literal|2.4801587285601038265E
argument|-
literal|5
argument_list|,
literal|0d00
argument_list|,
literal|38d0
argument_list|,
literal|098f
argument_list|,
argument|cdcd
argument_list|,
argument|-
literal|15
argument_list|,
argument|.D00D00CDCD098F
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|C3
argument_list|,
argument|-
literal|2.7557313470902390219E
argument|-
literal|7
argument_list|,
argument|f27b
argument_list|,
argument|b593
argument_list|,
argument|e805
argument_list|,
argument|b593
argument_list|,
argument|-
literal|21
argument_list|,
argument|-
literal|.93F27BB593E805
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|C4
argument_list|,
literal|2.0875623401082232009E
argument|-
literal|9
argument_list|,
literal|74c8
argument_list|,
literal|320f
argument_list|,
literal|3ff0
argument_list|,
argument|fa1e
argument_list|,
argument|-
literal|28
argument_list|,
literal|.8F74C8FA1E3FF0
argument_list|)
end_macro

begin_macro
name|vc
argument_list|(
argument|C5
argument_list|,
argument|-
literal|1.1355178117642986178E
argument|-
literal|11
argument_list|,
argument|c32d
argument_list|,
argument|ae47
argument_list|,
literal|5a63
argument_list|,
literal|0a5c
argument_list|,
argument|-
literal|36
argument_list|,
argument|-.C7C32D0A5C5A63
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C0
argument_list|,
literal|4.1666666666666504759E
argument|-
literal|2
argument_list|,
argument|-
literal|5
argument_list|,
literal|1.555555555553E
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C1
argument_list|,
argument|-
literal|1.3888888888865301516E
argument|-
literal|3
argument_list|,
argument|-
literal|10
argument_list|,
argument|-
literal|1.6C16C16C14199
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C2
argument_list|,
literal|2.4801587269650015769E
argument|-
literal|5
argument_list|,
argument|-
literal|16
argument_list|,
literal|1.A01A01971CAEB
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C3
argument_list|,
argument|-
literal|2.7557304623183959811E
argument|-
literal|7
argument_list|,
argument|-
literal|22
argument_list|,
argument|-
literal|1.27E4F1314AD1A
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C4
argument_list|,
literal|2.0873958177697780076E
argument|-
literal|9
argument_list|,
argument|-
literal|29
argument_list|,
literal|1.1EE3B60DDDC8C
argument_list|)
end_macro

begin_macro
name|ic
argument_list|(
argument|C5
argument_list|,
argument|-
literal|1.1250289076471311557E
argument|-
literal|11
argument_list|,
argument|-
literal|37
argument_list|,
argument|-
literal|1.8BD5986B2A52E
argument_list|)
end_macro

begin_ifdef
ifdef|#
directive|ifdef
name|vccast
end_ifdef

begin_define
define|#
directive|define
name|C0
value|vccast(C0)
end_define

begin_define
define|#
directive|define
name|C1
value|vccast(C1)
end_define

begin_define
define|#
directive|define
name|C2
value|vccast(C2)
end_define

begin_define
define|#
directive|define
name|C3
value|vccast(C3)
end_define

begin_define
define|#
directive|define
name|C4
value|vccast(C4)
end_define

begin_define
define|#
directive|define
name|C5
value|vccast(C5)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|cos__C
parameter_list|(
name|z
parameter_list|)
value|(z*z*(C0+z*(C1+z*(C2+z*(C3+z*(C4+z*C5))))))
end_define

end_unit

