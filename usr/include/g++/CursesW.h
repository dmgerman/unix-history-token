begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1989 Free Software Foundation     written by Eric Newton (newton@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CursesWindow_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_CursesWindow_h
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<curses.h>
end_include

begin_comment
comment|/*  *  * C++ class for windows.  *  *  */
end_comment

begin_decl_stmt
name|class
name|CursesWindow
block|{
name|protected
label|:
specifier|static
name|int
name|count
decl_stmt|;
comment|// count of all active windows:
comment|//   We rely on the c++ promise that
comment|//   all otherwise uninitialized
comment|//   static class vars are set to 0
name|WINDOW
modifier|*
name|w
decl_stmt|;
comment|// the curses WINDOW
name|int
name|alloced
decl_stmt|;
comment|// true if we own the WINDOW
name|CursesWindow
modifier|*
name|par
decl_stmt|;
comment|// parent, if subwindow
name|CursesWindow
modifier|*
name|subwins
decl_stmt|;
comment|// head of subwindows list
name|CursesWindow
modifier|*
name|sib
decl_stmt|;
comment|// next subwindow of parent
name|void
name|kill_subwindows
parameter_list|()
function_decl|;
comment|// disable all subwindows
name|public
label|:
name|CursesWindow
argument_list|(
name|WINDOW
operator|*
operator|&
name|window
argument_list|)
expr_stmt|;
comment|// useful only for stdscr
name|CursesWindow
argument_list|(
argument|int lines
argument_list|,
comment|// number of lines
argument|int cols
argument_list|,
comment|// number of columns
argument|int begin_y
argument_list|,
comment|// line origin
argument|int begin_x
argument_list|)
empty_stmt|;
comment|// col origin
name|CursesWindow
argument_list|(
argument|CursesWindow& par
argument_list|,
comment|// parent window
argument|int lines
argument_list|,
comment|// number of lines
argument|int cols
argument_list|,
comment|// number of columns
argument|int by
argument_list|,
comment|// absolute or relative
argument|int bx
argument_list|,
comment|//   origins:
argument|char absrel =
literal|'a'
argument_list|)
empty_stmt|;
comment|// if `a', by& bx are
comment|// absolute screen pos,
comment|// else if `r', they are
comment|// relative to par origin
operator|~
name|CursesWindow
argument_list|()
expr_stmt|;
comment|// terminal status
name|int
name|lines
parameter_list|()
function_decl|;
comment|// number of lines on terminal, *not* window
name|int
name|cols
parameter_list|()
function_decl|;
comment|// number of cols  on terminal, *not* window
comment|// window status
name|int
name|height
parameter_list|()
function_decl|;
comment|// number of lines in this window
name|int
name|width
parameter_list|()
function_decl|;
comment|// number of cols in this window
name|int
name|begx
parameter_list|()
function_decl|;
comment|// smallest x coord in window
name|int
name|begy
parameter_list|()
function_decl|;
comment|// smallest y coord in window
name|int
name|maxx
parameter_list|()
function_decl|;
comment|// largest  x coord in window
name|int
name|maxy
parameter_list|()
function_decl|;
comment|// largest  x coord in window
comment|// window positioning
name|int
name|move
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
function_decl|;
comment|// coordinate positioning
name|void
name|getyx
parameter_list|(
name|int
modifier|&
name|y
parameter_list|,
name|int
modifier|&
name|x
parameter_list|)
function_decl|;
name|int
name|mvcur
parameter_list|(
name|int
name|sy
parameter_list|,
name|int
name|ey
parameter_list|,
name|int
name|sx
parameter_list|,
name|int
name|ex
parameter_list|)
function_decl|;
comment|// input
name|int
name|getch
parameter_list|()
function_decl|;
name|int
name|getstr
parameter_list|(
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|scanw
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|// input + positioning
name|int
name|mvgetch
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
function_decl|;
name|int
name|mvgetstr
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|mvscanw
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|// output
name|int
name|addch
parameter_list|(
specifier|const
name|char
name|ch
parameter_list|)
function_decl|;
name|int
name|addstr
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|printw
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|inch
parameter_list|()
function_decl|;
name|int
name|insch
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|int
name|insertln
parameter_list|()
function_decl|;
comment|// output + positioning
name|int
name|mvaddch
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|char
name|ch
parameter_list|)
function_decl|;
name|int
name|mvaddstr
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|int
name|mvprintw
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|mvinch
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
function_decl|;
name|int
name|mvinsch
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|,
name|char
name|ch
parameter_list|)
function_decl|;
comment|// borders
name|int
name|box
parameter_list|(
name|char
name|vert
parameter_list|,
name|char
name|hor
parameter_list|)
function_decl|;
comment|// erasure
name|int
name|erase
parameter_list|()
function_decl|;
name|int
name|clear
parameter_list|()
function_decl|;
name|int
name|clearok
parameter_list|(
name|cbool
name|bf
parameter_list|)
function_decl|;
name|int
name|clrtobot
parameter_list|()
function_decl|;
name|int
name|clrtoeol
parameter_list|()
function_decl|;
name|int
name|delch
parameter_list|()
function_decl|;
name|int
name|mvdelch
parameter_list|(
name|int
name|y
parameter_list|,
name|int
name|x
parameter_list|)
function_decl|;
name|int
name|deleteln
parameter_list|()
function_decl|;
comment|// screen control
name|int
name|scroll
parameter_list|()
function_decl|;
name|int
name|scrollok
parameter_list|(
name|cbool
name|bf
parameter_list|)
function_decl|;
name|int
name|touchwin
parameter_list|()
function_decl|;
name|int
name|refresh
parameter_list|()
function_decl|;
name|int
name|leaveok
parameter_list|(
name|cbool
name|bf
parameter_list|)
function_decl|;
name|int
name|flushok
parameter_list|(
name|cbool
name|bf
parameter_list|)
function_decl|;
name|int
name|standout
parameter_list|()
function_decl|;
name|int
name|standend
parameter_list|()
function_decl|;
comment|// multiple window control
name|int
name|overlay
parameter_list|(
name|CursesWindow
modifier|&
name|win
parameter_list|)
function_decl|;
name|int
name|overwrite
parameter_list|(
name|CursesWindow
modifier|&
name|win
parameter_list|)
function_decl|;
comment|// traversal support
name|CursesWindow
modifier|*
name|child
parameter_list|()
function_decl|;
name|CursesWindow
modifier|*
name|sibling
parameter_list|()
function_decl|;
name|CursesWindow
modifier|*
name|parent
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|begx
argument_list|()
block|{
return|return
name|w
operator|->
name|_begx
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|begy
argument_list|()
block|{
return|return
name|w
operator|->
name|_begy
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|maxx
argument_list|()
block|{
return|return
name|w
operator|->
name|_maxx
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|maxy
argument_list|()
block|{
return|return
name|w
operator|->
name|_maxy
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|height
argument_list|()
block|{
return|return
name|maxy
argument_list|()
operator|-
name|begy
argument_list|()
operator|+
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|width
argument_list|()
block|{
return|return
name|maxx
argument_list|()
operator|-
name|begx
argument_list|()
operator|+
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|box
argument_list|(
argument|char vert
argument_list|,
argument|char  hor
argument_list|)
block|{
return|return
operator|::
name|box
argument_list|(
name|w
argument_list|,
name|vert
argument_list|,
name|hor
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|overlay
argument_list|(
argument|CursesWindow&win
argument_list|)
block|{
return|return
operator|::
name|overlay
argument_list|(
name|w
argument_list|,
name|win
operator|.
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|overwrite
argument_list|(
argument|CursesWindow&win
argument_list|)
block|{
return|return
operator|::
name|overwrite
argument_list|(
name|w
argument_list|,
name|win
operator|.
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|scroll
argument_list|()
block|{
return|return
operator|::
name|scroll
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|touchwin
argument_list|()
block|{
return|return
operator|::
name|touchwin
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|addch
argument_list|(
argument|const char ch
argument_list|)
block|{
return|return
operator|::
name|waddch
argument_list|(
name|w
argument_list|,
name|ch
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|addstr
argument_list|(
argument|const char * str
argument_list|)
block|{
return|return
operator|::
name|waddstr
argument_list|(
name|w
argument_list|,
name|str
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|clear
argument_list|()
block|{
return|return
operator|::
name|wclear
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|clrtobot
argument_list|()
block|{
return|return
operator|::
name|wclrtobot
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|clrtoeol
argument_list|()
block|{
return|return
operator|::
name|wclrtoeol
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|delch
argument_list|()
block|{
return|return
operator|::
name|wdelch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|deleteln
argument_list|()
block|{
return|return
operator|::
name|wdeleteln
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|erase
argument_list|()
block|{
return|return
operator|::
name|werase
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|getch
argument_list|()
block|{
return|return
operator|::
name|wgetch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|getstr
argument_list|(
argument|char * str
argument_list|)
block|{
return|return
operator|::
name|wgetstr
argument_list|(
name|w
argument_list|,
name|str
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|inch
argument_list|()
block|{
return|return
name|winch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|insch
argument_list|(
argument|char c
argument_list|)
block|{
return|return
operator|::
name|winsch
argument_list|(
name|w
argument_list|,
name|c
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|insertln
argument_list|()
block|{
return|return
operator|::
name|winsertln
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|move
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|)
block|{
return|return
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvcur
argument_list|(
argument|int sy
argument_list|,
argument|int ey
argument_list|,
argument|int sx
argument_list|,
argument|int ex
argument_list|)
block|{
return|return
operator|::
name|mvcur
argument_list|(
name|sy
argument_list|,
name|ey
argument_list|,
name|sx
argument_list|,
name|ex
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvaddch
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|,
argument|char ch
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|waddch
argument_list|(
name|w
argument_list|,
name|ch
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvgetch
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|wgetch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvaddstr
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|,
argument|char * str
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|waddstr
argument_list|(
name|w
argument_list|,
name|str
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvgetstr
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|,
argument|char * str
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|wgetstr
argument_list|(
name|w
argument_list|,
name|str
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvinch
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|winch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvdelch
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|wdelch
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|mvinsch
argument_list|(
argument|int y
argument_list|,
argument|int x
argument_list|,
argument|char ch
argument_list|)
block|{
return|return
operator|(
operator|::
name|wmove
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|::
name|winsch
argument_list|(
name|w
argument_list|,
name|ch
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|refresh
argument_list|()
block|{
return|return
operator|::
name|wrefresh
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|clearok
argument_list|(
argument|cbool bf
argument_list|)
block|{
return|return
operator|::
name|clearok
argument_list|(
name|w
argument_list|,
name|bf
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|leaveok
argument_list|(
argument|cbool bf
argument_list|)
block|{
return|return
operator|::
name|leaveok
argument_list|(
name|w
argument_list|,
name|bf
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|scrollok
argument_list|(
argument|cbool bf
argument_list|)
block|{
return|return
operator|::
name|scrollok
argument_list|(
name|w
argument_list|,
name|bf
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|flushok
argument_list|(
argument|cbool bf
argument_list|)
block|{
return|return
operator|::
name|flushok
argument_list|(
name|w
argument_list|,
name|bf
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|CursesWindow
operator|::
name|getyx
argument_list|(
argument|int& y
argument_list|,
argument|int& x
argument_list|)
block|{
operator|::
name|getyx
argument_list|(
name|w
argument_list|,
name|y
argument_list|,
name|x
argument_list|)
block|;  }
specifier|inline
name|int
name|CursesWindow
operator|::
name|standout
argument_list|()
block|{
return|return
operator|::
name|wstandout
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|standend
argument_list|()
block|{
return|return
operator|::
name|wstandend
argument_list|(
name|w
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|lines
argument_list|()
block|{
return|return
name|LINES
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|CursesWindow
operator|::
name|cols
argument_list|()
block|{
return|return
name|COLS
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|CursesWindow
operator|*
name|CursesWindow
operator|::
name|child
argument_list|()
block|{
return|return
name|subwins
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|CursesWindow
operator|*
name|CursesWindow
operator|::
name|parent
argument_list|()
block|{
return|return
name|par
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|CursesWindow
operator|*
name|CursesWindow
operator|::
name|sibling
argument_list|()
block|{
return|return
name|sib
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

