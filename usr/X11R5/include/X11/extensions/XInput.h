begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $Header: XInput.h,v 1.14 91/07/24 15:33:51 rws Exp $ */
end_comment

begin_comment
comment|/************************************************************ Copyright (c) 1989 by Hewlett-Packard Company, Palo Alto, California, and the  Massachusetts Institute of Technology, Cambridge, Massachusetts.  			All Rights Reserved  Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the names of Hewlett-Packard or MIT not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.  HEWLETT-PACKARD DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL HEWLETT-PACKARD BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ********************************************************/
end_comment

begin_comment
comment|/* Definitions used by the library and client */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_XINPUT_H_
end_ifndef

begin_define
define|#
directive|define
name|_XINPUT_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|_XLIB_H_
end_ifndef

begin_include
include|#
directive|include
file|<X11/Xlib.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_XI_H_
end_ifndef

begin_include
include|#
directive|include
file|"XI.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_deviceKeyPress
value|0
end_define

begin_define
define|#
directive|define
name|_deviceKeyRelease
value|1
end_define

begin_define
define|#
directive|define
name|_deviceButtonPress
value|0
end_define

begin_define
define|#
directive|define
name|_deviceButtonRelease
value|1
end_define

begin_define
define|#
directive|define
name|_deviceMotionNotify
value|0
end_define

begin_define
define|#
directive|define
name|_deviceFocusIn
value|0
end_define

begin_define
define|#
directive|define
name|_deviceFocusOut
value|1
end_define

begin_define
define|#
directive|define
name|_proximityIn
value|0
end_define

begin_define
define|#
directive|define
name|_proximityOut
value|1
end_define

begin_define
define|#
directive|define
name|_deviceStateNotify
value|0
end_define

begin_define
define|#
directive|define
name|_deviceMappingNotify
value|1
end_define

begin_define
define|#
directive|define
name|_changeDeviceNotify
value|2
end_define

begin_define
define|#
directive|define
name|FindTypeAndClass
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|,
name|classid
parameter_list|,
name|offset
parameter_list|)
define|\
value|{ int i; XInputClassInfo *ip; \     type = 0; _class = 0; \     for (i=0, ip= ((XDevice *) d)->classes; \ 	 i< ((XDevice *) d)->num_classes; \ 	 i++, ip++) \ 	if (ip->input_class == classid) \ 	    {type =  ip->event_type_base + offset; \ 	     _class =  ((XDevice *) d)->device_id<< 8 | type;}}
end_define

begin_define
define|#
directive|define
name|DeviceKeyPress
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, KeyClass, _deviceKeyPress)
end_define

begin_define
define|#
directive|define
name|DeviceKeyRelease
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, KeyClass, _deviceKeyRelease)
end_define

begin_define
define|#
directive|define
name|DeviceButtonPress
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, ButtonClass, _deviceButtonPress)
end_define

begin_define
define|#
directive|define
name|DeviceButtonRelease
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, ButtonClass, _deviceButtonRelease)
end_define

begin_define
define|#
directive|define
name|DeviceMotionNotify
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, ValuatorClass, _deviceMotionNotify)
end_define

begin_define
define|#
directive|define
name|DeviceFocusIn
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, FocusClass, _deviceFocusIn)
end_define

begin_define
define|#
directive|define
name|DeviceFocusOut
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, FocusClass, _deviceFocusOut)
end_define

begin_define
define|#
directive|define
name|ProximityIn
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, ProximityClass, _proximityIn)
end_define

begin_define
define|#
directive|define
name|ProximityOut
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, ProximityClass, _proximityOut)
end_define

begin_define
define|#
directive|define
name|DeviceStateNotify
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, OtherClass, _deviceStateNotify)
end_define

begin_define
define|#
directive|define
name|DeviceMappingNotify
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, OtherClass, _deviceMappingNotify)
end_define

begin_define
define|#
directive|define
name|ChangeDeviceNotify
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|FindTypeAndClass(d, type, _class, OtherClass, _changeDeviceNotify)
end_define

begin_define
define|#
directive|define
name|DevicePointerMotionHint
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _devicePointerMotionHint;}
end_define

begin_define
define|#
directive|define
name|DeviceButton1Motion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButton1Motion;}
end_define

begin_define
define|#
directive|define
name|DeviceButton2Motion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButton2Motion;}
end_define

begin_define
define|#
directive|define
name|DeviceButton3Motion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButton3Motion;}
end_define

begin_define
define|#
directive|define
name|DeviceButton4Motion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButton4Motion;}
end_define

begin_define
define|#
directive|define
name|DeviceButton5Motion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButton5Motion;}
end_define

begin_define
define|#
directive|define
name|DeviceButtonMotion
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButtonMotion;}
end_define

begin_define
define|#
directive|define
name|DeviceOwnerGrabButton
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceOwnerGrabButton;}
end_define

begin_define
define|#
directive|define
name|DeviceButtonPressGrab
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _deviceButtonGrab;}
end_define

begin_define
define|#
directive|define
name|NoExtensionEvent
parameter_list|(
name|d
parameter_list|,
name|type
parameter_list|,
name|_class
parameter_list|)
define|\
value|{ _class =  ((XDevice *) d)->device_id<< 8 | _noExtensionEvent;}
end_define

begin_define
define|#
directive|define
name|BadDevice
parameter_list|(
name|dpy
parameter_list|,
name|error
parameter_list|)
value|_xibaddevice(dpy,&error)
end_define

begin_define
define|#
directive|define
name|BadClass
parameter_list|(
name|dpy
parameter_list|,
name|error
parameter_list|)
value|_xibadclass(dpy,&error)
end_define

begin_define
define|#
directive|define
name|BadEvent
parameter_list|(
name|dpy
parameter_list|,
name|error
parameter_list|)
value|_xibadevent(dpy,&error)
end_define

begin_define
define|#
directive|define
name|BadMode
parameter_list|(
name|dpy
parameter_list|,
name|error
parameter_list|)
value|_xibadmode(dpy,&error)
end_define

begin_define
define|#
directive|define
name|DeviceBusy
parameter_list|(
name|dpy
parameter_list|,
name|error
parameter_list|)
value|_xidevicebusy(dpy,&error)
end_define

begin_comment
comment|/***************************************************************  *  * DeviceKey events.  These events are sent by input devices that  * support input class Keys.  * The location of the X pointer is reported in the coordinate  * fields of the x,y and x_root,y_root fields.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* of event */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if from SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* "event" window reported relative to */
name|XID
name|deviceid
decl_stmt|;
name|Window
name|root
decl_stmt|;
comment|/* root window event occured on */
name|Window
name|subwindow
decl_stmt|;
comment|/* child window */
name|Time
name|time
decl_stmt|;
comment|/* milliseconds */
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/* x, y coordinates in event window */
name|int
name|x_root
decl_stmt|;
comment|/* coordinates relative to root */
name|int
name|y_root
decl_stmt|;
comment|/* coordinates relative to root */
name|unsigned
name|int
name|state
decl_stmt|;
comment|/* key or button mask */
name|unsigned
name|int
name|keycode
decl_stmt|;
comment|/* detail */
name|Bool
name|same_screen
decl_stmt|;
comment|/* same screen flag */
name|unsigned
name|int
name|device_state
decl_stmt|;
comment|/* device key or button mask */
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|unsigned
name|char
name|first_axis
decl_stmt|;
name|int
name|axis_data
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XDeviceKeyEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceKeyEvent
name|XDeviceKeyPressedEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceKeyEvent
name|XDeviceKeyReleasedEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * DeviceButton events.  These events are sent by extension devices  * that support input class Buttons.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* of event */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* "event" window reported relative to */
name|XID
name|deviceid
decl_stmt|;
name|Window
name|root
decl_stmt|;
comment|/* root window that the event occured on */
name|Window
name|subwindow
decl_stmt|;
comment|/* child window */
name|Time
name|time
decl_stmt|;
comment|/* milliseconds */
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/* x, y coordinates in event window */
name|int
name|x_root
decl_stmt|;
comment|/* coordinates relative to root */
name|int
name|y_root
decl_stmt|;
comment|/* coordinates relative to root */
name|unsigned
name|int
name|state
decl_stmt|;
comment|/* key or button mask */
name|unsigned
name|int
name|button
decl_stmt|;
comment|/* detail */
name|Bool
name|same_screen
decl_stmt|;
comment|/* same screen flag */
name|unsigned
name|int
name|device_state
decl_stmt|;
comment|/* device key or button mask */
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|unsigned
name|char
name|first_axis
decl_stmt|;
name|int
name|axis_data
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XDeviceButtonEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceButtonEvent
name|XDeviceButtonPressedEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceButtonEvent
name|XDeviceButtonReleasedEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * DeviceMotionNotify event.  These events are sent by extension devices  * that support input class Valuators.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* of event */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* "event" window reported relative to */
name|XID
name|deviceid
decl_stmt|;
name|Window
name|root
decl_stmt|;
comment|/* root window that the event occured on */
name|Window
name|subwindow
decl_stmt|;
comment|/* child window */
name|Time
name|time
decl_stmt|;
comment|/* milliseconds */
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
comment|/* x, y coordinates in event window */
name|int
name|x_root
decl_stmt|;
comment|/* coordinates relative to root */
name|int
name|y_root
decl_stmt|;
comment|/* coordinates relative to root */
name|unsigned
name|int
name|state
decl_stmt|;
comment|/* key or button mask */
name|char
name|is_hint
decl_stmt|;
comment|/* detail */
name|Bool
name|same_screen
decl_stmt|;
comment|/* same screen flag */
name|unsigned
name|int
name|device_state
decl_stmt|;
comment|/* device key or button mask */
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|unsigned
name|char
name|first_axis
decl_stmt|;
name|int
name|axis_data
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XDeviceMotionEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * DeviceFocusChange events.  These events are sent when the focus  * of an extension device that can be focused is changed.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* of event */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* "event" window reported relative to */
name|XID
name|deviceid
decl_stmt|;
name|int
name|mode
decl_stmt|;
comment|/* NotifyNormal, NotifyGrab, NotifyUngrab */
name|int
name|detail
decl_stmt|;
comment|/* 	 * NotifyAncestor, NotifyVirtual, NotifyInferior,  	 * NotifyNonLinear,NotifyNonLinearVirtual, NotifyPointer, 	 * NotifyPointerRoot, NotifyDetailNone  	 */
name|Time
name|time
decl_stmt|;
block|}
name|XDeviceFocusChangeEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceFocusChangeEvent
name|XDeviceFocusInEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XDeviceFocusChangeEvent
name|XDeviceFocusOutEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * ProximityNotify events.  These events are sent by those absolute  * positioning devices that are capable of generating proximity information.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
comment|/* ProximityIn or ProximityOut */
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|Window
name|root
decl_stmt|;
name|Window
name|subwindow
decl_stmt|;
name|Time
name|time
decl_stmt|;
name|int
name|x
decl_stmt|,
name|y
decl_stmt|;
name|int
name|x_root
decl_stmt|,
name|y_root
decl_stmt|;
name|unsigned
name|int
name|state
decl_stmt|;
name|Bool
name|same_screen
decl_stmt|;
name|unsigned
name|int
name|device_state
decl_stmt|;
comment|/* device key or button mask */
name|unsigned
name|char
name|axes_count
decl_stmt|;
name|unsigned
name|char
name|first_axis
decl_stmt|;
name|int
name|axis_data
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XProximityNotifyEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XProximityNotifyEvent
name|XProximityInEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|XProximityNotifyEvent
name|XProximityOutEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * DeviceStateNotify events are generated on EnterWindow and FocusIn   * for those clients who have selected DeviceState.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
block|}
name|XInputClass
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
name|XID
name|deviceid
decl_stmt|;
name|Time
name|time
decl_stmt|;
name|int
name|num_classes
decl_stmt|;
name|char
name|data
index|[
literal|64
index|]
decl_stmt|;
block|}
name|XDeviceStateNotifyEvent
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|unsigned
name|char
name|num_valuators
decl_stmt|;
name|unsigned
name|char
name|mode
decl_stmt|;
name|int
name|valuators
index|[
literal|6
index|]
decl_stmt|;
block|}
name|XValuatorStatus
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|short
name|num_keys
decl_stmt|;
name|char
name|keys
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XKeyStatus
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|short
name|num_buttons
decl_stmt|;
name|char
name|buttons
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XButtonStatus
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * DeviceMappingNotify event.  This event is sent when the key mapping,  * modifier mapping, or button mapping of an extension device is changed.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* unused */
name|XID
name|deviceid
decl_stmt|;
name|Time
name|time
decl_stmt|;
name|int
name|request
decl_stmt|;
comment|/* one of MappingModifier, MappingKeyboard,                                     MappingPointer */
name|int
name|first_keycode
decl_stmt|;
comment|/* first keycode */
name|int
name|count
decl_stmt|;
comment|/* defines range of change w. first_keycode*/
block|}
name|XDeviceMappingEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * ChangeDeviceNotify event.  This event is sent when an   * XChangeKeyboard or XChangePointer request is made.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|unsigned
name|long
name|serial
decl_stmt|;
comment|/* # of last request processed by server */
name|Bool
name|send_event
decl_stmt|;
comment|/* true if this came from a SendEvent request */
name|Display
modifier|*
name|display
decl_stmt|;
comment|/* Display the event was read from */
name|Window
name|window
decl_stmt|;
comment|/* unused */
name|XID
name|deviceid
decl_stmt|;
name|Time
name|time
decl_stmt|;
name|int
name|request
decl_stmt|;
comment|/* NewPointer or NewKeyboard */
block|}
name|XChangeDeviceNotifyEvent
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * Control structures for input devices that support input class  * Feedback.  These are used by the XGetFeedbackControl and   * XChangeFeedbackControl functions.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
block|}
name|XFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|click
decl_stmt|;
name|int
name|percent
decl_stmt|;
name|int
name|pitch
decl_stmt|;
name|int
name|duration
decl_stmt|;
name|int
name|led_mask
decl_stmt|;
name|int
name|global_auto_repeat
decl_stmt|;
name|char
name|auto_repeats
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XKbdFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|accelNum
decl_stmt|;
name|int
name|accelDenom
decl_stmt|;
name|int
name|threshold
decl_stmt|;
block|}
name|XPtrFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|resolution
decl_stmt|;
name|int
name|minVal
decl_stmt|;
name|int
name|maxVal
decl_stmt|;
block|}
name|XIntegerFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|max_symbols
decl_stmt|;
name|int
name|num_syms_supported
decl_stmt|;
name|KeySym
modifier|*
name|syms_supported
decl_stmt|;
block|}
name|XStringFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|percent
decl_stmt|;
name|int
name|pitch
decl_stmt|;
name|int
name|duration
decl_stmt|;
block|}
name|XBellFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|led_values
decl_stmt|;
name|int
name|led_mask
decl_stmt|;
block|}
name|XLedFeedbackState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
block|}
name|XFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|accelNum
decl_stmt|;
name|int
name|accelDenom
decl_stmt|;
name|int
name|threshold
decl_stmt|;
block|}
name|XPtrFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|click
decl_stmt|;
name|int
name|percent
decl_stmt|;
name|int
name|pitch
decl_stmt|;
name|int
name|duration
decl_stmt|;
name|int
name|led_mask
decl_stmt|;
name|int
name|led_value
decl_stmt|;
name|int
name|key
decl_stmt|;
name|int
name|auto_repeat_mode
decl_stmt|;
block|}
name|XKbdFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|num_keysyms
decl_stmt|;
name|KeySym
modifier|*
name|syms_to_display
decl_stmt|;
block|}
name|XStringFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|int_to_display
decl_stmt|;
block|}
name|XIntegerFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|percent
decl_stmt|;
name|int
name|pitch
decl_stmt|;
name|int
name|duration
decl_stmt|;
block|}
name|XBellFeedbackControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|XID
name|id
decl_stmt|;
name|int
name|led_mask
decl_stmt|;
name|int
name|led_values
decl_stmt|;
block|}
name|XLedFeedbackControl
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * Device control structures.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|XID
name|control
decl_stmt|;
name|int
name|length
decl_stmt|;
block|}
name|XDeviceControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|XID
name|control
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|first_valuator
decl_stmt|;
name|int
name|num_valuators
decl_stmt|;
name|int
modifier|*
name|resolutions
decl_stmt|;
block|}
name|XDeviceResolutionControl
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|XID
name|control
decl_stmt|;
name|int
name|length
decl_stmt|;
name|int
name|num_valuators
decl_stmt|;
name|int
modifier|*
name|resolutions
decl_stmt|;
name|int
modifier|*
name|min_resolutions
decl_stmt|;
name|int
modifier|*
name|max_resolutions
decl_stmt|;
block|}
name|XDeviceResolutionState
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * An array of XDeviceList structures is returned by the   * XListInputDevices function.  Each entry contains information  * about one input device.  Among that information is an array of   * pointers to structures that describe the characteristics of   * the input device.  *  */
end_comment

begin_typedef
typedef|typedef
name|struct
name|_XAnyClassinfo
modifier|*
name|XAnyClassPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XAnyClassinfo
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
block|}
name|XAnyClassInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_XDeviceInfo
modifier|*
name|XDeviceInfoPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XDeviceInfo
block|{
name|XID
name|id
decl_stmt|;
name|Atom
name|type
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|num_classes
decl_stmt|;
name|int
name|use
decl_stmt|;
name|XAnyClassPtr
name|inputclassinfo
decl_stmt|;
block|}
name|XDeviceInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_XKeyInfo
modifier|*
name|XKeyInfoPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XKeyInfo
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|unsigned
name|short
name|min_keycode
decl_stmt|;
name|unsigned
name|short
name|max_keycode
decl_stmt|;
name|unsigned
name|short
name|num_keys
decl_stmt|;
block|}
name|XKeyInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_XButtonInfo
modifier|*
name|XButtonInfoPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XButtonInfo
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|short
name|num_buttons
decl_stmt|;
block|}
name|XButtonInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_XAxisInfo
modifier|*
name|XAxisInfoPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XAxisInfo
block|{
name|int
name|resolution
decl_stmt|;
name|int
name|min_value
decl_stmt|;
name|int
name|max_value
decl_stmt|;
block|}
name|XAxisInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|_XValuatorInfo
modifier|*
name|XValuatorInfoPtr
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_XValuatorInfo
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|XID
name|c_class
decl_stmt|;
else|#
directive|else
name|XID
name|class
decl_stmt|;
endif|#
directive|endif
name|int
name|length
decl_stmt|;
name|unsigned
name|char
name|num_axes
decl_stmt|;
name|unsigned
name|char
name|mode
decl_stmt|;
name|unsigned
name|long
name|motion_buffer
decl_stmt|;
name|XAxisInfoPtr
name|axes
decl_stmt|;
block|}
name|XValuatorInfo
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * An XDevice structure is returned by the XOpenDevice function.    * It contains an array of pointers to XInputClassInfo structures.  * Each contains information about a class of input supported by the  * device, including a pointer to an array of data for each type of event  * the device reports.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|unsigned
name|char
name|input_class
decl_stmt|;
name|unsigned
name|char
name|event_type_base
decl_stmt|;
block|}
name|XInputClassInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|XID
name|device_id
decl_stmt|;
name|int
name|num_classes
decl_stmt|;
name|XInputClassInfo
modifier|*
name|classes
decl_stmt|;
block|}
name|XDevice
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * The following structure is used to return information for the   * XGetSelectedExtensionEvents function.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|XEventClass
name|event_type
decl_stmt|;
name|XID
name|device
decl_stmt|;
block|}
name|XEventList
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * The following structure is used to return motion history data from   * an input device that supports the input class Valuators.  * This information is returned by the XGetDeviceMotionEvents function.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|Time
name|time
decl_stmt|;
name|int
modifier|*
name|data
decl_stmt|;
block|}
name|XDeviceTimeCoord
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * Device state structure.  * This is returned by the XQueryDeviceState request.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|XID
name|device_id
decl_stmt|;
name|int
name|num_classes
decl_stmt|;
name|XInputClass
modifier|*
name|data
decl_stmt|;
block|}
name|XDeviceState
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * Note that the mode field is a bitfield that reports the Proximity  * status of the device as well as the mode.  The mode field should  * be OR'd with the mask DeviceMode and compared with the values  * Absolute and Relative to determine the mode, and should be OR'd  * with the mask ProximityState and compared with the values InProximity  * and OutOfProximity to determine the proximity state.  *  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|unsigned
name|char
name|num_valuators
decl_stmt|;
name|unsigned
name|char
name|mode
decl_stmt|;
name|int
modifier|*
name|valuators
decl_stmt|;
block|}
name|XValuatorState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|short
name|num_keys
decl_stmt|;
name|char
name|keys
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XKeyState
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|unsigned
name|char
name|c_class
decl_stmt|;
else|#
directive|else
name|unsigned
name|char
name|class
decl_stmt|;
endif|#
directive|endif
name|unsigned
name|char
name|length
decl_stmt|;
name|short
name|num_buttons
decl_stmt|;
name|char
name|buttons
index|[
literal|32
index|]
decl_stmt|;
block|}
name|XButtonState
typedef|;
end_typedef

begin_comment
comment|/*******************************************************************  *  * Function definitions.  *  */
end_comment

begin_function_decl
name|XDevice
modifier|*
name|XOpenDevice
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XDeviceInfo
modifier|*
name|XListInputDevices
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XDeviceTimeCoord
modifier|*
name|XGetDeviceMotionEvents
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|KeySym
modifier|*
name|XGetDeviceKeyMapping
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XModifierKeymap
modifier|*
name|XGetDeviceModifierMapping
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XFeedbackState
modifier|*
name|XGetFeedbackControl
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XExtensionVersion
modifier|*
name|XGetExtensionVersion
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XDeviceState
modifier|*
name|XQueryDeviceState
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|XEventClass
modifier|*
name|XGetDeviceDontPropagateList
parameter_list|()
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _XINPUT_H_ */
end_comment

end_unit

