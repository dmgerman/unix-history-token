begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *	$XConsortium: Xproto.h,v 1.85 91/04/06 12:57:05 rws Exp $  */
end_comment

begin_comment
comment|/* Definitions for the X window system used by server and c bindings */
end_comment

begin_comment
comment|/*  * This packet-construction scheme makes the following assumptions:  *  * 1. The compiler is able  * to generate code which addresses one- and two-byte quantities.  * In the worst case, this would be done with bit-fields.  If bit-fields  * are used it may be necessary to reorder the request fields in this file,  * depending on the order in which the machine assigns bit fields to  * machine words.  There may also be a problem with sign extension,  * as K+R specify that bitfields are always unsigned.  *  * 2. 2- and 4-byte fields in packet structures must be ordered by hand  * such that they are naturally-aligned, so that no compiler will ever  * insert padding bytes.  *  * 3. All packets are hand-padded to a multiple of 4 bytes, for  * the same reason.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XPROTO_H
end_ifndef

begin_define
define|#
directive|define
name|XPROTO_H
end_define

begin_comment
comment|/*********************************************************** Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts, and the Massachusetts Institute of Technology, Cambridge, Massachusetts.                          All Rights Reserved  Permission to use, copy, modify, and distribute this software and its  documentation for any purpose and without fee is hereby granted,  provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in  supporting documentation, and that the names of Digital or MIT not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.    DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ******************************************************************/
end_comment

begin_include
include|#
directive|include
file|<X11/Xmd.h>
end_include

begin_include
include|#
directive|include
file|<X11/Xprotostr.h>
end_include

begin_comment
comment|/*  * Define constants for the sizes of the network packets.  The sz_ prefix is  * used instead of something more descriptive so that the symbols are no more  * than 32 characters in length (which causes problems for some compilers).  */
end_comment

begin_define
define|#
directive|define
name|sz_xSegment
value|8
end_define

begin_define
define|#
directive|define
name|sz_xPoint
value|4
end_define

begin_define
define|#
directive|define
name|sz_xRectangle
value|8
end_define

begin_define
define|#
directive|define
name|sz_xArc
value|12
end_define

begin_define
define|#
directive|define
name|sz_xConnClientPrefix
value|12
end_define

begin_define
define|#
directive|define
name|sz_xConnSetupPrefix
value|8
end_define

begin_define
define|#
directive|define
name|sz_xConnSetup
value|32
end_define

begin_define
define|#
directive|define
name|sz_xPixmapFormat
value|8
end_define

begin_define
define|#
directive|define
name|sz_xDepth
value|8
end_define

begin_define
define|#
directive|define
name|sz_xVisualType
value|24
end_define

begin_define
define|#
directive|define
name|sz_xWindowRoot
value|40
end_define

begin_define
define|#
directive|define
name|sz_xTimecoord
value|8
end_define

begin_define
define|#
directive|define
name|sz_xHostEntry
value|4
end_define

begin_define
define|#
directive|define
name|sz_xCharInfo
value|12
end_define

begin_define
define|#
directive|define
name|sz_xFontProp
value|8
end_define

begin_define
define|#
directive|define
name|sz_xTextElt
value|2
end_define

begin_define
define|#
directive|define
name|sz_xColorItem
value|12
end_define

begin_define
define|#
directive|define
name|sz_xrgb
value|8
end_define

begin_define
define|#
directive|define
name|sz_xGenericReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetWindowAttributesReply
value|44
end_define

begin_define
define|#
directive|define
name|sz_xGetGeometryReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryTreeReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xInternAtomReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetAtomNameReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetPropertyReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListPropertiesReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetSelectionOwnerReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGrabPointerReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryPointerReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetMotionEventsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xTranslateCoordsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetInputFocusReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryKeymapReply
value|40
end_define

begin_define
define|#
directive|define
name|sz_xQueryFontReply
value|60
end_define

begin_define
define|#
directive|define
name|sz_xQueryTextExtentsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListFontsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetFontPathReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetImageReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListInstalledColormapsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xAllocNamedColorReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorCellsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorPlanesReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryColorsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xLookupColorReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryBestSizeReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xQueryExtensionReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListExtensionsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xSetMappingReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetKeyboardControlReply
value|52
end_define

begin_define
define|#
directive|define
name|sz_xGetPointerControlReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetScreenSaverReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListHostsReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xSetModifierMappingReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xError
value|32
end_define

begin_define
define|#
directive|define
name|sz_xEvent
value|32
end_define

begin_define
define|#
directive|define
name|sz_xKeymapEvent
value|32
end_define

begin_define
define|#
directive|define
name|sz_xReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xResourceReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xCreateWindowReq
value|32
end_define

begin_define
define|#
directive|define
name|sz_xChangeWindowAttributesReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xChangeSaveSetReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xReparentWindowReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xConfigureWindowReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xCirculateWindowReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xInternAtomReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xChangePropertyReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xDeletePropertyReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xGetPropertyReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xSetSelectionOwnerReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xConvertSelectionReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xSendEventReq
value|44
end_define

begin_define
define|#
directive|define
name|sz_xGrabPointerReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xGrabButtonReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xUngrabButtonReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xChangeActivePointerGrabReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xGrabKeyboardReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xGrabKeyReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xUngrabKeyReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xAllowEventsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xGetMotionEventsReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xTranslateCoordsReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xWarpPointerReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xSetInputFocusReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xOpenFontReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xQueryTextExtentsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xListFontsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xSetFontPathReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xCreatePixmapReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xCreateGCReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xChangeGCReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xCopyGCReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xSetDashesReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xSetClipRectanglesReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xCopyAreaReq
value|28
end_define

begin_define
define|#
directive|define
name|sz_xCopyPlaneReq
value|32
end_define

begin_define
define|#
directive|define
name|sz_xPolyPointReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolySegmentReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xFillPolyReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xPutImageReq
value|24
end_define

begin_define
define|#
directive|define
name|sz_xGetImageReq
value|20
end_define

begin_define
define|#
directive|define
name|sz_xPolyTextReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xImageTextReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xCreateColormapReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xCopyColormapAndFreeReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xAllocNamedColorReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorCellsReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xAllocColorPlanesReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xFreeColorsReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xStoreColorsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xStoreNamedColorReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xQueryColorsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xLookupColorReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xCreateCursorReq
value|32
end_define

begin_define
define|#
directive|define
name|sz_xCreateGlyphCursorReq
value|32
end_define

begin_define
define|#
directive|define
name|sz_xRecolorCursorReq
value|20
end_define

begin_define
define|#
directive|define
name|sz_xQueryBestSizeReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xQueryExtensionReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xChangeKeyboardControlReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xBellReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xChangePointerControlReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xSetScreenSaverReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xChangeHostsReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xListHostsReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xChangeModeReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xRotatePropertiesReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGrabKeyboardReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListFontsWithInfoReply
value|60
end_define

begin_define
define|#
directive|define
name|sz_xSetPointerMappingReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetKeyboardMappingReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xGetPointerMappingReply
value|32
end_define

begin_define
define|#
directive|define
name|sz_xListFontsWithInfoReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xPolyLineReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolyArcReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolyRectangleReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolyFillRectangleReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolyFillArcReq
value|12
end_define

begin_define
define|#
directive|define
name|sz_xPolyText8Req
value|16
end_define

begin_define
define|#
directive|define
name|sz_xPolyText16Req
value|16
end_define

begin_define
define|#
directive|define
name|sz_xImageText8Req
value|16
end_define

begin_define
define|#
directive|define
name|sz_xImageText16Req
value|16
end_define

begin_define
define|#
directive|define
name|sz_xSetPointerMappingReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xForceScreenSaverReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xSetCloseDownModeReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xClearAreaReq
value|16
end_define

begin_define
define|#
directive|define
name|sz_xSetAccessControlReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xGetKeyboardMappingReq
value|8
end_define

begin_define
define|#
directive|define
name|sz_xSetModifierMappingReq
value|4
end_define

begin_define
define|#
directive|define
name|sz_xPropIconSize
value|24
end_define

begin_define
define|#
directive|define
name|sz_xChangeKeyboardMappingReq
value|8
end_define

begin_comment
comment|/* For the purpose of the structure definitions in this file, we must redefine the following types in terms of Xmd.h's types, which may include bit fields.  All of these are #undef'd at the end of this file, restoring the definitions in X.h.  */
end_comment

begin_define
define|#
directive|define
name|Window
value|CARD32
end_define

begin_define
define|#
directive|define
name|Drawable
value|CARD32
end_define

begin_define
define|#
directive|define
name|Font
value|CARD32
end_define

begin_define
define|#
directive|define
name|Pixmap
value|CARD32
end_define

begin_define
define|#
directive|define
name|Cursor
value|CARD32
end_define

begin_define
define|#
directive|define
name|Colormap
value|CARD32
end_define

begin_define
define|#
directive|define
name|GContext
value|CARD32
end_define

begin_define
define|#
directive|define
name|Atom
value|CARD32
end_define

begin_define
define|#
directive|define
name|VisualID
value|CARD32
end_define

begin_define
define|#
directive|define
name|Time
value|CARD32
end_define

begin_define
define|#
directive|define
name|KeyCode
value|CARD8
end_define

begin_define
define|#
directive|define
name|KeySym
value|CARD32
end_define

begin_define
define|#
directive|define
name|X_TCP_PORT
value|6000
end_define

begin_comment
comment|/* add display number */
end_comment

begin_define
define|#
directive|define
name|xTrue
value|1
end_define

begin_define
define|#
directive|define
name|xFalse
value|0
end_define

begin_typedef
typedef|typedef
name|CARD16
name|KeyButMask
typedef|;
end_typedef

begin_comment
comment|/*****************     connection setup structure.  This is followed by    numRoots xWindowRoot structs. *****************/
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|byteOrder
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|majorVersion
name|B16
decl_stmt|,
name|minorVersion
name|B16
decl_stmt|;
name|CARD16
name|nbytesAuthProto
name|B16
decl_stmt|;
comment|/* Authorization protocol */
name|CARD16
name|nbytesAuthString
name|B16
decl_stmt|;
comment|/* Authorization string */
name|CARD16
name|pad2
decl_stmt|;
block|}
name|xConnClientPrefix
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BOOL
name|success
decl_stmt|;
name|BYTE
name|lengthReason
decl_stmt|;
comment|/*num bytes in string following if failure */
name|CARD16
name|majorVersion
name|B16
decl_stmt|,
name|minorVersion
name|B16
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
comment|/* 1/4 additional bytes in setup info */
block|}
name|xConnSetupPrefix
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD32
name|release
name|B32
decl_stmt|;
name|CARD32
name|ridBase
name|B32
decl_stmt|,
name|ridMask
name|B32
decl_stmt|;
name|CARD32
name|motionBufferSize
name|B32
decl_stmt|;
name|CARD16
name|nbytesVendor
name|B16
decl_stmt|;
comment|/* number of bytes in vendor string */
name|CARD16
name|maxRequestSize
name|B16
decl_stmt|;
name|CARD8
name|numRoots
decl_stmt|;
comment|/* number of roots structs to follow */
name|CARD8
name|numFormats
decl_stmt|;
comment|/* number of pixmap formats */
name|CARD8
name|imageByteOrder
decl_stmt|;
comment|/* LSBFirst, MSBFirst */
name|CARD8
name|bitmapBitOrder
decl_stmt|;
comment|/* LeastSignificant, MostSign...*/
name|CARD8
name|bitmapScanlineUnit
decl_stmt|,
comment|/* 8, 16, 32 */
name|bitmapScanlinePad
decl_stmt|;
comment|/* 8, 16, 32 */
name|KeyCode
name|minKeyCode
decl_stmt|,
name|maxKeyCode
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
block|}
name|xConnSetup
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|depth
decl_stmt|;
name|CARD8
name|bitsPerPixel
decl_stmt|;
name|CARD8
name|scanLinePad
decl_stmt|;
name|CARD8
name|pad1
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
block|}
name|xPixmapFormat
typedef|;
end_typedef

begin_comment
comment|/* window root */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|depth
decl_stmt|;
name|CARD8
name|pad1
decl_stmt|;
name|CARD16
name|nVisuals
name|B16
decl_stmt|;
comment|/* number of xVisualType structures following */
name|CARD32
name|pad2
name|B32
decl_stmt|;
block|}
name|xDepth
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|VisualID
name|visualID
name|B32
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|CARD8
name|c_class
decl_stmt|;
else|#
directive|else
name|CARD8
name|class
decl_stmt|;
endif|#
directive|endif
name|CARD8
name|bitsPerRGB
decl_stmt|;
name|CARD16
name|colormapEntries
name|B16
decl_stmt|;
name|CARD32
name|redMask
name|B32
decl_stmt|,
name|greenMask
name|B32
decl_stmt|,
name|blueMask
name|B32
decl_stmt|;
name|CARD32
name|pad
name|B32
decl_stmt|;
block|}
name|xVisualType
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|Window
name|windowId
name|B32
decl_stmt|;
name|Colormap
name|defaultColormap
name|B32
decl_stmt|;
name|CARD32
name|whitePixel
name|B32
decl_stmt|,
name|blackPixel
name|B32
decl_stmt|;
name|CARD32
name|currentInputMask
name|B32
decl_stmt|;
name|CARD16
name|pixWidth
name|B16
decl_stmt|,
name|pixHeight
name|B16
decl_stmt|;
name|CARD16
name|mmWidth
name|B16
decl_stmt|,
name|mmHeight
name|B16
decl_stmt|;
name|CARD16
name|minInstalledMaps
name|B16
decl_stmt|,
name|maxInstalledMaps
name|B16
decl_stmt|;
name|VisualID
name|rootVisualID
name|B32
decl_stmt|;
name|CARD8
name|backingStore
decl_stmt|;
name|BOOL
name|saveUnders
decl_stmt|;
name|CARD8
name|rootDepth
decl_stmt|;
name|CARD8
name|nDepths
decl_stmt|;
comment|/* number of xDepth structures following */
block|}
name|xWindowRoot
typedef|;
end_typedef

begin_escape
end_escape

begin_comment
comment|/*****************************************************************  * Structure Defns  *   Structures needed for replies   *****************************************************************/
end_comment

begin_comment
comment|/* Used in GetMotionEvents */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD32
name|time
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
block|}
name|xTimecoord
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|family
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xHostEntry
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|INT16
name|leftSideBearing
name|B16
decl_stmt|,
name|rightSideBearing
name|B16
decl_stmt|,
name|characterWidth
name|B16
decl_stmt|,
name|ascent
name|B16
decl_stmt|,
name|descent
name|B16
decl_stmt|;
name|CARD16
name|attributes
name|B16
decl_stmt|;
block|}
name|xCharInfo
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|Atom
name|name
name|B32
decl_stmt|;
name|CARD32
name|value
name|B32
decl_stmt|;
block|}
name|xFontProp
typedef|;
end_typedef

begin_comment
comment|/*  * non-aligned big-endian font ID follows this struct  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* followed by string */
name|CARD8
name|len
decl_stmt|;
comment|/* number of *characters* in string, or FontChange (255) 		   for font change, or 0 if just delta given */
name|INT8
name|delta
decl_stmt|;
block|}
name|xTextElt
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD32
name|pixel
name|B32
decl_stmt|;
name|CARD16
name|red
name|B16
decl_stmt|,
name|green
name|B16
decl_stmt|,
name|blue
name|B16
decl_stmt|;
name|CARD8
name|flags
decl_stmt|;
comment|/* DoRed, DoGreen, DoBlue booleans */
name|CARD8
name|pad
decl_stmt|;
block|}
name|xColorItem
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD16
name|red
name|B16
decl_stmt|,
name|green
name|B16
decl_stmt|,
name|blue
name|B16
decl_stmt|,
name|pad
name|B16
decl_stmt|;
block|}
name|xrgb
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|CARD8
name|KEYCODE
typedef|;
end_typedef

begin_escape
end_escape

begin_comment
comment|/*****************  * XRep:  *    meant to be 32 byte quantity   *****************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_REPLIES
end_ifdef

begin_comment
comment|/* GenericReply is the common format of all replies.  The "data" items    are specific to each individual reply type. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|data1
decl_stmt|;
comment|/* depends on reply type */
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
comment|/* of last request received by server */
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 4 byte quantities beyond size of GenericReply */
name|CARD32
name|data00
name|B32
decl_stmt|;
name|CARD32
name|data01
name|B32
decl_stmt|;
name|CARD32
name|data02
name|B32
decl_stmt|;
name|CARD32
name|data03
name|B32
decl_stmt|;
name|CARD32
name|data04
name|B32
decl_stmt|;
name|CARD32
name|data05
name|B32
decl_stmt|;
block|}
name|xGenericReply
typedef|;
end_typedef

begin_comment
comment|/* Individual reply formats. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|backingStore
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* NOT 0; this is an extra-large reply */
name|VisualID
name|visualID
name|B32
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|CARD16
name|c_class
name|B16
decl_stmt|;
else|#
directive|else
name|CARD16
name|class
name|B16
decl_stmt|;
endif|#
directive|endif
name|CARD8
name|bitGravity
decl_stmt|;
name|CARD8
name|winGravity
decl_stmt|;
name|CARD32
name|backingBitPlanes
name|B32
decl_stmt|;
name|CARD32
name|backingPixel
name|B32
decl_stmt|;
name|BOOL
name|saveUnder
decl_stmt|;
name|BOOL
name|mapInstalled
decl_stmt|;
name|CARD8
name|mapState
decl_stmt|;
name|BOOL
name|override
decl_stmt|;
name|Colormap
name|colormap
name|B32
decl_stmt|;
name|CARD32
name|allEventMasks
name|B32
decl_stmt|;
name|CARD32
name|yourEventMask
name|B32
decl_stmt|;
name|CARD16
name|doNotPropagateMask
name|B16
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xGetWindowAttributesReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|depth
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Window
name|root
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD16
name|borderWidth
name|B16
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
block|}
name|xGetGeometryReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|Window
name|root
name|B32
decl_stmt|,
name|parent
name|B32
decl_stmt|;
name|CARD16
name|nChildren
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
block|}
name|xQueryTreeReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Atom
name|atom
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xInternAtomReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* of additional bytes */
name|CARD16
name|nameLength
name|B16
decl_stmt|;
comment|/* # of characters in name */
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xGetAtomNameReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|format
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* of additional bytes */
name|Atom
name|propertyType
name|B32
decl_stmt|;
name|CARD32
name|bytesAfter
name|B32
decl_stmt|;
name|CARD32
name|nItems
name|B32
decl_stmt|;
comment|/* # of 8, 16, or 32-bit entities in reply */
name|CARD32
name|pad1
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
block|}
name|xGetPropertyReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nProperties
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xListPropertiesReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Window
name|owner
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGetSelectionOwnerReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|status
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD32
name|pad1
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGrabPointerReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xGrabPointerReply
name|xGrabKeyboardReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BOOL
name|sameScreen
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Window
name|root
name|B32
decl_stmt|,
name|child
name|B32
decl_stmt|;
name|INT16
name|rootX
name|B16
decl_stmt|,
name|rootY
name|B16
decl_stmt|,
name|winX
name|B16
decl_stmt|,
name|winY
name|B16
decl_stmt|;
name|CARD16
name|mask
name|B16
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
name|CARD32
name|pad
name|B32
decl_stmt|;
block|}
name|xQueryPointerReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|nEvents
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGetMotionEventsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BOOL
name|sameScreen
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Window
name|child
name|B32
decl_stmt|;
name|INT16
name|dstX
name|B16
decl_stmt|,
name|dstY
name|B16
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
block|}
name|xTranslateCoordsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|revertTo
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|Window
name|focus
name|B32
decl_stmt|;
name|CARD32
name|pad1
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
block|}
name|xGetInputFocusReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 2, NOT 0; this is an extra-large reply */
name|BYTE
name|map
index|[
literal|32
index|]
decl_stmt|;
block|}
name|xQueryKeymapReply
typedef|;
end_typedef

begin_comment
comment|/* Warning: this MUST match (up to component renaming) xListFontsWithInfoReply */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* definitely> 0, even if "nCharInfos" is 0 */
name|xCharInfo
name|minBounds
decl_stmt|;
ifndef|#
directive|ifndef
name|WORD64
name|CARD32
name|walign1
name|B32
decl_stmt|;
endif|#
directive|endif
name|xCharInfo
name|maxBounds
decl_stmt|;
ifndef|#
directive|ifndef
name|WORD64
name|CARD32
name|walign2
name|B32
decl_stmt|;
endif|#
directive|endif
name|CARD16
name|minCharOrByte2
name|B16
decl_stmt|,
name|maxCharOrByte2
name|B16
decl_stmt|;
name|CARD16
name|defaultChar
name|B16
decl_stmt|;
name|CARD16
name|nFontProps
name|B16
decl_stmt|;
comment|/* followed by this many xFontProp structures */
name|CARD8
name|drawDirection
decl_stmt|;
name|CARD8
name|minByte1
decl_stmt|,
name|maxByte1
decl_stmt|;
name|BOOL
name|allCharsExist
decl_stmt|;
name|INT16
name|fontAscent
name|B16
decl_stmt|,
name|fontDescent
name|B16
decl_stmt|;
name|CARD32
name|nCharInfos
name|B32
decl_stmt|;
comment|/* followed by this many xCharInfo structures */
block|}
name|xQueryFontReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|drawDirection
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|INT16
name|fontAscent
name|B16
decl_stmt|,
name|fontDescent
name|B16
decl_stmt|;
name|INT16
name|overallAscent
name|B16
decl_stmt|,
name|overallDescent
name|B16
decl_stmt|;
name|INT32
name|overallWidth
name|B32
decl_stmt|,
name|overallLeft
name|B32
decl_stmt|,
name|overallRight
name|B32
decl_stmt|;
name|CARD32
name|pad
name|B32
decl_stmt|;
block|}
name|xQueryTextExtentsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nFonts
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xListFontsReply
typedef|;
end_typedef

begin_comment
comment|/* Warning: this MUST match (up to component renaming) xQueryFontReply */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|nameLength
decl_stmt|;
comment|/* 0 indicates end-of-reply-sequence */
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* definitely> 0, even if "nameLength" is 0 */
name|xCharInfo
name|minBounds
decl_stmt|;
ifndef|#
directive|ifndef
name|WORD64
name|CARD32
name|walign1
name|B32
decl_stmt|;
endif|#
directive|endif
name|xCharInfo
name|maxBounds
decl_stmt|;
ifndef|#
directive|ifndef
name|WORD64
name|CARD32
name|walign2
name|B32
decl_stmt|;
endif|#
directive|endif
name|CARD16
name|minCharOrByte2
name|B16
decl_stmt|,
name|maxCharOrByte2
name|B16
decl_stmt|;
name|CARD16
name|defaultChar
name|B16
decl_stmt|;
name|CARD16
name|nFontProps
name|B16
decl_stmt|;
comment|/* followed by this many xFontProp structures */
name|CARD8
name|drawDirection
decl_stmt|;
name|CARD8
name|minByte1
decl_stmt|,
name|maxByte1
decl_stmt|;
name|BOOL
name|allCharsExist
decl_stmt|;
name|INT16
name|fontAscent
name|B16
decl_stmt|,
name|fontDescent
name|B16
decl_stmt|;
name|CARD32
name|nReplies
name|B32
decl_stmt|;
comment|/* hint as to how many more replies might be coming */
block|}
name|xListFontsWithInfoReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nPaths
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xGetFontPathReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|depth
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|VisualID
name|visual
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xGetImageReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nColormaps
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xListInstalledColormapsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD16
name|red
name|B16
decl_stmt|,
name|green
name|B16
decl_stmt|,
name|blue
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pixel
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
block|}
name|xAllocColorReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD32
name|pixel
name|B32
decl_stmt|;
name|CARD16
name|exactRed
name|B16
decl_stmt|,
name|exactGreen
name|B16
decl_stmt|,
name|exactBlue
name|B16
decl_stmt|;
name|CARD16
name|screenRed
name|B16
decl_stmt|,
name|screenGreen
name|B16
decl_stmt|,
name|screenBlue
name|B16
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
block|}
name|xAllocNamedColorReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nPixels
name|B16
decl_stmt|,
name|nMasks
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xAllocColorCellsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nPixels
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|redMask
name|B32
decl_stmt|,
name|greenMask
name|B32
decl_stmt|,
name|blueMask
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
block|}
name|xAllocColorPlanesReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nColors
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xQueryColorsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD16
name|exactRed
name|B16
decl_stmt|,
name|exactGreen
name|B16
decl_stmt|,
name|exactBlue
name|B16
decl_stmt|;
name|CARD16
name|screenRed
name|B16
decl_stmt|,
name|screenGreen
name|B16
decl_stmt|,
name|screenBlue
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
block|}
name|xLookupColorReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xQueryBestSizeReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|BOOL
name|present
decl_stmt|;
name|CARD8
name|major_opcode
decl_stmt|;
name|CARD8
name|first_event
decl_stmt|;
name|CARD8
name|first_error
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xQueryExtensionReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|nExtensions
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xListExtensionsReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|success
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xSetMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xSetMappingReply
name|xSetPointerMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xSetMappingReply
name|xSetModifierMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|CARD8
name|nElts
decl_stmt|;
comment|/* how many elements does the map have */
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xGetPointerMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
name|CARD8
name|keySymsPerKeyCode
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xGetKeyboardMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
name|CARD8
name|numKeyPerModifier
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD32
name|pad1
name|B32
decl_stmt|;
name|CARD32
name|pad2
name|B32
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGetModifierMappingReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BOOL
name|globalAutoRepeat
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 5 */
name|CARD32
name|ledMask
name|B32
decl_stmt|;
name|CARD8
name|keyClickPercent
decl_stmt|,
name|bellPercent
decl_stmt|;
name|CARD16
name|bellPitch
name|B16
decl_stmt|,
name|bellDuration
name|B16
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
name|BYTE
name|map
index|[
literal|32
index|]
decl_stmt|;
comment|/* bit masks start here */
block|}
name|xGetKeyboardControlReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD16
name|accelNumerator
name|B16
decl_stmt|,
name|accelDenominator
name|B16
decl_stmt|;
name|CARD16
name|threshold
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGetPointerControlReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
comment|/* 0 */
name|CARD16
name|timeout
name|B16
decl_stmt|,
name|interval
name|B16
decl_stmt|;
name|BOOL
name|preferBlanking
decl_stmt|;
name|BOOL
name|allowExposures
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
block|}
name|xGetScreenSaverReply
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Reply */
name|BOOL
name|enabled
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
name|CARD32
name|length
name|B32
decl_stmt|;
name|CARD16
name|nHosts
name|B16
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xListHostsReply
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_REPLIES */
end_comment

begin_escape
end_escape

begin_comment
comment|/*****************************************************************  * Xerror  *    All errors  are 32 bytes   *****************************************************************/
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
comment|/* X_Error */
name|BYTE
name|errorCode
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
comment|/* the nth request from this client */
name|CARD32
name|resourceID
name|B32
decl_stmt|;
name|CARD16
name|minorCode
name|B16
decl_stmt|;
name|CARD8
name|majorCode
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|;
name|CARD32
name|pad3
name|B32
decl_stmt|;
name|CARD32
name|pad4
name|B32
decl_stmt|;
name|CARD32
name|pad5
name|B32
decl_stmt|;
name|CARD32
name|pad6
name|B32
decl_stmt|;
name|CARD32
name|pad7
name|B32
decl_stmt|;
block|}
name|xError
typedef|;
end_typedef

begin_comment
comment|/*****************************************************************  * xEvent  *    All events are 32 bytes  *****************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_EVENTS
end_ifdef

begin_comment
comment|/* this hack is necessary because 				     the symbol table in the library 				     is too big to link */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
union|union
block|{
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
name|BYTE
name|detail
decl_stmt|;
name|CARD16
name|sequenceNumber
name|B16
decl_stmt|;
block|}
name|u
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|Window
name|root
name|B32
decl_stmt|,
name|event
name|B32
decl_stmt|,
name|child
name|B32
decl_stmt|;
name|INT16
name|rootX
name|B16
decl_stmt|,
name|rootY
name|B16
decl_stmt|,
name|eventX
name|B16
decl_stmt|,
name|eventY
name|B16
decl_stmt|;
name|KeyButMask
name|state
name|B16
decl_stmt|;
name|BOOL
name|sameScreen
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|;
block|}
name|keyButtonPointer
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|Window
name|root
name|B32
decl_stmt|,
name|event
name|B32
decl_stmt|,
name|child
name|B32
decl_stmt|;
name|INT16
name|rootX
name|B16
decl_stmt|,
name|rootY
name|B16
decl_stmt|,
name|eventX
name|B16
decl_stmt|,
name|eventY
name|B16
decl_stmt|;
name|KeyButMask
name|state
name|B16
decl_stmt|;
name|BYTE
name|mode
decl_stmt|;
comment|/* really XMode */
name|BYTE
name|flags
decl_stmt|;
comment|/* sameScreen and focus booleans, packed together */
define|#
directive|define
name|ELFlagFocus
value|(1<<0)
define|#
directive|define
name|ELFlagSameScreen
value|(1<<1)
block|}
name|enterLeave
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|BYTE
name|mode
decl_stmt|;
comment|/* really XMode */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|focus
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|,
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD16
name|count
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|expose
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|CARD16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|,
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD16
name|minorEvent
name|B16
decl_stmt|;
name|CARD16
name|count
name|B16
decl_stmt|;
name|BYTE
name|majorEvent
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|graphicsExposure
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|CARD16
name|minorEvent
name|B16
decl_stmt|;
name|BYTE
name|majorEvent
decl_stmt|;
name|BYTE
name|bpad
decl_stmt|;
block|}
name|noExposure
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD8
name|state
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|visibility
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|parent
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|,
name|borderWidth
name|B16
decl_stmt|;
name|BOOL
name|override
decl_stmt|;
name|BYTE
name|bpad
decl_stmt|;
block|}
name|createNotify
struct|;
comment|/*  * The event feilds in the structures for DestroyNotify, UnmapNotify,  * MapNotify, ReparentNotify, ConfigureNotify, CirclulateNotify, GravityNotify,  * must be at the same offset because server internal code is depending upon  * this to patch up the events before they are delivered.  * Also note that MapRequest, ConfigureRequest and CirculateRequest have  * the same offset for the event window.  */
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
block|}
name|destroyNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
name|BOOL
name|fromConfigure
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|unmapNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
name|BOOL
name|override
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|mapNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|parent
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
block|}
name|mapRequest
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|,
name|parent
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|BOOL
name|override
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|reparent
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|,
name|aboveSibling
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|,
name|borderWidth
name|B16
decl_stmt|;
name|BOOL
name|override
decl_stmt|;
name|BYTE
name|bpad
decl_stmt|;
block|}
name|configureNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|parent
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|,
name|sibling
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|,
name|borderWidth
name|B16
decl_stmt|;
name|CARD16
name|valueMask
name|B16
decl_stmt|;
name|CARD32
name|pad1
name|B32
decl_stmt|;
block|}
name|configureRequest
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD32
name|pad1
name|B32
decl_stmt|,
name|pad2
name|B32
decl_stmt|,
name|pad3
name|B32
decl_stmt|,
name|pad4
name|B32
decl_stmt|;
block|}
name|gravity
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
block|}
name|resizeRequest
struct|;
struct|struct
block|{
comment|/* The event field in the circulate record is really the parent when this    is used as a CirculateRequest insteaad of a CircluateNotify */
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|event
name|B32
decl_stmt|,
name|window
name|B32
decl_stmt|,
name|parent
name|B32
decl_stmt|;
name|BYTE
name|place
decl_stmt|;
comment|/* Top or Bottom */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|circulate
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|atom
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|BYTE
name|state
decl_stmt|;
comment|/* NewValue or Deleted */
name|BYTE
name|pad1
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|property
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|atom
name|B32
decl_stmt|;
block|}
name|selectionClear
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|Window
name|owner
name|B32
decl_stmt|,
name|requestor
name|B32
decl_stmt|;
name|Atom
name|selection
name|B32
decl_stmt|,
name|target
name|B32
decl_stmt|,
name|property
name|B32
decl_stmt|;
block|}
name|selectionRequest
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|Window
name|requestor
name|B32
decl_stmt|;
name|Atom
name|selection
name|B32
decl_stmt|,
name|target
name|B32
decl_stmt|,
name|property
name|B32
decl_stmt|;
block|}
name|selectionNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Colormap
name|colormap
name|B32
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|BOOL
name|c_new
decl_stmt|;
else|#
directive|else
name|BOOL
name|new
decl_stmt|;
endif|#
directive|endif
name|BYTE
name|state
decl_stmt|;
comment|/* Installed or UnInstalled */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
block|}
name|colormap
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|CARD8
name|request
decl_stmt|;
name|KeyCode
name|firstKeyCode
decl_stmt|;
name|CARD8
name|count
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|;
block|}
name|mappingNotify
struct|;
struct|struct
block|{
name|CARD32
name|pad00
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|Atom
name|type
name|B32
decl_stmt|;
name|INT32
name|longs0
name|B32
decl_stmt|;
name|INT32
name|longs1
name|B32
decl_stmt|;
name|INT32
name|longs2
name|B32
decl_stmt|;
name|INT32
name|longs3
name|B32
decl_stmt|;
name|INT32
name|longs4
name|B32
decl_stmt|;
block|}
name|l
struct|;
struct|struct
block|{
name|Atom
name|type
name|B32
decl_stmt|;
name|INT16
name|shorts0
name|B16
decl_stmt|;
name|INT16
name|shorts1
name|B16
decl_stmt|;
name|INT16
name|shorts2
name|B16
decl_stmt|;
name|INT16
name|shorts3
name|B16
decl_stmt|;
name|INT16
name|shorts4
name|B16
decl_stmt|;
name|INT16
name|shorts5
name|B16
decl_stmt|;
name|INT16
name|shorts6
name|B16
decl_stmt|;
name|INT16
name|shorts7
name|B16
decl_stmt|;
name|INT16
name|shorts8
name|B16
decl_stmt|;
name|INT16
name|shorts9
name|B16
decl_stmt|;
block|}
name|s
struct|;
struct|struct
block|{
name|Atom
name|type
name|B32
decl_stmt|;
name|INT8
name|bytes
index|[
literal|20
index|]
decl_stmt|;
block|}
name|b
struct|;
block|}
name|u
union|;
block|}
name|clientMessage
struct|;
block|}
name|u
union|;
block|}
name|xEvent
typedef|;
end_typedef

begin_comment
comment|/* KeymapNotify events are not included in the above union because they    are different from all other events: they do not have a "detail"    or "sequenceNumber", so there is room for a 248-bit key mask. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|BYTE
name|type
decl_stmt|;
name|BYTE
name|map
index|[
literal|31
index|]
decl_stmt|;
block|}
name|xKeymapEvent
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_EVENTS */
end_comment

begin_define
define|#
directive|define
name|XEventSize
value|(sizeof(xEvent))
end_define

begin_comment
comment|/* XReply is the union of all the replies above whose "fixed part" fits in 32 bytes.  It does NOT include GetWindowAttributesReply, QueryFontReply, QueryKeymapReply, or GetKeyboardControlReply  ListFontsWithInfoReply */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_REPLIES
end_ifdef

begin_typedef
typedef|typedef
union|union
block|{
name|xGenericReply
name|generic
decl_stmt|;
name|xGetGeometryReply
name|geom
decl_stmt|;
name|xQueryTreeReply
name|tree
decl_stmt|;
name|xInternAtomReply
name|atom
decl_stmt|;
name|xGetAtomNameReply
name|atomName
decl_stmt|;
name|xGetPropertyReply
name|property
decl_stmt|;
name|xListPropertiesReply
name|listProperties
decl_stmt|;
name|xGetSelectionOwnerReply
name|selection
decl_stmt|;
name|xGrabPointerReply
name|grabPointer
decl_stmt|;
name|xGrabKeyboardReply
name|grabKeyboard
decl_stmt|;
name|xQueryPointerReply
name|pointer
decl_stmt|;
name|xGetMotionEventsReply
name|motionEvents
decl_stmt|;
name|xTranslateCoordsReply
name|coords
decl_stmt|;
name|xGetInputFocusReply
name|inputFocus
decl_stmt|;
name|xQueryTextExtentsReply
name|textExtents
decl_stmt|;
name|xListFontsReply
name|fonts
decl_stmt|;
name|xGetFontPathReply
name|fontPath
decl_stmt|;
name|xGetImageReply
name|image
decl_stmt|;
name|xListInstalledColormapsReply
name|colormaps
decl_stmt|;
name|xAllocColorReply
name|allocColor
decl_stmt|;
name|xAllocNamedColorReply
name|allocNamedColor
decl_stmt|;
name|xAllocColorCellsReply
name|colorCells
decl_stmt|;
name|xAllocColorPlanesReply
name|colorPlanes
decl_stmt|;
name|xQueryColorsReply
name|colors
decl_stmt|;
name|xLookupColorReply
name|lookupColor
decl_stmt|;
name|xQueryBestSizeReply
name|bestSize
decl_stmt|;
name|xQueryExtensionReply
name|extension
decl_stmt|;
name|xListExtensionsReply
name|extensions
decl_stmt|;
name|xSetModifierMappingReply
name|setModifierMapping
decl_stmt|;
name|xGetModifierMappingReply
name|getModifierMapping
decl_stmt|;
name|xSetPointerMappingReply
name|setPointerMapping
decl_stmt|;
name|xGetKeyboardMappingReply
name|getKeyboardMapping
decl_stmt|;
name|xGetPointerMappingReply
name|getPointerMapping
decl_stmt|;
name|xGetPointerControlReply
name|pointerControl
decl_stmt|;
name|xGetScreenSaverReply
name|screenSaver
decl_stmt|;
name|xListHostsReply
name|hosts
decl_stmt|;
name|xError
name|error
decl_stmt|;
ifdef|#
directive|ifdef
name|NEED_EVENTS
name|xEvent
name|event
decl_stmt|;
endif|#
directive|endif
comment|/* NEED_EVENTS */
block|}
name|xReply
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_REPLIES */
end_comment

begin_escape
end_escape

begin_comment
comment|/*****************************************************************  * REQUESTS  *****************************************************************/
end_comment

begin_comment
comment|/* Request structure */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|data
decl_stmt|;
comment|/* meaning depends on request type */
name|CARD16
name|length
name|B16
decl_stmt|;
comment|/* length in 4 bytes quantities  				  of whole request, including this header */
block|}
name|xReq
typedef|;
end_typedef

begin_comment
comment|/*****************************************************************  *  structures that follow request.   *****************************************************************/
end_comment

begin_comment
comment|/* ResourceReq is used for any request which has a resource ID     (or Atom or Time) as its one and only argument.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD32
name|id
name|B32
decl_stmt|;
comment|/* a Window, Drawable, Font, GContext, Pixmap, etc. */
block|}
name|xResourceReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|depth
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|wid
name|B32
decl_stmt|,
name|parent
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|,
name|borderWidth
name|B16
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|CARD16
name|c_class
name|B16
decl_stmt|;
else|#
directive|else
name|CARD16
name|class
name|B16
decl_stmt|;
endif|#
directive|endif
name|VisualID
name|visual
name|B32
decl_stmt|;
name|CARD32
name|mask
name|B32
decl_stmt|;
block|}
name|xCreateWindowReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD32
name|valueMask
name|B32
decl_stmt|;
block|}
name|xChangeWindowAttributesReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|mode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
block|}
name|xChangeSaveSetReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|,
name|parent
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
block|}
name|xReparentWindowReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD16
name|mask
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|xConfigureWindowReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|direction
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
block|}
name|xCirculateWindowReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* followed by padded string */
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|onlyIfExists
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* number of bytes in string */
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xInternAtomReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|mode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|property
name|B32
decl_stmt|,
name|type
name|B32
decl_stmt|;
name|CARD8
name|format
decl_stmt|;
name|BYTE
name|pad
index|[
literal|3
index|]
decl_stmt|;
name|CARD32
name|nUnits
name|B32
decl_stmt|;
comment|/* length of stuff following, depends on format */
block|}
name|xChangePropertyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|property
name|B32
decl_stmt|;
block|}
name|xDeletePropertyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|BOOL
name|c_delete
decl_stmt|;
else|#
directive|else
name|BOOL
name|delete
decl_stmt|;
endif|#
directive|endif
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|property
name|B32
decl_stmt|,
name|type
name|B32
decl_stmt|;
name|CARD32
name|longOffset
name|B32
decl_stmt|;
name|CARD32
name|longLength
name|B32
decl_stmt|;
block|}
name|xGetPropertyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Atom
name|selection
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
block|}
name|xSetSelectionOwnerReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|requestor
name|B32
decl_stmt|;
name|Atom
name|selection
name|B32
decl_stmt|,
name|target
name|B32
decl_stmt|,
name|property
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
block|}
name|xConvertSelectionReq
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_EVENTS
end_ifdef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|propagate
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|destination
name|B32
decl_stmt|;
name|CARD32
name|eventMask
name|B32
decl_stmt|;
ifdef|#
directive|ifdef
name|WORD64
comment|/* the structure should have been quad-aligned */
name|BYTE
name|eventdata
index|[
name|SIZEOF
argument_list|(
name|xEvent
argument_list|)
index|]
decl_stmt|;
else|#
directive|else
name|xEvent
name|event
decl_stmt|;
endif|#
directive|endif
comment|/* WORD64 */
block|}
name|xSendEventReq
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NEED_EVENTS */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|ownerEvents
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|CARD16
name|eventMask
name|B16
decl_stmt|;
name|BYTE
name|pointerMode
decl_stmt|,
name|keyboardMode
decl_stmt|;
name|Window
name|confineTo
name|B32
decl_stmt|;
name|Cursor
name|cursor
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
block|}
name|xGrabPointerReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|ownerEvents
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|CARD16
name|eventMask
name|B16
decl_stmt|;
name|BYTE
name|pointerMode
decl_stmt|,
name|keyboardMode
decl_stmt|;
name|Window
name|confineTo
name|B32
decl_stmt|;
name|Cursor
name|cursor
name|B32
decl_stmt|;
name|CARD8
name|button
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|modifiers
name|B16
decl_stmt|;
block|}
name|xGrabButtonReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|button
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|CARD16
name|modifiers
name|B16
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xUngrabButtonReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Cursor
name|cursor
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|CARD16
name|eventMask
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|xChangeActivePointerGrabReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|ownerEvents
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
name|BYTE
name|pointerMode
decl_stmt|,
name|keyboardMode
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xGrabKeyboardReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|ownerEvents
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|CARD16
name|modifiers
name|B16
decl_stmt|;
name|CARD8
name|key
decl_stmt|;
name|BYTE
name|pointerMode
decl_stmt|,
name|keyboardMode
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|,
name|pad3
decl_stmt|;
block|}
name|xGrabKeyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|key
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|grabWindow
name|B32
decl_stmt|;
name|CARD16
name|modifiers
name|B16
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xUngrabKeyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|mode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
block|}
name|xAllowEventsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|Time
name|start
name|B32
decl_stmt|,
name|stop
name|B32
decl_stmt|;
block|}
name|xGetMotionEventsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|srcWid
name|B32
decl_stmt|,
name|dstWid
name|B32
decl_stmt|;
name|INT16
name|srcX
name|B16
decl_stmt|,
name|srcY
name|B16
decl_stmt|;
block|}
name|xTranslateCoordsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|srcWid
name|B32
decl_stmt|,
name|dstWid
name|B32
decl_stmt|;
name|INT16
name|srcX
name|B16
decl_stmt|,
name|srcY
name|B16
decl_stmt|;
name|CARD16
name|srcWidth
name|B16
decl_stmt|,
name|srcHeight
name|B16
decl_stmt|;
name|INT16
name|dstX
name|B16
decl_stmt|,
name|dstY
name|B16
decl_stmt|;
block|}
name|xWarpPointerReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|revertTo
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|focus
name|B32
decl_stmt|;
name|Time
name|time
name|B32
decl_stmt|;
block|}
name|xSetInputFocusReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Font
name|fid
name|B32
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
comment|/* string follows on word boundary */
block|}
name|xOpenFontReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|oddLength
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Font
name|fid
name|B32
decl_stmt|;
block|}
name|xQueryTextExtentsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD16
name|maxNames
name|B16
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* followed immediately by string bytes */
block|}
name|xListFontsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xListFontsReq
name|xListFontsWithInfoReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD16
name|nFonts
name|B16
decl_stmt|;
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
comment|/* LISTofSTRING8 follows on word boundary */
block|}
name|xSetFontPathReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|depth
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Pixmap
name|pid
name|B32
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
block|}
name|xCreatePixmapReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|CARD32
name|mask
name|B32
decl_stmt|;
block|}
name|xCreateGCReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|CARD32
name|mask
name|B32
decl_stmt|;
block|}
name|xChangeGCReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|GContext
name|srcGC
name|B32
decl_stmt|,
name|dstGC
name|B32
decl_stmt|;
name|CARD32
name|mask
name|B32
decl_stmt|;
block|}
name|xCopyGCReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|CARD16
name|dashOffset
name|B16
decl_stmt|;
name|CARD16
name|nDashes
name|B16
decl_stmt|;
comment|/* length LISTofCARD8 of values following */
block|}
name|xSetDashesReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|ordering
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|INT16
name|xOrigin
name|B16
decl_stmt|,
name|yOrigin
name|B16
decl_stmt|;
block|}
name|xSetClipRectanglesReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|exposures
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
block|}
name|xClearAreaReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|srcDrawable
name|B32
decl_stmt|,
name|dstDrawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|INT16
name|srcX
name|B16
decl_stmt|,
name|srcY
name|B16
decl_stmt|,
name|dstX
name|B16
decl_stmt|,
name|dstY
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
block|}
name|xCopyAreaReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|srcDrawable
name|B32
decl_stmt|,
name|dstDrawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|INT16
name|srcX
name|B16
decl_stmt|,
name|srcY
name|B16
decl_stmt|,
name|dstX
name|B16
decl_stmt|,
name|dstY
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD32
name|bitPlane
name|B32
decl_stmt|;
block|}
name|xCopyPlaneReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|coordMode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
block|}
name|xPolyPointReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolyPointReq
name|xPolyLineReq
typedef|;
end_typedef

begin_comment
comment|/* same request structure */
end_comment

begin_comment
comment|/* The following used for PolySegment, PolyRectangle, PolyArc, PolyFillRectangle, PolyFillArc */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
block|}
name|xPolySegmentReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolySegmentReq
name|xPolyArcReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolySegmentReq
name|xPolyRectangleReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolySegmentReq
name|xPolyFillRectangleReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolySegmentReq
name|xPolyFillArcReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_FillPolyReq
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|BYTE
name|shape
decl_stmt|;
name|BYTE
name|coordMode
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
block|}
name|xFillPolyReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_PutImageReq
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|format
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|INT16
name|dstX
name|B16
decl_stmt|,
name|dstY
name|B16
decl_stmt|;
name|CARD8
name|leftPad
decl_stmt|;
name|CARD8
name|depth
decl_stmt|;
name|CARD16
name|pad
name|B16
decl_stmt|;
block|}
name|xPutImageReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|format
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
name|CARD32
name|planeMask
name|B32
decl_stmt|;
block|}
name|xGetImageReq
typedef|;
end_typedef

begin_comment
comment|/* the folloiwng used by PolyText8 and PolyText16 */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
comment|/* items (xTextElt) start after struct */
block|}
name|xPolyTextReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolyTextReq
name|xPolyText8Req
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xPolyTextReq
name|xPolyText16Req
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|nChars
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|GContext
name|gc
name|B32
decl_stmt|;
name|INT16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
block|}
name|xImageTextReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xImageTextReq
name|xImageText8Req
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xImageTextReq
name|xImageText16Req
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|alloc
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|mid
name|B32
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|VisualID
name|visual
name|B32
decl_stmt|;
block|}
name|xCreateColormapReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|mid
name|B32
decl_stmt|;
name|Colormap
name|srcCmap
name|B32
decl_stmt|;
block|}
name|xCopyColormapAndFreeReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD16
name|red
name|B16
decl_stmt|,
name|green
name|B16
decl_stmt|,
name|blue
name|B16
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|xAllocColorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* followed by structure */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
block|}
name|xAllocNamedColorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|contiguous
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD16
name|colors
name|B16
decl_stmt|,
name|planes
name|B16
decl_stmt|;
block|}
name|xAllocColorCellsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BOOL
name|contiguous
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD16
name|colors
name|B16
decl_stmt|,
name|red
name|B16
decl_stmt|,
name|green
name|B16
decl_stmt|,
name|blue
name|B16
decl_stmt|;
block|}
name|xAllocColorPlanesReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD32
name|planeMask
name|B32
decl_stmt|;
block|}
name|xFreeColorsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
block|}
name|xStoreColorsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|flags
decl_stmt|;
comment|/* DoRed, DoGreen, DoBlue, as in xColorItem */
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD32
name|pixel
name|B32
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* number of name string bytes following structure */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
block|}
name|xStoreNamedColorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
block|}
name|xQueryColorsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* followed  by string of length len */
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Colormap
name|cmap
name|B32
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* number of string bytes following structure*/
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
block|}
name|xLookupColorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Cursor
name|cid
name|B32
decl_stmt|;
name|Pixmap
name|source
name|B32
decl_stmt|,
name|mask
name|B32
decl_stmt|;
name|CARD16
name|foreRed
name|B16
decl_stmt|,
name|foreGreen
name|B16
decl_stmt|,
name|foreBlue
name|B16
decl_stmt|;
name|CARD16
name|backRed
name|B16
decl_stmt|,
name|backGreen
name|B16
decl_stmt|,
name|backBlue
name|B16
decl_stmt|;
name|CARD16
name|x
name|B16
decl_stmt|,
name|y
name|B16
decl_stmt|;
block|}
name|xCreateCursorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Cursor
name|cid
name|B32
decl_stmt|;
name|Font
name|source
name|B32
decl_stmt|,
name|mask
name|B32
decl_stmt|;
name|CARD16
name|sourceChar
name|B16
decl_stmt|,
name|maskChar
name|B16
decl_stmt|;
name|CARD16
name|foreRed
name|B16
decl_stmt|,
name|foreGreen
name|B16
decl_stmt|,
name|foreBlue
name|B16
decl_stmt|;
name|CARD16
name|backRed
name|B16
decl_stmt|,
name|backGreen
name|B16
decl_stmt|,
name|backBlue
name|B16
decl_stmt|;
block|}
name|xCreateGlyphCursorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Cursor
name|cursor
name|B32
decl_stmt|;
name|CARD16
name|foreRed
name|B16
decl_stmt|,
name|foreGreen
name|B16
decl_stmt|,
name|foreBlue
name|B16
decl_stmt|;
name|CARD16
name|backRed
name|B16
decl_stmt|,
name|backGreen
name|B16
decl_stmt|,
name|backBlue
name|B16
decl_stmt|;
block|}
name|xRecolorCursorReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|c_plusplus
argument_list|)
name|CARD8
name|c_class
decl_stmt|;
else|#
directive|else
name|CARD8
name|class
decl_stmt|;
endif|#
directive|endif
name|CARD16
name|length
name|B16
decl_stmt|;
name|Drawable
name|drawable
name|B32
decl_stmt|;
name|CARD16
name|width
name|B16
decl_stmt|,
name|height
name|B16
decl_stmt|;
block|}
name|xQueryBestSizeReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD16
name|nbytes
name|B16
decl_stmt|;
comment|/* number of string bytes following structure */
name|BYTE
name|pad1
decl_stmt|,
name|pad2
decl_stmt|;
block|}
name|xQueryExtensionReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|numKeyPerModifier
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xSetModifierMappingReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|nElts
decl_stmt|;
comment|/* how many elements in the map */
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xSetPointerMappingReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|KeyCode
name|firstKeyCode
decl_stmt|;
name|CARD8
name|count
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
block|}
name|xGetKeyboardMappingReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|CARD8
name|keyCodes
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|KeyCode
name|firstKeyCode
decl_stmt|;
name|CARD8
name|keySymsPerKeyCode
decl_stmt|;
name|CARD16
name|pad1
name|B16
decl_stmt|;
block|}
name|xChangeKeyboardMappingReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD32
name|mask
name|B32
decl_stmt|;
block|}
name|xChangeKeyboardControlReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|INT8
name|percent
decl_stmt|;
comment|/* -100 to 100 */
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xBellReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|INT16
name|accelNum
name|B16
decl_stmt|,
name|accelDenum
name|B16
decl_stmt|;
name|INT16
name|threshold
name|B16
decl_stmt|;
name|BOOL
name|doAccel
decl_stmt|,
name|doThresh
decl_stmt|;
block|}
name|xChangePointerControlReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|INT16
name|timeout
name|B16
decl_stmt|,
name|interval
name|B16
decl_stmt|;
name|BYTE
name|preferBlank
decl_stmt|,
name|allowExpose
decl_stmt|;
name|CARD16
name|pad2
name|B16
decl_stmt|;
block|}
name|xSetScreenSaverReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|mode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|CARD8
name|hostFamily
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|hostLength
name|B16
decl_stmt|;
block|}
name|xChangeHostsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xListHostsReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|mode
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
block|}
name|xChangeModeReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xChangeModeReq
name|xSetAccessControlReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xChangeModeReq
name|xSetCloseDownModeReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|xChangeModeReq
name|xForceScreenSaverReq
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* followed by LIST of ATOM */
name|CARD8
name|reqType
decl_stmt|;
name|BYTE
name|pad
decl_stmt|;
name|CARD16
name|length
name|B16
decl_stmt|;
name|Window
name|window
name|B32
decl_stmt|;
name|CARD16
name|nAtoms
name|B16
decl_stmt|;
name|INT16
name|nPositions
name|B16
decl_stmt|;
block|}
name|xRotatePropertiesReq
typedef|;
end_typedef

begin_escape
end_escape

begin_comment
comment|/* Reply codes */
end_comment

begin_define
define|#
directive|define
name|X_Reply
value|1
end_define

begin_comment
comment|/* Normal reply */
end_comment

begin_define
define|#
directive|define
name|X_Error
value|0
end_define

begin_comment
comment|/* Error */
end_comment

begin_comment
comment|/* Request codes */
end_comment

begin_define
define|#
directive|define
name|X_CreateWindow
value|1
end_define

begin_define
define|#
directive|define
name|X_ChangeWindowAttributes
value|2
end_define

begin_define
define|#
directive|define
name|X_GetWindowAttributes
value|3
end_define

begin_define
define|#
directive|define
name|X_DestroyWindow
value|4
end_define

begin_define
define|#
directive|define
name|X_DestroySubwindows
value|5
end_define

begin_define
define|#
directive|define
name|X_ChangeSaveSet
value|6
end_define

begin_define
define|#
directive|define
name|X_ReparentWindow
value|7
end_define

begin_define
define|#
directive|define
name|X_MapWindow
value|8
end_define

begin_define
define|#
directive|define
name|X_MapSubwindows
value|9
end_define

begin_define
define|#
directive|define
name|X_UnmapWindow
value|10
end_define

begin_define
define|#
directive|define
name|X_UnmapSubwindows
value|11
end_define

begin_define
define|#
directive|define
name|X_ConfigureWindow
value|12
end_define

begin_define
define|#
directive|define
name|X_CirculateWindow
value|13
end_define

begin_define
define|#
directive|define
name|X_GetGeometry
value|14
end_define

begin_define
define|#
directive|define
name|X_QueryTree
value|15
end_define

begin_define
define|#
directive|define
name|X_InternAtom
value|16
end_define

begin_define
define|#
directive|define
name|X_GetAtomName
value|17
end_define

begin_define
define|#
directive|define
name|X_ChangeProperty
value|18
end_define

begin_define
define|#
directive|define
name|X_DeleteProperty
value|19
end_define

begin_define
define|#
directive|define
name|X_GetProperty
value|20
end_define

begin_define
define|#
directive|define
name|X_ListProperties
value|21
end_define

begin_define
define|#
directive|define
name|X_SetSelectionOwner
value|22
end_define

begin_define
define|#
directive|define
name|X_GetSelectionOwner
value|23
end_define

begin_define
define|#
directive|define
name|X_ConvertSelection
value|24
end_define

begin_define
define|#
directive|define
name|X_SendEvent
value|25
end_define

begin_define
define|#
directive|define
name|X_GrabPointer
value|26
end_define

begin_define
define|#
directive|define
name|X_UngrabPointer
value|27
end_define

begin_define
define|#
directive|define
name|X_GrabButton
value|28
end_define

begin_define
define|#
directive|define
name|X_UngrabButton
value|29
end_define

begin_define
define|#
directive|define
name|X_ChangeActivePointerGrab
value|30
end_define

begin_define
define|#
directive|define
name|X_GrabKeyboard
value|31
end_define

begin_define
define|#
directive|define
name|X_UngrabKeyboard
value|32
end_define

begin_define
define|#
directive|define
name|X_GrabKey
value|33
end_define

begin_define
define|#
directive|define
name|X_UngrabKey
value|34
end_define

begin_define
define|#
directive|define
name|X_AllowEvents
value|35
end_define

begin_define
define|#
directive|define
name|X_GrabServer
value|36
end_define

begin_define
define|#
directive|define
name|X_UngrabServer
value|37
end_define

begin_define
define|#
directive|define
name|X_QueryPointer
value|38
end_define

begin_define
define|#
directive|define
name|X_GetMotionEvents
value|39
end_define

begin_define
define|#
directive|define
name|X_TranslateCoords
value|40
end_define

begin_define
define|#
directive|define
name|X_WarpPointer
value|41
end_define

begin_define
define|#
directive|define
name|X_SetInputFocus
value|42
end_define

begin_define
define|#
directive|define
name|X_GetInputFocus
value|43
end_define

begin_define
define|#
directive|define
name|X_QueryKeymap
value|44
end_define

begin_define
define|#
directive|define
name|X_OpenFont
value|45
end_define

begin_define
define|#
directive|define
name|X_CloseFont
value|46
end_define

begin_define
define|#
directive|define
name|X_QueryFont
value|47
end_define

begin_define
define|#
directive|define
name|X_QueryTextExtents
value|48
end_define

begin_define
define|#
directive|define
name|X_ListFonts
value|49
end_define

begin_define
define|#
directive|define
name|X_ListFontsWithInfo
value|50
end_define

begin_define
define|#
directive|define
name|X_SetFontPath
value|51
end_define

begin_define
define|#
directive|define
name|X_GetFontPath
value|52
end_define

begin_define
define|#
directive|define
name|X_CreatePixmap
value|53
end_define

begin_define
define|#
directive|define
name|X_FreePixmap
value|54
end_define

begin_define
define|#
directive|define
name|X_CreateGC
value|55
end_define

begin_define
define|#
directive|define
name|X_ChangeGC
value|56
end_define

begin_define
define|#
directive|define
name|X_CopyGC
value|57
end_define

begin_define
define|#
directive|define
name|X_SetDashes
value|58
end_define

begin_define
define|#
directive|define
name|X_SetClipRectangles
value|59
end_define

begin_define
define|#
directive|define
name|X_FreeGC
value|60
end_define

begin_define
define|#
directive|define
name|X_ClearArea
value|61
end_define

begin_define
define|#
directive|define
name|X_CopyArea
value|62
end_define

begin_define
define|#
directive|define
name|X_CopyPlane
value|63
end_define

begin_define
define|#
directive|define
name|X_PolyPoint
value|64
end_define

begin_define
define|#
directive|define
name|X_PolyLine
value|65
end_define

begin_define
define|#
directive|define
name|X_PolySegment
value|66
end_define

begin_define
define|#
directive|define
name|X_PolyRectangle
value|67
end_define

begin_define
define|#
directive|define
name|X_PolyArc
value|68
end_define

begin_define
define|#
directive|define
name|X_FillPoly
value|69
end_define

begin_define
define|#
directive|define
name|X_PolyFillRectangle
value|70
end_define

begin_define
define|#
directive|define
name|X_PolyFillArc
value|71
end_define

begin_define
define|#
directive|define
name|X_PutImage
value|72
end_define

begin_define
define|#
directive|define
name|X_GetImage
value|73
end_define

begin_define
define|#
directive|define
name|X_PolyText8
value|74
end_define

begin_define
define|#
directive|define
name|X_PolyText16
value|75
end_define

begin_define
define|#
directive|define
name|X_ImageText8
value|76
end_define

begin_define
define|#
directive|define
name|X_ImageText16
value|77
end_define

begin_define
define|#
directive|define
name|X_CreateColormap
value|78
end_define

begin_define
define|#
directive|define
name|X_FreeColormap
value|79
end_define

begin_define
define|#
directive|define
name|X_CopyColormapAndFree
value|80
end_define

begin_define
define|#
directive|define
name|X_InstallColormap
value|81
end_define

begin_define
define|#
directive|define
name|X_UninstallColormap
value|82
end_define

begin_define
define|#
directive|define
name|X_ListInstalledColormaps
value|83
end_define

begin_define
define|#
directive|define
name|X_AllocColor
value|84
end_define

begin_define
define|#
directive|define
name|X_AllocNamedColor
value|85
end_define

begin_define
define|#
directive|define
name|X_AllocColorCells
value|86
end_define

begin_define
define|#
directive|define
name|X_AllocColorPlanes
value|87
end_define

begin_define
define|#
directive|define
name|X_FreeColors
value|88
end_define

begin_define
define|#
directive|define
name|X_StoreColors
value|89
end_define

begin_define
define|#
directive|define
name|X_StoreNamedColor
value|90
end_define

begin_define
define|#
directive|define
name|X_QueryColors
value|91
end_define

begin_define
define|#
directive|define
name|X_LookupColor
value|92
end_define

begin_define
define|#
directive|define
name|X_CreateCursor
value|93
end_define

begin_define
define|#
directive|define
name|X_CreateGlyphCursor
value|94
end_define

begin_define
define|#
directive|define
name|X_FreeCursor
value|95
end_define

begin_define
define|#
directive|define
name|X_RecolorCursor
value|96
end_define

begin_define
define|#
directive|define
name|X_QueryBestSize
value|97
end_define

begin_define
define|#
directive|define
name|X_QueryExtension
value|98
end_define

begin_define
define|#
directive|define
name|X_ListExtensions
value|99
end_define

begin_define
define|#
directive|define
name|X_ChangeKeyboardMapping
value|100
end_define

begin_define
define|#
directive|define
name|X_GetKeyboardMapping
value|101
end_define

begin_define
define|#
directive|define
name|X_ChangeKeyboardControl
value|102
end_define

begin_define
define|#
directive|define
name|X_GetKeyboardControl
value|103
end_define

begin_define
define|#
directive|define
name|X_Bell
value|104
end_define

begin_define
define|#
directive|define
name|X_ChangePointerControl
value|105
end_define

begin_define
define|#
directive|define
name|X_GetPointerControl
value|106
end_define

begin_define
define|#
directive|define
name|X_SetScreenSaver
value|107
end_define

begin_define
define|#
directive|define
name|X_GetScreenSaver
value|108
end_define

begin_define
define|#
directive|define
name|X_ChangeHosts
value|109
end_define

begin_define
define|#
directive|define
name|X_ListHosts
value|110
end_define

begin_define
define|#
directive|define
name|X_SetAccessControl
value|111
end_define

begin_define
define|#
directive|define
name|X_SetCloseDownMode
value|112
end_define

begin_define
define|#
directive|define
name|X_KillClient
value|113
end_define

begin_define
define|#
directive|define
name|X_RotateProperties
value|114
end_define

begin_define
define|#
directive|define
name|X_ForceScreenSaver
value|115
end_define

begin_define
define|#
directive|define
name|X_SetPointerMapping
value|116
end_define

begin_define
define|#
directive|define
name|X_GetPointerMapping
value|117
end_define

begin_define
define|#
directive|define
name|X_SetModifierMapping
value|118
end_define

begin_define
define|#
directive|define
name|X_GetModifierMapping
value|119
end_define

begin_define
define|#
directive|define
name|X_NoOperation
value|127
end_define

begin_comment
comment|/* restore these definitions back to the typedefs in X.h */
end_comment

begin_undef
undef|#
directive|undef
name|Window
end_undef

begin_undef
undef|#
directive|undef
name|Drawable
end_undef

begin_undef
undef|#
directive|undef
name|Font
end_undef

begin_undef
undef|#
directive|undef
name|Pixmap
end_undef

begin_undef
undef|#
directive|undef
name|Cursor
end_undef

begin_undef
undef|#
directive|undef
name|Colormap
end_undef

begin_undef
undef|#
directive|undef
name|GContext
end_undef

begin_undef
undef|#
directive|undef
name|Atom
end_undef

begin_undef
undef|#
directive|undef
name|VisualID
end_undef

begin_undef
undef|#
directive|undef
name|Time
end_undef

begin_undef
undef|#
directive|undef
name|KeyCode
end_undef

begin_undef
undef|#
directive|undef
name|KeySym
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XPROTO_H */
end_comment

end_unit

