begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 1989, 1990, 1991 Aladdin Enterprises.  All rights reserved.    Distributed by Free Software Foundation, Inc.  This file is part of Ghostscript.  Ghostscript is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the Ghostscript General Public License for full details.  Everyone is granted permission to copy, modify and redistribute Ghostscript, but only under the conditions described in the Ghostscript General Public License.  A copy of this license is supposed to have been given to you along with Ghostscript so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.  */
end_comment

begin_comment
comment|/* gsstate.h */
end_comment

begin_comment
comment|/* Graphics state routines for Ghostscript library */
end_comment

begin_comment
comment|/* Opaque type for a graphics state */
end_comment

begin_comment
comment|/*typedef struct gs_state_s gs_state;*/
end_comment

begin_comment
comment|/* defined in gs.h */
end_comment

begin_comment
comment|/* Line cap values */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|gs_cap_butt
init|=
literal|0
block|,
name|gs_cap_round
init|=
literal|1
block|,
name|gs_cap_square
init|=
literal|2
block|}
name|gs_line_cap
typedef|;
end_typedef

begin_comment
comment|/* Line join values */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|gs_join_miter
init|=
literal|0
block|,
name|gs_join_round
init|=
literal|1
block|,
name|gs_join_bevel
init|=
literal|2
block|}
name|gs_line_join
typedef|;
end_typedef

begin_comment
comment|/* Allocation, freeing, initialization, and copying */
end_comment

begin_decl_stmt
name|gs_state
modifier|*
name|gs_state_alloc
argument_list|(
name|P2
argument_list|(
name|proc_alloc_t
argument_list|,
name|proc_free_t
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* 0 if fails */
end_comment

begin_decl_stmt
name|int
name|gs_state_free
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_gsave
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|,
name|gs_grestore
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|,
name|gs_grestoreall
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gs_state
modifier|*
name|gs_gstate
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_currentgstate
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
comment|/*to*/
argument_list|,
specifier|const
name|gs_state
operator|*
comment|/*from*/
argument_list|)
argument_list|)
decl_stmt|,
name|gs_setgstate
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
comment|/*to*/
argument_list|,
specifier|const
name|gs_state
operator|*
comment|/*from*/
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gs_state
modifier|*
name|gs_state_swap_saved
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* special for save/restore */
end_comment

begin_decl_stmt
name|void
name|gs_state_swap
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* special for save/restore */
end_comment

begin_decl_stmt
name|int
name|gs_initgraphics
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Device control */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|gx_device_DEFINED
end_ifndef

begin_define
define|#
directive|define
name|gx_device_DEFINED
end_define

begin_typedef
typedef|typedef
name|struct
name|gx_device_s
name|gx_device
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|gs_flushpage
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_copypage
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_output_page
argument_list|(
name|P3
argument_list|(
name|gs_state
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_copyscanlines
argument_list|(
name|P6
argument_list|(
name|gx_device
operator|*
argument_list|,
name|int
argument_list|,
name|byte
operator|*
argument_list|,
name|uint
argument_list|,
name|int
operator|*
argument_list|,
name|uint
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gx_device
modifier|*
name|gs_getdevice
argument_list|(
name|P1
argument_list|(
name|int
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_copydevice
argument_list|(
name|P3
argument_list|(
name|gx_device
operator|*
operator|*
argument_list|,
name|gx_device
operator|*
argument_list|,
name|proc_alloc_t
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_makeimagedevice
argument_list|(
name|P7
argument_list|(
name|gx_device
operator|*
operator|*
argument_list|,
name|gs_matrix
operator|*
argument_list|,
name|uint
argument_list|,
name|uint
argument_list|,
name|byte
operator|*
argument_list|,
name|int
argument_list|,
name|proc_alloc_t
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|gs_nulldevice
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setdevice
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gx_device
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gx_device
modifier|*
name|gs_currentdevice
argument_list|(
name|P1
argument_list|(
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|gs_devicename
argument_list|(
name|P1
argument_list|(
name|gx_device
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|gs_deviceinitialmatrix
argument_list|(
name|P2
argument_list|(
name|gx_device
operator|*
argument_list|,
name|gs_matrix
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_closedevice
argument_list|(
name|P1
argument_list|(
name|gx_device
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Line parameters and quality */
end_comment

begin_decl_stmt
name|int
name|gs_setlinewidth
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|float
name|gs_currentlinewidth
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setlinecap
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gs_line_cap
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gs_line_cap
name|gs_currentlinecap
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setlinejoin
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gs_line_join
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|gs_line_join
name|gs_currentlinejoin
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setmiterlimit
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|float
name|gs_currentmiterlimit
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setdash
argument_list|(
name|P4
argument_list|(
name|gs_state
operator|*
argument_list|,
specifier|const
name|float
operator|*
argument_list|,
name|uint
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint
name|gs_currentdash_length
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_currentdash_pattern
argument_list|(
name|P2
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|,
name|float
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|float
name|gs_currentdash_offset
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setflat
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|float
name|gs_currentflat
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_setstrokeadjust
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|int
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_currentstrokeadjust
argument_list|(
name|P1
argument_list|(
specifier|const
name|gs_state
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Color and gray */
end_comment

begin_include
include|#
directive|include
file|"gscolor.h"
end_include

begin_comment
comment|/* Halftone screen */
end_comment

begin_decl_stmt
name|int
name|gs_setscreen
argument_list|(
name|P4
argument_list|(
name|gs_state
operator|*
argument_list|,
name|floatp
argument_list|,
name|floatp
argument_list|,
name|float
argument_list|(
operator|*
argument_list|)
argument_list|(
name|P2
argument_list|(
name|floatp
argument_list|,
name|floatp
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_currentscreen
argument_list|(
name|P4
argument_list|(
name|gs_state
operator|*
argument_list|,
name|float
operator|*
argument_list|,
name|float
operator|*
argument_list|,
name|float
argument_list|(
operator|*
operator|*
argument_list|)
argument_list|(
name|P2
argument_list|(
name|floatp
argument_list|,
name|floatp
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_sethalftonephase
argument_list|(
name|P3
argument_list|(
name|gs_state
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_currenthalftonephase
argument_list|(
name|P2
argument_list|(
name|gs_state
operator|*
argument_list|,
name|gs_int_point
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Enumeration-style screen definition */
end_comment

begin_typedef
typedef|typedef
name|struct
name|gs_screen_enum_s
name|gs_screen_enum
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
specifier|const
name|uint
name|gs_screen_enum_sizeof
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_screen_init
argument_list|(
name|P4
argument_list|(
name|gs_screen_enum
operator|*
argument_list|,
name|gs_state
operator|*
argument_list|,
name|floatp
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_screen_currentpoint
argument_list|(
name|P2
argument_list|(
name|gs_screen_enum
operator|*
argument_list|,
name|gs_point
operator|*
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|gs_screen_next
argument_list|(
name|P2
argument_list|(
name|gs_screen_enum
operator|*
argument_list|,
name|floatp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

