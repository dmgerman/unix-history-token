begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- DIBuilderBindings.h - Bindings for DIBuilder -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines C bindings for the DIBuilder class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_BINDINGS_GO_LLVM_DIBUILDERBINDINGS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_BINDINGS_GO_LLVM_DIBUILDERBINDINGS_H
end_define

begin_include
include|#
directive|include
file|"IRBindings.h"
end_include

begin_include
include|#
directive|include
file|"llvm-c/Core.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// FIXME: These bindings shouldn't be Go-specific and should eventually move to
comment|// a (somewhat) less stable collection of C APIs for use in creating bindings of
comment|// LLVM in other languages.
typedef|typedef
name|struct
name|LLVMOpaqueDIBuilder
modifier|*
name|LLVMDIBuilderRef
typedef|;
name|LLVMDIBuilderRef
name|LLVMNewDIBuilder
parameter_list|(
name|LLVMModuleRef
name|m
parameter_list|)
function_decl|;
name|void
name|LLVMDIBuilderDestroy
parameter_list|(
name|LLVMDIBuilderRef
name|d
parameter_list|)
function_decl|;
name|void
name|LLVMDIBuilderFinalize
parameter_list|(
name|LLVMDIBuilderRef
name|d
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateCompileUnit
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|unsigned
name|Language
parameter_list|,
specifier|const
name|char
modifier|*
name|File
parameter_list|,
specifier|const
name|char
modifier|*
name|Dir
parameter_list|,
specifier|const
name|char
modifier|*
name|Producer
parameter_list|,
name|int
name|Optimized
parameter_list|,
specifier|const
name|char
modifier|*
name|Flags
parameter_list|,
name|unsigned
name|RuntimeVersion
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateFile
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
specifier|const
name|char
modifier|*
name|File
parameter_list|,
specifier|const
name|char
modifier|*
name|Dir
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateLexicalBlock
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|unsigned
name|Column
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateLexicalBlockFile
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Discriminator
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateFunction
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
specifier|const
name|char
modifier|*
name|LinkageName
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|LLVMMetadataRef
name|CompositeType
parameter_list|,
name|int
name|IsLocalToUnit
parameter_list|,
name|int
name|IsDefinition
parameter_list|,
name|unsigned
name|ScopeLine
parameter_list|,
name|unsigned
name|Flags
parameter_list|,
name|int
name|IsOptimized
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateAutoVariable
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|LLVMMetadataRef
name|Ty
parameter_list|,
name|int
name|AlwaysPreserve
parameter_list|,
name|unsigned
name|Flags
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateParameterVariable
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|unsigned
name|ArgNo
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|LLVMMetadataRef
name|Ty
parameter_list|,
name|int
name|AlwaysPreserve
parameter_list|,
name|unsigned
name|Flags
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateBasicType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|unsigned
name|Encoding
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreatePointerType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|PointeeType
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateSubroutineType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|LLVMMetadataRef
name|ParameterTypes
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateStructType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|,
name|unsigned
name|Flags
parameter_list|,
name|LLVMMetadataRef
name|DerivedFrom
parameter_list|,
name|LLVMMetadataRef
name|ElementTypes
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateReplaceableCompositeType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|unsigned
name|Tag
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|unsigned
name|RuntimeLang
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|,
name|unsigned
name|Flags
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateMemberType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Scope
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|,
name|uint64_t
name|OffsetInBits
parameter_list|,
name|unsigned
name|Flags
parameter_list|,
name|LLVMMetadataRef
name|Ty
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateArrayType
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|uint64_t
name|SizeInBits
parameter_list|,
name|uint32_t
name|AlignInBits
parameter_list|,
name|LLVMMetadataRef
name|ElementType
parameter_list|,
name|LLVMMetadataRef
name|Subscripts
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateTypedef
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
name|Ty
parameter_list|,
specifier|const
name|char
modifier|*
name|Name
parameter_list|,
name|LLVMMetadataRef
name|File
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|LLVMMetadataRef
name|Context
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderGetOrCreateSubrange
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|int64_t
name|Lo
parameter_list|,
name|int64_t
name|Count
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderGetOrCreateArray
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
modifier|*
name|Data
parameter_list|,
name|size_t
name|Length
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderGetOrCreateTypeArray
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMMetadataRef
modifier|*
name|Data
parameter_list|,
name|size_t
name|Length
parameter_list|)
function_decl|;
name|LLVMMetadataRef
name|LLVMDIBuilderCreateExpression
parameter_list|(
name|LLVMDIBuilderRef
name|Dref
parameter_list|,
name|int64_t
modifier|*
name|Addr
parameter_list|,
name|size_t
name|Length
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMDIBuilderInsertDeclareAtEnd
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMValueRef
name|Storage
parameter_list|,
name|LLVMMetadataRef
name|VarInfo
parameter_list|,
name|LLVMMetadataRef
name|Expr
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|)
function_decl|;
name|LLVMValueRef
name|LLVMDIBuilderInsertValueAtEnd
parameter_list|(
name|LLVMDIBuilderRef
name|D
parameter_list|,
name|LLVMValueRef
name|Val
parameter_list|,
name|uint64_t
name|Offset
parameter_list|,
name|LLVMMetadataRef
name|VarInfo
parameter_list|,
name|LLVMMetadataRef
name|Expr
parameter_list|,
name|LLVMBasicBlockRef
name|Block
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|// extern "C"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

