begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBNVPAIR_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBNVPAIR_H
end_define

begin_include
include|#
directive|include
file|<sys/nvpair.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<regex.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * All interfaces described in this file are private to Solaris, and  * are subject to change at any time and without notice.  The public  * nvlist/nvpair interfaces, as documented in manpage sections 3NVPAIR,  * are all imported from<sys/nvpair.h> included above.  */
specifier|extern
name|int
name|nvpair_value_match
parameter_list|(
name|nvpair_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|nvpair_value_match_regex
parameter_list|(
name|nvpair_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|regex_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nvlist_print
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|dump_nvlist
parameter_list|(
name|nvlist_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/*  * Private nvlist printing interface that allows the caller some control  * over output rendering (as opposed to nvlist_print and dump_nvlist).  *  * Obtain an opaque nvlist_prtctl_t cookie using nvlist_prtctl_alloc  * (NULL on failure);  on return the cookie is set up for default formatting  * and rendering.  Quote the cookie in subsequent customisation functions and  * then pass the cookie to nvlist_prt to render the nvlist.  Finally,  * use nvlist_prtctl_free to release the cookie.  *  * For all nvlist_lookup_xxx and nvlist_lookup_xxx_array functions  * we have a corresponding brace of functions that appoint replacement  * rendering functions:  *  *	extern void nvlist_prtctl_xxx(nvlist_prtctl_t,  *	    void (*)(nvlist_prtctl_t ctl, void *private, const char *name,  *	    xxxtype value))  *  *	and  *  *	extern void nvlist_prtctl_xxx_array(nvlist_prtctl_t,  *	    void (*)(nvlist_prtctl_t ctl, void *private, const char *name,  *	    xxxtype value, uint_t count))  *  * where xxxtype is the C datatype corresponding to xxx, eg int8_t for "int8"  * and char * for "string".  The function that is appointed to render the  * specified datatype receives as arguments the cookie, the nvlist  * member name, the value of that member (or a pointer for array function),  * and (for array rendering functions) a count of the number of elements.  */
typedef|typedef
name|struct
name|nvlist_prtctl
modifier|*
name|nvlist_prtctl_t
typedef|;
comment|/* opaque */
enum|enum
name|nvlist_indent_mode
block|{
name|NVLIST_INDENT_ABS
block|,
comment|/* Absolute indentation */
name|NVLIST_INDENT_TABBED
comment|/* Indent with tabstops */
block|}
enum|;
specifier|extern
name|nvlist_prtctl_t
name|nvlist_prtctl_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nvlist_prtctl_free
parameter_list|(
name|nvlist_prtctl_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nvlist_prt
parameter_list|(
name|nvlist_t
modifier|*
parameter_list|,
name|nvlist_prtctl_t
parameter_list|)
function_decl|;
comment|/* Output stream */
specifier|extern
name|void
name|nvlist_prtctl_setdest
parameter_list|(
name|nvlist_prtctl_t
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|FILE
modifier|*
name|nvlist_prtctl_getdest
parameter_list|(
name|nvlist_prtctl_t
parameter_list|)
function_decl|;
comment|/* Indentation mode, start indent, indent increment; default tabbed/0/1 */
specifier|extern
name|void
name|nvlist_prtctl_setindent
parameter_list|(
name|nvlist_prtctl_t
parameter_list|,
name|enum
name|nvlist_indent_mode
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nvlist_prtctl_doindent
parameter_list|(
name|nvlist_prtctl_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
enum|enum
name|nvlist_prtctl_fmt
block|{
name|NVLIST_FMT_MEMBER_NAME
block|,
comment|/* name fmt; default "%s = " */
name|NVLIST_FMT_MEMBER_POSTAMBLE
block|,
comment|/* after nvlist member; default "\n" */
name|NVLIST_FMT_BTWN_ARRAY
comment|/* between array members; default " " */
block|}
enum|;
specifier|extern
name|void
name|nvlist_prtctl_setfmt
parameter_list|(
name|nvlist_prtctl_t
parameter_list|,
name|enum
name|nvlist_prtctl_fmt
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nvlist_prtctl_dofmt
parameter_list|(
name|nvlist_prtctl_t
parameter_list|,
name|enum
name|nvlist_prtctl_fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/*  * Function prototypes for interfaces that appoint a new rendering function  * for single-valued nvlist members.  *  * A replacement function receives arguments as follows:  *  *	nvlist_prtctl_t	Print control structure; do not change preferences  *			for this object from a print callback function.  *  *	void *		The function-private cookie argument registered  *			when the replacement function was appointed.  *  *	nvlist_t *	The full nvlist that is being processed.  The  *			rendering function is called to render a single  *			member (name and value passed as below) but it may  *			want to reference or incorporate other aspects of  *			the full nvlist.  *  *	const char *	Member name to render  *  *	valtype		Value of the member to render  *  * The function must return non-zero if it has rendered output for this  * member, or 0 if it wants to default to standard rendering for this  * one member.  */
define|#
directive|define
name|NVLIST_PRINTCTL_SVDECL
parameter_list|(
name|funcname
parameter_list|,
name|valtype
parameter_list|)
define|\
value|extern void funcname(nvlist_prtctl_t, \     int (*)(nvlist_prtctl_t, void *, nvlist_t *, const char *, valtype), \     void *)
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_boolean
argument_list|,
name|int
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_boolean_value
argument_list|,
name|boolean_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_byte
argument_list|,
name|uchar_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_int8
argument_list|,
name|int8_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_uint8
argument_list|,
name|uint8_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_int16
argument_list|,
name|int16_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_uint16
argument_list|,
name|uint16_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_int32
argument_list|,
name|int32_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_uint32
argument_list|,
name|uint32_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_int64
argument_list|,
name|int64_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_uint64
argument_list|,
name|uint64_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_double
argument_list|,
name|double
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_string
argument_list|,
name|char
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_hrtime
argument_list|,
name|hrtime_t
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_SVDECL
argument_list|(
name|nvlist_prtctlop_nvlist
argument_list|,
name|nvlist_t
operator|*
argument_list|)
expr_stmt|;
undef|#
directive|undef
name|NVLIST_PRINTCTL_SVDECL
comment|/* was just for "clarity" above */
comment|/*  * Function prototypes for interfaces that appoint a new rendering function  * for array-valued nvlist members.  *  * One additional argument is taken: uint_t for the number of array elements  *  * Return values as above.  */
define|#
directive|define
name|NVLIST_PRINTCTL_AVDECL
parameter_list|(
name|funcname
parameter_list|,
name|vtype
parameter_list|)
define|\
value|extern void funcname(nvlist_prtctl_t, \     int (*)(nvlist_prtctl_t, void *, nvlist_t *, const char *, vtype, uint_t), \     void *)
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_boolean_array
argument_list|,
name|boolean_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_byte_array
argument_list|,
name|uchar_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_int8_array
argument_list|,
name|int8_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_uint8_array
argument_list|,
name|uint8_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_int16_array
argument_list|,
name|int16_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_uint16_array
argument_list|,
name|uint16_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_int32_array
argument_list|,
name|int32_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_uint32_array
argument_list|,
name|uint32_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_int64_array
argument_list|,
name|int64_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_uint64_array
argument_list|,
name|uint64_t
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_string_array
argument_list|,
name|char
operator|*
operator|*
argument_list|)
expr_stmt|;
name|NVLIST_PRINTCTL_AVDECL
argument_list|(
name|nvlist_prtctlop_nvlist_array
argument_list|,
name|nvlist_t
operator|*
operator|*
argument_list|)
expr_stmt|;
undef|#
directive|undef
name|NVLIST_PRINTCTL_AVDECL
comment|/* was just for "clarity" above */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBNVPAIR_H */
end_comment

end_unit

