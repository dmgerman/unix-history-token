begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2004 Michael Bushkov<bushman@rsu.ru>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__NS_CACHED_CLI_H__
end_ifndef

begin_define
define|#
directive|define
name|__NS_CACHED_CLI_H__
end_define

begin_comment
comment|/*  * This file contains API for working with caching daemon  */
end_comment

begin_enum
enum|enum
name|comm_element_t
block|{
name|CET_UNDEFINED
init|=
literal|0
block|,
name|CET_WRITE_REQUEST
init|=
literal|1
block|,
name|CET_WRITE_RESPONSE
init|=
literal|2
block|,
name|CET_READ_REQUEST
init|=
literal|3
block|,
name|CET_READ_RESPONSE
init|=
literal|4
block|,
name|CET_TRANSFORM_REQUEST
init|=
literal|5
block|,
name|CET_TRANSFORM_RESPONSE
init|=
literal|6
block|,
name|CET_MP_WRITE_SESSION_REQUEST
init|=
literal|7
block|,
name|CET_MP_WRITE_SESSION_RESPONSE
init|=
literal|8
block|,
name|CET_MP_WRITE_SESSION_WRITE_REQUEST
init|=
literal|9
block|,
name|CET_MP_WRITE_SESSION_WRITE_RESPONSE
init|=
literal|10
block|,
name|CET_MP_WRITE_SESSION_CLOSE_NOTIFICATION
init|=
literal|11
block|,
name|CET_MP_WRITE_SESSION_ABANDON_NOTIFICATION
init|=
literal|12
block|,
name|CET_MP_READ_SESSION_REQUEST
init|=
literal|13
block|,
name|CET_MP_READ_SESSION_RESPONSE
init|=
literal|14
block|,
name|CET_MP_READ_SESSION_READ_REQUEST
init|=
literal|15
block|,
name|CET_MP_READ_SESSION_READ_RESPONSE
init|=
literal|16
block|,
name|CET_MP_READ_SESSION_CLOSE_NOTIFICATION
init|=
literal|17
block|}
enum|;
end_enum

begin_struct
struct|struct
name|cached_connection_params
block|{
name|char
modifier|*
name|socket_path
decl_stmt|;
name|struct
name|timeval
name|timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|cached_connection_
block|{
name|int
name|sockfd
decl_stmt|;
name|int
name|read_queue
decl_stmt|;
name|int
name|write_queue
decl_stmt|;
name|int
name|mp_flag
decl_stmt|;
comment|/* shows if the connection is used for 				 * multipart operations */
block|}
struct|;
end_struct

begin_comment
comment|/* simple abstractions for not to write "struct" every time */
end_comment

begin_typedef
typedef|typedef
name|struct
name|cached_connection_
modifier|*
name|cached_connection
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|cached_connection_
modifier|*
name|cached_mp_write_session
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|cached_connection_
modifier|*
name|cached_mp_read_session
typedef|;
end_typedef

begin_define
define|#
directive|define
name|INVALID_CACHED_CONNECTION
value|(NULL)
end_define

begin_define
define|#
directive|define
name|INVALID_CACHED_MP_WRITE_SESSION
value|(NULL)
end_define

begin_define
define|#
directive|define
name|INVALID_CACHED_MP_READ_SESSION
value|(NULL)
end_define

begin_function_decl
name|__BEGIN_DECLS
comment|/* initialization/destruction routines */
specifier|extern
name|cached_connection
name|__open_cached_connection
parameter_list|(
name|struct
name|cached_connection_params
specifier|const
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__close_cached_connection
parameter_list|(
name|cached_connection
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* simple read/write operations */
end_comment

begin_function_decl
specifier|extern
name|int
name|__cached_write
parameter_list|(
name|cached_connection
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__cached_read
parameter_list|(
name|cached_connection
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* multipart read/write operations */
end_comment

begin_function_decl
specifier|extern
name|cached_mp_write_session
name|__open_cached_mp_write_session
parameter_list|(
name|struct
name|cached_connection_params
specifier|const
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__cached_mp_write
parameter_list|(
name|cached_mp_write_session
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__abandon_cached_mp_write_session
parameter_list|(
name|cached_mp_write_session
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__close_cached_mp_write_session
parameter_list|(
name|cached_mp_write_session
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|cached_mp_read_session
name|__open_cached_mp_read_session
parameter_list|(
name|struct
name|cached_connection_params
specifier|const
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__cached_mp_read
parameter_list|(
name|cached_mp_read_session
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__close_cached_mp_read_session
parameter_list|(
name|cached_mp_read_session
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

end_unit

