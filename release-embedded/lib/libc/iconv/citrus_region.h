begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_region.h,v 1.7 2008/02/09 14:56:20 junyoung Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_REGION_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_REGION_H_
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_struct
struct|struct
name|_citrus_region
block|{
name|void
modifier|*
name|r_head
decl_stmt|;
name|size_t
name|r_size
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
name|__inline
name|void
name|_citrus_region_init
parameter_list|(
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|void
modifier|*
name|h
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
name|r
operator|->
name|r_head
operator|=
name|h
expr_stmt|;
name|r
operator|->
name|r_size
operator|=
name|sz
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|_citrus_region_head
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|)
block|{
return|return
operator|(
name|r
operator|->
name|r_head
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|size_t
name|_citrus_region_size
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|)
block|{
return|return
operator|(
name|r
operator|->
name|r_size
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_region_check
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|ofs
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
return|return
operator|(
name|r
operator|->
name|r_size
operator|>=
name|ofs
operator|+
name|sz
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
modifier|*
name|_citrus_region_offset
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|pos
parameter_list|)
block|{
return|return
operator|(
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uint8_t
operator|*
operator|)
name|r
operator|->
name|r_head
operator|+
name|pos
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint8_t
name|_citrus_region_peek8
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|pos
parameter_list|)
block|{
return|return
operator|(
operator|*
operator|(
name|uint8_t
operator|*
operator|)
name|_citrus_region_offset
argument_list|(
name|r
argument_list|,
name|pos
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint16_t
name|_citrus_region_peek16
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|pos
parameter_list|)
block|{
name|uint16_t
name|val
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|val
argument_list|,
name|_citrus_region_offset
argument_list|(
name|r
argument_list|,
name|pos
argument_list|)
argument_list|,
operator|(
name|size_t
operator|)
literal|2
argument_list|)
expr_stmt|;
return|return
operator|(
name|val
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|_citrus_region_peek32
parameter_list|(
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|pos
parameter_list|)
block|{
name|uint32_t
name|val
decl_stmt|;
name|memcpy
argument_list|(
operator|&
name|val
argument_list|,
name|_citrus_region_offset
argument_list|(
name|r
argument_list|,
name|pos
argument_list|)
argument_list|,
operator|(
name|size_t
operator|)
literal|4
argument_list|)
expr_stmt|;
return|return
operator|(
name|val
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_citrus_region_get_subregion
parameter_list|(
name|struct
name|_citrus_region
modifier|*
name|subr
parameter_list|,
specifier|const
name|struct
name|_citrus_region
modifier|*
name|r
parameter_list|,
name|size_t
name|ofs
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
if|if
condition|(
name|_citrus_region_check
argument_list|(
name|r
argument_list|,
name|ofs
argument_list|,
name|sz
argument_list|)
condition|)
return|return
operator|(
operator|-
literal|1
operator|)
return|;
name|_citrus_region_init
argument_list|(
name|subr
argument_list|,
name|_citrus_region_offset
argument_list|(
name|r
argument_list|,
name|ofs
argument_list|)
argument_list|,
name|sz
argument_list|)
expr_stmt|;
return|return
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

