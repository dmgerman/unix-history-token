begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* $NetBSD: citrus_lookup.h,v 1.2 2004/07/21 14:16:34 tshiozak Exp $ */
end_comment

begin_comment
comment|/*-  * Copyright (c)2003 Citrus Project,  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CITRUS_LOOKUP_H_
end_ifndef

begin_define
define|#
directive|define
name|_CITRUS_LOOKUP_H_
end_define

begin_define
define|#
directive|define
name|_CITRUS_LOOKUP_CASE_SENSITIVE
value|0
end_define

begin_define
define|#
directive|define
name|_CITRUS_LOOKUP_CASE_IGNORE
value|1
end_define

begin_struct_decl
struct_decl|struct
name|_citrus_lookup
struct_decl|;
end_struct_decl

begin_function_decl
name|__BEGIN_DECLS
name|char
modifier|*
name|_citrus_lookup_simple
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_lookup_seq_open
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_lookup_seq_rewind
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_lookup_seq_next
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
parameter_list|,
name|struct
name|_region
modifier|*
parameter_list|,
name|struct
name|_region
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_lookup_seq_lookup
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|_region
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_citrus_lookup_get_number_of_entries
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_citrus_lookup_seq_close
parameter_list|(
name|struct
name|_citrus_lookup
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|__END_DECLS
specifier|static
name|__inline
specifier|const
name|char
modifier|*
name|_citrus_lookup_alias
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|n
parameter_list|,
name|int
name|ignore_case
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|ret
decl_stmt|;
name|ret
operator|=
name|_citrus_lookup_simple
argument_list|(
name|path
argument_list|,
name|key
argument_list|,
name|buf
argument_list|,
name|n
argument_list|,
name|ignore_case
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
name|ret
operator|=
name|key
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

