begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/*-  * Copyright (c) 2008 Hans Petter Selasky. All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBUSB20_COMPAT_01_H_
end_ifndef

begin_define
define|#
directive|define
name|_LIBUSB20_COMPAT_01_H_
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|LIBUSB_GLOBAL_INCLUDE_FILE
end_ifndef

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/endian.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* USB interface class codes */
end_comment

begin_define
define|#
directive|define
name|USB_CLASS_PER_INTERFACE
value|0
end_define

begin_define
define|#
directive|define
name|USB_CLASS_AUDIO
value|1
end_define

begin_define
define|#
directive|define
name|USB_CLASS_COMM
value|2
end_define

begin_define
define|#
directive|define
name|USB_CLASS_HID
value|3
end_define

begin_define
define|#
directive|define
name|USB_CLASS_PRINTER
value|7
end_define

begin_define
define|#
directive|define
name|USB_CLASS_PTP
value|6
end_define

begin_define
define|#
directive|define
name|USB_CLASS_MASS_STORAGE
value|8
end_define

begin_define
define|#
directive|define
name|USB_CLASS_HUB
value|9
end_define

begin_define
define|#
directive|define
name|USB_CLASS_DATA
value|10
end_define

begin_define
define|#
directive|define
name|USB_CLASS_VENDOR_SPEC
value|0xff
end_define

begin_comment
comment|/* USB descriptor types */
end_comment

begin_define
define|#
directive|define
name|USB_DT_DEVICE
value|0x01
end_define

begin_define
define|#
directive|define
name|USB_DT_CONFIG
value|0x02
end_define

begin_define
define|#
directive|define
name|USB_DT_STRING
value|0x03
end_define

begin_define
define|#
directive|define
name|USB_DT_INTERFACE
value|0x04
end_define

begin_define
define|#
directive|define
name|USB_DT_ENDPOINT
value|0x05
end_define

begin_define
define|#
directive|define
name|USB_DT_HID
value|0x21
end_define

begin_define
define|#
directive|define
name|USB_DT_REPORT
value|0x22
end_define

begin_define
define|#
directive|define
name|USB_DT_PHYSICAL
value|0x23
end_define

begin_define
define|#
directive|define
name|USB_DT_HUB
value|0x29
end_define

begin_comment
comment|/* USB descriptor type sizes */
end_comment

begin_define
define|#
directive|define
name|USB_DT_DEVICE_SIZE
value|18
end_define

begin_define
define|#
directive|define
name|USB_DT_CONFIG_SIZE
value|9
end_define

begin_define
define|#
directive|define
name|USB_DT_INTERFACE_SIZE
value|9
end_define

begin_define
define|#
directive|define
name|USB_DT_ENDPOINT_SIZE
value|7
end_define

begin_define
define|#
directive|define
name|USB_DT_ENDPOINT_AUDIO_SIZE
value|9
end_define

begin_define
define|#
directive|define
name|USB_DT_HUB_NONVAR_SIZE
value|7
end_define

begin_comment
comment|/* USB descriptor header */
end_comment

begin_struct
struct|struct
name|usb_descriptor_header
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB string descriptor */
end_comment

begin_struct
struct|struct
name|usb_string_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|wData
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB HID descriptor */
end_comment

begin_struct
struct|struct
name|usb_hid_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|bcdHID
decl_stmt|;
name|uint8_t
name|bCountryCode
decl_stmt|;
name|uint8_t
name|bNumDescriptors
decl_stmt|;
comment|/* uint8_t  bReportDescriptorType; */
comment|/* uint16_t wDescriptorLength; */
comment|/* ... */
block|}
struct|;
end_struct

begin_comment
comment|/* USB endpoint descriptor */
end_comment

begin_define
define|#
directive|define
name|USB_MAXENDPOINTS
value|32
end_define

begin_struct
struct|struct
name|usb_endpoint_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bEndpointAddress
decl_stmt|;
define|#
directive|define
name|USB_ENDPOINT_ADDRESS_MASK
value|0x0f
define|#
directive|define
name|USB_ENDPOINT_DIR_MASK
value|0x80
name|uint8_t
name|bmAttributes
decl_stmt|;
define|#
directive|define
name|USB_ENDPOINT_TYPE_MASK
value|0x03
define|#
directive|define
name|USB_ENDPOINT_TYPE_CONTROL
value|0
define|#
directive|define
name|USB_ENDPOINT_TYPE_ISOCHRONOUS
value|1
define|#
directive|define
name|USB_ENDPOINT_TYPE_BULK
value|2
define|#
directive|define
name|USB_ENDPOINT_TYPE_INTERRUPT
value|3
name|uint16_t
name|wMaxPacketSize
decl_stmt|;
name|uint8_t
name|bInterval
decl_stmt|;
name|uint8_t
name|bRefresh
decl_stmt|;
name|uint8_t
name|bSynchAddress
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
comment|/* Extra descriptors */
name|int
name|extralen
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB interface descriptor */
end_comment

begin_define
define|#
directive|define
name|USB_MAXINTERFACES
value|32
end_define

begin_struct
struct|struct
name|usb_interface_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint8_t
name|bInterfaceNumber
decl_stmt|;
name|uint8_t
name|bAlternateSetting
decl_stmt|;
name|uint8_t
name|bNumEndpoints
decl_stmt|;
name|uint8_t
name|bInterfaceClass
decl_stmt|;
name|uint8_t
name|bInterfaceSubClass
decl_stmt|;
name|uint8_t
name|bInterfaceProtocol
decl_stmt|;
name|uint8_t
name|iInterface
decl_stmt|;
name|struct
name|usb_endpoint_descriptor
modifier|*
name|endpoint
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
comment|/* Extra descriptors */
name|int
name|extralen
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|USB_MAXALTSETTING
value|128
end_define

begin_comment
comment|/* Hard limit */
end_comment

begin_struct
struct|struct
name|usb_interface
block|{
name|struct
name|usb_interface_descriptor
modifier|*
name|altsetting
decl_stmt|;
name|int
name|num_altsetting
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB configuration descriptor */
end_comment

begin_define
define|#
directive|define
name|USB_MAXCONFIG
value|8
end_define

begin_struct
struct|struct
name|usb_config_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|wTotalLength
decl_stmt|;
name|uint8_t
name|bNumInterfaces
decl_stmt|;
name|uint8_t
name|bConfigurationValue
decl_stmt|;
name|uint8_t
name|iConfiguration
decl_stmt|;
name|uint8_t
name|bmAttributes
decl_stmt|;
name|uint8_t
name|MaxPower
decl_stmt|;
name|struct
name|usb_interface
modifier|*
name|interface
decl_stmt|;
name|uint8_t
modifier|*
name|extra
decl_stmt|;
comment|/* Extra descriptors */
name|int
name|extralen
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB device descriptor */
end_comment

begin_struct
struct|struct
name|usb_device_descriptor
block|{
name|uint8_t
name|bLength
decl_stmt|;
name|uint8_t
name|bDescriptorType
decl_stmt|;
name|uint16_t
name|bcdUSB
decl_stmt|;
name|uint8_t
name|bDeviceClass
decl_stmt|;
name|uint8_t
name|bDeviceSubClass
decl_stmt|;
name|uint8_t
name|bDeviceProtocol
decl_stmt|;
name|uint8_t
name|bMaxPacketSize0
decl_stmt|;
name|uint16_t
name|idVendor
decl_stmt|;
name|uint16_t
name|idProduct
decl_stmt|;
name|uint16_t
name|bcdDevice
decl_stmt|;
name|uint8_t
name|iManufacturer
decl_stmt|;
name|uint8_t
name|iProduct
decl_stmt|;
name|uint8_t
name|iSerialNumber
decl_stmt|;
name|uint8_t
name|bNumConfigurations
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* USB setup packet */
end_comment

begin_struct
struct|struct
name|usb_ctrl_setup
block|{
name|uint8_t
name|bRequestType
decl_stmt|;
define|#
directive|define
name|USB_RECIP_DEVICE
value|0x00
define|#
directive|define
name|USB_RECIP_INTERFACE
value|0x01
define|#
directive|define
name|USB_RECIP_ENDPOINT
value|0x02
define|#
directive|define
name|USB_RECIP_OTHER
value|0x03
define|#
directive|define
name|USB_TYPE_STANDARD
value|(0x00<< 5)
define|#
directive|define
name|USB_TYPE_CLASS
value|(0x01<< 5)
define|#
directive|define
name|USB_TYPE_VENDOR
value|(0x02<< 5)
define|#
directive|define
name|USB_TYPE_RESERVED
value|(0x03<< 5)
define|#
directive|define
name|USB_ENDPOINT_IN
value|0x80
define|#
directive|define
name|USB_ENDPOINT_OUT
value|0x00
name|uint8_t
name|bRequest
decl_stmt|;
define|#
directive|define
name|USB_REQ_GET_STATUS
value|0x00
define|#
directive|define
name|USB_REQ_CLEAR_FEATURE
value|0x01
define|#
directive|define
name|USB_REQ_SET_FEATURE
value|0x03
define|#
directive|define
name|USB_REQ_SET_ADDRESS
value|0x05
define|#
directive|define
name|USB_REQ_GET_DESCRIPTOR
value|0x06
define|#
directive|define
name|USB_REQ_SET_DESCRIPTOR
value|0x07
define|#
directive|define
name|USB_REQ_GET_CONFIGURATION
value|0x08
define|#
directive|define
name|USB_REQ_SET_CONFIGURATION
value|0x09
define|#
directive|define
name|USB_REQ_GET_INTERFACE
value|0x0A
define|#
directive|define
name|USB_REQ_SET_INTERFACE
value|0x0B
define|#
directive|define
name|USB_REQ_SYNCH_FRAME
value|0x0C
name|uint16_t
name|wValue
decl_stmt|;
name|uint16_t
name|wIndex
decl_stmt|;
name|uint16_t
name|wLength
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Error codes */
end_comment

begin_define
define|#
directive|define
name|USB_ERROR_BEGIN
value|500000
end_define

begin_comment
comment|/* Byte swapping */
end_comment

begin_define
define|#
directive|define
name|USB_LE16_TO_CPU
parameter_list|(
name|x
parameter_list|)
value|le16toh(x)
end_define

begin_comment
comment|/* Data types */
end_comment

begin_struct_decl
struct_decl|struct
name|usb_device
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|usb_bus
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * To maintain compatibility with applications already built with libusb,  * we must only add entries to the end of this structure. NEVER delete or  * move members and only change types if you really know what you're doing.  */
end_comment

begin_struct
struct|struct
name|usb_device
block|{
name|struct
name|usb_device
modifier|*
name|next
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|prev
decl_stmt|;
name|char
name|filename
index|[
name|PATH_MAX
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|usb_bus
modifier|*
name|bus
decl_stmt|;
name|struct
name|usb_device_descriptor
name|descriptor
decl_stmt|;
name|struct
name|usb_config_descriptor
modifier|*
name|config
decl_stmt|;
name|void
modifier|*
name|dev
decl_stmt|;
name|uint8_t
name|devnum
decl_stmt|;
name|uint8_t
name|num_children
decl_stmt|;
name|struct
name|usb_device
modifier|*
modifier|*
name|children
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|usb_bus
block|{
name|struct
name|usb_bus
modifier|*
name|next
decl_stmt|;
name|struct
name|usb_bus
modifier|*
name|prev
decl_stmt|;
name|char
name|dirname
index|[
name|PATH_MAX
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|devices
decl_stmt|;
name|uint32_t
name|location
decl_stmt|;
name|struct
name|usb_device
modifier|*
name|root_dev
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|usb_dev_handle
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|usb_dev_handle
name|usb_dev_handle
typedef|;
end_typedef

begin_comment
comment|/* Variables */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|usb_bus
modifier|*
name|usb_busses
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
literal|0
block|}
comment|/* style */
endif|#
directive|endif
comment|/* Function prototypes from "libusb20_compat01.c" */
name|usb_dev_handle
modifier|*
name|usb_open
parameter_list|(
name|struct
name|usb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|usb_close
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|usb_get_string
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|langid
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|)
function_decl|;
name|int
name|usb_get_string_simple
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|index
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|)
function_decl|;
name|int
name|usb_get_descriptor_by_endpoint
parameter_list|(
name|usb_dev_handle
modifier|*
name|udev
parameter_list|,
name|int
name|ep
parameter_list|,
name|uint8_t
name|type
parameter_list|,
name|uint8_t
name|index
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|usb_get_descriptor
parameter_list|(
name|usb_dev_handle
modifier|*
name|udev
parameter_list|,
name|uint8_t
name|type
parameter_list|,
name|uint8_t
name|index
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|int
name|usb_parse_descriptor
parameter_list|(
name|uint8_t
modifier|*
name|source
parameter_list|,
name|char
modifier|*
name|description
parameter_list|,
name|void
modifier|*
name|dest
parameter_list|)
function_decl|;
name|int
name|usb_parse_configuration
parameter_list|(
name|struct
name|usb_config_descriptor
modifier|*
name|config
parameter_list|,
name|uint8_t
modifier|*
name|buffer
parameter_list|)
function_decl|;
name|void
name|usb_destroy_configuration
parameter_list|(
name|struct
name|usb_device
modifier|*
name|dev
parameter_list|)
function_decl|;
name|void
name|usb_fetch_and_parse_descriptors
parameter_list|(
name|usb_dev_handle
modifier|*
name|udev
parameter_list|)
function_decl|;
name|int
name|usb_bulk_write
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|ep
parameter_list|,
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
name|int
name|usb_bulk_read
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|ep
parameter_list|,
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
name|int
name|usb_interrupt_write
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|ep
parameter_list|,
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
name|int
name|usb_interrupt_read
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|ep
parameter_list|,
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
name|int
name|usb_control_msg
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|requesttype
parameter_list|,
name|int
name|request
parameter_list|,
name|int
name|value
parameter_list|,
name|int
name|index
parameter_list|,
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
name|int
name|usb_set_configuration
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|configuration
parameter_list|)
function_decl|;
name|int
name|usb_claim_interface
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|usb_release_interface
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
name|int
name|usb_set_altinterface
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|alternate
parameter_list|)
function_decl|;
name|int
name|usb_resetep
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|unsigned
name|int
name|ep
parameter_list|)
function_decl|;
name|int
name|usb_clear_halt
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|unsigned
name|int
name|ep
parameter_list|)
function_decl|;
name|int
name|usb_reset
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|)
function_decl|;
name|int
name|usb_check_connected
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|usb_strerror
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|usb_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|usb_set_debug
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
name|int
name|usb_find_busses
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|usb_find_devices
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|struct
name|usb_device
modifier|*
name|usb_device
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|)
function_decl|;
name|struct
name|usb_bus
modifier|*
name|usb_get_busses
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|usb_get_driver_np
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|interface
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|namelen
parameter_list|)
function_decl|;
name|int
name|usb_detach_kernel_driver_np
parameter_list|(
name|usb_dev_handle
modifier|*
name|dev
parameter_list|,
name|int
name|interface
parameter_list|)
function_decl|;
if|#
directive|if
literal|0
block|{
comment|/* style */
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBUSB20_COMPAT01_H_ */
end_comment

end_unit

