begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/sha/sha.h */
end_comment

begin_comment
comment|/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)  * All rights reserved.  *  * This package is an SSL implementation written  * by Eric Young (eay@cryptsoft.com).  * The implementation was written so as to conform with Netscapes SSL.  *   * This library is free for commercial and non-commercial use as long as  * the following conditions are aheared to.  The following conditions  * apply to all code found in this distribution, be it the RC4, RSA,  * lhash, DES, etc., code; not just the SSL code.  The SSL documentation  * included with this distribution is covered by the same copyright terms  * except that the holder is Tim Hudson (tjh@cryptsoft.com).  *   * Copyright remains Eric Young's, and as such any Copyright notices in  * the code are not to be removed.  * If this package is used in a product, Eric Young should be given attribution  * as the author of the parts of the library used.  * This can be in the form of a textual message at program startup or  * in documentation (online or textual) provided with the package.  *   * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    "This product includes cryptographic software written by  *     Eric Young (eay@cryptsoft.com)"  *    The word 'cryptographic' can be left out if the rouines from the library  *    being used are not cryptographic related :-).  * 4. If you include any Windows specific code (or a derivative thereof) from   *    the apps directory (application code) you must include an acknowledgement:  *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"  *   * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *   * The licence and distribution terms for any publically available version or  * derivative of this code cannot be changed.  i.e. this code cannot simply be  * copied and put under another distribution licence  * [including the GNU Public Licence.]  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_SHA_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_SHA_H
end_define

begin_include
include|#
directive|include
file|<openssl/e_os2.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_NO_SHA
argument_list|)
operator|||
operator|(
name|defined
argument_list|(
name|OPENSSL_NO_SHA0
argument_list|)
operator|&&
name|defined
argument_list|(
name|OPENSSL_NO_SHA1
argument_list|)
operator|)
error|#
directive|error
error|SHA is disabled.
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|OPENSSL_FIPS
argument_list|)
define|#
directive|define
name|FIPS_SHA_SIZE_T
value|size_t
endif|#
directive|endif
comment|/*  * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  * ! SHA_LONG has to be at least 32 bits wide. If it's wider, then !  * ! SHA_LONG_LOG2 has to be defined along.                        !  * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  */
if|#
directive|if
name|defined
argument_list|(
name|__LP32__
argument_list|)
define|#
directive|define
name|SHA_LONG
value|unsigned long
elif|#
directive|elif
name|defined
argument_list|(
name|OPENSSL_SYS_CRAY
argument_list|)
operator|||
name|defined
argument_list|(
name|__ILP64__
argument_list|)
define|#
directive|define
name|SHA_LONG
value|unsigned long
define|#
directive|define
name|SHA_LONG_LOG2
value|3
else|#
directive|else
define|#
directive|define
name|SHA_LONG
value|unsigned int
endif|#
directive|endif
define|#
directive|define
name|SHA_LBLOCK
value|16
define|#
directive|define
name|SHA_CBLOCK
value|(SHA_LBLOCK*4)
comment|/* SHA treats input data as a 					 * contiguous array of 32 bit 					 * wide big-endian values. */
define|#
directive|define
name|SHA_LAST_BLOCK
value|(SHA_CBLOCK-8)
define|#
directive|define
name|SHA_DIGEST_LENGTH
value|20
typedef|typedef
struct|struct
name|SHAstate_st
block|{
name|SHA_LONG
name|h0
decl_stmt|,
name|h1
decl_stmt|,
name|h2
decl_stmt|,
name|h3
decl_stmt|,
name|h4
decl_stmt|;
name|SHA_LONG
name|Nl
decl_stmt|,
name|Nh
decl_stmt|;
name|SHA_LONG
name|data
index|[
name|SHA_LBLOCK
index|]
decl_stmt|;
name|unsigned
name|int
name|num
decl_stmt|;
block|}
name|SHA_CTX
typedef|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA0
ifdef|#
directive|ifdef
name|OPENSSL_FIPS
name|int
name|private_SHA_Init
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SHA_Init
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA_Update
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|void
name|SHA_Transform
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA1
ifdef|#
directive|ifdef
name|OPENSSL_FIPS
name|int
name|private_SHA1_Init
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SHA1_Init
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA1_Update
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA1_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA1
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|void
name|SHA1_Transform
parameter_list|(
name|SHA_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|SHA256_CBLOCK
value|(SHA_LBLOCK*4)
comment|/* SHA-256 treats input data as a 					 * contiguous array of 32 bit 					 * wide big-endian values. */
define|#
directive|define
name|SHA224_DIGEST_LENGTH
value|28
define|#
directive|define
name|SHA256_DIGEST_LENGTH
value|32
typedef|typedef
struct|struct
name|SHA256state_st
block|{
name|SHA_LONG
name|h
index|[
literal|8
index|]
decl_stmt|;
name|SHA_LONG
name|Nl
decl_stmt|,
name|Nh
decl_stmt|;
name|SHA_LONG
name|data
index|[
name|SHA_LBLOCK
index|]
decl_stmt|;
name|unsigned
name|int
name|num
decl_stmt|,
name|md_len
decl_stmt|;
block|}
name|SHA256_CTX
typedef|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA256
ifdef|#
directive|ifdef
name|OPENSSL_FIPS
name|int
name|private_SHA224_Init
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|private_SHA256_Init
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SHA224_Init
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA224_Update
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA224_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA224
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|SHA256_Init
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA256_Update
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA256_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA256_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA256
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|void
name|SHA256_Transform
parameter_list|(
name|SHA256_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
define|#
directive|define
name|SHA384_DIGEST_LENGTH
value|48
define|#
directive|define
name|SHA512_DIGEST_LENGTH
value|64
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA512
comment|/*  * Unlike 32-bit digest algorithms, SHA-512 *relies* on SHA_LONG64  * being exactly 64-bit wide. See Implementation Notes in sha512.c  * for further details.  */
define|#
directive|define
name|SHA512_CBLOCK
value|(SHA_LBLOCK*8)
comment|/* SHA-512 treats input data as a 					 * contiguous array of 64 bit 					 * wide big-endian values. */
if|#
directive|if
operator|(
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|_WIN64
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
define|#
directive|define
name|SHA_LONG64
value|unsigned __int64
define|#
directive|define
name|U64
parameter_list|(
name|C
parameter_list|)
value|C##UI64
elif|#
directive|elif
name|defined
argument_list|(
name|__arch64__
argument_list|)
define|#
directive|define
name|SHA_LONG64
value|unsigned long
define|#
directive|define
name|U64
parameter_list|(
name|C
parameter_list|)
value|C##UL
else|#
directive|else
define|#
directive|define
name|SHA_LONG64
value|unsigned long long
define|#
directive|define
name|U64
parameter_list|(
name|C
parameter_list|)
value|C##ULL
endif|#
directive|endif
typedef|typedef
struct|struct
name|SHA512state_st
block|{
name|SHA_LONG64
name|h
index|[
literal|8
index|]
decl_stmt|;
name|SHA_LONG64
name|Nl
decl_stmt|,
name|Nh
decl_stmt|;
union|union
block|{
name|SHA_LONG64
name|d
index|[
name|SHA_LBLOCK
index|]
decl_stmt|;
name|unsigned
name|char
name|p
index|[
name|SHA512_CBLOCK
index|]
decl_stmt|;
block|}
name|u
union|;
name|unsigned
name|int
name|num
decl_stmt|,
name|md_len
decl_stmt|;
block|}
name|SHA512_CTX
typedef|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SHA512
ifdef|#
directive|ifdef
name|OPENSSL_FIPS
name|int
name|private_SHA384_Init
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|private_SHA512_Init
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|SHA384_Init
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA384_Update
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA384_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA384
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|int
name|SHA512_Init
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|int
name|SHA512_Update
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|SHA512_Final
parameter_list|(
name|unsigned
name|char
modifier|*
name|md
parameter_list|,
name|SHA512_CTX
modifier|*
name|c
parameter_list|)
function_decl|;
name|unsigned
name|char
modifier|*
name|SHA512
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|d
parameter_list|,
name|size_t
name|n
parameter_list|,
name|unsigned
name|char
modifier|*
name|md
parameter_list|)
function_decl|;
name|void
name|SHA512_Transform
parameter_list|(
name|SHA512_CTX
modifier|*
name|c
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

