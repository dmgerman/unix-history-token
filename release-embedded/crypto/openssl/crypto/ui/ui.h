begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* crypto/ui/ui.h -*- mode:C; c-file-style: "eay" -*- */
end_comment

begin_comment
comment|/* Written by Richard Levitte (richard@levitte.org) for the OpenSSL  * project 2001.  */
end_comment

begin_comment
comment|/* ====================================================================  * Copyright (c) 2001 The OpenSSL Project.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.   *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. All advertising materials mentioning features or use of this  *    software must display the following acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"  *  * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to  *    endorse or promote products derived from this software without  *    prior written permission. For written permission, please contact  *    openssl-core@openssl.org.  *  * 5. Products derived from this software may not be called "OpenSSL"  *    nor may "OpenSSL" appear in their names without prior written  *    permission of the OpenSSL Project.  *  * 6. Redistributions of any form whatsoever must retain the following  *    acknowledgment:  *    "This product includes software developed by the OpenSSL Project  *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"  *  * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY  * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  * ====================================================================  *  * This product includes cryptographic software written by Eric Young  * (eay@cryptsoft.com).  This product includes software written by Tim  * Hudson (tjh@cryptsoft.com).  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEADER_UI_H
end_ifndef

begin_define
define|#
directive|define
name|HEADER_UI_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|OPENSSL_NO_DEPRECATED
end_ifndef

begin_include
include|#
directive|include
file|<openssl/crypto.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<openssl/safestack.h>
end_include

begin_include
include|#
directive|include
file|<openssl/ossl_typ.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Declared already in ossl_typ.h */
comment|/* typedef struct ui_st UI; */
comment|/* typedef struct ui_method_st UI_METHOD; */
comment|/* All the following functions return -1 or NULL on error and in some cases    (UI_process()) -2 if interrupted or in some other way cancelled.    When everything is fine, they return 0, a positive value or a non-NULL    pointer, all depending on their purpose. */
comment|/* Creators and destructor.   */
name|UI
modifier|*
name|UI_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|UI
modifier|*
name|UI_new_method
parameter_list|(
specifier|const
name|UI_METHOD
modifier|*
name|method
parameter_list|)
function_decl|;
name|void
name|UI_free
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
function_decl|;
comment|/* The following functions are used to add strings to be printed and prompt    strings to prompt for data.  The names are UI_{add,dup}_<function>_string    and UI_{add,dup}_input_boolean.     UI_{add,dup}_<function>_string have the following meanings: 	add	add a text or prompt string.  The pointers given to these 		functions are used verbatim, no copying is done. 	dup	make a copy of the text or prompt string, then add the copy 		to the collection of strings in the user interface.<function> 		The function is a name for the functionality that the given 		string shall be used for.  It can be one of: 			input	use the string as data prompt. 			verify	use the string as verification prompt.  This 				is used to verify a previous input. 			info	use the string for informational output. 			error	use the string for error output.    Honestly, there's currently no difference between info and error for the    moment.     UI_{add,dup}_input_boolean have the same semantics for "add" and "dup",    and are typically used when one wants to prompt for a yes/no response.      All of the functions in this group take a UI and a prompt string.    The string input and verify addition functions also take a flag argument,    a buffer for the result to end up with, a minimum input size and a maximum    input size (the result buffer MUST be large enough to be able to contain    the maximum number of characters).  Additionally, the verify addition    functions takes another buffer to compare the result against.    The boolean input functions take an action description string (which should    be safe to ignore if the expected user action is obvious, for example with    a dialog box with an OK button and a Cancel button), a string of acceptable    characters to mean OK and to mean Cancel.  The two last strings are checked    to make sure they don't have common characters.  Additionally, the same    flag argument as for the string input is taken, as well as a result buffer.    The result buffer is required to be at least one byte long.  Depending on    the answer, the first character from the OK or the Cancel character strings    will be stored in the first byte of the result buffer.  No NUL will be    added, so the result is *not* a string.     On success, the all return an index of the added information.  That index    is usefull when retrieving results with UI_get0_result(). */
name|int
name|UI_add_input_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|,
name|int
name|minsize
parameter_list|,
name|int
name|maxsize
parameter_list|)
function_decl|;
name|int
name|UI_dup_input_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|,
name|int
name|minsize
parameter_list|,
name|int
name|maxsize
parameter_list|)
function_decl|;
name|int
name|UI_add_verify_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|,
name|int
name|minsize
parameter_list|,
name|int
name|maxsize
parameter_list|,
specifier|const
name|char
modifier|*
name|test_buf
parameter_list|)
function_decl|;
name|int
name|UI_dup_verify_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|,
name|int
name|minsize
parameter_list|,
name|int
name|maxsize
parameter_list|,
specifier|const
name|char
modifier|*
name|test_buf
parameter_list|)
function_decl|;
name|int
name|UI_add_input_boolean
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
specifier|const
name|char
modifier|*
name|action_desc
parameter_list|,
specifier|const
name|char
modifier|*
name|ok_chars
parameter_list|,
specifier|const
name|char
modifier|*
name|cancel_chars
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|)
function_decl|;
name|int
name|UI_dup_input_boolean
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|prompt
parameter_list|,
specifier|const
name|char
modifier|*
name|action_desc
parameter_list|,
specifier|const
name|char
modifier|*
name|ok_chars
parameter_list|,
specifier|const
name|char
modifier|*
name|cancel_chars
parameter_list|,
name|int
name|flags
parameter_list|,
name|char
modifier|*
name|result_buf
parameter_list|)
function_decl|;
name|int
name|UI_add_info_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
name|int
name|UI_dup_info_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
name|int
name|UI_add_error_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
name|int
name|UI_dup_error_string
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
comment|/* These are the possible flags.  They can be or'ed together. */
comment|/* Use to have echoing of input */
define|#
directive|define
name|UI_INPUT_FLAG_ECHO
value|0x01
comment|/* Use a default password.  Where that password is found is completely    up to the application, it might for example be in the user data set    with UI_add_user_data().  It is not recommended to have more than    one input in each UI being marked with this flag, or the application    might get confused. */
define|#
directive|define
name|UI_INPUT_FLAG_DEFAULT_PWD
value|0x02
comment|/* The user of these routines may want to define flags of their own.  The core    UI won't look at those, but will pass them on to the method routines.  They    must use higher bits so they don't get confused with the UI bits above.    UI_INPUT_FLAG_USER_BASE tells which is the lowest bit to use.  A good    example of use is this:  	#define MY_UI_FLAG1	(0x01<< UI_INPUT_FLAG_USER_BASE)  */
define|#
directive|define
name|UI_INPUT_FLAG_USER_BASE
value|16
comment|/* The following function helps construct a prompt.  object_desc is a    textual short description of the object, for example "pass phrase",    and object_name is the name of the object (might be a card name or    a file name.    The returned string shall always be allocated on the heap with    OPENSSL_malloc(), and need to be free'd with OPENSSL_free().     If the ui_method doesn't contain a pointer to a user-defined prompt    constructor, a default string is built, looking like this:  	"Enter {object_desc} for {object_name}:"     So, if object_desc has the value "pass phrase" and object_name has    the value "foo.key", the resulting string is:  	"Enter pass phrase for foo.key:" */
name|char
modifier|*
name|UI_construct_prompt
parameter_list|(
name|UI
modifier|*
name|ui_method
parameter_list|,
specifier|const
name|char
modifier|*
name|object_desc
parameter_list|,
specifier|const
name|char
modifier|*
name|object_name
parameter_list|)
function_decl|;
comment|/* The following function is used to store a pointer to user-specific data.    Any previous such pointer will be returned and replaced.     For callback purposes, this function makes a lot more sense than using    ex_data, since the latter requires that different parts of OpenSSL or    applications share the same ex_data index.     Note that the UI_OpenSSL() method completely ignores the user data.    Other methods may not, however.  */
name|void
modifier|*
name|UI_add_user_data
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
name|void
modifier|*
name|user_data
parameter_list|)
function_decl|;
comment|/* We need a user data retrieving function as well.  */
name|void
modifier|*
name|UI_get0_user_data
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
function_decl|;
comment|/* Return the result associated with a prompt given with the index i. */
specifier|const
name|char
modifier|*
name|UI_get0_result
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
comment|/* When all strings have been added, process the whole thing. */
name|int
name|UI_process
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
function_decl|;
comment|/* Give a user interface parametrised control commands.  This can be used to    send down an integer, a data pointer or a function pointer, as well as    be used to get information from a UI. */
name|int
name|UI_ctrl
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
name|int
name|cmd
parameter_list|,
name|long
name|i
parameter_list|,
name|void
modifier|*
name|p
parameter_list|,
name|void
function_decl|(
modifier|*
name|f
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
function_decl|;
comment|/* The commands */
comment|/* Use UI_CONTROL_PRINT_ERRORS with the value 1 to have UI_process print the    OpenSSL error stack before printing any info or added error messages and    before any prompting. */
define|#
directive|define
name|UI_CTRL_PRINT_ERRORS
value|1
comment|/* Check if a UI_process() is possible to do again with the same instance of    a user interface.  This makes UI_ctrl() return 1 if it is redoable, and 0    if not. */
define|#
directive|define
name|UI_CTRL_IS_REDOABLE
value|2
comment|/* Some methods may use extra data */
define|#
directive|define
name|UI_set_app_data
parameter_list|(
name|s
parameter_list|,
name|arg
parameter_list|)
value|UI_set_ex_data(s,0,arg)
define|#
directive|define
name|UI_get_app_data
parameter_list|(
name|s
parameter_list|)
value|UI_get_ex_data(s,0)
name|int
name|UI_get_ex_new_index
parameter_list|(
name|long
name|argl
parameter_list|,
name|void
modifier|*
name|argp
parameter_list|,
name|CRYPTO_EX_new
modifier|*
name|new_func
parameter_list|,
name|CRYPTO_EX_dup
modifier|*
name|dup_func
parameter_list|,
name|CRYPTO_EX_free
modifier|*
name|free_func
parameter_list|)
function_decl|;
name|int
name|UI_set_ex_data
parameter_list|(
name|UI
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|UI_get_ex_data
parameter_list|(
name|UI
modifier|*
name|r
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
comment|/* Use specific methods instead of the built-in one */
name|void
name|UI_set_default_method
parameter_list|(
specifier|const
name|UI_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
specifier|const
name|UI_METHOD
modifier|*
name|UI_get_default_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|UI_METHOD
modifier|*
name|UI_get_method
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
function_decl|;
specifier|const
name|UI_METHOD
modifier|*
name|UI_set_method
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|UI_METHOD
modifier|*
name|meth
parameter_list|)
function_decl|;
comment|/* The method with all the built-in thingies */
name|UI_METHOD
modifier|*
name|UI_OpenSSL
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* ---------- For method writers ---------- */
comment|/* A method contains a number of functions that implement the low level    of the User Interface.  The functions are:  	an opener	This function starts a session, maybe by opening 			a channel to a tty, or by opening a window. 	a writer	This function is called to write a given string, 			maybe to the tty, maybe as a field label in a 			window. 	a flusher	This function is called to flush everything that 			has been output so far.  It can be used to actually 			display a dialog box after it has been built. 	a reader	This function is called to read a given prompt, 			maybe from the tty, maybe from a field in a 			window.  Note that it's called wth all string 			structures, not only the prompt ones, so it must 			check such things itself. 	a closer	This function closes the session, maybe by closing 			the channel to the tty, or closing the window.     All these functions are expected to return:  	0	on error. 	1	on success. 	-1	on out-of-band events, for example if some prompting has 		been canceled (by pressing Ctrl-C, for example).  This is 		only checked when returned by the flusher or the reader.     The way this is used, the opener is first called, then the writer for all    strings, then the flusher, then the reader for all strings and finally the    closer.  Note that if you want to prompt from a terminal or other command    line interface, the best is to have the reader also write the prompts    instead of having the writer do it.  If you want to prompt from a dialog    box, the writer can be used to build up the contents of the box, and the    flusher to actually display the box and run the event loop until all data    has been given, after which the reader only grabs the given data and puts    them back into the UI strings.     All method functions take a UI as argument.  Additionally, the writer and    the reader take a UI_STRING. */
comment|/* The UI_STRING type is the data structure that contains all the needed info    about a string or a prompt, including test data for a verification prompt. */
typedef|typedef
name|struct
name|ui_string_st
name|UI_STRING
typedef|;
name|DECLARE_STACK_OF
argument_list|(
name|UI_STRING
argument_list|)
comment|/* The different types of strings that are currently supported.    This is only needed by method authors. */
expr|enum
name|UI_string_types
block|{
name|UIT_NONE
operator|=
literal|0
block|,
name|UIT_PROMPT
block|,
comment|/* Prompt for a string */
name|UIT_VERIFY
block|,
comment|/* Prompt for a string and verify */
name|UIT_BOOLEAN
block|,
comment|/* Prompt for a yes/no response */
name|UIT_INFO
block|,
comment|/* Send info to the user */
name|UIT_ERROR
comment|/* Send an error message to the user */
block|}
expr_stmt|;
comment|/* Create and manipulate methods */
name|UI_METHOD
modifier|*
name|UI_create_method
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|UI_destroy_method
parameter_list|(
name|UI_METHOD
modifier|*
name|ui_method
parameter_list|)
function_decl|;
name|int
name|UI_method_set_opener
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|int
function_decl|(
modifier|*
name|opener
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|UI_method_set_writer
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|int
function_decl|(
modifier|*
name|writer
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
name|UI_STRING
modifier|*
name|uis
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|UI_method_set_flusher
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|int
function_decl|(
modifier|*
name|flusher
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|UI_method_set_reader
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|int
function_decl|(
modifier|*
name|reader
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
name|UI_STRING
modifier|*
name|uis
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|UI_method_set_closer
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|int
function_decl|(
modifier|*
name|closer
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|)
parameter_list|)
function_decl|;
name|int
name|UI_method_set_prompt_constructor
parameter_list|(
name|UI_METHOD
modifier|*
name|method
parameter_list|,
name|char
modifier|*
function_decl|(
modifier|*
name|prompt_constructor
function_decl|)
parameter_list|(
name|UI
modifier|*
name|ui
parameter_list|,
specifier|const
name|char
modifier|*
name|object_desc
parameter_list|,
specifier|const
name|char
modifier|*
name|object_name
parameter_list|)
parameter_list|)
function_decl|;
name|int
argument_list|(
operator|*
name|UI_method_get_opener
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
argument_list|)
argument_list|(
name|UI
operator|*
argument_list|)
expr_stmt|;
name|int
argument_list|(
operator|*
name|UI_method_get_writer
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
argument_list|)
argument_list|(
name|UI
operator|*
argument_list|,
name|UI_STRING
operator|*
argument_list|)
expr_stmt|;
name|int
argument_list|(
operator|*
name|UI_method_get_flusher
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
argument_list|)
argument_list|(
name|UI
operator|*
argument_list|)
expr_stmt|;
name|int
argument_list|(
operator|*
name|UI_method_get_reader
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
argument_list|)
argument_list|(
name|UI
operator|*
argument_list|,
name|UI_STRING
operator|*
argument_list|)
expr_stmt|;
name|int
argument_list|(
operator|*
name|UI_method_get_closer
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
argument_list|)
argument_list|(
name|UI
operator|*
argument_list|)
expr_stmt|;
name|char
argument_list|*
operator|(
operator|*
name|UI_method_get_prompt_constructor
argument_list|(
name|UI_METHOD
operator|*
name|method
argument_list|)
operator|)
operator|(
name|UI
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|;
comment|/* The following functions are helpers for method writers to access relevant    data from a UI_STRING. */
comment|/* Return type of the UI_STRING */
expr|enum
name|UI_string_types
name|UI_get_string_type
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return input flags of the UI_STRING */
name|int
name|UI_get_input_flags
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the actual string to output (the prompt, info or error) */
specifier|const
name|char
operator|*
name|UI_get0_output_string
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the optional action string to output (the boolean promtp instruction) */
specifier|const
name|char
operator|*
name|UI_get0_action_string
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the result of a prompt */
specifier|const
name|char
operator|*
name|UI_get0_result_string
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the string to test the result against.  Only useful with verifies. */
specifier|const
name|char
operator|*
name|UI_get0_test_string
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the required minimum size of the result */
name|int
name|UI_get_result_minsize
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Return the required maximum size of the result */
name|int
name|UI_get_result_maxsize
argument_list|(
name|UI_STRING
operator|*
name|uis
argument_list|)
argument_list|;
comment|/* Set the result of a UI_STRING. */
name|int
name|UI_set_result
argument_list|(
name|UI
operator|*
name|ui
argument_list|,
name|UI_STRING
operator|*
name|uis
argument_list|,
specifier|const
name|char
operator|*
name|result
argument_list|)
argument_list|;
comment|/* A couple of popular utility functions */
name|int
name|UI_UTIL_read_pw_string
argument_list|(
argument|char *buf
argument_list|,
argument|int length
argument_list|,
argument|const char *prompt
argument_list|,
argument|int verify
argument_list|)
argument_list|;
name|int
name|UI_UTIL_read_pw
argument_list|(
argument|char *buf
argument_list|,
argument|char *buff
argument_list|,
argument|int size
argument_list|,
argument|const char *prompt
argument_list|,
argument|int verify
argument_list|)
argument_list|;
comment|/* BEGIN ERROR CODES */
comment|/* The following lines are auto generated by the script mkerr.pl. Any changes  * made after this point may be overwritten when the script is next run.  */
name|void
name|ERR_load_UI_strings
argument_list|(
name|void
argument_list|)
argument_list|;
comment|/* Error codes for the UI functions. */
comment|/* Function codes. */
define|#
directive|define
name|UI_F_GENERAL_ALLOCATE_BOOLEAN
value|108
define|#
directive|define
name|UI_F_GENERAL_ALLOCATE_PROMPT
value|109
define|#
directive|define
name|UI_F_GENERAL_ALLOCATE_STRING
value|100
define|#
directive|define
name|UI_F_UI_CTRL
value|111
define|#
directive|define
name|UI_F_UI_DUP_ERROR_STRING
value|101
define|#
directive|define
name|UI_F_UI_DUP_INFO_STRING
value|102
define|#
directive|define
name|UI_F_UI_DUP_INPUT_BOOLEAN
value|110
define|#
directive|define
name|UI_F_UI_DUP_INPUT_STRING
value|103
define|#
directive|define
name|UI_F_UI_DUP_VERIFY_STRING
value|106
define|#
directive|define
name|UI_F_UI_GET0_RESULT
value|107
define|#
directive|define
name|UI_F_UI_NEW_METHOD
value|104
define|#
directive|define
name|UI_F_UI_SET_RESULT
value|105
comment|/* Reason codes. */
define|#
directive|define
name|UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
value|104
define|#
directive|define
name|UI_R_INDEX_TOO_LARGE
value|102
define|#
directive|define
name|UI_R_INDEX_TOO_SMALL
value|103
define|#
directive|define
name|UI_R_NO_RESULT_BUFFER
value|105
define|#
directive|define
name|UI_R_RESULT_TOO_LARGE
value|100
define|#
directive|define
name|UI_R_RESULT_TOO_SMALL
value|101
define|#
directive|define
name|UI_R_UNKNOWN_CONTROL_COMMAND
value|106
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

