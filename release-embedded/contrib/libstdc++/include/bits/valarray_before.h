begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- internal _Meta class.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file valarray_before.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@cmla.ens-cachan.fr>
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_VALARRAY_BEFORE_H
end_ifndef

begin_define
define|#
directive|define
name|_VALARRAY_BEFORE_H
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/slice_array.h>
end_include

begin_macro
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|std
argument_list|)
end_macro

begin_comment
comment|//
end_comment

begin_comment
comment|// Implementing a loosened valarray return value is tricky.
end_comment

begin_comment
comment|// First we need to meet 26.3.1/3: we should not add more than
end_comment

begin_comment
comment|// two levels of template nesting. Therefore we resort to template
end_comment

begin_comment
comment|// template to "flatten" loosened return value types.
end_comment

begin_comment
comment|// At some point we use partial specialization to remove one level
end_comment

begin_comment
comment|// template nesting due to _Expr<>
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class is NOT defined. It doesn't need to.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp1
operator|,
name|typename
name|_Tp2
operator|>
name|class
name|_Constant
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Implementations of unary functions applied to valarray<>s.
end_comment

begin_comment
comment|// I use hard-coded object functions here instead of a generic
end_comment

begin_comment
comment|// approach like pointers to function:
end_comment

begin_comment
comment|//    1) correctness: some functions take references, others values.
end_comment

begin_comment
comment|//       we can't deduce the correct type afterwards.
end_comment

begin_comment
comment|//    2) efficiency -- object functions can be easily inlined
end_comment

begin_comment
comment|//    3) be Koenig-lookup-friendly
end_comment

begin_struct
struct|struct
name|__abs
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|abs
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__cos
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|cos
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__acos
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|acos
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__cosh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|cosh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__sin
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sin
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__asin
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|asin
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__sinh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sinh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__tan
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|tan
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__atan
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|atan
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__tanh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|tanh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__exp
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|exp
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__log
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|log
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__log10
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|log10
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__sqrt
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sqrt
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_comment
comment|// In the past, we used to tailor operator applications semantics
end_comment

begin_comment
comment|// to the specialization of standard function objects (i.e. plus<>, etc.)
end_comment

begin_comment
comment|// That is incorrect.  Therefore we provide our own surrogates.
end_comment

begin_struct
struct|struct
name|__unary_plus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|+
name|__t
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__negate
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|-
name|__t
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__bitwise_not
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|~
name|__t
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__plus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|+
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__minus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|-
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__multiplies
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|*
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__divides
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|/
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__modulus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|%
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__bitwise_xor
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|^
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__bitwise_and
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|&
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__bitwise_or
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator||
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__shift_left
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<<
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__shift_right
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>>
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__logical_and
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|&&
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__logical_or
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|||
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__logical_not
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
name|__x
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__equal_to
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|==
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__not_equal_to
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|!=
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__less
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__greater
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__less_equal
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<=
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__greater_equal
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>=
name|__y
return|;
block|}
block|}
struct|;
end_struct

begin_comment
comment|// The few binary functions we miss.
end_comment

begin_struct
struct|struct
name|__atan2
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|atan2
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_struct
struct|struct
name|__pow
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|pow
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
block|}
struct|;
end_struct

begin_comment
comment|// We need these bits in order to recover the return type of
end_comment

begin_comment
comment|// some functions/operators now that we're no longer using
end_comment

begin_comment
comment|// function templates.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
block|{
typedef|typedef
name|_Tp
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// several specializations for relational operators.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_not
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_and
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_or
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__less
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__greater
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__less_equal
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__greater_equal
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__equal_to
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__not_equal_to
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//
end_comment

begin_comment
comment|// Apply function taking a value/const reference closure
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Dom
operator|,
name|typename
name|_Arg
operator|>
name|class
name|_FunBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_FunBase
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|value_type __f(_Arg)
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_func
argument_list|(
argument|__f
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_func
argument_list|(
name|_M_expr
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_function_decl
name|value_type
function_decl|(
modifier|*
name|_M_func
function_decl|)
parameter_list|(
name|_Arg
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_ValFunClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_FunBase
operator|<
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
name|_Tp
typedef|;
end_typedef

begin_macro
name|_ValFunClos
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|_Tp __f(_Tp)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_macro
name|_ValFunClos
argument_list|(
argument|const valarray<_Tp>& __v
argument_list|,
argument|_Tp __f(_Tp)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_RefFunClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_FunBase
operator|<
name|_Dom
operator|,
specifier|const
name|typename
name|_Dom
operator|::
name|value_type
operator|&
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|_Dom
operator|,
specifier|const
name|typename
name|_Dom
operator|::
name|value_type
operator|&
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
name|_Tp
typedef|;
end_typedef

begin_macro
name|_RefFunClos
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|_Tp __f(const _Tp&)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
specifier|const
name|_Tp
operator|&
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
specifier|const
name|_Tp
operator|&
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_macro
name|_RefFunClos
argument_list|(
argument|const valarray<_Tp>& __v
argument_list|,
argument|_Tp __f(const _Tp&)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// Unary expression closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Arg
operator|>
name|class
name|_UnBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Arg
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnBase
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_M_expr
argument_list|(
argument|__e
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Arg
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_UnClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_UnBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|_Dom
name|_Arg
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_UnBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnClos
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_UnClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_UnBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|valarray
operator|<
name|_Tp
operator|>
name|_Arg
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_UnBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnClos
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// Binary expression closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_FirstArg
operator|,
name|class
name|_SecondArg
operator|>
name|class
name|_BinBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_FirstArg
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase
argument_list|(
specifier|const
name|_FirstArg
operator|&
name|__e1
argument_list|,
specifier|const
name|_SecondArg
operator|&
name|__e2
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__e1
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__e2
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
index|[
name|__i
index|]
argument_list|,
name|_M_expr2
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr1
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_FirstArg
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_SecondArg
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Clos
operator|>
name|class
name|_BinBase2
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Clos
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase2
argument_list|(
specifier|const
name|_Clos
operator|&
name|__e
argument_list|,
specifier|const
name|_Vt
operator|&
name|__t
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__t
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
index|[
name|__i
index|]
argument_list|,
name|_M_expr2
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr1
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Clos
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_Vt
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Clos
operator|>
name|class
name|_BinBase1
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Clos
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase1
argument_list|(
specifier|const
name|_Vt
operator|&
name|__t
argument_list|,
specifier|const
name|_Clos
operator|&
name|__e
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__t
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__e
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
argument_list|,
name|_M_expr2
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr2
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Vt
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_Clos
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom1
operator|,
name|class
name|_Dom2
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Expr
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
block|{
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom1
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom2
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_ValArray
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__w
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__w
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_ValArray
operator|,
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|,
name|valarray
operator|<
name|typename
name|_Dom
operator|::
name|value_type
operator|>
expr|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e1
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Expr
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|,
name|_Dom
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Constant
operator|,
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|:
name|_BinBase2
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase2
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e1
argument_list|,
specifier|const
name|_Tp
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Constant
operator|,
name|_Expr
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|,
name|_Dom
operator|>
operator|:
name|_BinBase1
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase1
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Tp
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Constant
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase2
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase2
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|,
specifier|const
name|_Tp
operator|&
name|__t
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__t
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Constant
operator|,
name|_ValArray
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase1
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase1
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Tp
operator|&
name|__t
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__t
argument_list|,
argument|__v
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// slice_array closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Dom
operator|>
name|class
name|_SBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_SBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_slice
argument_list|(
argument|__s
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_slice
operator|.
name|start
argument_list|()
operator|+
name|__i
operator|*
name|_M_slice
operator|.
name|stride
argument_list|()
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_slice
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|slice
modifier|&
name|_M_slice
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_SBase
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
operator|.
name|_M_data
operator|+
name|__s
operator|.
name|start
argument_list|()
argument_list|)
operator|,
name|_M_size
argument_list|(
name|__s
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|_M_stride
argument_list|(
argument|__s.stride()
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_array
operator|.
name|_M_data
index|[
name|__i
operator|*
name|_M_stride
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_size
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|_Array
operator|<
name|_Tp
operator|>
name|_M_array
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|size_t
name|_M_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|size_t
name|_M_stride
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_SClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_SBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_SBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_SClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__s
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_expr_stmt
name|_SClos
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__s
argument_list|)
block|{}
end_expr_stmt

begin_macro
unit|};
name|_GLIBCXX_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_VALARRAY_BEFORE_H */
end_comment

end_unit

