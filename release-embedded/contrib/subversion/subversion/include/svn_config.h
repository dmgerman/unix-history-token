begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_config.h  * @brief Accessing SVN configuration files.  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_CONFIG_H
end_define

begin_include
include|#
directive|include
file|<apr.h>
end_include

begin_comment
comment|/* for apr_int64_t */
end_comment

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_comment
comment|/* for apr_pool_t */
end_comment

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_comment
comment|/* for apr_hash_t */
end_comment

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**************************************************************************  ***                                                                    ***  ***  For a description of the SVN configuration file syntax, see       ***  ***  your ~/.subversion/README, which is written out automatically by  ***  ***  svn_config_ensure().                                              ***  ***                                                                    ***  **************************************************************************/
comment|/** Opaque structure describing a set of configuration options. */
typedef|typedef
name|struct
name|svn_config_t
name|svn_config_t
typedef|;
comment|/*** Configuration Defines ***/
comment|/**  * @name Client configuration files strings  * Strings for the names of files, sections, and options in the  * client configuration files.  * @{  */
comment|/* This list of #defines is intentionally presented as a nested list     that matches the in-config hierarchy.  */
define|#
directive|define
name|SVN_CONFIG_CATEGORY_SERVERS
value|"servers"
define|#
directive|define
name|SVN_CONFIG_SECTION_GROUPS
value|"groups"
define|#
directive|define
name|SVN_CONFIG_SECTION_GLOBAL
value|"global"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_PROXY_HOST
value|"http-proxy-host"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_PROXY_PORT
value|"http-proxy-port"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME
value|"http-proxy-username"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD
value|"http-proxy-password"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_PROXY_EXCEPTIONS
value|"http-proxy-exceptions"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_TIMEOUT
value|"http-timeout"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_COMPRESSION
value|"http-compression"
define|#
directive|define
name|SVN_CONFIG_OPTION_NEON_DEBUG_MASK
value|"neon-debug-mask"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_AUTH_TYPES
value|"http-auth-types"
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES
value|"ssl-authority-files"
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA
value|"ssl-trust-default-ca"
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_CLIENT_CERT_FILE
value|"ssl-client-cert-file"
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_CLIENT_CERT_PASSWORD
value|"ssl-client-cert-password"
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_PKCS11_PROVIDER
value|"ssl-pkcs11-provider"
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_LIBRARY
value|"http-library"
define|#
directive|define
name|SVN_CONFIG_OPTION_STORE_PASSWORDS
value|"store-passwords"
define|#
directive|define
name|SVN_CONFIG_OPTION_STORE_PLAINTEXT_PASSWORDS
value|"store-plaintext-passwords"
define|#
directive|define
name|SVN_CONFIG_OPTION_STORE_AUTH_CREDS
value|"store-auth-creds"
define|#
directive|define
name|SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP
value|"store-ssl-client-cert-pp"
define|#
directive|define
name|SVN_CONFIG_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT
define|\
value|"store-ssl-client-cert-pp-plaintext"
define|#
directive|define
name|SVN_CONFIG_OPTION_USERNAME
value|"username"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_BULK_UPDATES
value|"http-bulk-updates"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_HTTP_MAX_CONNECTIONS
value|"http-max-connections"
define|#
directive|define
name|SVN_CONFIG_CATEGORY_CONFIG
value|"config"
define|#
directive|define
name|SVN_CONFIG_SECTION_AUTH
value|"auth"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_CONFIG_OPTION_PASSWORD_STORES
value|"password-stores"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_CONFIG_OPTION_KWALLET_WALLET
value|"kwallet-wallet"
comment|/** @since New in 1.6. */
define|#
directive|define
name|SVN_CONFIG_OPTION_KWALLET_SVN_APPLICATION_NAME_WITH_PID
value|"kwallet-svn-application-name-with-pid"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_SSL_CLIENT_CERT_FILE_PROMPT
value|"ssl-client-cert-file-prompt"
comment|/* The majority of options of the "auth" section  * has been moved to SVN_CONFIG_CATEGORY_SERVERS. */
define|#
directive|define
name|SVN_CONFIG_SECTION_HELPERS
value|"helpers"
define|#
directive|define
name|SVN_CONFIG_OPTION_EDITOR_CMD
value|"editor-cmd"
define|#
directive|define
name|SVN_CONFIG_OPTION_DIFF_CMD
value|"diff-cmd"
comment|/** @since New in 1.7. */
define|#
directive|define
name|SVN_CONFIG_OPTION_DIFF_EXTENSIONS
value|"diff-extensions"
define|#
directive|define
name|SVN_CONFIG_OPTION_DIFF3_CMD
value|"diff3-cmd"
define|#
directive|define
name|SVN_CONFIG_OPTION_DIFF3_HAS_PROGRAM_ARG
value|"diff3-has-program-arg"
define|#
directive|define
name|SVN_CONFIG_OPTION_MERGE_TOOL_CMD
value|"merge-tool-cmd"
define|#
directive|define
name|SVN_CONFIG_SECTION_MISCELLANY
value|"miscellany"
define|#
directive|define
name|SVN_CONFIG_OPTION_GLOBAL_IGNORES
value|"global-ignores"
define|#
directive|define
name|SVN_CONFIG_OPTION_LOG_ENCODING
value|"log-encoding"
define|#
directive|define
name|SVN_CONFIG_OPTION_USE_COMMIT_TIMES
value|"use-commit-times"
comment|/** @deprecated Not used by Subversion since 2003/r847039 (well before 1.0) */
define|#
directive|define
name|SVN_CONFIG_OPTION_TEMPLATE_ROOT
value|"template-root"
define|#
directive|define
name|SVN_CONFIG_OPTION_ENABLE_AUTO_PROPS
value|"enable-auto-props"
define|#
directive|define
name|SVN_CONFIG_OPTION_NO_UNLOCK
value|"no-unlock"
define|#
directive|define
name|SVN_CONFIG_OPTION_MIMETYPES_FILE
value|"mime-types-file"
define|#
directive|define
name|SVN_CONFIG_OPTION_PRESERVED_CF_EXTS
value|"preserved-conflict-file-exts"
comment|/** @since New in 1.7. */
define|#
directive|define
name|SVN_CONFIG_OPTION_INTERACTIVE_CONFLICTS
value|"interactive-conflicts"
comment|/** @since New in 1.7. */
define|#
directive|define
name|SVN_CONFIG_OPTION_MEMORY_CACHE_SIZE
value|"memory-cache-size"
define|#
directive|define
name|SVN_CONFIG_SECTION_TUNNELS
value|"tunnels"
define|#
directive|define
name|SVN_CONFIG_SECTION_AUTO_PROPS
value|"auto-props"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_SECTION_WORKING_COPY
value|"working-copy"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_SQLITE_EXCLUSIVE
value|"exclusive-locking"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_SQLITE_EXCLUSIVE_CLIENTS
value|"exclusive-locking-clients"
comment|/** @} */
comment|/** @name Repository conf directory configuration files strings  * Strings for the names of sections and options in the  * repository conf directory configuration files.  * @{  */
comment|/* For repository svnserve.conf files */
define|#
directive|define
name|SVN_CONFIG_SECTION_GENERAL
value|"general"
define|#
directive|define
name|SVN_CONFIG_OPTION_ANON_ACCESS
value|"anon-access"
define|#
directive|define
name|SVN_CONFIG_OPTION_AUTH_ACCESS
value|"auth-access"
define|#
directive|define
name|SVN_CONFIG_OPTION_PASSWORD_DB
value|"password-db"
define|#
directive|define
name|SVN_CONFIG_OPTION_REALM
value|"realm"
define|#
directive|define
name|SVN_CONFIG_OPTION_AUTHZ_DB
value|"authz-db"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_GROUPS_DB
value|"groups-db"
comment|/** @since New in 1.7. */
define|#
directive|define
name|SVN_CONFIG_OPTION_FORCE_USERNAME_CASE
value|"force-username-case"
comment|/** @since New in 1.8. */
define|#
directive|define
name|SVN_CONFIG_OPTION_HOOKS_ENV
value|"hooks-env"
define|#
directive|define
name|SVN_CONFIG_SECTION_SASL
value|"sasl"
define|#
directive|define
name|SVN_CONFIG_OPTION_USE_SASL
value|"use-sasl"
define|#
directive|define
name|SVN_CONFIG_OPTION_MIN_SSF
value|"min-encryption"
define|#
directive|define
name|SVN_CONFIG_OPTION_MAX_SSF
value|"max-encryption"
comment|/* For repository password database */
define|#
directive|define
name|SVN_CONFIG_SECTION_USERS
value|"users"
comment|/** @} */
comment|/*** Configuration Default Values ***/
comment|/* '*' matches leading dots, e.g. '*.rej' matches '.foo.rej'. */
comment|/* We want this to be printed on two lines in the generated config file,  * but we don't want the # character to end up in the variable.  */
ifndef|#
directive|ifndef
name|DOXYGEN_SHOULD_SKIP_THIS
define|#
directive|define
name|SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1
define|\
value|"*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo __pycache__"
define|#
directive|define
name|SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2
define|\
value|"*.rej *~ #*# .#* .*.swp .DS_Store"
endif|#
directive|endif
define|#
directive|define
name|SVN_CONFIG_DEFAULT_GLOBAL_IGNORES
define|\
value|SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1 " " \   SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2
define|#
directive|define
name|SVN_CONFIG_TRUE
value|"TRUE"
define|#
directive|define
name|SVN_CONFIG_FALSE
value|"FALSE"
define|#
directive|define
name|SVN_CONFIG_ASK
value|"ASK"
comment|/* Default values for some options. Should be passed as default values  * to svn_config_get and friends, instead of hard-coding the defaults in  * multiple places. */
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_STORE_PASSWORDS
value|TRUE
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_STORE_PLAINTEXT_PASSWORDS
value|SVN_CONFIG_ASK
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_STORE_AUTH_CREDS
value|TRUE
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP
value|TRUE
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_STORE_SSL_CLIENT_CERT_PP_PLAINTEXT
define|\
value|SVN_CONFIG_ASK
define|#
directive|define
name|SVN_CONFIG_DEFAULT_OPTION_HTTP_MAX_CONNECTIONS
value|4
comment|/** Read configuration information from the standard sources and merge it  * into the hash @a *cfg_hash.  If @a config_dir is not NULL it specifies a  * directory from which to read the configuration files, overriding all  * other sources.  Otherwise, first read any system-wide configurations  * (from a file or from the registry), then merge in personal  * configurations (again from file or registry).  The hash and all its data  * are allocated in @a pool.  *  * @a *cfg_hash is a hash whose keys are @c const char * configuration  * categories (@c SVN_CONFIG_CATEGORY_SERVERS,  * @c SVN_CONFIG_CATEGORY_CONFIG, etc.) and whose values are the @c  * svn_config_t * items representing the configuration values for that  * category.  */
name|svn_error_t
modifier|*
name|svn_config_get_config
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|cfg_hash
parameter_list|,
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *cfgp to an empty @c svn_config_t structure,  * allocated in @a result_pool.  *  * Pass TRUE to @a section_names_case_sensitive if  * section names are to be populated case sensitively.  *  * Pass TRUE to @a option_names_case_sensitive if  * option names are to be populated case sensitively.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_create2
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
name|svn_boolean_t
name|section_names_case_sensitive
parameter_list|,
name|svn_boolean_t
name|option_names_case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_config_create2, but always passes @c FALSE to  * @a option_names_case_sensitive.  *  * @since New in 1.7.  * @deprecated Provided for backward compatibility with 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_config_create
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
name|svn_boolean_t
name|section_names_case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Read configuration data from @a file (a file or registry path) into  * @a *cfgp, allocated in @a pool.  *  * If @a file does not exist, then if @a must_exist, return an error,  * otherwise return an empty @c svn_config_t.  *  * If @a section_names_case_sensitive is @c TRUE, populate section name hashes  * case sensitively, except for the @c "DEFAULT" section.  *  * If @a option_names_case_sensitive is @c TRUE, populate option name hashes  * case sensitively.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_read3
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_boolean_t
name|section_names_case_sensitive
parameter_list|,
name|svn_boolean_t
name|option_names_case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_config_read3, but always passes @c FALSE to  * @a option_names_case_sensitive.  *  * @since New in 1.7.  * @deprecated Provided for backward compatibility with 1.7 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_config_read2
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|svn_boolean_t
name|section_names_case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Similar to svn_config_read2, but always passes @c FALSE to  * @a section_names_case_sensitive.  *  * @deprecated Provided for backward compatibility with 1.6 API.  */
name|SVN_DEPRECATED
name|svn_error_t
modifier|*
name|svn_config_read
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Read configuration data from @a stream into @a *cfgp, allocated in  * @a result_pool.  *  * If @a section_names_case_sensitive is @c TRUE, populate section name hashes  * case sensitively, except for the @c "DEFAULT" section.  *  * If @a option_names_case_sensitive is @c TRUE, populate option name hashes  * case sensitively.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_parse
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
name|svn_stream_t
modifier|*
name|stream
parameter_list|,
name|svn_boolean_t
name|section_names_case_sensitive
parameter_list|,
name|svn_boolean_t
name|option_names_case_sensitive
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/** Like svn_config_read(), but merges the configuration data from @a file  * (a file or registry path) into @a *cfg, which was previously returned  * from svn_config_read().  This function invalidates all value  * expansions in @a cfg, so that the next svn_config_get() takes the  * modifications into account.  */
name|svn_error_t
modifier|*
name|svn_config_merge
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|svn_boolean_t
name|must_exist
parameter_list|)
function_decl|;
comment|/** Find the value of a (@a section, @a option) pair in @a cfg, set @a  * *valuep to the value.  *  * If @a cfg is @c NULL, just sets @a *valuep to @a default_value. If  * the value does not exist, expand and return @a default_value. @a  * default_value can be NULL.  *  * The returned value will be valid at least until the next call to  * svn_config_get(), or for the lifetime of @a default_value. It is  * safest to consume the returned value immediately.  *  * This function may change @a cfg by expanding option values.  */
name|void
name|svn_config_get
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|default_value
parameter_list|)
function_decl|;
comment|/** Add or replace the value of a (@a section, @a option) pair in @a cfg with  * @a value.  *  * This function invalidates all value expansions in @a cfg.  *  * To remove an option, pass NULL for the @a value.  */
name|void
name|svn_config_set
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/** Like svn_config_get(), but for boolean values.  *  * Parses the option as a boolean value. The recognized representations  * are 'TRUE'/'FALSE', 'yes'/'no', 'on'/'off', '1'/'0'; case does not  * matter. Returns an error if the option doesn't contain a known string.  */
name|svn_error_t
modifier|*
name|svn_config_get_bool
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|svn_boolean_t
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
name|svn_boolean_t
name|default_value
parameter_list|)
function_decl|;
comment|/** Like svn_config_set(), but for boolean values.  *  * Sets the option to 'TRUE'/'FALSE', depending on @a value.  */
name|void
name|svn_config_set_bool
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
name|svn_boolean_t
name|value
parameter_list|)
function_decl|;
comment|/** Like svn_config_get(), but for 64-bit signed integers.  *  * Parses the @a option in @a section of @a cfg as an integer value,  * setting @a *valuep to the result.  If the option is not found, sets  * @a *valuep to @a default_value.  If the option is found but cannot  * be converted to an integer, returns an error.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_get_int64
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|apr_int64_t
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
name|apr_int64_t
name|default_value
parameter_list|)
function_decl|;
comment|/** Like svn_config_set(), but for 64-bit signed integers.  *  * Sets the value of @a option in @a section of @a cfg to the signed  * decimal @a value.  *  * @since New in 1.8.  */
name|void
name|svn_config_set_int64
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
name|apr_int64_t
name|value
parameter_list|)
function_decl|;
comment|/** Like svn_config_get(), but only for yes/no/ask values.  *  * Parse @a option in @a section and set @a *valuep to one of  * SVN_CONFIG_TRUE, SVN_CONFIG_FALSE, or SVN_CONFIG_ASK.  If there is  * no setting for @a option, then parse @a default_value and set  * @a *valuep accordingly.  If @a default_value is NULL, the result is  * undefined, and may be an error; we recommend that you pass one of  * SVN_CONFIG_TRUE, SVN_CONFIG_FALSE, or SVN_CONFIG_ASK for @a default value.  *  * Valid representations are (at least) "true"/"false", "yes"/"no",  * "on"/"off", "1"/"0", and "ask"; they are case-insensitive.  Return  * an SVN_ERR_BAD_CONFIG_VALUE error if either @a default_value or  * @a option's value is not a valid representation.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_config_get_yes_no_ask
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|default_value
parameter_list|)
function_decl|;
comment|/** Like svn_config_get_bool(), but for tristate values.  *  * Set @a *valuep to #svn_tristate_true, #svn_tristate_false, or  * #svn_tristate_unknown, depending on the value of @a option in @a  * section of @a cfg.  True and false values are the same as for  * svn_config_get_bool(); @a unknown_value specifies the option value  * allowed for third state (#svn_tristate_unknown).  *  * Use @a default_value as the default value if @a option cannot be  * found.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_get_tristate
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|svn_tristate_t
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|unknown_value
parameter_list|,
name|svn_tristate_t
name|default_value
parameter_list|)
function_decl|;
comment|/** Similar to @c svn_config_section_enumerator2_t, but is not  * provided with a memory pool argument.  *  * See svn_config_enumerate_sections() for the details of this type.  *  * @deprecated Provided for backwards compatibility with the 1.2 API.  */
typedef|typedef
name|svn_boolean_t
function_decl|(
modifier|*
name|svn_config_section_enumerator_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** Similar to svn_config_enumerate_sections2(), but uses a memory pool of  * @a cfg instead of one that is explicitly provided.  *  * @deprecated Provided for backwards compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|int
name|svn_config_enumerate_sections
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|svn_config_section_enumerator_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** A callback function used in enumerating config sections.  *  * See svn_config_enumerate_sections2() for the details of this type.  *  * @since New in 1.3.  */
typedef|typedef
name|svn_boolean_t
function_decl|(
modifier|*
name|svn_config_section_enumerator2_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Enumerate the sections, passing @a baton and the current section's name  * to @a callback.  Continue the enumeration if @a callback returns @c TRUE.  * Return the number of times @a callback was called.  *  * ### See kff's comment to svn_config_enumerate2().  It applies to this  * function, too. ###  *  * @a callback's @a name parameter is only valid for the duration of the call.  *  * @since New in 1.3.  */
name|int
name|svn_config_enumerate_sections2
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|svn_config_section_enumerator2_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Similar to @c svn_config_enumerator2_t, but is not  * provided with a memory pool argument.  * See svn_config_enumerate() for the details of this type.  *  * @deprecated Provided for backwards compatibility with the 1.2 API.  */
typedef|typedef
name|svn_boolean_t
function_decl|(
modifier|*
name|svn_config_enumerator_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** Similar to svn_config_enumerate2(), but uses a memory pool of  * @a cfg instead of one that is explicitly provided.  *  * @deprecated Provided for backwards compatibility with the 1.2 API.  */
name|SVN_DEPRECATED
name|int
name|svn_config_enumerate
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|svn_config_enumerator_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
comment|/** A callback function used in enumerating config options.  *  * See svn_config_enumerate2() for the details of this type.  *  * @since New in 1.3.  */
typedef|typedef
name|svn_boolean_t
function_decl|(
modifier|*
name|svn_config_enumerator2_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Enumerate the options in @a section, passing @a baton and the current  * option's name and value to @a callback.  Continue the enumeration if  * @a callback returns @c TRUE.  Return the number of times @a callback  * was called.  *  * ### kff asks: A more usual interface is to continue enumerating  *     while @a callback does not return error, and if @a callback does  *     return error, to return the same error (or a wrapping of it)  *     from svn_config_enumerate().  What's the use case for  *     svn_config_enumerate()?  Is it more likely to need to break out  *     of an enumeration early, with no error, than an invocation of  *     @a callback is likely to need to return an error? ###  *  * @a callback's @a name and @a value parameters are only valid for the  * duration of the call.  *  * @since New in 1.3.  */
name|int
name|svn_config_enumerate2
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|,
name|svn_config_enumerator2_t
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/**  * Return @c TRUE if @a section exists in @a cfg, @c FALSE otherwise.  *  * @since New in 1.4.  */
name|svn_boolean_t
name|svn_config_has_section
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|section
parameter_list|)
function_decl|;
comment|/** Enumerate the group @a master_section in @a cfg.  Each variable  * value is interpreted as a list of glob patterns (separated by comma  * and optional whitespace).  Return the name of the first variable  * whose value matches @a key, or @c NULL if no variable matches.  */
specifier|const
name|char
modifier|*
name|svn_config_find_group
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|key
parameter_list|,
specifier|const
name|char
modifier|*
name|master_section
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Retrieve value corresponding to @a option_name in @a cfg, or  *  return @a default_value if none is found.  *  *  The config will first be checked for a default.  *  If @a server_group is not @c NULL, the config will also be checked  *  for an override in a server group,  *  */
specifier|const
name|char
modifier|*
name|svn_config_get_server_setting
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|server_group
parameter_list|,
specifier|const
name|char
modifier|*
name|option_name
parameter_list|,
specifier|const
name|char
modifier|*
name|default_value
parameter_list|)
function_decl|;
comment|/** Retrieve value into @a result_value corresponding to @a option_name for a  *  given @a server_group in @a cfg, or return @a default_value if none is  *  found.  *  *  The config will first be checked for a default, then will be checked for  *  an override in a server group. If the value found is not a valid integer,  *  a @c svn_error_t* will be returned.  */
name|svn_error_t
modifier|*
name|svn_config_get_server_setting_int
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
specifier|const
name|char
modifier|*
name|server_group
parameter_list|,
specifier|const
name|char
modifier|*
name|option_name
parameter_list|,
name|apr_int64_t
name|default_value
parameter_list|,
name|apr_int64_t
modifier|*
name|result_value
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Set @a *valuep according to @a option_name for a given  * @a  server_group in @a cfg, or set to @a default_value if no value is  * specified.  *  * Check first a default, then for an override in a server group.  If  * a value is found but is not a valid boolean, return an  * SVN_ERR_BAD_CONFIG_VALUE error.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_config_get_server_setting_bool
parameter_list|(
name|svn_config_t
modifier|*
name|cfg
parameter_list|,
name|svn_boolean_t
modifier|*
name|valuep
parameter_list|,
specifier|const
name|char
modifier|*
name|server_group
parameter_list|,
specifier|const
name|char
modifier|*
name|option_name
parameter_list|,
name|svn_boolean_t
name|default_value
parameter_list|)
function_decl|;
comment|/** Try to ensure that the user's ~/.subversion/ area exists, and create  * no-op template files for any absent config files.  Use @a pool for any  * temporary allocation.  If @a config_dir is not @c NULL it specifies a  * directory from which to read the config overriding all other sources.  *  * Don't error if something exists but is the wrong kind (for example,  * ~/.subversion exists but is a file, or ~/.subversion/servers exists  * but is a directory).  *  * Also don't error if trying to create something and failing -- it's  * okay for the config area or its contents not to be created.  * However, if creating a config template file succeeds, return an  * error if unable to initialize its contents.  */
name|svn_error_t
modifier|*
name|svn_config_ensure
parameter_list|(
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Accessing cached authentication data in the user config area.  *  * @defgroup cached_authentication_data Cached authentication data  * @{  */
comment|/** A hash-key pointing to a realmstring.  Every file containing  * authentication data should have this key.  */
define|#
directive|define
name|SVN_CONFIG_REALMSTRING_KEY
value|"svn:realmstring"
comment|/** Use @a cred_kind and @a realmstring to locate a file within the  * ~/.subversion/auth/ area.  If the file exists, initialize @a *hash  * and load the file contents into the hash, using @a pool.  If the  * file doesn't exist, set @a *hash to NULL.  *  * If @a config_dir is not NULL it specifies a directory from which to  * read the config overriding all other sources.  *  * Besides containing the original credential fields, the hash will  * also contain @c SVN_CONFIG_REALMSTRING_KEY.  The caller can examine  * this value as a sanity-check that the correct file was loaded.  *  * The hashtable will contain<tt>const char *</tt> keys and  *<tt>svn_string_t *</tt> values.  */
name|svn_error_t
modifier|*
name|svn_config_read_auth_data
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|hash
parameter_list|,
specifier|const
name|char
modifier|*
name|cred_kind
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Use @a cred_kind and @a realmstring to create or overwrite a file  * within the ~/.subversion/auth/ area.  Write the contents of @a hash into  * the file.  If @a config_dir is not NULL it specifies a directory to read  * the config overriding all other sources.  *  * Also, add @a realmstring to the file, with key @c  * SVN_CONFIG_REALMSTRING_KEY.  This allows programs (or users) to  * verify exactly which set credentials live within the file.  *  * The hashtable must contain<tt>const char *</tt> keys and  *<tt>svn_string_t *</tt> values.  */
name|svn_error_t
modifier|*
name|svn_config_write_auth_data
parameter_list|(
name|apr_hash_t
modifier|*
name|hash
parameter_list|,
specifier|const
name|char
modifier|*
name|cred_kind
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Callback for svn_config_walk_auth_data().  *  * Called for each credential walked by that function (and able to be  * fully purged) to allow perusal and selective removal of credentials.  *  * @a cred_kind and @a realmstring specify the key of the credential.  * @a hash contains the hash data associated with the record.  *  * Before returning set @a *delete_cred to TRUE to remove the credential from  * the cache; leave @a *delete_cred unchanged or set it to FALSE to keep the  * credential.  *  * Implementations may return #SVN_ERR_CEASE_INVOCATION to indicate  * that the callback should not be called again.  Note that when that  * error is returned, the value of @a delete_cred will still be  * honored and action taken if necessary.  (For other returned errors,  * @a delete_cred is ignored by svn_config_walk_auth_data().)  *  * @since New in 1.8.  */
typedef|typedef
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|svn_config_auth_walk_func_t
function_decl|)
parameter_list|(
name|svn_boolean_t
modifier|*
name|delete_cred
parameter_list|,
name|void
modifier|*
name|cleanup_baton
parameter_list|,
specifier|const
name|char
modifier|*
name|cred_kind
parameter_list|,
specifier|const
name|char
modifier|*
name|realmstring
parameter_list|,
name|apr_hash_t
modifier|*
name|hash
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Call @a walk_func with @a walk_baton and information describing  * each credential cached within the Subversion auth store located  * under @a config_dir.  If the callback sets its delete_cred return  * flag, delete the associated credential.  *  * If @a config_dir is not NULL, it must point to an alternative  * config directory location. If it is NULL, the default location  * is used.  *  * @note @a config_dir may only be NULL in 1.8.2 and later.  *  * @note Removing credentials from the config-based disk store will  * not purge them from any open svn_auth_baton_t instance.  Consider  * using svn_auth_forget_credentials() -- from the @a cleanup_func,  * even -- for this purpose.  *  * @note Removing credentials from the config-based disk store will  * not also remove any related credentials from third-party password  * stores.  (Implementations of @a walk_func which delete credentials  * may wish to consult the "passtype" element of @a hash, if any, to  * see if a third-party store -- such as "gnome-keyring" or "kwallet"  * is being used to hold the most sensitive portion of the credentials  * for this @a cred_kind and @a realmstring.)  *  * @see svn_auth_forget_credentials()  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_walk_auth_data
parameter_list|(
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
name|svn_config_auth_walk_func_t
name|walk_func
parameter_list|,
name|void
modifier|*
name|walk_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Put the absolute path to the user's configuration directory,  * or to a file within that directory, into @a *path.  *  * If @a config_dir is not NULL, it must point to an alternative  * config directory location. If it is NULL, the default location  * is used.  If @a fname is not NULL, it must specify the last  * component of the path to be returned. This can be used to create  * a path to any file in the configuration directory.  *  * Do all allocations in @a pool.  *  * Hint:  * To get the user configuration file, pass @c SVN_CONFIG_CATEGORY_CONFIG  * for @a fname. To get the servers configuration file, pass  * @c SVN_CONFIG_CATEGORY_SERVERS for @a fname.  *  * @since New in 1.6.  */
name|svn_error_t
modifier|*
name|svn_config_get_user_config_path
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|config_dir
parameter_list|,
specifier|const
name|char
modifier|*
name|fname
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Create a deep copy of the config object @a src and return  * it in @a cfgp, allocating the memory in @a pool.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_dup
parameter_list|(
name|svn_config_t
modifier|*
modifier|*
name|cfgp
parameter_list|,
name|svn_config_t
modifier|*
name|src
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** Create a deep copy of the config hash @a src_hash and return  * it in @a cfg_hash, allocating the memory in @a pool.  *  * @since New in 1.8.  */
name|svn_error_t
modifier|*
name|svn_config_copy_config
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|cfg_hash
parameter_list|,
name|apr_hash_t
modifier|*
name|src_hash
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** @} */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_CONFIG_H */
end_comment

end_unit

