begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * translate.h :  eol and keyword translation  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_WC_TRANSLATE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_WC_TRANSLATE_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"svn_subst.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Newline and keyword translation properties */
comment|/* If EOL is not-NULL query the SVN_PROP_EOL_STYLE property on file    LOCAL_ABSPATH in DB.  If STYLE is non-null, set *STYLE to LOCAL_ABSPATH's    eol style.  Set *EOL to        - NULL for svn_subst_eol_style_none, or        - a null-terminated C string containing the native eol marker         for this platform, for svn_subst_eol_style_native, or        - a null-terminated C string containing the eol marker indicated         by the property value, for svn_subst_eol_style_fixed.     If STYLE is null on entry, ignore it.  If *EOL is non-null on exit,    it is a static string not allocated in POOL.     If KEYWORDS is not NULL Expand keywords for the file at LOCAL_ABSPATH    in DB, by parsing a whitespace-delimited list of keywords.  If any keywords    are found in the list, allocate *KEYWORDS from RESULT_POOL and populate it    with mappings from (const char *) keywords to their (svn_string_t *)    values (also allocated in RESULT_POOL).     If a keyword is in the list, but no corresponding value is    available, do not create a hash entry for it.  If no keywords are    found in the list, or if there is no list, set *KEYWORDS to NULL.     If SPECIAL is not NULL determine if the svn:special flag is set on    LOCAL_ABSPATH in DB.  If so, set SPECIAL to TRUE, if not, set it to FALSE.     If PROPS is not NULL, use PROPS instead of the properties on LOCAL_ABSPATH.     If WRI_ABSPATH is not NULL, retrieve the information for LOCAL_ABSPATH    from the working copy identified by WRI_ABSPATH. Falling back to file    external information if the file is not present as versioned node.     If FOR_NORMALIZATION is TRUE, just return a list of keywords instead of    calculating their intended values.     Use SCRATCH_POOL for temporary allocation, RESULT_POOL for allocating    *STYLE and *EOL. */
name|svn_error_t
modifier|*
name|svn_wc__get_translate_info
parameter_list|(
name|svn_subst_eol_style_t
modifier|*
name|style
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|eol
parameter_list|,
name|apr_hash_t
modifier|*
modifier|*
name|keywords
parameter_list|,
name|svn_boolean_t
modifier|*
name|special
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_hash_t
modifier|*
name|props
parameter_list|,
name|svn_boolean_t
name|for_normalization
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Reverse parser.  Given a real EOL string ("\n", "\r", or "\r\n"),    return an encoded *VALUE ("LF", "CR", "CRLF") that one might see in    the property value. */
name|void
name|svn_wc__eol_value_from_string
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|value
parameter_list|,
specifier|const
name|char
modifier|*
name|eol
parameter_list|)
function_decl|;
comment|/* Expand keywords for the file at LOCAL_ABSPATH in DB, by parsing a    whitespace-delimited list of keywords KEYWORD_LIST.  If any keywords    are found in the list, allocate *KEYWORDS from RESULT_POOL and populate    it with mappings from (const char *) keywords to their (svn_string_t *)    values (also allocated in RESULT_POOL).     If a keyword is in the list, but no corresponding value is    available, do not create a hash entry for it.  If no keywords are    found in the list, or if there is no list, set *KEYWORDS to NULL.      ### THIS LOOKS WRONG -- it creates a hash entry for every recognized kw          and expands each missing value as an empty string or "-1" or similar.     Use LOCAL_ABSPATH to expand keyword values.     If WRI_ABSPATH is not NULL, retrieve the information for LOCAL_ABSPATH    from the working copy identified by WRI_ABSPATH. Falling back to file    external information if the file is not present as versioned node.      ### THIS IS NOT IMPLEMENTED -- WRI_ABSPATH is ignored     If FOR_NORMALIZATION is TRUE, just return a list of keywords instead of    calculating their intended values.      ### This would be better done by a separate API, since in this case          only the KEYWORD_LIST input parameter is needed. (And there is no          need to print "-1" as the revision value.)     Use SCRATCH_POOL for any temporary allocations. */
name|svn_error_t
modifier|*
name|svn_wc__expand_keywords
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|keywords
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|wri_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|keyword_list
parameter_list|,
name|svn_boolean_t
name|for_normalization
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Sync the write and execute bit for LOCAL_ABSPATH with what is currently    indicated by the properties in the database:      * If the SVN_PROP_NEEDS_LOCK property is present and there is no       lock token for the file in the working copy, set LOCAL_ABSPATH to       read-only.     * If the SVN_PROP_EXECUTABLE property is present at all, then set       LOCAL_ABSPATH executable.     If DID_SET is non-null, then liberally set *DID_SET to TRUE if we might    have change the permissions on LOCAL_ABSPATH.  (A TRUE value in *DID_SET    does not guarantee that we changed the permissions, simply that more    investigation is warrented.)     This function looks at the current values of the above properties,    including any scheduled-but-not-yet-committed changes.     If LOCAL_ABSPATH is a directory, this function is a no-op.     Use SCRATCH_POOL for any temporary allocations.  */
name|svn_error_t
modifier|*
name|svn_wc__sync_flags_with_props
parameter_list|(
name|svn_boolean_t
modifier|*
name|did_set
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Internal version of svn_wc_translated_stream2(), which see. */
name|svn_error_t
modifier|*
name|svn_wc__internal_translated_stream
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|stream
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|versioned_abspath
parameter_list|,
name|apr_uint32_t
name|flags
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Like svn_wc_translated_file2(), except the working copy database  * is used directly and the function assumes abspaths. */
name|svn_error_t
modifier|*
name|svn_wc__internal_translated_file
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|xlated_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|src_abspath
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|versioned_abspath
parameter_list|,
name|apr_uint32_t
name|flags
parameter_list|,
name|svn_cancel_func_t
name|cancel_func
parameter_list|,
name|void
modifier|*
name|cancel_baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_WC_TRANSLATE_H */
end_comment

end_unit

