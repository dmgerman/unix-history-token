begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* fs_skels.h : headers for conversion between fs native types and  *              skeletons  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_FS_FS_SKELS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_FS_FS_SKELS_H
end_define

begin_define
define|#
directive|define
name|SVN_WANT_BDB
end_define

begin_include
include|#
directive|include
file|"svn_private_config.h"
end_include

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|<apr_hash.h>
end_include

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_include
include|#
directive|include
file|"../fs.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_skel.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/*** Parsing (conversion from skeleton to native FS type) ***/
comment|/* Parse a `REVISION' SKEL and set *REVISION_P to the newly allocated    result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_revision_skel
parameter_list|(
name|revision_t
modifier|*
modifier|*
name|revision_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `TRANSACTION' SKEL and set *TRANSACTION_P to the newly allocated    result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_transaction_skel
parameter_list|(
name|transaction_t
modifier|*
modifier|*
name|transaction_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `REPRESENTATION' SKEL and set *REP_P to the newly allocated    result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_representation_skel
parameter_list|(
name|representation_t
modifier|*
modifier|*
name|rep_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `NODE-REVISION' SKEL and set *NODEREV_P to the newly allocated    result.  Use POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_node_revision_skel
parameter_list|(
name|node_revision_t
modifier|*
modifier|*
name|noderev_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `COPY' SKEL and set *COPY_P to the newly allocated result.  Use    POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_copy_skel
parameter_list|(
name|copy_t
modifier|*
modifier|*
name|copy_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse an `ENTRIES' SKEL and set *ENTRIES_P to a new hash with const    char * names (the directory entry name) and svn_fs_id_t * values    (the node-id of the entry), or NULL if SKEL contains no entries.    Use POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_entries_skel
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|entries_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `CHANGE' SKEL and set *CHANGE_P to the newly allocated result.    Use POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_change_skel
parameter_list|(
name|change_t
modifier|*
modifier|*
name|change_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Parse a `LOCK' SKEL and set *LOCK_P to the newly allocated result.  Use    POOL for all allocations. */
name|svn_error_t
modifier|*
name|svn_fs_base__parse_lock_skel
parameter_list|(
name|svn_lock_t
modifier|*
modifier|*
name|lock_p
parameter_list|,
name|svn_skel_t
modifier|*
name|skel
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Unparsing (conversion from native FS type to skeleton) ***/
comment|/* Unparse REVISION into a newly allocated `REVISION' skel and set *SKEL_P    to the result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_revision_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|revision_t
modifier|*
name|revision
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse TRANSACTION into a newly allocated `TRANSACTION' skel and set    *SKEL_P to the result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_transaction_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|transaction_t
modifier|*
name|transaction
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse REP into a newly allocated `REPRESENTATION' skel and set *SKEL_P    to the result.  Use POOL for all allocations.  FORMAT is the format    version of the filesystem. */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_representation_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|representation_t
modifier|*
name|rep
parameter_list|,
name|int
name|format
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse NODEREV into a newly allocated `NODE-REVISION' skel and set    *SKEL_P to the result.  Use POOL for all allocations.  FORMAT is the    format version of the filesystem. */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_node_revision_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|node_revision_t
modifier|*
name|noderev
parameter_list|,
name|int
name|format
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse COPY into a newly allocated `COPY' skel and set *SKEL_P to the    result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_copy_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|copy_t
modifier|*
name|copy
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse an ENTRIES hash, which has const char * names (the entry    name) and svn_fs_id_t * values (the node-id of the entry) into a newly    allocated `ENTRIES' skel and set *SKEL_P to the result.  Use POOL for all    allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_entries_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
name|apr_hash_t
modifier|*
name|entries
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse CHANGE into a newly allocated `CHANGE' skel and set *SKEL_P to    the result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_change_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|change_t
modifier|*
name|change
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Unparse LOCK into a newly allocated `LOCK' skel and set *SKEL_P to the    result.  Use POOL for all allocations.  */
name|svn_error_t
modifier|*
name|svn_fs_base__unparse_lock_skel
parameter_list|(
name|svn_skel_t
modifier|*
modifier|*
name|skel_p
parameter_list|,
specifier|const
name|svn_lock_t
modifier|*
name|lock
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_FS_FS_SKELS_H */
end_comment

end_unit

