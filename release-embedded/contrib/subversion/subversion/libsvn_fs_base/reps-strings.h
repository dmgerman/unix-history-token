begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* reps-strings.h : interpreting representations with respect to strings  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_FS_REPS_STRINGS_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_FS_REPS_STRINGS_H
end_define

begin_define
define|#
directive|define
name|SVN_WANT_BDB
end_define

begin_include
include|#
directive|include
file|"svn_private_config.h"
end_include

begin_include
include|#
directive|include
file|"svn_io.h"
end_include

begin_include
include|#
directive|include
file|"svn_fs.h"
end_include

begin_include
include|#
directive|include
file|"trail.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/* Get or create a mutable representation in FS, and set *NEW_REP_KEY to its    key.     TXN_ID is the id of the Subversion transaction under which this occurs.     If REP_KEY is not null and is already a mutable representation, set    *NEW_REP_KEY to REP_KEY, else create a brand new rep and set *NEW_REP_KEY    to its key, allocated in POOL. */
name|svn_error_t
modifier|*
name|svn_fs_base__get_mutable_rep
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|new_rep_key
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_id
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Delete REP_KEY from FS if REP_KEY is mutable, as part of trail, or    do nothing if REP_KEY is immutable.  If a mutable rep is deleted,    the string it refers to is deleted as well.  TXN_ID is the id of    the Subversion transaction under which this occurs.     If no such rep, return SVN_ERR_FS_NO_SUCH_REPRESENTATION.  */
name|svn_error_t
modifier|*
name|svn_fs_base__delete_rep_if_mutable
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_id
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Reading and writing rep contents. ***/
comment|/* Set *SIZE_P to the size of REP_KEY's contents in FS, as part of TRAIL.    Note: this is the fulltext size, no matter how the contents are    represented in storage.  */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_contents_size
parameter_list|(
name|svn_filesize_t
modifier|*
name|size_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* If MD5_CHECKSUM is non-NULL, set *MD5_CHECKSUM to the MD5 checksum    for REP_KEY in FS, as part of TRAIL.     If SHA1_CHECKSUM is non-NULL, set *SHA1_CHECKSUM to the SHA1    checksum for REP_KEY in FS, as part of TRAIL.     These are the prerecorded checksums for the rep's contents'    fulltext.  If one or both of the checksums is not stored, do not    calculate one dynamically, just put NULL into the respective return    value.  (By convention, the NULL checksum is considered to match    any checksum.) */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_contents_checksums
parameter_list|(
name|svn_checksum_t
modifier|*
modifier|*
name|md5_checksum
parameter_list|,
name|svn_checksum_t
modifier|*
modifier|*
name|sha1_checksum
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set STR->data to the contents of REP_KEY in FS, and STR->len to the    contents' length, as part of TRAIL.  The data is allocated in    POOL.  If an error occurs, the effect on STR->data and    STR->len is undefined.     Note: this is the fulltext contents, no matter how the contents are    represented in storage.  */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_contents
parameter_list|(
name|svn_string_t
modifier|*
name|str
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *RS_P to a stream to read the contents of REP_KEY in FS.    Allocate the stream in POOL.     REP_KEY may be null, in which case reads just return 0 bytes.     If USE_TRAIL_FOR_READS is TRUE, the stream's reads are part    of TRAIL; otherwise, each read happens in an internal, one-off    trail (though TRAIL is still required).  POOL may be TRAIL->pool. */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_contents_read_stream
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|rs_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
name|svn_boolean_t
name|use_trail_for_reads
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Set *WS_P to a stream to write the contents of REP_KEY.  Allocate    the stream in POOL.  TXN_ID is the id of the Subversion transaction    under which this occurs.     If USE_TRAIL_FOR_WRITES is TRUE, the stream's writes are part    of TRAIL; otherwise, each write happens in an internal, one-off    trail (though TRAIL is still required).  POOL may be TRAIL->pool.     If REP_KEY is not mutable, writes to *WS_P will return the    error SVN_ERR_FS_REP_NOT_MUTABLE.  */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_contents_write_stream
parameter_list|(
name|svn_stream_t
modifier|*
modifier|*
name|ws_p
parameter_list|,
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|rep_key
parameter_list|,
specifier|const
name|char
modifier|*
name|txn_id
parameter_list|,
name|svn_boolean_t
name|use_trail_for_writes
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/*** Deltified storage. ***/
comment|/* Offer TARGET the chance to store its contents as a delta against    SOURCE, in FS, as part of TRAIL.  TARGET and SOURCE are both    representation keys.     This usually results in TARGET's data being stored as a diff    against SOURCE; but it might not, if it turns out to be more    efficient to store the contents some other way.  */
name|svn_error_t
modifier|*
name|svn_fs_base__rep_deltify
parameter_list|(
name|svn_fs_t
modifier|*
name|fs
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
specifier|const
name|char
modifier|*
name|source
parameter_list|,
name|trail_t
modifier|*
name|trail
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_FS_REPS_STRINGS_H */
end_comment

end_unit

