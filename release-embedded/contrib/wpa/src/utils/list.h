begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Doubly-linked list  * Copyright (c) 2009, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LIST_H
end_ifndef

begin_define
define|#
directive|define
name|LIST_H
end_define

begin_comment
comment|/**  * struct dl_list - Doubly-linked list  */
end_comment

begin_struct
struct|struct
name|dl_list
block|{
name|struct
name|dl_list
modifier|*
name|next
decl_stmt|;
name|struct
name|dl_list
modifier|*
name|prev
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|dl_list_init
parameter_list|(
name|struct
name|dl_list
modifier|*
name|list
parameter_list|)
block|{
name|list
operator|->
name|next
operator|=
name|list
expr_stmt|;
name|list
operator|->
name|prev
operator|=
name|list
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dl_list_add
parameter_list|(
name|struct
name|dl_list
modifier|*
name|list
parameter_list|,
name|struct
name|dl_list
modifier|*
name|item
parameter_list|)
block|{
name|item
operator|->
name|next
operator|=
name|list
operator|->
name|next
expr_stmt|;
name|item
operator|->
name|prev
operator|=
name|list
expr_stmt|;
name|list
operator|->
name|next
operator|->
name|prev
operator|=
name|item
expr_stmt|;
name|list
operator|->
name|next
operator|=
name|item
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dl_list_add_tail
parameter_list|(
name|struct
name|dl_list
modifier|*
name|list
parameter_list|,
name|struct
name|dl_list
modifier|*
name|item
parameter_list|)
block|{
name|dl_list_add
argument_list|(
name|list
operator|->
name|prev
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|dl_list_del
parameter_list|(
name|struct
name|dl_list
modifier|*
name|item
parameter_list|)
block|{
name|item
operator|->
name|next
operator|->
name|prev
operator|=
name|item
operator|->
name|prev
expr_stmt|;
name|item
operator|->
name|prev
operator|->
name|next
operator|=
name|item
operator|->
name|next
expr_stmt|;
name|item
operator|->
name|next
operator|=
name|NULL
expr_stmt|;
name|item
operator|->
name|prev
operator|=
name|NULL
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|dl_list_empty
parameter_list|(
name|struct
name|dl_list
modifier|*
name|list
parameter_list|)
block|{
return|return
name|list
operator|->
name|next
operator|==
name|list
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|int
name|dl_list_len
parameter_list|(
name|struct
name|dl_list
modifier|*
name|list
parameter_list|)
block|{
name|struct
name|dl_list
modifier|*
name|item
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|item
operator|=
name|list
operator|->
name|next
init|;
name|item
operator|!=
name|list
condition|;
name|item
operator|=
name|item
operator|->
name|next
control|)
name|count
operator|++
expr_stmt|;
return|return
name|count
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|offsetof
end_ifndef

begin_define
define|#
directive|define
name|offsetof
parameter_list|(
name|type
parameter_list|,
name|member
parameter_list|)
value|((long)&((type *) 0)->member)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|dl_list_entry
parameter_list|(
name|item
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|((type *) ((char *) item - offsetof(type, member)))
end_define

begin_define
define|#
directive|define
name|dl_list_first
parameter_list|(
name|list
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|(dl_list_empty((list)) ? NULL : \ 	 dl_list_entry((list)->next, type, member))
end_define

begin_define
define|#
directive|define
name|dl_list_last
parameter_list|(
name|list
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|(dl_list_empty((list)) ? NULL : \ 	 dl_list_entry((list)->prev, type, member))
end_define

begin_define
define|#
directive|define
name|dl_list_for_each
parameter_list|(
name|item
parameter_list|,
name|list
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|for (item = dl_list_entry((list)->next, type, member); \&item->member != (list); \ 	     item = dl_list_entry(item->member.next, type, member))
end_define

begin_define
define|#
directive|define
name|dl_list_for_each_safe
parameter_list|(
name|item
parameter_list|,
name|n
parameter_list|,
name|list
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|for (item = dl_list_entry((list)->next, type, member), \ 		     n = dl_list_entry(item->member.next, type, member); \&item->member != (list); \ 	     item = n, n = dl_list_entry(n->member.next, type, member))
end_define

begin_define
define|#
directive|define
name|dl_list_for_each_reverse
parameter_list|(
name|item
parameter_list|,
name|list
parameter_list|,
name|type
parameter_list|,
name|member
parameter_list|)
define|\
value|for (item = dl_list_entry((list)->prev, type, member); \&item->member != (list); \ 	     item = dl_list_entry(item->member.prev, type, member))
end_define

begin_define
define|#
directive|define
name|DEFINE_DL_LIST
parameter_list|(
name|name
parameter_list|)
define|\
value|struct dl_list name = {&(name),&(name) }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LIST_H */
end_comment

end_unit

