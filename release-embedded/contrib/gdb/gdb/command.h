begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Header file for command-reading library command.c.     Copyright 1986, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1999,    2000, 2002 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|COMMAND_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|COMMAND_H
value|1
end_define

begin_comment
comment|/* Command classes are top-level categories into which commands are broken    down for "help" purposes.      Notes on classes: class_alias is for alias commands which are not    abbreviations of the original command.  class-pseudo is for    commands which are not really commands nor help topics ("stop").  */
end_comment

begin_enum
enum|enum
name|command_class
block|{
comment|/* Special args to help_list */
name|class_deprecated
block|,
name|all_classes
init|=
operator|-
literal|2
block|,
name|all_commands
init|=
operator|-
literal|1
block|,
comment|/* Classes of commands */
name|no_class
init|=
operator|-
literal|1
block|,
name|class_run
init|=
literal|0
block|,
name|class_vars
block|,
name|class_stack
block|,
name|class_files
block|,
name|class_support
block|,
name|class_info
block|,
name|class_breakpoint
block|,
name|class_trace
block|,
name|class_alias
block|,
name|class_obscure
block|,
name|class_user
block|,
name|class_maintenance
block|,
name|class_pseudo
block|,
name|class_tui
block|,
name|class_xdb
block|}
enum|;
end_enum

begin_comment
comment|/* FIXME: cagney/2002-03-17: Once cmd_type() has been removed, ``enum    cmd_types'' can be moved from "command.h" to "cli-decode.h".  */
end_comment

begin_comment
comment|/* Not a set/show command.  Note that some commands which begin with    "set" or "show" might be in this category, if their syntax does    not fall into one of the following categories.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|cmd_types
block|{
name|not_set_cmd
block|,
name|set_cmd
block|,
name|show_cmd
block|}
name|cmd_types
typedef|;
end_typedef

begin_comment
comment|/* Types of "set" or "show" command.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|var_types
block|{
comment|/* "on" or "off".  *VAR is an integer which is nonzero for on,        zero for off.  */
name|var_boolean
block|,
comment|/* "on" / "true" / "enable" or "off" / "false" / "disable" or        "auto.  *VAR is an ``enum auto_boolean''.  NOTE: In general a        custom show command will need to be implemented - one that for        "auto" prints both the "auto" and the current auto-selected        value. */
name|var_auto_boolean
block|,
comment|/* Unsigned Integer.  *VAR is an unsigned int.  The user can type 0        to mean "unlimited", which is stored in *VAR as UINT_MAX.  */
name|var_uinteger
block|,
comment|/* Like var_uinteger but signed.  *VAR is an int.  The user can type 0        to mean "unlimited", which is stored in *VAR as INT_MAX.  */
name|var_integer
block|,
comment|/* String which the user enters with escapes (e.g. the user types \n and        it is a real newline in the stored string).        *VAR is a malloc'd string, or NULL if the string is empty.  */
name|var_string
block|,
comment|/* String which stores what the user types verbatim.        *VAR is a malloc'd string, or NULL if the string is empty.  */
name|var_string_noescape
block|,
comment|/* String which stores a filename.        *VAR is a malloc'd string, or NULL if the string is empty.  */
name|var_filename
block|,
comment|/* ZeroableInteger.  *VAR is an int.  Like Unsigned Integer except        that zero really means zero.  */
name|var_zinteger
block|,
comment|/* Enumerated type.  Can only have one of the specified values.  *VAR is a        char pointer to the name of the element that we find.  */
name|var_enum
block|}
name|var_types
typedef|;
end_typedef

begin_comment
comment|/* This structure records one command'd definition.  */
end_comment

begin_struct_decl
struct_decl|struct
name|cmd_list_element
struct_decl|;
end_struct_decl

begin_comment
comment|/* Forward-declarations of the entry-points of cli/cli-decode.c.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_cmd
argument_list|(
name|char
operator|*
argument_list|,
expr|enum
name|command_class
argument_list|,
name|void
argument_list|(
operator|*
name|fun
argument_list|)
argument_list|(
name|char
operator|*
argument_list|,
name|int
argument_list|)
argument_list|,
name|char
operator|*
argument_list|,
expr|struct
name|cmd_list_element
operator|*
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_alias_cmd
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|enum
name|command_class
parameter_list|,
name|int
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_prefix_cmd
argument_list|(
name|char
operator|*
argument_list|,
expr|enum
name|command_class
argument_list|,
name|void
argument_list|(
operator|*
name|fun
argument_list|)
argument_list|(
name|char
operator|*
argument_list|,
name|int
argument_list|)
argument_list|,
name|char
operator|*
argument_list|,
expr|struct
name|cmd_list_element
operator|*
operator|*
argument_list|,
name|char
operator|*
argument_list|,
name|int
argument_list|,
expr|struct
name|cmd_list_element
operator|*
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_abbrev_prefix_cmd
argument_list|(
name|char
operator|*
argument_list|,
expr|enum
name|command_class
argument_list|,
name|void
argument_list|(
operator|*
name|fun
argument_list|)
argument_list|(
name|char
operator|*
argument_list|,
name|int
argument_list|)
argument_list|,
name|char
operator|*
argument_list|,
expr|struct
name|cmd_list_element
operator|*
operator|*
argument_list|,
name|char
operator|*
argument_list|,
name|int
argument_list|,
expr|struct
name|cmd_list_element
operator|*
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Set the commands corresponding callback.  */
end_comment

begin_typedef
typedef|typedef
name|void
name|cmd_cfunc_ftype
parameter_list|(
name|char
modifier|*
name|args
parameter_list|,
name|int
name|from_tty
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_cmd_cfunc
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|cmd_cfunc_ftype
modifier|*
name|cfunc
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
name|cmd_sfunc_ftype
parameter_list|(
name|char
modifier|*
name|args
parameter_list|,
name|int
name|from_tty
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
name|c
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_cmd_sfunc
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|sfunc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_cmd_completer
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|char
modifier|*
modifier|*
function_decl|(
modifier|*
name|completer
function_decl|)
parameter_list|(
name|char
modifier|*
name|text
parameter_list|,
name|char
modifier|*
name|word
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* HACK: cagney/2002-02-23: Code, mostly in tracepoints.c, grubs    around in cmd objects to test the value of the commands sfunc().  */
end_comment

begin_function_decl
specifier|extern
name|int
name|cmd_cfunc_eq
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|void
function_decl|(
modifier|*
name|cfunc
function_decl|)
parameter_list|(
name|char
modifier|*
name|args
parameter_list|,
name|int
name|from_tty
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Each command object has a local context attached to it. .  */
end_comment

begin_function_decl
specifier|extern
name|void
name|set_cmd_context
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|get_cmd_context
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Execute CMD's pre/post hook.  Throw an error if the command fails.    If already executing this pre/post hook, or there is no pre/post    hook, the call is silently ignored.  */
end_comment

begin_function_decl
specifier|extern
name|void
name|execute_cmd_pre_hook
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|execute_cmd_post_hook
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Return the type of the command.  */
end_comment

begin_comment
comment|/* NOTE: cagney/2002-03-17: The add_show_from_set() function clones    the set command passed as a parameter.  The clone operation will    include (BUG?) any ``set'' command callback, if present.  Commands    like ``info set'' call all the ``show'' command callbacks.    Unfortunately, for ``show'' commands cloned from ``set'', this    includes callbacks belonging to ``set'' commands.  Making this    worse, this only occures if add_show_from_set() is called after    add_cmd_sfunc() (BUG?).  */
end_comment

begin_function_decl
specifier|extern
name|enum
name|cmd_types
name|cmd_type
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|lookup_cmd
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|lookup_cmd_1
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|deprecate_cmd
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|deprecated_cmd_warning
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|lookup_cmd_composition
parameter_list|(
name|char
modifier|*
name|text
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|alias
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|prefix_cmd
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_com
argument_list|(
name|char
operator|*
argument_list|,
expr|enum
name|command_class
argument_list|,
name|void
argument_list|(
operator|*
name|fun
argument_list|)
argument_list|(
name|char
operator|*
argument_list|,
name|int
argument_list|)
argument_list|,
name|char
operator|*
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_com_alias
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|enum
name|command_class
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_info
parameter_list|(
name|char
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
name|fun
function_decl|)
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_info_alias
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
modifier|*
name|complete_on_cmdlist
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
modifier|*
name|complete_on_enum
parameter_list|(
specifier|const
name|char
modifier|*
name|enumlist
index|[]
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|delete_cmd
parameter_list|(
name|char
modifier|*
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|help_cmd
parameter_list|(
name|char
modifier|*
parameter_list|,
name|struct
name|ui_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|help_list
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|enum
name|command_class
parameter_list|,
name|struct
name|ui_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|help_cmd_list
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|enum
name|command_class
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|ui_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|add_setshow_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|var_types
name|var_type
parameter_list|,
name|void
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|set_doc
parameter_list|,
name|char
modifier|*
name|show_doc
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|set_func
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|show_func
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|add_setshow_cmd_full
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|var_types
name|var_type
parameter_list|,
name|void
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|set_doc
parameter_list|,
name|char
modifier|*
name|show_doc
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|set_func
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|show_func
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_result
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_result
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_set_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|var_types
name|var_type
parameter_list|,
name|void
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|doc
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_set_enum_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
specifier|const
name|char
modifier|*
name|enumlist
index|[]
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|doc
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|add_setshow_auto_boolean_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|enum
name|auto_boolean
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|set_doc
parameter_list|,
name|char
modifier|*
name|show_doc
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|set_func
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|show_func
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|add_setshow_boolean_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|int
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|set_doc
parameter_list|,
name|char
modifier|*
name|show_doc
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|set_func
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|show_func
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|add_setshow_uinteger_cmd
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|enum
name|command_class
name|class
parameter_list|,
name|unsigned
name|int
modifier|*
name|var
parameter_list|,
name|char
modifier|*
name|set_doc
parameter_list|,
name|char
modifier|*
name|show_doc
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|set_func
parameter_list|,
name|cmd_sfunc_ftype
modifier|*
name|show_func
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|set_list
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
name|show_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cmd_list_element
modifier|*
name|add_show_from_set
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|struct
name|cmd_list_element
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Do a "show" command for each thing on a command list.  */
end_comment

begin_function_decl
specifier|extern
name|void
name|cmd_show_list
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|NORETURN
name|void
name|error_no_arg
argument_list|(
name|char
operator|*
argument_list|)
name|ATTR_NORETURN
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|dont_repeat
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Used to mark commands that don't do anything.  If we just leave the    function field NULL, the command is interpreted as a help topic, or    as a class of commands.  */
end_comment

begin_function_decl
specifier|extern
name|void
name|not_just_help_class_command
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* check function pointer */
end_comment

begin_function_decl
specifier|extern
name|int
name|cmd_func_p
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* call the command function */
end_comment

begin_function_decl
specifier|extern
name|void
name|cmd_func
parameter_list|(
name|struct
name|cmd_list_element
modifier|*
name|cmd
parameter_list|,
name|char
modifier|*
name|args
parameter_list|,
name|int
name|from_tty
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined (COMMAND_H) */
end_comment

end_unit

