begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004-2007 Voltaire Inc.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MAD_H_
end_ifndef

begin_define
define|#
directive|define
name|_MAD_H_
end_define

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
value|extern "C" {
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
value|}
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__cplusplus */
end_comment

begin_define
define|#
directive|define
name|BEGIN_C_DECLS
end_define

begin_define
define|#
directive|define
name|END_C_DECLS
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_decl_stmt
name|BEGIN_C_DECLS
define|#
directive|define
name|IB_SUBNET_PATH_HOPS_MAX
value|64
define|#
directive|define
name|IB_DEFAULT_SUBN_PREFIX
value|0xfe80000000000000llu
define|#
directive|define
name|IB_DEFAULT_QP1_QKEY
value|0x80010000
define|#
directive|define
name|IB_MAD_SIZE
value|256
define|#
directive|define
name|IB_SMP_DATA_OFFS
value|64
define|#
directive|define
name|IB_SMP_DATA_SIZE
value|64
define|#
directive|define
name|IB_VENDOR_RANGE1_DATA_OFFS
value|24
define|#
directive|define
name|IB_VENDOR_RANGE1_DATA_SIZE
value|(IB_MAD_SIZE - IB_VENDOR_RANGE1_DATA_OFFS)
define|#
directive|define
name|IB_VENDOR_RANGE2_DATA_OFFS
value|40
define|#
directive|define
name|IB_VENDOR_RANGE2_DATA_SIZE
value|(IB_MAD_SIZE - IB_VENDOR_RANGE2_DATA_OFFS)
define|#
directive|define
name|IB_SA_DATA_SIZE
value|200
define|#
directive|define
name|IB_SA_DATA_OFFS
value|56
define|#
directive|define
name|IB_PC_DATA_OFFS
value|64
define|#
directive|define
name|IB_PC_DATA_SZ
value|(IB_MAD_SIZE - IB_PC_DATA_OFFS)
define|#
directive|define
name|IB_SA_MCM_RECSZ
value|53
define|#
directive|define
name|IB_SA_PR_RECSZ
value|64
name|enum
name|MAD_CLASSES
block|{
name|IB_SMI_CLASS
operator|=
literal|0x1
operator|,
name|IB_SMI_DIRECT_CLASS
operator|=
literal|0x81
operator|,
name|IB_SA_CLASS
operator|=
literal|0x3
operator|,
name|IB_PERFORMANCE_CLASS
operator|=
literal|0x4
operator|,
name|IB_BOARD_MGMT_CLASS
operator|=
literal|0x5
operator|,
name|IB_DEVICE_MGMT_CLASS
operator|=
literal|0x6
operator|,
name|IB_CM_CLASS
operator|=
literal|0x7
operator|,
name|IB_SNMP_CLASS
operator|=
literal|0x8
operator|,
name|IB_VENDOR_RANGE1_START_CLASS
operator|=
literal|0x9
operator|,
name|IB_VENDOR_RANGE1_END_CLASS
operator|=
literal|0x0f
operator|,
name|IB_CC_CLASS
operator|=
literal|0x21
operator|,
name|IB_VENDOR_RANGE2_START_CLASS
operator|=
literal|0x30
operator|,
name|IB_VENDOR_RANGE2_END_CLASS
operator|=
literal|0x4f
operator|,
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_enum
enum|enum
name|MAD_METHODS
block|{
name|IB_MAD_METHOD_GET
init|=
literal|0x1
block|,
name|IB_MAD_METHOD_SET
init|=
literal|0x2
block|,
name|IB_MAD_METHOD_GET_RESPONSE
init|=
literal|0x81
block|,
name|IB_MAD_METHOD_SEND
init|=
literal|0x3
block|,
name|IB_MAD_METHOD_TRAP
init|=
literal|0x5
block|,
name|IB_MAD_METHOD_TRAP_REPRESS
init|=
literal|0x7
block|,
name|IB_MAD_METHOD_REPORT
init|=
literal|0x6
block|,
name|IB_MAD_METHOD_REPORT_RESPONSE
init|=
literal|0x86
block|,
name|IB_MAD_METHOD_GET_TABLE
init|=
literal|0x12
block|,
name|IB_MAD_METHOD_GET_TABLE_RESPONSE
init|=
literal|0x92
block|,
name|IB_MAD_METHOD_GET_TRACE_TABLE
init|=
literal|0x13
block|,
name|IB_MAD_METHOD_GET_TRACE_TABLE_RESPONSE
init|=
literal|0x93
block|,
name|IB_MAD_METHOD_GETMULTI
init|=
literal|0x14
block|,
name|IB_MAD_METHOD_GETMULTI_RESPONSE
init|=
literal|0x94
block|,
name|IB_MAD_METHOD_DELETE
init|=
literal|0x15
block|,
name|IB_MAD_METHOD_DELETE_RESPONSE
init|=
literal|0x95
block|,
name|IB_MAD_RESPONSE
init|=
literal|0x80
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|MAD_ATTR_ID
block|{
name|CLASS_PORT_INFO
init|=
literal|0x1
block|,
name|NOTICE
init|=
literal|0x2
block|,
name|INFORM_INFO
init|=
literal|0x3
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|SMI_ATTR_ID
block|{
name|IB_ATTR_NODE_DESC
init|=
literal|0x10
block|,
name|IB_ATTR_NODE_INFO
init|=
literal|0x11
block|,
name|IB_ATTR_SWITCH_INFO
init|=
literal|0x12
block|,
name|IB_ATTR_GUID_INFO
init|=
literal|0x14
block|,
name|IB_ATTR_PORT_INFO
init|=
literal|0x15
block|,
name|IB_ATTR_PKEY_TBL
init|=
literal|0x16
block|,
name|IB_ATTR_SLVL_TABLE
init|=
literal|0x17
block|,
name|IB_ATTR_VL_ARBITRATION
init|=
literal|0x18
block|,
name|IB_ATTR_LINEARFORWTBL
init|=
literal|0x19
block|,
name|IB_ATTR_MULTICASTFORWTBL
init|=
literal|0x1b
block|,
name|IB_ATTR_SMINFO
init|=
literal|0x20
block|,
name|IB_ATTR_LAST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|SA_ATTR_ID
block|{
name|IB_SA_ATTR_NOTICE
init|=
literal|0x02
block|,
name|IB_SA_ATTR_INFORMINFO
init|=
literal|0x03
block|,
name|IB_SA_ATTR_PORTINFORECORD
init|=
literal|0x12
block|,
name|IB_SA_ATTR_LINKRECORD
init|=
literal|0x20
block|,
name|IB_SA_ATTR_SERVICERECORD
init|=
literal|0x31
block|,
name|IB_SA_ATTR_PATHRECORD
init|=
literal|0x35
block|,
name|IB_SA_ATTR_MCRECORD
init|=
literal|0x38
block|,
name|IB_SA_ATTR_MULTIPATH
init|=
literal|0x3a
block|,
name|IB_SA_ATTR_LAST
block|}
enum|;
end_enum

begin_enum
enum|enum
name|GSI_ATTR_ID
block|{
name|IB_GSI_PORT_SAMPLES_CONTROL
init|=
literal|0x10
block|,
name|IB_GSI_PORT_SAMPLES_RESULT
init|=
literal|0x11
block|,
name|IB_GSI_PORT_COUNTERS
init|=
literal|0x12
block|,
name|IB_GSI_PORT_COUNTERS_EXT
init|=
literal|0x1D
block|,
name|IB_GSI_ATTR_LAST
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|IB_VENDOR_OPENIB_PING_CLASS
value|(IB_VENDOR_RANGE2_START_CLASS + 2)
end_define

begin_define
define|#
directive|define
name|IB_VENDOR_OPENIB_SYSSTAT_CLASS
value|(IB_VENDOR_RANGE2_START_CLASS + 3)
end_define

begin_define
define|#
directive|define
name|IB_OPENIB_OUI
value|(0x001405)
end_define

begin_typedef
typedef|typedef
name|uint8_t
name|ibmad_gid_t
index|[
literal|16
index|]
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DEPRECATED_IB_GID_T
end_ifdef

begin_typedef
typedef|typedef
name|ibmad_gid_t
name|ib_gid_t
name|__attribute__
typedef|((
name|deprecated
typedef|));
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|cnt
decl_stmt|;
name|uint8_t
name|p
index|[
name|IB_SUBNET_PATH_HOPS_MAX
index|]
decl_stmt|;
name|uint16_t
name|drslid
decl_stmt|;
name|uint16_t
name|drdlid
decl_stmt|;
block|}
name|ib_dr_path_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|unsigned
name|id
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
block|}
name|ib_attr_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|mgtclass
decl_stmt|;
name|int
name|method
decl_stmt|;
name|ib_attr_t
name|attr
decl_stmt|;
name|uint32_t
name|rstatus
decl_stmt|;
comment|/* return status */
name|int
name|dataoffs
decl_stmt|;
name|int
name|datasz
decl_stmt|;
name|uint64_t
name|mkey
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|uint64_t
name|mask
decl_stmt|;
comment|/* for sa mads */
name|unsigned
name|recsz
decl_stmt|;
comment|/* for sa mads (attribute offset) */
name|int
name|timeout
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
comment|/* for vendor range 2 mads */
block|}
name|ib_rpc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|portid
block|{
name|int
name|lid
decl_stmt|;
comment|/* lid or 0 if directed route */
name|ib_dr_path_t
name|drpath
decl_stmt|;
name|int
name|grh_present
decl_stmt|;
comment|/* flag */
name|ibmad_gid_t
name|gid
decl_stmt|;
name|uint32_t
name|qp
decl_stmt|;
name|uint32_t
name|qkey
decl_stmt|;
name|uint8_t
name|sl
decl_stmt|;
name|unsigned
name|pkey_idx
decl_stmt|;
block|}
name|ib_portid_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ib_mad_dump_fn
function_decl|)
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|valsz
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|IB_FIELD_NAME_LEN
value|32
end_define

begin_typedef
typedef|typedef
struct|struct
name|ib_field
block|{
name|int
name|bitoffs
decl_stmt|;
name|int
name|bitlen
decl_stmt|;
name|char
name|name
index|[
name|IB_FIELD_NAME_LEN
index|]
decl_stmt|;
name|ib_mad_dump_fn
modifier|*
name|def_dump_fn
decl_stmt|;
block|}
name|ib_field_t
typedef|;
end_typedef

begin_enum
enum|enum
name|MAD_FIELDS
block|{
name|IB_NO_FIELD
block|,
name|IB_GID_PREFIX_F
block|,
name|IB_GID_GUID_F
block|,
comment|/* first MAD word (0-3 bytes) */
name|IB_MAD_METHOD_F
block|,
name|IB_MAD_RESPONSE_F
block|,
name|IB_MAD_CLASSVER_F
block|,
name|IB_MAD_MGMTCLASS_F
block|,
name|IB_MAD_BASEVER_F
block|,
comment|/* second MAD word (4-7 bytes) */
name|IB_MAD_STATUS_F
block|,
comment|/* DRSMP only */
name|IB_DRSMP_HOPCNT_F
block|,
name|IB_DRSMP_HOPPTR_F
block|,
name|IB_DRSMP_STATUS_F
block|,
name|IB_DRSMP_DIRECTION_F
block|,
comment|/* words 3,4,5,6 (8-23 bytes) */
name|IB_MAD_TRID_F
block|,
name|IB_MAD_ATTRID_F
block|,
name|IB_MAD_ATTRMOD_F
block|,
comment|/* word 7,8 (24-31 bytes) */
name|IB_MAD_MKEY_F
block|,
comment|/* word 9 (32-37 bytes) */
name|IB_DRSMP_DRSLID_F
block|,
name|IB_DRSMP_DRDLID_F
block|,
comment|/* word 10,11 (36-43 bytes) */
name|IB_SA_MKEY_F
block|,
comment|/* word 12 (44-47 bytes) */
name|IB_SA_ATTROFFS_F
block|,
comment|/* word 13,14 (48-55 bytes) */
name|IB_SA_COMPMASK_F
block|,
comment|/* word 13,14 (56-255 bytes) */
name|IB_SA_DATA_F
block|,
comment|/* bytes 64 - 127 */
name|IB_SM_DATA_F
block|,
comment|/* bytes 64 - 256 */
name|IB_GS_DATA_F
block|,
comment|/* bytes 128 - 191 */
name|IB_DRSMP_PATH_F
block|,
comment|/* bytes 192 - 255 */
name|IB_DRSMP_RPATH_F
block|,
comment|/* 	 * PortInfo fields: 	 */
name|IB_PORT_FIRST_F
block|,
name|IB_PORT_MKEY_F
init|=
name|IB_PORT_FIRST_F
block|,
name|IB_PORT_GID_PREFIX_F
block|,
name|IB_PORT_LID_F
block|,
name|IB_PORT_SMLID_F
block|,
name|IB_PORT_CAPMASK_F
block|,
name|IB_PORT_DIAG_F
block|,
name|IB_PORT_MKEY_LEASE_F
block|,
name|IB_PORT_LOCAL_PORT_F
block|,
name|IB_PORT_LINK_WIDTH_ENABLED_F
block|,
name|IB_PORT_LINK_WIDTH_SUPPORTED_F
block|,
name|IB_PORT_LINK_WIDTH_ACTIVE_F
block|,
name|IB_PORT_LINK_SPEED_SUPPORTED_F
block|,
name|IB_PORT_STATE_F
block|,
name|IB_PORT_PHYS_STATE_F
block|,
name|IB_PORT_LINK_DOWN_DEF_F
block|,
name|IB_PORT_MKEY_PROT_BITS_F
block|,
name|IB_PORT_LMC_F
block|,
name|IB_PORT_LINK_SPEED_ACTIVE_F
block|,
name|IB_PORT_LINK_SPEED_ENABLED_F
block|,
name|IB_PORT_NEIGHBOR_MTU_F
block|,
name|IB_PORT_SMSL_F
block|,
name|IB_PORT_VL_CAP_F
block|,
name|IB_PORT_INIT_TYPE_F
block|,
name|IB_PORT_VL_HIGH_LIMIT_F
block|,
name|IB_PORT_VL_ARBITRATION_HIGH_CAP_F
block|,
name|IB_PORT_VL_ARBITRATION_LOW_CAP_F
block|,
name|IB_PORT_INIT_TYPE_REPLY_F
block|,
name|IB_PORT_MTU_CAP_F
block|,
name|IB_PORT_VL_STALL_COUNT_F
block|,
name|IB_PORT_HOQ_LIFE_F
block|,
name|IB_PORT_OPER_VLS_F
block|,
name|IB_PORT_PART_EN_INB_F
block|,
name|IB_PORT_PART_EN_OUTB_F
block|,
name|IB_PORT_FILTER_RAW_INB_F
block|,
name|IB_PORT_FILTER_RAW_OUTB_F
block|,
name|IB_PORT_MKEY_VIOL_F
block|,
name|IB_PORT_PKEY_VIOL_F
block|,
name|IB_PORT_QKEY_VIOL_F
block|,
name|IB_PORT_GUID_CAP_F
block|,
name|IB_PORT_CLIENT_REREG_F
block|,
name|IB_PORT_SUBN_TIMEOUT_F
block|,
name|IB_PORT_RESP_TIME_VAL_F
block|,
name|IB_PORT_LOCAL_PHYS_ERR_F
block|,
name|IB_PORT_OVERRUN_ERR_F
block|,
name|IB_PORT_MAX_CREDIT_HINT_F
block|,
name|IB_PORT_LINK_ROUND_TRIP_F
block|,
name|IB_PORT_LAST_F
block|,
comment|/* 	 * NodeInfo fields: 	 */
name|IB_NODE_FIRST_F
block|,
name|IB_NODE_BASE_VERS_F
init|=
name|IB_NODE_FIRST_F
block|,
name|IB_NODE_CLASS_VERS_F
block|,
name|IB_NODE_TYPE_F
block|,
name|IB_NODE_NPORTS_F
block|,
name|IB_NODE_SYSTEM_GUID_F
block|,
name|IB_NODE_GUID_F
block|,
name|IB_NODE_PORT_GUID_F
block|,
name|IB_NODE_PARTITION_CAP_F
block|,
name|IB_NODE_DEVID_F
block|,
name|IB_NODE_REVISION_F
block|,
name|IB_NODE_LOCAL_PORT_F
block|,
name|IB_NODE_VENDORID_F
block|,
name|IB_NODE_LAST_F
block|,
comment|/* 	 * SwitchInfo fields: 	 */
name|IB_SW_FIRST_F
block|,
name|IB_SW_LINEAR_FDB_CAP_F
init|=
name|IB_SW_FIRST_F
block|,
name|IB_SW_RANDOM_FDB_CAP_F
block|,
name|IB_SW_MCAST_FDB_CAP_F
block|,
name|IB_SW_LINEAR_FDB_TOP_F
block|,
name|IB_SW_DEF_PORT_F
block|,
name|IB_SW_DEF_MCAST_PRIM_F
block|,
name|IB_SW_DEF_MCAST_NOT_PRIM_F
block|,
name|IB_SW_LIFE_TIME_F
block|,
name|IB_SW_STATE_CHANGE_F
block|,
name|IB_SW_LIDS_PER_PORT_F
block|,
name|IB_SW_PARTITION_ENFORCE_CAP_F
block|,
name|IB_SW_PARTITION_ENF_INB_F
block|,
name|IB_SW_PARTITION_ENF_OUTB_F
block|,
name|IB_SW_FILTER_RAW_INB_F
block|,
name|IB_SW_FILTER_RAW_OUTB_F
block|,
name|IB_SW_ENHANCED_PORT0_F
block|,
name|IB_SW_LAST_F
block|,
comment|/* 	 * SwitchLinearForwardingTable fields: 	 */
name|IB_LINEAR_FORW_TBL_F
block|,
comment|/* 	 * SwitchMulticastForwardingTable fields: 	 */
name|IB_MULTICAST_FORW_TBL_F
block|,
comment|/* 	 * NodeDescription fields: 	 */
name|IB_NODE_DESC_F
block|,
comment|/* 	 * Notice/Trap fields 	 */
name|IB_NOTICE_IS_GENERIC_F
block|,
name|IB_NOTICE_TYPE_F
block|,
name|IB_NOTICE_PRODUCER_F
block|,
name|IB_NOTICE_TRAP_NUMBER_F
block|,
name|IB_NOTICE_ISSUER_LID_F
block|,
name|IB_NOTICE_TOGGLE_F
block|,
name|IB_NOTICE_COUNT_F
block|,
name|IB_NOTICE_DATA_DETAILS_F
block|,
name|IB_NOTICE_DATA_LID_F
block|,
name|IB_NOTICE_DATA_144_LID_F
block|,
name|IB_NOTICE_DATA_144_CAPMASK_F
block|,
comment|/* 	 * GS Performance 	 */
name|IB_PC_FIRST_F
block|,
name|IB_PC_PORT_SELECT_F
init|=
name|IB_PC_FIRST_F
block|,
name|IB_PC_COUNTER_SELECT_F
block|,
name|IB_PC_ERR_SYM_F
block|,
name|IB_PC_LINK_RECOVERS_F
block|,
name|IB_PC_LINK_DOWNED_F
block|,
name|IB_PC_ERR_RCV_F
block|,
name|IB_PC_ERR_PHYSRCV_F
block|,
name|IB_PC_ERR_SWITCH_REL_F
block|,
name|IB_PC_XMT_DISCARDS_F
block|,
name|IB_PC_ERR_XMTCONSTR_F
block|,
name|IB_PC_ERR_RCVCONSTR_F
block|,
name|IB_PC_ERR_LOCALINTEG_F
block|,
name|IB_PC_ERR_EXCESS_OVR_F
block|,
name|IB_PC_VL15_DROPPED_F
block|,
name|IB_PC_XMT_BYTES_F
block|,
name|IB_PC_RCV_BYTES_F
block|,
name|IB_PC_XMT_PKTS_F
block|,
name|IB_PC_RCV_PKTS_F
block|,
name|IB_PC_LAST_F
block|,
comment|/* 	 * SMInfo 	 */
name|IB_SMINFO_GUID_F
block|,
name|IB_SMINFO_KEY_F
block|,
name|IB_SMINFO_ACT_F
block|,
name|IB_SMINFO_PRIO_F
block|,
name|IB_SMINFO_STATE_F
block|,
comment|/* 	 * SA RMPP 	 */
name|IB_SA_RMPP_VERS_F
block|,
name|IB_SA_RMPP_TYPE_F
block|,
name|IB_SA_RMPP_RESP_F
block|,
name|IB_SA_RMPP_FLAGS_F
block|,
name|IB_SA_RMPP_STATUS_F
block|,
comment|/* data1 */
name|IB_SA_RMPP_D1_F
block|,
name|IB_SA_RMPP_SEGNUM_F
block|,
comment|/* data2 */
name|IB_SA_RMPP_D2_F
block|,
name|IB_SA_RMPP_LEN_F
block|,
comment|/* DATA: Payload len */
name|IB_SA_RMPP_NEWWIN_F
block|,
comment|/* ACK: new window last */
comment|/* 	 * SA Multi Path rec 	 */
name|IB_SA_MP_NPATH_F
block|,
name|IB_SA_MP_NSRC_F
block|,
name|IB_SA_MP_NDEST_F
block|,
name|IB_SA_MP_GID0_F
block|,
comment|/* 	 * SA Path rec 	 */
name|IB_SA_PR_DGID_F
block|,
name|IB_SA_PR_SGID_F
block|,
name|IB_SA_PR_DLID_F
block|,
name|IB_SA_PR_SLID_F
block|,
name|IB_SA_PR_NPATH_F
block|,
comment|/* 	 * MC Member rec 	 */
name|IB_SA_MCM_MGID_F
block|,
name|IB_SA_MCM_PORTGID_F
block|,
name|IB_SA_MCM_QKEY_F
block|,
name|IB_SA_MCM_MLID_F
block|,
name|IB_SA_MCM_SL_F
block|,
name|IB_SA_MCM_MTU_F
block|,
name|IB_SA_MCM_RATE_F
block|,
name|IB_SA_MCM_TCLASS_F
block|,
name|IB_SA_MCM_PKEY_F
block|,
name|IB_SA_MCM_FLOW_LABEL_F
block|,
name|IB_SA_MCM_JOIN_STATE_F
block|,
name|IB_SA_MCM_PROXY_JOIN_F
block|,
comment|/* 	 * Service record 	 */
name|IB_SA_SR_ID_F
block|,
name|IB_SA_SR_GID_F
block|,
name|IB_SA_SR_PKEY_F
block|,
name|IB_SA_SR_LEASE_F
block|,
name|IB_SA_SR_KEY_F
block|,
name|IB_SA_SR_NAME_F
block|,
name|IB_SA_SR_DATA_F
block|,
comment|/* 	 * ATS SM record - within SA_SR_DATA 	 */
name|IB_ATS_SM_NODE_ADDR_F
block|,
name|IB_ATS_SM_MAGIC_KEY_F
block|,
name|IB_ATS_SM_NODE_TYPE_F
block|,
name|IB_ATS_SM_NODE_NAME_F
block|,
comment|/* 	 * SLTOVL MAPPING TABLE 	 */
name|IB_SLTOVL_MAPPING_TABLE_F
block|,
comment|/* 	 * VL ARBITRATION TABLE 	 */
name|IB_VL_ARBITRATION_TABLE_F
block|,
comment|/* 	 * IB vendor class range 2 	 */
name|IB_VEND2_OUI_F
block|,
name|IB_VEND2_DATA_F
block|,
comment|/* 	 * PortCountersExtended 	 */
name|IB_PC_EXT_FIRST_F
block|,
name|IB_PC_EXT_PORT_SELECT_F
init|=
name|IB_PC_EXT_FIRST_F
block|,
name|IB_PC_EXT_COUNTER_SELECT_F
block|,
name|IB_PC_EXT_XMT_BYTES_F
block|,
name|IB_PC_EXT_RCV_BYTES_F
block|,
name|IB_PC_EXT_XMT_PKTS_F
block|,
name|IB_PC_EXT_RCV_PKTS_F
block|,
name|IB_PC_EXT_XMT_UPKTS_F
block|,
name|IB_PC_EXT_RCV_UPKTS_F
block|,
name|IB_PC_EXT_XMT_MPKTS_F
block|,
name|IB_PC_EXT_RCV_MPKTS_F
block|,
name|IB_PC_EXT_LAST_F
block|,
comment|/* 	 * GUIDInfo fields 	 */
name|IB_GUID_GUID0_F
block|,
name|IB_FIELD_LAST_
comment|/* must be last */
block|}
enum|;
end_enum

begin_comment
comment|/*  * SA RMPP section  */
end_comment

begin_enum
enum|enum
name|RMPP_TYPE_ENUM
block|{
name|IB_RMPP_TYPE_NONE
block|,
name|IB_RMPP_TYPE_DATA
block|,
name|IB_RMPP_TYPE_ACK
block|,
name|IB_RMPP_TYPE_STOP
block|,
name|IB_RMPP_TYPE_ABORT
block|, }
enum|;
end_enum

begin_enum
enum|enum
name|RMPP_FLAGS_ENUM
block|{
name|IB_RMPP_FLAG_ACTIVE
init|=
literal|1
operator|<<
literal|0
block|,
name|IB_RMPP_FLAG_FIRST
init|=
literal|1
operator|<<
literal|1
block|,
name|IB_RMPP_FLAG_LAST
init|=
literal|1
operator|<<
literal|2
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|type
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|int
name|status
decl_stmt|;
union|union
block|{
name|uint32_t
name|u
decl_stmt|;
name|uint32_t
name|segnum
decl_stmt|;
block|}
name|d1
union|;
union|union
block|{
name|uint32_t
name|u
decl_stmt|;
name|uint32_t
name|len
decl_stmt|;
name|uint32_t
name|newwin
decl_stmt|;
block|}
name|d2
union|;
block|}
name|ib_rmpp_hdr_t
typedef|;
end_typedef

begin_enum
enum|enum
name|SA_SIZES_ENUM
block|{
name|SA_HEADER_SZ
init|=
literal|20
block|, }
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|ib_sa_call
block|{
name|unsigned
name|attrid
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
name|uint64_t
name|mask
decl_stmt|;
name|unsigned
name|method
decl_stmt|;
name|uint64_t
name|trid
decl_stmt|;
comment|/* used for out mad if nonzero, return real val */
name|unsigned
name|recsz
decl_stmt|;
comment|/* return field */
name|ib_rmpp_hdr_t
name|rmpp
decl_stmt|;
block|}
name|ib_sa_call_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ib_vendor_call
block|{
name|unsigned
name|method
decl_stmt|;
name|unsigned
name|mgmt_class
decl_stmt|;
name|unsigned
name|attrid
decl_stmt|;
name|unsigned
name|mod
decl_stmt|;
name|uint32_t
name|oui
decl_stmt|;
name|unsigned
name|timeout
decl_stmt|;
name|ib_rmpp_hdr_t
name|rmpp
decl_stmt|;
block|}
name|ib_vendor_call_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|IB_MIN_UCAST_LID
value|1
end_define

begin_define
define|#
directive|define
name|IB_MAX_UCAST_LID
value|(0xc000-1)
end_define

begin_define
define|#
directive|define
name|IB_MIN_MCAST_LID
value|0xc000
end_define

begin_define
define|#
directive|define
name|IB_MAX_MCAST_LID
value|(0xffff-1)
end_define

begin_define
define|#
directive|define
name|IB_LID_VALID
parameter_list|(
name|lid
parameter_list|)
value|((lid)>= IB_MIN_UCAST_LID&& lid<= IB_MAX_UCAST_LID)
end_define

begin_define
define|#
directive|define
name|IB_MLID_VALID
parameter_list|(
name|lid
parameter_list|)
value|((lid)>= IB_MIN_MCAST_LID&& lid<= IB_MAX_MCAST_LID)
end_define

begin_define
define|#
directive|define
name|MAD_DEF_RETRIES
value|3
end_define

begin_define
define|#
directive|define
name|MAD_DEF_TIMEOUT_MS
value|1000
end_define

begin_enum
enum|enum
block|{
name|IB_DEST_LID
block|,
name|IB_DEST_DRPATH
block|,
name|IB_DEST_GUID
block|,
name|IB_DEST_DRSLID
block|, }
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IB_NODE_CA
init|=
literal|1
block|,
name|IB_NODE_SWITCH
block|,
name|IB_NODE_ROUTER
block|,
name|NODE_RNIC
block|,
name|IB_NODE_MAX
init|=
name|NODE_RNIC
block|}
enum|;
end_enum

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* portid.c */
end_comment

begin_function_decl
name|char
modifier|*
name|portid2str
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|portid2portnum
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|str2drpath
parameter_list|(
name|ib_dr_path_t
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|routepath
parameter_list|,
name|int
name|drslid
parameter_list|,
name|int
name|drdlid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|drpath2str
parameter_list|(
name|ib_dr_path_t
modifier|*
name|path
parameter_list|,
name|char
modifier|*
name|dstr
parameter_list|,
name|size_t
name|dstr_size
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|ib_portid_set
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|int
name|lid
parameter_list|,
name|int
name|qp
parameter_list|,
name|int
name|qkey
parameter_list|)
block|{
name|portid
operator|->
name|lid
operator|=
name|lid
expr_stmt|;
name|portid
operator|->
name|qp
operator|=
name|qp
expr_stmt|;
name|portid
operator|->
name|qkey
operator|=
name|qkey
expr_stmt|;
name|portid
operator|->
name|grh_present
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* fields.c */
end_comment

begin_decl_stmt
specifier|extern
name|ib_field_t
name|ib_mad_f
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|_set_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|uint32_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|_get_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_set_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_get_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_set_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|uint64_t
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|_get_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|ib_field_t
modifier|*
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* mad.c */
end_comment

begin_function
specifier|static
specifier|inline
name|uint32_t
name|mad_get_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|)
block|{
return|return
name|_get_field
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mad_set_field
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|,
name|uint32_t
name|val
parameter_list|)
block|{
name|_set_field
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* field must be byte aligned */
end_comment

begin_function
specifier|static
specifier|inline
name|uint64_t
name|mad_get_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|)
block|{
return|return
name|_get_field64
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mad_set_field64
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|,
name|uint64_t
name|val
parameter_list|)
block|{
name|_set_field64
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mad_set_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
block|{
name|_set_array
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mad_get_array
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|base_offs
parameter_list|,
name|int
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
block|{
name|_get_array
argument_list|(
name|buf
argument_list|,
name|base_offs
argument_list|,
name|ib_mad_f
operator|+
name|field
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|mad_decode_field
parameter_list|(
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|int
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mad_encode_field
parameter_list|(
name|uint8_t
modifier|*
name|buf
parameter_list|,
name|int
name|field
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_encode
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_dr_path_t
modifier|*
name|drpath
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|mad_trid
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_build_pkt
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* register.c */
end_comment

begin_function_decl
name|int
name|mad_register_port_client
parameter_list|(
name|int
name|port_id
parameter_list|,
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_register_client
parameter_list|(
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_register_server
parameter_list|(
name|int
name|mgmt
parameter_list|,
name|uint8_t
name|rmpp_version
parameter_list|,
name|long
name|method_mask
index|[
literal|16
operator|/
sizeof|sizeof
argument_list|(
name|long
argument_list|)
index|]
parameter_list|,
name|uint32_t
name|class_oui
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_class_agent
parameter_list|(
name|int
name|mgmt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_agent_class
parameter_list|(
name|int
name|agent
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* serv.c */
end_comment

begin_function_decl
name|int
name|mad_send
parameter_list|(
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_receive
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mad_respond
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|uint32_t
name|rstatus
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_alloc
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mad_free
parameter_list|(
name|void
modifier|*
name|umad
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* vendor.c */
end_comment

begin_function_decl
name|uint8_t
modifier|*
name|ib_vendor_call
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_vendor_call_t
modifier|*
name|call
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|mad_is_vendor_range1
parameter_list|(
name|int
name|mgmt
parameter_list|)
block|{
return|return
name|mgmt
operator|>=
literal|0x9
operator|&&
name|mgmt
operator|<=
literal|0xf
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|mad_is_vendor_range2
parameter_list|(
name|int
name|mgmt
parameter_list|)
block|{
return|return
name|mgmt
operator|>=
literal|0x30
operator|&&
name|mgmt
operator|<=
literal|0x4f
return|;
block|}
end_function

begin_comment
comment|/* rpc.c */
end_comment

begin_function_decl
name|int
name|madrpc_portid
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|madrpc_set_retries
parameter_list|(
name|int
name|retries
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|madrpc_set_timeout
parameter_list|(
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|madrpc
parameter_list|(
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|void
modifier|*
name|payload
parameter_list|,
name|void
modifier|*
name|rcvdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|madrpc_rmpp
parameter_list|(
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|madrpc_init
parameter_list|(
name|char
modifier|*
name|dev_name
parameter_list|,
name|int
name|dev_port
parameter_list|,
name|int
modifier|*
name|mgmt_classes
parameter_list|,
name|int
name|num_classes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|madrpc_save_mad
parameter_list|(
name|void
modifier|*
name|madbuf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|madrpc_lock
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|madrpc_unlock
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|madrpc_show_errors
parameter_list|(
name|int
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_rpc_open_port
parameter_list|(
name|char
modifier|*
name|dev_name
parameter_list|,
name|int
name|dev_port
parameter_list|,
name|int
modifier|*
name|mgmt_classes
parameter_list|,
name|int
name|num_classes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|mad_rpc_close_port
parameter_list|(
name|void
modifier|*
name|ibmad_port
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_rpc
parameter_list|(
specifier|const
name|void
modifier|*
name|ibmad_port
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|void
modifier|*
name|payload
parameter_list|,
name|void
modifier|*
name|rcvdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|mad_rpc_rmpp
parameter_list|(
specifier|const
name|void
modifier|*
name|ibmad_port
parameter_list|,
name|ib_rpc_t
modifier|*
name|rpc
parameter_list|,
name|ib_portid_t
modifier|*
name|dport
parameter_list|,
name|ib_rmpp_hdr_t
modifier|*
name|rmpp
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* smp.c */
end_comment

begin_function_decl
name|uint8_t
modifier|*
name|smp_query
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|smp_set
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|smp_query_via
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|smp_set_via
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|ib_portid_t
modifier|*
name|id
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|inline
specifier|static
name|uint8_t
modifier|*
name|safe_smp_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
block|{
name|uint8_t
modifier|*
name|p
decl_stmt|;
name|madrpc_lock
argument_list|()
expr_stmt|;
name|p
operator|=
name|smp_query
argument_list|(
name|rcvbuf
argument_list|,
name|portid
argument_list|,
name|attrid
argument_list|,
name|mod
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|madrpc_unlock
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
specifier|inline
specifier|static
name|uint8_t
modifier|*
name|safe_smp_set
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|unsigned
name|attrid
parameter_list|,
name|unsigned
name|mod
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
block|{
name|uint8_t
modifier|*
name|p
decl_stmt|;
name|madrpc_lock
argument_list|()
expr_stmt|;
name|p
operator|=
name|smp_set
argument_list|(
name|rcvbuf
argument_list|,
name|portid
argument_list|,
name|attrid
argument_list|,
name|mod
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|madrpc_unlock
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_comment
comment|/* sa.c */
end_comment

begin_function_decl
name|uint8_t
modifier|*
name|sa_call
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_sa_call_t
modifier|*
name|sa
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|sa_rpc_call
parameter_list|(
specifier|const
name|void
modifier|*
name|ibmad_port
parameter_list|,
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_sa_call_t
modifier|*
name|sa
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_path_query
parameter_list|(
name|ibmad_gid_t
name|srcgid
parameter_list|,
name|ibmad_gid_t
name|destgid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* returns lid */
end_comment

begin_function_decl
name|int
name|ib_path_query_via
parameter_list|(
specifier|const
name|void
modifier|*
name|srcport
parameter_list|,
name|ibmad_gid_t
name|srcgid
parameter_list|,
name|ibmad_gid_t
name|destgid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|inline
specifier|static
name|uint8_t
modifier|*
name|safe_sa_call
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|ib_sa_call_t
modifier|*
name|sa
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
block|{
name|uint8_t
modifier|*
name|p
decl_stmt|;
name|madrpc_lock
argument_list|()
expr_stmt|;
name|p
operator|=
name|sa_call
argument_list|(
name|rcvbuf
argument_list|,
name|portid
argument_list|,
name|sa
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|madrpc_unlock
argument_list|()
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_comment
comment|/* resolve.c */
end_comment

begin_function_decl
name|int
name|ib_resolve_smlid
parameter_list|(
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_guid
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|uint64_t
modifier|*
name|guid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_portid_str
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|char
modifier|*
name|addr_str
parameter_list|,
name|int
name|dest_type
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_self
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|int
modifier|*
name|portnum
parameter_list|,
name|ibmad_gid_t
modifier|*
name|gid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_smlid_via
parameter_list|(
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_guid_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|uint64_t
modifier|*
name|guid
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
name|int
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_portid_str_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|char
modifier|*
name|addr_str
parameter_list|,
name|int
name|dest_type
parameter_list|,
name|ib_portid_t
modifier|*
name|sm_id
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_resolve_self_via
parameter_list|(
name|ib_portid_t
modifier|*
name|portid
parameter_list|,
name|int
modifier|*
name|portnum
parameter_list|,
name|ibmad_gid_t
modifier|*
name|gid
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* gs.c */
end_comment

begin_function_decl
name|uint8_t
modifier|*
name|perf_classportinfo_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_reset
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|mask
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_ext_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_ext_reset
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|mask
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_samples_control_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_samples_result_query
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|perf_classportinfo_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_reset_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|mask
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_ext_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_performance_ext_reset_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|mask
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_samples_control_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint8_t
modifier|*
name|port_samples_result_query_via
parameter_list|(
name|void
modifier|*
name|rcvbuf
parameter_list|,
name|ib_portid_t
modifier|*
name|dest
parameter_list|,
name|int
name|port
parameter_list|,
name|unsigned
name|timeout
parameter_list|,
specifier|const
name|void
modifier|*
name|srcport
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* dump.c */
end_comment

begin_decl_stmt
name|ib_mad_dump_fn
name|mad_dump_int
decl_stmt|,
name|mad_dump_uint
decl_stmt|,
name|mad_dump_hex
decl_stmt|,
name|mad_dump_rhex
decl_stmt|,
name|mad_dump_bitfield
decl_stmt|,
name|mad_dump_array
decl_stmt|,
name|mad_dump_string
decl_stmt|,
name|mad_dump_linkwidth
decl_stmt|,
name|mad_dump_linkwidthsup
decl_stmt|,
name|mad_dump_linkwidthen
decl_stmt|,
name|mad_dump_linkdowndefstate
decl_stmt|,
name|mad_dump_linkspeed
decl_stmt|,
name|mad_dump_linkspeedsup
decl_stmt|,
name|mad_dump_linkspeeden
decl_stmt|,
name|mad_dump_portstate
decl_stmt|,
name|mad_dump_portstates
decl_stmt|,
name|mad_dump_physportstate
decl_stmt|,
name|mad_dump_portcapmask
decl_stmt|,
name|mad_dump_mtu
decl_stmt|,
name|mad_dump_vlcap
decl_stmt|,
name|mad_dump_opervls
decl_stmt|,
name|mad_dump_node_type
decl_stmt|,
name|mad_dump_sltovl
decl_stmt|,
name|mad_dump_vlarbitration
decl_stmt|,
name|mad_dump_nodedesc
decl_stmt|,
name|mad_dump_nodeinfo
decl_stmt|,
name|mad_dump_portinfo
decl_stmt|,
name|mad_dump_switchinfo
decl_stmt|,
name|mad_dump_perfcounters
decl_stmt|,
name|mad_dump_perfcounters_ext
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|_mad_dump
parameter_list|(
name|ib_mad_dump_fn
modifier|*
name|fn
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|valsz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|_mad_dump_field
parameter_list|(
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|_mad_print_field
parameter_list|(
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|val
parameter_list|,
name|int
name|valsz
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|_mad_dump_val
parameter_list|(
name|ib_field_t
modifier|*
name|f
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|mad_print_field
parameter_list|(
name|int
name|field
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
block|{
if|if
condition|(
name|field
operator|<=
name|IB_NO_FIELD
operator|||
name|field
operator|>=
name|IB_FIELD_LAST_
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|_mad_print_field
argument_list|(
name|ib_mad_f
operator|+
name|field
argument_list|,
name|name
argument_list|,
name|val
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|mad_dump_field
parameter_list|(
name|int
name|field
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
block|{
if|if
condition|(
name|field
operator|<=
name|IB_NO_FIELD
operator|||
name|field
operator|>=
name|IB_FIELD_LAST_
condition|)
return|return
literal|0
return|;
return|return
name|_mad_dump_field
argument_list|(
name|ib_mad_f
operator|+
name|field
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|bufsz
argument_list|,
name|val
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|char
modifier|*
name|mad_dump_val
parameter_list|(
name|int
name|field
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
name|bufsz
parameter_list|,
name|void
modifier|*
name|val
parameter_list|)
block|{
if|if
condition|(
name|field
operator|<=
name|IB_NO_FIELD
operator|||
name|field
operator|>=
name|IB_FIELD_LAST_
condition|)
return|return
literal|0
return|;
return|return
name|_mad_dump_val
argument_list|(
name|ib_mad_f
operator|+
name|field
argument_list|,
name|buf
argument_list|,
name|bufsz
argument_list|,
name|val
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|int
name|ibdebug
decl_stmt|;
end_decl_stmt

begin_macro
name|END_C_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MAD_H_ */
end_comment

end_unit

