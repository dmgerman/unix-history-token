begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* insertion.h -- declarations for insertion.c.    $Id: insertion.h,v 1.10 2004/04/11 17:56:47 karl Exp $     Copyright (C) 1998, 1999, 2001, 2002, 2003 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software Foundation,    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|INSERTION_H
end_ifndef

begin_define
define|#
directive|define
name|INSERTION_H
end_define

begin_comment
comment|/* Must match list in insertion.c.  */
end_comment

begin_enum
enum|enum
name|insertion_type
block|{
name|cartouche
block|,
name|copying
block|,
name|defcv
block|,
name|deffn
block|,
name|defivar
block|,
name|defmac
block|,
name|defmethod
block|,
name|defop
block|,
name|defopt
block|,
name|defspec
block|,
name|deftp
block|,
name|deftypecv
block|,
name|deftypefn
block|,
name|deftypefun
block|,
name|deftypeivar
block|,
name|deftypemethod
block|,
name|deftypeop
block|,
name|deftypevar
block|,
name|deftypevr
block|,
name|defun
block|,
name|defvar
block|,
name|defvr
block|,
name|detailmenu
block|,
name|direntry
block|,
name|display
block|,
name|documentdescription
block|,
name|enumerate
block|,
name|example
block|,
name|floatenv
block|,
name|flushleft
block|,
name|flushright
block|,
name|format
block|,
name|ftable
block|,
name|group
block|,
name|ifclear
block|,
name|ifdocbook
block|,
name|ifhtml
block|,
name|ifinfo
block|,
name|ifnotdocbook
block|,
name|ifnothtml
block|,
name|ifnotinfo
block|,
name|ifnotplaintext
block|,
name|ifnottex
block|,
name|ifnotxml
block|,
name|ifplaintext
block|,
name|ifset
block|,
name|iftex
block|,
name|ifxml
block|,
name|itemize
block|,
name|lisp
block|,
name|menu
block|,
name|multitable
block|,
name|quotation
block|,
name|rawdocbook
block|,
name|rawhtml
block|,
name|rawtex
block|,
name|rawxml
block|,
name|smalldisplay
block|,
name|smallexample
block|,
name|smallformat
block|,
name|smalllisp
block|,
name|verbatim
block|,
name|table
block|,
name|tex
block|,
name|vtable
block|,
name|titlepage
block|,
name|bad_type
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|istack_elt
block|{
name|struct
name|istack_elt
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|item_function
decl_stmt|;
name|char
modifier|*
name|filename
decl_stmt|;
name|int
name|line_number
decl_stmt|;
name|int
name|filling_enabled
decl_stmt|;
name|int
name|indented_fill
decl_stmt|;
name|int
name|insertion
decl_stmt|;
name|int
name|inhibited
decl_stmt|;
name|int
name|in_fixed_width_font
decl_stmt|;
block|}
name|INSERTION_ELT
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|int
name|insertion_level
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|INSERTION_ELT
modifier|*
name|insertion_stack
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|in_menu
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|in_detailmenu
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|had_menu_commentary
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|in_paragraph
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|headitem_flag
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|after_headitem
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|init_insertion_stack
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|command_name_condition
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|void
name|cm_ifdocbook
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnotdocbook
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_docbook
argument_list|(
name|int
name|arg
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cm_ifhtml
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnothtml
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_html
argument_list|(
name|int
name|arg
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cm_ifinfo
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnotinfo
argument_list|(
name|void
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cm_ifplaintext
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnotplaintext
argument_list|(
name|void
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cm_iftex
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnottex
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_tex
argument_list|(
name|void
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|cm_ifxml
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_ifnotxml
argument_list|(
name|void
argument_list|)
decl_stmt|,
name|cm_xml
argument_list|(
name|int
name|arg
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
name|handle_verbatim_environment
parameter_list|(
name|int
name|find_end_verbatim
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|begin_insertion
parameter_list|(
name|enum
name|insertion_type
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|pop_insertion
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|discard_insertions
parameter_list|(
name|int
name|specials_ok
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|is_in_insertion_of_type
parameter_list|(
name|int
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|command_needs_braces
parameter_list|(
name|char
modifier|*
name|cmd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|enum
name|insertion_type
name|find_type_from_name
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !INSERTION_H */
end_comment

end_unit

