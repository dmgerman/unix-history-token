begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MCWin64EH.h - Machine Code Win64 EH support --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains declarations to support the Win64 Exception Handling
end_comment

begin_comment
comment|// scheme in MC.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_MCWIN64EH_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_MCWIN64EH_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Win64EH.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|MCSymbol
decl_stmt|;
name|class
name|MCWin64EHInstruction
block|{
name|public
label|:
typedef|typedef
name|Win64EH
operator|::
name|UnwindOpcodes
name|OpType
expr_stmt|;
name|private
label|:
name|OpType
name|Operation
decl_stmt|;
name|MCSymbol
modifier|*
name|Label
decl_stmt|;
name|unsigned
name|Offset
decl_stmt|;
name|unsigned
name|Register
decl_stmt|;
name|public
label|:
name|MCWin64EHInstruction
argument_list|(
argument|OpType Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|unsigned Reg
argument_list|)
block|:
name|Operation
argument_list|(
name|Op
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Offset
argument_list|(
literal|0
argument_list|)
operator|,
name|Register
argument_list|(
argument|Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_PushNonVol
argument_list|)
block|;     }
name|MCWin64EHInstruction
argument_list|(
argument|MCSymbol *L
argument_list|,
argument|unsigned Size
argument_list|)
operator|:
name|Operation
argument_list|(
name|Size
operator|>
literal|128
condition|?
name|Win64EH
operator|::
name|UOP_AllocLarge
else|:
name|Win64EH
operator|::
name|UOP_AllocSmall
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Offset
argument_list|(
argument|Size
argument_list|)
block|{ }
name|MCWin64EHInstruction
argument_list|(
argument|OpType Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|unsigned Reg
argument_list|,
argument|unsigned Off
argument_list|)
operator|:
name|Operation
argument_list|(
name|Op
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Offset
argument_list|(
name|Off
argument_list|)
operator|,
name|Register
argument_list|(
argument|Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_SetFPReg
operator|||
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_SaveNonVol
operator|||
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_SaveNonVolBig
operator|||
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_SaveXMM128
operator|||
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_SaveXMM128Big
argument_list|)
block|;     }
name|MCWin64EHInstruction
argument_list|(
argument|OpType Op
argument_list|,
argument|MCSymbol *L
argument_list|,
argument|bool Code
argument_list|)
operator|:
name|Operation
argument_list|(
name|Op
argument_list|)
operator|,
name|Label
argument_list|(
name|L
argument_list|)
operator|,
name|Offset
argument_list|(
argument|Code ?
literal|1
argument|:
literal|0
argument_list|)
block|{
name|assert
argument_list|(
name|Op
operator|==
name|Win64EH
operator|::
name|UOP_PushMachFrame
argument_list|)
block|;     }
name|OpType
name|getOperation
argument_list|()
specifier|const
block|{
return|return
name|Operation
return|;
block|}
name|MCSymbol
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|unsigned
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|unsigned
name|getRegister
argument_list|()
specifier|const
block|{
return|return
name|Register
return|;
block|}
name|bool
name|isPushCodeFrame
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|==
literal|1
return|;
block|}
block|}
empty_stmt|;
struct|struct
name|MCWin64EHUnwindInfo
block|{
name|MCWin64EHUnwindInfo
argument_list|()
operator|:
name|Begin
argument_list|(
literal|0
argument_list|)
operator|,
name|End
argument_list|(
literal|0
argument_list|)
operator|,
name|ExceptionHandler
argument_list|(
literal|0
argument_list|)
operator|,
name|Function
argument_list|(
literal|0
argument_list|)
operator|,
name|PrologEnd
argument_list|(
literal|0
argument_list|)
operator|,
name|Symbol
argument_list|(
literal|0
argument_list|)
operator|,
name|HandlesUnwind
argument_list|(
name|false
argument_list|)
operator|,
name|HandlesExceptions
argument_list|(
name|false
argument_list|)
operator|,
name|LastFrameInst
argument_list|(
operator|-
literal|1
argument_list|)
operator|,
name|ChainedParent
argument_list|(
literal|0
argument_list|)
operator|,
name|Instructions
argument_list|()
block|{}
name|MCSymbol
operator|*
name|Begin
expr_stmt|;
name|MCSymbol
modifier|*
name|End
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|ExceptionHandler
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Function
decl_stmt|;
name|MCSymbol
modifier|*
name|PrologEnd
decl_stmt|;
name|MCSymbol
modifier|*
name|Symbol
decl_stmt|;
name|bool
name|HandlesUnwind
decl_stmt|;
name|bool
name|HandlesExceptions
decl_stmt|;
name|int
name|LastFrameInst
decl_stmt|;
name|MCWin64EHUnwindInfo
modifier|*
name|ChainedParent
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|MCWin64EHInstruction
operator|>
name|Instructions
expr_stmt|;
block|}
struct|;
name|class
name|MCWin64EHUnwindEmitter
block|{
name|public
label|:
specifier|static
name|StringRef
name|GetSectionSuffix
parameter_list|(
specifier|const
name|MCSymbol
modifier|*
name|func
parameter_list|)
function_decl|;
comment|//
comment|// This emits the unwind info sections (.pdata and .xdata in PE/COFF).
comment|//
specifier|static
name|void
name|Emit
parameter_list|(
name|MCStreamer
modifier|&
name|streamer
parameter_list|)
function_decl|;
specifier|static
name|void
name|EmitUnwindInfo
parameter_list|(
name|MCStreamer
modifier|&
name|streamer
parameter_list|,
name|MCWin64EHUnwindInfo
modifier|*
name|info
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

