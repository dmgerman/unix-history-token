begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/ADT/PackedVector.h - Packed values vector -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the PackedVector class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ADT_PACKEDVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ADT_PACKEDVECTOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
name|BitNum
operator|,
name|typename
name|BitVectorTy
operator|,
name|bool
name|isSigned
operator|>
name|class
name|PackedVectorBase
expr_stmt|;
comment|// This won't be necessary if we can specialize members without specializing
comment|// the parent template.
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
name|BitNum
operator|,
name|typename
name|BitVectorTy
operator|>
name|class
name|PackedVectorBase
operator|<
name|T
operator|,
name|BitNum
operator|,
name|BitVectorTy
operator|,
name|false
operator|>
block|{
name|protected
operator|:
specifier|static
name|T
name|getValue
argument_list|(
argument|const BitVectorTy&Bits
argument_list|,
argument|unsigned Idx
argument_list|)
block|{
name|T
name|val
operator|=
name|T
argument_list|()
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|BitNum
condition|;
operator|++
name|i
control|)
name|val
operator|=
name|T
argument_list|(
name|val
operator||
operator|(
operator|(
name|Bits
index|[
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|i
index|]
condition|?
literal|1UL
else|:
literal|0UL
operator|)
operator|<<
name|i
operator|)
argument_list|)
expr_stmt|;
return|return
name|val
return|;
block|}
specifier|static
name|void
name|setValue
parameter_list|(
name|BitVectorTy
modifier|&
name|Bits
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
name|T
name|val
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|val
operator|>>
name|BitNum
operator|)
operator|==
literal|0
operator|&&
literal|"value is too big"
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|BitNum
condition|;
operator|++
name|i
control|)
name|Bits
index|[
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|i
index|]
operator|=
name|val
operator|&
operator|(
name|T
argument_list|(
literal|1
argument_list|)
operator|<<
name|i
operator|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
name|BitNum
operator|,
name|typename
name|BitVectorTy
operator|>
name|class
name|PackedVectorBase
operator|<
name|T
operator|,
name|BitNum
operator|,
name|BitVectorTy
operator|,
name|true
operator|>
block|{
name|protected
operator|:
specifier|static
name|T
name|getValue
argument_list|(
argument|const BitVectorTy&Bits
argument_list|,
argument|unsigned Idx
argument_list|)
block|{
name|T
name|val
operator|=
name|T
argument_list|()
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|BitNum
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|val
operator|=
name|T
argument_list|(
name|val
operator||
operator|(
operator|(
name|Bits
index|[
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|i
index|]
condition|?
literal|1UL
else|:
literal|0UL
operator|)
operator|<<
name|i
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Bits
index|[
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|BitNum
operator|-
literal|1
index|]
condition|)
name|val
operator|=
operator|~
name|val
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|val
return|;
end_return

begin_function
unit|}    static
name|void
name|setValue
parameter_list|(
name|BitVectorTy
modifier|&
name|Bits
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
name|T
name|val
parameter_list|)
block|{
if|if
condition|(
name|val
operator|<
literal|0
condition|)
block|{
name|val
operator|=
operator|~
name|val
expr_stmt|;
name|Bits
operator|.
name|set
argument_list|(
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|BitNum
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|assert
argument_list|(
operator|(
name|val
operator|>>
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|==
literal|0
operator|&&
literal|"value is too big"
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|BitNum
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|Bits
index|[
operator|(
name|Idx
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
operator|)
operator|+
name|i
index|]
operator|=
name|val
operator|&
operator|(
name|T
argument_list|(
literal|1
argument_list|)
operator|<<
name|i
operator|)
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|/// \brief Store a vector of values using a specific number of bits for each
end_comment

begin_comment
comment|/// value. Both signed and unsigned types can be used, e.g
end_comment

begin_comment
comment|/// @code
end_comment

begin_comment
comment|///   PackedVector<signed, 2> vec;
end_comment

begin_comment
comment|/// @endcode
end_comment

begin_comment
comment|/// will create a vector accepting values -2, -1, 0, 1. Any other value will hit
end_comment

begin_comment
comment|/// an assertion.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
name|BitNum
operator|,
name|typename
name|BitVectorTy
operator|=
name|BitVector
operator|>
name|class
name|PackedVector
operator|:
name|public
name|PackedVectorBase
operator|<
name|T
operator|,
name|BitNum
operator|,
name|BitVectorTy
operator|,
name|std
operator|::
name|numeric_limits
operator|<
name|T
operator|>
operator|::
name|is_signed
operator|>
block|{
name|BitVectorTy
name|Bits
block|;
typedef|typedef
name|PackedVectorBase
operator|<
name|T
operator|,
name|BitNum
operator|,
name|BitVectorTy
operator|,
name|std
operator|::
name|numeric_limits
operator|<
name|T
operator|>
operator|::
name|is_signed
operator|>
name|base
expr_stmt|;
name|public
operator|:
name|class
name|reference
block|{
name|PackedVector
operator|&
name|Vec
block|;
specifier|const
name|unsigned
name|Idx
block|;
name|reference
argument_list|()
block|;
comment|// Undefined
name|public
operator|:
name|reference
argument_list|(
argument|PackedVector&vec
argument_list|,
argument|unsigned idx
argument_list|)
operator|:
name|Vec
argument_list|(
name|vec
argument_list|)
block|,
name|Idx
argument_list|(
argument|idx
argument_list|)
block|{ }
name|reference
operator|&
name|operator
operator|=
operator|(
name|T
name|val
operator|)
block|{
name|Vec
operator|.
name|setValue
argument_list|(
name|Vec
operator|.
name|Bits
argument_list|,
name|Idx
argument_list|,
name|val
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|operator
name|T
argument_list|()
specifier|const
block|{
return|return
name|Vec
operator|.
name|getValue
argument_list|(
name|Vec
operator|.
name|Bits
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_expr_stmt

begin_macro
unit|};
name|PackedVector
argument_list|()
end_macro

begin_block
block|{ }
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|PackedVector
argument_list|(
argument|unsigned size
argument_list|)
end_macro

begin_macro
unit|:
name|Bits
argument_list|(
argument|size<< (BitNum-
literal|1
argument|)
argument_list|)
end_macro

begin_block
block|{ }
end_block

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Bits
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Bits
operator|.
name|size
argument_list|()
operator|>>
operator|(
name|BitNum
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|clear
parameter_list|()
block|{
name|Bits
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
name|Bits
operator|.
name|resize
argument_list|(
name|N
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reserve
parameter_list|(
name|unsigned
name|N
parameter_list|)
block|{
name|Bits
operator|.
name|reserve
argument_list|(
name|N
operator|<<
operator|(
name|BitNum
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|PackedVector
modifier|&
name|reset
parameter_list|()
block|{
name|Bits
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
name|T
name|val
parameter_list|)
block|{
name|resize
argument_list|(
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|(
operator|*
name|this
operator|)
index|[
name|size
argument_list|()
operator|-
literal|1
index|]
operator|=
name|val
expr_stmt|;
block|}
end_function

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|unsigned
name|Idx
parameter_list|)
block|{
return|return
name|reference
argument_list|(
operator|*
name|this
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|T
name|operator
index|[]
argument_list|(
name|unsigned
name|Idx
argument_list|)
decl|const
block|{
return|return
name|base
operator|::
name|getValue
argument_list|(
name|Bits
argument_list|,
name|Idx
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|PackedVector
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Bits
operator|==
name|RHS
operator|.
name|Bits
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|PackedVector
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Bits
operator|!=
name|RHS
operator|.
name|Bits
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|PackedVector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|PackedVector
operator|&
name|RHS
operator|)
block|{
name|Bits
operator|=
name|RHS
operator|.
name|Bits
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|PackedVector
operator|&
name|operator
operator||=
operator|(
specifier|const
name|PackedVector
operator|&
name|RHS
operator|)
block|{
name|Bits
operator||=
name|RHS
operator|.
name|Bits
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|PackedVector
modifier|&
name|RHS
parameter_list|)
block|{
name|Bits
operator|.
name|swap
argument_list|(
name|RHS
operator|.
name|Bits
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|// Leave BitNum=0 undefined.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|PackedVector
operator|<
name|T
operator|,
literal|0
operator|>
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

