begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DOTGraphTraitsPass.h - Print/View dotty graphs-----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Templates to create dotty viewer and printer passes for GraphTraits graphs.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ANALYSIS_DOTGRAPHTRAITSPASS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ANALYSIS_DOTGRAPHTRAITSPASS_H
end_define

begin_include
include|#
directive|include
file|"llvm/Analysis/CFGPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Pass.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|class
name|Analysis
operator|,
name|bool
name|Simple
operator|>
name|class
name|DOTGraphTraitsViewer
operator|:
name|public
name|FunctionPass
block|{
name|public
operator|:
name|DOTGraphTraitsViewer
argument_list|(
argument|StringRef GraphName
argument_list|,
argument|char&ID
argument_list|)
operator|:
name|FunctionPass
argument_list|(
name|ID
argument_list|)
block|,
name|Name
argument_list|(
argument|GraphName
argument_list|)
block|{}
name|virtual
name|bool
name|runOnFunction
argument_list|(
argument|Function&F
argument_list|)
block|{
name|Analysis
operator|*
name|Graph
operator|=
operator|&
name|getAnalysis
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;
name|std
operator|::
name|string
name|GraphName
operator|=
name|DOTGraphTraits
operator|<
name|Analysis
operator|*
operator|>
operator|::
name|getGraphName
argument_list|(
name|Graph
argument_list|)
block|;
name|std
operator|::
name|string
name|Title
operator|=
name|GraphName
operator|+
literal|" for '"
operator|+
name|F
operator|.
name|getName
argument_list|()
operator|.
name|str
argument_list|()
operator|+
literal|"' function"
block|;
name|ViewGraph
argument_list|(
name|Graph
argument_list|,
name|Name
argument_list|,
name|Simple
argument_list|,
name|Title
argument_list|)
block|;
return|return
name|false
return|;
block|}
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
block|{
name|AU
operator|.
name|setPreservesAll
argument_list|()
block|;
name|AU
operator|.
name|addRequired
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;   }
name|private
operator|:
name|std
operator|::
name|string
name|Name
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|Analysis
operator|,
name|bool
name|Simple
operator|>
name|class
name|DOTGraphTraitsPrinter
operator|:
name|public
name|FunctionPass
block|{
name|public
operator|:
name|DOTGraphTraitsPrinter
argument_list|(
argument|StringRef GraphName
argument_list|,
argument|char&ID
argument_list|)
operator|:
name|FunctionPass
argument_list|(
name|ID
argument_list|)
block|,
name|Name
argument_list|(
argument|GraphName
argument_list|)
block|{}
name|virtual
name|bool
name|runOnFunction
argument_list|(
argument|Function&F
argument_list|)
block|{
name|Analysis
operator|*
name|Graph
operator|=
operator|&
name|getAnalysis
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;
name|std
operator|::
name|string
name|Filename
operator|=
name|Name
operator|+
literal|"."
operator|+
name|F
operator|.
name|getName
argument_list|()
operator|.
name|str
argument_list|()
operator|+
literal|".dot"
block|;
name|std
operator|::
name|string
name|ErrorInfo
block|;
name|errs
argument_list|()
operator|<<
literal|"Writing '"
operator|<<
name|Filename
operator|<<
literal|"'..."
block|;
name|raw_fd_ostream
name|File
argument_list|(
name|Filename
operator|.
name|c_str
argument_list|()
argument_list|,
name|ErrorInfo
argument_list|)
block|;
name|std
operator|::
name|string
name|GraphName
operator|=
name|DOTGraphTraits
operator|<
name|Analysis
operator|*
operator|>
operator|::
name|getGraphName
argument_list|(
name|Graph
argument_list|)
block|;
name|std
operator|::
name|string
name|Title
operator|=
name|GraphName
operator|+
literal|" for '"
operator|+
name|F
operator|.
name|getName
argument_list|()
operator|.
name|str
argument_list|()
operator|+
literal|"' function"
block|;
if|if
condition|(
name|ErrorInfo
operator|.
name|empty
argument_list|()
condition|)
name|WriteGraph
argument_list|(
name|File
argument_list|,
name|Graph
argument_list|,
name|Simple
argument_list|,
name|Title
argument_list|)
expr_stmt|;
else|else
name|errs
argument_list|()
operator|<<
literal|"  error opening file for writing!"
expr_stmt|;
name|errs
argument_list|()
operator|<<
literal|"\n"
block|;
return|return
name|false
return|;
block|}
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
name|AnalysisUsage
operator|&
name|AU
argument_list|)
decl|const
block|{
name|AU
operator|.
name|setPreservesAll
argument_list|()
expr_stmt|;
name|AU
operator|.
name|addRequired
operator|<
name|Analysis
operator|>
operator|(
operator|)
expr_stmt|;
block|}
name|private
label|:
name|std
operator|::
name|string
name|Name
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Analysis
operator|,
name|bool
name|Simple
operator|>
name|class
name|DOTGraphTraitsModuleViewer
operator|:
name|public
name|ModulePass
block|{
name|public
operator|:
name|DOTGraphTraitsModuleViewer
argument_list|(
argument|StringRef GraphName
argument_list|,
argument|char&ID
argument_list|)
operator|:
name|ModulePass
argument_list|(
name|ID
argument_list|)
block|,
name|Name
argument_list|(
argument|GraphName
argument_list|)
block|{}
name|virtual
name|bool
name|runOnModule
argument_list|(
argument|Module&M
argument_list|)
block|{
name|Analysis
operator|*
name|Graph
operator|=
operator|&
name|getAnalysis
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;
name|std
operator|::
name|string
name|Title
operator|=
name|DOTGraphTraits
operator|<
name|Analysis
operator|*
operator|>
operator|::
name|getGraphName
argument_list|(
name|Graph
argument_list|)
block|;
name|ViewGraph
argument_list|(
name|Graph
argument_list|,
name|Name
argument_list|,
name|Simple
argument_list|,
name|Title
argument_list|)
block|;
return|return
name|false
return|;
block|}
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&AU
argument_list|)
specifier|const
block|{
name|AU
operator|.
name|setPreservesAll
argument_list|()
block|;
name|AU
operator|.
name|addRequired
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;   }
name|private
operator|:
name|std
operator|::
name|string
name|Name
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Analysis
operator|,
name|bool
name|Simple
operator|>
name|class
name|DOTGraphTraitsModulePrinter
operator|:
name|public
name|ModulePass
block|{
name|public
operator|:
name|DOTGraphTraitsModulePrinter
argument_list|(
argument|StringRef GraphName
argument_list|,
argument|char&ID
argument_list|)
operator|:
name|ModulePass
argument_list|(
name|ID
argument_list|)
block|,
name|Name
argument_list|(
argument|GraphName
argument_list|)
block|{}
name|virtual
name|bool
name|runOnModule
argument_list|(
argument|Module&M
argument_list|)
block|{
name|Analysis
operator|*
name|Graph
operator|=
operator|&
name|getAnalysis
operator|<
name|Analysis
operator|>
operator|(
operator|)
block|;
name|std
operator|::
name|string
name|Filename
operator|=
name|Name
operator|+
literal|".dot"
block|;
name|std
operator|::
name|string
name|ErrorInfo
block|;
name|errs
argument_list|()
operator|<<
literal|"Writing '"
operator|<<
name|Filename
operator|<<
literal|"'..."
block|;
name|raw_fd_ostream
name|File
argument_list|(
name|Filename
operator|.
name|c_str
argument_list|()
argument_list|,
name|ErrorInfo
argument_list|)
block|;
name|std
operator|::
name|string
name|Title
operator|=
name|DOTGraphTraits
operator|<
name|Analysis
operator|*
operator|>
operator|::
name|getGraphName
argument_list|(
name|Graph
argument_list|)
block|;
if|if
condition|(
name|ErrorInfo
operator|.
name|empty
argument_list|()
condition|)
name|WriteGraph
argument_list|(
name|File
argument_list|,
name|Graph
argument_list|,
name|Simple
argument_list|,
name|Title
argument_list|)
expr_stmt|;
else|else
name|errs
argument_list|()
operator|<<
literal|"  error opening file for writing!"
expr_stmt|;
name|errs
argument_list|()
operator|<<
literal|"\n"
block|;
return|return
name|false
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
name|AnalysisUsage
operator|&
name|AU
argument_list|)
decl|const
block|{
name|AU
operator|.
name|setPreservesAll
argument_list|()
expr_stmt|;
name|AU
operator|.
name|addRequired
operator|<
name|Analysis
operator|>
operator|(
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|Name
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

