begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- avxintrin.h - AVX intrinsics -------------------------------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IMMINTRIN_H
end_ifndef

begin_error
error|#
directive|error
literal|"Never use<avxintrin.h> directly; include<immintrin.h> instead."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__AVXINTRIN_H
end_ifndef

begin_define
define|#
directive|define
name|__AVXINTRIN_H
end_define

begin_typedef
typedef|typedef
name|double
name|__v4df
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|float
name|__v8sf
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|long
name|long
name|__v4di
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v8si
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|short
name|__v16hi
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|char
name|__v32qi
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|float
name|__m256
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|double
name|__m256d
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_typedef
typedef|typedef
name|long
name|long
name|__m256i
name|__attribute__
typedef|((
name|__vector_size__
typedef|(32)));
end_typedef

begin_comment
comment|/* Arithmetic */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_add_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__a
operator|+
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_add_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__a
operator|+
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_sub_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__a
operator|-
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_sub_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__a
operator|-
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_addsub_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_addsubpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_addsub_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_addsubps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_div_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__a
operator|/
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_div_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__a
operator|/
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_max_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_maxpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_max_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_maxps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_min_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_minpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_min_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_minps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_mul_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__a
operator|*
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_mul_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__a
operator|*
name|__b
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_sqrt_pd
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_sqrtpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_sqrt_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_sqrtps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_rsqrt_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_rsqrtps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_rcp_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_rcpps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_define
define|#
directive|define
name|_mm256_round_pd
parameter_list|(
name|V
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \     __m256d __V = (V); \     (__m256d)__builtin_ia32_roundpd256((__v4df)__V, (M)); })
end_define

begin_define
define|#
directive|define
name|_mm256_round_ps
parameter_list|(
name|V
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256 __V = (V); \   (__m256)__builtin_ia32_roundps256((__v8sf)__V, (M)); })
end_define

begin_define
define|#
directive|define
name|_mm256_ceil_pd
parameter_list|(
name|V
parameter_list|)
value|_mm256_round_pd((V), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm256_floor_pd
parameter_list|(
name|V
parameter_list|)
value|_mm256_round_pd((V), _MM_FROUND_FLOOR)
end_define

begin_define
define|#
directive|define
name|_mm256_ceil_ps
parameter_list|(
name|V
parameter_list|)
value|_mm256_round_ps((V), _MM_FROUND_CEIL)
end_define

begin_define
define|#
directive|define
name|_mm256_floor_ps
parameter_list|(
name|V
parameter_list|)
value|_mm256_round_ps((V), _MM_FROUND_FLOOR)
end_define

begin_comment
comment|/* Logical */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_and_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256d
call|)
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
operator|&
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_and_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256
call|)
argument_list|(
operator|(
name|__v8si
operator|)
name|__a
operator|&
operator|(
name|__v8si
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_andnot_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256d
call|)
argument_list|(
operator|~
operator|(
name|__v4di
operator|)
name|__a
operator|&
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_andnot_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256
call|)
argument_list|(
operator|~
operator|(
name|__v8si
operator|)
name|__a
operator|&
operator|(
name|__v8si
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_or_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256d
call|)
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
operator||
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_or_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256
call|)
argument_list|(
operator|(
name|__v8si
operator|)
name|__a
operator||
operator|(
name|__v8si
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_xor_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256d
call|)
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
operator|^
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_xor_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
call|(
name|__m256
call|)
argument_list|(
operator|(
name|__v8si
operator|)
name|__a
operator|^
operator|(
name|__v8si
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Horizontal arithmetic */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_hadd_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_haddpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_hadd_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_haddps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_hsub_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_hsubpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_hsub_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_hsubps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector permutations */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_permutevar_pd
argument_list|(
name|__m128d
name|__a
argument_list|,
name|__m128i
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_vpermilvarpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__a
argument_list|,
operator|(
name|__v2di
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_permutevar_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256i
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_vpermilvarpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4di
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_permutevar_ps
argument_list|(
name|__m128
name|__a
argument_list|,
name|__m128i
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_vpermilvarps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__a
argument_list|,
operator|(
name|__v4si
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_permutevar_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256i
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_vpermilvarps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8si
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_define
define|#
directive|define
name|_mm_permute_pd
parameter_list|(
name|A
parameter_list|,
name|C
parameter_list|)
value|__extension__ ({ \   __m128d __A = (A); \   (__m128d)__builtin_shufflevector((__v2df)__A, (__v2df) _mm_setzero_pd(), \                                    (C)& 0x1, ((C)& 0x2)>> 1); })
end_define

begin_define
define|#
directive|define
name|_mm256_permute_pd
parameter_list|(
name|A
parameter_list|,
name|C
parameter_list|)
value|__extension__ ({ \   __m256d __A = (A); \   (__m256d)__builtin_shufflevector((__v4df)__A, (__v4df) _mm256_setzero_pd(), \                                    (C)& 0x1, ((C)& 0x2)>> 1, \                                    2 + (((C)& 0x4)>> 2), \                                    2 + (((C)& 0x8)>> 3)); })
end_define

begin_define
define|#
directive|define
name|_mm_permute_ps
parameter_list|(
name|A
parameter_list|,
name|C
parameter_list|)
value|__extension__ ({ \   __m128 __A = (A); \   (__m128)__builtin_shufflevector((__v4sf)__A, (__v4sf) _mm_setzero_ps(), \                                    (C)& 0x3, ((C)& 0xc)>> 2, \                                    ((C)& 0x30)>> 4, ((C)& 0xc0)>> 6); })
end_define

begin_define
define|#
directive|define
name|_mm256_permute_ps
parameter_list|(
name|A
parameter_list|,
name|C
parameter_list|)
value|__extension__ ({ \   __m256 __A = (A); \   (__m256)__builtin_shufflevector((__v8sf)__A, (__v8sf) _mm256_setzero_ps(), \                                   (C)& 0x3, ((C)& 0xc)>> 2, \                                   ((C)& 0x30)>> 4, ((C)& 0xc0)>> 6, \                                   4 + (((C)& 0x03)>> 0), \                                   4 + (((C)& 0x0c)>> 2), \                                   4 + (((C)& 0x30)>> 4), \                                   4 + (((C)& 0xc0)>> 6)); })
end_define

begin_define
define|#
directive|define
name|_mm256_permute2f128_pd
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256d __V1 = (V1); \   __m256d __V2 = (V2); \   (__m256d)__builtin_ia32_vperm2f128_pd256((__v4df)__V1, (__v4df)__V2, (M)); })
end_define

begin_define
define|#
directive|define
name|_mm256_permute2f128_ps
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256 __V1 = (V1); \   __m256 __V2 = (V2); \   (__m256)__builtin_ia32_vperm2f128_ps256((__v8sf)__V1, (__v8sf)__V2, (M)); })
end_define

begin_define
define|#
directive|define
name|_mm256_permute2f128_si256
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256i __V1 = (V1); \   __m256i __V2 = (V2); \   (__m256i)__builtin_ia32_vperm2f128_si256((__v8si)__V1, (__v8si)__V2, (M)); })
end_define

begin_comment
comment|/* Vector Blend */
end_comment

begin_define
define|#
directive|define
name|_mm256_blend_pd
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256d __V1 = (V1); \   __m256d __V2 = (V2); \   (__m256d)__builtin_ia32_blendpd256((__v4df)__V1, (__v4df)__V2, (M)); })
end_define

begin_define
define|#
directive|define
name|_mm256_blend_ps
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256 __V1 = (V1); \   __m256 __V2 = (V2); \   (__m256)__builtin_ia32_blendps256((__v8sf)__V1, (__v8sf)__V2, (M)); })
end_define

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_blendv_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|,
name|__m256d
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_blendvpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|,
operator|(
name|__v4df
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_blendv_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|,
name|__m256
name|__c
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_blendvps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|,
operator|(
name|__v8sf
operator|)
name|__c
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector Dot Product */
end_comment

begin_define
define|#
directive|define
name|_mm256_dp_ps
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|M
parameter_list|)
value|__extension__ ({ \   __m256 __V1 = (V1); \   __m256 __V2 = (V2); \   (__m256)__builtin_ia32_dpps256((__v8sf)__V1, (__v8sf)__V2, (M)); })
end_define

begin_comment
comment|/* Vector shuffle */
end_comment

begin_define
define|#
directive|define
name|_mm256_shuffle_ps
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|mask
parameter_list|)
value|__extension__ ({ \         __m256 __a = (a); \         __m256 __b = (b); \         (__m256)__builtin_shufflevector((__v8sf)__a, (__v8sf)__b, \         (mask)& 0x3,                ((mask)& 0xc)>> 2, \         (((mask)& 0x30)>> 4) + 8,  (((mask)& 0xc0)>> 6) + 8, \         ((mask)& 0x3) + 4,          (((mask)& 0xc)>> 2) + 4, \         (((mask)& 0x30)>> 4) + 12, (((mask)& 0xc0)>> 6) + 12); })
end_define

begin_define
define|#
directive|define
name|_mm256_shuffle_pd
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|mask
parameter_list|)
value|__extension__ ({ \         __m256d __a = (a); \         __m256d __b = (b); \         (__m256d)__builtin_shufflevector((__v4df)__a, (__v4df)__b, \         (mask)& 0x1, \         (((mask)& 0x2)>> 1) + 4, \         (((mask)& 0x4)>> 2) + 2, \         (((mask)& 0x8)>> 3) + 6); })
end_define

begin_comment
comment|/* Compare */
end_comment

begin_define
define|#
directive|define
name|_CMP_EQ_OQ
value|0x00
end_define

begin_comment
comment|/* Equal (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_LT_OS
value|0x01
end_define

begin_comment
comment|/* Less-than (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_LE_OS
value|0x02
end_define

begin_comment
comment|/* Less-than-or-equal (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_UNORD_Q
value|0x03
end_define

begin_comment
comment|/* Unordered (non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NEQ_UQ
value|0x04
end_define

begin_comment
comment|/* Not-equal (unordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NLT_US
value|0x05
end_define

begin_comment
comment|/* Not-less-than (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NLE_US
value|0x06
end_define

begin_comment
comment|/* Not-less-than-or-equal (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_ORD_Q
value|0x07
end_define

begin_comment
comment|/* Ordered (nonsignaling)   */
end_comment

begin_define
define|#
directive|define
name|_CMP_EQ_UQ
value|0x08
end_define

begin_comment
comment|/* Equal (unordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NGE_US
value|0x09
end_define

begin_comment
comment|/* Not-greater-than-or-equal (unord, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NGT_US
value|0x0a
end_define

begin_comment
comment|/* Not-greater-than (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_FALSE_OQ
value|0x0b
end_define

begin_comment
comment|/* False (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NEQ_OQ
value|0x0c
end_define

begin_comment
comment|/* Not-equal (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_GE_OS
value|0x0d
end_define

begin_comment
comment|/* Greater-than-or-equal (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_GT_OS
value|0x0e
end_define

begin_comment
comment|/* Greater-than (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_TRUE_UQ
value|0x0f
end_define

begin_comment
comment|/* True (unordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_EQ_OS
value|0x10
end_define

begin_comment
comment|/* Equal (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_LT_OQ
value|0x11
end_define

begin_comment
comment|/* Less-than (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_LE_OQ
value|0x12
end_define

begin_comment
comment|/* Less-than-or-equal (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_UNORD_S
value|0x13
end_define

begin_comment
comment|/* Unordered (signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NEQ_US
value|0x14
end_define

begin_comment
comment|/* Not-equal (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NLT_UQ
value|0x15
end_define

begin_comment
comment|/* Not-less-than (unordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NLE_UQ
value|0x16
end_define

begin_comment
comment|/* Not-less-than-or-equal (unord, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_ORD_S
value|0x17
end_define

begin_comment
comment|/* Ordered (signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_EQ_US
value|0x18
end_define

begin_comment
comment|/* Equal (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NGE_UQ
value|0x19
end_define

begin_comment
comment|/* Not-greater-than-or-equal (unord, non-sign)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NGT_UQ
value|0x1a
end_define

begin_comment
comment|/* Not-greater-than (unordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_FALSE_OS
value|0x1b
end_define

begin_comment
comment|/* False (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_NEQ_OS
value|0x1c
end_define

begin_comment
comment|/* Not-equal (ordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_GE_OQ
value|0x1d
end_define

begin_comment
comment|/* Greater-than-or-equal (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_GT_OQ
value|0x1e
end_define

begin_comment
comment|/* Greater-than (ordered, non-signaling)  */
end_comment

begin_define
define|#
directive|define
name|_CMP_TRUE_US
value|0x1f
end_define

begin_comment
comment|/* True (unordered, signaling)  */
end_comment

begin_define
define|#
directive|define
name|_mm_cmp_pd
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m128d __a = (a); \   __m128d __b = (b); \   (__m128d)__builtin_ia32_cmppd((__v2df)__a, (__v2df)__b, (c)); })
end_define

begin_define
define|#
directive|define
name|_mm_cmp_ps
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m128 __a = (a); \   __m128 __b = (b); \   (__m128)__builtin_ia32_cmpps((__v4sf)__a, (__v4sf)__b, (c)); })
end_define

begin_define
define|#
directive|define
name|_mm256_cmp_pd
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m256d __a = (a); \   __m256d __b = (b); \   (__m256d)__builtin_ia32_cmppd256((__v4df)__a, (__v4df)__b, (c)); })
end_define

begin_define
define|#
directive|define
name|_mm256_cmp_ps
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m256 __a = (a); \   __m256 __b = (b); \   (__m256)__builtin_ia32_cmpps256((__v8sf)__a, (__v8sf)__b, (c)); })
end_define

begin_define
define|#
directive|define
name|_mm_cmp_sd
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m128d __a = (a); \   __m128d __b = (b); \   (__m128d)__builtin_ia32_cmpsd((__v2df)__a, (__v2df)__b, (c)); })
end_define

begin_define
define|#
directive|define
name|_mm_cmp_ss
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|__extension__ ({ \   __m128 __a = (a); \   __m128 __b = (b); \   (__m128)__builtin_ia32_cmpss((__v4sf)__a, (__v4sf)__b, (c)); })
end_define

begin_comment
comment|/* Vector extract */
end_comment

begin_define
define|#
directive|define
name|_mm256_extractf128_pd
parameter_list|(
name|A
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256d __A = (A); \   (__m128d)__builtin_ia32_vextractf128_pd256((__v4df)__A, (O)); })
end_define

begin_define
define|#
directive|define
name|_mm256_extractf128_ps
parameter_list|(
name|A
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256 __A = (A); \   (__m128)__builtin_ia32_vextractf128_ps256((__v8sf)__A, (O)); })
end_define

begin_define
define|#
directive|define
name|_mm256_extractf128_si256
parameter_list|(
name|A
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256i __A = (A); \   (__m128i)__builtin_ia32_vextractf128_si256((__v8si)__A, (O)); })
end_define

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_extract_epi32
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v8si
name|__b
init|=
operator|(
name|__v8si
operator|)
name|__a
decl_stmt|;
return|return
name|__b
index|[
name|__imm
operator|&
literal|7
index|]
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_extract_epi16
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v16hi
name|__b
init|=
operator|(
name|__v16hi
operator|)
name|__a
decl_stmt|;
return|return
name|__b
index|[
name|__imm
operator|&
literal|15
index|]
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_extract_epi8
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v32qi
name|__b
init|=
operator|(
name|__v32qi
operator|)
name|__a
decl_stmt|;
return|return
name|__b
index|[
name|__imm
operator|&
literal|31
index|]
return|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_decl_stmt
specifier|static
name|__inline
name|long
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_extract_epi64
argument_list|(
name|__m256i
name|__a
argument_list|,
specifier|const
name|int
name|__imm
argument_list|)
block|{
name|__v4di
name|__b
init|=
operator|(
name|__v4di
operator|)
name|__a
decl_stmt|;
return|return
name|__b
index|[
name|__imm
operator|&
literal|3
index|]
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Vector insert */
end_comment

begin_define
define|#
directive|define
name|_mm256_insertf128_pd
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256d __V1 = (V1); \   __m128d __V2 = (V2); \   (__m256d)__builtin_ia32_vinsertf128_pd256((__v4df)__V1, (__v2df)__V2, (O)); })
end_define

begin_define
define|#
directive|define
name|_mm256_insertf128_ps
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256 __V1 = (V1); \   __m128 __V2 = (V2); \   (__m256)__builtin_ia32_vinsertf128_ps256((__v8sf)__V1, (__v4sf)__V2, (O)); })
end_define

begin_define
define|#
directive|define
name|_mm256_insertf128_si256
parameter_list|(
name|V1
parameter_list|,
name|V2
parameter_list|,
name|O
parameter_list|)
value|__extension__ ({ \   __m256i __V1 = (V1); \   __m128i __V2 = (V2); \   (__m256i)__builtin_ia32_vinsertf128_si256((__v8si)__V1, (__v4si)__V2, (O)); })
end_define

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_insert_epi32
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
name|__b
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v8si
name|__c
init|=
operator|(
name|__v8si
operator|)
name|__a
decl_stmt|;
name|__c
index|[
name|__imm
operator|&
literal|7
index|]
operator|=
name|__b
expr_stmt|;
return|return
operator|(
name|__m256i
operator|)
name|__c
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_insert_epi16
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
name|__b
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v16hi
name|__c
init|=
operator|(
name|__v16hi
operator|)
name|__a
decl_stmt|;
name|__c
index|[
name|__imm
operator|&
literal|15
index|]
operator|=
name|__b
expr_stmt|;
return|return
operator|(
name|__m256i
operator|)
name|__c
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_insert_epi8
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
name|__b
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v32qi
name|__c
init|=
operator|(
name|__v32qi
operator|)
name|__a
decl_stmt|;
name|__c
index|[
name|__imm
operator|&
literal|31
index|]
operator|=
name|__b
expr_stmt|;
return|return
operator|(
name|__m256i
operator|)
name|__c
return|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_insert_epi64
argument_list|(
name|__m256i
name|__a
argument_list|,
name|int
name|__b
argument_list|,
name|int
specifier|const
name|__imm
argument_list|)
block|{
name|__v4di
name|__c
init|=
operator|(
name|__v4di
operator|)
name|__a
decl_stmt|;
name|__c
index|[
name|__imm
operator|&
literal|3
index|]
operator|=
name|__b
expr_stmt|;
return|return
operator|(
name|__m256i
operator|)
name|__c
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Conversion */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtepi32_pd
argument_list|(
name|__m128i
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_cvtdq2pd256
argument_list|(
operator|(
name|__v4si
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtepi32_ps
argument_list|(
name|__m256i
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_cvtdq2ps256
argument_list|(
operator|(
name|__v8si
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtpd_ps
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtpd2ps256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtps_epi32
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
name|__builtin_ia32_cvtps2dq256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtps_pd
argument_list|(
name|__m128
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_cvtps2pd256
argument_list|(
operator|(
name|__v4sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvttpd_epi32
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvttpd2dq256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvtpd_epi32
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvtpd2dq256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_cvttps_epi32
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
name|__builtin_ia32_cvttps2dq256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector replicate */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_movehdup_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|7
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_moveldup_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_movedup_pd
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Unpack and Interleave */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_unpackhi_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|1
operator|+
literal|2
argument_list|,
literal|5
operator|+
literal|2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_unpacklo_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
operator|+
literal|2
argument_list|,
literal|4
operator|+
literal|2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_unpackhi_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|2
operator|+
literal|1
argument_list|,
literal|10
operator|+
literal|1
argument_list|,
literal|6
argument_list|,
literal|14
argument_list|,
literal|6
operator|+
literal|1
argument_list|,
literal|14
operator|+
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_unpacklo_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|,
literal|0
operator|+
literal|1
argument_list|,
literal|8
operator|+
literal|1
argument_list|,
literal|4
argument_list|,
literal|12
argument_list|,
literal|4
operator|+
literal|1
argument_list|,
literal|12
operator|+
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Bit Test */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testz_pd
argument_list|(
name|__m128d
name|__a
argument_list|,
name|__m128d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestzpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__a
argument_list|,
operator|(
name|__v2df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testc_pd
argument_list|(
name|__m128d
name|__a
argument_list|,
name|__m128d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestcpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__a
argument_list|,
operator|(
name|__v2df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testnzc_pd
argument_list|(
name|__m128d
name|__a
argument_list|,
name|__m128d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestnzcpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__a
argument_list|,
operator|(
name|__v2df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testz_ps
argument_list|(
name|__m128
name|__a
argument_list|,
name|__m128
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestzps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__a
argument_list|,
operator|(
name|__v4sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testc_ps
argument_list|(
name|__m128
name|__a
argument_list|,
name|__m128
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestcps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__a
argument_list|,
operator|(
name|__v4sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_testnzc_ps
argument_list|(
name|__m128
name|__a
argument_list|,
name|__m128
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestnzcps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__a
argument_list|,
operator|(
name|__v4sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testz_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestzpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testc_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestcpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testnzc_pd
argument_list|(
name|__m256d
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestnzcpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testz_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestzps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testc_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestcps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testnzc_ps
argument_list|(
name|__m256
name|__a
argument_list|,
name|__m256
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_vtestnzcps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|,
operator|(
name|__v8sf
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testz_si256
argument_list|(
name|__m256i
name|__a
argument_list|,
name|__m256i
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_ptestz256
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
argument_list|,
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testc_si256
argument_list|(
name|__m256i
name|__a
argument_list|,
name|__m256i
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_ptestc256
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
argument_list|,
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_testnzc_si256
argument_list|(
name|__m256i
name|__a
argument_list|,
name|__m256i
name|__b
argument_list|)
block|{
return|return
name|__builtin_ia32_ptestnzc256
argument_list|(
operator|(
name|__v4di
operator|)
name|__a
argument_list|,
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector extract sign mask */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_movemask_pd
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
name|__builtin_ia32_movmskpd256
argument_list|(
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_movemask_ps
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
name|__builtin_ia32_movmskps256
argument_list|(
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector __zero */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_zeroall
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_ia32_vzeroall
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_zeroupper
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_ia32_vzeroupper
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/* Vector load with broadcast */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_broadcast_ss
argument_list|(
name|float
specifier|const
operator|*
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_vbroadcastss
argument_list|(
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_broadcast_sd
argument_list|(
name|double
specifier|const
operator|*
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_vbroadcastsd256
argument_list|(
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_broadcast_ss
argument_list|(
name|float
specifier|const
operator|*
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_vbroadcastss256
argument_list|(
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_broadcast_pd
argument_list|(
name|__m128d
specifier|const
operator|*
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_vbroadcastf128_pd256
argument_list|(
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_broadcast_ps
argument_list|(
name|__m128
specifier|const
operator|*
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_vbroadcastf128_ps256
argument_list|(
name|__a
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* SIMD load ops */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_load_pd
argument_list|(
name|double
specifier|const
operator|*
name|__p
argument_list|)
block|{
return|return
operator|*
operator|(
name|__m256d
operator|*
operator|)
name|__p
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_load_ps
argument_list|(
name|float
specifier|const
operator|*
name|__p
argument_list|)
block|{
return|return
operator|*
operator|(
name|__m256
operator|*
operator|)
name|__p
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu_pd
argument_list|(
name|double
specifier|const
operator|*
name|__p
argument_list|)
block|{
struct|struct
name|__loadu_pd
block|{
name|__m256d
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|may_alias
operator|)
argument_list|)
struct|;
return|return
operator|(
operator|(
expr|struct
name|__loadu_pd
operator|*
operator|)
name|__p
operator|)
operator|->
name|__v
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu_ps
argument_list|(
name|float
specifier|const
operator|*
name|__p
argument_list|)
block|{
struct|struct
name|__loadu_ps
block|{
name|__m256
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|may_alias
operator|)
argument_list|)
struct|;
return|return
operator|(
operator|(
expr|struct
name|__loadu_ps
operator|*
operator|)
name|__p
operator|)
operator|->
name|__v
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_load_si256
argument_list|(
name|__m256i
specifier|const
operator|*
name|__p
argument_list|)
block|{
return|return
operator|*
name|__p
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu_si256
argument_list|(
name|__m256i
specifier|const
operator|*
name|__p
argument_list|)
block|{
struct|struct
name|__loadu_si256
block|{
name|__m256i
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|may_alias
operator|)
argument_list|)
struct|;
return|return
operator|(
operator|(
expr|struct
name|__loadu_si256
operator|*
operator|)
name|__p
operator|)
operator|->
name|__v
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_lddqu_si256
argument_list|(
name|__m256i
specifier|const
operator|*
name|__p
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
name|__builtin_ia32_lddqu256
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|__p
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* SIMD store ops */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_store_pd
argument_list|(
name|double
operator|*
name|__p
argument_list|,
name|__m256d
name|__a
argument_list|)
block|{
operator|*
operator|(
name|__m256d
operator|*
operator|)
name|__p
operator|=
name|__a
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_store_ps
argument_list|(
name|float
operator|*
name|__p
argument_list|,
name|__m256
name|__a
argument_list|)
block|{
operator|*
operator|(
name|__m256
operator|*
operator|)
name|__p
operator|=
name|__a
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu_pd
argument_list|(
name|double
operator|*
name|__p
argument_list|,
name|__m256d
name|__a
argument_list|)
block|{
name|__builtin_ia32_storeupd256
argument_list|(
name|__p
argument_list|,
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu_ps
argument_list|(
name|float
operator|*
name|__p
argument_list|,
name|__m256
name|__a
argument_list|)
block|{
name|__builtin_ia32_storeups256
argument_list|(
name|__p
argument_list|,
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_store_si256
argument_list|(
name|__m256i
operator|*
name|__p
argument_list|,
name|__m256i
name|__a
argument_list|)
block|{
operator|*
name|__p
operator|=
name|__a
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu_si256
argument_list|(
name|__m256i
operator|*
name|__p
argument_list|,
name|__m256i
name|__a
argument_list|)
block|{
name|__builtin_ia32_storedqu256
argument_list|(
operator|(
name|char
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v32qi
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/* Conditional load ops */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_maskload_pd
argument_list|(
name|double
specifier|const
operator|*
name|__p
argument_list|,
name|__m128d
name|__m
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_maskloadpd
argument_list|(
operator|(
specifier|const
name|__v2df
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v2df
operator|)
name|__m
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_maskload_pd
argument_list|(
name|double
specifier|const
operator|*
name|__p
argument_list|,
name|__m256d
name|__m
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__builtin_ia32_maskloadpd256
argument_list|(
operator|(
specifier|const
name|__v4df
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v4df
operator|)
name|__m
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_maskload_ps
argument_list|(
name|float
specifier|const
operator|*
name|__p
argument_list|,
name|__m128
name|__m
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_maskloadps
argument_list|(
operator|(
specifier|const
name|__v4sf
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v4sf
operator|)
name|__m
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_maskload_ps
argument_list|(
name|float
specifier|const
operator|*
name|__p
argument_list|,
name|__m256
name|__m
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__builtin_ia32_maskloadps256
argument_list|(
operator|(
specifier|const
name|__v8sf
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v8sf
operator|)
name|__m
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Conditional store ops */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_maskstore_ps
argument_list|(
name|float
operator|*
name|__p
argument_list|,
name|__m256
name|__m
argument_list|,
name|__m256
name|__a
argument_list|)
block|{
name|__builtin_ia32_maskstoreps256
argument_list|(
operator|(
name|__v8sf
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v8sf
operator|)
name|__m
argument_list|,
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_maskstore_pd
argument_list|(
name|double
operator|*
name|__p
argument_list|,
name|__m128d
name|__m
argument_list|,
name|__m128d
name|__a
argument_list|)
block|{
name|__builtin_ia32_maskstorepd
argument_list|(
operator|(
name|__v2df
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v2df
operator|)
name|__m
argument_list|,
operator|(
name|__v2df
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_maskstore_pd
argument_list|(
name|double
operator|*
name|__p
argument_list|,
name|__m256d
name|__m
argument_list|,
name|__m256d
name|__a
argument_list|)
block|{
name|__builtin_ia32_maskstorepd256
argument_list|(
operator|(
name|__v4df
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v4df
operator|)
name|__m
argument_list|,
operator|(
name|__v4df
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm_maskstore_ps
argument_list|(
name|float
operator|*
name|__p
argument_list|,
name|__m128
name|__m
argument_list|,
name|__m128
name|__a
argument_list|)
block|{
name|__builtin_ia32_maskstoreps
argument_list|(
operator|(
name|__v4sf
operator|*
operator|)
name|__p
argument_list|,
operator|(
name|__v4sf
operator|)
name|__m
argument_list|,
operator|(
name|__v4sf
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/* Cacheability support ops */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_stream_si256
argument_list|(
name|__m256i
operator|*
name|__a
argument_list|,
name|__m256i
name|__b
argument_list|)
block|{
name|__builtin_ia32_movntdq256
argument_list|(
operator|(
name|__v4di
operator|*
operator|)
name|__a
argument_list|,
operator|(
name|__v4di
operator|)
name|__b
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_stream_pd
argument_list|(
name|double
operator|*
name|__a
argument_list|,
name|__m256d
name|__b
argument_list|)
block|{
name|__builtin_ia32_movntpd256
argument_list|(
name|__a
argument_list|,
operator|(
name|__v4df
operator|)
name|__b
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_stream_ps
argument_list|(
name|float
operator|*
name|__p
argument_list|,
name|__m256
name|__a
argument_list|)
block|{
name|__builtin_ia32_movntps256
argument_list|(
name|__p
argument_list|,
operator|(
name|__v8sf
operator|)
name|__a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/* Create vectors */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_pd
argument_list|(
name|double
name|__a
argument_list|,
name|double
name|__b
argument_list|,
name|double
name|__c
argument_list|,
name|double
name|__d
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
block|{
name|__d
block|,
name|__c
block|,
name|__b
block|,
name|__a
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_ps
argument_list|(
name|float
name|__a
argument_list|,
name|float
name|__b
argument_list|,
name|float
name|__c
argument_list|,
name|float
name|__d
argument_list|,
name|float
name|__e
argument_list|,
name|float
name|__f
argument_list|,
name|float
name|__g
argument_list|,
name|float
name|__h
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
block|{
name|__h
block|,
name|__g
block|,
name|__f
block|,
name|__e
block|,
name|__d
block|,
name|__c
block|,
name|__b
block|,
name|__a
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_epi32
argument_list|(
name|int
name|__i0
argument_list|,
name|int
name|__i1
argument_list|,
name|int
name|__i2
argument_list|,
name|int
name|__i3
argument_list|,
name|int
name|__i4
argument_list|,
name|int
name|__i5
argument_list|,
name|int
name|__i6
argument_list|,
name|int
name|__i7
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v8si
operator|)
block|{
name|__i7
block|,
name|__i6
block|,
name|__i5
block|,
name|__i4
block|,
name|__i3
block|,
name|__i2
block|,
name|__i1
block|,
name|__i0
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_epi16
argument_list|(
name|short
name|__w15
argument_list|,
name|short
name|__w14
argument_list|,
name|short
name|__w13
argument_list|,
name|short
name|__w12
argument_list|,
name|short
name|__w11
argument_list|,
name|short
name|__w10
argument_list|,
name|short
name|__w09
argument_list|,
name|short
name|__w08
argument_list|,
name|short
name|__w07
argument_list|,
name|short
name|__w06
argument_list|,
name|short
name|__w05
argument_list|,
name|short
name|__w04
argument_list|,
name|short
name|__w03
argument_list|,
name|short
name|__w02
argument_list|,
name|short
name|__w01
argument_list|,
name|short
name|__w00
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v16hi
operator|)
block|{
name|__w00
block|,
name|__w01
block|,
name|__w02
block|,
name|__w03
block|,
name|__w04
block|,
name|__w05
block|,
name|__w06
block|,
name|__w07
block|,
name|__w08
block|,
name|__w09
block|,
name|__w10
block|,
name|__w11
block|,
name|__w12
block|,
name|__w13
block|,
name|__w14
block|,
name|__w15
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_epi8
argument_list|(
name|char
name|__b31
argument_list|,
name|char
name|__b30
argument_list|,
name|char
name|__b29
argument_list|,
name|char
name|__b28
argument_list|,
name|char
name|__b27
argument_list|,
name|char
name|__b26
argument_list|,
name|char
name|__b25
argument_list|,
name|char
name|__b24
argument_list|,
name|char
name|__b23
argument_list|,
name|char
name|__b22
argument_list|,
name|char
name|__b21
argument_list|,
name|char
name|__b20
argument_list|,
name|char
name|__b19
argument_list|,
name|char
name|__b18
argument_list|,
name|char
name|__b17
argument_list|,
name|char
name|__b16
argument_list|,
name|char
name|__b15
argument_list|,
name|char
name|__b14
argument_list|,
name|char
name|__b13
argument_list|,
name|char
name|__b12
argument_list|,
name|char
name|__b11
argument_list|,
name|char
name|__b10
argument_list|,
name|char
name|__b09
argument_list|,
name|char
name|__b08
argument_list|,
name|char
name|__b07
argument_list|,
name|char
name|__b06
argument_list|,
name|char
name|__b05
argument_list|,
name|char
name|__b04
argument_list|,
name|char
name|__b03
argument_list|,
name|char
name|__b02
argument_list|,
name|char
name|__b01
argument_list|,
name|char
name|__b00
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v32qi
operator|)
block|{
name|__b00
block|,
name|__b01
block|,
name|__b02
block|,
name|__b03
block|,
name|__b04
block|,
name|__b05
block|,
name|__b06
block|,
name|__b07
block|,
name|__b08
block|,
name|__b09
block|,
name|__b10
block|,
name|__b11
block|,
name|__b12
block|,
name|__b13
block|,
name|__b14
block|,
name|__b15
block|,
name|__b16
block|,
name|__b17
block|,
name|__b18
block|,
name|__b19
block|,
name|__b20
block|,
name|__b21
block|,
name|__b22
block|,
name|__b23
block|,
name|__b24
block|,
name|__b25
block|,
name|__b26
block|,
name|__b27
block|,
name|__b28
block|,
name|__b29
block|,
name|__b30
block|,
name|__b31
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set_epi64x
argument_list|(
name|long
name|long
name|__a
argument_list|,
name|long
name|long
name|__b
argument_list|,
name|long
name|long
name|__c
argument_list|,
name|long
name|long
name|__d
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v4di
operator|)
block|{
name|__d
block|,
name|__c
block|,
name|__b
block|,
name|__a
block|}
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Create vectors with elements in reverse order */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_pd
argument_list|(
name|double
name|__a
argument_list|,
name|double
name|__b
argument_list|,
name|double
name|__c
argument_list|,
name|double
name|__d
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
block|{
name|__a
block|,
name|__b
block|,
name|__c
block|,
name|__d
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_ps
argument_list|(
name|float
name|__a
argument_list|,
name|float
name|__b
argument_list|,
name|float
name|__c
argument_list|,
name|float
name|__d
argument_list|,
name|float
name|__e
argument_list|,
name|float
name|__f
argument_list|,
name|float
name|__g
argument_list|,
name|float
name|__h
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
block|{
name|__a
block|,
name|__b
block|,
name|__c
block|,
name|__d
block|,
name|__e
block|,
name|__f
block|,
name|__g
block|,
name|__h
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_epi32
argument_list|(
name|int
name|__i0
argument_list|,
name|int
name|__i1
argument_list|,
name|int
name|__i2
argument_list|,
name|int
name|__i3
argument_list|,
name|int
name|__i4
argument_list|,
name|int
name|__i5
argument_list|,
name|int
name|__i6
argument_list|,
name|int
name|__i7
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v8si
operator|)
block|{
name|__i0
block|,
name|__i1
block|,
name|__i2
block|,
name|__i3
block|,
name|__i4
block|,
name|__i5
block|,
name|__i6
block|,
name|__i7
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_epi16
argument_list|(
name|short
name|__w15
argument_list|,
name|short
name|__w14
argument_list|,
name|short
name|__w13
argument_list|,
name|short
name|__w12
argument_list|,
name|short
name|__w11
argument_list|,
name|short
name|__w10
argument_list|,
name|short
name|__w09
argument_list|,
name|short
name|__w08
argument_list|,
name|short
name|__w07
argument_list|,
name|short
name|__w06
argument_list|,
name|short
name|__w05
argument_list|,
name|short
name|__w04
argument_list|,
name|short
name|__w03
argument_list|,
name|short
name|__w02
argument_list|,
name|short
name|__w01
argument_list|,
name|short
name|__w00
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v16hi
operator|)
block|{
name|__w15
block|,
name|__w14
block|,
name|__w13
block|,
name|__w12
block|,
name|__w11
block|,
name|__w10
block|,
name|__w09
block|,
name|__w08
block|,
name|__w07
block|,
name|__w06
block|,
name|__w05
block|,
name|__w04
block|,
name|__w03
block|,
name|__w02
block|,
name|__w01
block|,
name|__w00
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_epi8
argument_list|(
name|char
name|__b31
argument_list|,
name|char
name|__b30
argument_list|,
name|char
name|__b29
argument_list|,
name|char
name|__b28
argument_list|,
name|char
name|__b27
argument_list|,
name|char
name|__b26
argument_list|,
name|char
name|__b25
argument_list|,
name|char
name|__b24
argument_list|,
name|char
name|__b23
argument_list|,
name|char
name|__b22
argument_list|,
name|char
name|__b21
argument_list|,
name|char
name|__b20
argument_list|,
name|char
name|__b19
argument_list|,
name|char
name|__b18
argument_list|,
name|char
name|__b17
argument_list|,
name|char
name|__b16
argument_list|,
name|char
name|__b15
argument_list|,
name|char
name|__b14
argument_list|,
name|char
name|__b13
argument_list|,
name|char
name|__b12
argument_list|,
name|char
name|__b11
argument_list|,
name|char
name|__b10
argument_list|,
name|char
name|__b09
argument_list|,
name|char
name|__b08
argument_list|,
name|char
name|__b07
argument_list|,
name|char
name|__b06
argument_list|,
name|char
name|__b05
argument_list|,
name|char
name|__b04
argument_list|,
name|char
name|__b03
argument_list|,
name|char
name|__b02
argument_list|,
name|char
name|__b01
argument_list|,
name|char
name|__b00
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v32qi
operator|)
block|{
name|__b31
block|,
name|__b30
block|,
name|__b29
block|,
name|__b28
block|,
name|__b27
block|,
name|__b26
block|,
name|__b25
block|,
name|__b24
block|,
name|__b23
block|,
name|__b22
block|,
name|__b21
block|,
name|__b20
block|,
name|__b19
block|,
name|__b18
block|,
name|__b17
block|,
name|__b16
block|,
name|__b15
block|,
name|__b14
block|,
name|__b13
block|,
name|__b12
block|,
name|__b11
block|,
name|__b10
block|,
name|__b09
block|,
name|__b08
block|,
name|__b07
block|,
name|__b06
block|,
name|__b05
block|,
name|__b04
block|,
name|__b03
block|,
name|__b02
block|,
name|__b01
block|,
name|__b00
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setr_epi64x
argument_list|(
name|long
name|long
name|__a
argument_list|,
name|long
name|long
name|__b
argument_list|,
name|long
name|long
name|__c
argument_list|,
name|long
name|long
name|__d
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v4di
operator|)
block|{
name|__a
block|,
name|__b
block|,
name|__c
block|,
name|__d
block|}
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Create vectors with repeated elements */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_pd
argument_list|(
name|double
name|__w
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
block|{
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_ps
argument_list|(
name|float
name|__w
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
block|{
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_epi32
argument_list|(
name|int
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v8si
operator|)
block|{
name|__i
block|,
name|__i
block|,
name|__i
block|,
name|__i
block|,
name|__i
block|,
name|__i
block|,
name|__i
block|,
name|__i
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_epi16
argument_list|(
name|short
name|__w
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v16hi
operator|)
block|{
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|,
name|__w
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_epi8
argument_list|(
name|char
name|__b
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v32qi
operator|)
block|{
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|,
name|__b
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_set1_epi64x
argument_list|(
name|long
name|long
name|__q
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
operator|(
name|__v4di
operator|)
block|{
name|__q
block|,
name|__q
block|,
name|__q
block|,
name|__q
block|}
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Create __zeroed vectors */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setzero_pd
argument_list|(
name|void
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setzero_ps
argument_list|(
name|void
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_setzero_si256
argument_list|(
name|void
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
block|{
literal|0LL
block|,
literal|0LL
block|,
literal|0LL
block|,
literal|0LL
block|}
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Cast between vector types */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castpd_ps
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castpd_si256
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castps_pd
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castps_si256
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256i
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castsi256_ps
argument_list|(
name|__m256i
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castsi256_pd
argument_list|(
name|__m256i
name|__a
argument_list|)
block|{
return|return
operator|(
name|__m256d
operator|)
name|__a
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castpd256_pd128
argument_list|(
name|__m256d
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castps256_ps128
argument_list|(
name|__m256
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castsi256_si128
argument_list|(
name|__m256i
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castpd128_pd256
argument_list|(
name|__m128d
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castps128_ps256
argument_list|(
name|__m128
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_castsi128_si256
argument_list|(
name|__m128i
name|__a
argument_list|)
block|{
return|return
name|__builtin_shufflevector
argument_list|(
name|__a
argument_list|,
name|__a
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* SIMD load ops (unaligned) */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m256
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu2_m128
argument_list|(
name|float
specifier|const
operator|*
name|__addr_hi
argument_list|,
name|float
specifier|const
operator|*
name|__addr_lo
argument_list|)
block|{
struct|struct
name|__loadu_ps
block|{
name|__m128
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|,
name|__may_alias__
operator|)
argument_list|)
struct|;
name|__m256
name|__v256
init|=
name|_mm256_castps128_ps256
argument_list|(
operator|(
operator|(
expr|struct
name|__loadu_ps
operator|*
operator|)
name|__addr_lo
operator|)
operator|->
name|__v
argument_list|)
decl_stmt|;
return|return
name|_mm256_insertf128_ps
argument_list|(
name|__v256
argument_list|,
operator|(
operator|(
expr|struct
name|__loadu_ps
operator|*
operator|)
name|__addr_hi
operator|)
operator|->
name|__v
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu2_m128d
argument_list|(
name|double
specifier|const
operator|*
name|__addr_hi
argument_list|,
name|double
specifier|const
operator|*
name|__addr_lo
argument_list|)
block|{
struct|struct
name|__loadu_pd
block|{
name|__m128d
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|__packed__
operator|,
name|__may_alias__
operator|)
argument_list|)
struct|;
name|__m256d
name|__v256
init|=
name|_mm256_castpd128_pd256
argument_list|(
operator|(
operator|(
expr|struct
name|__loadu_pd
operator|*
operator|)
name|__addr_lo
operator|)
operator|->
name|__v
argument_list|)
decl_stmt|;
return|return
name|_mm256_insertf128_pd
argument_list|(
name|__v256
argument_list|,
operator|(
operator|(
expr|struct
name|__loadu_pd
operator|*
operator|)
name|__addr_hi
operator|)
operator|->
name|__v
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m256i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_loadu2_m128i
argument_list|(
name|__m128i
specifier|const
operator|*
name|__addr_hi
argument_list|,
name|__m128i
specifier|const
operator|*
name|__addr_lo
argument_list|)
block|{
struct|struct
name|__loadu_si128
block|{
name|__m128i
name|__v
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|may_alias
operator|)
argument_list|)
struct|;
name|__m256i
name|__v256
init|=
name|_mm256_castsi128_si256
argument_list|(
operator|(
operator|(
expr|struct
name|__loadu_si128
operator|*
operator|)
name|__addr_lo
operator|)
operator|->
name|__v
argument_list|)
decl_stmt|;
return|return
name|_mm256_insertf128_si256
argument_list|(
name|__v256
argument_list|,
operator|(
operator|(
expr|struct
name|__loadu_si128
operator|*
operator|)
name|__addr_hi
operator|)
operator|->
name|__v
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* SIMD store ops (unaligned) */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu2_m128
argument_list|(
name|float
operator|*
name|__addr_hi
argument_list|,
name|float
operator|*
name|__addr_lo
argument_list|,
name|__m256
name|__a
argument_list|)
block|{
name|__m128
name|__v128
decl_stmt|;
name|__v128
operator|=
name|_mm256_castps256_ps128
argument_list|(
name|__a
argument_list|)
expr_stmt|;
name|__builtin_ia32_storeups
argument_list|(
name|__addr_lo
argument_list|,
name|__v128
argument_list|)
expr_stmt|;
name|__v128
operator|=
name|_mm256_extractf128_ps
argument_list|(
name|__a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|__builtin_ia32_storeups
argument_list|(
name|__addr_hi
argument_list|,
name|__v128
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu2_m128d
argument_list|(
name|double
operator|*
name|__addr_hi
argument_list|,
name|double
operator|*
name|__addr_lo
argument_list|,
name|__m256d
name|__a
argument_list|)
block|{
name|__m128d
name|__v128
decl_stmt|;
name|__v128
operator|=
name|_mm256_castpd256_pd128
argument_list|(
name|__a
argument_list|)
expr_stmt|;
name|__builtin_ia32_storeupd
argument_list|(
name|__addr_lo
argument_list|,
name|__v128
argument_list|)
expr_stmt|;
name|__v128
operator|=
name|_mm256_extractf128_pd
argument_list|(
name|__a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|__builtin_ia32_storeupd
argument_list|(
name|__addr_hi
argument_list|,
name|__v128
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_mm256_storeu2_m128i
argument_list|(
name|__m128i
operator|*
name|__addr_hi
argument_list|,
name|__m128i
operator|*
name|__addr_lo
argument_list|,
name|__m256i
name|__a
argument_list|)
block|{
name|__m128i
name|__v128
decl_stmt|;
name|__v128
operator|=
name|_mm256_castsi256_si128
argument_list|(
name|__a
argument_list|)
expr_stmt|;
name|__builtin_ia32_storedqu
argument_list|(
operator|(
name|char
operator|*
operator|)
name|__addr_lo
argument_list|,
operator|(
name|__v16qi
operator|)
name|__v128
argument_list|)
expr_stmt|;
name|__v128
operator|=
name|_mm256_extractf128_si256
argument_list|(
name|__a
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|__builtin_ia32_storedqu
argument_list|(
operator|(
name|char
operator|*
operator|)
name|__addr_hi
argument_list|,
operator|(
name|__v16qi
operator|)
name|__v128
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __AVXINTRIN_H */
end_comment

end_unit

