begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RewriteRope.h - Rope specialized for rewriter ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the RewriteRope class, which is a powerful string class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_REWRITEROPE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_REWRITEROPE_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|//===--------------------------------------------------------------------===//
comment|// RopeRefCountString Class
comment|//===--------------------------------------------------------------------===//
comment|/// RopeRefCountString - This struct is allocated with 'new char[]' from the
comment|/// heap, and represents a reference counted chunk of string data.  When its
comment|/// ref count drops to zero, it is delete[]'d.  This is primarily managed
comment|/// through the RopePiece class below.
struct|struct
name|RopeRefCountString
block|{
name|unsigned
name|RefCount
decl_stmt|;
name|char
name|Data
index|[
literal|1
index|]
decl_stmt|;
comment|//  Variable sized.
name|void
name|addRef
parameter_list|()
block|{
operator|++
name|RefCount
expr_stmt|;
block|}
name|void
name|dropRef
parameter_list|()
block|{
if|if
condition|(
operator|--
name|RefCount
operator|==
literal|0
condition|)
name|delete
index|[]
operator|(
name|char
operator|*
operator|)
name|this
expr_stmt|;
block|}
block|}
struct|;
comment|//===--------------------------------------------------------------------===//
comment|// RopePiece Class
comment|//===--------------------------------------------------------------------===//
comment|/// RopePiece - This class represents a view into a RopeRefCountString object.
comment|/// This allows references to string data to be efficiently chopped up and
comment|/// moved around without having to push around the string data itself.
comment|///
comment|/// For example, we could have a 1M RopePiece and want to insert something
comment|/// into the middle of it.  To do this, we split it into two RopePiece objects
comment|/// that both refer to the same underlying RopeRefCountString (just with
comment|/// different offsets) which is a nice constant time operation.
struct|struct
name|RopePiece
block|{
name|RopeRefCountString
modifier|*
name|StrData
decl_stmt|;
name|unsigned
name|StartOffs
decl_stmt|;
name|unsigned
name|EndOffs
decl_stmt|;
name|RopePiece
argument_list|()
operator|:
name|StrData
argument_list|(
literal|0
argument_list|)
operator|,
name|StartOffs
argument_list|(
literal|0
argument_list|)
operator|,
name|EndOffs
argument_list|(
literal|0
argument_list|)
block|{}
name|RopePiece
argument_list|(
argument|RopeRefCountString *Str
argument_list|,
argument|unsigned Start
argument_list|,
argument|unsigned End
argument_list|)
operator|:
name|StrData
argument_list|(
name|Str
argument_list|)
operator|,
name|StartOffs
argument_list|(
name|Start
argument_list|)
operator|,
name|EndOffs
argument_list|(
argument|End
argument_list|)
block|{
if|if
condition|(
name|StrData
condition|)
name|StrData
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
name|RopePiece
argument_list|(
specifier|const
name|RopePiece
operator|&
name|RP
argument_list|)
operator|:
name|StrData
argument_list|(
name|RP
operator|.
name|StrData
argument_list|)
operator|,
name|StartOffs
argument_list|(
name|RP
operator|.
name|StartOffs
argument_list|)
operator|,
name|EndOffs
argument_list|(
argument|RP.EndOffs
argument_list|)
block|{
if|if
condition|(
name|StrData
condition|)
name|StrData
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
operator|~
name|RopePiece
argument_list|()
block|{
if|if
condition|(
name|StrData
condition|)
name|StrData
operator|->
name|dropRef
argument_list|()
expr_stmt|;
block|}
name|void
name|operator
init|=
operator|(
specifier|const
name|RopePiece
operator|&
name|RHS
operator|)
block|{
if|if
condition|(
name|StrData
operator|!=
name|RHS
operator|.
name|StrData
condition|)
block|{
if|if
condition|(
name|StrData
condition|)
name|StrData
operator|->
name|dropRef
argument_list|()
expr_stmt|;
name|StrData
operator|=
name|RHS
operator|.
name|StrData
expr_stmt|;
if|if
condition|(
name|StrData
condition|)
name|StrData
operator|->
name|addRef
argument_list|()
expr_stmt|;
block|}
name|StartOffs
operator|=
name|RHS
operator|.
name|StartOffs
expr_stmt|;
name|EndOffs
operator|=
name|RHS
operator|.
name|EndOffs
decl_stmt|;
block|}
decl|const
name|char
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|Offset
argument_list|)
decl|const
block|{
return|return
name|StrData
operator|->
name|Data
index|[
name|Offset
operator|+
name|StartOffs
index|]
return|;
block|}
name|char
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|Offset
argument_list|)
block|{
return|return
name|StrData
operator|->
name|Data
index|[
name|Offset
operator|+
name|StartOffs
index|]
return|;
block|}
name|unsigned
name|size
argument_list|()
decl|const
block|{
return|return
name|EndOffs
operator|-
name|StartOffs
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// RopePieceBTreeIterator Class
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// RopePieceBTreeIterator - This class provides read-only forward iteration
end_comment

begin_comment
comment|/// over bytes that are in a RopePieceBTree.  This first iterates over bytes
end_comment

begin_comment
comment|/// in a RopePiece, then iterates over RopePiece's in a RopePieceBTreeLeaf,
end_comment

begin_comment
comment|/// then iterates over RopePieceBTreeLeaf's in a RopePieceBTree.
end_comment

begin_decl_stmt
name|class
name|RopePieceBTreeIterator
range|:
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
decl_stmt|, const
name|char
decl_stmt|,
name|ptrdiff_t
decl|>
block|{
comment|/// CurNode - The current B+Tree node that we are inspecting.
specifier|const
name|void
comment|/*RopePieceBTreeLeaf*/
modifier|*
name|CurNode
decl_stmt|;
comment|/// CurPiece - The current RopePiece in the B+Tree node that we're
comment|/// inspecting.
specifier|const
name|RopePiece
modifier|*
name|CurPiece
decl_stmt|;
comment|/// CurChar - The current byte in the RopePiece we are pointing to.
name|unsigned
name|CurChar
decl_stmt|;
name|public
label|:
comment|// begin iterator.
name|RopePieceBTreeIterator
argument_list|(
specifier|const
name|void
comment|/*RopePieceBTreeNode*/
operator|*
name|N
argument_list|)
expr_stmt|;
comment|// end iterator
name|RopePieceBTreeIterator
argument_list|()
operator|:
name|CurNode
argument_list|(
literal|0
argument_list|)
operator|,
name|CurPiece
argument_list|(
literal|0
argument_list|)
operator|,
name|CurChar
argument_list|(
literal|0
argument_list|)
block|{}
name|char
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|*
name|CurPiece
operator|)
index|[
name|CurChar
index|]
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|RopePieceBTreeIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|CurPiece
operator|==
name|RHS
operator|.
name|CurPiece
operator|&&
name|CurChar
operator|==
name|RHS
operator|.
name|CurChar
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|RopePieceBTreeIterator
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
name|operator
operator|==
operator|(
name|RHS
operator|)
return|;
block|}
name|RopePieceBTreeIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Preincrement
if|if
condition|(
name|CurChar
operator|+
literal|1
operator|<
name|CurPiece
operator|->
name|size
argument_list|()
condition|)
operator|++
name|CurChar
expr_stmt|;
else|else
name|MoveToNextPiece
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|RopePieceBTreeIterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
comment|// Postincrement
name|RopePieceBTreeIterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|MoveToNextPiece
parameter_list|()
function_decl|;
end_function_decl

begin_comment
unit|};
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// RopePieceBTree Class
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|RopePieceBTree
block|{
name|void
comment|/*RopePieceBTreeNode*/
modifier|*
name|Root
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|RopePieceBTree
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
decl_stmt|;
name|public
label|:
name|RopePieceBTree
argument_list|()
expr_stmt|;
name|RopePieceBTree
argument_list|(
specifier|const
name|RopePieceBTree
operator|&
name|RHS
argument_list|)
expr_stmt|;
operator|~
name|RopePieceBTree
argument_list|()
expr_stmt|;
typedef|typedef
name|RopePieceBTreeIterator
name|iterator
typedef|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|Root
argument_list|)
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|empty
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|insert
parameter_list|(
name|unsigned
name|Offset
parameter_list|,
specifier|const
name|RopePiece
modifier|&
name|R
parameter_list|)
function_decl|;
name|void
name|erase
parameter_list|(
name|unsigned
name|Offset
parameter_list|,
name|unsigned
name|NumBytes
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// RewriteRope Class
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// RewriteRope - A powerful string class.  This class supports extremely
end_comment

begin_comment
comment|/// efficient insertions and deletions into the middle of it, even for
end_comment

begin_comment
comment|/// ridiculously long strings.
end_comment

begin_decl_stmt
name|class
name|RewriteRope
block|{
name|RopePieceBTree
name|Chunks
decl_stmt|;
comment|/// We allocate space for string data out of a buffer of size AllocChunkSize.
comment|/// This keeps track of how much space is left.
name|RopeRefCountString
modifier|*
name|AllocBuffer
decl_stmt|;
name|unsigned
name|AllocOffs
decl_stmt|;
enum|enum
block|{
name|AllocChunkSize
init|=
literal|4080
block|}
enum|;
name|public
label|:
name|RewriteRope
argument_list|()
operator|:
name|AllocBuffer
argument_list|(
literal|0
argument_list|)
operator|,
name|AllocOffs
argument_list|(
argument|AllocChunkSize
argument_list|)
block|{}
name|RewriteRope
argument_list|(
specifier|const
name|RewriteRope
operator|&
name|RHS
argument_list|)
operator|:
name|Chunks
argument_list|(
name|RHS
operator|.
name|Chunks
argument_list|)
operator|,
name|AllocBuffer
argument_list|(
literal|0
argument_list|)
operator|,
name|AllocOffs
argument_list|(
argument|AllocChunkSize
argument_list|)
block|{   }
operator|~
name|RewriteRope
argument_list|()
block|{
comment|// If we had an allocation buffer, drop our reference to it.
if|if
condition|(
name|AllocBuffer
condition|)
name|AllocBuffer
operator|->
name|dropRef
argument_list|()
expr_stmt|;
block|}
typedef|typedef
name|RopePieceBTree
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|RopePieceBTree
operator|::
name|iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Chunks
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Chunks
operator|.
name|end
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Chunks
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Chunks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|assign
parameter_list|(
specifier|const
name|char
modifier|*
name|Start
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|Start
operator|!=
name|End
condition|)
name|Chunks
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|MakeRopeString
argument_list|(
name|Start
argument_list|,
name|End
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|insert
parameter_list|(
name|unsigned
name|Offset
parameter_list|,
specifier|const
name|char
modifier|*
name|Start
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|)
block|{
name|assert
argument_list|(
name|Offset
operator|<=
name|size
argument_list|()
operator|&&
literal|"Invalid position to insert!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Start
operator|==
name|End
condition|)
return|return;
name|Chunks
operator|.
name|insert
argument_list|(
name|Offset
argument_list|,
name|MakeRopeString
argument_list|(
name|Start
argument_list|,
name|End
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|erase
parameter_list|(
name|unsigned
name|Offset
parameter_list|,
name|unsigned
name|NumBytes
parameter_list|)
block|{
name|assert
argument_list|(
name|Offset
operator|+
name|NumBytes
operator|<=
name|size
argument_list|()
operator|&&
literal|"Invalid region to erase!"
argument_list|)
expr_stmt|;
if|if
condition|(
name|NumBytes
operator|==
literal|0
condition|)
return|return;
name|Chunks
operator|.
name|erase
argument_list|(
name|Offset
argument_list|,
name|NumBytes
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|RopePiece
name|MakeRopeString
parameter_list|(
specifier|const
name|char
modifier|*
name|Start
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

