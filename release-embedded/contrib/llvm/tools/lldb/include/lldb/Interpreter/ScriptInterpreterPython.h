begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ScriptInterpreterPython.h -------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ScriptInterpreterPython_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ScriptInterpreterPython_h_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|LLDB_DISABLE_PYTHON
end_ifdef

begin_comment
comment|// Python is disabled in this build
end_comment

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|"lldb/lldb-python.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/ScriptInterpreter.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/InputReader.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Terminal.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ScriptInterpreterPython
range|:
name|public
name|ScriptInterpreter
block|{
name|public
operator|:
name|ScriptInterpreterPython
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
block|;
operator|~
name|ScriptInterpreterPython
argument_list|()
block|;
name|bool
name|ExecuteOneLine
argument_list|(
specifier|const
name|char
operator|*
name|command
argument_list|,
name|CommandReturnObject
operator|*
name|result
argument_list|,
specifier|const
name|ExecuteScriptOptions
operator|&
name|options
operator|=
name|ExecuteScriptOptions
argument_list|()
argument_list|)
block|;
name|void
name|ExecuteInterpreterLoop
argument_list|()
block|;
name|bool
name|ExecuteOneLineWithReturn
argument_list|(
argument|const char *in_string
argument_list|,
argument|ScriptInterpreter::ScriptReturnType return_type
argument_list|,
argument|void *ret_value
argument_list|,
argument|const ExecuteScriptOptions&options = ExecuteScriptOptions()
argument_list|)
block|;
name|bool
name|ExecuteMultipleLines
argument_list|(
specifier|const
name|char
operator|*
name|in_string
argument_list|,
specifier|const
name|ExecuteScriptOptions
operator|&
name|options
operator|=
name|ExecuteScriptOptions
argument_list|()
argument_list|)
block|;
name|bool
name|ExportFunctionDefinitionToInterpreter
argument_list|(
name|StringList
operator|&
name|function_def
argument_list|)
block|;
name|bool
name|GenerateTypeScriptFunction
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|;
name|bool
name|GenerateTypeSynthClass
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|;
name|bool
name|GenerateTypeSynthClass
argument_list|(
specifier|const
name|char
operator|*
name|oneliner
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|;
comment|// use this if the function code is just a one-liner script
name|bool
name|GenerateTypeScriptFunction
argument_list|(
specifier|const
name|char
operator|*
name|oneliner
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|;
name|virtual
name|bool
name|GenerateScriptAliasFunction
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|;
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|CreateSyntheticScriptedProvider
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ValueObjectSP valobj
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_CreatePluginObject
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ProcessSP process_sp
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_RegisterInfo
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_ThreadsInfo
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_RegisterContextData
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t thread_id
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_CreateThread
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t tid
argument_list|,
argument|lldb::addr_t context
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|LoadPluginModule
argument_list|(
specifier|const
name|FileSpec
operator|&
name|file_spec
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|GetDynamicSettings
argument_list|(
argument|lldb::ScriptInterpreterObjectSP plugin_module_sp
argument_list|,
argument|Target* target
argument_list|,
argument|const char* setting_name
argument_list|,
argument|lldb_private::Error& error
argument_list|)
block|;
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|const lldb::ScriptInterpreterObjectSP& implementor
argument_list|,
argument|uint32_t idx
argument_list|)
block|;
name|virtual
name|int
name|GetIndexOfChildWithName
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|child_name
argument_list|)
block|;
name|virtual
name|bool
name|UpdateSynthProviderInstance
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|;
name|virtual
name|bool
name|MightHaveChildrenSynthProviderInstance
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|;
name|virtual
name|bool
name|RunScriptBasedCommand
argument_list|(
argument|const char* impl_function
argument_list|,
argument|const char* args
argument_list|,
argument|ScriptedCommandSynchronicity synchronicity
argument_list|,
argument|lldb_private::CommandReturnObject& cmd_retobj
argument_list|,
argument|Error& error
argument_list|)
block|;
name|bool
name|GenerateFunction
argument_list|(
specifier|const
name|char
operator|*
name|signature
argument_list|,
specifier|const
name|StringList
operator|&
name|input
argument_list|)
block|;
name|bool
name|GenerateBreakpointCommandCallbackData
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|;
name|bool
name|GenerateWatchpointCommandCallbackData
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|;
specifier|static
name|size_t
name|GenerateBreakpointOptionsCommandCallback
argument_list|(
argument|void *baton
argument_list|,
argument|InputReader&reader
argument_list|,
argument|lldb::InputReaderAction notification
argument_list|,
argument|const char *bytes
argument_list|,
argument|size_t bytes_len
argument_list|)
block|;
specifier|static
name|size_t
name|GenerateWatchpointOptionsCommandCallback
argument_list|(
argument|void *baton
argument_list|,
argument|InputReader&reader
argument_list|,
argument|lldb::InputReaderAction notification
argument_list|,
argument|const char *bytes
argument_list|,
argument|size_t bytes_len
argument_list|)
block|;
specifier|static
name|bool
name|BreakpointCallbackFunction
argument_list|(
argument|void *baton
argument_list|,
argument|StoppointCallbackContext *context
argument_list|,
argument|lldb::user_id_t break_id
argument_list|,
argument|lldb::user_id_t break_loc_id
argument_list|)
block|;
specifier|static
name|bool
name|WatchpointCallbackFunction
argument_list|(
argument|void *baton
argument_list|,
argument|StoppointCallbackContext *context
argument_list|,
argument|lldb::user_id_t watch_id
argument_list|)
block|;
name|virtual
name|bool
name|GetScriptedSummary
argument_list|(
argument|const char *function_name
argument_list|,
argument|lldb::ValueObjectSP valobj
argument_list|,
argument|lldb::ScriptInterpreterObjectSP& callee_wrapper_sp
argument_list|,
argument|std::string& retval
argument_list|)
block|;
name|virtual
name|bool
name|GetDocumentationForItem
argument_list|(
specifier|const
name|char
operator|*
name|item
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|;
name|virtual
name|bool
name|CheckObjectExists
argument_list|(
argument|const char* name
argument_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|||
operator|!
name|name
index|[
literal|0
index|]
condition|)
return|return
name|false
return|;
name|std
operator|::
name|string
name|temp
block|;
return|return
name|GetDocumentationForItem
argument_list|(
name|name
argument_list|,
name|temp
argument_list|)
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Process
operator|*
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Thread
operator|*
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Target
operator|*
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|StackFrame
operator|*
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|LoadScriptingModule
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
name|bool
name|can_reload
argument_list|,
name|bool
name|init_session
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|*
name|module_sp
operator|=
name|nullptr
argument_list|)
decl_stmt|;
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|MakeScriptObject
argument_list|(
name|void
operator|*
name|object
argument_list|)
expr_stmt|;
name|virtual
name|std
operator|::
name|unique_ptr
operator|<
name|ScriptInterpreterLocker
operator|>
name|AcquireInterpreterLock
argument_list|()
expr_stmt|;
name|void
name|CollectDataForBreakpointCommandCallback
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
name|CommandReturnObject
modifier|&
name|result
parameter_list|)
function_decl|;
name|void
name|CollectDataForWatchpointCommandCallback
parameter_list|(
name|WatchpointOptions
modifier|*
name|wp_options
parameter_list|,
name|CommandReturnObject
modifier|&
name|result
parameter_list|)
function_decl|;
comment|/// Set a Python one-liner as the callback for the breakpoint.
name|void
name|SetBreakpointCommandCallback
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|oneliner
parameter_list|)
function_decl|;
comment|/// Set a one-liner as the callback for the watchpoint.
name|void
name|SetWatchpointCommandCallback
parameter_list|(
name|WatchpointOptions
modifier|*
name|wp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|oneliner
parameter_list|)
function_decl|;
name|StringList
name|ReadCommandInputFromUser
parameter_list|(
name|FILE
modifier|*
name|in_file
parameter_list|)
function_decl|;
name|virtual
name|void
name|ResetOutputFileHandle
parameter_list|(
name|FILE
modifier|*
name|new_fh
parameter_list|)
function_decl|;
specifier|static
name|lldb
operator|::
name|thread_result_t
name|RunEmbeddedPythonInterpreter
argument_list|(
argument|lldb::thread_arg_t baton
argument_list|)
expr_stmt|;
specifier|static
name|void
name|InitializePrivate
parameter_list|()
function_decl|;
specifier|static
name|void
name|InitializeInterpreter
parameter_list|(
name|SWIGInitCallback
name|python_swig_init_callback
parameter_list|,
name|SWIGBreakpointCallbackFunction
name|swig_breakpoint_callback
parameter_list|,
name|SWIGWatchpointCallbackFunction
name|swig_watchpoint_callback
parameter_list|,
name|SWIGPythonTypeScriptCallbackFunction
name|swig_typescript_callback
parameter_list|,
name|SWIGPythonCreateSyntheticProvider
name|swig_synthetic_script
parameter_list|,
name|SWIGPythonCalculateNumChildren
name|swig_calc_children
parameter_list|,
name|SWIGPythonGetChildAtIndex
name|swig_get_child_index
parameter_list|,
name|SWIGPythonGetIndexOfChildWithName
name|swig_get_index_child
parameter_list|,
name|SWIGPythonCastPyObjectToSBValue
name|swig_cast_to_sbvalue
parameter_list|,
name|SWIGPythonGetValueObjectSPFromSBValue
name|swig_get_valobj_sp_from_sbvalue
parameter_list|,
name|SWIGPythonUpdateSynthProviderInstance
name|swig_update_provider
parameter_list|,
name|SWIGPythonMightHaveChildrenSynthProviderInstance
name|swig_mighthavechildren_provider
parameter_list|,
name|SWIGPythonCallCommand
name|swig_call_command
parameter_list|,
name|SWIGPythonCallModuleInit
name|swig_call_module_init
parameter_list|,
name|SWIGPythonCreateOSPlugin
name|swig_create_os_plugin
parameter_list|,
name|SWIGPythonScriptKeyword_Process
name|swig_run_script_keyword_process
parameter_list|,
name|SWIGPythonScriptKeyword_Thread
name|swig_run_script_keyword_thread
parameter_list|,
name|SWIGPythonScriptKeyword_Target
name|swig_run_script_keyword_target
parameter_list|,
name|SWIGPythonScriptKeyword_Frame
name|swig_run_script_keyword_frame
parameter_list|,
name|SWIGPython_GetDynamicSetting
name|swig_plugin_get
parameter_list|)
function_decl|;
name|protected
label|:
name|bool
name|EnterSession
parameter_list|(
name|bool
name|init_lldb_globals
parameter_list|)
function_decl|;
name|void
name|LeaveSession
parameter_list|()
function_decl|;
name|void
name|SaveTerminalState
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
name|void
name|RestoreTerminalState
parameter_list|()
function_decl|;
name|private
label|:
name|class
name|SynchronicityHandler
block|{
name|private
label|:
name|lldb
operator|::
name|DebuggerSP
name|m_debugger_sp
expr_stmt|;
name|ScriptedCommandSynchronicity
name|m_synch_wanted
decl_stmt|;
name|bool
name|m_old_asynch
decl_stmt|;
name|public
label|:
name|SynchronicityHandler
argument_list|(
name|lldb
operator|::
name|DebuggerSP
argument_list|,
name|ScriptedCommandSynchronicity
argument_list|)
expr_stmt|;
operator|~
name|SynchronicityHandler
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
name|class
name|ScriptInterpreterPythonObject
range|:
name|public
name|ScriptInterpreterObject
block|{
name|public
operator|:
name|ScriptInterpreterPythonObject
argument_list|()
operator|:
name|ScriptInterpreterObject
argument_list|()
block|{}
name|ScriptInterpreterPythonObject
argument_list|(
name|void
operator|*
name|obj
argument_list|)
operator|:
name|ScriptInterpreterObject
argument_list|(
argument|obj
argument_list|)
block|{
name|Py_XINCREF
argument_list|(
name|m_object
argument_list|)
block|;         }
name|explicit
name|operator
name|bool
argument_list|()
block|{
return|return
name|m_object
operator|&&
name|m_object
operator|!=
name|Py_None
return|;
block|}
name|virtual
operator|~
name|ScriptInterpreterPythonObject
argument_list|()
block|{
name|Py_XDECREF
argument_list|(
name|m_object
argument_list|)
block|;
name|m_object
operator|=
name|NULL
block|;         }
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ScriptInterpreterPythonObject
argument_list|)
block|;     }
decl_stmt|;
name|class
name|Locker
range|:
name|public
name|ScriptInterpreterLocker
block|{
name|public
operator|:
expr|enum
name|OnEntry
block|{
name|AcquireLock
operator|=
literal|0x0001
block|,
name|InitSession
operator|=
literal|0x0002
block|,
name|InitGlobals
operator|=
literal|0x0004
block|}
block|;                  enum
name|OnLeave
block|{
name|FreeLock
operator|=
literal|0x0001
block|,
name|FreeAcquiredLock
operator|=
literal|0x0002
block|,
comment|// do not free the lock if we already held it when calling constructor
name|TearDownSession
operator|=
literal|0x0004
block|}
block|;
name|Locker
argument_list|(
argument|ScriptInterpreterPython *py_interpreter = NULL
argument_list|,
argument|uint16_t on_entry = AcquireLock | InitSession
argument_list|,
argument|uint16_t on_leave = FreeLock | TearDownSession
argument_list|,
argument|FILE* wait_msg_handle = NULL
argument_list|)
block|;
operator|~
name|Locker
argument_list|()
block|;
name|private
operator|:
name|bool
name|DoAcquireLock
argument_list|()
block|;
name|bool
name|DoInitSession
argument_list|(
argument|bool init_lldb_globals
argument_list|)
block|;
name|bool
name|DoFreeLock
argument_list|()
block|;
name|bool
name|DoTearDownSession
argument_list|()
block|;
specifier|static
name|void
name|ReleasePythonLock
argument_list|()
block|;
name|bool
name|m_teardown_session
block|;
name|ScriptInterpreterPython
operator|*
name|m_python_interpreter
block|;
name|FILE
operator|*
name|m_tmp_fh
block|;
name|PyGILState_STATE
name|m_GILState
block|; 	}
decl_stmt|;
name|class
name|PythonInputReaderManager
block|{
name|public
label|:
name|PythonInputReaderManager
argument_list|(
name|ScriptInterpreterPython
operator|*
name|interpreter
argument_list|)
expr_stmt|;
name|explicit
name|operator
name|bool
parameter_list|()
block|{
return|return
name|m_error
return|;
block|}
operator|~
name|PythonInputReaderManager
argument_list|()
expr_stmt|;
name|private
label|:
specifier|static
name|size_t
name|InputReaderCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|InputReader
operator|&
name|reader
argument_list|,
name|lldb
operator|::
name|InputReaderAction
name|notification
argument_list|,
specifier|const
name|char
operator|*
name|bytes
argument_list|,
name|size_t
name|bytes_len
argument_list|)
decl_stmt|;
specifier|static
name|lldb
operator|::
name|thread_result_t
name|RunPythonInputReader
argument_list|(
argument|lldb::thread_arg_t baton
argument_list|)
expr_stmt|;
name|ScriptInterpreterPython
modifier|*
name|m_interpreter
decl_stmt|;
name|lldb
operator|::
name|DebuggerSP
name|m_debugger_sp
expr_stmt|;
name|lldb
operator|::
name|InputReaderSP
name|m_reader_sp
expr_stmt|;
name|bool
name|m_error
decl_stmt|;
block|}
empty_stmt|;
specifier|static
name|size_t
name|InputReaderCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|InputReader
operator|&
name|reader
argument_list|,
name|lldb
operator|::
name|InputReaderAction
name|notification
argument_list|,
specifier|const
name|char
operator|*
name|bytes
argument_list|,
name|size_t
name|bytes_len
argument_list|)
decl_stmt|;
name|lldb_utility
operator|::
name|PseudoTerminal
name|m_embedded_thread_pty
expr_stmt|;
name|lldb_utility
operator|::
name|PseudoTerminal
name|m_embedded_python_pty
expr_stmt|;
name|lldb
operator|::
name|InputReaderSP
name|m_embedded_thread_input_reader_sp
expr_stmt|;
name|lldb
operator|::
name|InputReaderSP
name|m_embedded_python_input_reader_sp
expr_stmt|;
name|FILE
modifier|*
name|m_dbg_stdout
decl_stmt|;
name|PyObject
modifier|*
name|m_new_sysout
decl_stmt|;
name|PyObject
modifier|*
name|m_old_sysout
decl_stmt|;
name|PyObject
modifier|*
name|m_old_syserr
decl_stmt|;
name|PyObject
modifier|*
name|m_run_one_line
decl_stmt|;
name|std
operator|::
name|string
name|m_dictionary_name
expr_stmt|;
name|TerminalState
name|m_terminal_state
decl_stmt|;
name|bool
name|m_session_is_active
decl_stmt|;
name|bool
name|m_pty_slave_is_open
decl_stmt|;
name|bool
name|m_valid_session
decl_stmt|;
name|PyThreadState
modifier|*
name|m_command_thread_state
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifdef LLDB_DISABLE_PYTHON
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_ScriptInterpreterPython_h_
end_comment

end_unit

