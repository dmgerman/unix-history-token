begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- OptionValue.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_OptionValue_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_OptionValue_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//---------------------------------------------------------------------
comment|// OptionValue
comment|//---------------------------------------------------------------------
name|class
name|OptionValue
block|{
name|public
label|:
typedef|typedef
enum|enum
block|{
name|eTypeInvalid
init|=
literal|0
block|,
name|eTypeArch
block|,
name|eTypeArgs
block|,
name|eTypeArray
block|,
name|eTypeBoolean
block|,
name|eTypeDictionary
block|,
name|eTypeEnum
block|,
name|eTypeFileSpec
block|,
name|eTypeFileSpecList
block|,
name|eTypeFormat
block|,
name|eTypePathMap
block|,
name|eTypeProperties
block|,
name|eTypeRegex
block|,
name|eTypeSInt64
block|,
name|eTypeString
block|,
name|eTypeUInt64
block|,
name|eTypeUUID
block|}
name|Type
typedef|;
enum|enum
block|{
name|eDumpOptionName
init|=
operator|(
literal|1u
operator|<<
literal|0
operator|)
block|,
name|eDumpOptionType
init|=
operator|(
literal|1u
operator|<<
literal|1
operator|)
block|,
name|eDumpOptionValue
init|=
operator|(
literal|1u
operator|<<
literal|2
operator|)
block|,
name|eDumpOptionDescription
init|=
operator|(
literal|1u
operator|<<
literal|3
operator|)
block|,
name|eDumpOptionRaw
init|=
operator|(
literal|1u
operator|<<
literal|4
operator|)
block|,
name|eDumpGroupValue
init|=
operator|(
name|eDumpOptionName
operator||
name|eDumpOptionType
operator||
name|eDumpOptionValue
operator|)
block|,
name|eDumpGroupHelp
init|=
operator|(
name|eDumpOptionName
operator||
name|eDumpOptionType
operator||
name|eDumpOptionDescription
operator|)
block|}
enum|;
name|OptionValue
argument_list|()
operator|:
name|m_value_was_set
argument_list|(
argument|false
argument_list|)
block|{         }
name|OptionValue
argument_list|(
specifier|const
name|OptionValue
operator|&
name|rhs
argument_list|)
operator|:
name|m_value_was_set
argument_list|(
argument|rhs.m_value_was_set
argument_list|)
block|{         }
name|virtual
operator|~
name|OptionValue
argument_list|()
block|{         }
comment|//-----------------------------------------------------------------
comment|// Subclasses should override these functions
comment|//-----------------------------------------------------------------
name|virtual
name|Type
name|GetType
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
comment|// If this value is always hidden, the avoid showing any info on this
comment|// value, just show the info for the child values.
name|virtual
name|bool
name|ValueIsTransparent
argument_list|()
specifier|const
block|{
return|return
name|GetType
argument_list|()
operator|==
name|eTypeProperties
return|;
block|}
name|virtual
specifier|const
name|char
operator|*
name|GetTypeAsCString
argument_list|()
specifier|const
block|{
return|return
name|GetBuiltinTypeAsCString
argument_list|(
name|GetType
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|char
modifier|*
name|GetBuiltinTypeAsCString
parameter_list|(
name|Type
name|t
parameter_list|)
function_decl|;
name|virtual
name|void
name|DumpValue
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|Stream
modifier|&
name|strm
parameter_list|,
name|uint32_t
name|dump_mask
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|SetValueFromCString
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|,
name|VarSetOperationType
name|op
init|=
name|eVarSetOperationAssign
parameter_list|)
function_decl|;
name|virtual
name|bool
name|Clear
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|lldb
operator|::
name|OptionValueSP
name|DeepCopy
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|size_t
name|AutoComplete
parameter_list|(
name|CommandInterpreter
modifier|&
name|interpreter
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|match_start_point
parameter_list|,
name|int
name|max_return_elements
parameter_list|,
name|bool
modifier|&
name|word_complete
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|)
function_decl|;
comment|//-----------------------------------------------------------------
comment|// Subclasses can override these functions
comment|//-----------------------------------------------------------------
name|virtual
name|lldb
operator|::
name|OptionValueSP
name|GetSubValue
argument_list|(
argument|const ExecutionContext *exe_ctx
argument_list|,
argument|const char *name
argument_list|,
argument|bool will_modify
argument_list|,
argument|Error&error
argument_list|)
specifier|const
block|{
name|error
operator|.
name|SetErrorStringWithFormat
argument_list|(
literal|"'%s' is not a value subvalue"
argument_list|,
name|name
argument_list|)
block|;
return|return
name|lldb
operator|::
name|OptionValueSP
argument_list|()
return|;
block|}
name|virtual
name|Error
name|SetSubValue
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|VarSetOperationType
name|op
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|virtual
name|bool
name|IsAggregateValue
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|ConstString
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|ConstString
argument_list|()
return|;
block|}
name|virtual
name|bool
name|DumpQualifiedName
argument_list|(
name|Stream
operator|&
name|strm
argument_list|)
decl|const
decl_stmt|;
comment|//-----------------------------------------------------------------
comment|// Subclasses should NOT override these functions as they use the
comment|// above functions to implement functionality
comment|//-----------------------------------------------------------------
name|uint32_t
name|GetTypeAsMask
parameter_list|()
block|{
return|return
literal|1u
operator|<<
name|GetType
argument_list|()
return|;
block|}
specifier|static
name|uint32_t
name|ConvertTypeToMask
argument_list|(
name|OptionValue
operator|::
name|Type
name|type
argument_list|)
block|{
return|return
literal|1u
operator|<<
name|type
return|;
block|}
specifier|static
name|OptionValue
operator|::
name|Type
name|ConvertTypeMaskToType
argument_list|(
argument|uint32_t type_mask
argument_list|)
block|{
comment|// If only one bit is set, then return an appropriate enumeration
switch|switch
condition|(
name|type_mask
condition|)
block|{
case|case
literal|1u
operator|<<
name|eTypeArch
case|:
return|return
name|eTypeArch
return|;
case|case
literal|1u
operator|<<
name|eTypeArgs
case|:
return|return
name|eTypeArgs
return|;
case|case
literal|1u
operator|<<
name|eTypeArray
case|:
return|return
name|eTypeArray
return|;
case|case
literal|1u
operator|<<
name|eTypeBoolean
case|:
return|return
name|eTypeBoolean
return|;
case|case
literal|1u
operator|<<
name|eTypeDictionary
case|:
return|return
name|eTypeDictionary
return|;
case|case
literal|1u
operator|<<
name|eTypeEnum
case|:
return|return
name|eTypeEnum
return|;
case|case
literal|1u
operator|<<
name|eTypeFileSpec
case|:
return|return
name|eTypeFileSpec
return|;
case|case
literal|1u
operator|<<
name|eTypeFileSpecList
case|:
return|return
name|eTypeFileSpecList
return|;
case|case
literal|1u
operator|<<
name|eTypeFormat
case|:
return|return
name|eTypeFormat
return|;
case|case
literal|1u
operator|<<
name|eTypePathMap
case|:
return|return
name|eTypePathMap
return|;
case|case
literal|1u
operator|<<
name|eTypeProperties
case|:
return|return
name|eTypeProperties
return|;
case|case
literal|1u
operator|<<
name|eTypeRegex
case|:
return|return
name|eTypeRegex
return|;
case|case
literal|1u
operator|<<
name|eTypeSInt64
case|:
return|return
name|eTypeSInt64
return|;
case|case
literal|1u
operator|<<
name|eTypeString
case|:
return|return
name|eTypeString
return|;
case|case
literal|1u
operator|<<
name|eTypeUInt64
case|:
return|return
name|eTypeUInt64
return|;
case|case
literal|1u
operator|<<
name|eTypeUUID
case|:
return|return
name|eTypeUUID
return|;
block|}
comment|// Else return invalid
return|return
name|eTypeInvalid
return|;
block|}
specifier|static
name|lldb
operator|::
name|OptionValueSP
name|CreateValueFromCStringForTypeMask
argument_list|(
argument|const char *value_cstr
argument_list|,
argument|uint32_t type_mask
argument_list|,
argument|Error&error
argument_list|)
expr_stmt|;
comment|// Get this value as a uint64_t value if it is encoded as a boolean,
comment|// uint64_t or int64_t. Other types will cause "fail_value" to be
comment|// returned
name|uint64_t
name|GetUInt64Value
parameter_list|(
name|uint64_t
name|fail_value
parameter_list|,
name|bool
modifier|*
name|success_ptr
parameter_list|)
function_decl|;
name|OptionValueArch
modifier|*
name|GetAsArch
parameter_list|()
function_decl|;
specifier|const
name|OptionValueArch
operator|*
name|GetAsArch
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueArray
modifier|*
name|GetAsArray
parameter_list|()
function_decl|;
specifier|const
name|OptionValueArray
operator|*
name|GetAsArray
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueArgs
modifier|*
name|GetAsArgs
parameter_list|()
function_decl|;
specifier|const
name|OptionValueArgs
operator|*
name|GetAsArgs
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueBoolean
modifier|*
name|GetAsBoolean
parameter_list|()
function_decl|;
specifier|const
name|OptionValueBoolean
operator|*
name|GetAsBoolean
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueDictionary
modifier|*
name|GetAsDictionary
parameter_list|()
function_decl|;
specifier|const
name|OptionValueDictionary
operator|*
name|GetAsDictionary
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueEnumeration
modifier|*
name|GetAsEnumeration
parameter_list|()
function_decl|;
specifier|const
name|OptionValueEnumeration
operator|*
name|GetAsEnumeration
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueFileSpec
modifier|*
name|GetAsFileSpec
parameter_list|()
function_decl|;
specifier|const
name|OptionValueFileSpec
operator|*
name|GetAsFileSpec
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueFileSpecList
modifier|*
name|GetAsFileSpecList
parameter_list|()
function_decl|;
specifier|const
name|OptionValueFileSpecList
operator|*
name|GetAsFileSpecList
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueFormat
modifier|*
name|GetAsFormat
parameter_list|()
function_decl|;
specifier|const
name|OptionValueFormat
operator|*
name|GetAsFormat
argument_list|()
specifier|const
expr_stmt|;
name|OptionValuePathMappings
modifier|*
name|GetAsPathMappings
parameter_list|()
function_decl|;
specifier|const
name|OptionValuePathMappings
operator|*
name|GetAsPathMappings
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueProperties
modifier|*
name|GetAsProperties
parameter_list|()
function_decl|;
specifier|const
name|OptionValueProperties
operator|*
name|GetAsProperties
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueRegex
modifier|*
name|GetAsRegex
parameter_list|()
function_decl|;
specifier|const
name|OptionValueRegex
operator|*
name|GetAsRegex
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueSInt64
modifier|*
name|GetAsSInt64
parameter_list|()
function_decl|;
specifier|const
name|OptionValueSInt64
operator|*
name|GetAsSInt64
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueString
modifier|*
name|GetAsString
parameter_list|()
function_decl|;
specifier|const
name|OptionValueString
operator|*
name|GetAsString
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueUInt64
modifier|*
name|GetAsUInt64
parameter_list|()
function_decl|;
specifier|const
name|OptionValueUInt64
operator|*
name|GetAsUInt64
argument_list|()
specifier|const
expr_stmt|;
name|OptionValueUUID
modifier|*
name|GetAsUUID
parameter_list|()
function_decl|;
specifier|const
name|OptionValueUUID
operator|*
name|GetAsUUID
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetBooleanValue
argument_list|(
name|bool
name|fail_value
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetBooleanValue
parameter_list|(
name|bool
name|new_value
parameter_list|)
function_decl|;
name|int64_t
name|GetEnumerationValue
argument_list|(
name|int64_t
name|fail_value
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetEnumerationValue
parameter_list|(
name|int64_t
name|value
parameter_list|)
function_decl|;
name|FileSpec
name|GetFileSpecValue
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetFileSpecValue
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|)
function_decl|;
name|FileSpecList
name|GetFileSpecListValue
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|Format
name|GetFormatValue
argument_list|(
argument|lldb::Format fail_value = lldb::eFormatDefault
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|SetFormatValue
argument_list|(
name|lldb
operator|::
name|Format
name|new_value
argument_list|)
decl_stmt|;
specifier|const
name|RegularExpression
operator|*
name|GetRegexValue
argument_list|()
specifier|const
expr_stmt|;
name|int64_t
name|GetSInt64Value
argument_list|(
name|int64_t
name|fail_value
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetSInt64Value
parameter_list|(
name|int64_t
name|new_value
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetStringValue
argument_list|(
specifier|const
name|char
operator|*
name|fail_value
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetStringValue
parameter_list|(
specifier|const
name|char
modifier|*
name|new_value
parameter_list|)
function_decl|;
name|uint64_t
name|GetUInt64Value
argument_list|(
name|uint64_t
name|fail_value
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetUInt64Value
parameter_list|(
name|uint64_t
name|new_value
parameter_list|)
function_decl|;
name|UUID
name|GetUUIDValue
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetUUIDValue
parameter_list|(
specifier|const
name|UUID
modifier|&
name|uuid
parameter_list|)
function_decl|;
name|bool
name|OptionWasSet
argument_list|()
specifier|const
block|{
return|return
name|m_value_was_set
return|;
block|}
name|void
name|SetOptionWasSet
parameter_list|()
block|{
name|m_value_was_set
operator|=
name|true
expr_stmt|;
block|}
name|void
name|SetParent
argument_list|(
specifier|const
name|lldb
operator|::
name|OptionValueSP
operator|&
name|parent_sp
argument_list|)
block|{
name|m_parent_wp
operator|=
name|parent_sp
expr_stmt|;
block|}
name|protected
label|:
name|lldb
operator|::
name|OptionValueWP
name|m_parent_wp
expr_stmt|;
name|bool
name|m_value_was_set
decl_stmt|;
comment|// This can be used to see if a value has been set
comment|// by a call to SetValueFromCString(). It is often
comment|// handy to know if an option value was set from
comment|// the command line or as a setting, versus if we
comment|// just have the default value that was already
comment|// populated in the option value.
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_OptionValue_h_
end_comment

end_unit

