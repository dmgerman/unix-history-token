begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- InputReader.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_InputReader_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_InputReader_h_
end_define

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StringList.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Predicate.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|InputReader
block|{
name|public
label|:
typedef|typedef
name|size_t
argument_list|(
argument|*Callback
argument_list|)
operator|(
name|void
operator|*
name|baton
operator|,
name|InputReader
operator|&
name|reader
operator|,
name|lldb
operator|::
name|InputReaderAction
name|notification
operator|,
specifier|const
name|char
operator|*
name|bytes
operator|,
name|size_t
name|bytes_len
operator|)
expr_stmt|;
struct|struct
name|HandlerData
block|{
name|InputReader
modifier|&
name|reader
decl_stmt|;
specifier|const
name|char
modifier|*
name|bytes
decl_stmt|;
name|size_t
name|bytes_len
decl_stmt|;
name|void
modifier|*
name|baton
decl_stmt|;
name|HandlerData
argument_list|(
argument|InputReader& r
argument_list|,
argument|const char* b
argument_list|,
argument|size_t l
argument_list|,
argument|void* t
argument_list|)
block|:
name|reader
argument_list|(
name|r
argument_list|)
operator|,
name|bytes
argument_list|(
name|b
argument_list|)
operator|,
name|bytes_len
argument_list|(
name|l
argument_list|)
operator|,
name|baton
argument_list|(
argument|t
argument_list|)
block|{         }
name|lldb
operator|::
name|StreamSP
name|GetOutStream
argument_list|()
expr_stmt|;
name|bool
name|GetBatchMode
parameter_list|()
function_decl|;
block|}
struct|;
struct|struct
name|InitializationParameters
block|{
name|private
label|:
name|void
modifier|*
name|m_baton
decl_stmt|;
name|lldb
operator|::
name|InputReaderGranularity
name|m_token_size
expr_stmt|;
name|char
modifier|*
name|m_end_token
decl_stmt|;
name|char
modifier|*
name|m_prompt
decl_stmt|;
name|bool
name|m_echo
decl_stmt|;
name|bool
name|m_save_user_input
decl_stmt|;
name|public
label|:
name|InitializationParameters
argument_list|()
operator|:
name|m_baton
argument_list|(
name|NULL
argument_list|)
operator|,
name|m_token_size
argument_list|(
name|lldb
operator|::
name|eInputReaderGranularityLine
argument_list|)
operator|,
name|m_echo
argument_list|(
name|true
argument_list|)
operator|,
name|m_save_user_input
argument_list|(
argument|false
argument_list|)
block|{
name|SetEndToken
argument_list|(
literal|"DONE"
argument_list|)
block|;
name|SetPrompt
argument_list|(
literal|"> "
argument_list|)
block|;         }
name|InitializationParameters
operator|&
name|SetEcho
argument_list|(
argument|bool e
argument_list|)
block|{
name|m_echo
operator|=
name|e
block|;
return|return
operator|*
name|this
return|;
block|}
name|InitializationParameters
modifier|&
name|SetSaveUserInput
parameter_list|(
name|bool
name|s
parameter_list|)
block|{
name|m_save_user_input
operator|=
name|s
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|InitializationParameters
modifier|&
name|SetBaton
parameter_list|(
name|void
modifier|*
name|b
parameter_list|)
block|{
name|m_baton
operator|=
name|b
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|InitializationParameters
modifier|&
name|SetGranularity
argument_list|(
name|lldb
operator|::
name|InputReaderGranularity
name|g
argument_list|)
block|{
name|m_token_size
operator|=
name|g
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|InitializationParameters
modifier|&
name|SetEndToken
parameter_list|(
specifier|const
name|char
modifier|*
name|e
parameter_list|)
block|{
name|m_end_token
operator|=
name|new
name|char
index|[
name|strlen
argument_list|(
name|e
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
operator|::
name|strcpy
argument_list|(
name|m_end_token
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|InitializationParameters
modifier|&
name|SetPrompt
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|)
block|{
name|m_prompt
operator|=
name|new
name|char
index|[
name|strlen
argument_list|(
name|p
argument_list|)
operator|+
literal|1
index|]
expr_stmt|;
operator|::
name|strcpy
argument_list|(
name|m_prompt
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|friend
name|class
name|InputReaderEZ
decl_stmt|;
block|}
struct|;
name|InputReader
argument_list|(
name|Debugger
operator|&
name|debugger
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|InputReader
argument_list|()
expr_stmt|;
name|virtual
name|Error
name|Initialize
argument_list|(
name|Callback
name|callback
argument_list|,
name|void
operator|*
name|baton
argument_list|,
name|lldb
operator|::
name|InputReaderGranularity
name|token_size
argument_list|,
specifier|const
name|char
operator|*
name|end_token
argument_list|,
specifier|const
name|char
operator|*
name|prompt
argument_list|,
name|bool
name|echo
argument_list|)
decl_stmt|;
name|virtual
name|Error
name|Initialize
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|lldb
operator|::
name|InputReaderGranularity
name|token_size
operator|=
name|lldb
operator|::
name|eInputReaderGranularityLine
argument_list|,
specifier|const
name|char
operator|*
name|end_token
operator|=
literal|"DONE"
argument_list|,
specifier|const
name|char
operator|*
name|prompt
operator|=
literal|"> "
argument_list|,
name|bool
name|echo
operator|=
name|true
argument_list|)
block|{
return|return
name|Error
argument_list|(
literal|"unimplemented"
argument_list|)
return|;
block|}
name|virtual
name|Error
name|Initialize
parameter_list|(
name|InitializationParameters
modifier|&
name|params
parameter_list|)
block|{
return|return
name|Error
argument_list|(
literal|"unimplemented"
argument_list|)
return|;
block|}
comment|// to use these handlers instead of the Callback function, you must subclass
comment|// InputReaderEZ, and redefine the handlers for the events you care about
name|virtual
name|void
name|ActivateHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|DeactivateHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|ReactivateHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|AsynchronousOutputWrittenHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|GotTokenHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|InterruptHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|EOFHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|virtual
name|void
name|DoneHandler
parameter_list|(
name|HandlerData
modifier|&
parameter_list|)
block|{}
name|bool
name|IsDone
argument_list|()
specifier|const
block|{
return|return
name|m_done
return|;
block|}
name|void
name|SetIsDone
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|m_done
operator|=
name|b
expr_stmt|;
block|}
name|lldb
operator|::
name|InputReaderGranularity
name|GetGranularity
argument_list|()
specifier|const
block|{
return|return
name|m_granularity
return|;
block|}
name|bool
name|GetEcho
argument_list|()
specifier|const
block|{
return|return
name|m_echo
return|;
block|}
name|StringList
modifier|&
name|GetUserInput
parameter_list|()
block|{
return|return
name|m_user_input
return|;
block|}
name|virtual
name|bool
name|GetSaveUserInput
parameter_list|()
block|{
return|return
name|false
return|;
block|}
comment|// Subclasses _can_ override this function to get input as it comes in
comment|// without any granularity
name|virtual
name|size_t
name|HandleRawBytes
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|size_t
name|bytes_len
parameter_list|)
function_decl|;
name|Debugger
modifier|&
name|GetDebugger
parameter_list|()
block|{
return|return
name|m_debugger
return|;
block|}
name|bool
name|IsActive
argument_list|()
specifier|const
block|{
return|return
name|m_active
return|;
block|}
specifier|const
name|char
operator|*
name|GetPrompt
argument_list|()
specifier|const
expr_stmt|;
name|void
name|RefreshPrompt
parameter_list|()
function_decl|;
comment|// If you want to read from an input reader synchronously, then just initialize the
comment|// reader and then call WaitOnReaderIsDone, which will return when the reader is popped.
name|void
name|WaitOnReaderIsDone
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|GranularityAsCString
argument_list|(
name|lldb
operator|::
name|InputReaderGranularity
name|granularity
argument_list|)
decl_stmt|;
name|protected
label|:
name|friend
name|class
name|Debugger
decl_stmt|;
name|void
name|Notify
argument_list|(
name|lldb
operator|::
name|InputReaderAction
name|notification
argument_list|)
decl_stmt|;
name|Debugger
modifier|&
name|m_debugger
decl_stmt|;
name|Callback
name|m_callback
decl_stmt|;
name|void
modifier|*
name|m_callback_baton
decl_stmt|;
name|std
operator|::
name|string
name|m_end_token
expr_stmt|;
name|std
operator|::
name|string
name|m_prompt
expr_stmt|;
name|lldb
operator|::
name|InputReaderGranularity
name|m_granularity
expr_stmt|;
name|bool
name|m_done
decl_stmt|;
name|bool
name|m_echo
decl_stmt|;
name|bool
name|m_active
decl_stmt|;
name|Predicate
operator|<
name|bool
operator|>
name|m_reader_done
expr_stmt|;
name|StringList
name|m_user_input
decl_stmt|;
name|bool
name|m_save_user_input
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|InputReader
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_InputReader_h_
end_comment

end_unit

