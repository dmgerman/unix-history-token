begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- X86DisassemblerTables.h - Disassembler tables ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the X86 Disassembler Emitter.
end_comment

begin_comment
comment|// It contains the interface of the disassembler tables.
end_comment

begin_comment
comment|// Documentation for the disassembler emitter in general can be found in
end_comment

begin_comment
comment|//  X86DisasemblerEmitter.h.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|X86DISASSEMBLERTABLES_H
end_ifndef

begin_define
define|#
directive|define
name|X86DISASSEMBLERTABLES_H
end_define

begin_include
include|#
directive|include
file|"X86DisassemblerShared.h"
end_include

begin_include
include|#
directive|include
file|"X86ModRMFilters.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|X86Disassembler
block|{
comment|/// DisassemblerTables - Encapsulates all the decode tables being generated by
comment|///   the table emitter.  Contains functions to populate the tables as well as
comment|///   to emit them as hierarchical C structures suitable for consumption by the
comment|///   runtime.
name|class
name|DisassemblerTables
block|{
name|private
label|:
comment|/// The decoder tables.  There is one for each opcode type:
comment|/// [0] one-byte opcodes
comment|/// [1] two-byte opcodes of the form 0f __
comment|/// [2] three-byte opcodes of the form 0f 38 __
comment|/// [3] three-byte opcodes of the form 0f 3a __
comment|/// [4] three-byte opcodes of the form 0f a6 __
comment|/// [5] three-byte opcodes of the form 0f a7 __
name|ContextDecision
modifier|*
name|Tables
index|[
literal|6
index|]
decl_stmt|;
comment|/// The instruction information table
name|std
operator|::
name|vector
operator|<
name|InstructionSpecifier
operator|>
name|InstructionSpecifiers
expr_stmt|;
comment|/// True if there are primary decode conflicts in the instruction set
name|bool
name|HasConflicts
decl_stmt|;
comment|/// emitOneID - Emits a table entry for a single instruction entry, at the
comment|///   innermost level of the structure hierarchy.  The entry is printed out
comment|///   in the format "nnnn, /* MNEMONIC */" where nnnn is the ID in decimal,
comment|///   the comma is printed if addComma is true, and the menonic is the name
comment|///   of the instruction as listed in the LLVM tables.
comment|///
comment|/// @param o        - The output stream to print the entry on.
comment|/// @param i        - The indentation level for o.
comment|/// @param id       - The unique ID of the instruction to print.
comment|/// @param addComma - Whether or not to print a comma after the ID.  True if
comment|///                    additional items will follow.
name|void
name|emitOneID
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|,
name|uint32_t
operator|&
name|i
argument_list|,
name|InstrUID
name|id
argument_list|,
name|bool
name|addComma
argument_list|)
decl|const
decl_stmt|;
comment|/// emitModRMDecision - Emits a table of entries corresponding to a single
comment|///   ModR/M decision.  Compacts the ModR/M decision if possible.  ModR/M
comment|///   decisions are printed as:
comment|///
comment|///   { /* struct ModRMDecision */
comment|///     TYPE,
comment|///     modRMTablennnn
comment|///   }
comment|///
comment|///   where nnnn is a unique ID for the corresponding table of IDs.
comment|///   TYPE indicates whether the table has one entry that is the same
comment|///   regardless of ModR/M byte, two entries - one for bytes 0x00-0xbf and one
comment|///   for bytes 0xc0-0xff -, or 256 entries, one for each possible byte.
comment|///   nnnn is the number of a table for looking up these values.  The tables
comment|///   are written separately so that tables consisting entirely of zeros will
comment|///   not be duplicated.  (These all have the name modRMEmptyTable.)  A table
comment|///   is printed as:
comment|///
comment|///   InstrUID modRMTablennnn[k] = {
comment|///     nnnn, /* MNEMONIC */
comment|///     ...
comment|///     nnnn /* MNEMONIC */
comment|///   };
comment|///
comment|/// @param o1       - The output stream to print the ID table to.
comment|/// @param o2       - The output stream to print the decision structure to.
comment|/// @param i1       - The indentation level to use with stream o1.
comment|/// @param i2       - The indentation level to use with stream o2.
comment|/// @param decision - The ModR/M decision to emit.  This decision has 256
comment|///                   entries - emitModRMDecision decides how to compact it.
name|void
name|emitModRMDecision
argument_list|(
name|raw_ostream
operator|&
name|o1
argument_list|,
name|raw_ostream
operator|&
name|o2
argument_list|,
name|uint32_t
operator|&
name|i1
argument_list|,
name|uint32_t
operator|&
name|i2
argument_list|,
name|ModRMDecision
operator|&
name|decision
argument_list|)
decl|const
decl_stmt|;
comment|/// emitOpcodeDecision - Emits an OpcodeDecision and all its subsidiary ModR/M
comment|///   decisions.  An OpcodeDecision is printed as:
comment|///
comment|///   { /* struct OpcodeDecision */
comment|///     /* 0x00 */
comment|///     { /* struct ModRMDecision */
comment|///       ...
comment|///     }
comment|///     ...
comment|///   }
comment|///
comment|///   where the ModRMDecision structure is printed as described in the
comment|///   documentation for emitModRMDecision().  emitOpcodeDecision() passes on a
comment|///   stream and indent level for the UID tables generated by
comment|///   emitModRMDecision(), but does not use them itself.
comment|///
comment|/// @param o1       - The output stream to print the ID tables generated by
comment|///                   emitModRMDecision() to.
comment|/// @param o2       - The output stream for the decision structure itself.
comment|/// @param i1       - The indent level to use with stream o1.
comment|/// @param i2       - The indent level to use with stream o2.
comment|/// @param decision - The OpcodeDecision to emit along with its subsidiary
comment|///                    structures.
name|void
name|emitOpcodeDecision
argument_list|(
name|raw_ostream
operator|&
name|o1
argument_list|,
name|raw_ostream
operator|&
name|o2
argument_list|,
name|uint32_t
operator|&
name|i1
argument_list|,
name|uint32_t
operator|&
name|i2
argument_list|,
name|OpcodeDecision
operator|&
name|decision
argument_list|)
decl|const
decl_stmt|;
comment|/// emitContextDecision - Emits a ContextDecision and all its subsidiary
comment|///   Opcode and ModRMDecisions.  A ContextDecision is printed as:
comment|///
comment|///   struct ContextDecision NAME = {
comment|///     { /* OpcodeDecisions */
comment|///       /* IC */
comment|///       { /* struct OpcodeDecision */
comment|///         ...
comment|///       },
comment|///       ...
comment|///     }
comment|///   }
comment|///
comment|///   NAME is the name of the ContextDecision (typically one of the four names
comment|///   ONEBYTE_SYM, TWOBYTE_SYM, THREEBYTE38_SYM, THREEBYTE3A_SYM,
comment|///   THREEBYTEA6_SYM, and THREEBYTEA7_SYM from
comment|///   X86DisassemblerDecoderCommon.h).
comment|///   IC is one of the contexts in InstructionContext.  There is an opcode
comment|///   decision for each possible context.
comment|///   The OpcodeDecision structures are printed as described in the
comment|///   documentation for emitOpcodeDecision.
comment|///
comment|/// @param o1       - The output stream to print the ID tables generated by
comment|///                   emitModRMDecision() to.
comment|/// @param o2       - The output stream to print the decision structure to.
comment|/// @param i1       - The indent level to use with stream o1.
comment|/// @param i2       - The indent level to use with stream o2.
comment|/// @param decision - The ContextDecision to emit along with its subsidiary
comment|///                   structures.
comment|/// @param name     - The name for the ContextDecision.
name|void
name|emitContextDecision
argument_list|(
name|raw_ostream
operator|&
name|o1
argument_list|,
name|raw_ostream
operator|&
name|o2
argument_list|,
name|uint32_t
operator|&
name|i1
argument_list|,
name|uint32_t
operator|&
name|i2
argument_list|,
name|ContextDecision
operator|&
name|decision
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
decl_stmt|;
comment|/// emitInstructionInfo - Prints the instruction specifier table, which has
comment|///   one entry for each instruction, and contains name and operand
comment|///   information.  This table is printed as:
comment|///
comment|///   struct InstructionSpecifier CONTEXTS_SYM[k] = {
comment|///     {
comment|///       /* nnnn */
comment|///       "MNEMONIC",
comment|///       0xnn,
comment|///       {
comment|///         {
comment|///           ENCODING,
comment|///           TYPE
comment|///         },
comment|///         ...
comment|///       }
comment|///     },
comment|///   };
comment|///
comment|///   k is the total number of instructions.
comment|///   nnnn is the ID of the current instruction (0-based).  This table
comment|///   includes entries for non-instructions like PHINODE.
comment|///   0xnn is the lowest possible opcode for the current instruction, used for
comment|///   AddRegFrm instructions to compute the operand's value.
comment|///   ENCODING and TYPE describe the encoding and type for a single operand.
comment|///
comment|/// @param o  - The output stream to which the instruction table should be
comment|///             written.
comment|/// @param i  - The indent level for use with the stream.
name|void
name|emitInstructionInfo
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|,
name|uint32_t
operator|&
name|i
argument_list|)
decl|const
decl_stmt|;
comment|/// emitContextTable - Prints the table that is used to translate from an
comment|///   instruction attribute mask to an instruction context.  This table is
comment|///   printed as:
comment|///
comment|///   InstructionContext CONTEXTS_STR[256] = {
comment|///     IC, /* 0x00 */
comment|///     ...
comment|///   };
comment|///
comment|///   IC is the context corresponding to the mask 0x00, and there are 256
comment|///   possible masks.
comment|///
comment|/// @param o  - The output stream to which the context table should be written.
comment|/// @param i  - The indent level for use with the stream.
name|void
name|emitContextTable
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|,
name|uint32_t
operator|&
name|i
argument_list|)
decl|const
decl_stmt|;
comment|/// emitContextDecisions - Prints all four ContextDecision structures using
comment|///   emitContextDecision().
comment|///
comment|/// @param o1 - The output stream to print the ID tables generated by
comment|///             emitModRMDecision() to.
comment|/// @param o2 - The output stream to print the decision structures to.
comment|/// @param i1 - The indent level to use with stream o1.
comment|/// @param i2 - The indent level to use with stream o2.
name|void
name|emitContextDecisions
argument_list|(
name|raw_ostream
operator|&
name|o1
argument_list|,
name|raw_ostream
operator|&
name|o2
argument_list|,
name|uint32_t
operator|&
name|i1
argument_list|,
name|uint32_t
operator|&
name|i2
argument_list|)
decl|const
decl_stmt|;
comment|/// setTableFields - Uses a ModRMFilter to set the appropriate entries in a
comment|///   ModRMDecision to refer to a particular instruction ID.
comment|///
comment|/// @param decision - The ModRMDecision to populate.
comment|/// @param filter   - The filter to use in deciding which entries to populate.
comment|/// @param uid      - The unique ID to set matching entries to.
comment|/// @param opcode   - The opcode of the instruction, for error reporting.
name|void
name|setTableFields
parameter_list|(
name|ModRMDecision
modifier|&
name|decision
parameter_list|,
specifier|const
name|ModRMFilter
modifier|&
name|filter
parameter_list|,
name|InstrUID
name|uid
parameter_list|,
name|uint8_t
name|opcode
parameter_list|)
function_decl|;
name|public
label|:
comment|/// Constructor - Allocates space for the class decisions and clears them.
name|DisassemblerTables
argument_list|()
expr_stmt|;
operator|~
name|DisassemblerTables
argument_list|()
expr_stmt|;
comment|/// emit - Emits the instruction table, context table, and class decisions.
comment|///
comment|/// @param o  - The output stream to print the tables to.
name|void
name|emit
argument_list|(
name|raw_ostream
operator|&
name|o
argument_list|)
decl|const
decl_stmt|;
comment|/// setTableFields - Uses the opcode type, instruction context, opcode, and a
comment|///   ModRMFilter as criteria to set a particular set of entries in the
comment|///   decode tables to point to a specific uid.
comment|///
comment|/// @param type         - The opcode type (ONEBYTE, TWOBYTE, etc.)
comment|/// @param insnContext  - The context to use (IC, IC_64BIT, etc.)
comment|/// @param opcode       - The last byte of the opcode (not counting any escape
comment|///                       or extended opcodes).
comment|/// @param filter       - The ModRMFilter that decides which ModR/M byte values
comment|///                       correspond to the desired instruction.
comment|/// @param uid          - The unique ID of the instruction.
comment|/// @param is32bit      - Instructon is only 32-bit
comment|/// @param ignoresVEX_L - Instruction ignores VEX.L
name|void
name|setTableFields
parameter_list|(
name|OpcodeType
name|type
parameter_list|,
name|InstructionContext
name|insnContext
parameter_list|,
name|uint8_t
name|opcode
parameter_list|,
specifier|const
name|ModRMFilter
modifier|&
name|filter
parameter_list|,
name|InstrUID
name|uid
parameter_list|,
name|bool
name|is32bit
parameter_list|,
name|bool
name|ignoresVEX_L
parameter_list|)
function_decl|;
comment|/// specForUID - Returns the instruction specifier for a given unique
comment|///   instruction ID.  Used when resolving collisions.
comment|///
comment|/// @param uid  - The unique ID of the instruction.
comment|/// @return     - A reference to the instruction specifier.
name|InstructionSpecifier
modifier|&
name|specForUID
parameter_list|(
name|InstrUID
name|uid
parameter_list|)
block|{
if|if
condition|(
name|uid
operator|>=
name|InstructionSpecifiers
operator|.
name|size
argument_list|()
condition|)
name|InstructionSpecifiers
operator|.
name|resize
argument_list|(
name|uid
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|InstructionSpecifiers
index|[
name|uid
index|]
return|;
block|}
comment|// hasConflicts - Reports whether there were primary decode conflicts
comment|//   from any instructions added to the tables.
comment|// @return  - true if there were; false otherwise.
name|bool
name|hasConflicts
parameter_list|()
block|{
return|return
name|HasConflicts
return|;
block|}
block|}
empty_stmt|;
block|}
comment|// namespace X86Disassembler
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

