begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Interpreter.h ------------------------------------------*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This header file defines the interpreter structure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLI_INTERPRETER_H
end_ifndef

begin_define
define|#
directive|define
name|LLI_INTERPRETER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/ExecutionEngine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/GenericValue.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/InstVisitor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CallSite.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|IntrinsicLowering
decl_stmt|;
struct_decl|struct
name|FunctionInfo
struct_decl|;
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|generic_gep_type_iterator
expr_stmt|;
name|class
name|ConstantExpr
decl_stmt|;
typedef|typedef
name|generic_gep_type_iterator
operator|<
name|User
operator|::
name|const_op_iterator
operator|>
name|gep_type_iterator
expr_stmt|;
comment|// AllocaHolder - Object to track all of the blocks of memory allocated by
comment|// alloca.  When the function returns, this object is popped off the execution
comment|// stack, which causes the dtor to be run, which frees all the alloca'd memory.
comment|//
name|class
name|AllocaHolder
block|{
name|friend
name|class
name|AllocaHolderHandle
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|void
operator|*
operator|>
name|Allocations
expr_stmt|;
name|unsigned
name|RefCnt
decl_stmt|;
name|public
label|:
name|AllocaHolder
argument_list|()
operator|:
name|RefCnt
argument_list|(
literal|0
argument_list|)
block|{}
name|void
name|add
argument_list|(
argument|void *mem
argument_list|)
block|{
name|Allocations
operator|.
name|push_back
argument_list|(
name|mem
argument_list|)
block|; }
operator|~
name|AllocaHolder
argument_list|()
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Allocations
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|free
argument_list|(
name|Allocations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|// AllocaHolderHandle gives AllocaHolder value semantics so we can stick it into
comment|// a vector...
comment|//
name|class
name|AllocaHolderHandle
block|{
name|AllocaHolder
modifier|*
name|H
decl_stmt|;
name|public
label|:
name|AllocaHolderHandle
argument_list|()
operator|:
name|H
argument_list|(
argument|new AllocaHolder()
argument_list|)
block|{
name|H
operator|->
name|RefCnt
operator|++
block|; }
name|AllocaHolderHandle
argument_list|(
specifier|const
name|AllocaHolderHandle
operator|&
name|AH
argument_list|)
operator|:
name|H
argument_list|(
argument|AH.H
argument_list|)
block|{
name|H
operator|->
name|RefCnt
operator|++
block|; }
operator|~
name|AllocaHolderHandle
argument_list|()
block|{
if|if
condition|(
operator|--
name|H
operator|->
name|RefCnt
operator|==
literal|0
condition|)
name|delete
name|H
decl_stmt|;
block|}
name|void
name|add
parameter_list|(
name|void
modifier|*
name|mem
parameter_list|)
block|{
name|H
operator|->
name|add
argument_list|(
name|mem
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|GenericValue
operator|>
name|ValuePlaneTy
expr_stmt|;
comment|// ExecutionContext struct - This struct represents one stack frame currently
comment|// executing.
comment|//
struct|struct
name|ExecutionContext
block|{
name|Function
modifier|*
name|CurFunction
decl_stmt|;
comment|// The currently executing function
name|BasicBlock
modifier|*
name|CurBB
decl_stmt|;
comment|// The currently executing BB
name|BasicBlock
operator|::
name|iterator
name|CurInst
expr_stmt|;
comment|// The next instruction to execute
name|std
operator|::
name|map
operator|<
name|Value
operator|*
operator|,
name|GenericValue
operator|>
name|Values
expr_stmt|;
comment|// LLVM values used in this invocation
name|std
operator|::
name|vector
operator|<
name|GenericValue
operator|>
name|VarArgs
expr_stmt|;
comment|// Values passed through an ellipsis
name|CallSite
name|Caller
decl_stmt|;
comment|// Holds the call that called subframes.
comment|// NULL if main func or debugger invoked fn
name|AllocaHolderHandle
name|Allocas
decl_stmt|;
comment|// Track memory allocated by alloca
block|}
struct|;
comment|// Interpreter - This class represents the entirety of the interpreter.
comment|//
name|class
name|Interpreter
range|:
name|public
name|ExecutionEngine
decl_stmt|,
name|public
name|InstVisitor
decl|<
name|Interpreter
decl|>
block|{
name|GenericValue
name|ExitValue
decl_stmt|;
comment|// The return value of the called function
name|DataLayout
name|TD
decl_stmt|;
name|IntrinsicLowering
modifier|*
name|IL
decl_stmt|;
comment|// The runtime stack of executing code.  The top of the stack is the current
comment|// function record.
name|std
operator|::
name|vector
operator|<
name|ExecutionContext
operator|>
name|ECStack
expr_stmt|;
comment|// AtExitHandlers - List of functions to call when the program exits,
comment|// registered with the atexit() library function.
name|std
operator|::
name|vector
operator|<
name|Function
operator|*
operator|>
name|AtExitHandlers
expr_stmt|;
name|public
label|:
name|explicit
name|Interpreter
parameter_list|(
name|Module
modifier|*
name|M
parameter_list|)
function_decl|;
operator|~
name|Interpreter
argument_list|()
expr_stmt|;
comment|/// runAtExitHandlers - Run any functions registered by the program's calls to
comment|/// atexit(3), which we intercept and store in AtExitHandlers.
comment|///
name|void
name|runAtExitHandlers
parameter_list|()
function_decl|;
specifier|static
name|void
name|Register
parameter_list|()
block|{
name|InterpCtor
operator|=
name|create
expr_stmt|;
block|}
comment|/// create - Create an interpreter ExecutionEngine. This can never fail.
comment|///
specifier|static
name|ExecutionEngine
modifier|*
name|create
argument_list|(
name|Module
operator|*
name|M
argument_list|,
name|std
operator|::
name|string
operator|*
name|ErrorStr
operator|=
literal|0
argument_list|)
decl_stmt|;
comment|/// run - Start execution with the specified function and arguments.
comment|///
name|virtual
name|GenericValue
name|runFunction
argument_list|(
name|Function
operator|*
name|F
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|GenericValue
operator|>
operator|&
name|ArgValues
argument_list|)
decl_stmt|;
name|virtual
name|void
modifier|*
name|getPointerToNamedFunction
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|AbortOnFailure
operator|=
name|true
argument_list|)
block|{
comment|// FIXME: not implemented.
return|return
literal|0
return|;
block|}
comment|/// recompileAndRelinkFunction - For the interpreter, functions are always
comment|/// up-to-date.
comment|///
name|virtual
name|void
modifier|*
name|recompileAndRelinkFunction
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
name|getPointerToFunction
argument_list|(
name|F
argument_list|)
return|;
block|}
comment|/// freeMachineCodeForFunction - The interpreter does not generate any code.
comment|///
name|void
name|freeMachineCodeForFunction
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{ }
comment|// Methods used to execute code:
comment|// Place a call on the stack
name|void
name|callFunction
argument_list|(
name|Function
operator|*
name|F
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|GenericValue
operator|>
operator|&
name|ArgVals
argument_list|)
decl_stmt|;
name|void
name|run
parameter_list|()
function_decl|;
comment|// Execute instructions until nothing left to do
comment|// Opcode Implementations
name|void
name|visitReturnInst
parameter_list|(
name|ReturnInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitBranchInst
parameter_list|(
name|BranchInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitSwitchInst
parameter_list|(
name|SwitchInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitIndirectBrInst
parameter_list|(
name|IndirectBrInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitBinaryOperator
parameter_list|(
name|BinaryOperator
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitICmpInst
parameter_list|(
name|ICmpInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitFCmpInst
parameter_list|(
name|FCmpInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitAllocaInst
parameter_list|(
name|AllocaInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitLoadInst
parameter_list|(
name|LoadInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitStoreInst
parameter_list|(
name|StoreInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitGetElementPtrInst
parameter_list|(
name|GetElementPtrInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitPHINode
parameter_list|(
name|PHINode
modifier|&
name|PN
parameter_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"PHI nodes already handled!"
argument_list|)
expr_stmt|;
block|}
name|void
name|visitTruncInst
parameter_list|(
name|TruncInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitZExtInst
parameter_list|(
name|ZExtInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitSExtInst
parameter_list|(
name|SExtInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitFPTruncInst
parameter_list|(
name|FPTruncInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitFPExtInst
parameter_list|(
name|FPExtInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitUIToFPInst
parameter_list|(
name|UIToFPInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitSIToFPInst
parameter_list|(
name|SIToFPInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitFPToUIInst
parameter_list|(
name|FPToUIInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitFPToSIInst
parameter_list|(
name|FPToSIInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitPtrToIntInst
parameter_list|(
name|PtrToIntInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitIntToPtrInst
parameter_list|(
name|IntToPtrInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitBitCastInst
parameter_list|(
name|BitCastInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitSelectInst
parameter_list|(
name|SelectInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitCallSite
parameter_list|(
name|CallSite
name|CS
parameter_list|)
function_decl|;
name|void
name|visitCallInst
parameter_list|(
name|CallInst
modifier|&
name|I
parameter_list|)
block|{
name|visitCallSite
argument_list|(
name|CallSite
argument_list|(
operator|&
name|I
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|visitInvokeInst
parameter_list|(
name|InvokeInst
modifier|&
name|I
parameter_list|)
block|{
name|visitCallSite
argument_list|(
name|CallSite
argument_list|(
operator|&
name|I
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|visitUnreachableInst
parameter_list|(
name|UnreachableInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitShl
parameter_list|(
name|BinaryOperator
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitLShr
parameter_list|(
name|BinaryOperator
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitAShr
parameter_list|(
name|BinaryOperator
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitVAArgInst
parameter_list|(
name|VAArgInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitExtractElementInst
parameter_list|(
name|ExtractElementInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitInsertElementInst
parameter_list|(
name|InsertElementInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitShuffleVectorInst
parameter_list|(
name|ShuffleVectorInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitExtractValueInst
parameter_list|(
name|ExtractValueInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitInsertValueInst
parameter_list|(
name|InsertValueInst
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|visitInstruction
parameter_list|(
name|Instruction
modifier|&
name|I
parameter_list|)
block|{
name|errs
argument_list|()
operator|<<
name|I
operator|<<
literal|"\n"
expr_stmt|;
name|llvm_unreachable
argument_list|(
literal|"Instruction not interpretable yet!"
argument_list|)
expr_stmt|;
block|}
name|GenericValue
name|callExternalFunction
argument_list|(
name|Function
operator|*
name|F
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|GenericValue
operator|>
operator|&
name|ArgVals
argument_list|)
decl_stmt|;
name|void
name|exitCalled
parameter_list|(
name|GenericValue
name|GV
parameter_list|)
function_decl|;
name|void
name|addAtExitHandler
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
name|AtExitHandlers
operator|.
name|push_back
argument_list|(
name|F
argument_list|)
expr_stmt|;
block|}
name|GenericValue
modifier|*
name|getFirstVarArg
parameter_list|()
block|{
return|return
operator|&
operator|(
name|ECStack
operator|.
name|back
argument_list|()
operator|.
name|VarArgs
index|[
literal|0
index|]
operator|)
return|;
block|}
name|private
label|:
comment|// Helper functions
name|GenericValue
name|executeGEPOperation
parameter_list|(
name|Value
modifier|*
name|Ptr
parameter_list|,
name|gep_type_iterator
name|I
parameter_list|,
name|gep_type_iterator
name|E
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
comment|// SwitchToNewBasicBlock - Start execution in a new basic block and run any
comment|// PHI nodes in the top of the block.  This is used for intraprocedural
comment|// control flow.
comment|//
name|void
name|SwitchToNewBasicBlock
parameter_list|(
name|BasicBlock
modifier|*
name|Dest
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|void
modifier|*
name|getPointerToFunction
parameter_list|(
name|Function
modifier|*
name|F
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|F
return|;
block|}
name|void
modifier|*
name|getPointerToBasicBlock
parameter_list|(
name|BasicBlock
modifier|*
name|BB
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
name|BB
return|;
block|}
name|void
name|initializeExecutionEngine
parameter_list|()
block|{ }
name|void
name|initializeExternalFunctions
parameter_list|()
function_decl|;
name|GenericValue
name|getConstantExprValue
parameter_list|(
name|ConstantExpr
modifier|*
name|CE
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|getOperandValue
parameter_list|(
name|Value
modifier|*
name|V
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeTruncInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeSExtInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeZExtInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeFPTruncInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeFPExtInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeFPToUIInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeFPToSIInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeUIToFPInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeSIToFPInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executePtrToIntInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeIntToPtrInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeBitCastInst
parameter_list|(
name|Value
modifier|*
name|SrcVal
parameter_list|,
name|Type
modifier|*
name|DstTy
parameter_list|,
name|ExecutionContext
modifier|&
name|SF
parameter_list|)
function_decl|;
name|GenericValue
name|executeCastOperation
argument_list|(
name|Instruction
operator|::
name|CastOps
name|opcode
argument_list|,
name|Value
operator|*
name|SrcVal
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|ExecutionContext
operator|&
name|SF
argument_list|)
decl_stmt|;
name|void
name|popStackAndReturnValueToCaller
parameter_list|(
name|Type
modifier|*
name|RetTy
parameter_list|,
name|GenericValue
name|Result
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

