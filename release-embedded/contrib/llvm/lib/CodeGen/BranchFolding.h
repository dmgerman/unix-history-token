begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- BranchFolding.h - Fold machine code branch instructions --*- C++ -*===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_BRANCHFOLDING_HPP
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_BRANCHFOLDING_HPP
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineModuleInfo
decl_stmt|;
name|class
name|RegScavenger
decl_stmt|;
name|class
name|TargetInstrInfo
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|BranchFolder
block|{
name|public
label|:
name|explicit
name|BranchFolder
parameter_list|(
name|bool
name|defaultEnableTailMerge
parameter_list|,
name|bool
name|CommonHoist
parameter_list|)
function_decl|;
name|bool
name|OptimizeFunction
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|,
specifier|const
name|TargetInstrInfo
modifier|*
name|tii
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
parameter_list|,
name|MachineModuleInfo
modifier|*
name|mmi
parameter_list|)
function_decl|;
name|private
label|:
name|class
name|MergePotentialsElt
block|{
name|unsigned
name|Hash
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|Block
decl_stmt|;
name|public
label|:
name|MergePotentialsElt
argument_list|(
argument|unsigned h
argument_list|,
argument|MachineBasicBlock *b
argument_list|)
block|:
name|Hash
argument_list|(
name|h
argument_list|)
operator|,
name|Block
argument_list|(
argument|b
argument_list|)
block|{}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|Hash
return|;
block|}
name|MachineBasicBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|Block
return|;
block|}
name|void
name|setBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
block|{
name|Block
operator|=
name|MBB
expr_stmt|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MergePotentialsElt
operator|&
operator|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
operator|::
name|iterator
name|MPIterator
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MergePotentialsElt
operator|>
name|MergePotentials
expr_stmt|;
name|SmallPtrSet
operator|<
specifier|const
name|MachineBasicBlock
operator|*
operator|,
literal|2
operator|>
name|TriedMerging
expr_stmt|;
name|class
name|SameTailElt
block|{
name|MPIterator
name|MPIter
decl_stmt|;
name|MachineBasicBlock
operator|::
name|iterator
name|TailStartPos
expr_stmt|;
name|public
label|:
name|SameTailElt
argument_list|(
argument|MPIterator mp
argument_list|,
argument|MachineBasicBlock::iterator tsp
argument_list|)
block|:
name|MPIter
argument_list|(
name|mp
argument_list|)
operator|,
name|TailStartPos
argument_list|(
argument|tsp
argument_list|)
block|{}
name|MPIterator
name|getMPIter
argument_list|()
specifier|const
block|{
return|return
name|MPIter
return|;
block|}
name|MergePotentialsElt
operator|&
name|getMergePotentialsElt
argument_list|()
specifier|const
block|{
return|return
operator|*
name|getMPIter
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|::
name|iterator
name|getTailStartPos
argument_list|()
specifier|const
block|{
return|return
name|TailStartPos
return|;
block|}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|getMergePotentialsElt
argument_list|()
operator|.
name|getHash
argument_list|()
return|;
block|}
name|MachineBasicBlock
operator|*
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|getMergePotentialsElt
argument_list|()
operator|.
name|getBlock
argument_list|()
return|;
block|}
name|bool
name|tailIsWholeBlock
argument_list|()
specifier|const
block|{
return|return
name|TailStartPos
operator|==
name|getBlock
argument_list|()
operator|->
name|begin
argument_list|()
return|;
block|}
name|void
name|setBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
block|{
name|getMergePotentialsElt
argument_list|()
operator|.
name|setBlock
argument_list|(
name|MBB
argument_list|)
expr_stmt|;
block|}
name|void
name|setTailStartPos
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|Pos
argument_list|)
block|{
name|TailStartPos
operator|=
name|Pos
expr_stmt|;
block|}
block|}
empty_stmt|;
name|std
operator|::
name|vector
operator|<
name|SameTailElt
operator|>
name|SameTails
expr_stmt|;
name|bool
name|EnableTailMerge
decl_stmt|;
name|bool
name|EnableHoistCommonCode
decl_stmt|;
specifier|const
name|TargetInstrInfo
modifier|*
name|TII
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|TRI
decl_stmt|;
name|MachineModuleInfo
modifier|*
name|MMI
decl_stmt|;
name|RegScavenger
modifier|*
name|RS
decl_stmt|;
name|bool
name|TailMergeBlocks
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|TryTailMergeBlocks
parameter_list|(
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
name|void
name|MaintainLiveIns
parameter_list|(
name|MachineBasicBlock
modifier|*
name|CurMBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|NewMBB
parameter_list|)
function_decl|;
name|void
name|ReplaceTailWithBranchTo
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|OldInst
argument_list|,
name|MachineBasicBlock
operator|*
name|NewDest
argument_list|)
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|SplitMBBAt
argument_list|(
name|MachineBasicBlock
operator|&
name|CurMBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|BBI1
argument_list|)
decl_stmt|;
name|unsigned
name|ComputeSameTails
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|unsigned
name|minCommonTailLength
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
name|void
name|RemoveBlocksWithHash
parameter_list|(
name|unsigned
name|CurHash
parameter_list|,
name|MachineBasicBlock
modifier|*
name|SuccBB
parameter_list|,
name|MachineBasicBlock
modifier|*
name|PredBB
parameter_list|)
function_decl|;
name|bool
name|CreateCommonTailOnlyBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
modifier|&
name|PredBB
parameter_list|,
name|unsigned
name|maxCommonTailLength
parameter_list|,
name|unsigned
modifier|&
name|commonTailIndex
parameter_list|)
function_decl|;
name|bool
name|OptimizeBranches
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|OptimizeBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|void
name|RemoveDeadBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|bool
name|OptimizeImpDefsBlock
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
name|bool
name|HoistCommonCode
parameter_list|(
name|MachineFunction
modifier|&
name|MF
parameter_list|)
function_decl|;
name|bool
name|HoistCommonCodeInSuccs
parameter_list|(
name|MachineBasicBlock
modifier|*
name|MBB
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_CODEGEN_BRANCHFOLDING_HPP */
end_comment

end_unit

