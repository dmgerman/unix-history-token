begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFAbbreviationDeclaration.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFABBREVIATIONDECLARATION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFABBREVIATIONDECLARATION_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataExtractor.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
name|class
name|DWARFAbbreviationDeclaration
block|{
name|uint32_t
name|Code
decl_stmt|;
name|uint32_t
name|Tag
decl_stmt|;
name|bool
name|HasChildren
decl_stmt|;
struct|struct
name|AttributeSpec
block|{
name|AttributeSpec
argument_list|(
argument|uint16_t Attr
argument_list|,
argument|uint16_t Form
argument_list|)
block|:
name|Attr
argument_list|(
name|Attr
argument_list|)
operator|,
name|Form
argument_list|(
argument|Form
argument_list|)
block|{}
name|uint16_t
name|Attr
expr_stmt|;
name|uint16_t
name|Form
decl_stmt|;
block|}
struct|;
name|SmallVector
operator|<
name|AttributeSpec
operator|,
literal|8
operator|>
name|Attributes
expr_stmt|;
name|public
label|:
name|DWARFAbbreviationDeclaration
argument_list|()
expr_stmt|;
name|uint32_t
name|getCode
argument_list|()
specifier|const
block|{
return|return
name|Code
return|;
block|}
name|uint32_t
name|getTag
argument_list|()
specifier|const
block|{
return|return
name|Tag
return|;
block|}
name|bool
name|hasChildren
argument_list|()
specifier|const
block|{
return|return
name|HasChildren
return|;
block|}
name|uint32_t
name|getNumAttributes
argument_list|()
specifier|const
block|{
return|return
name|Attributes
operator|.
name|size
argument_list|()
return|;
block|}
name|uint16_t
name|getAttrByIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|idx
operator|<
name|Attributes
operator|.
name|size
argument_list|()
condition|?
name|Attributes
index|[
name|idx
index|]
operator|.
name|Attr
else|:
literal|0
return|;
block|}
name|uint16_t
name|getFormByIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|idx
operator|<
name|Attributes
operator|.
name|size
argument_list|()
condition|?
name|Attributes
index|[
name|idx
index|]
operator|.
name|Form
else|:
literal|0
return|;
block|}
name|uint32_t
name|findAttributeIndex
argument_list|(
name|uint16_t
name|attr
argument_list|)
decl|const
decl_stmt|;
name|bool
name|extract
parameter_list|(
name|DataExtractor
name|Data
parameter_list|,
name|uint32_t
modifier|*
name|OffsetPtr
parameter_list|)
function_decl|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|clear
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

