begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Hooks for cfg representation specific functions.    Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.    Contributed by Sebastian Pop<s.pop@laposte.net>  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GCC_CFGHOOKS_H
end_ifndef

begin_define
define|#
directive|define
name|GCC_CFGHOOKS_H
end_define

begin_struct
struct|struct
name|cfg_hooks
block|{
comment|/* Name of the corresponding ir.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Debugging.  */
name|int
function_decl|(
modifier|*
name|verify_flow_info
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dump_bb
function_decl|)
parameter_list|(
name|basic_block
parameter_list|,
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* Basic CFG manipulation.  */
comment|/* Return new basic block.  */
name|basic_block
function_decl|(
modifier|*
name|create_basic_block
function_decl|)
parameter_list|(
name|void
modifier|*
name|head
parameter_list|,
name|void
modifier|*
name|end
parameter_list|,
name|basic_block
name|after
parameter_list|)
function_decl|;
comment|/* Redirect edge E to the given basic block B and update underlying program      representation.  Returns edge representing redirected branch (that may not      be equivalent to E in the case of duplicate edges being removed) or NULL      if edge is not easily redirectable for whatever reason.  */
name|edge
function_decl|(
modifier|*
name|redirect_edge_and_branch
function_decl|)
parameter_list|(
name|edge
name|e
parameter_list|,
name|basic_block
name|b
parameter_list|)
function_decl|;
comment|/* Same as the above but allows redirecting of fallthru edges.  In that case      newly created forwarder basic block is returned.  The edge must      not be abnormal.  */
name|basic_block
function_decl|(
modifier|*
name|redirect_edge_and_branch_force
function_decl|)
parameter_list|(
name|edge
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
comment|/* Remove statements corresponding to a given basic block.  */
name|void
function_decl|(
modifier|*
name|delete_basic_block
function_decl|)
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
comment|/* Creates a new basic block just after basic block B by splitting      everything after specified instruction I.  */
name|basic_block
function_decl|(
modifier|*
name|split_block
function_decl|)
parameter_list|(
name|basic_block
name|b
parameter_list|,
name|void
modifier|*
name|i
parameter_list|)
function_decl|;
comment|/* Move block B immediately after block A.  */
name|bool
function_decl|(
modifier|*
name|move_block_after
function_decl|)
parameter_list|(
name|basic_block
name|b
parameter_list|,
name|basic_block
name|a
parameter_list|)
function_decl|;
comment|/* Return true when blocks A and B can be merged into single basic block.  */
name|bool
function_decl|(
modifier|*
name|can_merge_blocks_p
function_decl|)
parameter_list|(
name|basic_block
name|a
parameter_list|,
name|basic_block
name|b
parameter_list|)
function_decl|;
comment|/* Merge blocks A and B.  */
name|void
function_decl|(
modifier|*
name|merge_blocks
function_decl|)
parameter_list|(
name|basic_block
name|a
parameter_list|,
name|basic_block
name|b
parameter_list|)
function_decl|;
comment|/* Predict edge E using PREDICTOR to given PROBABILITY.  */
name|void
function_decl|(
modifier|*
name|predict_edge
function_decl|)
parameter_list|(
name|edge
name|e
parameter_list|,
name|enum
name|br_predictor
name|predictor
parameter_list|,
name|int
name|probability
parameter_list|)
function_decl|;
comment|/* Return true if the one of outgoing edges is already predicted by      PREDICTOR.  */
name|bool
function_decl|(
modifier|*
name|predicted_by_p
function_decl|)
parameter_list|(
name|basic_block
name|bb
parameter_list|,
name|enum
name|br_predictor
name|predictor
parameter_list|)
function_decl|;
comment|/* Return true when block A can be duplicated.  */
name|bool
function_decl|(
modifier|*
name|can_duplicate_block_p
function_decl|)
parameter_list|(
name|basic_block
name|a
parameter_list|)
function_decl|;
comment|/* Duplicate block A.  */
name|basic_block
function_decl|(
modifier|*
name|duplicate_block
function_decl|)
parameter_list|(
name|basic_block
name|a
parameter_list|)
function_decl|;
comment|/* Higher level functions representable by primitive operations above if      we didn't have some oddities in RTL and Tree representations.  */
name|basic_block
function_decl|(
modifier|*
name|split_edge
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|make_forwarder_block
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
comment|/* Tries to make the edge fallthru.  */
name|void
function_decl|(
modifier|*
name|tidy_fallthru_edge
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
comment|/* Say whether a block ends with a call, possibly followed by some      other code that must stay with the call.  */
name|bool
function_decl|(
modifier|*
name|block_ends_with_call_p
function_decl|)
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
comment|/* Say whether a block ends with a conditional branch.  Switches      and unconditional branches do not qualify.  */
name|bool
function_decl|(
modifier|*
name|block_ends_with_condjump_p
function_decl|)
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
comment|/* Add fake edges to the function exit for any non constant and non noreturn      calls, volatile inline assembly in the bitmap of blocks specified by      BLOCKS or to the whole CFG if BLOCKS is zero.  Return the number of blocks      that were split.       The goal is to expose cases in which entering a basic block does not imply      that all subsequent instructions must be executed.  */
name|int
function_decl|(
modifier|*
name|flow_call_edges_add
function_decl|)
parameter_list|(
name|sbitmap
parameter_list|)
function_decl|;
comment|/* This function is called immediately after edge E is added to the      edge vector E->dest->preds.  */
name|void
function_decl|(
modifier|*
name|execute_on_growing_pred
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
comment|/* This function is called immediately before edge E is removed from      the edge vector E->dest->preds.  */
name|void
function_decl|(
modifier|*
name|execute_on_shrinking_pred
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
comment|/* A hook for duplicating loop in CFG, currently this is used      in loop versioning.  */
name|bool
function_decl|(
modifier|*
name|cfg_hook_duplicate_loop_to_header_edge
function_decl|)
parameter_list|(
name|struct
name|loop
modifier|*
name|loop
parameter_list|,
name|edge
name|e
parameter_list|,
name|struct
name|loops
modifier|*
name|loops
parameter_list|,
name|unsigned
name|int
name|ndupl
parameter_list|,
name|sbitmap
name|wont_exit
parameter_list|,
name|edge
name|orig
parameter_list|,
name|edge
modifier|*
name|to_remove
parameter_list|,
name|unsigned
name|int
modifier|*
name|n_to_remove
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
comment|/* Add condition to new basic block and update CFG used in loop      versioning.  */
name|void
function_decl|(
modifier|*
name|lv_add_condition_to_bb
function_decl|)
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Update the PHI nodes in case of loop versioning.  */
name|void
function_decl|(
modifier|*
name|lv_adjust_loop_header_phi
function_decl|)
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|edge
parameter_list|)
function_decl|;
comment|/* Given a condition BB extract the true/false taken/not taken edges      (depending if we are on tree's or RTL). */
name|void
function_decl|(
modifier|*
name|extract_cond_bb_edges
function_decl|)
parameter_list|(
name|basic_block
parameter_list|,
name|edge
modifier|*
parameter_list|,
name|edge
modifier|*
parameter_list|)
function_decl|;
comment|/* Add PHI arguments queued in PENDINT_STMT list on edge E to edge      E->dest (only in tree-ssa loop versioning.  */
name|void
function_decl|(
modifier|*
name|flush_pending_stmts
function_decl|)
parameter_list|(
name|edge
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|verify_flow_info
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|dump_bb
parameter_list|(
name|basic_block
parameter_list|,
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|edge
name|redirect_edge_and_branch
parameter_list|(
name|edge
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|basic_block
name|redirect_edge_and_branch_force
parameter_list|(
name|edge
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|edge
name|split_block
parameter_list|(
name|basic_block
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|edge
name|split_block_after_labels
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|move_block_after
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|delete_basic_block
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|basic_block
name|split_edge
parameter_list|(
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|basic_block
name|create_basic_block
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|basic_block
name|create_empty_bb
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|can_merge_blocks_p
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|merge_blocks
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|edge
name|make_forwarder_block
parameter_list|(
name|basic_block
parameter_list|,
name|bool
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|edge
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|basic_block
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|tidy_fallthru_edge
parameter_list|(
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|tidy_fallthru_edges
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|predict_edge
parameter_list|(
name|edge
name|e
parameter_list|,
name|enum
name|br_predictor
name|predictor
parameter_list|,
name|int
name|probability
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|predicted_by_p
parameter_list|(
name|basic_block
name|bb
parameter_list|,
name|enum
name|br_predictor
name|predictor
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|can_duplicate_block_p
parameter_list|(
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|basic_block
name|duplicate_block
parameter_list|(
name|basic_block
parameter_list|,
name|edge
parameter_list|,
name|basic_block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|block_ends_with_call_p
parameter_list|(
name|basic_block
name|bb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|block_ends_with_condjump_p
parameter_list|(
name|basic_block
name|bb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|flow_call_edges_add
parameter_list|(
name|sbitmap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|execute_on_growing_pred
parameter_list|(
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|execute_on_shrinking_pred
parameter_list|(
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bool
name|cfg_hook_duplicate_loop_to_header_edge
parameter_list|(
name|struct
name|loop
modifier|*
name|loop
parameter_list|,
name|edge
parameter_list|,
name|struct
name|loops
modifier|*
name|loops
parameter_list|,
name|unsigned
name|int
name|ndupl
parameter_list|,
name|sbitmap
name|wont_exit
parameter_list|,
name|edge
name|orig
parameter_list|,
name|edge
modifier|*
name|to_remove
parameter_list|,
name|unsigned
name|int
modifier|*
name|n_to_remove
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|lv_flush_pending_stmts
parameter_list|(
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|extract_cond_bb_edges
parameter_list|(
name|basic_block
parameter_list|,
name|edge
modifier|*
parameter_list|,
name|edge
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|lv_adjust_loop_header_phi
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|edge
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|lv_add_condition_to_bb
parameter_list|(
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|basic_block
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Hooks containers.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|cfg_hooks
name|tree_cfg_hooks
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|cfg_hooks
name|rtl_cfg_hooks
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|cfg_hooks
name|cfg_layout_rtl_cfg_hooks
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Declarations.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|ir_type
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|rtl_register_cfg_hooks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|cfg_layout_rtl_register_cfg_hooks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|tree_register_cfg_hooks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* GCC_CFGHOOKS_H */
end_comment

end_unit

