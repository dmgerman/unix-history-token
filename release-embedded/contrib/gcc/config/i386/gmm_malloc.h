begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2004 Free Software Foundation, Inc.     This file is part of GCC.     GCC is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GCC is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GCC; see the file COPYING.  If not, write to    the Free Software Foundation, 51 Franklin Street, Fifth Floor,    Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MM_MALLOC_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_MM_MALLOC_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_function
specifier|static
name|__inline__
name|void
modifier|*
name|_mm_malloc
parameter_list|(
name|size_t
name|size
parameter_list|,
name|size_t
name|align
parameter_list|)
block|{
name|void
modifier|*
name|malloc_ptr
decl_stmt|;
name|void
modifier|*
name|aligned_ptr
decl_stmt|;
comment|/* Error if align is not a power of two.  */
if|if
condition|(
name|align
operator|&
operator|(
name|align
operator|-
literal|1
operator|)
condition|)
block|{
name|errno
operator|=
name|EINVAL
expr_stmt|;
return|return
operator|(
operator|(
name|void
operator|*
operator|)
literal|0
operator|)
return|;
block|}
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
operator|(
operator|(
name|void
operator|*
operator|)
literal|0
operator|)
return|;
comment|/* Assume malloc'd pointer is aligned at least to sizeof (void*).     If necessary, add another sizeof (void*) to store the value     returned by malloc. Effectively this enforces a minimum alignment     of sizeof double. */
if|if
condition|(
name|align
operator|<
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
condition|)
name|align
operator|=
literal|2
operator|*
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
expr_stmt|;
name|malloc_ptr
operator|=
name|malloc
argument_list|(
name|size
operator|+
name|align
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|malloc_ptr
condition|)
return|return
operator|(
operator|(
name|void
operator|*
operator|)
literal|0
operator|)
return|;
comment|/* Align  We have at least sizeof (void *) space below malloc'd ptr. */
name|aligned_ptr
operator|=
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
operator|(
name|size_t
operator|)
name|malloc_ptr
operator|+
name|align
operator|)
operator|&
operator|~
operator|(
call|(
name|size_t
call|)
argument_list|(
name|align
argument_list|)
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
comment|/* Store the original pointer just before p.  */
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|aligned_ptr
operator|)
index|[
operator|-
literal|1
index|]
operator|=
name|malloc_ptr
expr_stmt|;
return|return
name|aligned_ptr
return|;
block|}
end_function

begin_function
specifier|static
name|__inline__
name|void
name|_mm_free
parameter_list|(
name|void
modifier|*
name|aligned_ptr
parameter_list|)
block|{
if|if
condition|(
name|aligned_ptr
condition|)
name|free
argument_list|(
operator|(
operator|(
name|void
operator|*
operator|*
operator|)
name|aligned_ptr
operator|)
index|[
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MM_MALLOC_H_INCLUDED */
end_comment

end_unit

