begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright(c) 2002-2011 Exar Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification are permitted provided the following conditions are met:  *  *    1. Redistributions of source code must retain the above copyright notice,  *       this list of conditions and the following disclaimer.  *  *    2. Redistributions in binary form must reproduce the above copyright  *       notice, this list of conditions and the following disclaimer in the  *       documentation and/or other materials provided with the distribution.  *  *    3. Neither the name of the Exar Corporation nor the names of its  *       contributors may be used to endorse or promote products derived from  *       this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/*$FreeBSD$*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VXGE_HAL_FIFO_H
end_ifndef

begin_define
define|#
directive|define
name|VXGE_HAL_FIFO_H
end_define

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_comment
comment|/*  * struct __hal_fifo_t - Fifo.  * @channel: Channel "base" of this fifo, the common part of all HAL  *		channels.  * @mempool: Memory pool, from which descriptors get allocated.  * @config: Fifo configuration, part of device configuration  *		(see vxge_hal_device_config_t {}).  * @interrupt_type: Interrupt type to be used  * @no_snoop_bits: See vxge_hal_fifo_config_t {}.  * @memblock_size: Fifo descriptors are allocated in blocks of @mem_block_size  *		bytes. Setting @memblock_size to page size ensures  *		by-page allocation of descriptors. 128K bytes is the  *		maximum supported block size.  * @txdl_per_memblock: Number of TxDLs (TxD lists) per memblock.  *		on TxDL please refer to X3100 UG.  * @txdl_size: Configured TxDL size (i.e., number of TxDs in a list), plus  *		per-TxDL HAL private space (__hal_fifo_txdl_priv_t).  * @txdl_priv_size: Per-TxDL space reserved for HAL and ULD  * @per_txdl_space: Per txdl private space for the ULD  * @txdlblock_priv_size: Total private space per TXDL memory block  * @align_size: Cache alignment size  * @callback: Fifo completion callback. HAL invokes the callback when there  *		are new completions on that fifo. In many implementations  *		the @callback executes in the hw interrupt context.  * @txdl_init: Fifo's descriptor-initialize callback.  *		See vxge_hal_fifo_txdl_init_f {}.  *		If not NULL, HAL invokes the callback when opening  *		the fifo via vxge_hal_vpath_open().  * @txdl_term: Fifo's descriptor-terminate callback. If not NULL,  *		HAL invokes the callback when closing the corresponding fifo.  *		See also vxge_hal_fifo_txdl_term_f {}.  * @stats: Statistics of this fifo  *  * Fifo channel.  * Note: The structure is cache line aligned.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_fifo_t
block|{
name|__hal_channel_t
name|channel
decl_stmt|;
name|vxge_hal_mempool_t
modifier|*
name|mempool
decl_stmt|;
name|vxge_hal_fifo_config_t
modifier|*
name|config
decl_stmt|;
name|u64
name|interrupt_type
decl_stmt|;
name|u32
name|no_snoop_bits
decl_stmt|;
name|u32
name|memblock_size
decl_stmt|;
name|u32
name|txdl_per_memblock
decl_stmt|;
name|u32
name|txdl_size
decl_stmt|;
name|u32
name|txdl_priv_size
decl_stmt|;
name|u32
name|per_txdl_space
decl_stmt|;
name|u32
name|txdlblock_priv_size
decl_stmt|;
name|u32
name|align_size
decl_stmt|;
name|vxge_hal_fifo_callback_f
name|callback
decl_stmt|;
name|vxge_hal_fifo_txdl_init_f
name|txdl_init
decl_stmt|;
name|vxge_hal_fifo_txdl_term_f
name|txdl_term
decl_stmt|;
name|vxge_hal_vpath_stats_sw_fifo_info_t
modifier|*
name|stats
decl_stmt|;
block|}
name|__vxge_os_attr_cacheline_aligned
name|__hal_fifo_t
typedef|;
end_typedef

begin_comment
comment|/*  * struct __hal_fifo_txdl_priv_t - Transmit descriptor HAL-private data.  * @dma_addr: DMA (mapped) address of _this_ descriptor.  * @dma_handle: DMA handle used to map the descriptor onto device.  * @dma_offset: Descriptor's offset in the memory block. HAL allocates  *		  descriptors in memory blocks (see vxge_hal_fifo_config_t {})  *		Each memblock is a contiguous block of DMA-able memory.  * @frags: Total number of fragments (that is, contiguous data buffers)  * carried by this TxDL.  * @align_vaddr_start: Aligned virtual address start  * @align_vaddr: Virtual address of the per-TxDL area in memory used for  *		alignement. Used to place one or more mis-aligned fragments  *		(the maximum defined by configration variable  *		@max_aligned_frags).  * @align_dma_addr: DMA address translated from the @align_vaddr.  * @align_dma_handle: DMA handle that corresponds to @align_dma_addr.  * @align_dma_acch: DMA access handle corresponds to @align_dma_addr.  * @align_dma_offset: The current offset into the @align_vaddr area.  * Grows while filling the descriptor, gets reset.  * @align_used_frags: Number of fragments used.  * @alloc_frags: Total number of fragments allocated.  * @dang_frags: Number of fragments kept from release until this TxDL is freed.  * @bytes_sent:  * @unused:  * @dang_txdl:  * @next_txdl_priv:  * @first_txdp:  * @dang_txdlh: Pointer to TxDL (list) kept from release until this TxDL  *		is freed.  * @linked_txdl_priv: Pointer to any linked TxDL for creating contiguous  *		TxDL list.  * @txdlh: Corresponding txdlh to this TxDL.  * @memblock: Pointer to the TxDL memory block or memory page.  *		on the next send operation.  * @dma_object: DMA address and handle of the memory block that contains  *		the descriptor. This member is used only in the "checked"  *		version of the HAL (to enforce certain assertions);  *		otherwise it gets compiled out.  * @allocated: True if the descriptor is reserved, 0 otherwise. Internal usage.  *  * Per-transmit decsriptor HAL-private data. HAL uses the space to keep DMA  * information associated with the descriptor. Note that ULD can ask HAL  * to allocate additional per-descriptor space for its own (ULD-specific)  * purposes.  *  * See also: vxge_hal_ring_rxd_priv_t {}.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|__hal_fifo_txdl_priv_t
block|{
name|dma_addr_t
name|dma_addr
decl_stmt|;
name|pci_dma_h
name|dma_handle
decl_stmt|;
name|ptrdiff_t
name|dma_offset
decl_stmt|;
name|u32
name|frags
decl_stmt|;
name|u8
modifier|*
name|align_vaddr_start
decl_stmt|;
name|u8
modifier|*
name|align_vaddr
decl_stmt|;
name|dma_addr_t
name|align_dma_addr
decl_stmt|;
name|pci_dma_h
name|align_dma_handle
decl_stmt|;
name|pci_dma_acc_h
name|align_dma_acch
decl_stmt|;
name|ptrdiff_t
name|align_dma_offset
decl_stmt|;
name|u32
name|align_used_frags
decl_stmt|;
name|u32
name|alloc_frags
decl_stmt|;
name|u32
name|dang_frags
decl_stmt|;
name|u32
name|bytes_sent
decl_stmt|;
name|u32
name|unused
decl_stmt|;
name|vxge_hal_fifo_txd_t
modifier|*
name|dang_txdl
decl_stmt|;
name|struct
name|__hal_fifo_txdl_priv_t
modifier|*
name|next_txdl_priv
decl_stmt|;
name|vxge_hal_fifo_txd_t
modifier|*
name|first_txdp
decl_stmt|;
name|void
modifier|*
name|memblock
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|VXGE_DEBUG_ASSERT
argument_list|)
name|vxge_hal_mempool_dma_t
modifier|*
name|dma_object
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|VXGE_OS_MEMORY_CHECK
argument_list|)
name|u32
name|allocated
decl_stmt|;
endif|#
directive|endif
block|}
name|__hal_fifo_txdl_priv_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VXGE_HAL_FIFO_ULD_PRIV
parameter_list|(
name|fifo
parameter_list|,
name|txdh
parameter_list|)
define|\
value|fifo->channel.dtr_arr[						\ 		((vxge_hal_fifo_txd_t *)(txdh))->host_control].uld_priv
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_FIFO_HAL_PRIV
parameter_list|(
name|fifo
parameter_list|,
name|txdh
parameter_list|)
define|\
value|((__hal_fifo_txdl_priv_t *)(fifo->channel.dtr_arr[		\ 		((vxge_hal_fifo_txd_t *)(txdh))->host_control].hal_priv))
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_FIFO_MAX_FRAG_CNT
parameter_list|(
name|fifo
parameter_list|)
value|fifo->config->max_frags
end_define

begin_define
define|#
directive|define
name|VXGE_HAL_FIFO_TXDL_INDEX
parameter_list|(
name|txdp
parameter_list|)
define|\
value|(u32)((vxge_hal_fifo_txd_t *)txdp)->host_control
end_define

begin_comment
comment|/* ========================= FIFO PRIVATE API ============================= */
end_comment

begin_function_decl
name|vxge_hal_status_e
name|__hal_fifo_create
parameter_list|(
name|vxge_hal_vpath_h
name|vpath_handle
parameter_list|,
name|vxge_hal_fifo_attr_t
modifier|*
name|attr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_abort
parameter_list|(
name|vxge_hal_fifo_h
name|fifoh
parameter_list|,
name|vxge_hal_reopen_e
name|reopen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_fifo_reset
parameter_list|(
name|vxge_hal_fifo_h
name|ringh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_delete
parameter_list|(
name|vxge_hal_vpath_h
name|vpath_handle
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_fifo_txdl_free_many
parameter_list|(
name|__hal_fifo_t
modifier|*
name|fifo
parameter_list|,
name|vxge_hal_fifo_txd_t
modifier|*
name|txdp
parameter_list|,
name|u32
name|list_size
parameter_list|,
name|u32
name|frags
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|VXGE_HAL_ALIGN_XMIT
argument_list|)
end_if

begin_function_decl
name|void
name|__hal_fifo_txdl_align_free_unmap
parameter_list|(
name|__hal_fifo_t
modifier|*
name|fifo
parameter_list|,
name|vxge_hal_fifo_txd_t
modifier|*
name|txdp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|vxge_hal_status_e
name|__hal_fifo_txdl_align_alloc_map
parameter_list|(
name|__hal_fifo_t
modifier|*
name|fifo
parameter_list|,
name|vxge_hal_fifo_txd_t
modifier|*
name|txdp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* VXGE_HAL_FIFO_H */
end_comment

end_unit

