begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002-2007 Neterion, Inc.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XGE_HAL_DEVICE_H
end_ifndef

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_H
end_define

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-os-pal.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xge-queue.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-event.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-config.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-regs.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-channel.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-stats.h>
end_include

begin_include
include|#
directive|include
file|<dev/nxge/include/xgehal-ring.h>
end_include

begin_macro
name|__EXTERN_BEGIN_DECLS
end_macro

begin_define
define|#
directive|define
name|XGE_HAL_VPD_LENGTH
value|80
end_define

begin_define
define|#
directive|define
name|XGE_HAL_CARD_XENA_VPD_ADDR
value|0x50
end_define

begin_define
define|#
directive|define
name|XGE_HAL_CARD_HERC_VPD_ADDR
value|0x80
end_define

begin_define
define|#
directive|define
name|XGE_HAL_VPD_READ_COMPLETE
value|0x80
end_define

begin_define
define|#
directive|define
name|XGE_HAL_VPD_BUFFER_SIZE
value|128
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_XMSI_WAIT_MAX_MILLIS
value|500
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_CMDMEM_WAIT_MAX_MILLIS
value|500
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_QUIESCENT_WAIT_MAX_MILLIS
value|500
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_FAULT_WAIT_MAX_MILLIS
value|50
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_RESET_WAIT_MAX_MILLIS
value|250
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEVICE_SPDM_READY_WAIT_MAX_MILLIS
value|250
end_define

begin_comment
comment|/* TODO */
end_comment

begin_define
define|#
directive|define
name|XGE_HAL_MAGIC
value|0x12345678
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DEAD
value|0xDEADDEAD
end_define

begin_define
define|#
directive|define
name|XGE_HAL_DUMP_BUF_SIZE
value|0x4000
end_define

begin_define
define|#
directive|define
name|XGE_HAL_LRO_MAX_BUCKETS
value|32
end_define

begin_comment
comment|/**  * enum xge_hal_card_e - Xframe adapter type.  * @XGE_HAL_CARD_UNKNOWN: Unknown device.  * @XGE_HAL_CARD_XENA: Xframe I device.  * @XGE_HAL_CARD_HERC: Xframe II (PCI-266Mhz) device.  * @XGE_HAL_CARD_TITAN: Xframe ER (PCI-266Mhz) device.  *  * Enumerates Xframe adapter types. The corresponding PCI device  * IDs are listed in the file xgehal-defs.h.  * (See XGE_PCI_DEVICE_ID_XENA_1, etc.)  *  * See also: xge_hal_device_check_id().  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_card_e
block|{
name|XGE_HAL_CARD_UNKNOWN
init|=
literal|0
block|,
name|XGE_HAL_CARD_XENA
init|=
literal|1
block|,
name|XGE_HAL_CARD_HERC
init|=
literal|2
block|,
name|XGE_HAL_CARD_TITAN
init|=
literal|3
block|, }
name|xge_hal_card_e
typedef|;
end_typedef

begin_comment
comment|/**  * struct xge_hal_device_attr_t - Device memory spaces.  * @regh0: BAR0 mapped memory handle (Solaris), or simply PCI device @pdev  *         (Linux and the rest.)  * @regh1: BAR1 mapped memory handle. Same comment as above.  * @bar0: BAR0 virtual address.  * @bar1: BAR1 virtual address.  * @irqh: IRQ handle (Solaris).  * @cfgh: Configuration space handle (Solaris), or PCI device @pdev (Linux).  * @pdev: PCI device object.  *  * Device memory spaces. Includes configuration, BAR0, BAR1, etc. per device  * mapped memories. Also, includes a pointer to OS-specific PCI device object.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_device_attr_t
block|{
name|pci_reg_h
name|regh0
decl_stmt|;
name|pci_reg_h
name|regh1
decl_stmt|;
name|pci_reg_h
name|regh2
decl_stmt|;
name|char
modifier|*
name|bar0
decl_stmt|;
name|char
modifier|*
name|bar1
decl_stmt|;
name|char
modifier|*
name|bar2
decl_stmt|;
name|pci_irq_h
name|irqh
decl_stmt|;
name|pci_cfg_h
name|cfgh
decl_stmt|;
name|pci_dev_h
name|pdev
decl_stmt|;
block|}
name|xge_hal_device_attr_t
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_device_link_state_e - Link state enumeration.  * @XGE_HAL_LINK_NONE: Invalid link state.  * @XGE_HAL_LINK_DOWN: Link is down.  * @XGE_HAL_LINK_UP: Link is up.  *  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_device_link_state_e
block|{
name|XGE_HAL_LINK_NONE
block|,
name|XGE_HAL_LINK_DOWN
block|,
name|XGE_HAL_LINK_UP
block|}
name|xge_hal_device_link_state_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_pci_mode_e - PIC bus speed and mode specific enumeration.  * @XGE_HAL_PCI_33MHZ_MODE:     33 MHZ pci mode.  * @XGE_HAL_PCI_66MHZ_MODE:     66 MHZ pci mode.  * @XGE_HAL_PCIX_M1_66MHZ_MODE:     PCIX M1 66MHZ mode.  * @XGE_HAL_PCIX_M1_100MHZ_MODE:    PCIX M1 100MHZ mode.  * @XGE_HAL_PCIX_M1_133MHZ_MODE:    PCIX M1 133MHZ mode.  * @XGE_HAL_PCIX_M2_66MHZ_MODE:     PCIX M2 66MHZ mode.  * @XGE_HAL_PCIX_M2_100MHZ_MODE:    PCIX M2 100MHZ mode.  * @XGE_HAL_PCIX_M2_133MHZ_MODE:    PCIX M3 133MHZ mode.  * @XGE_HAL_PCIX_M1_RESERVED:       PCIX M1 reserved mode.  * @XGE_HAL_PCIX_M1_66MHZ_NS:       PCIX M1 66MHZ mode not supported.  * @XGE_HAL_PCIX_M1_100MHZ_NS:      PCIX M1 100MHZ mode not supported.  * @XGE_HAL_PCIX_M1_133MHZ_NS:      PCIX M1 133MHZ not supported.  * @XGE_HAL_PCIX_M2_RESERVED:       PCIX M2 reserved.  * @XGE_HAL_PCIX_533_RESERVED:      PCIX 533 reserved.  * @XGE_HAL_PCI_BASIC_MODE:     PCI basic mode, XENA specific value.  * @XGE_HAL_PCIX_BASIC_MODE:        PCIX basic mode, XENA specific value.  * @XGE_HAL_PCI_INVALID_MODE:       Invalid PCI or PCIX mode.  *  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_pci_mode_e
block|{
name|XGE_HAL_PCI_33MHZ_MODE
init|=
literal|0x0
block|,
name|XGE_HAL_PCI_66MHZ_MODE
init|=
literal|0x1
block|,
name|XGE_HAL_PCIX_M1_66MHZ_MODE
init|=
literal|0x2
block|,
name|XGE_HAL_PCIX_M1_100MHZ_MODE
init|=
literal|0x3
block|,
name|XGE_HAL_PCIX_M1_133MHZ_MODE
init|=
literal|0x4
block|,
name|XGE_HAL_PCIX_M2_66MHZ_MODE
init|=
literal|0x5
block|,
name|XGE_HAL_PCIX_M2_100MHZ_MODE
init|=
literal|0x6
block|,
name|XGE_HAL_PCIX_M2_133MHZ_MODE
init|=
literal|0x7
block|,
name|XGE_HAL_PCIX_M1_RESERVED
init|=
literal|0x8
block|,
name|XGE_HAL_PCIX_M1_66MHZ_NS
init|=
literal|0xA
block|,
name|XGE_HAL_PCIX_M1_100MHZ_NS
init|=
literal|0xB
block|,
name|XGE_HAL_PCIX_M1_133MHZ_NS
init|=
literal|0xC
block|,
name|XGE_HAL_PCIX_M2_RESERVED
init|=
literal|0xD
block|,
name|XGE_HAL_PCIX_533_RESERVED
init|=
literal|0xE
block|,
name|XGE_HAL_PCI_BASIC_MODE
init|=
literal|0x10
block|,
name|XGE_HAL_PCIX_BASIC_MODE
init|=
literal|0x11
block|,
name|XGE_HAL_PCI_INVALID_MODE
init|=
literal|0x12
block|, }
name|xge_hal_pci_mode_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_pci_bus_frequency_e - PCI bus frequency enumeration.  * @XGE_HAL_PCI_BUS_FREQUENCY_33MHZ:    PCI bus frequency 33MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_66MHZ:    PCI bus frequency 66MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_100MHZ:   PCI bus frequency 100MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_133MHZ:   PCI bus frequency 133MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_200MHZ:   PCI bus frequency 200MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_250MHZ:   PCI bus frequency 250MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_266MHZ:   PCI bus frequency 266MHZ  * @XGE_HAL_PCI_BUS_FREQUENCY_UNKNOWN:  Unrecognized PCI bus frequency value.  *  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_pci_bus_frequency_e
block|{
name|XGE_HAL_PCI_BUS_FREQUENCY_33MHZ
init|=
literal|33
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_66MHZ
init|=
literal|66
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_100MHZ
init|=
literal|100
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_133MHZ
init|=
literal|133
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_200MHZ
init|=
literal|200
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_250MHZ
init|=
literal|250
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_266MHZ
init|=
literal|266
block|,
name|XGE_HAL_PCI_BUS_FREQUENCY_UNKNOWN
init|=
literal|0
block|}
name|xge_hal_pci_bus_frequency_e
typedef|;
end_typedef

begin_comment
comment|/**  * enum xge_hal_pci_bus_width_e - PCI bus width enumeration.  * @XGE_HAL_PCI_BUS_WIDTH_64BIT:    64 bit bus width.  * @XGE_HAL_PCI_BUS_WIDTH_32BIT:    32 bit bus width.  * @XGE_HAL_PCI_BUS_WIDTH_UNKNOWN:  unknown bus width.  *  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|xge_hal_pci_bus_width_e
block|{
name|XGE_HAL_PCI_BUS_WIDTH_64BIT
init|=
literal|0
block|,
name|XGE_HAL_PCI_BUS_WIDTH_32BIT
init|=
literal|1
block|,
name|XGE_HAL_PCI_BUS_WIDTH_UNKNOWN
init|=
literal|2
block|, }
name|xge_hal_pci_bus_width_e
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_CONFIG_LRO
argument_list|)
end_if

begin_define
define|#
directive|define
name|IP_TOTAL_LENGTH_OFFSET
value|2
end_define

begin_define
define|#
directive|define
name|IP_FAST_PATH_HDR_MASK
value|0x45
end_define

begin_define
define|#
directive|define
name|TCP_FAST_PATH_HDR_MASK1
value|0x50
end_define

begin_define
define|#
directive|define
name|TCP_FAST_PATH_HDR_MASK2
value|0x10
end_define

begin_define
define|#
directive|define
name|TCP_FAST_PATH_HDR_MASK3
value|0x18
end_define

begin_define
define|#
directive|define
name|IP_SOURCE_ADDRESS_OFFSET
value|12
end_define

begin_define
define|#
directive|define
name|IP_DESTINATION_ADDRESS_OFFSET
value|16
end_define

begin_define
define|#
directive|define
name|TCP_DESTINATION_PORT_OFFSET
value|2
end_define

begin_define
define|#
directive|define
name|TCP_SOURCE_PORT_OFFSET
value|0
end_define

begin_define
define|#
directive|define
name|TCP_DATA_OFFSET_OFFSET
value|12
end_define

begin_define
define|#
directive|define
name|TCP_WINDOW_OFFSET
value|14
end_define

begin_define
define|#
directive|define
name|TCP_SEQUENCE_NUMBER_OFFSET
value|4
end_define

begin_define
define|#
directive|define
name|TCP_ACKNOWLEDGEMENT_NUMBER_OFFSET
value|8
end_define

begin_typedef
typedef|typedef
struct|struct
name|tcplro
block|{
name|u16
name|source
decl_stmt|;
name|u16
name|dest
decl_stmt|;
name|u32
name|seq
decl_stmt|;
name|u32
name|ack_seq
decl_stmt|;
name|u8
name|doff_res
decl_stmt|;
name|u8
name|ctrl
decl_stmt|;
name|u16
name|window
decl_stmt|;
name|u16
name|check
decl_stmt|;
name|u16
name|urg_ptr
decl_stmt|;
block|}
name|tcplro_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|iplro
block|{
name|u8
name|version_ihl
decl_stmt|;
name|u8
name|tos
decl_stmt|;
name|u16
name|tot_len
decl_stmt|;
name|u16
name|id
decl_stmt|;
name|u16
name|frag_off
decl_stmt|;
name|u8
name|ttl
decl_stmt|;
name|u8
name|protocol
decl_stmt|;
name|u16
name|check
decl_stmt|;
name|u32
name|saddr
decl_stmt|;
name|u32
name|daddr
decl_stmt|;
comment|/*The options start here. */
block|}
name|iplro_t
typedef|;
end_typedef

begin_comment
comment|/*  * LRO object, one per each LRO session. */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|lro
block|{
comment|/* non-linear: contains scatter-gather list of 	xframe-mapped received buffers */
name|OS_NETSTACK_BUF
name|os_buf
decl_stmt|;
name|OS_NETSTACK_BUF
name|os_buf_end
decl_stmt|;
comment|/* link layer header of the first frame; 	remains intack throughout the processing */
name|u8
modifier|*
name|ll_hdr
decl_stmt|;
comment|/* IP header - gets _collapsed_ */
name|iplro_t
modifier|*
name|ip_hdr
decl_stmt|;
comment|/* transport header - gets _collapsed_ */
name|tcplro_t
modifier|*
name|tcp_hdr
decl_stmt|;
comment|/* Next tcp sequence number */
name|u32
name|tcp_next_seq_num
decl_stmt|;
comment|/* Current tcp seq& ack */
name|u32
name|tcp_seq_num
decl_stmt|;
name|u32
name|tcp_ack_num
decl_stmt|;
comment|/* total number of accumulated (so far) frames */
name|int
name|sg_num
decl_stmt|;
comment|/* total data length */
name|int
name|total_length
decl_stmt|;
comment|/* receive side hash value, available from Hercules */
name|u32
name|rth_value
decl_stmt|;
comment|/* In use */
name|u8
name|in_use
decl_stmt|;
comment|/* Total length of the fragments clubbed with the inital frame */
name|u32
name|frags_len
decl_stmt|;
comment|/* LRO frame contains time stamp, if (ts_off != -1) */
name|int
name|ts_off
decl_stmt|;
block|}
name|lro_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * xge_hal_spdm_entry_t  *  * Represents a single spdm entry in the SPDM table.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_spdm_entry_t
block|{
name|xge_hal_ipaddr_t
name|src_ip
decl_stmt|;
name|xge_hal_ipaddr_t
name|dst_ip
decl_stmt|;
name|u32
name|jhash_value
decl_stmt|;
name|u16
name|l4_sp
decl_stmt|;
name|u16
name|l4_dp
decl_stmt|;
name|u16
name|spdm_entry
decl_stmt|;
name|u8
name|in_use
decl_stmt|;
name|u8
name|is_tcp
decl_stmt|;
name|u8
name|is_ipv4
decl_stmt|;
name|u8
name|tgt_queue
decl_stmt|;
block|}
name|xge_hal_spdm_entry_t
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_CONFIG_LRO
argument_list|)
end_if

begin_typedef
typedef|typedef
struct|struct
block|{
name|lro_t
name|lro_pool
index|[
name|XGE_HAL_LRO_MAX_BUCKETS
index|]
decl_stmt|;
name|int
name|lro_next_idx
decl_stmt|;
name|lro_t
modifier|*
name|lro_recent
decl_stmt|;
block|}
name|xge_hal_lro_desc_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * xge_hal_vpd_data_t  *   * Represents vpd capabilty structure  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|xge_hal_vpd_data_t
block|{
name|u8
name|product_name
index|[
name|XGE_HAL_VPD_LENGTH
index|]
decl_stmt|;
name|u8
name|serial_num
index|[
name|XGE_HAL_VPD_LENGTH
index|]
decl_stmt|;
block|}
name|xge_hal_vpd_data_t
typedef|;
end_typedef

begin_comment
comment|/*  * xge_hal_device_t  *  * HAL device object. Represents Xframe.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|unsigned
name|int
name|magic
decl_stmt|;
name|pci_reg_h
name|regh0
decl_stmt|;
name|pci_reg_h
name|regh1
decl_stmt|;
name|pci_reg_h
name|regh2
decl_stmt|;
name|char
modifier|*
name|bar0
decl_stmt|;
name|char
modifier|*
name|isrbar0
decl_stmt|;
name|char
modifier|*
name|bar1
decl_stmt|;
name|char
modifier|*
name|bar2
decl_stmt|;
name|pci_irq_h
name|irqh
decl_stmt|;
name|pci_cfg_h
name|cfgh
decl_stmt|;
name|pci_dev_h
name|pdev
decl_stmt|;
name|xge_hal_pci_config_t
name|pci_config_space
decl_stmt|;
name|xge_hal_pci_config_t
name|pci_config_space_bios
decl_stmt|;
name|xge_hal_device_config_t
name|config
decl_stmt|;
name|xge_list_t
name|free_channels
decl_stmt|;
name|xge_list_t
name|fifo_channels
decl_stmt|;
name|xge_list_t
name|ring_channels
decl_stmt|;
specifier|volatile
name|int
name|is_initialized
decl_stmt|;
specifier|volatile
name|int
name|terminating
decl_stmt|;
name|xge_hal_stats_t
name|stats
decl_stmt|;
name|macaddr_t
name|macaddr
index|[
literal|1
index|]
decl_stmt|;
name|xge_queue_h
name|queueh
decl_stmt|;
specifier|volatile
name|int
name|mcast_refcnt
decl_stmt|;
name|int
name|is_promisc
decl_stmt|;
specifier|volatile
name|xge_hal_device_link_state_e
name|link_state
decl_stmt|;
name|void
modifier|*
name|upper_layer_info
decl_stmt|;
name|xge_hal_device_attr_t
name|orig_attr
decl_stmt|;
name|u16
name|device_id
decl_stmt|;
name|u8
name|revision
decl_stmt|;
name|int
name|msi_enabled
decl_stmt|;
name|int
name|hw_is_initialized
decl_stmt|;
name|u64
name|inject_serr
decl_stmt|;
name|u64
name|inject_ecc
decl_stmt|;
name|u8
name|inject_bad_tcode
decl_stmt|;
name|int
name|inject_bad_tcode_for_chan_type
decl_stmt|;
name|int
name|reset_needed_after_close
decl_stmt|;
name|int
name|tti_enabled
decl_stmt|;
name|xge_hal_tti_config_t
name|bimodal_tti
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
name|int
name|bimodal_timer_val_us
decl_stmt|;
name|int
name|bimodal_urange_a_en
decl_stmt|;
name|int
name|bimodal_intr_cnt
decl_stmt|;
name|char
modifier|*
name|spdm_mem_base
decl_stmt|;
name|u16
name|spdm_max_entries
decl_stmt|;
name|xge_hal_spdm_entry_t
modifier|*
modifier|*
name|spdm_table
decl_stmt|;
name|spinlock_t
name|spdm_lock
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_CONFIG_LRO
argument_list|)
name|xge_hal_lro_desc_t
name|lro_desc
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
endif|#
directive|endif
name|spinlock_t
name|xena_post_lock
decl_stmt|;
comment|/* bimodal workload stats */
name|int
name|irq_workload_rxd
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
name|int
name|irq_workload_rxcnt
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
name|int
name|irq_workload_rxlen
index|[
name|XGE_HAL_MAX_RING_NUM
index|]
decl_stmt|;
name|int
name|irq_workload_txd
index|[
name|XGE_HAL_MAX_FIFO_NUM
index|]
decl_stmt|;
name|int
name|irq_workload_txcnt
index|[
name|XGE_HAL_MAX_FIFO_NUM
index|]
decl_stmt|;
name|int
name|irq_workload_txlen
index|[
name|XGE_HAL_MAX_FIFO_NUM
index|]
decl_stmt|;
name|int
name|mtu_first_time_set
decl_stmt|;
name|u64
name|rxufca_lbolt
decl_stmt|;
name|u64
name|rxufca_lbolt_time
decl_stmt|;
name|u64
name|rxufca_intr_thres
decl_stmt|;
name|char
modifier|*
name|dump_buf
decl_stmt|;
name|xge_hal_pci_mode_e
name|pci_mode
decl_stmt|;
name|xge_hal_pci_bus_frequency_e
name|bus_frequency
decl_stmt|;
name|xge_hal_pci_bus_width_e
name|bus_width
decl_stmt|;
name|xge_hal_vpd_data_t
name|vpd_data
decl_stmt|;
specifier|volatile
name|int
name|in_poll
decl_stmt|;
name|u64
name|msix_vector_table
index|[
name|XGE_HAL_MAX_MSIX_MESSAGES_WITH_ADDR
index|]
decl_stmt|;
block|}
name|xge_hal_device_t
typedef|;
end_typedef

begin_comment
comment|/* ========================== PRIVATE API ================================= */
end_comment

begin_function_decl
name|void
name|__hal_device_event_queued
parameter_list|(
name|void
modifier|*
name|data
parameter_list|,
name|int
name|event_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_set_swapper
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rth_it_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rth_spdm_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_verify_pcc_idle
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|adp_status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_pic
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_read_spdm_entry_line
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u8
name|spdm_line
parameter_list|,
name|u16
name|spdm_entry
parameter_list|,
name|u64
modifier|*
name|spdm_line_val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_pio_mem_write32_upper
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u32
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_pio_mem_write32_lower
parameter_list|(
name|pci_dev_h
name|pdev
parameter_list|,
name|pci_reg_h
name|regh
parameter_list|,
name|u32
name|val
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_get_vpd_data
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_txpic
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_txdma
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_txmac
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_txxgxs
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_rxpic
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_rxdma
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_rxmac
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_rxxgxs
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_handle_mc
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_register_poll
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
modifier|*
name|reg
parameter_list|,
name|int
name|op
parameter_list|,
name|u64
name|mask
parameter_list|,
name|int
name|max_millis
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rts_mac_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rts_qos_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rts_port_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|__hal_device_rti_configure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|runtime
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_msi_intr_endis
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|__hal_device_msix_intr_endis
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|xge_hal_channel_t
modifier|*
name|channel
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* =========================== PUBLIC API ================================= */
end_comment

begin_function_decl
name|unsigned
name|int
name|__hal_fix_time_ival_herc
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|unsigned
name|int
name|time_ival
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_rts_rth_itable_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u8
modifier|*
name|itable
parameter_list|,
name|u32
name|itable_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_rts_rth_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u8
name|def_q
parameter_list|,
name|u64
name|hash_type
parameter_list|,
name|u16
name|bucket_size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_rts_rth_init
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_rts_rth_clr
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_rts_rth_start
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_rts_rth_stop
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_rts_rth_key_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u8
name|KeySize
parameter_list|,
name|u8
modifier|*
name|Key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_rts_mac_enable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|index
parameter_list|,
name|macaddr_t
name|macaddr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_rts_mac_disable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|xge_hal_reinitialize_hw
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_fix_rldram_ecc_error
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * xge_hal_device_rti_reconfigure  * @hldev: Hal Device  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_hal_status_e
name|xge_hal_device_rti_reconfigure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
block|{
return|return
name|__hal_device_rti_configure
argument_list|(
name|hldev
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_rts_port_reconfigure  * @hldev: Hal Device  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_hal_status_e
name|xge_hal_device_rts_port_reconfigure
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
block|{
return|return
name|__hal_device_rts_port_configure
argument_list|(
name|hldev
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_is_initialized - Returns 0 if device is not  * initialized, non-zero otherwise.  * @devh: HAL device handle.  *  * Returns 0 if device is not initialized, non-zero otherwise.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xge_hal_device_is_initialized
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|is_initialized
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_in_poll - non-zero, if xge_hal_device_poll() is executing.  * @devh: HAL device handle.  *  * Returns non-zero if xge_hal_device_poll() is executing, and 0 - otherwise.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xge_hal_device_in_poll
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|in_poll
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_inject_ecc - Inject ECC error.  * @devh: HAL device, pointer to xge_hal_device_t structure.  * @err_reg: Contains the error register.  *  * This function is used to inject ECC error into the driver flow.  * This facility can be used to test the driver flow in the  * case of ECC error is reported by the firmware.  *  * Returns: void  * See also: xge_hal_device_inject_serr(),  * xge_hal_device_inject_bad_tcode()  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xge_hal_device_inject_ecc
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|u64
name|err_reg
parameter_list|)
block|{
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|inject_ecc
operator|=
name|err_reg
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_inject_serr - Inject SERR error.  * @devh: HAL device, pointer to xge_hal_device_t structure.  * @err_reg: Contains the error register.  *  * This function is used to inject SERR error into the driver flow.  * This facility can be used to test the driver flow in the  * case of SERR error is reported by firmware.  *  * Returns: void  * See also: xge_hal_device_inject_ecc(),  * xge_hal_device_inject_bad_tcode()  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xge_hal_device_inject_serr
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|u64
name|err_reg
parameter_list|)
block|{
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|inject_serr
operator|=
name|err_reg
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_inject_bad_tcode - Inject  Bad transfer code.  * @devh: HAL device, pointer to xge_hal_device_t structure.  * @chan_type: Channel type (fifo/ring).  * @t_code: Transfer code.  *  * This function is used to inject bad (Tx/Rx Data)transfer code  * into the driver flow.  *  * This facility can be used to test the driver flow in the  * case of bad transfer code reported by firmware for a Tx/Rx data  * transfer.  *  * Returns: void  * See also: xge_hal_device_inject_ecc(), xge_hal_device_inject_serr()  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xge_hal_device_inject_bad_tcode
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|chan_type
parameter_list|,
name|u8
name|t_code
parameter_list|)
block|{
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|inject_bad_tcode_for_chan_type
operator|=
name|chan_type
expr_stmt|;
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|inject_bad_tcode
operator|=
name|t_code
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|xge_hal_device_msi_enable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * xge_hal_device_msi_mode - Is MSI enabled?  * @devh: HAL device handle.  *  * Returns 0 if MSI is enabled for the specified device,  * non-zero otherwise.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|xge_hal_device_msi_mode
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|msi_enabled
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_queue - Get per-device event queue.  * @devh: HAL device handle.  *  * Returns: event queue associated with the specified HAL device.  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_queue_h
name|xge_hal_device_queue
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|queueh
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_attr - Get original (user-specified) device  * attributes.  * @devh: HAL device handle.  *  * Returns: original (user-specified) device attributes.  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_hal_device_attr_t
modifier|*
name|xge_hal_device_attr
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|&
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|orig_attr
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_private_set - Set ULD context.  * @devh: HAL device handle.  * @data: pointer to ULD context  *  * Use HAL device to set upper-layer driver (ULD) context.  *  * See also: xge_hal_device_from_private(), xge_hal_device_private()  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|xge_hal_device_private_set
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
block|{
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|upper_layer_info
operator|=
name|data
expr_stmt|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_private - Get ULD context.  * @devh: HAL device handle.  *  * Use HAL device to get upper-layer driver (ULD) context.  *  * Returns:  ULD context.  *  * See also: xge_hal_device_from_private(), xge_hal_device_private_set()  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|xge_hal_device_private
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
block|{
return|return
operator|(
operator|(
name|xge_hal_device_t
operator|*
operator|)
name|devh
operator|)
operator|->
name|upper_layer_info
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_from_private - Get HAL device object from private.  * @info_ptr: ULD context.  *  * Use ULD context to get HAL device.  *  * Returns:  Device handle.  *  * See also: xge_hal_device_private(), xge_hal_device_private_set()  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_hal_device_h
name|xge_hal_device_from_private
parameter_list|(
name|void
modifier|*
name|info_ptr
parameter_list|)
block|{
return|return
name|xge_container_of
argument_list|(
operator|(
name|void
operator|*
operator|*
operator|)
name|info_ptr
argument_list|,
name|xge_hal_device_t
argument_list|,
name|upper_layer_info
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**  * xge_hal_device_mtu_check - check MTU value for ranges  * @hldev: the device  * @new_mtu: new MTU value to check  *  * Will do sanity check for new MTU value.  *  * Returns: XGE_HAL_OK - success.  * XGE_HAL_ERR_INVALID_MTU_SIZE - MTU is invalid.  *  * See also: xge_hal_device_mtu_set()  */
end_comment

begin_function
specifier|static
specifier|inline
name|xge_hal_status_e
name|xge_hal_device_mtu_check
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|new_mtu
parameter_list|)
block|{
if|if
condition|(
operator|(
name|new_mtu
operator|<
name|XGE_HAL_MIN_MTU
operator|)
operator|||
operator|(
name|new_mtu
operator|>
name|XGE_HAL_MAX_MTU
operator|)
condition|)
block|{
return|return
name|XGE_HAL_ERR_INVALID_MTU_SIZE
return|;
block|}
return|return
name|XGE_HAL_OK
return|;
block|}
end_function

begin_function_decl
name|void
name|xge_hal_device_bcast_enable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_bcast_disable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_terminating
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_initialize
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|xge_hal_device_attr_t
modifier|*
name|attr
parameter_list|,
name|xge_hal_device_config_t
modifier|*
name|config
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_terminate
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_reset
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_macaddr_get
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|index
parameter_list|,
name|macaddr_t
modifier|*
name|macaddr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_macaddr_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|index
parameter_list|,
name|macaddr_t
name|macaddr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_macaddr_clear
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|xge_hal_device_macaddr_find
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|macaddr_t
name|wanted
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_mtu_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|new_mtu
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_status
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
modifier|*
name|hw_status
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_intr_enable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_intr_disable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_mcast_enable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_mcast_disable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_promisc_enable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_promisc_disable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_disable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_enable
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_handle_tcode
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|xge_hal_dtr_h
name|dtrh
parameter_list|,
name|u8
name|t_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_link_state
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|xge_hal_device_link_state_e
modifier|*
name|ls
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_sched_timer
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|interval_us
parameter_list|,
name|int
name|one_shot
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_device_poll
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_card_e
name|xge_hal_device_check_id
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|xge_hal_device_is_slot_freeze
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_pci_info_get
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|xge_hal_pci_mode_e
modifier|*
name|pci_mode
parameter_list|,
name|xge_hal_pci_bus_frequency_e
modifier|*
name|bus_frequency
parameter_list|,
name|xge_hal_pci_bus_width_e
modifier|*
name|bus_width
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_spdm_entry_add
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|xge_hal_ipaddr_t
modifier|*
name|src_ip
parameter_list|,
name|xge_hal_ipaddr_t
modifier|*
name|dst_ip
parameter_list|,
name|u16
name|l4_sp
parameter_list|,
name|u16
name|l4_dp
parameter_list|,
name|u8
name|is_tcp
parameter_list|,
name|u8
name|is_ipv4
parameter_list|,
name|u8
name|tgt_queue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_spdm_entry_remove
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|xge_hal_ipaddr_t
modifier|*
name|src_ip
parameter_list|,
name|xge_hal_ipaddr_t
modifier|*
name|dst_ip
parameter_list|,
name|u16
name|l4_sp
parameter_list|,
name|u16
name|l4_dp
parameter_list|,
name|u8
name|is_tcp
parameter_list|,
name|u8
name|is_ipv4
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_device_rts_section_enable
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|xge_hal_device_is_closed
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* private functions, don't use them in ULD */
end_comment

begin_function_decl
name|void
name|__hal_serial_mem_write64
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
name|value
parameter_list|,
name|u64
modifier|*
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u64
name|__hal_serial_mem_read64
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
modifier|*
name|reg
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Some function protoypes for MSI implementation. */
end_comment

begin_function_decl
name|xge_hal_status_e
name|xge_hal_channel_msi_set
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|int
name|msi
parameter_list|,
name|u32
name|msg_val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_mask_msi
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_unmask_msi
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_channel_msix_set
parameter_list|(
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|int
name|msix_idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_mask_msix
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|msi_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|xge_hal_status_e
name|xge_hal_unmask_msix
parameter_list|(
name|xge_hal_device_h
name|devh
parameter_list|,
name|int
name|msi_id
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_CONFIG_LRO
argument_list|)
end_if

begin_function_decl
name|xge_hal_status_e
name|xge_hal_lro_init
parameter_list|(
name|u32
name|lro_scale
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|xge_hal_lro_terminate
parameter_list|(
name|u32
name|lro_scale
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_DEBUG_FP
argument_list|)
operator|&&
operator|(
name|XGE_DEBUG_FP
operator|&
name|XGE_DEBUG_FP_DEVICE
operator|)
end_if

begin_define
define|#
directive|define
name|__HAL_STATIC_DEVICE
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_DEVICE
end_define

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|int
name|xge_hal_device_rev
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_begin_irq
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|u64
modifier|*
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_clear_rx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_clear_tx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_continue_irq
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_handle_irq
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|char
modifier|*
name|xge_hal_device_bar0
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|char
modifier|*
name|xge_hal_device_isrbar0
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|char
modifier|*
name|xge_hal_device_bar1
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_bar0_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|char
modifier|*
name|bar0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_isrbar0_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|char
modifier|*
name|isrbar0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_bar1_set
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|xge_hal_channel_h
name|channelh
parameter_list|,
name|char
modifier|*
name|bar1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_mask_tx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_mask_rx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_mask_all
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_unmask_tx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_unmask_rx
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|void
name|xge_hal_device_unmask_all
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_poll_tx_channels
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
modifier|*
name|got_tx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_poll_rx_channels
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
modifier|*
name|got_rx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_poll_rx_channel
parameter_list|(
name|xge_hal_channel_t
modifier|*
name|channel
parameter_list|,
name|int
modifier|*
name|got_rx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_DEVICE
name|__HAL_INLINE_DEVICE
name|xge_hal_status_e
name|xge_hal_device_poll_tx_channel
parameter_list|(
name|xge_hal_channel_t
modifier|*
name|channel
parameter_list|,
name|int
modifier|*
name|got_tx
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|XGE_HAL_CONFIG_LRO
argument_list|)
end_if

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|u8
name|__hal_header_parse_token_u8
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|u16
name|__hal_header_parse_token_u16
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|u32
name|__hal_header_parse_token_u32
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_header_update_u8
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|,
name|u8
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_header_update_u16
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|,
name|u16
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_header_update_u32
parameter_list|(
name|u8
modifier|*
name|string
parameter_list|,
name|u16
name|offset
parameter_list|,
name|u32
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|u16
name|__hal_tcp_seg_len
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_ip_lro_capable
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|xge_hal_dtr_info_t
modifier|*
name|ext_info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_tcp_lro_capable
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
name|lro
parameter_list|,
name|int
modifier|*
name|ts_off
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_lro_capable
parameter_list|(
name|u8
modifier|*
name|buffer
parameter_list|,
name|iplro_t
modifier|*
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
modifier|*
name|tcp
parameter_list|,
name|xge_hal_dtr_info_t
modifier|*
name|ext_info
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_get_lro_session
parameter_list|(
name|u8
modifier|*
name|eth_hdr
parameter_list|,
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro
parameter_list|,
name|xge_hal_dtr_info_t
modifier|*
name|ext_info
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|xge_hal_lro_desc_t
modifier|*
name|ring_lro
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro_end3
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_lro_under_optimal_thresh
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
name|lro
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_collapse_ip_hdr
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
name|lro
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_collapse_tcp_hdr
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
name|lro
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|__hal_append_lro
parameter_list|(
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
modifier|*
name|tcp
parameter_list|,
name|u32
modifier|*
name|seg_len
parameter_list|,
name|lro_t
modifier|*
name|lro
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|xge_hal_lro_process_rx
parameter_list|(
name|int
name|ring
parameter_list|,
name|u8
modifier|*
name|eth_hdr
parameter_list|,
name|u8
modifier|*
name|ip_hdr
parameter_list|,
name|tcplro_t
modifier|*
modifier|*
name|tcp
parameter_list|,
name|u32
modifier|*
name|seglen
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|p_lro
parameter_list|,
name|xge_hal_dtr_info_t
modifier|*
name|ext_info
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro_end3
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|xge_hal_status_e
name|xge_hal_accumulate_large_rx
parameter_list|(
name|u8
modifier|*
name|buffer
parameter_list|,
name|tcplro_t
modifier|*
modifier|*
name|tcp
parameter_list|,
name|u32
modifier|*
name|seglen
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro
parameter_list|,
name|xge_hal_dtr_info_t
modifier|*
name|ext_info
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro_end3
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|lro_t
modifier|*
name|xge_hal_lro_next_session
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|int
name|ring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|lro_t
modifier|*
name|xge_hal_lro_get_next_session
parameter_list|(
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|void
name|__hal_open_lro_session
parameter_list|(
name|u8
modifier|*
name|buffer
parameter_list|,
name|iplro_t
modifier|*
name|ip
parameter_list|,
name|tcplro_t
modifier|*
name|tcp
parameter_list|,
name|lro_t
modifier|*
modifier|*
name|lro
parameter_list|,
name|xge_hal_device_t
modifier|*
name|hldev
parameter_list|,
name|xge_hal_lro_desc_t
modifier|*
name|ring_lro
parameter_list|,
name|int
name|slot
parameter_list|,
name|u32
name|tcp_seg_len
parameter_list|,
name|int
name|ts_off
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|__HAL_STATIC_CHANNEL
name|__HAL_INLINE_CHANNEL
name|int
name|__hal_lro_get_free_slot
parameter_list|(
name|xge_hal_lro_desc_t
modifier|*
name|ring_lro
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* XGE_FASTPATH_EXTERN */
end_comment

begin_define
define|#
directive|define
name|__HAL_STATIC_DEVICE
value|static
end_define

begin_define
define|#
directive|define
name|__HAL_INLINE_DEVICE
value|inline
end_define

begin_include
include|#
directive|include
file|<dev/nxge/xgehal/xgehal-device-fp.c>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_FASTPATH_INLINE */
end_comment

begin_macro
name|__EXTERN_END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XGE_HAL_DEVICE_H */
end_comment

end_unit

