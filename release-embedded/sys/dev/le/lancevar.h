begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$NetBSD: lancevar.h,v 1.10 2005/12/11 12:21:27 christos Exp $	*/
end_comment

begin_comment
comment|/*-  * Copyright (c) 1997, 1998 The NetBSD Foundation, Inc.  * All rights reserved.  *  * This code is derived from software contributed to The NetBSD Foundation  * by Charles M. Hannum and by Jason R. Thorpe of the Numerical Aerospace  * Simulation Facility, NASA Ames Research Center.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED  * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS  * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEV_LE_LANCEVAR_H_
end_ifndef

begin_define
define|#
directive|define
name|_DEV_LE_LANCEVAR_H_
end_define

begin_decl_stmt
specifier|extern
name|devclass_t
name|le_devclass
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|lance_softc
block|{
name|struct
name|ifnet
modifier|*
name|sc_ifp
decl_stmt|;
name|struct
name|ifmedia
name|sc_media
decl_stmt|;
name|struct
name|mtx
name|sc_mtx
decl_stmt|;
name|struct
name|callout
name|sc_wdog_ch
decl_stmt|;
name|int
name|sc_wdog_timer
decl_stmt|;
comment|/* 	 * Memory functions: 	 * 	 *	copy to/from descriptor 	 *	copy to/from buffer 	 *	zero bytes in buffer 	 */
name|void
function_decl|(
modifier|*
name|sc_copytodesc
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_copyfromdesc
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_copytobuf
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_copyfrombuf
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_zerobuf
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* 	 * Machine-dependent functions: 	 * 	 *	read/write CSR 	 *	hardware reset hook - may be NULL 	 *	hardware init hook - may be NULL 	 *	no carrier hook - may be NULL 	 *	media change hook - may be NULL 	 */
name|uint16_t
function_decl|(
modifier|*
name|sc_rdcsr
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_wrcsr
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|uint16_t
parameter_list|,
name|uint16_t
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_hwreset
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_hwinit
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sc_hwintr
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_nocarrier
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sc_mediachange
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_mediastatus
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|struct
name|ifmediareq
modifier|*
parameter_list|)
function_decl|;
comment|/* 	 * Media-supported by this interface.  If this is NULL, 	 * the only supported media is assumed to be "manual". 	 */
specifier|const
name|int
modifier|*
name|sc_supmedia
decl_stmt|;
name|int
name|sc_nsupmedia
decl_stmt|;
name|int
name|sc_defaultmedia
decl_stmt|;
name|uint16_t
name|sc_conf3
decl_stmt|;
comment|/* CSR3 value */
name|void
modifier|*
name|sc_mem
decl_stmt|;
comment|/* base address of RAM - CPU's view */
name|bus_addr_t
name|sc_addr
decl_stmt|;
comment|/* base address of RAM - LANCE's view */
name|bus_size_t
name|sc_memsize
decl_stmt|;
comment|/* size of RAM */
name|int
name|sc_nrbuf
decl_stmt|;
comment|/* number of receive buffers */
name|int
name|sc_ntbuf
decl_stmt|;
comment|/* number of transmit buffers */
name|int
name|sc_last_rd
decl_stmt|;
name|int
name|sc_first_td
decl_stmt|;
name|int
name|sc_last_td
decl_stmt|;
name|int
name|sc_no_td
decl_stmt|;
name|int
name|sc_initaddr
decl_stmt|;
name|int
name|sc_rmdaddr
decl_stmt|;
name|int
name|sc_tmdaddr
decl_stmt|;
name|int
name|sc_rbufaddr
decl_stmt|;
name|int
name|sc_tbufaddr
decl_stmt|;
name|uint8_t
name|sc_enaddr
index|[
name|ETHER_ADDR_LEN
index|]
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sc_meminit
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|sc_start_locked
function_decl|)
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
name|int
name|sc_flags
decl_stmt|;
define|#
directive|define
name|LE_ALLMULTI
value|(1<< 0)
define|#
directive|define
name|LE_BSWAP
value|(1<< 1)
define|#
directive|define
name|LE_CARRIER
value|(1<< 2)
define|#
directive|define
name|LE_DEBUG
value|(1<< 3)
define|#
directive|define
name|LE_PROMISC
value|(1<< 4)
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|LE_LOCK_INIT
parameter_list|(
name|_sc
parameter_list|,
name|_name
parameter_list|)
define|\
value|mtx_init(&(_sc)->sc_mtx, _name, MTX_NETWORK_LOCK, MTX_DEF)
end_define

begin_define
define|#
directive|define
name|LE_LOCK_INITIALIZED
parameter_list|(
name|_sc
parameter_list|)
value|mtx_initialized(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|LE_LOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_lock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|LE_UNLOCK
parameter_list|(
name|_sc
parameter_list|)
value|mtx_unlock(&(_sc)->sc_mtx)
end_define

begin_define
define|#
directive|define
name|LE_LOCK_ASSERT
parameter_list|(
name|_sc
parameter_list|,
name|_what
parameter_list|)
value|mtx_assert(&(_sc)->sc_mtx, (_what))
end_define

begin_define
define|#
directive|define
name|LE_LOCK_DESTROY
parameter_list|(
name|_sc
parameter_list|)
value|mtx_destroy(&(_sc)->sc_mtx)
end_define

begin_comment
comment|/*  * Unfortunately, manual byte swapping is only necessary for the PCnet-PCI  * variants but not for the original LANCE or ILACC so we cannot do this  * with #ifdefs resolved at compile time.  */
end_comment

begin_define
define|#
directive|define
name|LE_HTOLE16
parameter_list|(
name|v
parameter_list|)
value|(((sc)->sc_flags& LE_BSWAP) ? htole16(v) : (v))
end_define

begin_define
define|#
directive|define
name|LE_HTOLE32
parameter_list|(
name|v
parameter_list|)
value|(((sc)->sc_flags& LE_BSWAP) ? htole32(v) : (v))
end_define

begin_define
define|#
directive|define
name|LE_LE16TOH
parameter_list|(
name|v
parameter_list|)
value|(((sc)->sc_flags& LE_BSWAP) ? le16toh(v) : (v))
end_define

begin_define
define|#
directive|define
name|LE_LE32TOH
parameter_list|(
name|v
parameter_list|)
value|(((sc)->sc_flags& LE_BSWAP) ? le32toh(v) : (v))
end_define

begin_function_decl
name|int
name|lance_config
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_attach
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_detach
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_suspend
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_resume
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_init_locked
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lance_put
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|mbuf
modifier|*
name|lance_get
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_setladrf
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * The following functions are only useful on certain CPU/bus  * combinations.  They should be written in assembly language for  * maximum efficiency, but machine-independent versions are provided  * for drivers that have not yet been optimized.  */
end_comment

begin_function_decl
name|void
name|lance_copytobuf_contig
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_copyfrombuf_contig
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lance_zerobuf_contig
parameter_list|(
name|struct
name|lance_softc
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
comment|/* Example only - see lance.c */
end_comment

begin_endif
unit|void lance_copytobuf_gap2(struct lance_softc *, void *, int, int); void lance_copyfrombuf_gap2(struct lance_softc *, void *, int, int); void lance_zerobuf_gap2(struct lance_softc *, int, int);  void lance_copytobuf_gap16(struct lance_softc *, void *, int, int); void lance_copyfrombuf_gap16(struct lance_softc *, void *, int, int); void lance_zerobuf_gap16(struct lance_softc *, int, int);
endif|#
directive|endif
end_endif

begin_comment
comment|/* Example only */
end_comment

begin_comment
comment|/*  * Compare two Ether/802 addresses for equality, inlined and  * unrolled for speed.  Use this like memcmp().  *  * XXX: Add<machine/inlines.h> for stuff like this?  * XXX: or maybe add it to libkern.h instead?  *  * "I'd love to have an inline assembler version of this."  * XXX: Who wanted that? mycroft?  I wrote one, but this  * version in C is as good as hand-coded assembly. -gwr  *  * Please do NOT tweak this without looking at the actual  * assembly code generated before and after your tweaks!  */
end_comment

begin_function
specifier|static
specifier|inline
name|uint16_t
name|ether_cmp
parameter_list|(
name|void
modifier|*
name|one
parameter_list|,
name|void
modifier|*
name|two
parameter_list|)
block|{
name|uint16_t
modifier|*
name|a
init|=
operator|(
name|u_short
operator|*
operator|)
name|one
decl_stmt|;
name|uint16_t
modifier|*
name|b
init|=
operator|(
name|u_short
operator|*
operator|)
name|two
decl_stmt|;
name|uint16_t
name|diff
decl_stmt|;
ifdef|#
directive|ifdef
name|m68k
comment|/* 	 * The post-increment-pointer form produces the best 	 * machine code for m68k.  This was carefully tuned 	 * so it compiles to just 8 short (2-byte) op-codes! 	 */
name|diff
operator|=
operator|*
name|a
operator|++
operator|-
operator|*
name|b
operator|++
expr_stmt|;
name|diff
operator||=
operator|*
name|a
operator|++
operator|-
operator|*
name|b
operator|++
expr_stmt|;
name|diff
operator||=
operator|*
name|a
operator|++
operator|-
operator|*
name|b
operator|++
expr_stmt|;
else|#
directive|else
comment|/* 	 * Most modern CPUs do better with a single expresion. 	 * Note that short-cut evaluation is NOT helpful here, 	 * because it just makes the code longer, not faster! 	 */
name|diff
operator|=
operator|(
name|a
index|[
literal|0
index|]
operator|-
name|b
index|[
literal|0
index|]
operator|)
operator||
operator|(
name|a
index|[
literal|1
index|]
operator|-
name|b
index|[
literal|1
index|]
operator|)
operator||
operator|(
name|a
index|[
literal|2
index|]
operator|-
name|b
index|[
literal|2
index|]
operator|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|diff
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEV_LE_LANCEVAR_H_ */
end_comment

end_unit

