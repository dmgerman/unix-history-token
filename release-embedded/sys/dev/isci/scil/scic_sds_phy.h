begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SCIC_SDS_PHY_H_
end_ifndef

begin_define
define|#
directive|define
name|_SCIC_SDS_PHY_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains the structures, constants and prototypes for the  *        SCIC_SDS_PHY object.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|// __cplusplus
include|#
directive|include
file|<dev/isci/scil/intel_sata.h>
include|#
directive|include
file|<dev/isci/scil/intel_sas.h>
include|#
directive|include
file|<dev/isci/scil/sci_base_phy.h>
include|#
directive|include
file|<dev/isci/scil/scu_registers.h>
include|#
directive|include
file|<dev/isci/scil/scu_event_codes.h>
comment|/**  * This is the timeout value for the SATA phy to wait for a SIGNATURE FIS  * before restarting the starting state machine.  Technically, the old  * parallel ATA specification required up to 30 seconds for a device to  * issue its signature FIS as a result of a soft reset.  Now we see that  * devices respond generally within 15 seconds, but we'll use 25 for now.  */
define|#
directive|define
name|SCIC_SDS_SIGNATURE_FIS_TIMEOUT
value|25000
comment|/**  * This is the timeout for the SATA OOB/SN because the hardware does not  * recognize a hot plug after OOB signal but before the SN signals.  We  * need to make sure after a hotplug timeout if we have not received the  * speed event notification from the hardware that we restart the hardware  * OOB state machine.  */
define|#
directive|define
name|SCIC_SDS_SATA_LINK_TRAINING_TIMEOUT
value|250
comment|/**  * @enum SCIC_SDS_PHY_STARTING_SUBSTATES  */
enum|enum
name|SCIC_SDS_PHY_STARTING_SUBSTATES
block|{
comment|/**     * Initial state     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_INITIAL
block|,
comment|/**     * Wait state for the hardware OSSP event type notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_OSSP_EN
block|,
comment|/**     * Wait state for the PHY speed notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SAS_SPEED_EN
block|,
comment|/**     * Wait state for the IAF Unsolicited frame notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_IAF_UF
block|,
comment|/**     * Wait state for the request to consume power     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SAS_POWER
block|,
comment|/**     * Wait state for request to consume power     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SATA_POWER
block|,
comment|/**     * Wait state for the SATA PHY notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SATA_PHY_EN
block|,
comment|/**     * Wait for the SATA PHY speed notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SATA_SPEED_EN
block|,
comment|/**     * Wait state for the SIGNATURE FIS unsolicited frame notification     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_AWAIT_SIG_FIS_UF
block|,
comment|/**     * Exit state for this state machine     */
name|SCIC_SDS_PHY_STARTING_SUBSTATE_FINAL
block|,
comment|/**     * Maximum number of substates for the STARTING state machine     */
name|SCIC_SDS_PHY_STARTING_MAX_SUBSTATES
block|}
enum|;
struct_decl|struct
name|SCIC_SDS_PORT
struct_decl|;
struct_decl|struct
name|SCIC_SDS_CONTROLLER
struct_decl|;
ifdef|#
directive|ifdef
name|SCIC_DEBUG_ENABLED
define|#
directive|define
name|MAX_STATE_TRANSITION_RECORD
value|(256)
comment|/**  * Debug code to record the state transitions for the phy object  */
typedef|typedef
struct|struct
name|SCIC_SDS_PHY_STATE_RECORD
block|{
name|SCI_BASE_OBSERVER_T
name|base_state_observer
decl_stmt|;
name|SCI_BASE_OBSERVER_T
name|starting_state_observer
decl_stmt|;
name|U16
name|index
decl_stmt|;
name|U32
name|state_transition_table
index|[
name|MAX_STATE_TRANSITION_RECORD
index|]
decl_stmt|;
block|}
name|SCIC_SDS_PHY_STATE_RECORD_T
typedef|;
endif|#
directive|endif
comment|// SCIC_DEBUG_ENABLED
comment|/**  * @enum  *  * @brief This enumeration provides a named phy type for the state machine  */
enum|enum
name|SCIC_SDS_PHY_PROTOCOL
block|{
comment|/**     * This is an unknown phy type since there is either nothing on the other     * end or we have not detected the phy type as yet.     */
name|SCIC_SDS_PHY_PROTOCOL_UNKNOWN
block|,
comment|/**     * This is a SAS PHY     */
name|SCIC_SDS_PHY_PROTOCOL_SAS
block|,
comment|/**     * This is a SATA PHY     */
name|SCIC_SDS_PHY_PROTOCOL_SATA
block|,
name|SCIC_SDS_MAX_PHY_PROTOCOLS
block|}
enum|;
comment|/**  * @struct SCIC_SDS_PHY  *  * @brief This structure  contains or references all of the data necessary to  *        represent the core phy object and SCU harware protocol engine.  */
typedef|typedef
struct|struct
name|SCIC_SDS_PHY
block|{
name|SCI_BASE_PHY_T
name|parent
decl_stmt|;
comment|/**     * This field specifies the port object that owns/contains this phy.     */
name|struct
name|SCIC_SDS_PORT
modifier|*
name|owning_port
decl_stmt|;
comment|/**     * This field indicates whether the phy supports 1.5 Gb/s, 3.0 Gb/s,     * or 6.0 Gb/s operation.     */
name|SCI_SAS_LINK_RATE
name|max_negotiated_speed
decl_stmt|;
comment|/**     * This member specifies the protocol being utilized on this phy.  This     * field contains a legitamite value once the PHY has link trained with     * a remote phy.     */
name|enum
name|SCIC_SDS_PHY_PROTOCOL
name|protocol
decl_stmt|;
comment|/**     * This field specifies the index with which this phy is associated (0-3).     */
name|U8
name|phy_index
decl_stmt|;
comment|/**     * This member indicates if this particular PHY has received a BCN while     * it had no port assignement.  This BCN will be reported once the phy is     * assigned to a port.     */
name|BOOL
name|bcn_received_while_port_unassigned
decl_stmt|;
comment|/**     * This field indicates if this PHY is currently in the process of     * link training (i.e. it has started OOB, but has yet to perform     * IAF exchange/Signature FIS reception).     */
name|BOOL
name|is_in_link_training
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_T
name|identify_address_frame_buffer
decl_stmt|;
block|}
name|sas
struct|;
struct|struct
block|{
name|SATA_FIS_REG_D2H_T
name|signature_fis_buffer
decl_stmt|;
block|}
name|sata
struct|;
block|}
name|phy_type
union|;
comment|/**     * This field contains a reference to the timer utilized in detecting     * when a signature FIS timeout has occurred.  The signature FIS is the     * first FIS sent by an attached SATA device after OOB/SN.     */
name|void
modifier|*
name|sata_timeout_timer
decl_stmt|;
name|struct
name|SCIC_SDS_PHY_STATE_HANDLER
modifier|*
name|state_handlers
decl_stmt|;
name|SCI_BASE_STATE_MACHINE_T
name|starting_substate_machine
decl_stmt|;
ifdef|#
directive|ifdef
name|SCI_LOGGING
name|SCI_BASE_STATE_MACHINE_LOGGER_T
name|starting_substate_machine_logger
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SCIC_DEBUG_ENABLED
name|SCIC_SDS_PHY_STATE_RECORD_T
name|state_record
decl_stmt|;
endif|#
directive|endif
comment|// SCIC_DEBUG_ENABLED
comment|/**     * This field tracks how many errors of each type have been detected since     *  the last controller reset or counter clear.  Note that these are only     *  for the error types that our driver needs to count manually.  See     *  SCU_ERR_CNT_* values defined in scu_event_codes.h.     */
name|U32
name|error_counter
index|[
name|SCU_ERR_CNT_MAX_INDEX
index|]
decl_stmt|;
comment|/**     * This field is the pointer to the transport layer register for the SCU     * hardware.     */
name|SCU_TRANSPORT_LAYER_REGISTERS_T
modifier|*
name|transport_layer_registers
decl_stmt|;
comment|/**     * This field points to the link layer register set within the SCU.     */
name|SCU_LINK_LAYER_REGISTERS_T
modifier|*
name|link_layer_registers
decl_stmt|;
block|}
name|SCIC_SDS_PHY_T
typedef|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PHY_EVENT_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
parameter_list|,
name|U32
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PHY_FRAME_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
parameter_list|,
name|U32
parameter_list|)
function_decl|;
typedef|typedef
name|SCI_STATUS
function_decl|(
modifier|*
name|SCIC_SDS_PHY_POWER_HANDLER_T
function_decl|)
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
parameter_list|)
function_decl|;
comment|/**  * @struct SCIC_SDS_PHY_STATE_HANDLER  */
typedef|typedef
struct|struct
name|SCIC_SDS_PHY_STATE_HANDLER
block|{
comment|/**     * This is the SCI_BASE_PHY object state handlers.     */
name|SCI_BASE_PHY_STATE_HANDLER_T
name|parent
decl_stmt|;
comment|/**     * The state handler for unsolicited frames received from the SCU hardware.     */
name|SCIC_SDS_PHY_FRAME_HANDLER_T
name|frame_handler
decl_stmt|;
comment|/**     * The state handler for events received from the SCU hardware.     */
name|SCIC_SDS_PHY_EVENT_HANDLER_T
name|event_handler
decl_stmt|;
comment|/**     * The state handler for staggered spinup.     */
name|SCIC_SDS_PHY_POWER_HANDLER_T
name|consume_power_handler
decl_stmt|;
block|}
name|SCIC_SDS_PHY_STATE_HANDLER_T
typedef|;
specifier|extern
name|SCIC_SDS_PHY_STATE_HANDLER_T
name|scic_sds_phy_state_handler_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_phy_state_table
index|[]
decl_stmt|;
specifier|extern
name|SCI_BASE_STATE_T
name|scic_sds_phy_starting_substates
index|[]
decl_stmt|;
specifier|extern
name|SCIC_SDS_PHY_STATE_HANDLER_T
name|scic_sds_phy_starting_substate_handler_table
index|[]
decl_stmt|;
comment|/**  * This macro returns the phy index for the specified phy  */
define|#
directive|define
name|scic_sds_phy_get_index
parameter_list|(
name|phy
parameter_list|)
define|\
value|((phy)->phy_index)
comment|/**  * @brief This macro returns the controller for this phy  */
define|#
directive|define
name|scic_sds_phy_get_controller
parameter_list|(
name|phy
parameter_list|)
define|\
value|(scic_sds_port_get_controller((phy)->owning_port))
comment|/**  * @brief This macro returns the state machine for the base phy  */
define|#
directive|define
name|scic_sds_phy_get_base_state_machine
parameter_list|(
name|phy
parameter_list|)
define|\
value|(&(phy)->parent.state_machine)
comment|/**  * @brief This macro returns the starting substate machine for  *        this phy  */
define|#
directive|define
name|scic_sds_phy_get_starting_substate_machine
parameter_list|(
name|phy
parameter_list|)
define|\
value|(&(phy)->starting_substate_machine)
comment|/**  * @brief This macro sets the state handlers for this phy object  */
define|#
directive|define
name|scic_sds_phy_set_state_handlers
parameter_list|(
name|phy
parameter_list|,
name|handlers
parameter_list|)
define|\
value|((phy)->state_handlers = (handlers))
comment|/**  * This macro set the base state handlers for the phy object.  */
define|#
directive|define
name|scic_sds_phy_set_base_state_handlers
parameter_list|(
name|phy
parameter_list|,
name|state_id
parameter_list|)
define|\
value|scic_sds_phy_set_state_handlers( \       (phy), \&scic_sds_phy_state_handler_table[(state_id)] \    )
comment|/**  * This macro returns TRUE if the current base state for this phy is  * SCI_BASE_PHY_STATE_READY  */
define|#
directive|define
name|scic_sds_phy_is_ready
parameter_list|(
name|phy
parameter_list|)
define|\
value|( \          SCI_BASE_PHY_STATE_READY \       == sci_base_state_machine_get_state( \             scic_sds_phy_get_base_state_machine(phy) \          ) \    )
comment|// ---------------------------------------------------------------------------
name|U32
name|scic_sds_phy_get_object_size
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_phy_get_min_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|U32
name|scic_sds_phy_get_max_timer_count
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_phy_construct
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|owning_port
parameter_list|,
name|U8
name|phy_index
parameter_list|)
function_decl|;
name|SCI_PORT_HANDLE_T
name|scic_sds_phy_get_port
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_set_port
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|,
name|struct
name|SCIC_SDS_PORT
modifier|*
name|owning_port
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_initialize
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|void
modifier|*
name|transport_layer_registers
parameter_list|,
name|SCU_LINK_LAYER_REGISTERS_T
modifier|*
name|link_layer_registers
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_reset
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_sata_timeout
parameter_list|(
name|SCI_OBJECT_HANDLE_T
name|cookie
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|void
name|scic_sds_phy_suspend
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_resume
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_setup_transport
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|,
name|U32
name|device_id
parameter_list|)
function_decl|;
comment|// ---------------------------------------------------------------------------
name|SCI_STATUS
name|scic_sds_phy_event_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|U32
name|event_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_frame_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_consume_power_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_get_sas_address
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|SCI_SAS_ADDRESS_T
modifier|*
name|sas_address
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_get_attached_sas_address
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|SCI_SAS_ADDRESS_T
modifier|*
name|sas_address
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_get_protocols
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS_T
modifier|*
name|protocols
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_get_attached_phy_protocols
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|this_phy
parameter_list|,
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS_T
modifier|*
name|protocols
parameter_list|)
function_decl|;
comment|//****************************************************************************-
comment|//* SCIC SDS PHY Handler Methods
comment|//****************************************************************************-
name|SCI_STATUS
name|scic_sds_phy_default_start_handler
parameter_list|(
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_stop_handler
parameter_list|(
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_reset_handler
parameter_list|(
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_destroy_handler
parameter_list|(
name|SCI_BASE_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_frame_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|phy
parameter_list|,
name|U32
name|frame_index
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_event_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|phy
parameter_list|,
name|U32
name|evnet_code
parameter_list|)
function_decl|;
name|SCI_STATUS
name|scic_sds_phy_default_consume_power_handler
parameter_list|(
name|SCIC_SDS_PHY_T
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_release_resource
parameter_list|(
name|struct
name|SCIC_SDS_CONTROLLER
modifier|*
name|controller
parameter_list|,
name|struct
name|SCIC_SDS_PHY
modifier|*
name|phy
parameter_list|)
function_decl|;
name|void
name|scic_sds_phy_restart_starting_state
parameter_list|(
name|struct
name|SCIC_SDS_PHY
modifier|*
name|this_phy
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _SCIC_SDS_PHY_H_
end_comment

end_unit

