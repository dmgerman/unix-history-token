begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This file is provided under a dual BSD/GPLv2 license.  When using or  * redistributing this file, you may do so under either license.  *  * GPL LICENSE SUMMARY  *  * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of version 2 of the GNU General Public License as  * published by the Free Software Foundation.  *  * This program is distributed in the hope that it will be useful, but  * WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * General Public License for more details.  *  * You should have received a copy of the GNU General Public License  * along with this program; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.  * The full GNU General Public License is included in this distribution  * in the file called LICENSE.GPL.  *  * BSD LICENSE  *  * Copyright(c) 2008 - 2010 Intel Corporation. All rights reserved.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *   * Redistributions in binary form must reproduce the above copyright  *     notice, this list of conditions and the following disclaimer in  *     the documentation and/or other materials provided with the  *     distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_INTEL_SAS_H_
end_ifndef

begin_define
define|#
directive|define
name|_INTEL_SAS_H_
end_define

begin_comment
comment|/**  * @file  *  * @brief This file contains all of the definitions relating to structures,  *        constants, etc. defined by the SAS specification.  */
end_comment

begin_include
include|#
directive|include
file|<dev/isci/types.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/intel_sata.h>
end_include

begin_include
include|#
directive|include
file|<dev/isci/scil/intel_scsi.h>
end_include

begin_comment
comment|/**  * @struct SCI_SAS_ADDRESS  * @brief  This structure depicts how a SAS address is represented by SCI.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SAS_ADDRESS
block|{
comment|/**     * This member contains the higher 32-bits of the SAS address.     */
name|U32
name|high
decl_stmt|;
comment|/**     * This member contains the lower 32-bits of the SAS address.     */
name|U32
name|low
decl_stmt|;
block|}
name|SCI_SAS_ADDRESS_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS  * @brief  This structure depicts the contents of bytes 2 and 3 in the  *         SAS IDENTIFY ADDRESS FRAME (IAF).  *         @note For specific information on each of these  *               individual fields please reference the SAS specification  *               Link layer section on address frames.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS
block|{
union|union
block|{
struct|struct
block|{
name|U16
name|restricted1
range|:
literal|1
decl_stmt|;
name|U16
name|smp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|stp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|ssp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|reserved3
range|:
literal|4
decl_stmt|;
name|U16
name|restricted2
range|:
literal|1
decl_stmt|;
name|U16
name|smp_target
range|:
literal|1
decl_stmt|;
name|U16
name|stp_target
range|:
literal|1
decl_stmt|;
name|U16
name|ssp_target
range|:
literal|1
decl_stmt|;
name|U16
name|reserved4
range|:
literal|4
decl_stmt|;
block|}
name|bits
struct|;
name|U16
name|all
decl_stmt|;
block|}
name|u
union|;
block|}
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SCI_SAS_IDENTIFY_ADDRESS_FRAME  * @brief  This structure depicts the contents of the SAS IDENTIFY ADDRESS  *         FRAME (IAF).  *         @note For specific information on each of these  *               individual fields please reference the SAS specification  *               Link layer section on address frames.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME
block|{
name|U16
name|address_frame_type
range|:
literal|4
decl_stmt|;
name|U16
name|device_type
range|:
literal|3
decl_stmt|;
name|U16
name|reserved1
range|:
literal|1
decl_stmt|;
name|U16
name|reason
range|:
literal|4
decl_stmt|;
name|U16
name|reserved2
range|:
literal|4
decl_stmt|;
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_PROTOCOLS_T
name|protocols
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|device_name
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|sas_address
decl_stmt|;
name|U32
name|phy_identifier
range|:
literal|8
decl_stmt|;
name|U32
name|break_reply_capable
range|:
literal|1
decl_stmt|;
name|U32
name|requested_in_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|in_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved5
range|:
literal|21
decl_stmt|;
name|U32
name|reserved6
index|[
literal|4
index|]
decl_stmt|;
block|}
name|SCI_SAS_IDENTIFY_ADDRESS_FRAME_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SAS_CAPABILITIES  * @brief  This structure depicts the various SAS capabilities supported  *         by the directly attached target device.  For specific information  *         on each of these individual fields please reference the SAS  *         specification Phy layer section on speed negotiation windows.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SAS_CAPABILITIES
block|{
union|union
block|{
if|#
directive|if
name|defined
argument_list|(
name|SCIC_SDS_4_ENABLED
argument_list|)
struct|struct
block|{
comment|/**           * The SAS specification indicates the start bit shall always be set to           * 1.  This implementation will have the start bit set to 0 if the           * PHY CAPABILITIES were either not received or speed negotiation failed.           */
name|U32
name|start
range|:
literal|1
decl_stmt|;
name|U32
name|tx_ssc_type
range|:
literal|1
decl_stmt|;
name|U32
name|reserved1
range|:
literal|2
decl_stmt|;
name|U32
name|requested_logical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|gen1_without_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|gen1_with_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|gen2_without_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|gen2_with_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|gen3_without_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|gen3_with_ssc_supported
range|:
literal|1
decl_stmt|;
name|U32
name|reserved2
range|:
literal|17
decl_stmt|;
name|U32
name|parity
range|:
literal|1
decl_stmt|;
block|}
name|bits
struct|;
endif|#
directive|endif
comment|// (SCIC_SDS_4_ENABLED)
name|U32
name|all
decl_stmt|;
block|}
name|u
union|;
block|}
name|SAS_CAPABILITIES_T
typedef|;
end_typedef

begin_comment
comment|/**  * @enum  _SCI_SAS_LINK_RATE  * @brief This enumeration depicts the SAS specification defined link speeds.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_SCI_SAS_LINK_RATE
block|{
name|SCI_SAS_NO_LINK_RATE
init|=
literal|0
block|,
name|SCI_SATA_SPINUP_HOLD
init|=
literal|0x3
block|,
name|SCI_SAS_150_GB
init|=
literal|0x8
block|,
name|SCI_SAS_300_GB
init|=
literal|0x9
block|,
name|SCI_SAS_600_GB
init|=
literal|0xA
block|}
name|SCI_SAS_LINK_RATE
typedef|;
end_typedef

begin_comment
comment|/**  * @enum  _SCI_SAS_TASK_ATTRIBUTE  * @brief This enumeration depicts the SAM/SAS specification defined task  *        attribute values for a command information unit.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_SCI_SAS_TASK_ATTRIBUTE
block|{
name|SCI_SAS_SIMPLE_ATTRIBUTE
init|=
literal|0
block|,
name|SCI_SAS_HEAD_OF_QUEUE_ATTRIBUTE
init|=
literal|1
block|,
name|SCI_SAS_ORDERED_ATTRIBUTE
init|=
literal|2
block|,
name|SCI_SAS_ACA_ATTRIBUTE
init|=
literal|4
block|, }
name|SCI_SAS_TASK_ATTRIBUTE
typedef|;
end_typedef

begin_comment
comment|/**  * @enum  _SCI_SAS_TASK_MGMT_FUNCTION  * @brief This enumeration depicts the SAM/SAS specification defined task  *        management functions.  *        @note This HARD_RESET function listed here is not actually defined  *              as a task management function in the industry standard.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_SCI_SAS_TASK_MGMT_FUNCTION
block|{
name|SCI_SAS_ABORT_TASK
init|=
name|SCSI_TASK_REQUEST_ABORT_TASK
block|,
name|SCI_SAS_ABORT_TASK_SET
init|=
name|SCSI_TASK_REQUEST_ABORT_TASK_SET
block|,
name|SCI_SAS_CLEAR_TASK_SET
init|=
name|SCSI_TASK_REQUEST_CLEAR_TASK_SET
block|,
name|SCI_SAS_LOGICAL_UNIT_RESET
init|=
name|SCSI_TASK_REQUEST_LOGICAL_UNIT_RESET
block|,
name|SCI_SAS_I_T_NEXUS_RESET
init|=
name|SCSI_TASK_REQUEST_I_T_NEXUS_RESET
block|,
name|SCI_SAS_CLEAR_ACA
init|=
name|SCSI_TASK_REQUEST_CLEAR_ACA
block|,
name|SCI_SAS_QUERY_TASK
init|=
name|SCSI_TASK_REQUEST_QUERY_TASK
block|,
name|SCI_SAS_QUERY_TASK_SET
init|=
name|SCSI_TASK_REQUEST_QUERY_TASK_SET
block|,
name|SCI_SAS_QUERY_ASYNCHRONOUS_EVENT
init|=
name|SCSI_TASK_REQUEST_QUERY_UNIT_ATTENTION
block|,
name|SCI_SAS_HARD_RESET
init|=
literal|0xFF
block|}
name|SCI_SAS_TASK_MGMT_FUNCTION_T
typedef|;
end_typedef

begin_comment
comment|/**  * @enum  _SCI_SAS_FRAME_TYPE  * @brief This enumeration depicts the SAS specification defined SSP frame  *        types.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_SCI_SAS_FRAME_TYPE
block|{
name|SCI_SAS_DATA_FRAME
init|=
literal|0x01
block|,
name|SCI_SAS_XFER_RDY_FRAME
init|=
literal|0x05
block|,
name|SCI_SAS_COMMAND_FRAME
init|=
literal|0x06
block|,
name|SCI_SAS_RESPONSE_FRAME
init|=
literal|0x07
block|,
name|SCI_SAS_TASK_FRAME
init|=
literal|0x16
block|}
name|SCI_SAS_FRAME_TYPE_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SCI_SSP_COMMAND_IU  * @brief This structure depicts the contents of the SSP COMMAND  *        INFORMATION UNIT. For specific information on each of these  *        individual fields please reference the SAS specification SSP  *        transport layer section.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SSP_COMMAND_IU
block|{
name|U32
name|lun
index|[
literal|2
index|]
decl_stmt|;
name|U32
name|additional_cdb_length
range|:
literal|6
decl_stmt|;
name|U32
name|reserved0
range|:
literal|2
decl_stmt|;
name|U32
name|reserved1
range|:
literal|8
decl_stmt|;
name|U32
name|enable_first_burst
range|:
literal|1
decl_stmt|;
name|U32
name|task_priority
range|:
literal|4
decl_stmt|;
name|U32
name|task_attribute
range|:
literal|3
decl_stmt|;
name|U32
name|reserved2
range|:
literal|8
decl_stmt|;
name|U32
name|cdb
index|[
literal|4
index|]
decl_stmt|;
block|}
name|SCI_SSP_COMMAND_IU_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SCI_SSP_TASK_IU  * @brief This structure depicts the contents of the SSP TASK INFORMATION  *        UNIT. For specific information on each of these individual fields  *        please reference the SAS specification SSP transport layer  *        section.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SSP_TASK_IU
block|{
name|U32
name|lun_upper
decl_stmt|;
name|U32
name|lun_lower
decl_stmt|;
name|U32
name|reserved0
range|:
literal|8
decl_stmt|;
name|U32
name|task_function
range|:
literal|8
decl_stmt|;
name|U32
name|reserved1
range|:
literal|8
decl_stmt|;
name|U32
name|reserved2
range|:
literal|8
decl_stmt|;
name|U32
name|reserved3
range|:
literal|16
decl_stmt|;
name|U32
name|task_tag
range|:
literal|16
decl_stmt|;
name|U32
name|reserved4
index|[
literal|3
index|]
decl_stmt|;
block|}
name|SCI_SSP_TASK_IU_T
typedef|;
end_typedef

begin_define
define|#
directive|define
name|SSP_RESPONSE_IU_MAX_DATA
value|64
end_define

begin_define
define|#
directive|define
name|SCI_SSP_RESPONSE_IU_DATA_PRESENT_MASK
value|(0x03)
end_define

begin_comment
comment|/**  * @struct SCI_SSP_RESPONSE_IU  * @brief This structure depicts the contents of the SSP RESPONSE  *        INFORMATION UNIT. For specific information on each of these  *        individual fields please reference the SAS specification SSP  *        transport layer section.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SSP_RESPONSE_IU
block|{
name|U8
name|reserved0
index|[
literal|8
index|]
decl_stmt|;
name|U8
name|retry_delay_timer
index|[
literal|2
index|]
decl_stmt|;
name|U8
name|data_present
decl_stmt|;
name|U8
name|status
decl_stmt|;
name|U8
name|reserved1
index|[
literal|4
index|]
decl_stmt|;
name|U8
name|sense_data_length
index|[
literal|4
index|]
decl_stmt|;
name|U8
name|response_data_length
index|[
literal|4
index|]
decl_stmt|;
name|U32
name|data
index|[
name|SSP_RESPONSE_IU_MAX_DATA
index|]
decl_stmt|;
block|}
name|SCI_SSP_RESPONSE_IU_T
typedef|;
end_typedef

begin_comment
comment|/**  * @enum  _SCI_SAS_DATA_PRESENT_TYPE  * @brief This enumeration depicts the SAS specification defined SSP data present  *        types in SCI_SSP_RESPONSE_IU.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|_SCI_SSP_RESPONSE_IU_DATA_PRESENT_TYPE
block|{
name|SCI_SSP_RESPONSE_IU_NO_DATA
init|=
literal|0x00
block|,
name|SCI_SSP_RESPONSE_IU_RESPONSE_DATA
init|=
literal|0x01
block|,
name|SCI_SSP_RESPONSE_IU_SENSE_DATA
init|=
literal|0x02
block|}
name|SCI_SSP_RESPONSE_IU_DATA_PRESENT_TYPE_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SCI_SSP_FRAME_HEADER  *  * @brief This structure depicts the contents of an SSP frame header.  For  *        specific information on the individual fields please reference  *        the SAS specification transport layer SSP frame format.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SCI_SSP_FRAME_HEADER
block|{
comment|// Word 0
name|U32
name|hashed_destination_address
range|:
literal|24
decl_stmt|;
name|U32
name|frame_type
range|:
literal|8
decl_stmt|;
comment|// Word 1
name|U32
name|hashed_source_address
range|:
literal|24
decl_stmt|;
name|U32
name|reserved1_0
range|:
literal|8
decl_stmt|;
comment|// Word 2
name|U32
name|reserved2_2
range|:
literal|6
decl_stmt|;
name|U32
name|fill_bytes
range|:
literal|2
decl_stmt|;
name|U32
name|reserved2_1
range|:
literal|3
decl_stmt|;
name|U32
name|tlr_control
range|:
literal|2
decl_stmt|;
name|U32
name|retry_data_frames
range|:
literal|1
decl_stmt|;
name|U32
name|retransmit
range|:
literal|1
decl_stmt|;
name|U32
name|changing_data_pointer
range|:
literal|1
decl_stmt|;
name|U32
name|reserved2_0
range|:
literal|16
decl_stmt|;
comment|// Word 3
name|U32
name|uiResv4
decl_stmt|;
comment|// Word 4
name|U16
name|target_port_transfer_tag
decl_stmt|;
name|U16
name|tag
decl_stmt|;
comment|// Word 5
name|U32
name|data_offset
decl_stmt|;
block|}
name|SCI_SSP_FRAME_HEADER_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_HEADER  * @brief  This structure defines the contents of an SMP Request header.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_HEADER
block|{
name|U8
name|smp_frame_type
decl_stmt|;
comment|// byte 0
name|U8
name|function
decl_stmt|;
comment|// byte 1
name|U8
name|allocated_response_length
decl_stmt|;
comment|// byte 2
name|U8
name|request_length
decl_stmt|;
comment|// byte 3
block|}
name|SMP_REQUEST_HEADER_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE_HEADER  * @brief  This structure depicts the contents of the SAS SMP DISCOVER  *         RESPONSE frame.  For specific information on each of these  *         individual fields please reference the SAS specification Link  *         layer section on address frames.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_HEADER
block|{
name|U8
name|smp_frame_type
decl_stmt|;
comment|// byte 0
name|U8
name|function
decl_stmt|;
comment|// byte 1
name|U8
name|function_result
decl_stmt|;
comment|// byte 2
name|U8
name|response_length
decl_stmt|;
comment|// byte 3
block|}
name|SMP_RESPONSE_HEADER_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_GENERAL  * @brief  This structure defines the contents of an SMP Request that  *         is comprised of the SMP_REQUEST_HEADER and a CRC.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_GENERAL
block|{
name|U32
name|crc
decl_stmt|;
comment|// bytes 4-7
block|}
name|SMP_REQUEST_GENERAL_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_PHY_IDENTIFIER  * @brief  This structure defines the contents of an SMP Request that  *         is comprised of the SMP_REQUEST_HEADER and a phy identifier.  *         Examples: SMP_REQUEST_DISCOVER, SMP_REQUEST_REPORT_PHY_SATA.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_PHY_IDENTIFIER
block|{
name|U32
name|reserved_byte4_7
decl_stmt|;
comment|// bytes 4-7
name|U32
name|ignore_zone_group
range|:
literal|1
decl_stmt|;
comment|// byte 8
name|U32
name|reserved_byte8
range|:
literal|7
decl_stmt|;
name|U32
name|phy_identifier
range|:
literal|8
decl_stmt|;
comment|// byte 9
name|U32
name|reserved_byte10
range|:
literal|8
decl_stmt|;
comment|// byte 10
name|U32
name|reserved_byte11
range|:
literal|8
decl_stmt|;
comment|// byte 11
block|}
name|SMP_REQUEST_PHY_IDENTIFIER_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_CONFIGURE_ROUTE_INFORMATION  * @brief  This structure defines the contents of an SMP Configure Route  *         Information request.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_CONFIGURE_ROUTE_INFORMATION
block|{
name|U32
name|expected_expander_change_count
range|:
literal|16
decl_stmt|;
comment|// bytes 4-5
name|U32
name|expander_route_index_high
range|:
literal|8
decl_stmt|;
name|U32
name|expander_route_index
range|:
literal|8
decl_stmt|;
comment|// bytes 6-7
name|U32
name|reserved_byte8
range|:
literal|8
decl_stmt|;
comment|// bytes 8
name|U32
name|phy_identifier
range|:
literal|8
decl_stmt|;
comment|// bytes 9
name|U32
name|reserved_byte_10_11
range|:
literal|16
decl_stmt|;
comment|// bytes 10-11
name|U32
name|reserved_byte_12_bit_0_6
range|:
literal|7
decl_stmt|;
name|U32
name|disable_route_entry
range|:
literal|1
decl_stmt|;
comment|// byte 12
name|U32
name|reserved_byte_13_15
range|:
literal|24
decl_stmt|;
comment|// bytes 13-15
name|U32
name|routed_sas_address
index|[
literal|2
index|]
decl_stmt|;
comment|// bytes 16-23
name|U8
name|reserved_byte_24_39
index|[
literal|16
index|]
decl_stmt|;
comment|// bytes 24-39
block|}
name|SMP_REQUEST_CONFIGURE_ROUTE_INFORMATION_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_PHY_CONTROL  * @brief  This structure defines the contents of an SMP Phy Controler  *         request.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_PHY_CONTROL
block|{
name|U16
name|expected_expander_change_count
decl_stmt|;
comment|// byte 4-5
name|U16
name|reserved_byte_6_7
decl_stmt|;
comment|// byte 6-7
name|U8
name|reserved_byte_8
decl_stmt|;
comment|// byte 8
name|U8
name|phy_identifier
decl_stmt|;
comment|// byte 9
name|U8
name|phy_operation
decl_stmt|;
comment|// byte 10
name|U8
name|update_partial_pathway_timeout_value
range|:
literal|1
decl_stmt|;
name|U8
name|reserved_byte_11_bit_1_7
range|:
literal|7
decl_stmt|;
comment|// byte 11
name|U8
name|reserved_byte_12_23
index|[
literal|12
index|]
decl_stmt|;
comment|// byte 12-23
name|U8
name|attached_device_name
index|[
literal|8
index|]
decl_stmt|;
comment|// byte 24-31
name|U8
name|reserved_byte_32_bit_3_0
range|:
literal|4
decl_stmt|;
comment|// byte 32
name|U8
name|programmed_minimum_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U8
name|reserved_byte_33_bit_3_0
range|:
literal|4
decl_stmt|;
comment|// byte 33
name|U8
name|programmed_maximum_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U16
name|reserved_byte_34_35
decl_stmt|;
comment|// byte 34-35
name|U8
name|partial_pathway_timeout_value
range|:
literal|4
decl_stmt|;
name|U8
name|reserved_byte_36_bit_4_7
range|:
literal|4
decl_stmt|;
comment|// byte 36
name|U16
name|reserved_byte_37_38
decl_stmt|;
comment|// byte 37-38
name|U8
name|reserved_byte_39
decl_stmt|;
comment|// byte 39
block|}
name|SMP_REQUEST_PHY_CONTROL_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST_VENDOR_SPECIFIC  * @brief  This structure depicts the vendor specific space for SMP request.  */
end_comment

begin_define
define|#
directive|define
name|SMP_REQUEST_VENDOR_SPECIFIC_MAX_LENGTH
value|1016
end_define

begin_typedef
typedef|typedef
struct|struct
name|SMP_REQUEST_VENDOR_SPECIFIC
block|{
name|U8
name|request_bytes
index|[
name|SMP_REQUEST_VENDOR_SPECIFIC_MAX_LENGTH
index|]
decl_stmt|;
block|}
name|SMP_REQUEST_VENDOR_SPECIFIC_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_REQUEST  * @brief  This structure simply unionizes the existing request  *         structures into a common request type.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_SMP_REQUEST
block|{
name|SMP_REQUEST_HEADER_T
name|header
decl_stmt|;
union|union
block|{
comment|// bytes 4-N
name|SMP_REQUEST_GENERAL_T
name|report_general
decl_stmt|;
name|SMP_REQUEST_PHY_IDENTIFIER_T
name|discover
decl_stmt|;
name|SMP_REQUEST_GENERAL_T
name|report_manufacturer_information
decl_stmt|;
name|SMP_REQUEST_PHY_IDENTIFIER_T
name|report_phy_sata
decl_stmt|;
name|SMP_REQUEST_PHY_CONTROL_T
name|phy_control
decl_stmt|;
name|SMP_REQUEST_PHY_IDENTIFIER_T
name|report_phy_error_log
decl_stmt|;
name|SMP_REQUEST_PHY_IDENTIFIER_T
name|report_route_information
decl_stmt|;
name|SMP_REQUEST_CONFIGURE_ROUTE_INFORMATION_T
name|configure_route_information
decl_stmt|;
name|SMP_REQUEST_VENDOR_SPECIFIC_T
name|vendor_specific_request
decl_stmt|;
block|}
name|request
union|;
block|}
name|SMP_REQUEST_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE_REPORT_GENERAL  * @brief  This structure depicts the SMP Report General for  *         expander devices.  It adheres to the SAS-2.1 specification.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification  *               Application layer section on SMP.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_REPORT_GENERAL
block|{
name|U16
name|expander_change_count
decl_stmt|;
comment|//byte 4-5
name|U16
name|expander_route_indexes
decl_stmt|;
comment|//byte 6-7
name|U32
name|reserved_byte8
range|:
literal|7
decl_stmt|;
comment|//byte 8 bit 0-6
name|U32
name|long_response
range|:
literal|1
decl_stmt|;
comment|//byte 8 bit 7
name|U32
name|number_of_phys
range|:
literal|8
decl_stmt|;
comment|//byte 9
name|U32
name|configurable_route_table
range|:
literal|1
decl_stmt|;
comment|//byte 10
name|U32
name|configuring
range|:
literal|1
decl_stmt|;
name|U32
name|configures_others
range|:
literal|1
decl_stmt|;
name|U32
name|open_reject_retry_supported
range|:
literal|1
decl_stmt|;
name|U32
name|stp_continue_awt
range|:
literal|1
decl_stmt|;
name|U32
name|self_configuring
range|:
literal|1
decl_stmt|;
name|U32
name|zone_configuring
range|:
literal|1
decl_stmt|;
name|U32
name|table_to_table_supported
range|:
literal|1
decl_stmt|;
name|U32
name|reserved_byte11
range|:
literal|8
decl_stmt|;
comment|//byte 11
name|U32
name|enclosure_logical_identifier_high
decl_stmt|;
comment|//byte 12-15
name|U32
name|enclosure_logical_identifier_low
decl_stmt|;
comment|//byte 16-19
name|U32
name|reserved_byte20_23
decl_stmt|;
name|U32
name|reserved_byte24_27
decl_stmt|;
block|}
name|SMP_RESPONSE_REPORT_GENERAL_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_REPORT_GENERAL_LONG
block|{
name|SMP_RESPONSE_REPORT_GENERAL_T
name|sas1_1
decl_stmt|;
struct|struct
block|{
name|U16
name|reserved1
decl_stmt|;
name|U16
name|stp_bus_inactivity_time_limit
decl_stmt|;
name|U16
name|stp_max_connect_time_limit
decl_stmt|;
name|U16
name|stp_smp_i_t_nexus_loss_time
decl_stmt|;
name|U32
name|zoning_enabled
range|:
literal|1
decl_stmt|;
name|U32
name|zoning_supported
range|:
literal|1
decl_stmt|;
name|U32
name|physicaL_presence_asserted
range|:
literal|1
decl_stmt|;
name|U32
name|zone_locked
range|:
literal|1
decl_stmt|;
name|U32
name|reserved2
range|:
literal|1
decl_stmt|;
name|U32
name|num_zone_groups
range|:
literal|3
decl_stmt|;
name|U32
name|saving_zoning_enabled_supported
range|:
literal|3
decl_stmt|;
name|U32
name|saving_zone_perms_table_supported
range|:
literal|1
decl_stmt|;
name|U32
name|saving_zone_phy_info_supported
range|:
literal|1
decl_stmt|;
name|U32
name|saving_zone_manager_password_supported
range|:
literal|1
decl_stmt|;
name|U32
name|saving
range|:
literal|1
decl_stmt|;
name|U32
name|reserved3
range|:
literal|1
decl_stmt|;
name|U32
name|max_number_routed_sas_addresses
range|:
literal|16
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|active_zone_manager_sas_address
decl_stmt|;
name|U16
name|zone_lock_inactivity_time_limit
decl_stmt|;
name|U16
name|reserved4
decl_stmt|;
name|U8
name|reserved5
decl_stmt|;
name|U8
name|first_enclosure_connector_element_index
decl_stmt|;
name|U8
name|number_of_enclosure_connector_element_indices
decl_stmt|;
name|U8
name|reserved6
decl_stmt|;
name|U32
name|reserved7
range|:
literal|7
decl_stmt|;
name|U32
name|reduced_functionality
range|:
literal|1
decl_stmt|;
name|U32
name|time_to_reduce_functionality
range|:
literal|8
decl_stmt|;
name|U32
name|initial_time_to_reduce_functionality
range|:
literal|8
decl_stmt|;
name|U8
name|max_reduced_functionality_time
decl_stmt|;
name|U16
name|last_self_config_status_descriptor_index
decl_stmt|;
name|U16
name|max_number_of_stored_self_config_status_descriptors
decl_stmt|;
name|U16
name|last_phy_event_list_descriptor_index
decl_stmt|;
name|U16
name|max_number_of_stored_phy_event_list_descriptors
decl_stmt|;
block|}
name|sas2
struct|;
block|}
name|SMP_RESPONSE_REPORT_GENERAL_LONG_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE_REPORT_MANUFACTURER_INFORMATION  * @brief  This structure depicts the SMP report manufacturer  *         information for expander devices.  It adheres to the  *         SAS-2.1 specification.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification  *               Application layer section on SMP.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_REPORT_MANUFACTURER_INFORMATION
block|{
name|U32
name|expander_change_count
range|:
literal|16
decl_stmt|;
comment|// bytes 4-5
name|U32
name|reserved1
range|:
literal|16
decl_stmt|;
name|U32
name|sas1_1_format
range|:
literal|1
decl_stmt|;
name|U32
name|reserved2
range|:
literal|31
decl_stmt|;
name|U8
name|vendor_id
index|[
literal|8
index|]
decl_stmt|;
name|U8
name|product_id
index|[
literal|16
index|]
decl_stmt|;
name|U8
name|product_revision_level
index|[
literal|4
index|]
decl_stmt|;
name|U8
name|component_vendor_id
index|[
literal|8
index|]
decl_stmt|;
name|U8
name|component_id
index|[
literal|2
index|]
decl_stmt|;
name|U8
name|component_revision_level
decl_stmt|;
name|U8
name|reserved3
decl_stmt|;
name|U8
name|vendor_specific
index|[
literal|8
index|]
decl_stmt|;
block|}
name|SMP_RESPONSE_REPORT_MANUFACTURER_INFORMATION_T
typedef|;
end_typedef

begin_define
define|#
directive|define
name|SMP_RESPONSE_DISCOVER_FORMAT_1_1_SIZE
value|52
end_define

begin_define
define|#
directive|define
name|SMP_RESPONSE_DISCOVER_FORMAT_2_SIZE
value|116
end_define

begin_comment
comment|/**  * @struct SMP_DISCOVER_RESPONSE_PROTOCOLS  * @brief  This structure depicts the discover response where the  *         supported protocols by the remote phy are specified.  *         @note For specific information on each of these  *               individual fields please reference the SAS specification  *               Link layer section on address frames.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_DISCOVER_RESPONSE_PROTOCOLS
block|{
union|union
block|{
struct|struct
block|{
name|U16
name|attached_sata_host
range|:
literal|1
decl_stmt|;
name|U16
name|attached_smp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|attached_stp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|attached_ssp_initiator
range|:
literal|1
decl_stmt|;
name|U16
name|reserved3
range|:
literal|4
decl_stmt|;
name|U16
name|attached_sata_device
range|:
literal|1
decl_stmt|;
name|U16
name|attached_smp_target
range|:
literal|1
decl_stmt|;
name|U16
name|attached_stp_target
range|:
literal|1
decl_stmt|;
name|U16
name|attached_ssp_target
range|:
literal|1
decl_stmt|;
name|U16
name|reserved4
range|:
literal|3
decl_stmt|;
name|U16
name|attached_sata_port_selector
range|:
literal|1
decl_stmt|;
block|}
name|bits
struct|;
name|U16
name|all
decl_stmt|;
block|}
name|u
union|;
block|}
name|SMP_DISCOVER_RESPONSE_PROTOCOLS_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE_DISCOVER_FORMAT  * @brief  This structure defines the SMP phy discover response format.  *         It handles both SAS1.1 and SAS 2 definitions.  The unions  *         indicate locations where the SAS specification versions  *         differ from one another.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_DISCOVER
block|{
union|union
block|{
struct|struct
block|{
name|U8
name|reserved
index|[
literal|2
index|]
decl_stmt|;
block|}
name|sas1_1
struct|;
struct|struct
block|{
name|U16
name|expander_change_count
decl_stmt|;
block|}
name|sas2
struct|;
block|}
name|u1
union|;
name|U8
name|reserved1
index|[
literal|3
index|]
decl_stmt|;
name|U8
name|phy_identifier
decl_stmt|;
name|U8
name|reserved2
index|[
literal|2
index|]
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|U16
name|reserved1
range|:
literal|4
decl_stmt|;
name|U16
name|attached_device_type
range|:
literal|3
decl_stmt|;
name|U16
name|reserved2
range|:
literal|1
decl_stmt|;
name|U16
name|negotiated_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U16
name|reserved3
range|:
literal|4
decl_stmt|;
block|}
name|sas1_1
struct|;
struct|struct
block|{
name|U16
name|attached_reason
range|:
literal|4
decl_stmt|;
name|U16
name|attached_device_type
range|:
literal|3
decl_stmt|;
name|U16
name|reserved2
range|:
literal|1
decl_stmt|;
name|U16
name|negotiated_logical_link_rate
range|:
literal|4
decl_stmt|;
name|U16
name|reserved3
range|:
literal|4
decl_stmt|;
block|}
name|sas2
struct|;
block|}
name|u2
union|;
name|SMP_DISCOVER_RESPONSE_PROTOCOLS_T
name|protocols
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|sas_address
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|attached_sas_address
decl_stmt|;
name|U8
name|attached_phy_identifier
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|U8
name|reserved
decl_stmt|;
block|}
name|sas1_1
struct|;
struct|struct
block|{
name|U8
name|attached_break_reply_capable
range|:
literal|1
decl_stmt|;
name|U8
name|attached_requested_inside_zpsds
range|:
literal|1
decl_stmt|;
name|U8
name|attached_inside_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U8
name|reserved1
range|:
literal|5
decl_stmt|;
block|}
name|sas2
struct|;
block|}
name|u3
union|;
name|U8
name|reserved_for_identify
index|[
literal|6
index|]
decl_stmt|;
name|U32
name|hardware_min_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|programmed_min_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|hardware_max_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|programmed_max_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|phy_change_count
range|:
literal|8
decl_stmt|;
name|U32
name|partial_pathway_timeout_value
range|:
literal|4
decl_stmt|;
name|U32
name|reserved5
range|:
literal|3
decl_stmt|;
name|U32
name|virtual_phy
range|:
literal|1
decl_stmt|;
name|U32
name|routing_attribute
range|:
literal|4
decl_stmt|;
name|U32
name|reserved6
range|:
literal|4
decl_stmt|;
name|U32
name|connector_type
range|:
literal|7
decl_stmt|;
name|U32
name|reserved7
range|:
literal|1
decl_stmt|;
name|U32
name|connector_element_index
range|:
literal|8
decl_stmt|;
name|U32
name|connector_physical_link
range|:
literal|8
decl_stmt|;
name|U16
name|reserved8
decl_stmt|;
name|U16
name|vendor_specific
decl_stmt|;
union|union
block|{
struct|struct
block|{
comment|/**           * In the SAS 1.1 specification this structure ends after 52 bytes.           * As a result, the contents of this field should never have a           * real value.  It is undefined.           */
name|U8
name|undefined
index|[
name|SMP_RESPONSE_DISCOVER_FORMAT_2_SIZE
operator|-
name|SMP_RESPONSE_DISCOVER_FORMAT_1_1_SIZE
index|]
decl_stmt|;
block|}
name|sas1_1
struct|;
struct|struct
block|{
name|SCI_SAS_ADDRESS_T
name|attached_device_name
decl_stmt|;
name|U32
name|zoning_enabled
range|:
literal|1
decl_stmt|;
name|U32
name|inside_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|zone_group_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved1
range|:
literal|1
decl_stmt|;
name|U32
name|requested_inside_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|inside_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|requested_inside_zpsds_changed_by_expander
range|:
literal|1
decl_stmt|;
name|U32
name|reserved2
range|:
literal|1
decl_stmt|;
name|U32
name|reserved_for_zoning_fields
range|:
literal|16
decl_stmt|;
name|U32
name|zone_group
range|:
literal|8
decl_stmt|;
name|U8
name|self_configuration_status
decl_stmt|;
name|U8
name|self_configuration_levels_completed
decl_stmt|;
name|U16
name|reserved_for_self_config_fields
decl_stmt|;
name|SCI_SAS_ADDRESS_T
name|self_configuration_sas_address
decl_stmt|;
name|U32
name|programmed_phy_capabilities
decl_stmt|;
name|U32
name|current_phy_capabilities
decl_stmt|;
name|U32
name|attached_phy_capabilities
decl_stmt|;
name|U32
name|reserved3
decl_stmt|;
name|U32
name|reserved4
range|:
literal|16
decl_stmt|;
name|U32
name|negotiated_physical_link_rate
range|:
literal|4
decl_stmt|;
name|U32
name|reason
range|:
literal|4
decl_stmt|;
name|U32
name|hardware_muxing_supported
range|:
literal|1
decl_stmt|;
name|U32
name|negotiated_ssc
range|:
literal|1
decl_stmt|;
name|U32
name|reserved5
range|:
literal|6
decl_stmt|;
name|U32
name|default_zoning_enabled
range|:
literal|1
decl_stmt|;
name|U32
name|reserved6
range|:
literal|1
decl_stmt|;
name|U32
name|default_zone_group_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved7
range|:
literal|1
decl_stmt|;
name|U32
name|default_requested_inside_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|default_inside_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved8
range|:
literal|2
decl_stmt|;
name|U32
name|reserved9
range|:
literal|16
decl_stmt|;
name|U32
name|default_zone_group
range|:
literal|8
decl_stmt|;
name|U32
name|saved_zoning_enabled
range|:
literal|1
decl_stmt|;
name|U32
name|reserved10
range|:
literal|1
decl_stmt|;
name|U32
name|saved_zone_group_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved11
range|:
literal|1
decl_stmt|;
name|U32
name|saved_requested_inside_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|saved_inside_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved12
range|:
literal|18
decl_stmt|;
name|U32
name|saved_zone_group
range|:
literal|8
decl_stmt|;
name|U32
name|reserved14
range|:
literal|2
decl_stmt|;
name|U32
name|shadow_zone_group_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved15
range|:
literal|1
decl_stmt|;
name|U32
name|shadow_requested_inside_zpsds
range|:
literal|1
decl_stmt|;
name|U32
name|shadow_inside_zpsds_persistent
range|:
literal|1
decl_stmt|;
name|U32
name|reserved16
range|:
literal|18
decl_stmt|;
name|U32
name|shadow_zone_group
range|:
literal|8
decl_stmt|;
name|U8
name|device_slot_number
decl_stmt|;
name|U8
name|device_slot_group_number
decl_stmt|;
name|U8
name|device_slot_group_output_connector
index|[
literal|6
index|]
decl_stmt|;
block|}
name|sas2
struct|;
block|}
name|u4
union|;
block|}
name|SMP_RESPONSE_DISCOVER_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE_REPORT_PHY_SATA  * @brief  This structure depicts the contents of the SAS SMP REPORT  *         PHY SATA frame.  For specific information on each of these  *         individual fields please reference the SAS specification Link  *         layer section on address frames.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_REPORT_PHY_SATA
block|{
name|U32
name|ignored_byte_4_7
decl_stmt|;
comment|// bytes 4-7
name|U32
name|affiliations_valid
range|:
literal|1
decl_stmt|;
name|U32
name|affiliations_supported
range|:
literal|1
decl_stmt|;
name|U32
name|reserved_byte11
range|:
literal|6
decl_stmt|;
comment|// byte 11
name|U32
name|ignored_byte10
range|:
literal|8
decl_stmt|;
comment|// byte 10
name|U32
name|phy_identifier
range|:
literal|8
decl_stmt|;
comment|// byte  9
name|U32
name|reserved_byte_8
range|:
literal|8
decl_stmt|;
comment|// byte  8
name|U32
name|reserved_12_15
decl_stmt|;
name|U32
name|stp_sas_address
index|[
literal|2
index|]
decl_stmt|;
name|U8
name|device_to_host_fis
index|[
literal|20
index|]
decl_stmt|;
name|U32
name|reserved_44_47
decl_stmt|;
name|U32
name|affiliated_stp_initiator_sas_address
index|[
literal|2
index|]
decl_stmt|;
block|}
name|SMP_RESPONSE_REPORT_PHY_SATA_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|SMP_RESPONSE_VENDOR_SPECIFIC
block|{
name|U8
name|response_bytes
index|[
name|SMP_REQUEST_VENDOR_SPECIFIC_MAX_LENGTH
index|]
decl_stmt|;
block|}
name|SMP_RESPONSE_VENDOR_SPECIFIC_T
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|SMP_RESPONSE_BODY
block|{
name|SMP_RESPONSE_REPORT_GENERAL_T
name|report_general
decl_stmt|;
name|SMP_RESPONSE_REPORT_MANUFACTURER_INFORMATION_T
name|report_manufacturer_information
decl_stmt|;
name|SMP_RESPONSE_DISCOVER_T
name|discover
decl_stmt|;
name|SMP_RESPONSE_REPORT_PHY_SATA_T
name|report_phy_sata
decl_stmt|;
name|SMP_RESPONSE_VENDOR_SPECIFIC_T
name|vendor_specific_response
decl_stmt|;
block|}
name|SMP_RESPONSE_BODY_T
typedef|;
end_typedef

begin_comment
comment|/**  * @struct SMP_RESPONSE  * @brief  This structure simply unionizes the existing response  *         structures into a common response type.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_SMP_RESPONSE
block|{
name|SMP_RESPONSE_HEADER_T
name|header
decl_stmt|;
name|SMP_RESPONSE_BODY_T
name|response
decl_stmt|;
block|}
name|SMP_RESPONSE_T
typedef|;
end_typedef

begin_comment
comment|// SMP Request Functions
end_comment

begin_define
define|#
directive|define
name|SMP_FUNCTION_REPORT_GENERAL
value|0x00
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_REPORT_MANUFACTURER_INFORMATION
value|0x01
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_DISCOVER
value|0x10
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_REPORT_PHY_ERROR_LOG
value|0x11
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_REPORT_PHY_SATA
value|0x12
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_REPORT_ROUTE_INFORMATION
value|0X13
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_CONFIGURE_ROUTE_INFORMATION
value|0X90
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_PHY_CONTROL
value|0x91
end_define

begin_define
define|#
directive|define
name|SMP_FUNCTION_PHY_TEST
value|0x92
end_define

begin_define
define|#
directive|define
name|SMP_FRAME_TYPE_REQUEST
value|0x40
end_define

begin_define
define|#
directive|define
name|SMP_FRAME_TYPE_RESPONSE
value|0x41
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_NOP
value|0x00
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_LINK_RESET
value|0x01
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_HARD_RESET
value|0x02
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_DISABLE
value|0x03
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_CLEAR_ERROR_LOG
value|0x05
end_define

begin_define
define|#
directive|define
name|PHY_OPERATION_CLEAR_AFFILIATION
value|0x06
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_ENABLED_UNK_LINK_RATE
value|0x00
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_DISABLED
value|0x01
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_ENABLED_SPD_NEG_FAILED
value|0x02
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_ENABLED_SATA_HOLD
value|0x03
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_ENABLED_1_5G
value|0x08
end_define

begin_define
define|#
directive|define
name|NPLR_PHY_ENABLED_3_0G
value|0x09
end_define

begin_comment
comment|// SMP Function Result values.
end_comment

begin_define
define|#
directive|define
name|SMP_RESULT_FUNCTION_ACCEPTED
value|0x00
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_UNKNOWN_FUNCTION
value|0x01
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_FUNCTION_FAILED
value|0x02
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_INVALID_REQUEST_FRAME_LEN
value|0x03
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_INAVALID_EXPANDER_CHANGE_COUNT
value|0x04
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_BUSY
value|0x05
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_INCOMPLETE_DESCRIPTOR_LIST
value|0x06
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_PHY_DOES_NOT_EXIST
value|0x10
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_INDEX_DOES_NOT_EXIST
value|0x11
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_PHY_DOES_NOT_SUPPORT_SATA
value|0x12
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_UNKNOWN_PHY_OPERATION
value|0x13
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_UNKNOWN_PHY_TEST_FUNCTION
value|0x14
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_PHY_TEST_IN_PROGRESS
value|0x15
end_define

begin_define
define|#
directive|define
name|SMP_RESULT_PHY_VACANT
value|0x16
end_define

begin_comment
comment|/* Attached Device Types */
end_comment

begin_define
define|#
directive|define
name|SMP_NO_DEVICE_ATTACHED
value|0
end_define

begin_define
define|#
directive|define
name|SMP_END_DEVICE_ONLY
value|1
end_define

begin_define
define|#
directive|define
name|SMP_EDGE_EXPANDER_DEVICE
value|2
end_define

begin_define
define|#
directive|define
name|SMP_FANOUT_EXPANDER_DEVICE
value|3
end_define

begin_comment
comment|/* Expander phy routine attribute */
end_comment

begin_define
define|#
directive|define
name|DIRECT_ROUTING_ATTRIBUTE
value|0
end_define

begin_define
define|#
directive|define
name|SUBTRACTIVE_ROUTING_ATTRIBUTE
value|1
end_define

begin_define
define|#
directive|define
name|TABLE_ROUTING_ATTRIBUTE
value|2
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _INTEL_SAS_H_
end_comment

end_unit

