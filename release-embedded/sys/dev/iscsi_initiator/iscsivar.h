begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2005-2011 Daniel Braniss<danny@cs.huji.ac.il>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_comment
comment|/*  | $Id: iscsivar.h 743 2009-08-08 10:54:53Z danny $  */
end_comment

begin_define
define|#
directive|define
name|ISCSI_MAX_LUNS
value|128
end_define

begin_comment
comment|// don't touch this
end_comment

begin_if
if|#
directive|if
name|ISCSI_MAX_LUNS
operator|>
literal|8
end_if

begin_comment
comment|/*  | for this to work   | sysctl kern.cam.cam_srch_hi=1  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ISCSI_INITIATOR_DEBUG
end_ifndef

begin_define
define|#
directive|define
name|ISCSI_INITIATOR_DEBUG
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|ISCSI_INITIATOR_DEBUG
end_ifdef

begin_decl_stmt
specifier|extern
name|int
name|iscsi_debug
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|debug
parameter_list|(
name|level
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|do {if(level<= iscsi_debug)\ 	printf("%s: " fmt "\n", __func__ , ##args);} while(0)
end_define

begin_define
define|#
directive|define
name|sdebug
parameter_list|(
name|level
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|do {if(level<= iscsi_debug)\      	printf("%d] %s: " fmt "\n", sp->sid, __func__ , ##args);} while(0)
end_define

begin_define
define|#
directive|define
name|debug_called
parameter_list|(
name|level
parameter_list|)
value|do {if(level<= iscsi_debug)\ 	printf("%s: called\n",  __func__);} while(0)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|debug
parameter_list|(
name|level
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
end_define

begin_define
define|#
directive|define
name|debug_called
parameter_list|(
name|level
parameter_list|)
end_define

begin_define
define|#
directive|define
name|sdebug
parameter_list|(
name|level
parameter_list|,
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ISCSI_INITIATOR_DEBUG */
end_comment

begin_define
define|#
directive|define
name|xdebug
parameter_list|(
name|fmt
parameter_list|,
name|args
modifier|...
parameter_list|)
value|printf(">>> %s: " fmt "\n", __func__ , ##args)
end_define

begin_define
define|#
directive|define
name|MAX_SESSIONS
value|ISCSI_MAX_TARGETS
end_define

begin_define
define|#
directive|define
name|MAX_PDUS
value|(MAX_SESSIONS*256)
end_define

begin_comment
comment|// XXX: at the moment this is arbitrary
end_comment

begin_typedef
typedef|typedef
name|uint32_t
name|digest_t
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|int
name|len
parameter_list|,
name|uint32_t
name|ocrc
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_ISCSI
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|MALLOC_DECLARE
argument_list|(
name|M_ISCSIBUF
argument_list|)
expr_stmt|;
end_expr_stmt

begin_define
define|#
directive|define
name|ISOK2DIG
parameter_list|(
name|dig
parameter_list|,
name|pp
parameter_list|)
value|((dig != NULL)&& ((pp->ipdu.bhs.opcode& 0x1f) != ISCSI_LOGIN_CMD))
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|BIT
end_ifndef

begin_define
define|#
directive|define
name|BIT
parameter_list|(
name|n
parameter_list|)
value|(1<<(n))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ISC_SM_RUN
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|ISC_SM_RUNNING
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|ISC_LINK_UP
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|ISC_CON_RUN
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|ISC_CON_RUNNING
value|BIT(4)
end_define

begin_define
define|#
directive|define
name|ISC_KILL
value|BIT(5)
end_define

begin_define
define|#
directive|define
name|ISC_OQNOTEMPTY
value|BIT(6)
end_define

begin_define
define|#
directive|define
name|ISC_OWAITING
value|BIT(7)
end_define

begin_define
define|#
directive|define
name|ISC_FFPHASE
value|BIT(8)
end_define

begin_define
define|#
directive|define
name|ISC_CAMDEVS
value|BIT(9)
end_define

begin_define
define|#
directive|define
name|ISC_SCANWAIT
value|BIT(10)
end_define

begin_define
define|#
directive|define
name|ISC_MEMWAIT
value|BIT(11)
end_define

begin_define
define|#
directive|define
name|ISC_SIGNALED
value|BIT(12)
end_define

begin_define
define|#
directive|define
name|ISC_HOLD
value|BIT(15)
end_define

begin_define
define|#
directive|define
name|ISC_HOLDED
value|BIT(16)
end_define

begin_define
define|#
directive|define
name|ISC_SHUTDOWN
value|BIT(31)
end_define

begin_comment
comment|/*  | some stats  */
end_comment

begin_struct
struct|struct
name|i_stats
block|{
name|int
name|npdu
decl_stmt|;
comment|// number of pdus malloc'ed.
name|int
name|nrecv
decl_stmt|;
comment|// unprocessed received pdus
name|int
name|nsent
decl_stmt|;
comment|// sent pdus
name|int
name|nrsp
decl_stmt|,
name|max_rsp
decl_stmt|;
name|int
name|nrsv
decl_stmt|,
name|max_rsv
decl_stmt|;
name|int
name|ncsnd
decl_stmt|,
name|max_csnd
decl_stmt|;
name|int
name|nisnd
decl_stmt|,
name|max_isnd
decl_stmt|;
name|int
name|nwsnd
decl_stmt|,
name|max_wsnd
decl_stmt|;
name|int
name|nhld
decl_stmt|,
name|max_hld
decl_stmt|;
name|struct
name|bintime
name|t_sent
decl_stmt|;
name|struct
name|bintime
name|t_recv
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  | one per 'session'  */
end_comment

begin_typedef
typedef|typedef
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|pduq
argument_list|)
name|queue_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|isc_session
block|{
name|TAILQ_ENTRY
argument_list|(
argument|isc_session
argument_list|)
name|sp_link
expr_stmt|;
name|int
name|flags
decl_stmt|;
name|struct
name|cdev
modifier|*
name|dev
decl_stmt|;
name|struct
name|socket
modifier|*
name|soc
decl_stmt|;
name|struct
name|file
modifier|*
name|fp
decl_stmt|;
name|struct
name|thread
modifier|*
name|td
decl_stmt|;
name|struct
name|proc
modifier|*
name|proc
decl_stmt|;
comment|// the userland process
name|int
name|signal
decl_stmt|;
name|struct
name|proc
modifier|*
name|soc_proc
decl_stmt|;
name|struct
name|proc
modifier|*
name|stp
decl_stmt|;
comment|// the sm thread
name|struct
name|isc_softc
modifier|*
name|isc
decl_stmt|;
name|digest_t
modifier|*
name|hdrDigest
decl_stmt|;
comment|// the digest alg. if any
name|digest_t
modifier|*
name|dataDigest
decl_stmt|;
comment|// the digest alg. if any
name|int
name|sid
decl_stmt|;
comment|// Session ID
name|sn_t
name|sn
decl_stmt|;
comment|// sequence number stuff;
name|int
name|cws
decl_stmt|;
comment|// current window size
name|int
name|target_nluns
decl_stmt|;
comment|// this and target_lun are
comment|// hopefully temporal till I
comment|// figure out a better way.
name|int
name|target_lun
index|[
name|ISCSI_MAX_LUNS
operator|/
operator|(
sizeof|sizeof
argument_list|(
name|int
argument_list|)
operator|*
literal|8
operator|)
operator|+
literal|1
index|]
decl_stmt|;
name|struct
name|mtx
name|rsp_mtx
decl_stmt|;
name|struct
name|mtx
name|rsv_mtx
decl_stmt|;
name|struct
name|mtx
name|snd_mtx
decl_stmt|;
name|struct
name|mtx
name|hld_mtx
decl_stmt|;
name|struct
name|mtx
name|io_mtx
decl_stmt|;
name|queue_t
name|rsp
decl_stmt|;
name|queue_t
name|rsv
decl_stmt|;
name|queue_t
name|csnd
decl_stmt|;
name|queue_t
name|isnd
decl_stmt|;
name|queue_t
name|wsnd
decl_stmt|;
name|queue_t
name|hld
decl_stmt|;
name|isc_opt_t
name|opt
decl_stmt|;
comment|// negotiable values
name|struct
name|i_stats
name|stats
decl_stmt|;
name|bhs_t
name|bhs
decl_stmt|;
name|struct
name|uio
name|uio
decl_stmt|;
name|struct
name|iovec
name|iov
decl_stmt|;
comment|/*       | cam stuff       */
name|struct
name|cam_sim
modifier|*
name|cam_sim
decl_stmt|;
name|struct
name|cam_path
modifier|*
name|cam_path
decl_stmt|;
name|struct
name|mtx
name|cam_mtx
decl_stmt|;
comment|/*       | sysctl stuff       */
name|struct
name|sysctl_ctx_list
name|clist
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|oid
decl_stmt|;
name|int
name|douio
decl_stmt|;
comment|//XXX: turn on/off uio on read
block|}
name|isc_session_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|pduq
block|{
name|TAILQ_ENTRY
argument_list|(
argument|pduq
argument_list|)
name|pq_link
expr_stmt|;
name|caddr_t
name|buf
decl_stmt|;
name|u_int
name|len
decl_stmt|;
comment|// the total length of the pdu
name|pdu_t
name|pdu
decl_stmt|;
name|union
name|ccb
modifier|*
name|ccb
decl_stmt|;
name|struct
name|uio
name|uio
decl_stmt|;
name|struct
name|iovec
name|iov
index|[
literal|5
index|]
decl_stmt|;
comment|// XXX: careful ...
name|struct
name|mbuf
modifier|*
name|mp
decl_stmt|;
name|struct
name|bintime
name|ts
decl_stmt|;
name|queue_t
modifier|*
name|pduq
decl_stmt|;
block|}
name|pduq_t
typedef|;
end_typedef

begin_comment
comment|/*  */
end_comment

begin_struct
struct|struct
name|isc_softc
block|{
name|struct
name|mtx
name|isc_mtx
decl_stmt|;
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|isc_session
argument_list|)
name|isc_sess
expr_stmt|;
name|int
name|nsess
decl_stmt|;
name|struct
name|cdev
modifier|*
name|dev
decl_stmt|;
name|char
name|isid
index|[
literal|6
index|]
decl_stmt|;
comment|// Initiator Session ID (48 bits)
name|struct
name|unrhdr
modifier|*
name|unit
decl_stmt|;
name|struct
name|sx
name|unit_sx
decl_stmt|;
name|uma_zone_t
name|pdu_zone
decl_stmt|;
comment|// pool of free pdu's
name|TAILQ_HEAD
argument_list|(
argument_list|,
argument|pduq
argument_list|)
name|freepdu
expr_stmt|;
ifdef|#
directive|ifdef
name|ISCSI_INITIATOR_DEBUG
name|int
name|npdu_alloc
decl_stmt|,
name|npdu_max
decl_stmt|;
comment|// for instrumentation
endif|#
directive|endif
ifdef|#
directive|ifdef
name|DO_EVENTHANDLER
name|eventhandler_tag
name|eh
decl_stmt|;
endif|#
directive|endif
comment|/*       | sysctl stuff       */
name|struct
name|sysctl_ctx_list
name|clist
decl_stmt|;
name|struct
name|sysctl_oid
modifier|*
name|oid
decl_stmt|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|ISCSI_INITIATOR_DEBUG
end_ifdef

begin_decl_stmt
specifier|extern
name|struct
name|mtx
name|iscsi_dbg_mtx
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|isc_start_receiver
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isc_stop_receiver
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isc_sendPDU
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|isc_qout
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i_prepPDU
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ism_fullfeature
parameter_list|(
name|struct
name|cdev
modifier|*
name|dev
parameter_list|,
name|int
name|flag
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i_pdu_flush
parameter_list|(
name|isc_session_t
modifier|*
name|sc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|i_setopt
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|isc_opt_t
modifier|*
name|opt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|i_freeopt
parameter_list|(
name|isc_opt_t
modifier|*
name|opt
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ic_init
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ic_destroy
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ic_lost_target
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|int
name|target
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ic_getCamVals
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|iscsi_cam_t
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ism_recv
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ism_start
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ism_restart
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ism_stop
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_encap
parameter_list|(
name|struct
name|cam_sim
modifier|*
name|sim
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|scsi_decap
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|opq
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iscsi_r2t
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|opq
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iscsi_done
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|opq
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iscsi_reject
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|opq
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iscsi_async
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iscsi_cleanup
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|iscsi_requeue
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Serial Number Arithmetic
end_comment

begin_define
define|#
directive|define
name|_MAXINCR
value|0x7FFFFFFF
end_define

begin_comment
comment|// 2 ^ 31 - 1
end_comment

begin_define
define|#
directive|define
name|SNA_GT
parameter_list|(
name|i1
parameter_list|,
name|i2
parameter_list|)
value|((i1 != i2)&& (\ 	(i1< i2&& i2 - i1> _MAXINCR) ||\ 	(i1> i2&& i1 - i2< _MAXINCR))?1: 0)
end_define

begin_comment
comment|/*  | inlines  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_CAM_CAM_XPT_SIM_H
end_ifdef

begin_if
if|#
directive|if
name|__FreeBSD_version
operator|<
literal|600000
end_if

begin_define
define|#
directive|define
name|CAM_LOCK
parameter_list|(
name|arg
parameter_list|)
end_define

begin_define
define|#
directive|define
name|CAM_ULOCK
parameter_list|(
name|arg
parameter_list|)
end_define

begin_function
specifier|static
name|__inline
name|void
name|XPT_DONE
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
name|xpt_done
argument_list|(
name|ccb
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|Giant
argument_list|)
expr_stmt|;
block|}
end_function

begin_elif
elif|#
directive|elif
name|__FreeBSD_version
operator|>=
literal|700000
end_elif

begin_define
define|#
directive|define
name|CAM_LOCK
parameter_list|(
name|arg
parameter_list|)
value|mtx_lock(&arg->cam_mtx)
end_define

begin_define
define|#
directive|define
name|CAM_UNLOCK
parameter_list|(
name|arg
parameter_list|)
value|mtx_unlock(&arg->cam_mtx)
end_define

begin_function
specifier|static
name|__inline
name|void
name|XPT_DONE
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|union
name|ccb
modifier|*
name|ccb
parameter_list|)
block|{
name|CAM_LOCK
argument_list|(
name|sp
argument_list|)
expr_stmt|;
name|xpt_done
argument_list|(
name|ccb
argument_list|)
expr_stmt|;
name|CAM_UNLOCK
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|//__FreeBSD_version>= 600000
end_comment

begin_define
define|#
directive|define
name|CAM_LOCK
parameter_list|(
name|arg
parameter_list|)
end_define

begin_define
define|#
directive|define
name|CAM_UNLOCK
parameter_list|(
name|arg
parameter_list|)
end_define

begin_define
define|#
directive|define
name|XPT_DONE
parameter_list|(
name|ignore
parameter_list|,
name|arg
parameter_list|)
value|xpt_done(arg)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CAM_CAM_XPT_SIM_H */
end_comment

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|pdu_alloc
parameter_list|(
name|struct
name|isc_softc
modifier|*
name|isc
parameter_list|,
name|int
name|wait
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|pq
operator|=
operator|(
name|pduq_t
operator|*
operator|)
name|uma_zalloc
argument_list|(
name|isc
operator|->
name|pdu_zone
argument_list|,
name|wait
comment|/* M_WAITOK or M_NOWAIT*/
argument_list|)
expr_stmt|;
if|if
condition|(
name|pq
operator|==
name|NULL
condition|)
block|{
name|debug
argument_list|(
literal|7
argument_list|,
literal|"out of mem"
argument_list|)
expr_stmt|;
return|return
name|NULL
return|;
block|}
ifdef|#
directive|ifdef
name|ISCSI_INITIATOR_DEBUG
name|mtx_lock
argument_list|(
operator|&
name|iscsi_dbg_mtx
argument_list|)
expr_stmt|;
name|isc
operator|->
name|npdu_alloc
operator|++
expr_stmt|;
if|if
condition|(
name|isc
operator|->
name|npdu_alloc
operator|>
name|isc
operator|->
name|npdu_max
condition|)
name|isc
operator|->
name|npdu_max
operator|=
name|isc
operator|->
name|npdu_alloc
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|iscsi_dbg_mtx
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|memset
argument_list|(
name|pq
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|pduq_t
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|pdu_free
parameter_list|(
name|struct
name|isc_softc
modifier|*
name|isc
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
if|if
condition|(
name|pq
operator|->
name|mp
condition|)
name|m_freem
argument_list|(
name|pq
operator|->
name|mp
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|NO_USE_MBUF
if|if
condition|(
name|pq
operator|->
name|buf
operator|!=
name|NULL
condition|)
name|free
argument_list|(
name|pq
operator|->
name|buf
argument_list|,
name|M_ISCSIBUF
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|uma_zfree
argument_list|(
name|isc
operator|->
name|pdu_zone
argument_list|,
name|pq
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|ISCSI_INITIATOR_DEBUG
name|mtx_lock
argument_list|(
operator|&
name|iscsi_dbg_mtx
argument_list|)
expr_stmt|;
name|isc
operator|->
name|npdu_alloc
operator|--
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|iscsi_dbg_mtx
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_rsp
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|rsp_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|nrsp
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_rsp
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_rsp
operator|=
name|sp
operator|->
name|stats
operator|.
name|nrsp
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|rsp
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|rsp_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_rsp
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|rsp_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|rsp
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nrsp
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|rsp
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|rsp_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_rsv
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|rsv_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|nrsv
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_rsv
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_rsv
operator|=
name|sp
operator|->
name|stats
operator|.
name|nrsv
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|rsv
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|rsv_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_rsv
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|rsv_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|rsv
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nrsv
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|rsv
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|rsv_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_csnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|ncsnd
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_csnd
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_csnd
operator|=
name|sp
operator|->
name|stats
operator|.
name|ncsnd
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|csnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_csnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|csnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|ncsnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|csnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_isnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|nisnd
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_isnd
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_isnd
operator|=
name|sp
operator|->
name|stats
operator|.
name|nisnd
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|isnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_isnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|isnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nisnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|isnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_wsnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|nwsnd
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_wsnd
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_wsnd
operator|=
name|sp
operator|->
name|stats
operator|.
name|nwsnd
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|wsnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_wsnd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|wsnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nwsnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|wsnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_snd
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|int
name|which
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|pq
operator|=
name|NULL
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|which
operator|&
name|BIT
argument_list|(
literal|0
argument_list|)
operator|)
operator|&&
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|isnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nisnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|isnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|pq
operator|->
name|pduq
operator|=
operator|&
name|sp
operator|->
name|isnd
expr_stmt|;
comment|// remember where you came from
block|}
elseif|else
if|if
condition|(
operator|(
name|which
operator|&
name|BIT
argument_list|(
literal|1
argument_list|)
operator|)
operator|&&
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|wsnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nwsnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|wsnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|pq
operator|->
name|pduq
operator|=
operator|&
name|sp
operator|->
name|wsnd
expr_stmt|;
comment|// remember where you came from
block|}
elseif|else
if|if
condition|(
operator|(
name|which
operator|&
name|BIT
argument_list|(
literal|2
argument_list|)
operator|)
operator|&&
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|csnd
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|ncsnd
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|csnd
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|pq
operator|->
name|pduq
operator|=
operator|&
name|sp
operator|->
name|csnd
expr_stmt|;
comment|// remember where you came from
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_rqueue_pdu
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
name|KASSERT
argument_list|(
name|pq
operator|->
name|pduq
operator|!=
name|NULL
argument_list|,
operator|(
literal|"pq->pduq is NULL"
operator|)
argument_list|)
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
name|pq
operator|->
name|pduq
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|snd_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/*  | Waiting for ACK (or something :-)  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|i_nqueue_hld
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|getbintime
argument_list|(
operator|&
name|pq
operator|->
name|ts
argument_list|)
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|sp
operator|->
name|stats
operator|.
name|nhld
operator|>
name|sp
operator|->
name|stats
operator|.
name|max_hld
condition|)
name|sp
operator|->
name|stats
operator|.
name|max_hld
operator|=
name|sp
operator|->
name|stats
operator|.
name|nhld
expr_stmt|;
name|TAILQ_INSERT_TAIL
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
return|return;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_remove_hld
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pduq_t
modifier|*
name|pq
parameter_list|)
block|{
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
name|sp
operator|->
name|stats
operator|.
name|nhld
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_dqueue_hld
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|pq
operator|=
name|TAILQ_FIRST
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|)
operator|)
operator|!=
name|NULL
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nhld
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|pduq_t
modifier|*
name|i_search_hld
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|int
name|itt
parameter_list|,
name|int
name|keep
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|,
modifier|*
name|tmp
decl_stmt|;
name|pq
operator|=
name|NULL
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|pq
argument_list|,
argument|&sp->hld
argument_list|,
argument|pq_link
argument_list|,
argument|tmp
argument_list|)
block|{
if|if
condition|(
name|pq
operator|->
name|pdu
operator|.
name|ipdu
operator|.
name|bhs
operator|.
name|itt
operator|==
name|itt
condition|)
block|{
if|if
condition|(
operator|!
name|keep
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nhld
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
return|return
name|pq
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_acked_hld
parameter_list|(
name|isc_session_t
modifier|*
name|sp
parameter_list|,
name|pdu_t
modifier|*
name|op
parameter_list|)
block|{
name|pduq_t
modifier|*
name|pq
decl_stmt|,
modifier|*
name|tmp
decl_stmt|;
name|u_int
name|exp
init|=
name|sp
operator|->
name|sn
operator|.
name|expCmd
decl_stmt|;
name|pq
operator|=
name|NULL
expr_stmt|;
name|mtx_lock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
name|TAILQ_FOREACH_SAFE
argument_list|(
argument|pq
argument_list|,
argument|&sp->hld
argument_list|,
argument|pq_link
argument_list|,
argument|tmp
argument_list|)
block|{
if|if
condition|(
operator|(
name|op
operator|&&
name|op
operator|->
name|ipdu
operator|.
name|bhs
operator|.
name|itt
operator|==
name|pq
operator|->
name|pdu
operator|.
name|ipdu
operator|.
name|bhs
operator|.
name|itt
operator|)
operator|||
operator|(
name|pq
operator|->
name|ccb
operator|==
name|NULL
operator|&&
operator|(
name|pq
operator|->
name|pdu
operator|.
name|ipdu
operator|.
name|bhs
operator|.
name|opcode
operator|!=
name|ISCSI_WRITE_DATA
operator|)
operator|&&
name|SNA_GT
argument_list|(
name|exp
argument_list|,
name|ntohl
argument_list|(
name|pq
operator|->
name|pdu
operator|.
name|ipdu
operator|.
name|bhs
operator|.
name|ExpStSN
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|sp
operator|->
name|stats
operator|.
name|nhld
operator|--
expr_stmt|;
name|TAILQ_REMOVE
argument_list|(
operator|&
name|sp
operator|->
name|hld
argument_list|,
name|pq
argument_list|,
name|pq_link
argument_list|)
expr_stmt|;
name|pdu_free
argument_list|(
name|sp
operator|->
name|isc
argument_list|,
name|pq
argument_list|)
expr_stmt|;
block|}
block|}
name|mtx_unlock
argument_list|(
operator|&
name|sp
operator|->
name|hld_mtx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|i_mbufcopy
parameter_list|(
name|struct
name|mbuf
modifier|*
name|mp
parameter_list|,
name|caddr_t
name|dp
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|struct
name|mbuf
modifier|*
name|m
decl_stmt|;
name|caddr_t
name|bp
decl_stmt|;
for|for
control|(
name|m
operator|=
name|mp
init|;
name|m
operator|!=
name|NULL
condition|;
name|m
operator|=
name|m
operator|->
name|m_next
control|)
block|{
name|bp
operator|=
name|mtod
argument_list|(
name|m
argument_list|,
name|caddr_t
argument_list|)
expr_stmt|;
comment|/* 	   | the pdu is word (4 octed) aligned 	   | so len<= packet 	   */
name|memcpy
argument_list|(
name|dp
argument_list|,
name|bp
argument_list|,
name|MIN
argument_list|(
name|len
argument_list|,
name|m
operator|->
name|m_len
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|+=
name|m
operator|->
name|m_len
expr_stmt|;
name|len
operator|-=
name|m
operator|->
name|m_len
expr_stmt|;
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
break|break;
block|}
block|}
end_function

end_unit

