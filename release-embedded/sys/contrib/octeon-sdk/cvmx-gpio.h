begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***********************license start***************  * Copyright (c) 2003-2010  Cavium Inc. (support@cavium.com). All rights  * reserved.  *  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions are  * met:  *  *   * Redistributions of source code must retain the above copyright  *     notice, this list of conditions and the following disclaimer.  *  *   * Redistributions in binary form must reproduce the above  *     copyright notice, this list of conditions and the following  *     disclaimer in the documentation and/or other materials provided  *     with the distribution.   *   * Neither the name of Cavium Inc. nor the names of  *     its contributors may be used to endorse or promote products  *     derived from this software without specific prior written  *     permission.   * This Software, including technical data, may be subject to U.S. export  control  * laws, including the U.S. Export Administration Act and its  associated  * regulations, and may be subject to export or import  regulations in other  * countries.   * TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED "AS IS"  * AND WITH ALL FAULTS AND CAVIUM INC. MAKES NO PROMISES, REPRESENTATIONS OR  * WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE, WITH RESPECT TO  * THE SOFTWARE, INCLUDING ITS CONDITION, ITS CONFORMITY TO ANY REPRESENTATION OR  * DESCRIPTION, OR THE EXISTENCE OF ANY LATENT OR PATENT DEFECTS, AND CAVIUM  * SPECIFICALLY DISCLAIMS ALL IMPLIED (IF ANY) WARRANTIES OF TITLE,  * MERCHANTABILITY, NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF  * VIRUSES, ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR  * CORRESPONDENCE TO DESCRIPTION. THE ENTIRE  RISK ARISING OUT OF USE OR  * PERFORMANCE OF THE SOFTWARE LIES WITH YOU.  ***********************license end**************************************/
end_comment

begin_comment
comment|/**  * @file  *  * General Purpose IO interface.  *  *<hr>$Revision: 70030 $<hr>  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CVMX_GPIO_H__
end_ifndef

begin_define
define|#
directive|define
name|__CVMX_GPIO_H__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* CSR typedefs have been moved to cvmx-gpio-defs.h */
comment|/**  * Clear the interrupt rising edge detector for the supplied  * pins in the mask. Chips which have more than 16 GPIO pins  * can't use them for interrupts.  e  * @param clear_mask Mask of pins to clear  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_interrupt_clear
parameter_list|(
name|uint16_t
name|clear_mask
parameter_list|)
block|{
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
condition|)
block|{
name|cvmx_gpio_multi_cast_t
name|multi_cast
decl_stmt|;
name|cvmx_gpio_bit_cfgx_t
name|gpio_bit
decl_stmt|;
name|int
name|core
init|=
name|cvmx_get_core_num
argument_list|()
decl_stmt|;
name|multi_cast
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_MULTI_CAST
argument_list|)
expr_stmt|;
name|gpio_bit
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_BIT_CFGX
argument_list|(
name|core
argument_list|)
argument_list|)
expr_stmt|;
comment|/* If Multicast mode is enabled, and GPIO interrupt is enabled for            edge detection, then GPIO<4..7> interrupts are per core */
if|if
condition|(
name|multi_cast
operator|.
name|s
operator|.
name|en
operator|&&
name|gpio_bit
operator|.
name|s
operator|.
name|int_en
operator|&&
name|gpio_bit
operator|.
name|s
operator|.
name|int_type
condition|)
block|{
comment|/* Clear GPIO<4..7> per core */
name|cvmx_ciu_intx_sum0_t
name|ciu_sum0
decl_stmt|;
name|ciu_sum0
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_CIU_INTX_SUM0
argument_list|(
name|core
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|ciu_sum0
operator|.
name|s
operator|.
name|gpio
operator|=
name|clear_mask
operator|&
literal|0xf0
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_CIU_INTX_SUM0
argument_list|(
name|core
operator|*
literal|2
argument_list|)
argument_list|,
name|ciu_sum0
operator|.
name|u64
argument_list|)
expr_stmt|;
comment|/* Clear other GPIO pins for all cores. */
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_INT_CLR
argument_list|,
operator|(
name|clear_mask
operator|&
operator|~
literal|0xf0
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|/* Clear GPIO pins state across all cores and common interrupt states. */
name|cvmx_gpio_int_clr_t
name|gpio_int_clr
decl_stmt|;
name|gpio_int_clr
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_int_clr
operator|.
name|s
operator|.
name|type
operator|=
name|clear_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_INT_CLR
argument_list|,
name|gpio_int_clr
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * GPIO Output Pin  *  * @param bit   The GPIO to use  * @param mode  Drive GPIO as output pin or not.  *  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_cfg
parameter_list|(
name|int
name|bit
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|bit
operator|>
literal|15
operator|&&
name|bit
operator|<
literal|20
condition|)
block|{
comment|/* CN61XX/CN66XX has 20 GPIO pins and only 16 are interruptable. */
if|if
condition|(
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN61XX
argument_list|)
operator|||
name|OCTEON_IS_MODEL
argument_list|(
name|OCTEON_CN66XX
argument_list|)
condition|)
block|{
name|cvmx_gpio_xbit_cfgx_t
name|gpio_xbit
decl_stmt|;
name|gpio_xbit
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_XBIT_CFGX
argument_list|(
name|bit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
condition|)
name|gpio_xbit
operator|.
name|s
operator|.
name|tx_oe
operator|=
literal|1
expr_stmt|;
else|else
name|gpio_xbit
operator|.
name|s
operator|.
name|tx_oe
operator|=
literal|0
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_XBIT_CFGX
argument_list|(
name|bit
argument_list|)
argument_list|,
name|gpio_xbit
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
else|else
name|cvmx_dprintf
argument_list|(
literal|"cvmx_gpio_cfg: Invalid GPIO bit(%d)\n"
argument_list|,
name|bit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cvmx_gpio_bit_cfgx_t
name|gpio_bit
decl_stmt|;
name|gpio_bit
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_BIT_CFGX
argument_list|(
name|bit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
condition|)
name|gpio_bit
operator|.
name|s
operator|.
name|tx_oe
operator|=
literal|1
expr_stmt|;
else|else
name|gpio_bit
operator|.
name|s
operator|.
name|tx_oe
operator|=
literal|0
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_BIT_CFGX
argument_list|(
name|bit
argument_list|)
argument_list|,
name|gpio_bit
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**  * GPIO Read Data  *  * @return Status of the GPIO pins  */
specifier|static
specifier|inline
name|uint32_t
name|cvmx_gpio_read
parameter_list|(
name|void
parameter_list|)
block|{
name|cvmx_gpio_rx_dat_t
name|gpio_rx_dat
decl_stmt|;
name|gpio_rx_dat
operator|.
name|u64
operator|=
name|cvmx_read_csr
argument_list|(
name|CVMX_GPIO_RX_DAT
argument_list|)
expr_stmt|;
return|return
name|gpio_rx_dat
operator|.
name|s
operator|.
name|dat
return|;
block|}
comment|/**  * GPIO Clear pin  *  * @param clear_mask Bit mask to indicate which bits to drive to '0'.  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_clear
parameter_list|(
name|uint32_t
name|clear_mask
parameter_list|)
block|{
name|cvmx_gpio_tx_clr_t
name|gpio_tx_clr
decl_stmt|;
name|gpio_tx_clr
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_tx_clr
operator|.
name|s
operator|.
name|clr
operator|=
name|clear_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_TX_CLR
argument_list|,
name|gpio_tx_clr
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
comment|/**  * GPIO Set pin  *  * @param set_mask Bit mask to indicate which bits to drive to '1'.  */
specifier|static
specifier|inline
name|void
name|cvmx_gpio_set
parameter_list|(
name|uint32_t
name|set_mask
parameter_list|)
block|{
name|cvmx_gpio_tx_set_t
name|gpio_tx_set
decl_stmt|;
name|gpio_tx_set
operator|.
name|u64
operator|=
literal|0
expr_stmt|;
name|gpio_tx_set
operator|.
name|s
operator|.
name|set
operator|=
name|set_mask
expr_stmt|;
name|cvmx_write_csr
argument_list|(
name|CVMX_GPIO_TX_SET
argument_list|,
name|gpio_tx_set
operator|.
name|u64
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

