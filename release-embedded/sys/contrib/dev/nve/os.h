begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/***************************************************************************\ |*                                                                           *| |*       Copyright 2001-2004 NVIDIA Corporation.  All Rights Reserved.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN  IS PROPRIETARY AND CONFIDENTIAL     *| |*     TO NVIDIA, CORPORATION.   USE,  REPRODUCTION OR DISCLOSURE TO ANY     *| |*     THIRD PARTY IS SUBJECT TO WRITTEN PRE-APPROVAL BY NVIDIA, CORP.       *| |*                                                                           *| |*     THE INFORMATION CONTAINED HEREIN IS PROVIDED  "AS IS" WITHOUT         *| |*     EXPRESS OR IMPLIED WARRANTY OF ANY KIND, INCLUDING ALL IMPLIED        *| |*     WARRANTIES OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A     *| |*     PARTICULAR PURPOSE.                                                   *| |*                                                                           *| \***************************************************************************/
end_comment

begin_comment
comment|/*     FILE:   os.h     DATE:   2/7/00      This file contains the os interface. Note that the os interface is     itself an OS-independent API. The OS specific module is implemented     by ndis.c for Win9X/NT and linuxnet.c for linux. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OS_H_
end_ifndef

begin_define
define|#
directive|define
name|_OS_H_
end_define

begin_include
include|#
directive|include
file|"phy.h"
end_include

begin_define
define|#
directive|define
name|HDO_VERSION_STRING
value|"HDR O: $Revision: #21 $";
end_define

begin_comment
comment|// This is the maximum packet size that we will be sending
end_comment

begin_comment
comment|// #define MAX_PACKET_SIZE     2048
end_comment

begin_comment
comment|//#define RX_BUFFER_SIZE      2048
end_comment

begin_define
define|#
directive|define
name|MIN_PACKET_MTU_SIZE
value|576
end_define

begin_define
define|#
directive|define
name|MAX_PACKET_MTU_SIZE
value|9202
end_define

begin_define
define|#
directive|define
name|MAX_PACKET_SIZE_2048
value|2048
end_define

begin_define
define|#
directive|define
name|MAX_PACKET_SIZE_1514
value|1514
end_define

begin_define
define|#
directive|define
name|MAX_PACKET_SIZE_1518
value|1518
end_define

begin_define
define|#
directive|define
name|MAX_PACKET_SIZE_JUMBO
value|(9 * 1024)
end_define

begin_typedef
typedef|typedef
struct|struct
name|_MEMORY_BLOCK
block|{
name|PNV_VOID
name|pLogical
decl_stmt|;
name|PNV_VOID
name|pPhysical
decl_stmt|;
name|NV_UINT32
name|uiLength
decl_stmt|;
block|}
name|MEMORY_BLOCK
operator|,
typedef|*
name|PMEMORY_BLOCK
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ALLOC_MEMORY_NONCACHED
value|0x0001
end_define

begin_define
define|#
directive|define
name|ALLOC_MEMORY_ALIGNED
value|0x0002
end_define

begin_typedef
typedef|typedef
struct|struct
name|_MEMORY_BLOCKEX
block|{
name|PNV_VOID
name|pLogical
decl_stmt|;
name|PNV_VOID
name|pPhysical
decl_stmt|;
name|NV_UINT32
name|uiLength
decl_stmt|;
comment|/* Parameter to OS layer to indicate what type of memory is needed */
name|NV_UINT16
name|AllocFlags
decl_stmt|;
name|NV_UINT16
name|AlignmentSize
decl_stmt|;
comment|//always power of 2
comment|/* Following three fields used for aligned memory allocation */
name|PNV_VOID
name|pLogicalOrig
decl_stmt|;
name|NV_UINT32
name|pPhysicalOrigLow
decl_stmt|;
name|NV_UINT32
name|pPhysicalOrigHigh
decl_stmt|;
name|NV_UINT32
name|uiLengthOrig
decl_stmt|;
block|}
name|MEMORY_BLOCKEX
operator|,
typedef|*
name|PMEMORY_BLOCKEX
typedef|;
end_typedef

begin_comment
comment|// The typedefs for the OS functions
end_comment

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_MEMORY_ALLOC
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCK
name|pMem
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_MEMORY_FREE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCK
name|pMem
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_MEMORY_ALLOCEX
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCKEX
name|pMem
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_MEMORY_FREEEX
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCKEX
name|pMem
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_CLEAR_MEMORY
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PNV_VOID
name|pMem
parameter_list|,
name|NV_SINT32
name|iLength
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_STALL_EXECUTION
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|NV_UINT32
name|ulTimeInMicroseconds
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ALLOC_RECEIVE_BUFFER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCK
name|pMem
parameter_list|,
name|PNV_VOID
modifier|*
name|ppvID
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_FREE_RECEIVE_BUFFER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PMEMORY_BLOCK
name|pMem
parameter_list|,
name|PNV_VOID
name|pvID
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PACKET_WAS_SENT
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PNV_VOID
name|pvID
parameter_list|,
name|NV_UINT32
name|ulSuccess
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PACKET_WAS_RECEIVED
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|PNV_VOID
name|pvADReadData
parameter_list|,
name|NV_UINT32
name|ulSuccess
parameter_list|,
name|NV_UINT8
modifier|*
name|pNewBuffer
parameter_list|,
name|NV_UINT8
name|uc8021pPriority
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_LINK_STATE_HAS_CHANGED
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|NV_SINT32
name|nEnabled
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_ALLOC_TIMER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
modifier|*
name|ppvTimer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_FREE_TIMER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvTimer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_INITIALIZE_TIMER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvTimer
parameter_list|,
name|PTIMER_FUNC
name|pvFunc
parameter_list|,
name|PNV_VOID
name|pvFuncParameter
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_SET_TIMER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvTimer
parameter_list|,
name|NV_UINT32
name|dwMillisecondsDelay
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_CANCEL_TIMER
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvTimer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_PREPROCESS_PACKET
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvADReadData
parameter_list|,
name|PNV_VOID
modifier|*
name|ppvID
parameter_list|,
name|NV_UINT8
modifier|*
name|pNewBuffer
parameter_list|,
name|NV_UINT8
name|uc8021pPriority
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|PNV_VOID
function_decl|(
modifier|*
name|PFN_PREPROCESS_PACKET_NOPQ
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvADReadData
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_INDICATE_PACKETS
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
modifier|*
name|ppvID
parameter_list|,
name|NV_UINT32
name|ulNumPacket
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_LOCK_ALLOC
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|NV_SINT32
name|iLockType
parameter_list|,
name|PNV_VOID
modifier|*
name|ppvLock
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_LOCK_ACQUIRE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|NV_SINT32
name|iLockType
parameter_list|,
name|PNV_VOID
name|pvLock
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|NV_SINT32
function_decl|(
modifier|*
name|PFN_LOCK_RELEASE
function_decl|)
parameter_list|(
name|PNV_VOID
name|pOSCX
parameter_list|,
name|NV_SINT32
name|iLockType
parameter_list|,
name|PNV_VOID
name|pvLock
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|NV_API_CALL
name|PNV_VOID
function_decl|(
modifier|*
name|PFN_RETURN_BUFFER_VIRTUAL
function_decl|)
parameter_list|(
name|PNV_VOID
name|pvContext
parameter_list|,
name|PNV_VOID
name|pvADReadData
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|// Here are the OS functions that those objects below the OS interface
end_comment

begin_comment
comment|// can call up to.
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_OS_API
block|{
comment|// OS Context -- this is a parameter to every OS API call
name|PNV_VOID
name|pOSCX
decl_stmt|;
comment|// Basic OS functions
name|PFN_MEMORY_ALLOC
name|pfnAllocMemory
decl_stmt|;
name|PFN_MEMORY_FREE
name|pfnFreeMemory
decl_stmt|;
name|PFN_MEMORY_ALLOCEX
name|pfnAllocMemoryEx
decl_stmt|;
name|PFN_MEMORY_FREEEX
name|pfnFreeMemoryEx
decl_stmt|;
name|PFN_CLEAR_MEMORY
name|pfnClearMemory
decl_stmt|;
name|PFN_STALL_EXECUTION
name|pfnStallExecution
decl_stmt|;
name|PFN_ALLOC_RECEIVE_BUFFER
name|pfnAllocReceiveBuffer
decl_stmt|;
name|PFN_FREE_RECEIVE_BUFFER
name|pfnFreeReceiveBuffer
decl_stmt|;
name|PFN_PACKET_WAS_SENT
name|pfnPacketWasSent
decl_stmt|;
name|PFN_PACKET_WAS_RECEIVED
name|pfnPacketWasReceived
decl_stmt|;
name|PFN_LINK_STATE_HAS_CHANGED
name|pfnLinkStateHasChanged
decl_stmt|;
name|PFN_ALLOC_TIMER
name|pfnAllocTimer
decl_stmt|;
name|PFN_FREE_TIMER
name|pfnFreeTimer
decl_stmt|;
name|PFN_INITIALIZE_TIMER
name|pfnInitializeTimer
decl_stmt|;
name|PFN_SET_TIMER
name|pfnSetTimer
decl_stmt|;
name|PFN_CANCEL_TIMER
name|pfnCancelTimer
decl_stmt|;
name|PFN_PREPROCESS_PACKET
name|pfnPreprocessPacket
decl_stmt|;
name|PFN_PREPROCESS_PACKET_NOPQ
name|pfnPreprocessPacketNopq
decl_stmt|;
name|PFN_INDICATE_PACKETS
name|pfnIndicatePackets
decl_stmt|;
name|PFN_LOCK_ALLOC
name|pfnLockAlloc
decl_stmt|;
name|PFN_LOCK_ACQUIRE
name|pfnLockAcquire
decl_stmt|;
name|PFN_LOCK_RELEASE
name|pfnLockRelease
decl_stmt|;
name|PFN_RETURN_BUFFER_VIRTUAL
name|pfnReturnBufferVirtual
decl_stmt|;
block|}
name|OS_API
operator|,
typedef|*
name|POS_API
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _OS_H_
end_comment

end_unit

