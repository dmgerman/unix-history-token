begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2004 Topspin Corporation.  All rights reserved.  *  * This software is available to you under a choice of one of two  * licenses.  You may choose to be licensed under the terms of the GNU  * General Public License (GPL) Version 2, available from the file  * COPYING in the main directory of this source tree, or the  * OpenIB.org BSD license below:  *  *     Redistribution and use in source and binary forms, with or  *     without modification, are permitted provided that the following  *     conditions are met:  *  *      - Redistributions of source code must retain the above  *        copyright notice, this list of conditions and the following  *        disclaimer.  *  *      - Redistributions in binary form must reproduce the above  *        copyright notice, this list of conditions and the following  *        disclaimer in the documentation and/or other materials  *        provided with the distribution.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN  * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  * SOFTWARE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IB_PACK_H
end_ifndef

begin_define
define|#
directive|define
name|IB_PACK_H
end_define

begin_include
include|#
directive|include
file|<rdma/ib_verbs.h>
end_include

begin_enum
enum|enum
block|{
name|IB_LRH_BYTES
init|=
literal|8
block|,
name|IB_ETH_BYTES
init|=
literal|14
block|,
name|IB_VLAN_BYTES
init|=
literal|4
block|,
name|IB_GRH_BYTES
init|=
literal|40
block|,
name|IB_BTH_BYTES
init|=
literal|12
block|,
name|IB_DETH_BYTES
init|=
literal|8
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ib_field
block|{
name|size_t
name|struct_offset_bytes
decl_stmt|;
name|size_t
name|struct_size_bytes
decl_stmt|;
name|int
name|offset_words
decl_stmt|;
name|int
name|offset_bits
decl_stmt|;
name|int
name|size_bits
decl_stmt|;
name|char
modifier|*
name|field_name
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RESERVED
define|\
value|.field_name          = "reserved"
end_define

begin_comment
comment|/*  * This macro cleans up the definitions of constants for BTH opcodes.  * It is used to define constants such as IB_OPCODE_UD_SEND_ONLY,  * which becomes IB_OPCODE_UD + IB_OPCODE_SEND_ONLY, and this gives  * the correct value.  *  * In short, user code should use the constants defined using the  * macro rather than worrying about adding together other constants. */
end_comment

begin_define
define|#
directive|define
name|IB_OPCODE
parameter_list|(
name|transport
parameter_list|,
name|op
parameter_list|)
define|\
value|IB_OPCODE_ ## transport ## _ ## op = \ 		IB_OPCODE_ ## transport + IB_OPCODE_ ## op
end_define

begin_enum
enum|enum
block|{
comment|/* transport types -- just used to define real constants */
name|IB_OPCODE_RC
init|=
literal|0x00
block|,
name|IB_OPCODE_UC
init|=
literal|0x20
block|,
name|IB_OPCODE_RD
init|=
literal|0x40
block|,
name|IB_OPCODE_UD
init|=
literal|0x60
block|,
comment|/* operations -- just used to define real constants */
name|IB_OPCODE_SEND_FIRST
init|=
literal|0x00
block|,
name|IB_OPCODE_SEND_MIDDLE
init|=
literal|0x01
block|,
name|IB_OPCODE_SEND_LAST
init|=
literal|0x02
block|,
name|IB_OPCODE_SEND_LAST_WITH_IMMEDIATE
init|=
literal|0x03
block|,
name|IB_OPCODE_SEND_ONLY
init|=
literal|0x04
block|,
name|IB_OPCODE_SEND_ONLY_WITH_IMMEDIATE
init|=
literal|0x05
block|,
name|IB_OPCODE_RDMA_WRITE_FIRST
init|=
literal|0x06
block|,
name|IB_OPCODE_RDMA_WRITE_MIDDLE
init|=
literal|0x07
block|,
name|IB_OPCODE_RDMA_WRITE_LAST
init|=
literal|0x08
block|,
name|IB_OPCODE_RDMA_WRITE_LAST_WITH_IMMEDIATE
init|=
literal|0x09
block|,
name|IB_OPCODE_RDMA_WRITE_ONLY
init|=
literal|0x0a
block|,
name|IB_OPCODE_RDMA_WRITE_ONLY_WITH_IMMEDIATE
init|=
literal|0x0b
block|,
name|IB_OPCODE_RDMA_READ_REQUEST
init|=
literal|0x0c
block|,
name|IB_OPCODE_RDMA_READ_RESPONSE_FIRST
init|=
literal|0x0d
block|,
name|IB_OPCODE_RDMA_READ_RESPONSE_MIDDLE
init|=
literal|0x0e
block|,
name|IB_OPCODE_RDMA_READ_RESPONSE_LAST
init|=
literal|0x0f
block|,
name|IB_OPCODE_RDMA_READ_RESPONSE_ONLY
init|=
literal|0x10
block|,
name|IB_OPCODE_ACKNOWLEDGE
init|=
literal|0x11
block|,
name|IB_OPCODE_ATOMIC_ACKNOWLEDGE
init|=
literal|0x12
block|,
name|IB_OPCODE_COMPARE_SWAP
init|=
literal|0x13
block|,
name|IB_OPCODE_FETCH_ADD
init|=
literal|0x14
block|,
comment|/* real constants follow -- see comment about above IB_OPCODE() 	   macro for more details */
comment|/* RC */
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|SEND_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_WRITE_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_READ_REQUEST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_READ_RESPONSE_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_READ_RESPONSE_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_READ_RESPONSE_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|RDMA_READ_RESPONSE_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|ACKNOWLEDGE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|ATOMIC_ACKNOWLEDGE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|COMPARE_SWAP
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RC
argument_list|,
name|FETCH_ADD
argument_list|)
block|,
comment|/* UC */
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|SEND_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|UC
argument_list|,
name|RDMA_WRITE_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
comment|/* RD */
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|SEND_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_LAST_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_WRITE_ONLY_WITH_IMMEDIATE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_READ_REQUEST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_READ_RESPONSE_FIRST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_READ_RESPONSE_MIDDLE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_READ_RESPONSE_LAST
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|RDMA_READ_RESPONSE_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|ACKNOWLEDGE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|ATOMIC_ACKNOWLEDGE
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|COMPARE_SWAP
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
name|RD
argument_list|,
name|FETCH_ADD
argument_list|)
block|,
comment|/* UD */
name|IB_OPCODE
argument_list|(
name|UD
argument_list|,
name|SEND_ONLY
argument_list|)
block|,
name|IB_OPCODE
argument_list|(
argument|UD
argument_list|,
argument|SEND_ONLY_WITH_IMMEDIATE
argument_list|)
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|IB_LNH_RAW
init|=
literal|0
block|,
name|IB_LNH_IP
init|=
literal|1
block|,
name|IB_LNH_IBA_LOCAL
init|=
literal|2
block|,
name|IB_LNH_IBA_GLOBAL
init|=
literal|3
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ib_unpacked_lrh
block|{
name|u8
name|virtual_lane
decl_stmt|;
name|u8
name|link_version
decl_stmt|;
name|u8
name|service_level
decl_stmt|;
name|u8
name|link_next_header
decl_stmt|;
name|__be16
name|destination_lid
decl_stmt|;
name|__be16
name|packet_length
decl_stmt|;
name|__be16
name|source_lid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_unpacked_grh
block|{
name|u8
name|ip_version
decl_stmt|;
name|u8
name|traffic_class
decl_stmt|;
name|__be32
name|flow_label
decl_stmt|;
name|__be16
name|payload_length
decl_stmt|;
name|u8
name|next_header
decl_stmt|;
name|u8
name|hop_limit
decl_stmt|;
name|union
name|ib_gid
name|source_gid
decl_stmt|;
name|union
name|ib_gid
name|destination_gid
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_unpacked_bth
block|{
name|u8
name|opcode
decl_stmt|;
name|u8
name|solicited_event
decl_stmt|;
name|u8
name|mig_req
decl_stmt|;
name|u8
name|pad_count
decl_stmt|;
name|u8
name|transport_header_version
decl_stmt|;
name|__be16
name|pkey
decl_stmt|;
name|__be32
name|destination_qpn
decl_stmt|;
name|u8
name|ack_req
decl_stmt|;
name|__be32
name|psn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_unpacked_deth
block|{
name|__be32
name|qkey
decl_stmt|;
name|__be32
name|source_qpn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_unpacked_eth
block|{
name|u8
name|dmac_h
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|dmac_l
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|smac_h
index|[
literal|2
index|]
decl_stmt|;
name|u8
name|smac_l
index|[
literal|4
index|]
decl_stmt|;
name|__be16
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_unpacked_vlan
block|{
name|__be16
name|tag
decl_stmt|;
name|__be16
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ib_ud_header
block|{
name|int
name|lrh_present
decl_stmt|;
name|struct
name|ib_unpacked_lrh
name|lrh
decl_stmt|;
name|int
name|eth_present
decl_stmt|;
name|struct
name|ib_unpacked_eth
name|eth
decl_stmt|;
name|int
name|vlan_present
decl_stmt|;
name|struct
name|ib_unpacked_vlan
name|vlan
decl_stmt|;
name|int
name|grh_present
decl_stmt|;
name|struct
name|ib_unpacked_grh
name|grh
decl_stmt|;
name|struct
name|ib_unpacked_bth
name|bth
decl_stmt|;
name|struct
name|ib_unpacked_deth
name|deth
decl_stmt|;
name|int
name|immediate_present
decl_stmt|;
name|__be32
name|immediate_data
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|void
name|ib_pack
parameter_list|(
specifier|const
name|struct
name|ib_field
modifier|*
name|desc
parameter_list|,
name|int
name|desc_len
parameter_list|,
name|void
modifier|*
name|structure
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_unpack
parameter_list|(
specifier|const
name|struct
name|ib_field
modifier|*
name|desc
parameter_list|,
name|int
name|desc_len
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|void
modifier|*
name|structure
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ib_ud_header_init
parameter_list|(
name|int
name|payload_bytes
parameter_list|,
name|int
name|lrh_present
parameter_list|,
name|int
name|eth_present
parameter_list|,
name|int
name|vlan_present
parameter_list|,
name|int
name|grh_present
parameter_list|,
name|int
name|immediate_present
parameter_list|,
name|struct
name|ib_ud_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_ud_header_pack
parameter_list|(
name|struct
name|ib_ud_header
modifier|*
name|header
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_ud_header_unpack
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|struct
name|ib_ud_header
modifier|*
name|header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_lrh_header_pack
parameter_list|(
name|struct
name|ib_unpacked_lrh
modifier|*
name|lrh
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ib_lrh_header_unpack
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|struct
name|ib_unpacked_lrh
modifier|*
name|lrh
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IB_PACK_H */
end_comment

end_unit

