begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * APM (Advanced Power Management) Event Dispatcher  *  * Copyright (c) 1999 Mitsuru IWASAKI<iwasaki@FreeBSD.org>  * Copyright (c) 1999 KOIE Hidetaka<koie@suri.co.jp>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_define
define|#
directive|define
name|APMD_CONFIGFILE
value|"/etc/apmd.conf"
end_define

begin_define
define|#
directive|define
name|APM_CTL_DEVICEFILE
value|"/dev/apmctl"
end_define

begin_define
define|#
directive|define
name|APM_NORM_DEVICEFILE
value|"/dev/apm"
end_define

begin_define
define|#
directive|define
name|APMD_PIDFILE
value|"/var/run/apmd.pid"
end_define

begin_define
define|#
directive|define
name|NICE_INCR
value|-20
end_define

begin_enum
enum|enum
block|{
name|EVENT_NOEVENT
block|,
name|EVENT_STANDBYREQ
block|,
name|EVENT_SUSPENDREQ
block|,
name|EVENT_NORMRESUME
block|,
name|EVENT_CRITRESUME
block|,
name|EVENT_BATTERYLOW
block|,
name|EVENT_POWERSTATECHANGE
block|,
name|EVENT_UPDATETIME
block|,
name|EVENT_CRITSUSPEND
block|,
name|EVENT_USERSTANDBYREQ
block|,
name|EVENT_USERSUSPENDREQ
block|,
name|EVENT_STANDBYRESUME
block|,
name|EVENT_CAPABILITIESCHANGE
block|,
name|EVENT_MAX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|event_cmd_op
block|{
name|int
function_decl|(
modifier|*
name|act
function_decl|)
parameter_list|(
name|void
modifier|*
name|this
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dump
function_decl|)
parameter_list|(
name|void
modifier|*
name|this
parameter_list|,
name|FILE
modifier|*
name|fp
parameter_list|)
function_decl|;
name|struct
name|event_cmd
modifier|*
function_decl|(
modifier|*
name|clone
function_decl|)
parameter_list|(
name|void
modifier|*
name|this
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|void
modifier|*
name|this
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|event_cmd
block|{
name|struct
name|event_cmd
modifier|*
name|next
decl_stmt|;
name|size_t
name|len
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|event_cmd_op
modifier|*
name|op
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|event_cmd_exec
block|{
name|struct
name|event_cmd
name|evcmd
decl_stmt|;
name|char
modifier|*
name|line
decl_stmt|;
comment|/* Command line */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|event_cmd_reject
block|{
name|struct
name|event_cmd
name|evcmd
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|event_config
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|event_cmd
modifier|*
name|cmdlist
decl_stmt|;
name|int
name|rejectable
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|battery_watch_event
block|{
name|struct
name|battery_watch_event
modifier|*
name|next
decl_stmt|;
name|int
name|level
decl_stmt|;
enum|enum
block|{
name|BATTERY_CHARGING
block|,
name|BATTERY_DISCHARGING
block|}
name|direction
enum|;
enum|enum
block|{
name|BATTERY_MINUTES
block|,
name|BATTERY_PERCENT
block|}
name|type
enum|;
name|int
name|done
decl_stmt|;
name|struct
name|event_cmd
modifier|*
name|cmdlist
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|event_cmd_op
name|event_cmd_exec_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|event_cmd_op
name|event_cmd_reject_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|event_config
name|events
index|[
name|EVENT_MAX
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|battery_watch_event
modifier|*
name|battery_watch_list
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|int
name|register_battery_handlers
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|direction
parameter_list|,
name|struct
name|event_cmd
modifier|*
name|cmdlist
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|register_apm_event_handlers
parameter_list|(
name|bitstr_t
name|bit_decl
parameter_list|(
name|evlist
parameter_list|,
name|EVENT_MAX
parameter_list|)
parameter_list|,
name|struct
name|event_cmd
modifier|*
name|cmdlist
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|free_event_cmd_list
parameter_list|(
name|struct
name|event_cmd
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|yyparse
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|yyerror
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|yylex
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|event_cmd
modifier|*
name|event_cmd_default_clone
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|event_cmd_exec_act
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|event_cmd_exec_dump
parameter_list|(
name|void
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|event_cmd
modifier|*
name|event_cmd_exec_clone
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|event_cmd_exec_free
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|event_cmd_reject_act
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|event_cmd
modifier|*
name|clone_event_cmd_list
parameter_list|(
name|struct
name|event_cmd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exec_run_cmd
parameter_list|(
name|struct
name|event_cmd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|exec_event_cmd
parameter_list|(
name|struct
name|event_config
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|read_config
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dump_config
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|destroy_config
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|restart
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|enque_signal
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wait_child
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|proc_signal
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|proc_apmevent
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|check_battery
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|event_loop
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

end_unit

