begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Copyright 2006, Google Inc.
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|// This file is AUTOMATICALLY GENERATED on 09/24/2010 by command
end_comment

begin_comment
comment|// 'gen_gtest_pred_impl.py 5'.  DO NOT EDIT BY HAND!
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Implements a family of generic predicate assertion macros.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
end_ifndef

begin_define
define|#
directive|define
name|GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
end_define

begin_comment
comment|// Makes sure this header is not included before gtest.h.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GTEST_INCLUDE_GTEST_GTEST_H_
end_ifndef

begin_error
error|#
directive|error
error|Do not include gtest_pred_impl.h directly.  Include gtest.h instead.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_INCLUDE_GTEST_GTEST_H_
end_comment

begin_comment
comment|// This header implements a family of generic predicate assertion
end_comment

begin_comment
comment|// macros:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ASSERT_PRED_FORMAT1(pred_format, v1)
end_comment

begin_comment
comment|//   ASSERT_PRED_FORMAT2(pred_format, v1, v2)
end_comment

begin_comment
comment|//   ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// where pred_format is a function or functor that takes n (in the
end_comment

begin_comment
comment|// case of ASSERT_PRED_FORMATn) values and their source expression
end_comment

begin_comment
comment|// text, and returns a testing::AssertionResult.  See the definition
end_comment

begin_comment
comment|// of ASSERT_EQ in gtest.h for an example.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// If you don't care about formatting, you can use the more
end_comment

begin_comment
comment|// restrictive version:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ASSERT_PRED1(pred, v1)
end_comment

begin_comment
comment|//   ASSERT_PRED2(pred, v1, v2)
end_comment

begin_comment
comment|//   ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// where pred is an n-ary function or functor that returns bool,
end_comment

begin_comment
comment|// and the values v1, v2, ..., must support the<< operator for
end_comment

begin_comment
comment|// streaming to std::ostream.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// We also define the EXPECT_* variations.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// For now we only support predicates whose arity is at most 5.
end_comment

begin_comment
comment|// Please email googletestframework@googlegroups.com if you need
end_comment

begin_comment
comment|// support for higher arities.
end_comment

begin_comment
comment|// GTEST_ASSERT_ is the basic statement to which all of the assertions
end_comment

begin_comment
comment|// in this file reduce.  Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_ASSERT_
parameter_list|(
name|expression
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_AMBIGUOUS_ELSE_BLOCKER_ \   if (const ::testing::AssertionResult gtest_ar = (expression)) \     ; \   else \     on_failure(gtest_ar.failure_message())
end_define

begin_comment
comment|// Helper function for implementing {EXPECT|ASSERT}_PRED1.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|Pred
operator|,
name|typename
name|T1
operator|>
name|AssertionResult
name|AssertPred1Helper
argument_list|(
argument|const char* pred_text
argument_list|,
argument|const char* e1
argument_list|,
argument|Pred pred
argument_list|,
argument|const T1& v1
argument_list|)
block|{
if|if
condition|(
name|pred
argument_list|(
name|v1
argument_list|)
condition|)
return|return
name|AssertionSuccess
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|AssertionFailure
argument_list|()
operator|<<
name|pred_text
operator|<<
literal|"("
operator|<<
name|e1
operator|<<
literal|") evaluates to false, where"
operator|<<
literal|"\n"
operator|<<
name|e1
operator|<<
literal|" evaluates to "
operator|<<
name|v1
return|;
end_return

begin_comment
unit|}
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT1.
end_comment

begin_comment
comment|// Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED_FORMAT1_
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(pred_format(#v1, v1),\                 on_failure)
end_define

begin_comment
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED1.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED1_
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(::testing::AssertPred1Helper(#pred, \                                              #v1, \                                              pred, \                                              v1), on_failure)
end_define

begin_comment
comment|// Unary predicate assertion macros.
end_comment

begin_define
define|#
directive|define
name|EXPECT_PRED_FORMAT1
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|)
define|\
value|GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|EXPECT_PRED1
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|)
define|\
value|GTEST_PRED1_(pred, v1, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED_FORMAT1
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|)
define|\
value|GTEST_PRED_FORMAT1_(pred_format, v1, GTEST_FATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED1
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|)
define|\
value|GTEST_PRED1_(pred, v1, GTEST_FATAL_FAILURE_)
end_define

begin_comment
comment|// Helper function for implementing {EXPECT|ASSERT}_PRED2.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|Pred
operator|,
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|AssertionResult
name|AssertPred2Helper
argument_list|(
argument|const char* pred_text
argument_list|,
argument|const char* e1
argument_list|,
argument|const char* e2
argument_list|,
argument|Pred pred
argument_list|,
argument|const T1& v1
argument_list|,
argument|const T2& v2
argument_list|)
block|{
if|if
condition|(
name|pred
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
condition|)
return|return
name|AssertionSuccess
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|AssertionFailure
argument_list|()
operator|<<
name|pred_text
operator|<<
literal|"("
operator|<<
name|e1
operator|<<
literal|", "
operator|<<
name|e2
operator|<<
literal|") evaluates to false, where"
operator|<<
literal|"\n"
operator|<<
name|e1
operator|<<
literal|" evaluates to "
operator|<<
name|v1
operator|<<
literal|"\n"
operator|<<
name|e2
operator|<<
literal|" evaluates to "
operator|<<
name|v2
return|;
end_return

begin_comment
unit|}
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT2.
end_comment

begin_comment
comment|// Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED_FORMAT2_
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2),\                 on_failure)
end_define

begin_comment
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED2.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED2_
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(::testing::AssertPred2Helper(#pred, \                                              #v1, \                                              #v2, \                                              pred, \                                              v1, \                                              v2), on_failure)
end_define

begin_comment
comment|// Binary predicate assertion macros.
end_comment

begin_define
define|#
directive|define
name|EXPECT_PRED_FORMAT2
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|)
define|\
value|GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|EXPECT_PRED2
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|)
define|\
value|GTEST_PRED2_(pred, v1, v2, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED_FORMAT2
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|)
define|\
value|GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED2
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|)
define|\
value|GTEST_PRED2_(pred, v1, v2, GTEST_FATAL_FAILURE_)
end_define

begin_comment
comment|// Helper function for implementing {EXPECT|ASSERT}_PRED3.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|Pred
operator|,
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
name|AssertionResult
name|AssertPred3Helper
argument_list|(
argument|const char* pred_text
argument_list|,
argument|const char* e1
argument_list|,
argument|const char* e2
argument_list|,
argument|const char* e3
argument_list|,
argument|Pred pred
argument_list|,
argument|const T1& v1
argument_list|,
argument|const T2& v2
argument_list|,
argument|const T3& v3
argument_list|)
block|{
if|if
condition|(
name|pred
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|)
condition|)
return|return
name|AssertionSuccess
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|AssertionFailure
argument_list|()
operator|<<
name|pred_text
operator|<<
literal|"("
operator|<<
name|e1
operator|<<
literal|", "
operator|<<
name|e2
operator|<<
literal|", "
operator|<<
name|e3
operator|<<
literal|") evaluates to false, where"
operator|<<
literal|"\n"
operator|<<
name|e1
operator|<<
literal|" evaluates to "
operator|<<
name|v1
operator|<<
literal|"\n"
operator|<<
name|e2
operator|<<
literal|" evaluates to "
operator|<<
name|v2
operator|<<
literal|"\n"
operator|<<
name|e3
operator|<<
literal|" evaluates to "
operator|<<
name|v3
return|;
end_return

begin_comment
unit|}
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT3.
end_comment

begin_comment
comment|// Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED_FORMAT3_
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(pred_format(#v1, #v2, #v3, v1, v2, v3),\                 on_failure)
end_define

begin_comment
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED3.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED3_
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(::testing::AssertPred3Helper(#pred, \                                              #v1, \                                              #v2, \                                              #v3, \                                              pred, \                                              v1, \                                              v2, \                                              v3), on_failure)
end_define

begin_comment
comment|// Ternary predicate assertion macros.
end_comment

begin_define
define|#
directive|define
name|EXPECT_PRED_FORMAT3
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|)
define|\
value|GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|EXPECT_PRED3
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|)
define|\
value|GTEST_PRED3_(pred, v1, v2, v3, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED_FORMAT3
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|)
define|\
value|GTEST_PRED_FORMAT3_(pred_format, v1, v2, v3, GTEST_FATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED3
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|)
define|\
value|GTEST_PRED3_(pred, v1, v2, v3, GTEST_FATAL_FAILURE_)
end_define

begin_comment
comment|// Helper function for implementing {EXPECT|ASSERT}_PRED4.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|Pred
operator|,
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
name|AssertionResult
name|AssertPred4Helper
argument_list|(
argument|const char* pred_text
argument_list|,
argument|const char* e1
argument_list|,
argument|const char* e2
argument_list|,
argument|const char* e3
argument_list|,
argument|const char* e4
argument_list|,
argument|Pred pred
argument_list|,
argument|const T1& v1
argument_list|,
argument|const T2& v2
argument_list|,
argument|const T3& v3
argument_list|,
argument|const T4& v4
argument_list|)
block|{
if|if
condition|(
name|pred
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|v4
argument_list|)
condition|)
return|return
name|AssertionSuccess
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|AssertionFailure
argument_list|()
operator|<<
name|pred_text
operator|<<
literal|"("
operator|<<
name|e1
operator|<<
literal|", "
operator|<<
name|e2
operator|<<
literal|", "
operator|<<
name|e3
operator|<<
literal|", "
operator|<<
name|e4
operator|<<
literal|") evaluates to false, where"
operator|<<
literal|"\n"
operator|<<
name|e1
operator|<<
literal|" evaluates to "
operator|<<
name|v1
operator|<<
literal|"\n"
operator|<<
name|e2
operator|<<
literal|" evaluates to "
operator|<<
name|v2
operator|<<
literal|"\n"
operator|<<
name|e3
operator|<<
literal|" evaluates to "
operator|<<
name|v3
operator|<<
literal|"\n"
operator|<<
name|e4
operator|<<
literal|" evaluates to "
operator|<<
name|v4
return|;
end_return

begin_comment
unit|}
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT4.
end_comment

begin_comment
comment|// Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED_FORMAT4_
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, v1, v2, v3, v4),\                 on_failure)
end_define

begin_comment
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED4.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED4_
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(::testing::AssertPred4Helper(#pred, \                                              #v1, \                                              #v2, \                                              #v3, \                                              #v4, \                                              pred, \                                              v1, \                                              v2, \                                              v3, \                                              v4), on_failure)
end_define

begin_comment
comment|// 4-ary predicate assertion macros.
end_comment

begin_define
define|#
directive|define
name|EXPECT_PRED_FORMAT4
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|)
define|\
value|GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|EXPECT_PRED4
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|)
define|\
value|GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED_FORMAT4
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|)
define|\
value|GTEST_PRED_FORMAT4_(pred_format, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED4
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|)
define|\
value|GTEST_PRED4_(pred, v1, v2, v3, v4, GTEST_FATAL_FAILURE_)
end_define

begin_comment
comment|// Helper function for implementing {EXPECT|ASSERT}_PRED5.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|Pred
operator|,
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|>
name|AssertionResult
name|AssertPred5Helper
argument_list|(
argument|const char* pred_text
argument_list|,
argument|const char* e1
argument_list|,
argument|const char* e2
argument_list|,
argument|const char* e3
argument_list|,
argument|const char* e4
argument_list|,
argument|const char* e5
argument_list|,
argument|Pred pred
argument_list|,
argument|const T1& v1
argument_list|,
argument|const T2& v2
argument_list|,
argument|const T3& v3
argument_list|,
argument|const T4& v4
argument_list|,
argument|const T5& v5
argument_list|)
block|{
if|if
condition|(
name|pred
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|,
name|v3
argument_list|,
name|v4
argument_list|,
name|v5
argument_list|)
condition|)
return|return
name|AssertionSuccess
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|AssertionFailure
argument_list|()
operator|<<
name|pred_text
operator|<<
literal|"("
operator|<<
name|e1
operator|<<
literal|", "
operator|<<
name|e2
operator|<<
literal|", "
operator|<<
name|e3
operator|<<
literal|", "
operator|<<
name|e4
operator|<<
literal|", "
operator|<<
name|e5
operator|<<
literal|") evaluates to false, where"
operator|<<
literal|"\n"
operator|<<
name|e1
operator|<<
literal|" evaluates to "
operator|<<
name|v1
operator|<<
literal|"\n"
operator|<<
name|e2
operator|<<
literal|" evaluates to "
operator|<<
name|v2
operator|<<
literal|"\n"
operator|<<
name|e3
operator|<<
literal|" evaluates to "
operator|<<
name|v3
operator|<<
literal|"\n"
operator|<<
name|e4
operator|<<
literal|" evaluates to "
operator|<<
name|v4
operator|<<
literal|"\n"
operator|<<
name|e5
operator|<<
literal|" evaluates to "
operator|<<
name|v5
return|;
end_return

begin_comment
unit|}
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED_FORMAT5.
end_comment

begin_comment
comment|// Don't use this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED_FORMAT5_
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(pred_format(#v1, #v2, #v3, #v4, #v5, v1, v2, v3, v4, v5),\                 on_failure)
end_define

begin_comment
comment|// Internal macro for implementing {EXPECT|ASSERT}_PRED5.  Don't use
end_comment

begin_comment
comment|// this in your code.
end_comment

begin_define
define|#
directive|define
name|GTEST_PRED5_
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|,
name|on_failure
parameter_list|)
define|\
value|GTEST_ASSERT_(::testing::AssertPred5Helper(#pred, \                                              #v1, \                                              #v2, \                                              #v3, \                                              #v4, \                                              #v5, \                                              pred, \                                              v1, \                                              v2, \                                              v3, \                                              v4, \                                              v5), on_failure)
end_define

begin_comment
comment|// 5-ary predicate assertion macros.
end_comment

begin_define
define|#
directive|define
name|EXPECT_PRED_FORMAT5
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
define|\
value|GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|EXPECT_PRED5
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
define|\
value|GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_NONFATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED_FORMAT5
parameter_list|(
name|pred_format
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
define|\
value|GTEST_PRED_FORMAT5_(pred_format, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)
end_define

begin_define
define|#
directive|define
name|ASSERT_PRED5
parameter_list|(
name|pred
parameter_list|,
name|v1
parameter_list|,
name|v2
parameter_list|,
name|v3
parameter_list|,
name|v4
parameter_list|,
name|v5
parameter_list|)
define|\
value|GTEST_PRED5_(pred, v1, v2, v3, v4, v5, GTEST_FATAL_FAILURE_)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_
end_comment

end_unit

