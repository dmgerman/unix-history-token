begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This file was GENERATED by command:
end_comment

begin_comment
comment|//     pump.py gmock-generated-nice-strict.h.pump
end_comment

begin_comment
comment|// DO NOT EDIT BY HAND!!!
end_comment

begin_comment
comment|// Copyright 2008, Google Inc.
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Author: wan@google.com (Zhanyong Wan)
end_comment

begin_comment
comment|// Implements class templates NiceMock, NaggyMock, and StrictMock.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Given a mock class MockFoo that is created using Google Mock,
end_comment

begin_comment
comment|// NiceMock<MockFoo> is a subclass of MockFoo that allows
end_comment

begin_comment
comment|// uninteresting calls (i.e. calls to mock methods that have no
end_comment

begin_comment
comment|// EXPECT_CALL specs), NaggyMock<MockFoo> is a subclass of MockFoo
end_comment

begin_comment
comment|// that prints a warning when an uninteresting call occurs, and
end_comment

begin_comment
comment|// StrictMock<MockFoo> is a subclass of MockFoo that treats all
end_comment

begin_comment
comment|// uninteresting calls as errors.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Currently a mock is naggy by default, so MockFoo and
end_comment

begin_comment
comment|// NaggyMock<MockFoo> behave like the same.  However, we will soon
end_comment

begin_comment
comment|// switch the default behavior of mocks to be nice, as that in general
end_comment

begin_comment
comment|// leads to more maintainable tests.  When that happens, MockFoo will
end_comment

begin_comment
comment|// stop behaving like NaggyMock<MockFoo> and start behaving like
end_comment

begin_comment
comment|// NiceMock<MockFoo>.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// NiceMock, NaggyMock, and StrictMock "inherit" the constructors of
end_comment

begin_comment
comment|// their respective base class, with up-to 10 arguments.  Therefore
end_comment

begin_comment
comment|// you can write NiceMock<MockFoo>(5, "a") to construct a nice mock
end_comment

begin_comment
comment|// where MockFoo has a constructor that accepts (int, const char*),
end_comment

begin_comment
comment|// for example.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// A known limitation is that NiceMock<MockFoo>, NaggyMock<MockFoo>,
end_comment

begin_comment
comment|// and StrictMock<MockFoo> only works for mock methods defined using
end_comment

begin_comment
comment|// the MOCK_METHOD* family of macros DIRECTLY in the MockFoo class.
end_comment

begin_comment
comment|// If a mock method is defined in a base class of MockFoo, the "nice"
end_comment

begin_comment
comment|// or "strict" modifier may not affect it, depending on the compiler.
end_comment

begin_comment
comment|// In particular, nesting NiceMock, NaggyMock, and StrictMock is NOT
end_comment

begin_comment
comment|// supported.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Another known limitation is that the constructors of the base mock
end_comment

begin_comment
comment|// cannot have arguments passed by non-const reference, which are
end_comment

begin_comment
comment|// banned by the Google C++ style guide anyway.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_
end_ifndef

begin_define
define|#
directive|define
name|GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_
end_define

begin_include
include|#
directive|include
file|"gmock/gmock-spec-builders.h"
end_include

begin_include
include|#
directive|include
file|"gmock/internal/gmock-port.h"
end_include

begin_decl_stmt
name|namespace
name|testing
block|{
name|template
operator|<
name|class
name|MockClass
operator|>
name|class
name|NiceMock
operator|:
name|public
name|MockClass
block|{
name|public
operator|:
comment|// We don't factor out the constructor body to a common method, as
comment|// we have to avoid a possible clash with members of MockClass.
name|NiceMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
comment|// C++ doesn't (yet) allow inheritance of constructors, so we have
comment|// to define it for each arity.
name|template
operator|<
name|typename
name|A1
operator|>
name|explicit
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
block|,
name|typename
name|A10
operator|>
name|NiceMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|,
specifier|const
name|A10
operator|&
name|a10
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|,
argument|a10
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|AllowUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|virtual
operator|~
name|NiceMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|UnregisterCallReaction
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|private
operator|:
name|GTEST_DISALLOW_COPY_AND_ASSIGN_
argument_list|(
name|NiceMock
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|MockClass
operator|>
name|class
name|NaggyMock
operator|:
name|public
name|MockClass
block|{
name|public
operator|:
comment|// We don't factor out the constructor body to a common method, as
comment|// we have to avoid a possible clash with members of MockClass.
name|NaggyMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
comment|// C++ doesn't (yet) allow inheritance of constructors, so we have
comment|// to define it for each arity.
name|template
operator|<
name|typename
name|A1
operator|>
name|explicit
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
block|,
name|typename
name|A10
operator|>
name|NaggyMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|,
specifier|const
name|A10
operator|&
name|a10
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|,
argument|a10
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|WarnUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|virtual
operator|~
name|NaggyMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|UnregisterCallReaction
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|private
operator|:
name|GTEST_DISALLOW_COPY_AND_ASSIGN_
argument_list|(
name|NaggyMock
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|MockClass
operator|>
name|class
name|StrictMock
operator|:
name|public
name|MockClass
block|{
name|public
operator|:
comment|// We don't factor out the constructor body to a common method, as
comment|// we have to avoid a possible clash with members of MockClass.
name|StrictMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
comment|// C++ doesn't (yet) allow inheritance of constructors, so we have
comment|// to define it for each arity.
name|template
operator|<
name|typename
name|A1
operator|>
name|explicit
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|template
operator|<
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
block|,
name|typename
name|A10
operator|>
name|StrictMock
argument_list|(
specifier|const
name|A1
operator|&
name|a1
argument_list|,
specifier|const
name|A2
operator|&
name|a2
argument_list|,
specifier|const
name|A3
operator|&
name|a3
argument_list|,
specifier|const
name|A4
operator|&
name|a4
argument_list|,
specifier|const
name|A5
operator|&
name|a5
argument_list|,
specifier|const
name|A6
operator|&
name|a6
argument_list|,
specifier|const
name|A7
operator|&
name|a7
argument_list|,
specifier|const
name|A8
operator|&
name|a8
argument_list|,
specifier|const
name|A9
operator|&
name|a9
argument_list|,
specifier|const
name|A10
operator|&
name|a10
argument_list|)
operator|:
name|MockClass
argument_list|(
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|,
argument|a5
argument_list|,
argument|a6
argument_list|,
argument|a7
argument_list|,
argument|a8
argument_list|,
argument|a9
argument_list|,
argument|a10
argument_list|)
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|FailUninterestingCalls
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|virtual
operator|~
name|StrictMock
argument_list|()
block|{
operator|::
name|testing
operator|::
name|Mock
operator|::
name|UnregisterCallReaction
argument_list|(
name|internal
operator|::
name|ImplicitCast_
operator|<
name|MockClass
operator|*
operator|>
operator|(
name|this
operator|)
argument_list|)
block|;   }
name|private
operator|:
name|GTEST_DISALLOW_COPY_AND_ASSIGN_
argument_list|(
name|StrictMock
argument_list|)
block|; }
expr_stmt|;
comment|// The following specializations catch some (relatively more common)
comment|// user errors of nesting nice and strict mocks.  They do NOT catch
comment|// all possible errors.
comment|// These specializations are declared but not defined, as NiceMock,
comment|// NaggyMock, and StrictMock cannot be nested.
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NiceMock
operator|<
name|NiceMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NiceMock
operator|<
name|NaggyMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NiceMock
operator|<
name|StrictMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NaggyMock
operator|<
name|NiceMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NaggyMock
operator|<
name|NaggyMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|NaggyMock
operator|<
name|StrictMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|StrictMock
operator|<
name|NiceMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|StrictMock
operator|<
name|NaggyMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
name|template
operator|<
name|typename
name|MockClass
operator|>
name|class
name|StrictMock
operator|<
name|StrictMock
operator|<
name|MockClass
operator|>
expr|>
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace testing
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_NICE_STRICT_H_
end_comment

end_unit

