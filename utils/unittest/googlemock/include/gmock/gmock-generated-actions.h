begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This file was GENERATED by a script.  DO NOT EDIT BY HAND!!!
end_comment

begin_comment
comment|// Copyright 2007, Google Inc.
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Author: wan@google.com (Zhanyong Wan)
end_comment

begin_comment
comment|// Google Mock - a framework for writing C++ mock classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements some commonly used variadic actions.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_
end_ifndef

begin_define
define|#
directive|define
name|GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_
end_define

begin_include
include|#
directive|include
file|"gmock/gmock-actions.h"
end_include

begin_include
include|#
directive|include
file|"gmock/internal/gmock-port.h"
end_include

begin_decl_stmt
name|namespace
name|testing
block|{
name|namespace
name|internal
block|{
comment|// InvokeHelper<F> knows how to unpack an N-tuple and invoke an N-ary
comment|// function or method with the unpacked values, where F is a function
comment|// type that takes N arguments.
name|template
operator|<
name|typename
name|Result
operator|,
name|typename
name|ArgumentTuple
operator|>
name|class
name|InvokeHelper
expr_stmt|;
name|template
operator|<
name|typename
name|R
operator|>
name|class
name|InvokeHelper
operator|<
name|R
operator|,
operator|::
name|testing
operator|::
name|tuple
operator|<
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<>&
argument_list|)
block|{
return|return
name|function
argument_list|()
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<>&
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
block|,
name|A6
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
block|,
name|A6
block|,
name|A7
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
block|,
name|A6
block|,
name|A7
block|,
name|A8
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
block|,
name|A6
block|,
name|A7
block|,
name|A8
block|,
name|A9
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8
argument_list|,
argument|A9>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8
argument_list|,
argument|A9>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|A1
block|,
name|typename
name|A2
block|,
name|typename
name|A3
block|,
name|typename
name|A4
block|,
name|typename
name|A5
block|,
name|typename
name|A6
block|,
name|typename
name|A7
block|,
name|typename
name|A8
block|,
name|typename
name|A9
block|,
name|typename
name|A10
operator|>
name|class
name|InvokeHelper
operator|<
name|R
block|,
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
block|,
name|A2
block|,
name|A3
block|,
name|A4
block|,
name|A5
block|,
name|A6
block|,
name|A7
block|,
name|A8
block|,
name|A9
block|,
name|A10
operator|>
expr|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|Function
operator|>
specifier|static
name|R
name|Invoke
argument_list|(
argument|Function function
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8
argument_list|,
argument|A9
argument_list|,
argument|A10>& args
argument_list|)
block|{
return|return
name|function
argument_list|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
literal|9
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|Class
block|,
name|typename
name|MethodPtr
operator|>
specifier|static
name|R
name|InvokeMethod
argument_list|(
argument|Class* obj_ptr
argument_list|,
argument|MethodPtr method_ptr
argument_list|,
argument|const ::testing::tuple<A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8
argument_list|,
argument|A9
argument_list|,
argument|A10>& args
argument_list|)
block|{
return|return
operator|(
name|obj_ptr
operator|->*
name|method_ptr
operator|)
operator|(
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|9
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
expr|}
block|;
comment|// An INTERNAL macro for extracting the type of a tuple field.  It's
comment|// subject to change without notice - DO NOT USE IN USER CODE!
define|#
directive|define
name|GMOCK_FIELD_
parameter_list|(
name|Tuple
parameter_list|,
name|N
parameter_list|)
define|\
value|typename ::testing::tuple_element<N, Tuple>::type
comment|// SelectArgs<Result, ArgumentTuple, k1, k2, ..., k_n>::type is the
comment|// type of an n-ary function whose i-th (1-based) argument type is the
comment|// k{i}-th (0-based) field of ArgumentTuple, which must be a tuple
comment|// type, and whose return type is Result.  For example,
comment|//   SelectArgs<int, ::testing::tuple<bool, char, double, long>, 0, 3>::type
comment|// is int(bool, long).
comment|//
comment|// SelectArgs<Result, ArgumentTuple, k1, k2, ..., k_n>::Select(args)
comment|// returns the selected fields (k1, k2, ..., k_n) of args as a tuple.
comment|// For example,
comment|//   SelectArgs<int, tuple<bool, char, double>, 2, 0>::Select(
comment|//       ::testing::make_tuple(true, 'a', 2.5))
comment|// returns tuple (2.5, true).
comment|//
comment|// The numbers in list k1, k2, ..., k_n must be>= 0, where n can be
comment|// in the range [0, 10].  Duplicates are allowed and they don't have
comment|// to be in an ascending or descending order.
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
block|,
name|int
name|k6
block|,
name|int
name|k7
block|,
name|int
name|k8
block|,
name|int
name|k9
block|,
name|int
name|k10
operator|>
name|class
name|SelectArgs
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k6
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k7
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k8
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k9
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k10
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k7
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k8
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k9
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k10
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
parameter_list|()
function_decl|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple&
comment|/* args */
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|()
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
name|k5
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
block|,
name|int
name|k6
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
name|k5
block|,
name|k6
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k6
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k6
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
block|,
name|int
name|k6
block|,
name|int
name|k7
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
name|k5
block|,
name|k6
block|,
name|k7
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k6
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k7
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k7
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
block|,
name|int
name|k6
block|,
name|int
name|k7
block|,
name|int
name|k8
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
name|k5
block|,
name|k6
block|,
name|k7
block|,
name|k8
block|,
operator|-
literal|1
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k6
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k7
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k8
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k7
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k8
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|Result
block|,
name|typename
name|ArgumentTuple
block|,
name|int
name|k1
block|,
name|int
name|k2
block|,
name|int
name|k3
block|,
name|int
name|k4
block|,
name|int
name|k5
block|,
name|int
name|k6
block|,
name|int
name|k7
block|,
name|int
name|k8
block|,
name|int
name|k9
operator|>
name|class
name|SelectArgs
operator|<
name|Result
block|,
name|ArgumentTuple
block|,
name|k1
block|,
name|k2
block|,
name|k3
block|,
name|k4
block|,
name|k5
block|,
name|k6
block|,
name|k7
block|,
name|k8
block|,
name|k9
block|,
operator|-
literal|1
operator|>
block|{
name|public
operator|:
typedef|typedef
name|Result
name|type
argument_list|(
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k1
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k2
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k3
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k4
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k5
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k6
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k7
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k8
argument_list|)
argument_list|,
name|GMOCK_FIELD_
argument_list|(
name|ArgumentTuple
argument_list|,
name|k9
argument_list|)
argument_list|)
typedef|;
typedef|typedef
name|typename
name|Function
operator|<
name|type
operator|>
operator|::
name|ArgumentTuple
name|SelectedArgs
expr_stmt|;
specifier|static
name|SelectedArgs
name|Select
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|SelectedArgs
argument_list|(
name|get
operator|<
name|k1
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k2
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k3
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k4
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k5
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k6
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k7
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k8
operator|>
operator|(
name|args
operator|)
argument_list|,
name|get
operator|<
name|k9
operator|>
operator|(
name|args
operator|)
argument_list|)
return|;
block|}
block|}
empty_stmt|;
undef|#
directive|undef
name|GMOCK_FIELD_
comment|// Implements the WithArgs action.
name|template
operator|<
name|typename
name|InnerAction
operator|,
name|int
name|k1
operator|=
operator|-
literal|1
operator|,
name|int
name|k2
operator|=
operator|-
literal|1
operator|,
name|int
name|k3
operator|=
operator|-
literal|1
operator|,
name|int
name|k4
operator|=
operator|-
literal|1
operator|,
name|int
name|k5
operator|=
operator|-
literal|1
operator|,
name|int
name|k6
operator|=
operator|-
literal|1
operator|,
name|int
name|k7
operator|=
operator|-
literal|1
operator|,
name|int
name|k8
operator|=
operator|-
literal|1
operator|,
name|int
name|k9
operator|=
operator|-
literal|1
operator|,
name|int
name|k10
operator|=
operator|-
literal|1
operator|>
name|class
name|WithArgsAction
block|{
name|public
operator|:
name|explicit
name|WithArgsAction
argument_list|(
specifier|const
name|InnerAction
operator|&
name|action
argument_list|)
operator|:
name|action_
argument_list|(
argument|action
argument_list|)
block|{}
name|template
operator|<
name|typename
name|F
operator|>
name|operator
name|Action
operator|<
name|F
operator|>
operator|(
operator|)
specifier|const
block|{
return|return
name|MakeAction
argument_list|(
argument|new Impl<F>(action_)
argument_list|)
return|;
block|}
name|private
operator|:
name|template
operator|<
name|typename
name|F
operator|>
name|class
name|Impl
operator|:
name|public
name|ActionInterface
operator|<
name|F
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|Function
operator|<
name|F
operator|>
operator|::
name|Result
name|Result
expr_stmt|;
typedef|typedef
name|typename
name|Function
operator|<
name|F
operator|>
operator|::
name|ArgumentTuple
name|ArgumentTuple
expr_stmt|;
name|explicit
name|Impl
argument_list|(
specifier|const
name|InnerAction
operator|&
name|action
argument_list|)
operator|:
name|action_
argument_list|(
argument|action
argument_list|)
block|{}
name|virtual
name|Result
name|Perform
argument_list|(
argument|const ArgumentTuple& args
argument_list|)
block|{
return|return
name|action_
operator|.
name|Perform
argument_list|(
name|SelectArgs
operator|<
name|Result
argument_list|,
name|ArgumentTuple
argument_list|,
name|k1
argument_list|,
name|k2
argument_list|,
name|k3
argument_list|,
name|k4
argument_list|,
name|k5
argument_list|,
name|k6
argument_list|,
name|k7
argument_list|,
name|k8
argument_list|,
name|k9
argument_list|,
name|k10
operator|>
operator|::
name|Select
argument_list|(
name|args
argument_list|)
argument_list|)
return|;
block|}
name|private
label|:
typedef|typedef
name|typename
name|SelectArgs
operator|<
name|Result
operator|,
name|ArgumentTuple
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|,
name|k9
operator|,
name|k10
operator|>
operator|::
name|type
name|InnerFunctionType
expr_stmt|;
name|Action
operator|<
name|InnerFunctionType
operator|>
name|action_
expr_stmt|;
block|}
empty_stmt|;
specifier|const
name|InnerAction
name|action_
decl_stmt|;
name|GTEST_DISALLOW_ASSIGN_
argument_list|(
name|WithArgsAction
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// A macro from the ACTION* family (defined later in this file)
end_comment

begin_comment
comment|// defines an action that can be used in a mock function.  Typically,
end_comment

begin_comment
comment|// these actions only care about a subset of the arguments of the mock
end_comment

begin_comment
comment|// function.  For example, if such an action only uses the second
end_comment

begin_comment
comment|// argument, it can be used in any mock function that takes>= 2
end_comment

begin_comment
comment|// arguments where the type of the second argument is compatible.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Therefore, the action implementation must be prepared to take more
end_comment

begin_comment
comment|// arguments than it needs.  The ExcessiveArg type is used to
end_comment

begin_comment
comment|// represent those excessive arguments.  In order to keep the compiler
end_comment

begin_comment
comment|// error messages tractable, we define it in the testing namespace
end_comment

begin_comment
comment|// instead of testing::internal.  However, this is an INTERNAL TYPE
end_comment

begin_comment
comment|// and subject to change without notice, so a user MUST NOT USE THIS
end_comment

begin_comment
comment|// TYPE DIRECTLY.
end_comment

begin_struct
struct|struct
name|ExcessiveArg
block|{}
struct|;
end_struct

begin_comment
comment|// A helper class needed for implementing the ACTION* macros.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|Result
operator|,
name|class
name|Impl
operator|>
name|class
name|ActionHelper
block|{
name|public
operator|:
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
operator|>
operator|(
name|args
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|A0
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
operator|,
name|ExcessiveArg
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|A0
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|>
specifier|static
name|Result
name|Perform
argument_list|(
argument|Impl* impl
argument_list|,
argument|const ::testing::tuple<A0
argument_list|,
argument|A1
argument_list|,
argument|A2
argument_list|,
argument|A3
argument_list|,
argument|A4
argument_list|,
argument|A5
argument_list|,
argument|A6
argument_list|,
argument|A7
argument_list|,
argument|A8
argument_list|,
argument|A9>& args
argument_list|)
block|{
return|return
name|impl
operator|->
name|template
name|gmock_PerformImpl
operator|<
name|A0
operator|,
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|,
name|A9
operator|>
operator|(
name|args
operator|,
name|get
operator|<
literal|0
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|1
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|2
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|3
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|4
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|5
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|6
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|7
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|8
operator|>
operator|(
name|args
operator|)
operator|,
name|get
operator|<
literal|9
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace internal
end_comment

begin_comment
comment|// Various overloads for Invoke().
end_comment

begin_comment
comment|// WithArgs<N1, N2, ..., Nk>(an_action) creates an action that passes
end_comment

begin_comment
comment|// the selected arguments of the mock function to an_action and
end_comment

begin_comment
comment|// performs it.  It serves as an adaptor between actions with
end_comment

begin_comment
comment|// different argument lists.  C++ doesn't support default arguments for
end_comment

begin_comment
comment|// function templates, so we have to overload it.
end_comment

begin_expr_stmt
unit|template
operator|<
name|int
name|k1
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|int
name|k6
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|int
name|k6
operator|,
name|int
name|k7
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|int
name|k6
operator|,
name|int
name|k7
operator|,
name|int
name|k8
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|int
name|k6
operator|,
name|int
name|k7
operator|,
name|int
name|k8
operator|,
name|int
name|k9
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|,
name|k9
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|,
name|k9
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|int
name|k1
operator|,
name|int
name|k2
operator|,
name|int
name|k3
operator|,
name|int
name|k4
operator|,
name|int
name|k5
operator|,
name|int
name|k6
operator|,
name|int
name|k7
operator|,
name|int
name|k8
operator|,
name|int
name|k9
operator|,
name|int
name|k10
operator|,
name|typename
name|InnerAction
operator|>
specifier|inline
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|,
name|k9
operator|,
name|k10
operator|>
name|WithArgs
argument_list|(
argument|const InnerAction& action
argument_list|)
block|{
return|return
name|internal
operator|::
name|WithArgsAction
operator|<
name|InnerAction
operator|,
name|k1
operator|,
name|k2
operator|,
name|k3
operator|,
name|k4
operator|,
name|k5
operator|,
name|k6
operator|,
name|k7
operator|,
name|k8
operator|,
name|k9
operator|,
name|k10
operator|>
operator|(
name|action
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Creates an action that does actions a1, a2, ..., sequentially in
end_comment

begin_comment
comment|// each invocation.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|Action2
operator|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|)
block|{
return|return
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|Action2
operator|>
operator|(
name|a1
operator|,
name|a2
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|Action3
operator|>
expr|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|Action4
operator|>
expr|>
operator|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|Action5
operator|>
expr|>
operator|>
expr|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|,
name|typename
name|Action6
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action5
operator|,
name|Action6
operator|>
expr|>
operator|>
expr|>
operator|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|,
argument|Action6 a6
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|,
name|typename
name|Action6
operator|,
name|typename
name|Action7
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action5
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action6
operator|,
name|Action7
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|,
argument|Action6 a6
argument_list|,
argument|Action7 a7
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|,
name|typename
name|Action6
operator|,
name|typename
name|Action7
operator|,
name|typename
name|Action8
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action5
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action6
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action7
operator|,
name|Action8
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
operator|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|,
argument|Action6 a6
argument_list|,
argument|Action7 a7
argument_list|,
argument|Action8 a8
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|,
name|typename
name|Action6
operator|,
name|typename
name|Action7
operator|,
name|typename
name|Action8
operator|,
name|typename
name|Action9
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action5
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action6
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action7
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action8
operator|,
name|Action9
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|,
argument|Action6 a6
argument_list|,
argument|Action7 a7
argument_list|,
argument|Action8 a8
argument_list|,
argument|Action9 a9
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|,
name|a9
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Action1
operator|,
name|typename
name|Action2
operator|,
name|typename
name|Action3
operator|,
name|typename
name|Action4
operator|,
name|typename
name|Action5
operator|,
name|typename
name|Action6
operator|,
name|typename
name|Action7
operator|,
name|typename
name|Action8
operator|,
name|typename
name|Action9
operator|,
name|typename
name|Action10
operator|>
specifier|inline
name|internal
operator|::
name|DoBothAction
operator|<
name|Action1
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action2
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action3
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action4
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action5
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action6
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action7
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action8
operator|,
name|internal
operator|::
name|DoBothAction
operator|<
name|Action9
operator|,
name|Action10
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
operator|>
expr|>
operator|>
name|DoAll
argument_list|(
argument|Action1 a1
argument_list|,
argument|Action2 a2
argument_list|,
argument|Action3 a3
argument_list|,
argument|Action4 a4
argument_list|,
argument|Action5 a5
argument_list|,
argument|Action6 a6
argument_list|,
argument|Action7 a7
argument_list|,
argument|Action8 a8
argument_list|,
argument|Action9 a9
argument_list|,
argument|Action10 a10
argument_list|)
block|{
return|return
name|DoAll
argument_list|(
name|a1
argument_list|,
name|DoAll
argument_list|(
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|,
name|a9
argument_list|,
name|a10
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace testing
end_comment

begin_comment
comment|// The ACTION* family of macros can be used in a namespace scope to
end_comment

begin_comment
comment|// define custom actions easily.  The syntax:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION(name) { statements; }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// will define an action with the given name that executes the
end_comment

begin_comment
comment|// statements.  The value returned by the statements will be used as
end_comment

begin_comment
comment|// the return value of the action.  Inside the statements, you can
end_comment

begin_comment
comment|// refer to the K-th (0-based) argument of the mock function by
end_comment

begin_comment
comment|// 'argK', and refer to its type by 'argK_type'.  For example:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION(IncrementArg1) {
end_comment

begin_comment
comment|//     arg1_type temp = arg1;
end_comment

begin_comment
comment|//     return ++(*temp);
end_comment

begin_comment
comment|//   }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// allows you to write
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ...WillOnce(IncrementArg1());
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// You can also refer to the entire argument tuple and its type by
end_comment

begin_comment
comment|// 'args' and 'args_type', and refer to the mock function type and its
end_comment

begin_comment
comment|// return type by 'function_type' and 'return_type'.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Note that you don't need to specify the types of the mock function
end_comment

begin_comment
comment|// arguments.  However rest assured that your code is still type-safe:
end_comment

begin_comment
comment|// you'll get a compiler error if *arg1 doesn't support the ++
end_comment

begin_comment
comment|// operator, or if the type of ++(*arg1) isn't compatible with the
end_comment

begin_comment
comment|// mock function's return type, for example.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Sometimes you'll want to parameterize the action.   For that you can use
end_comment

begin_comment
comment|// another macro:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION_P(name, param_name) { statements; }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// For example:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION_P(Add, n) { return arg0 + n; }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// will allow you to write:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ...WillOnce(Add(5));
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Note that you don't need to provide the type of the parameter
end_comment

begin_comment
comment|// either.  If you need to reference the type of a parameter named
end_comment

begin_comment
comment|// 'foo', you can write 'foo_type'.  For example, in the body of
end_comment

begin_comment
comment|// ACTION_P(Add, n) above, you can write 'n_type' to refer to the type
end_comment

begin_comment
comment|// of 'n'.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// We also provide ACTION_P2, ACTION_P3, ..., up to ACTION_P10 to support
end_comment

begin_comment
comment|// multi-parameter actions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// For the purpose of typing, you can view
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION_Pk(Foo, p1, ..., pk) { ... }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// as shorthand for
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   template<typename p1_type, ..., typename pk_type>
end_comment

begin_comment
comment|//   FooActionPk<p1_type, ..., pk_type> Foo(p1_type p1, ..., pk_type pk) { ... }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// In particular, you can provide the template type arguments
end_comment

begin_comment
comment|// explicitly when invoking Foo(), as in Foo<long, bool>(5, false);
end_comment

begin_comment
comment|// although usually you can rely on the compiler to infer the types
end_comment

begin_comment
comment|// for you automatically.  You can assign the result of expression
end_comment

begin_comment
comment|// Foo(p1, ..., pk) to a variable of type FooActionPk<p1_type, ...,
end_comment

begin_comment
comment|// pk_type>.  This can be useful when composing actions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// You can also overload actions with different numbers of parameters:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION_P(Plus, a) { ... }
end_comment

begin_comment
comment|//   ACTION_P2(Plus, a, b) { ... }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// While it's tempting to always use the ACTION* macros when defining
end_comment

begin_comment
comment|// a new action, you should also consider implementing ActionInterface
end_comment

begin_comment
comment|// or using MakePolymorphicAction() instead, especially if you need to
end_comment

begin_comment
comment|// use the action a lot.  While these approaches require more work,
end_comment

begin_comment
comment|// they give you more control on the types of the mock function
end_comment

begin_comment
comment|// arguments and the action parameters, which in general leads to
end_comment

begin_comment
comment|// better compiler error messages that pay off in the long run.  They
end_comment

begin_comment
comment|// also allow overloading actions based on parameter types (as opposed
end_comment

begin_comment
comment|// to just based on the number of parameters).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// CAVEAT:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ACTION*() can only be used in a namespace scope.  The reason is
end_comment

begin_comment
comment|// that C++ doesn't yet allow function-local types to be used to
end_comment

begin_comment
comment|// instantiate templates.  The up-coming C++0x standard will fix this.
end_comment

begin_comment
comment|// Once that's done, we'll consider supporting using ACTION*() inside
end_comment

begin_comment
comment|// a function.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// MORE INFORMATION:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// To learn more about using these macros, please search for 'ACTION'
end_comment

begin_comment
comment|// on http://code.google.com/p/googlemock/wiki/CookBook.
end_comment

begin_comment
comment|// An internal macro needed for implementing ACTION*().
end_comment

begin_define
define|#
directive|define
name|GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_
define|\
value|const args_type& args GTEST_ATTRIBUTE_UNUSED_, \     arg0_type arg0 GTEST_ATTRIBUTE_UNUSED_, \     arg1_type arg1 GTEST_ATTRIBUTE_UNUSED_, \     arg2_type arg2 GTEST_ATTRIBUTE_UNUSED_, \     arg3_type arg3 GTEST_ATTRIBUTE_UNUSED_, \     arg4_type arg4 GTEST_ATTRIBUTE_UNUSED_, \     arg5_type arg5 GTEST_ATTRIBUTE_UNUSED_, \     arg6_type arg6 GTEST_ATTRIBUTE_UNUSED_, \     arg7_type arg7 GTEST_ATTRIBUTE_UNUSED_, \     arg8_type arg8 GTEST_ATTRIBUTE_UNUSED_, \     arg9_type arg9 GTEST_ATTRIBUTE_UNUSED_
end_define

begin_comment
comment|// Sometimes you want to give an action explicit template parameters
end_comment

begin_comment
comment|// that cannot be inferred from its value parameters.  ACTION() and
end_comment

begin_comment
comment|// ACTION_P*() don't support that.  ACTION_TEMPLATE() remedies that
end_comment

begin_comment
comment|// and can be viewed as an extension to ACTION() and ACTION_P*().
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// The syntax:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ACTION_TEMPLATE(ActionName,
end_comment

begin_comment
comment|//                   HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),
end_comment

begin_comment
comment|//                   AND_n_VALUE_PARAMS(p1, ..., p_n)) { statements; }
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// defines an action template that takes m explicit template
end_comment

begin_comment
comment|// parameters and n value parameters.  name_i is the name of the i-th
end_comment

begin_comment
comment|// template parameter, and kind_i specifies whether it's a typename,
end_comment

begin_comment
comment|// an integral constant, or a template.  p_i is the name of the i-th
end_comment

begin_comment
comment|// value parameter.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Example:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   // DuplicateArg<k, T>(output) converts the k-th argument of the mock
end_comment

begin_comment
comment|//   // function to type T and copies it to *output.
end_comment

begin_comment
comment|//   ACTION_TEMPLATE(DuplicateArg,
end_comment

begin_comment
comment|//                   HAS_2_TEMPLATE_PARAMS(int, k, typename, T),
end_comment

begin_comment
comment|//                   AND_1_VALUE_PARAMS(output)) {
end_comment

begin_comment
comment|//     *output = T(::testing::get<k>(args));
end_comment

begin_comment
comment|//   }
end_comment

begin_comment
comment|//   ...
end_comment

begin_comment
comment|//     int n;
end_comment

begin_comment
comment|//     EXPECT_CALL(mock, Foo(_, _))
end_comment

begin_comment
comment|//         .WillOnce(DuplicateArg<1, unsigned char>(&n));
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// To create an instance of an action template, write:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ActionName<t1, ..., t_m>(v1, ..., v_n)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// where the ts are the template arguments and the vs are the value
end_comment

begin_comment
comment|// arguments.  The value argument types are inferred by the compiler.
end_comment

begin_comment
comment|// If you want to explicitly specify the value argument types, you can
end_comment

begin_comment
comment|// provide additional template arguments:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   ActionName<t1, ..., t_m, u1, ..., u_k>(v1, ..., v_n)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// where u_i is the desired type of v_i.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ACTION_TEMPLATE and ACTION/ACTION_P* can be overloaded on the
end_comment

begin_comment
comment|// number of value parameters, but not on the number of template
end_comment

begin_comment
comment|// parameters.  Without the restriction, the meaning of the following
end_comment

begin_comment
comment|// is unclear:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   OverloadedAction<int, bool>(x);
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Are we using a single-template-parameter action where 'bool' refers
end_comment

begin_comment
comment|// to the type of x, or are we using a two-template-parameter action
end_comment

begin_comment
comment|// where the compiler is asked to infer the type of x?
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Implementation notes:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// GMOCK_INTERNAL_*_HAS_m_TEMPLATE_PARAMS and
end_comment

begin_comment
comment|// GMOCK_INTERNAL_*_AND_n_VALUE_PARAMS are internal macros for
end_comment

begin_comment
comment|// implementing ACTION_TEMPLATE.  The main trick we use is to create
end_comment

begin_comment
comment|// new macro invocations when expanding a macro.  For example, we have
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   #define ACTION_TEMPLATE(name, template_params, value_params)
end_comment

begin_comment
comment|//       ... GMOCK_INTERNAL_DECL_##template_params ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// which causes ACTION_TEMPLATE(..., HAS_1_TEMPLATE_PARAMS(typename, T), ...)
end_comment

begin_comment
comment|// to expand to
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//       ... GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS(typename, T) ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Since GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS is a macro, the
end_comment

begin_comment
comment|// preprocessor will continue to expand it to
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//       ... typename T ...
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This technique conforms to the C++ standard and is portable.  It
end_comment

begin_comment
comment|// allows us to implement action templates using O(N) code, where N is
end_comment

begin_comment
comment|// the maximum number of template/value parameters supported.  Without
end_comment

begin_comment
comment|// using it, we'd have to devote O(N^2) amount of code to implement all
end_comment

begin_comment
comment|// combinations of m and n.
end_comment

begin_comment
comment|// Declares the template parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|)
value|kind0 name0
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|, \
name|name1
parameter_list|)
value|kind0 name0, kind1 name1
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|)
value|kind0 name0, kind1 name1, kind2 name2
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|)
value|kind0 name0, kind1 name1, kind2 name2, \     kind3 name3
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|)
value|kind0 name0, kind1 name1, \     kind2 name2, kind3 name3, kind4 name4
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|)
value|kind0 name0, \     kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|, \
name|name6
parameter_list|)
value|kind0 name0, kind1 name1, kind2 name2, kind3 name3, kind4 name4, \     kind5 name5, kind6 name6
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|,
name|name6
parameter_list|, \
name|kind7
parameter_list|,
name|name7
parameter_list|)
value|kind0 name0, kind1 name1, kind2 name2, kind3 name3, \     kind4 name4, kind5 name5, kind6 name6, kind7 name7
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|,
name|name6
parameter_list|, \
name|kind7
parameter_list|,
name|name7
parameter_list|,
name|kind8
parameter_list|,
name|name8
parameter_list|)
value|kind0 name0, kind1 name1, kind2 name2, \     kind3 name3, kind4 name4, kind5 name5, kind6 name6, kind7 name7, \     kind8 name8
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|, \
name|name1
parameter_list|,
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|, \
name|name6
parameter_list|,
name|kind7
parameter_list|,
name|name7
parameter_list|,
name|kind8
parameter_list|,
name|name8
parameter_list|,
name|kind9
parameter_list|,
name|name9
parameter_list|)
value|kind0 name0, \     kind1 name1, kind2 name2, kind3 name3, kind4 name4, kind5 name5, \     kind6 name6, kind7 name7, kind8 name8, kind9 name9
end_define

begin_comment
comment|// Lists the template parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|)
value|name0
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|, \
name|name1
parameter_list|)
value|name0, name1
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|)
value|name0, name1, name2
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|)
value|name0, name1, name2, name3
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|)
value|name0, name1, name2, name3, \     name4
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|)
value|name0, name1, \     name2, name3, name4, name5
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|, \
name|name6
parameter_list|)
value|name0, name1, name2, name3, name4, name5, name6
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|,
name|name6
parameter_list|, \
name|kind7
parameter_list|,
name|name7
parameter_list|)
value|name0, name1, name2, name3, name4, name5, name6, name7
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|,
name|name1
parameter_list|, \
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|,
name|name6
parameter_list|, \
name|kind7
parameter_list|,
name|name7
parameter_list|,
name|kind8
parameter_list|,
name|name8
parameter_list|)
value|name0, name1, name2, name3, name4, name5, \     name6, name7, name8
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS
parameter_list|(
name|kind0
parameter_list|,
name|name0
parameter_list|,
name|kind1
parameter_list|, \
name|name1
parameter_list|,
name|kind2
parameter_list|,
name|name2
parameter_list|,
name|kind3
parameter_list|,
name|name3
parameter_list|,
name|kind4
parameter_list|,
name|name4
parameter_list|,
name|kind5
parameter_list|,
name|name5
parameter_list|,
name|kind6
parameter_list|, \
name|name6
parameter_list|,
name|kind7
parameter_list|,
name|name7
parameter_list|,
name|kind8
parameter_list|,
name|name8
parameter_list|,
name|kind9
parameter_list|,
name|name9
parameter_list|)
value|name0, name1, name2, \     name3, name4, name5, name6, name7, name8, name9
end_define

begin_comment
comment|// Declares the types of value parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|, typename p0##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|, \     typename p0##_type, typename p1##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|, \     typename p0##_type, typename p1##_type, typename p2##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|, \     typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
value|, \     typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type, typename p4##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
value|, \     typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type, typename p4##_type, typename p5##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|)
value|, typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type, typename p4##_type, typename p5##_type, \     typename p6##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|)
value|, typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type, typename p4##_type, typename p5##_type, \     typename p6##_type, typename p7##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|)
value|, typename p0##_type, typename p1##_type, typename p2##_type, \     typename p3##_type, typename p4##_type, typename p5##_type, \     typename p6##_type, typename p7##_type, typename p8##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|, typename p0##_type, typename p1##_type, \     typename p2##_type, typename p3##_type, typename p4##_type, \     typename p5##_type, typename p6##_type, typename p7##_type, \     typename p8##_type, typename p9##_type
end_define

begin_comment
comment|// Initializes the value parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS
parameter_list|()
define|\
value|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
define|\
value|(p0##_type gmock_p0) : p0(gmock_p0)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1) : p0(gmock_p0), p1(gmock_p1)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4) : p0(gmock_p0), p1(gmock_p1), \         p2(gmock_p2), p3(gmock_p3), p4(gmock_p4)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \         p6##_type gmock_p6) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \         p6##_type gmock_p6, p7##_type gmock_p7) : p0(gmock_p0), p1(gmock_p1), \         p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \         p7(gmock_p7)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \         p6##_type gmock_p6, p7##_type gmock_p7, \         p8##_type gmock_p8) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \         p8(gmock_p8)
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
define|\
value|(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \         p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \         p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \         p9##_type gmock_p9) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \         p8(gmock_p8), p9(gmock_p9)
end_define

begin_comment
comment|// Declares the fields for storing the value parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|p0##_type p0;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|p0##_type p0; \     p1##_type p1;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|p0##_type p0; \     p1##_type p1; p2##_type p2;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|p0##_type p0; \     p1##_type p1; p2##_type p2; p3##_type p3;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|, \
name|p4
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|, \
name|p5
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; \     p5##_type p5;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; \     p5##_type p5; p6##_type p6;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; p4##_type p4; \     p5##_type p5; p6##_type p6; p7##_type p7;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; \     p4##_type p4; p5##_type p5; p6##_type p6; p7##_type p7; p8##_type p8;
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|p0##_type p0; p1##_type p1; p2##_type p2; p3##_type p3; \     p4##_type p4; p5##_type p5; p6##_type p6; p7##_type p7; p8##_type p8; \     p9##_type p9;
end_define

begin_comment
comment|// Lists the value parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|p0
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|p0, p1
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|p0, p1, p2
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|p0, p1, p2, p3
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
value|p0, p1, \     p2, p3, p4
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
value|p0, \     p1, p2, p3, p4, p5
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|)
value|p0, p1, p2, p3, p4, p5, p6
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|)
value|p0, p1, p2, p3, p4, p5, p6, p7
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|)
value|p0, p1, p2, p3, p4, p5, p6, p7, p8
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|p0, p1, p2, p3, p4, p5, p6, p7, p8, p9
end_define

begin_comment
comment|// Lists the value parameter types.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|, p0##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|, p0##_type, \     p1##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|, p0##_type, \     p1##_type, p2##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|, \     p0##_type, p1##_type, p2##_type, p3##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
value|, \     p0##_type, p1##_type, p2##_type, p3##_type, p4##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
value|, \     p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|)
value|, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, p5##_type, \     p6##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|)
value|, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \     p5##_type, p6##_type, p7##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|)
value|, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \     p5##_type, p6##_type, p7##_type, p8##_type
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|, p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \     p5##_type, p6##_type, p7##_type, p8##_type, p9##_type
end_define

begin_comment
comment|// Declares the value parameters.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|p0##_type p0
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|p0##_type p0, \     p1##_type p1
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|p0##_type p0, \     p1##_type p1, p2##_type p2
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|p0##_type p0, \     p1##_type p1, p2##_type p2, p3##_type p3
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|, \
name|p4
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|, \
name|p5
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \     p5##_type p5
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|, \
name|p6
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \     p5##_type p5, p6##_type p6
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, \     p5##_type p5, p6##_type p6, p7##_type p7
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \     p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \     p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \     p9##_type p9
end_define

begin_comment
comment|// The suffix of the class template implementing the action template.
end_comment

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS
parameter_list|()
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|)
value|P
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|)
value|P2
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
value|P3
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
value|P4
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
value|P5
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
value|P6
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|)
value|P7
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|)
value|P8
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|)
value|P9
end_define

begin_define
define|#
directive|define
name|GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS
parameter_list|(
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|, \
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
value|P10
end_define

begin_comment
comment|// The name of the class template implementing the action template.
end_comment

begin_define
define|#
directive|define
name|GMOCK_ACTION_CLASS_
parameter_list|(
name|name
parameter_list|,
name|value_params
parameter_list|)
define|\
value|GTEST_CONCAT_TOKEN_(name##Action, GMOCK_INTERNAL_COUNT_##value_params)
end_define

begin_define
define|#
directive|define
name|ACTION_TEMPLATE
parameter_list|(
name|name
parameter_list|,
name|template_params
parameter_list|,
name|value_params
parameter_list|)
define|\
value|template<GMOCK_INTERNAL_DECL_##template_params\             GMOCK_INTERNAL_DECL_TYPE_##value_params>\   class GMOCK_ACTION_CLASS_(name, value_params) {\    public:\     explicit GMOCK_ACTION_CLASS_(name, value_params)\         GMOCK_INTERNAL_INIT_##value_params {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       explicit gmock_Impl GMOCK_INTERNAL_INIT_##value_params {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       GMOCK_INTERNAL_DEFN_##value_params\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(\           new gmock_Impl<F>(GMOCK_INTERNAL_LIST_##value_params));\     }\     GMOCK_INTERNAL_DEFN_##value_params\    private:\     GTEST_DISALLOW_ASSIGN_(GMOCK_ACTION_CLASS_(name, value_params));\   };\   template<GMOCK_INTERNAL_DECL_##template_params\             GMOCK_INTERNAL_DECL_TYPE_##value_params>\   inline GMOCK_ACTION_CLASS_(name, value_params)<\       GMOCK_INTERNAL_LIST_##template_params\       GMOCK_INTERNAL_LIST_TYPE_##value_params> name(\           GMOCK_INTERNAL_DECL_##value_params) {\     return GMOCK_ACTION_CLASS_(name, value_params)<\         GMOCK_INTERNAL_LIST_##template_params\         GMOCK_INTERNAL_LIST_TYPE_##value_params>(\             GMOCK_INTERNAL_LIST_##value_params);\   }\   template<GMOCK_INTERNAL_DECL_##template_params\             GMOCK_INTERNAL_DECL_TYPE_##value_params>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       GMOCK_ACTION_CLASS_(name, value_params)<\           GMOCK_INTERNAL_LIST_##template_params\           GMOCK_INTERNAL_LIST_TYPE_##value_params>::gmock_Impl<F>::\               gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION
parameter_list|(
name|name
parameter_list|)
define|\
value|class name##Action {\    public:\     name##Action() {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl() {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>());\     }\    private:\     GTEST_DISALLOW_ASSIGN_(name##Action);\   };\   inline name##Action name() {\     return name##Action();\   }\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##Action::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|)
define|\
value|template<typename p0##_type>\   class name##ActionP {\    public:\     explicit name##ActionP(p0##_type gmock_p0) : p0(gmock_p0) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       explicit gmock_Impl(p0##_type gmock_p0) : p0(gmock_p0) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0));\     }\     p0##_type p0;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP);\   };\   template<typename p0##_type>\   inline name##ActionP<p0##_type> name(p0##_type p0) {\     return name##ActionP<p0##_type>(p0);\   }\   template<typename p0##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP<p0##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P2
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type>\   class name##ActionP2 {\    public:\     name##ActionP2(p0##_type gmock_p0, p1##_type gmock_p1) : p0(gmock_p0), \         p1(gmock_p1) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1) : p0(gmock_p0), \           p1(gmock_p1) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1));\     }\     p0##_type p0;\     p1##_type p1;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP2);\   };\   template<typename p0##_type, typename p1##_type>\   inline name##ActionP2<p0##_type, p1##_type> name(p0##_type p0, \       p1##_type p1) {\     return name##ActionP2<p0##_type, p1##_type>(p0, p1);\   }\   template<typename p0##_type, typename p1##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP2<p0##_type, p1##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P3
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type>\   class name##ActionP3 {\    public:\     name##ActionP3(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, \           p2##_type gmock_p2) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP3);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type>\   inline name##ActionP3<p0##_type, p1##_type, p2##_type> name(p0##_type p0, \       p1##_type p1, p2##_type p2) {\     return name##ActionP3<p0##_type, p1##_type, p2##_type>(p0, p1, p2);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP3<p0##_type, p1##_type, \           p2##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P4
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type>\   class name##ActionP4 {\    public:\     name##ActionP4(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3) : p0(gmock_p0), p1(gmock_p1), \         p2(gmock_p2), p3(gmock_p3) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \           p3(gmock_p3) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP4);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type>\   inline name##ActionP4<p0##_type, p1##_type, p2##_type, \       p3##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \       p3##_type p3) {\     return name##ActionP4<p0##_type, p1##_type, p2##_type, p3##_type>(p0, p1, \         p2, p3);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP4<p0##_type, p1##_type, p2##_type, \           p3##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P5
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type>\   class name##ActionP5 {\    public:\     name##ActionP5(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, \         p4##_type gmock_p4) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4) : p0(gmock_p0), \           p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP5);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type>\   inline name##ActionP5<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \       p4##_type p4) {\     return name##ActionP5<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type>(p0, p1, p2, p3, p4);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP5<p0##_type, p1##_type, p2##_type, p3##_type, \           p4##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P6
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type>\   class name##ActionP6 {\    public:\     name##ActionP6(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4, \           p5##_type gmock_p5) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \           p3(gmock_p3), p4(gmock_p4), p5(gmock_p5) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\       p5##_type p5;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\     p5##_type p5;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP6);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type>\   inline name##ActionP6<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type, p5##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, \       p3##_type p3, p4##_type p4, p5##_type p5) {\     return name##ActionP6<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type, p5##_type>(p0, p1, p2, p3, p4, p5);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP6<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \           p5##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P7
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type>\   class name##ActionP7 {\    public:\     name##ActionP7(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5, p6##_type gmock_p6) : p0(gmock_p0), p1(gmock_p1), \         p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), \         p6(gmock_p6) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \           p6##_type gmock_p6) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \           p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\       p5##_type p5;\       p6##_type p6;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \           p6));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\     p5##_type p5;\     p6##_type p6;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP7);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type>\   inline name##ActionP7<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type, p5##_type, p6##_type> name(p0##_type p0, p1##_type p1, \       p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \       p6##_type p6) {\     return name##ActionP7<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type, p5##_type, p6##_type>(p0, p1, p2, p3, p4, p5, p6);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP7<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \           p5##_type, p6##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P8
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type>\   class name##ActionP8 {\    public:\     name##ActionP8(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5, p6##_type gmock_p6, \         p7##_type gmock_p7) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \         p7(gmock_p7) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \           p6##_type gmock_p6, p7##_type gmock_p7) : p0(gmock_p0), \           p1(gmock_p1), p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), \           p5(gmock_p5), p6(gmock_p6), p7(gmock_p7) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\       p5##_type p5;\       p6##_type p6;\       p7##_type p7;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \           p6, p7));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\     p5##_type p5;\     p6##_type p6;\     p7##_type p7;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP8);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type>\   inline name##ActionP8<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type, p5##_type, p6##_type, p7##_type> name(p0##_type p0, \       p1##_type p1, p2##_type p2, p3##_type p3, p4##_type p4, p5##_type p5, \       p6##_type p6, p7##_type p7) {\     return name##ActionP8<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type, p5##_type, p6##_type, p7##_type>(p0, p1, p2, p3, p4, p5, \         p6, p7);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP8<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \           p5##_type, p6##_type, \           p7##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P9
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type>\   class name##ActionP9 {\    public:\     name##ActionP9(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \         p8##_type gmock_p8) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \         p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), p7(gmock_p7), \         p8(gmock_p8) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \           p6##_type gmock_p6, p7##_type gmock_p7, \           p8##_type gmock_p8) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \           p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \           p7(gmock_p7), p8(gmock_p8) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\       p5##_type p5;\       p6##_type p6;\       p7##_type p7;\       p8##_type p8;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \           p6, p7, p8));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\     p5##_type p5;\     p6##_type p6;\     p7##_type p7;\     p8##_type p8;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP9);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type>\   inline name##ActionP9<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type, p5##_type, p6##_type, p7##_type, \       p8##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \       p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, \       p8##_type p8) {\     return name##ActionP9<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type, p5##_type, p6##_type, p7##_type, p8##_type>(p0, p1, p2, \         p3, p4, p5, p6, p7, p8);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP9<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \           p5##_type, p6##_type, p7##_type, \           p8##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_define
define|#
directive|define
name|ACTION_P10
parameter_list|(
name|name
parameter_list|,
name|p0
parameter_list|,
name|p1
parameter_list|,
name|p2
parameter_list|,
name|p3
parameter_list|,
name|p4
parameter_list|,
name|p5
parameter_list|,
name|p6
parameter_list|,
name|p7
parameter_list|,
name|p8
parameter_list|,
name|p9
parameter_list|)
define|\
value|template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type, \       typename p9##_type>\   class name##ActionP10 {\    public:\     name##ActionP10(p0##_type gmock_p0, p1##_type gmock_p1, \         p2##_type gmock_p2, p3##_type gmock_p3, p4##_type gmock_p4, \         p5##_type gmock_p5, p6##_type gmock_p6, p7##_type gmock_p7, \         p8##_type gmock_p8, p9##_type gmock_p9) : p0(gmock_p0), p1(gmock_p1), \         p2(gmock_p2), p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \         p7(gmock_p7), p8(gmock_p8), p9(gmock_p9) {}\     template<typename F>\     class gmock_Impl : public ::testing::ActionInterface<F> {\      public:\       typedef F function_type;\       typedef typename ::testing::internal::Function<F>::Result return_type;\       typedef typename ::testing::internal::Function<F>::ArgumentTuple\           args_type;\       gmock_Impl(p0##_type gmock_p0, p1##_type gmock_p1, p2##_type gmock_p2, \           p3##_type gmock_p3, p4##_type gmock_p4, p5##_type gmock_p5, \           p6##_type gmock_p6, p7##_type gmock_p7, p8##_type gmock_p8, \           p9##_type gmock_p9) : p0(gmock_p0), p1(gmock_p1), p2(gmock_p2), \           p3(gmock_p3), p4(gmock_p4), p5(gmock_p5), p6(gmock_p6), \           p7(gmock_p7), p8(gmock_p8), p9(gmock_p9) {}\       virtual return_type Perform(const args_type& args) {\         return ::testing::internal::ActionHelper<return_type, gmock_Impl>::\             Perform(this, args);\       }\       template<typename arg0_type, typename arg1_type, typename arg2_type, \           typename arg3_type, typename arg4_type, typename arg5_type, \           typename arg6_type, typename arg7_type, typename arg8_type, \           typename arg9_type>\       return_type gmock_PerformImpl(const args_type& args, arg0_type arg0, \           arg1_type arg1, arg2_type arg2, arg3_type arg3, arg4_type arg4, \           arg5_type arg5, arg6_type arg6, arg7_type arg7, arg8_type arg8, \           arg9_type arg9) const;\       p0##_type p0;\       p1##_type p1;\       p2##_type p2;\       p3##_type p3;\       p4##_type p4;\       p5##_type p5;\       p6##_type p6;\       p7##_type p7;\       p8##_type p8;\       p9##_type p9;\      private:\       GTEST_DISALLOW_ASSIGN_(gmock_Impl);\     };\     template<typename F> operator ::testing::Action<F>() const {\       return ::testing::Action<F>(new gmock_Impl<F>(p0, p1, p2, p3, p4, p5, \           p6, p7, p8, p9));\     }\     p0##_type p0;\     p1##_type p1;\     p2##_type p2;\     p3##_type p3;\     p4##_type p4;\     p5##_type p5;\     p6##_type p6;\     p7##_type p7;\     p8##_type p8;\     p9##_type p9;\    private:\     GTEST_DISALLOW_ASSIGN_(name##ActionP10);\   };\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type, \       typename p9##_type>\   inline name##ActionP10<p0##_type, p1##_type, p2##_type, p3##_type, \       p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, \       p9##_type> name(p0##_type p0, p1##_type p1, p2##_type p2, p3##_type p3, \       p4##_type p4, p5##_type p5, p6##_type p6, p7##_type p7, p8##_type p8, \       p9##_type p9) {\     return name##ActionP10<p0##_type, p1##_type, p2##_type, p3##_type, \         p4##_type, p5##_type, p6##_type, p7##_type, p8##_type, p9##_type>(p0, \         p1, p2, p3, p4, p5, p6, p7, p8, p9);\   }\   template<typename p0##_type, typename p1##_type, typename p2##_type, \       typename p3##_type, typename p4##_type, typename p5##_type, \       typename p6##_type, typename p7##_type, typename p8##_type, \       typename p9##_type>\   template<typename F>\   template<typename arg0_type, typename arg1_type, typename arg2_type, \       typename arg3_type, typename arg4_type, typename arg5_type, \       typename arg6_type, typename arg7_type, typename arg8_type, \       typename arg9_type>\   typename ::testing::internal::Function<F>::Result\       name##ActionP10<p0##_type, p1##_type, p2##_type, p3##_type, p4##_type, \           p5##_type, p6##_type, p7##_type, p8##_type, \           p9##_type>::gmock_Impl<F>::gmock_PerformImpl(\           GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_) const
end_define

begin_macro
unit|namespace
name|testing
end_macro

begin_block
block|{
comment|// The ACTION*() macros trigger warning C4100 (unreferenced formal
comment|// parameter) in MSVC with -W4.  Unfortunately they cannot be fixed in
comment|// the macro definition, as the warnings are generated when the macro
comment|// is expanded and macro expansion cannot contain #pragma.  Therefore
comment|// we suppress them here.
ifdef|#
directive|ifdef
name|_MSC_VER
pragma|#
directive|pragma
name|warning
name|(
name|push
name|)
pragma|#
directive|pragma
name|warning
name|(
name|disable
name|:
name|4100
name|)
endif|#
directive|endif
comment|// Various overloads for InvokeArgument<N>().
comment|//
comment|// The InvokeArgument<N>(a1, a2, ..., a_k) action invokes the N-th
comment|// (0-based) argument, which must be a k-ary callable, of the mock
comment|// function, with arguments a1, a2, ..., a_k.
comment|//
comment|// Notes:
comment|//
comment|//   1. The arguments are passed by value by default.  If you need to
comment|//   pass an argument by reference, wrap it inside ByRef().  For
comment|//   example,
comment|//
comment|//     InvokeArgument<1>(5, string("Hello"), ByRef(foo))
comment|//
comment|//   passes 5 and string("Hello") by value, and passes foo by
comment|//   reference.
comment|//
comment|//   2. If the callable takes an argument by reference but ByRef() is
comment|//   not used, it will receive the reference to a copy of the value,
comment|//   instead of the original value.  For example, when the 0-th
comment|//   argument of the mock function takes a const string&, the action
comment|//
comment|//     InvokeArgument<0>(string("Hello"))
comment|//
comment|//   makes a copy of the temporary string("Hello") object and passes a
comment|//   reference of the copy, instead of the original temporary object,
comment|//   to the callable.  This makes it easy for a user to define an
comment|//   InvokeArgument action from temporary values and have it performed
comment|//   later.
name|namespace
name|internal
block|{
name|namespace
name|invoke_argument
block|{
comment|// Appears in InvokeArgumentAdl's argument list to help avoid
comment|// accidental calls to user functions of the same name.
struct|struct
name|AdlTag
block|{}
struct|;
comment|// InvokeArgumentAdl - a helper for InvokeArgument.
comment|// The basic overloads are provided here for generic functors.
comment|// Overloads for other custom-callables are provided in the
comment|// internal/custom/callback-actions.h header.
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|)
block|{
return|return
name|f
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|,
argument|A6 a6
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|,
argument|A6 a6
argument_list|,
argument|A7 a7
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|,
argument|A6 a6
argument_list|,
argument|A7 a7
argument_list|,
argument|A8 a8
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|,
argument|A6 a6
argument_list|,
argument|A7 a7
argument_list|,
argument|A8 a8
argument_list|,
argument|A9 a9
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|,
name|a9
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|F
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|,
name|typename
name|A10
operator|>
name|R
name|InvokeArgumentAdl
argument_list|(
argument|AdlTag
argument_list|,
argument|F f
argument_list|,
argument|A1 a1
argument_list|,
argument|A2 a2
argument_list|,
argument|A3 a3
argument_list|,
argument|A4 a4
argument_list|,
argument|A5 a5
argument_list|,
argument|A6 a6
argument_list|,
argument|A7 a7
argument_list|,
argument|A8 a8
argument_list|,
argument|A9 a9
argument_list|,
argument|A10 a10
argument_list|)
block|{
return|return
name|f
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|,
name|a5
argument_list|,
name|a6
argument_list|,
name|a7
argument_list|,
name|a8
argument_list|,
name|a9
argument_list|,
name|a10
argument_list|)
return|;
block|}
block|}
comment|// namespace invoke_argument
block|}
comment|// namespace internal
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_0_VALUE_PARAMS()
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_1_VALUE_PARAMS(p0)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_2_VALUE_PARAMS(p0, p1)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_3_VALUE_PARAMS(p0, p1, p2)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_4_VALUE_PARAMS(p0, p1, p2, p3)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|,
name|p5
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|,
name|p5
operator|,
name|p6
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|,
name|p5
operator|,
name|p6
operator|,
name|p7
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|,
name|p5
operator|,
name|p6
operator|,
name|p7
operator|,
name|p8
operator|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|InvokeArgument
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(int, k)
argument_list|,
argument|AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
argument_list|)
block|{
name|using
name|internal
operator|::
name|invoke_argument
operator|::
name|InvokeArgumentAdl
expr_stmt|;
return|return
name|InvokeArgumentAdl
operator|<
name|return_type
operator|>
operator|(
name|internal
operator|::
name|invoke_argument
operator|::
name|AdlTag
argument_list|()
operator|,
operator|::
name|testing
operator|::
name|get
operator|<
name|k
operator|>
operator|(
name|args
operator|)
operator|,
name|p0
operator|,
name|p1
operator|,
name|p2
operator|,
name|p3
operator|,
name|p4
operator|,
name|p5
operator|,
name|p6
operator|,
name|p7
operator|,
name|p8
operator|,
name|p9
operator|)
return|;
block|}
comment|// Various overloads for ReturnNew<T>().
comment|//
comment|// The ReturnNew<T>(a1, a2, ..., a_k) action returns a pointer to a new
comment|// instance of type T, constructed on the heap with constructor arguments
comment|// a1, a2, ..., and a_k. The caller assumes ownership of the returned value.
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_0_VALUE_PARAMS()
argument_list|)
block|{
return|return
name|new
name|T
argument_list|()
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_1_VALUE_PARAMS(p0)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_2_VALUE_PARAMS(p0, p1)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_3_VALUE_PARAMS(p0, p1, p2)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_4_VALUE_PARAMS(p0, p1, p2, p3)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_5_VALUE_PARAMS(p0, p1, p2, p3, p4)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_6_VALUE_PARAMS(p0, p1, p2, p3, p4, p5)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_7_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_8_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_9_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|)
return|;
block|}
name|ACTION_TEMPLATE
argument_list|(
argument|ReturnNew
argument_list|,
argument|HAS_1_TEMPLATE_PARAMS(typename, T)
argument_list|,
argument|AND_10_VALUE_PARAMS(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9)
argument_list|)
block|{
return|return
name|new
name|T
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|,
name|p6
argument_list|,
name|p7
argument_list|,
name|p8
argument_list|,
name|p9
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|_MSC_VER
pragma|#
directive|pragma
name|warning
name|(
name|pop
name|)
endif|#
directive|endif
block|}
end_block

begin_comment
comment|// namespace testing
end_comment

begin_comment
comment|// Include any custom actions added by the local installation.
end_comment

begin_comment
comment|// We must include this header at the end to make sure it can use the
end_comment

begin_comment
comment|// declarations from this file.
end_comment

begin_include
include|#
directive|include
file|"gmock/internal/custom/gmock-generated-actions.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GMOCK_INCLUDE_GMOCK_GMOCK_GENERATED_ACTIONS_H_
end_comment

end_unit

