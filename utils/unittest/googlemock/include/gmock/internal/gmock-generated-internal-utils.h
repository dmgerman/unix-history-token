begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This file was GENERATED by command:
end_comment

begin_comment
comment|//     pump.py gmock-generated-internal-utils.h.pump
end_comment

begin_comment
comment|// DO NOT EDIT BY HAND!!!
end_comment

begin_comment
comment|// Copyright 2007, Google Inc.
end_comment

begin_comment
comment|// All rights reserved.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Redistribution and use in source and binary forms, with or without
end_comment

begin_comment
comment|// modification, are permitted provided that the following conditions are
end_comment

begin_comment
comment|// met:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//     * Redistributions of source code must retain the above copyright
end_comment

begin_comment
comment|// notice, this list of conditions and the following disclaimer.
end_comment

begin_comment
comment|//     * Redistributions in binary form must reproduce the above
end_comment

begin_comment
comment|// copyright notice, this list of conditions and the following disclaimer
end_comment

begin_comment
comment|// in the documentation and/or other materials provided with the
end_comment

begin_comment
comment|// distribution.
end_comment

begin_comment
comment|//     * Neither the name of Google Inc. nor the names of its
end_comment

begin_comment
comment|// contributors may be used to endorse or promote products derived from
end_comment

begin_comment
comment|// this software without specific prior written permission.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
end_comment

begin_comment
comment|// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
end_comment

begin_comment
comment|// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
end_comment

begin_comment
comment|// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
end_comment

begin_comment
comment|// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
end_comment

begin_comment
comment|// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
end_comment

begin_comment
comment|// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
end_comment

begin_comment
comment|// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
end_comment

begin_comment
comment|// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
end_comment

begin_comment
comment|// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Author: wan@google.com (Zhanyong Wan)
end_comment

begin_comment
comment|// Google Mock - a framework for writing C++ mock classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains template meta-programming utility classes needed
end_comment

begin_comment
comment|// for implementing Google Mock.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_
end_ifndef

begin_define
define|#
directive|define
name|GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_
end_define

begin_include
include|#
directive|include
file|"gmock/internal/gmock-port.h"
end_include

begin_decl_stmt
name|namespace
name|testing
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Matcher
expr_stmt|;
name|namespace
name|internal
block|{
comment|// An IgnoredValue object can be implicitly constructed from ANY value.
comment|// This is used in implementing the IgnoreResult(a) action.
name|class
name|IgnoredValue
block|{
name|public
label|:
comment|// This constructor template allows any value to be implicitly
comment|// converted to IgnoredValue.  The object has no data member and
comment|// doesn't try to remember anything about the argument.  We
comment|// deliberately omit the 'explicit' keyword in order to allow the
comment|// conversion to be implicit.
name|template
operator|<
name|typename
name|T
operator|>
name|IgnoredValue
argument_list|(
argument|const T&
comment|/* ignored */
argument_list|)
block|{}
comment|// NOLINT(runtime/explicit)
block|}
empty_stmt|;
comment|// MatcherTuple<T>::type is a tuple type where each field is a Matcher
comment|// for the corresponding field in tuple type T.
name|template
operator|<
name|typename
name|Tuple
operator|>
expr|struct
name|MatcherTuple
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
operator|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
operator|,
name|Matcher
operator|<
name|A6
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
operator|,
name|Matcher
operator|<
name|A6
operator|>
operator|,
name|Matcher
operator|<
name|A7
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
operator|,
name|Matcher
operator|<
name|A6
operator|>
operator|,
name|Matcher
operator|<
name|A7
operator|>
operator|,
name|Matcher
operator|<
name|A8
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|,
name|A9
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
operator|,
name|Matcher
operator|<
name|A6
operator|>
operator|,
name|Matcher
operator|<
name|A7
operator|>
operator|,
name|Matcher
operator|<
name|A8
operator|>
operator|,
name|Matcher
operator|<
name|A9
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|,
name|typename
name|A10
operator|>
expr|struct
name|MatcherTuple
operator|<
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|,
name|A9
operator|,
name|A10
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|Matcher
operator|<
name|A1
operator|>
operator|,
name|Matcher
operator|<
name|A2
operator|>
operator|,
name|Matcher
operator|<
name|A3
operator|>
operator|,
name|Matcher
operator|<
name|A4
operator|>
operator|,
name|Matcher
operator|<
name|A5
operator|>
operator|,
name|Matcher
operator|<
name|A6
operator|>
operator|,
name|Matcher
operator|<
name|A7
operator|>
operator|,
name|Matcher
operator|<
name|A8
operator|>
operator|,
name|Matcher
operator|<
name|A9
operator|>
operator|,
name|Matcher
operator|<
name|A10
operator|>
expr|>
name|type
expr_stmt|;
block|}
empty_stmt|;
comment|// Template struct Function<F>, where F must be a function type, contains
comment|// the following typedefs:
comment|//
comment|//   Result:               the function's return type.
comment|//   ArgumentN:            the type of the N-th argument, where N starts with 1.
comment|//   ArgumentTuple:        the tuple type consisting of all parameters of F.
comment|//   ArgumentMatcherTuple: the tuple type consisting of Matchers for all
comment|//                         parameters of F.
comment|//   MakeResultVoid:       the function type obtained by substituting void
comment|//                         for the return type of F.
comment|//   MakeResultIgnoredValue:
comment|//                         the function type obtained by substituting Something
comment|//                         for the return type of F.
name|template
operator|<
name|typename
name|F
operator|>
expr|struct
name|Function
expr_stmt|;
name|template
operator|<
name|typename
name|R
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|()
operator|>
block|{
typedef|typedef
name|R
name|Result
typedef|;
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
operator|>
name|ArgumentTuple
expr_stmt|;
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|()
function_decl|;
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|()
function_decl|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|()
operator|>
block|{
typedef|typedef
name|A1
name|Argument1
typedef|;
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|>
name|ArgumentTuple
expr_stmt|;
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|)
function_decl|;
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|)
operator|>
block|{
typedef|typedef
name|A2
name|Argument2
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|)
operator|>
block|{
typedef|typedef
name|A3
name|Argument3
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|)
operator|>
block|{
typedef|typedef
name|A4
name|Argument4
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|)
operator|>
block|{
typedef|typedef
name|A5
name|Argument5
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|)
operator|>
block|{
typedef|typedef
name|A6
name|Argument6
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|)
operator|>
block|{
typedef|typedef
name|A7
name|Argument7
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|,
name|A8
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|)
operator|>
block|{
typedef|typedef
name|A8
name|Argument8
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|,
name|A8
argument_list|,
name|A9
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|,
name|A8
argument_list|)
operator|>
block|{
typedef|typedef
name|A9
name|Argument9
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|,
name|A9
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|,
name|A9
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|,
name|A9
parameter_list|)
function_decl|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|A1
operator|,
name|typename
name|A2
operator|,
name|typename
name|A3
operator|,
name|typename
name|A4
operator|,
name|typename
name|A5
operator|,
name|typename
name|A6
operator|,
name|typename
name|A7
operator|,
name|typename
name|A8
operator|,
name|typename
name|A9
operator|,
name|typename
name|A10
operator|>
expr|struct
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|,
name|A8
argument_list|,
name|A9
argument_list|,
name|A10
argument_list|)
operator|>
operator|:
name|Function
operator|<
name|R
argument_list|(
name|A1
argument_list|,
name|A2
argument_list|,
name|A3
argument_list|,
name|A4
argument_list|,
name|A5
argument_list|,
name|A6
argument_list|,
name|A7
argument_list|,
name|A8
argument_list|,
name|A9
argument_list|)
operator|>
block|{
typedef|typedef
name|A10
name|Argument10
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|testing
operator|::
name|tuple
operator|<
name|A1
operator|,
name|A2
operator|,
name|A3
operator|,
name|A4
operator|,
name|A5
operator|,
name|A6
operator|,
name|A7
operator|,
name|A8
operator|,
name|A9
operator|,
name|A10
operator|>
name|ArgumentTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|MatcherTuple
operator|<
name|ArgumentTuple
operator|>
operator|::
name|type
name|ArgumentMatcherTuple
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|MakeResultVoid
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|,
name|A9
parameter_list|,
name|A10
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|IgnoredValue
name|MakeResultIgnoredValue
parameter_list|(
name|A1
parameter_list|,
name|A2
parameter_list|,
name|A3
parameter_list|,
name|A4
parameter_list|,
name|A5
parameter_list|,
name|A6
parameter_list|,
name|A7
parameter_list|,
name|A8
parameter_list|,
name|A9
parameter_list|,
name|A10
parameter_list|)
function_decl|;
end_typedef

begin_comment
unit|};  }
comment|// namespace internal
end_comment

begin_comment
unit|}
comment|// namespace testing
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_
end_comment

end_unit

