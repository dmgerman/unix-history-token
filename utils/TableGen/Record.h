begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Record.h - Classes to represent Table Records ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the main TableGen data structures, including the TableGen
end_comment

begin_comment
comment|// types, values, and high-level data structures.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|RECORD_H
end_ifndef

begin_define
define|#
directive|define
name|RECORD_H
end_define

begin_include
include|#
directive|include
file|"TGSourceMgr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<ostream>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// RecTy subclasses.
name|class
name|BitRecTy
decl_stmt|;
name|class
name|BitsRecTy
decl_stmt|;
name|class
name|IntRecTy
decl_stmt|;
name|class
name|StringRecTy
decl_stmt|;
name|class
name|ListRecTy
decl_stmt|;
name|class
name|CodeRecTy
decl_stmt|;
name|class
name|DagRecTy
decl_stmt|;
name|class
name|RecordRecTy
decl_stmt|;
comment|// Init subclasses.
struct_decl|struct
name|Init
struct_decl|;
name|class
name|UnsetInit
decl_stmt|;
name|class
name|BitInit
decl_stmt|;
name|class
name|BitsInit
decl_stmt|;
name|class
name|IntInit
decl_stmt|;
name|class
name|StringInit
decl_stmt|;
name|class
name|CodeInit
decl_stmt|;
name|class
name|ListInit
decl_stmt|;
name|class
name|UnOpInit
decl_stmt|;
name|class
name|BinOpInit
decl_stmt|;
name|class
name|TernOpInit
decl_stmt|;
name|class
name|DefInit
decl_stmt|;
name|class
name|DagInit
decl_stmt|;
name|class
name|TypedInit
decl_stmt|;
name|class
name|VarInit
decl_stmt|;
name|class
name|FieldInit
decl_stmt|;
name|class
name|VarBitInit
decl_stmt|;
name|class
name|VarListElementInit
decl_stmt|;
comment|// Other classes.
name|class
name|Record
decl_stmt|;
name|class
name|RecordVal
decl_stmt|;
struct_decl|struct
name|MultiClass
struct_decl|;
comment|//===----------------------------------------------------------------------===//
comment|//  Type Classes
comment|//===----------------------------------------------------------------------===//
struct|struct
name|RecTy
block|{
name|virtual
operator|~
name|RecTy
argument_list|()
block|{}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|void
name|print
argument_list|(
name|std
operator|::
name|ostream
operator|&
name|OS
argument_list|)
decl|const
block|{
name|OS
operator|<<
name|getAsString
argument_list|()
expr_stmt|;
block|}
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
comment|/// typeIsConvertibleTo - Return true if all values of 'this' type can be
comment|/// converted to the specified type.
name|virtual
name|bool
name|typeIsConvertibleTo
argument_list|(
specifier|const
name|RecTy
operator|*
name|RHS
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|public
label|:
comment|// These methods should only be called from subclasses of Init
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|UnsetInit
modifier|*
name|UI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|BitInit
modifier|*
name|BI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|BitsInit
modifier|*
name|BI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|IntInit
modifier|*
name|II
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|StringInit
modifier|*
name|SI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|ListInit
modifier|*
name|LI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|UnOpInit
modifier|*
name|UI
parameter_list|)
block|{
return|return
name|convertValue
argument_list|(
operator|(
name|TypedInit
operator|*
operator|)
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|BinOpInit
modifier|*
name|UI
parameter_list|)
block|{
return|return
name|convertValue
argument_list|(
operator|(
name|TypedInit
operator|*
operator|)
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|TernOpInit
modifier|*
name|UI
parameter_list|)
block|{
return|return
name|convertValue
argument_list|(
operator|(
name|TypedInit
operator|*
operator|)
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|CodeInit
modifier|*
name|CI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|VarBitInit
modifier|*
name|VB
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|DefInit
modifier|*
name|DI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|DagInit
modifier|*
name|DI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|TypedInit
modifier|*
name|TI
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|VarInit
modifier|*
name|VI
parameter_list|)
block|{
return|return
name|convertValue
argument_list|(
operator|(
name|TypedInit
operator|*
operator|)
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
modifier|*
name|convertValue
parameter_list|(
name|FieldInit
modifier|*
name|FI
parameter_list|)
block|{
return|return
name|convertValue
argument_list|(
operator|(
name|TypedInit
operator|*
operator|)
name|FI
argument_list|)
return|;
block|}
name|public
label|:
comment|// These methods should only be called by subclasses of RecTy.
comment|// baseClassOf - These virtual methods should be overloaded to return true iff
comment|// all values of type 'RHS' can be converted to the 'this' type.
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|BitRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|BitsRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|IntRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|StringRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|ListRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|CodeRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|DagRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
specifier|const
name|RecordRecTy
operator|*
name|RHS
argument_list|)
decl|const
block|{
return|return
name|false
return|;
block|}
block|}
struct|;
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|OS
operator|,
specifier|const
name|RecTy
operator|&
name|Ty
operator|)
block|{
name|Ty
operator|.
name|print
argument_list|(
name|OS
argument_list|)
block|;
return|return
name|OS
return|;
block|}
comment|/// BitRecTy - 'bit' - Represent a single bit
comment|///
name|class
name|BitRecTy
range|:
name|public
name|RecTy
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|BI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BitsInit
operator|*
name|BI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|IntInit
operator|*
name|II
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|VB
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"bit"
return|;
block|}
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|// BitsRecTy - 'bits<n>' - Represent a fixed number of bits
comment|/// BitsRecTy - 'bits&lt;n&gt;' - Represent a fixed number of bits
comment|///
name|class
name|BitsRecTy
operator|:
name|public
name|RecTy
block|{
name|unsigned
name|Size
block|;
name|public
operator|:
name|explicit
name|BitsRecTy
argument_list|(
argument|unsigned Sz
argument_list|)
operator|:
name|Size
argument_list|(
argument|Sz
argument_list|)
block|{}
name|unsigned
name|getNumBits
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|UnsetInit
operator|*
name|UI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BitInit
operator|*
name|UI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BitsInit
operator|*
name|BI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|IntInit
operator|*
name|II
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|Size
operator|==
literal|1
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|Size
operator|==
name|Size
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// IntRecTy - 'int' - Represent an integer value of no particular size
comment|///
name|class
name|IntRecTy
operator|:
name|public
name|RecTy
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BitInit
operator|*
name|BI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BitsInit
operator|*
name|BI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|II
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"int"
return|;
block|}
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// StringRecTy - 'string' - Represent an string value
comment|///
name|class
name|StringRecTy
operator|:
name|public
name|RecTy
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitsInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|SI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|UnOpInit
operator|*
name|BO
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BinOpInit
operator|*
name|BO
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *BO
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|BO
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"string"
return|;
block|}
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|// ListRecTy - 'list<Ty>' - Represent a list of values, all of which must be of
comment|// the specified type.
comment|/// ListRecTy - 'list&lt;Ty&gt;' - Represent a list of values, all of which must
comment|/// be of the specified type.
comment|///
name|class
name|ListRecTy
operator|:
name|public
name|RecTy
block|{
name|RecTy
operator|*
name|Ty
block|;
name|public
operator|:
name|explicit
name|ListRecTy
argument_list|(
name|RecTy
operator|*
name|T
argument_list|)
operator|:
name|Ty
argument_list|(
argument|T
argument_list|)
block|{}
name|RecTy
operator|*
name|getElementType
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitsInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|ListInit
operator|*
name|LI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|getElementType
argument_list|()
operator|->
name|typeIsConvertibleTo
argument_list|(
name|Ty
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// CodeRecTy - 'code' - Represent an code fragment, function or method.
comment|///
name|class
name|CodeRecTy
operator|:
name|public
name|RecTy
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitsInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|CI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"code"
return|;
block|}
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// DagRecTy - 'dag' - Represent a dag fragment
comment|///
name|class
name|DagRecTy
operator|:
name|public
name|RecTy
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitsInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DefInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|UnOpInit
operator|*
name|BO
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|BinOpInit
operator|*
name|BO
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *BO
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|BO
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *CI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|CI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|TI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"dag"
return|;
block|}
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// RecordRecTy - '[classname]' - Represent an instance of a class, such as:
comment|/// (R32 X = EAX).
comment|///
name|class
name|RecordRecTy
operator|:
name|public
name|RecTy
block|{
name|Record
operator|*
name|Rec
block|;
name|public
operator|:
name|explicit
name|RecordRecTy
argument_list|(
name|Record
operator|*
name|R
argument_list|)
operator|:
name|Rec
argument_list|(
argument|R
argument_list|)
block|{}
name|Record
operator|*
name|getRecord
argument_list|()
specifier|const
block|{
return|return
name|Rec
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnsetInit *UI
argument_list|)
block|{
return|return
operator|(
name|Init
operator|*
operator|)
name|UI
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BitsInit *BI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|IntInit *II
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|StringInit *SI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|ListInit *LI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|CodeInit *CI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarBitInit *VB
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|UnOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|BinOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|TernOpInit *UI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|UI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|DefInit
operator|*
name|DI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|DagInit *DI
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
name|TypedInit
operator|*
name|VI
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|VarInit *VI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|VI
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertValue
argument_list|(
argument|FieldInit *FI
argument_list|)
block|{
return|return
name|RecTy
operator|::
name|convertValue
argument_list|(
name|FI
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|bool
name|typeIsConvertibleTo
argument_list|(
argument|const RecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|RHS
operator|->
name|baseClassOf
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const BitsRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const IntRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const StringRecTy *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const ListRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const CodeRecTy   *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const DagRecTy    *RHS
argument_list|)
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|baseClassOf
argument_list|(
argument|const RecordRecTy *RHS
argument_list|)
specifier|const
block|; }
block|;
comment|/// resolveTypes - Find a common type that T1 and T2 convert to.
comment|/// Return 0 if no such type exists.
comment|///
name|RecTy
operator|*
name|resolveTypes
argument_list|(
name|RecTy
operator|*
name|T1
argument_list|,
name|RecTy
operator|*
name|T2
argument_list|)
block|;
comment|//===----------------------------------------------------------------------===//
comment|//  Initializer Classes
comment|//===----------------------------------------------------------------------===//
block|struct
name|Init
block|{
name|virtual
operator|~
name|Init
argument_list|()
block|{}
comment|/// isComplete - This virtual method should be overridden by values that may
comment|/// not be completely specified yet.
name|virtual
name|bool
name|isComplete
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
comment|/// print - Print out this value.
name|void
name|print
argument_list|(
argument|std::ostream&OS
argument_list|)
specifier|const
block|{
name|OS
operator|<<
name|getAsString
argument_list|()
block|; }
comment|/// getAsString - Convert this value to a string form.
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
operator|=
literal|0
block|;
comment|/// dump - Debugging method that may be called through a debugger, just
comment|/// invokes print on cerr.
name|void
name|dump
argument_list|()
specifier|const
block|;
comment|/// convertInitializerTo - This virtual function is a simple call-back
comment|/// function that should be overridden to call the appropriate
comment|/// RecTy::convertValue method.
comment|///
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
name|RecTy
operator|*
name|Ty
argument_list|)
operator|=
literal|0
block|;
comment|/// convertInitializerBitRange - This method is used to implement the bitrange
comment|/// selection operator.  Given an initializer, it selects the specified bits
comment|/// out, returning them as a new init of bits type.  If it is not legal to use
comment|/// the bit subscript operator on this initializer, return null.
comment|///
name|virtual
name|Init
operator|*
name|convertInitializerBitRange
argument_list|(
argument|const std::vector<unsigned>&Bits
argument_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/// convertInitListSlice - This method is used to implement the list slice
comment|/// selection operator.  Given an initializer, it selects the specified list
comment|/// elements, returning them as a new init of list type.  If it is not legal
comment|/// to take a slice of this, return null.
comment|///
name|virtual
name|Init
operator|*
name|convertInitListSlice
argument_list|(
argument|const std::vector<unsigned>&Elements
argument_list|)
block|{
return|return
literal|0
return|;
block|}
comment|/// getFieldType - This method is used to implement the FieldInit class.
comment|/// Implementors of this method should return the type of the named field if
comment|/// they are of record type.
comment|///
name|virtual
name|RecTy
operator|*
name|getFieldType
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
comment|/// getFieldInit - This method complements getFieldType to return the
comment|/// initializer for the specified field.  If getFieldType returns non-null
comment|/// this method should return non-null, otherwise it returns null.
comment|///
name|virtual
name|Init
operator|*
name|getFieldInit
argument_list|(
argument|Record&R
argument_list|,
argument|const std::string&FieldName
argument_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
comment|/// resolveReferences - This method is used by classes that refer to other
comment|/// variables which may not be defined at the time they expression is formed.
comment|/// If a value is set for the variable later, this method will be called on
comment|/// users of the value to allow the value to propagate out.
comment|///
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|)
block|{
return|return
name|this
return|;
block|}
expr|}
block|;
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|OS
expr|,
specifier|const
name|Init
operator|&
name|I
operator|)
block|{
name|I
operator|.
name|print
argument_list|(
name|OS
argument_list|)
block|;
return|return
name|OS
return|;
block|}
comment|/// TypedInit - This is the common super-class of types that have a specific,
comment|/// explicit, type.
comment|///
name|class
name|TypedInit
operator|:
name|public
name|Init
block|{
name|RecTy
operator|*
name|Ty
block|;
name|public
operator|:
name|explicit
name|TypedInit
argument_list|(
name|RecTy
operator|*
name|T
argument_list|)
operator|:
name|Ty
argument_list|(
argument|T
argument_list|)
block|{}
name|RecTy
operator|*
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerBitRange
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Bits
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertInitListSlice
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Elements
argument_list|)
block|;
comment|/// resolveBitReference - This method is used to implement
comment|/// VarBitInit::resolveReferences.  If the bit is able to be resolved, we
comment|/// simply return the resolved value, otherwise we return null.
comment|///
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
operator|=
literal|0
block|;
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
operator|=
literal|0
block|; }
block|;
comment|/// UnsetInit - ? - Represents an uninitialized value
comment|///
name|class
name|UnsetInit
operator|:
name|public
name|Init
block|{
name|public
operator|:
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|bool
name|isComplete
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"?"
return|;
block|}
expr|}
block|;
comment|/// BitInit - true/false - Represent a concrete initializer for a bit.
comment|///
name|class
name|BitInit
operator|:
name|public
name|Init
block|{
name|bool
name|Value
block|;
name|public
operator|:
name|explicit
name|BitInit
argument_list|(
argument|bool V
argument_list|)
operator|:
name|Value
argument_list|(
argument|V
argument_list|)
block|{}
name|bool
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
name|Value
operator|?
literal|"1"
operator|:
literal|"0"
return|;
block|}
expr|}
block|;
comment|/// BitsInit - { a, b, c } - Represents an initializer for a BitsRecTy value.
comment|/// It contains a vector of bits, whose size is determined by the type.
comment|///
name|class
name|BitsInit
operator|:
name|public
name|Init
block|{
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
name|Bits
block|;
name|public
operator|:
name|explicit
name|BitsInit
argument_list|(
argument|unsigned Size
argument_list|)
operator|:
name|Bits
argument_list|(
argument|Size
argument_list|)
block|{}
name|unsigned
name|getNumBits
argument_list|()
specifier|const
block|{
return|return
name|Bits
operator|.
name|size
argument_list|()
return|;
block|}
name|Init
operator|*
name|getBit
argument_list|(
argument|unsigned Bit
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Bit
operator|<
name|Bits
operator|.
name|size
argument_list|()
operator|&&
literal|"Bit index out of range!"
argument_list|)
block|;
return|return
name|Bits
index|[
name|Bit
index|]
return|;
block|}
name|void
name|setBit
argument_list|(
argument|unsigned Bit
argument_list|,
argument|Init *V
argument_list|)
block|{
name|assert
argument_list|(
name|Bit
operator|<
name|Bits
operator|.
name|size
argument_list|()
operator|&&
literal|"Bit index out of range!"
argument_list|)
block|;
name|assert
argument_list|(
name|Bits
index|[
name|Bit
index|]
operator|==
literal|0
operator|&&
literal|"Bit already set!"
argument_list|)
block|;
name|Bits
index|[
name|Bit
index|]
operator|=
name|V
block|;   }
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerBitRange
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Bits
argument_list|)
block|;
name|virtual
name|bool
name|isComplete
argument_list|()
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|getNumBits
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|getBit
argument_list|(
name|i
argument_list|)
operator|->
name|isComplete
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
comment|// printXX - Print this bitstream with the specified format, returning true if
comment|// it is not possible.
name|bool
name|printInHex
argument_list|(
argument|std::ostream&OS
argument_list|)
specifier|const
block|;
name|bool
name|printAsVariable
argument_list|(
argument|std::ostream&OS
argument_list|)
specifier|const
block|;
name|bool
name|printAsUnset
argument_list|(
argument|std::ostream&OS
argument_list|)
specifier|const
block|; }
block|;
comment|/// IntInit - 7 - Represent an initalization by a literal integer value.
comment|///
name|class
name|IntInit
operator|:
name|public
name|TypedInit
block|{
name|int64_t
name|Value
block|;
name|public
operator|:
name|explicit
name|IntInit
argument_list|(
argument|int64_t V
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new IntRecTy
argument_list|)
block|,
name|Value
argument_list|(
argument|V
argument_list|)
block|{}
name|int64_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerBitRange
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Bits
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
comment|/// resolveBitReference - This method is used to implement
comment|/// VarBitInit::resolveReferences.  If the bit is able to be resolved, we
comment|/// simply return the resolved value, otherwise we return null.
comment|///
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal bit reference off int"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal element reference off int"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
expr|}
block|;
comment|/// StringInit - "foo" - Represent an initialization by a string value.
comment|///
name|class
name|StringInit
operator|:
name|public
name|TypedInit
block|{
name|std
operator|::
name|string
name|Value
block|;
name|public
operator|:
name|explicit
name|StringInit
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|V
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new StringRecTy
argument_list|)
block|,
name|Value
argument_list|(
argument|V
argument_list|)
block|{}
specifier|const
name|std
operator|::
name|string
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"\""
operator|+
name|Value
operator|+
literal|"\""
return|;
block|}
comment|/// resolveBitReference - This method is used to implement
comment|/// VarBitInit::resolveReferences.  If the bit is able to be resolved, we
comment|/// simply return the resolved value, otherwise we return null.
comment|///
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal bit reference off string"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal element reference off string"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
expr|}
block|;
comment|/// CodeInit - "[{...}]" - Represent a code fragment.
comment|///
name|class
name|CodeInit
operator|:
name|public
name|Init
block|{
name|std
operator|::
name|string
name|Value
block|;
name|public
operator|:
name|explicit
name|CodeInit
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|V
argument_list|)
operator|:
name|Value
argument_list|(
argument|V
argument_list|)
block|{}
specifier|const
name|std
operator|::
name|string
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
literal|"[{"
operator|+
name|Value
operator|+
literal|"}]"
return|;
block|}
expr|}
block|;
comment|/// ListInit - [AL, AH, CL] - Represent a list of defs
comment|///
name|class
name|ListInit
operator|:
name|public
name|TypedInit
block|{
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
name|Values
block|;
name|public
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|explicit
name|ListInit
argument_list|(
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|&
name|Vs
argument_list|,
name|RecTy
operator|*
name|EltTy
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new ListRecTy(EltTy)
argument_list|)
block|{
name|Values
operator|.
name|swap
argument_list|(
name|Vs
argument_list|)
block|;   }
name|explicit
name|ListInit
argument_list|(
argument|iterator Start
argument_list|,
argument|iterator End
argument_list|,
argument|RecTy *EltTy
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new ListRecTy(EltTy)
argument_list|)
block|,
name|Values
argument_list|(
argument|Start
argument_list|,
argument|End
argument_list|)
block|{}
name|unsigned
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Values
operator|.
name|size
argument_list|()
return|;
block|}
name|Init
operator|*
name|getElement
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Values
operator|.
name|size
argument_list|()
operator|&&
literal|"List element index out of range!"
argument_list|)
block|;
return|return
name|Values
index|[
name|i
index|]
return|;
block|}
name|Record
operator|*
name|getElementAsRecord
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|;
name|Init
operator|*
name|convertInitListSlice
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Elements
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/// resolveReferences - This method is used by classes that refer to other
comment|/// variables which may not be defined at the time they expression is formed.
comment|/// If a value is set for the variable later, this method will be called on
comment|/// users of the value to allow the value to propagate out.
comment|///
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
specifier|inline
name|iterator
name|begin
argument_list|()
block|{
return|return
name|Values
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Values
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|end
argument_list|()
block|{
return|return
name|Values
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Values
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Values
operator|.
name|size
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Values
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// resolveBitReference - This method is used to implement
comment|/// VarBitInit::resolveReferences.  If the bit is able to be resolved, we
comment|/// simply return the resolved value, otherwise we return null.
comment|///
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal bit reference off list"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|; }
block|;
comment|/// OpInit - Base class for operators
comment|///
name|class
name|OpInit
operator|:
name|public
name|TypedInit
block|{
name|public
operator|:
name|OpInit
argument_list|(
name|RecTy
operator|*
name|Type
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|Type
argument_list|)
block|{}
comment|// Clone - Clone this operator, replacing arguments with the new list
name|virtual
name|OpInit
operator|*
name|clone
argument_list|(
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|&
name|Operands
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|int
name|getNumOperands
argument_list|(
argument|void
argument_list|)
specifier|const
operator|=
literal|0
block|;
name|virtual
name|Init
operator|*
name|getOperand
argument_list|(
argument|int i
argument_list|)
operator|=
literal|0
block|;
comment|// Fold - If possible, fold this to a simpler init.  Return this if not
comment|// possible to fold.
name|virtual
name|Init
operator|*
name|Fold
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
name|MultiClass
operator|*
name|CurMultiClass
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|; }
block|;
comment|/// UnOpInit - !op (X) - Transform an init.
comment|///
name|class
name|UnOpInit
operator|:
name|public
name|OpInit
block|{
name|public
operator|:
expr|enum
name|UnaryOp
block|{
name|CAST
block|,
name|CAR
block|,
name|CDR
block|,
name|LNULL
block|}
block|;
name|private
operator|:
name|UnaryOp
name|Opc
block|;
name|Init
operator|*
name|LHS
block|;
name|public
operator|:
name|UnOpInit
argument_list|(
argument|UnaryOp opc
argument_list|,
argument|Init *lhs
argument_list|,
argument|RecTy *Type
argument_list|)
operator|:
name|OpInit
argument_list|(
name|Type
argument_list|)
block|,
name|Opc
argument_list|(
name|opc
argument_list|)
block|,
name|LHS
argument_list|(
argument|lhs
argument_list|)
block|{   }
comment|// Clone - Clone this operator, replacing arguments with the new list
name|virtual
name|OpInit
operator|*
name|clone
argument_list|(
argument|std::vector<Init *>&Operands
argument_list|)
block|{
name|assert
argument_list|(
name|Operands
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
literal|"Wrong number of operands for unary operation"
argument_list|)
block|;
return|return
name|new
name|UnOpInit
argument_list|(
name|getOpcode
argument_list|()
argument_list|,
operator|*
name|Operands
operator|.
name|begin
argument_list|()
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|int
name|getNumOperands
argument_list|(
argument|void
argument_list|)
specifier|const
block|{
return|return
literal|1
return|;
block|}
name|Init
operator|*
name|getOperand
argument_list|(
argument|int i
argument_list|)
block|{
name|assert
argument_list|(
name|i
operator|==
literal|0
operator|&&
literal|"Invalid operand id for unary operator"
argument_list|)
block|;
return|return
name|getOperand
argument_list|()
return|;
block|}
name|UnaryOp
name|getOpcode
argument_list|()
specifier|const
block|{
return|return
name|Opc
return|;
block|}
name|Init
operator|*
name|getOperand
argument_list|()
specifier|const
block|{
return|return
name|LHS
return|;
block|}
comment|// Fold - If possible, fold this to a simpler init.  Return this if not
comment|// possible to fold.
name|Init
operator|*
name|Fold
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
name|MultiClass
operator|*
name|CurMultiClass
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|; }
block|;
comment|/// BinOpInit - !op (X, Y) - Combine two inits.
comment|///
name|class
name|BinOpInit
operator|:
name|public
name|OpInit
block|{
name|public
operator|:
expr|enum
name|BinaryOp
block|{
name|SHL
block|,
name|SRA
block|,
name|SRL
block|,
name|STRCONCAT
block|,
name|CONCAT
block|,
name|NAMECONCAT
block|}
block|;
name|private
operator|:
name|BinaryOp
name|Opc
block|;
name|Init
operator|*
name|LHS
block|,
operator|*
name|RHS
block|;
name|public
operator|:
name|BinOpInit
argument_list|(
argument|BinaryOp opc
argument_list|,
argument|Init *lhs
argument_list|,
argument|Init *rhs
argument_list|,
argument|RecTy *Type
argument_list|)
operator|:
name|OpInit
argument_list|(
name|Type
argument_list|)
block|,
name|Opc
argument_list|(
name|opc
argument_list|)
block|,
name|LHS
argument_list|(
name|lhs
argument_list|)
block|,
name|RHS
argument_list|(
argument|rhs
argument_list|)
block|{   }
comment|// Clone - Clone this operator, replacing arguments with the new list
name|virtual
name|OpInit
operator|*
name|clone
argument_list|(
argument|std::vector<Init *>&Operands
argument_list|)
block|{
name|assert
argument_list|(
name|Operands
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
literal|"Wrong number of operands for binary operation"
argument_list|)
block|;
return|return
name|new
name|BinOpInit
argument_list|(
name|getOpcode
argument_list|()
argument_list|,
name|Operands
index|[
literal|0
index|]
argument_list|,
name|Operands
index|[
literal|1
index|]
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|int
name|getNumOperands
argument_list|(
argument|void
argument_list|)
specifier|const
block|{
return|return
literal|2
return|;
block|}
name|Init
operator|*
name|getOperand
argument_list|(
argument|int i
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|1
operator|)
operator|&&
literal|"Invalid operand id for binary operator"
argument_list|)
block|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|getLHS
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getRHS
argument_list|()
return|;
block|}
block|}
name|BinaryOp
name|getOpcode
argument_list|()
specifier|const
block|{
return|return
name|Opc
return|;
block|}
name|Init
operator|*
name|getLHS
argument_list|()
specifier|const
block|{
return|return
name|LHS
return|;
block|}
name|Init
operator|*
name|getRHS
argument_list|()
specifier|const
block|{
return|return
name|RHS
return|;
block|}
comment|// Fold - If possible, fold this to a simpler init.  Return this if not
comment|// possible to fold.
name|Init
operator|*
name|Fold
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
name|MultiClass
operator|*
name|CurMultiClass
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|; }
block|;
comment|/// TernOpInit - !op (X, Y, Z) - Combine two inits.
comment|///
name|class
name|TernOpInit
operator|:
name|public
name|OpInit
block|{
name|public
operator|:
expr|enum
name|TernaryOp
block|{
name|SUBST
block|,
name|FOREACH
block|,
name|IF
block|}
block|;
name|private
operator|:
name|TernaryOp
name|Opc
block|;
name|Init
operator|*
name|LHS
block|,
operator|*
name|MHS
block|,
operator|*
name|RHS
block|;
name|public
operator|:
name|TernOpInit
argument_list|(
argument|TernaryOp opc
argument_list|,
argument|Init *lhs
argument_list|,
argument|Init *mhs
argument_list|,
argument|Init *rhs
argument_list|,
argument|RecTy *Type
argument_list|)
operator|:
name|OpInit
argument_list|(
name|Type
argument_list|)
block|,
name|Opc
argument_list|(
name|opc
argument_list|)
block|,
name|LHS
argument_list|(
name|lhs
argument_list|)
block|,
name|MHS
argument_list|(
name|mhs
argument_list|)
block|,
name|RHS
argument_list|(
argument|rhs
argument_list|)
block|{   }
comment|// Clone - Clone this operator, replacing arguments with the new list
name|virtual
name|OpInit
operator|*
name|clone
argument_list|(
argument|std::vector<Init *>&Operands
argument_list|)
block|{
name|assert
argument_list|(
name|Operands
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
literal|"Wrong number of operands for ternary operation"
argument_list|)
block|;
return|return
name|new
name|TernOpInit
argument_list|(
name|getOpcode
argument_list|()
argument_list|,
name|Operands
index|[
literal|0
index|]
argument_list|,
name|Operands
index|[
literal|1
index|]
argument_list|,
name|Operands
index|[
literal|2
index|]
argument_list|,
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|int
name|getNumOperands
argument_list|(
argument|void
argument_list|)
specifier|const
block|{
return|return
literal|3
return|;
block|}
name|Init
operator|*
name|getOperand
argument_list|(
argument|int i
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|1
operator|||
name|i
operator|==
literal|2
operator|)
operator|&&
literal|"Invalid operand id for ternary operator"
argument_list|)
block|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
return|return
name|getLHS
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
return|return
name|getMHS
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getRHS
argument_list|()
return|;
block|}
block|}
name|TernaryOp
name|getOpcode
argument_list|()
specifier|const
block|{
return|return
name|Opc
return|;
block|}
name|Init
operator|*
name|getLHS
argument_list|()
specifier|const
block|{
return|return
name|LHS
return|;
block|}
name|Init
operator|*
name|getMHS
argument_list|()
specifier|const
block|{
return|return
name|MHS
return|;
block|}
name|Init
operator|*
name|getRHS
argument_list|()
specifier|const
block|{
return|return
name|RHS
return|;
block|}
comment|// Fold - If possible, fold this to a simpler init.  Return this if not
comment|// possible to fold.
name|Init
operator|*
name|Fold
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
name|MultiClass
operator|*
name|CurMultiClass
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|; }
block|;
comment|/// VarInit - 'Opcode' - Represent a reference to an entire variable object.
comment|///
name|class
name|VarInit
operator|:
name|public
name|TypedInit
block|{
name|std
operator|::
name|string
name|VarName
block|;
name|public
operator|:
name|explicit
name|VarInit
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|VN
argument_list|,
name|RecTy
operator|*
name|T
argument_list|)
operator|:
name|TypedInit
argument_list|(
name|T
argument_list|)
block|,
name|VarName
argument_list|(
argument|VN
argument_list|)
block|{}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
block|{
return|return
name|VarName
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|;
name|virtual
name|RecTy
operator|*
name|getFieldType
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
name|virtual
name|Init
operator|*
name|getFieldInit
argument_list|(
argument|Record&R
argument_list|,
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// resolveReferences - This method is used by classes that refer to other
comment|/// variables which may not be defined at the time they expression is formed.
comment|/// If a value is set for the variable later, this method will be called on
comment|/// users of the value to allow the value to propagate out.
comment|///
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
name|VarName
return|;
block|}
expr|}
block|;
comment|/// VarBitInit - Opcode{0} - Represent access to one bit of a variable or field.
comment|///
name|class
name|VarBitInit
operator|:
name|public
name|Init
block|{
name|TypedInit
operator|*
name|TI
block|;
name|unsigned
name|Bit
block|;
name|public
operator|:
name|VarBitInit
argument_list|(
argument|TypedInit *T
argument_list|,
argument|unsigned B
argument_list|)
operator|:
name|TI
argument_list|(
name|T
argument_list|)
block|,
name|Bit
argument_list|(
argument|B
argument_list|)
block|{
name|assert
argument_list|(
name|T
operator|->
name|getType
argument_list|()
operator|&&
name|dynamic_cast
operator|<
name|BitsRecTy
operator|*
operator|>
operator|(
name|T
operator|->
name|getType
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|BitsRecTy
operator|*
operator|)
name|T
operator|->
name|getType
argument_list|()
operator|)
operator|->
name|getNumBits
argument_list|()
operator|>
name|B
operator|&&
literal|"Illegal VarBitInit expression!"
argument_list|)
block|;   }
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|TypedInit
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|TI
return|;
block|}
name|unsigned
name|getBitNum
argument_list|()
specifier|const
block|{
return|return
name|Bit
return|;
block|}
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|; }
block|;
comment|/// VarListElementInit - List[4] - Represent access to one element of a var or
comment|/// field.
name|class
name|VarListElementInit
operator|:
name|public
name|TypedInit
block|{
name|TypedInit
operator|*
name|TI
block|;
name|unsigned
name|Element
block|;
name|public
operator|:
name|VarListElementInit
argument_list|(
argument|TypedInit *T
argument_list|,
argument|unsigned E
argument_list|)
operator|:
name|TypedInit
argument_list|(
name|dynamic_cast
operator|<
name|ListRecTy
operator|*
operator|>
operator|(
name|T
operator|->
name|getType
argument_list|()
operator|)
operator|->
name|getElementType
argument_list|()
argument_list|)
block|,
name|TI
argument_list|(
name|T
argument_list|)
block|,
name|Element
argument_list|(
argument|E
argument_list|)
block|{
name|assert
argument_list|(
name|T
operator|->
name|getType
argument_list|()
operator|&&
name|dynamic_cast
operator|<
name|ListRecTy
operator|*
operator|>
operator|(
name|T
operator|->
name|getType
argument_list|()
operator|)
operator|&&
literal|"Illegal VarBitInit expression!"
argument_list|)
block|;   }
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|TypedInit
operator|*
name|getVariable
argument_list|()
specifier|const
block|{
return|return
name|TI
return|;
block|}
name|unsigned
name|getElementNum
argument_list|()
specifier|const
block|{
return|return
name|Element
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|;
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|; }
block|;
comment|/// DefInit - AL - Represent a reference to a 'def' in the description
comment|///
name|class
name|DefInit
operator|:
name|public
name|TypedInit
block|{
name|Record
operator|*
name|Def
block|;
name|public
operator|:
name|explicit
name|DefInit
argument_list|(
name|Record
operator|*
name|D
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new RecordRecTy(D)
argument_list|)
block|,
name|Def
argument_list|(
argument|D
argument_list|)
block|{}
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|Record
operator|*
name|getDef
argument_list|()
specifier|const
block|{
return|return
name|Def
return|;
block|}
comment|//virtual Init *convertInitializerBitRange(const std::vector<unsigned>&Bits);
name|virtual
name|RecTy
operator|*
name|getFieldType
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
name|virtual
name|Init
operator|*
name|getFieldInit
argument_list|(
argument|Record&R
argument_list|,
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
comment|/// resolveBitReference - This method is used to implement
comment|/// VarBitInit::resolveReferences.  If the bit is able to be resolved, we
comment|/// simply return the resolved value, otherwise we return null.
comment|///
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal bit reference off def"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
comment|/// resolveListElementReference - This method is used to implement
comment|/// VarListElementInit::resolveReferences.  If the list element is resolvable
comment|/// now, we return the resolved value, otherwise we return null.
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal element reference off def"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
expr|}
block|;
comment|/// FieldInit - X.Y - Represent a reference to a subfield of a variable
comment|///
name|class
name|FieldInit
operator|:
name|public
name|TypedInit
block|{
name|Init
operator|*
name|Rec
block|;
comment|// Record we are referring to
name|std
operator|::
name|string
name|FieldName
block|;
comment|// Field we are accessing
name|public
operator|:
name|FieldInit
argument_list|(
name|Init
operator|*
name|R
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FN
argument_list|)
operator|:
name|TypedInit
argument_list|(
name|R
operator|->
name|getFieldType
argument_list|(
name|FN
argument_list|)
argument_list|)
block|,
name|Rec
argument_list|(
name|R
argument_list|)
block|,
name|FieldName
argument_list|(
argument|FN
argument_list|)
block|{
name|assert
argument_list|(
name|getType
argument_list|()
operator|&&
literal|"FieldInit with non-record type!"
argument_list|)
block|;   }
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|;
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|{
return|return
name|Rec
operator|->
name|getAsString
argument_list|()
operator|+
literal|"."
operator|+
name|FieldName
return|;
block|}
expr|}
block|;
comment|/// DagInit - (v a, b) - Represent a DAG tree value.  DAG inits are required
comment|/// to have at least one value then a (possibly empty) list of arguments.  Each
comment|/// argument can have a name associated with it.
comment|///
name|class
name|DagInit
operator|:
name|public
name|TypedInit
block|{
name|Init
operator|*
name|Val
block|;
name|std
operator|::
name|string
name|ValName
block|;
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
name|Args
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|ArgNames
block|;
name|public
operator|:
name|DagInit
argument_list|(
argument|Init *V
argument_list|,
argument|std::string VN
argument_list|,
argument|const std::vector<std::pair<Init*
argument_list|,
argument|std::string>>&args
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new DagRecTy
argument_list|)
block|,
name|Val
argument_list|(
name|V
argument_list|)
block|,
name|ValName
argument_list|(
argument|VN
argument_list|)
block|{
name|Args
operator|.
name|reserve
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|ArgNames
operator|.
name|reserve
argument_list|(
name|args
operator|.
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|args
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|Args
operator|.
name|push_back
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|first
argument_list|)
expr_stmt|;
name|ArgNames
operator|.
name|push_back
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
name|DagInit
argument_list|(
argument|Init *V
argument_list|,
argument|std::string VN
argument_list|,
argument|const std::vector<Init*>&args
argument_list|,
argument|const std::vector<std::string>&argNames
argument_list|)
operator|:
name|TypedInit
argument_list|(
argument|new DagRecTy
argument_list|)
block|,
name|Val
argument_list|(
name|V
argument_list|)
block|,
name|ValName
argument_list|(
name|VN
argument_list|)
block|,
name|Args
argument_list|(
name|args
argument_list|)
block|,
name|ArgNames
argument_list|(
argument|argNames
argument_list|)
block|{   }
name|virtual
name|Init
operator|*
name|convertInitializerTo
argument_list|(
argument|RecTy *Ty
argument_list|)
block|{
return|return
name|Ty
operator|->
name|convertValue
argument_list|(
name|this
argument_list|)
return|;
block|}
name|Init
operator|*
name|getOperator
argument_list|()
specifier|const
block|{
return|return
name|Val
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
block|{
return|return
name|ValName
return|;
block|}
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
return|return
name|Args
operator|.
name|size
argument_list|()
return|;
block|}
name|Init
operator|*
name|getArg
argument_list|(
argument|unsigned Num
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Num
operator|<
name|Args
operator|.
name|size
argument_list|()
operator|&&
literal|"Arg number out of range!"
argument_list|)
block|;
return|return
name|Args
index|[
name|Num
index|]
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getArgName
argument_list|(
argument|unsigned Num
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Num
operator|<
name|ArgNames
operator|.
name|size
argument_list|()
operator|&&
literal|"Arg number out of range!"
argument_list|)
block|;
return|return
name|ArgNames
index|[
name|Num
index|]
return|;
block|}
name|void
name|setArg
argument_list|(
argument|unsigned Num
argument_list|,
argument|Init *I
argument_list|)
block|{
name|assert
argument_list|(
name|Num
operator|<
name|Args
operator|.
name|size
argument_list|()
operator|&&
literal|"Arg number out of range!"
argument_list|)
block|;
name|Args
index|[
name|Num
index|]
operator|=
name|I
block|;   }
name|virtual
name|Init
operator|*
name|resolveReferences
argument_list|(
name|Record
operator|&
name|R
argument_list|,
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|getAsString
argument_list|()
specifier|const
block|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|::
name|iterator
name|arg_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
operator|::
name|const_iterator
name|const_arg_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|::
name|iterator
name|name_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|::
name|const_iterator
name|const_name_iterator
expr_stmt|;
specifier|inline
name|arg_iterator
name|arg_begin
argument_list|()
block|{
return|return
name|Args
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_arg_iterator
name|arg_begin
argument_list|()
specifier|const
block|{
return|return
name|Args
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|arg_iterator
name|arg_end
argument_list|()
block|{
return|return
name|Args
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_arg_iterator
name|arg_end
argument_list|()
specifier|const
block|{
return|return
name|Args
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|size_t
name|arg_size
argument_list|()
specifier|const
block|{
return|return
name|Args
operator|.
name|size
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|arg_empty
argument_list|()
specifier|const
block|{
return|return
name|Args
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|inline
name|name_iterator
name|name_begin
argument_list|()
block|{
return|return
name|ArgNames
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_name_iterator
name|name_begin
argument_list|()
specifier|const
block|{
return|return
name|ArgNames
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|name_iterator
name|name_end
argument_list|()
block|{
return|return
name|ArgNames
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_name_iterator
name|name_end
argument_list|()
specifier|const
block|{
return|return
name|ArgNames
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|size_t
name|name_size
argument_list|()
specifier|const
block|{
return|return
name|ArgNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|name_empty
argument_list|()
specifier|const
block|{
return|return
name|ArgNames
operator|.
name|empty
argument_list|()
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveBitReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Bit
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal bit reference off dag"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
name|virtual
name|Init
operator|*
name|resolveListElementReference
argument_list|(
argument|Record&R
argument_list|,
argument|const RecordVal *RV
argument_list|,
argument|unsigned Elt
argument_list|)
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Illegal element reference off dag"
argument_list|)
block|;
return|return
literal|0
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|//  High-Level Classes
comment|//===----------------------------------------------------------------------===//
name|class
name|RecordVal
block|{
name|std
operator|::
name|string
name|Name
block|;
name|RecTy
operator|*
name|Ty
block|;
name|unsigned
name|Prefix
block|;
name|Init
operator|*
name|Value
block|;
name|public
operator|:
name|RecordVal
argument_list|(
argument|const std::string&N
argument_list|,
argument|RecTy *T
argument_list|,
argument|unsigned P
argument_list|)
block|;
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|unsigned
name|getPrefix
argument_list|()
specifier|const
block|{
return|return
name|Prefix
return|;
block|}
name|RecTy
operator|*
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
name|Init
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
return|;
block|}
name|bool
name|setValue
argument_list|(
argument|Init *V
argument_list|)
block|{
if|if
condition|(
name|V
condition|)
block|{
name|Value
operator|=
name|V
operator|->
name|convertInitializerTo
argument_list|(
name|Ty
argument_list|)
expr_stmt|;
return|return
name|Value
operator|==
literal|0
return|;
block|}
name|Value
operator|=
literal|0
expr_stmt|;
return|return
name|false
return|;
block|}
name|void
name|dump
argument_list|()
specifier|const
block|;
name|void
name|print
argument_list|(
argument|std::ostream&OS
argument_list|,
argument|bool PrintSem = true
argument_list|)
specifier|const
block|; }
block|;
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|OS
expr|,
specifier|const
name|RecordVal
operator|&
name|RV
operator|)
block|{
name|RV
operator|.
name|print
argument_list|(
name|OS
operator|<<
literal|"  "
argument_list|)
block|;
return|return
name|OS
return|;
block|}
name|class
name|Record
block|{
name|std
operator|::
name|string
name|Name
block|;
name|TGLoc
name|Loc
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|TemplateArgs
block|;
name|std
operator|::
name|vector
operator|<
name|RecordVal
operator|>
name|Values
block|;
name|std
operator|::
name|vector
operator|<
name|Record
operator|*
operator|>
name|SuperClasses
block|;
name|public
operator|:
name|explicit
name|Record
argument_list|(
argument|const std::string&N
argument_list|,
argument|TGLoc loc
argument_list|)
operator|:
name|Name
argument_list|(
name|N
argument_list|)
block|,
name|Loc
argument_list|(
argument|loc
argument_list|)
block|{}
operator|~
name|Record
argument_list|()
block|{}
specifier|const
name|std
operator|::
name|string
operator|&
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|void
name|setName
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|)
block|;
comment|// Also updates RecordKeeper.
name|TGLoc
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|Loc
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
operator|&
name|getTemplateArgs
argument_list|()
specifier|const
block|{
return|return
name|TemplateArgs
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|RecordVal
operator|>
operator|&
name|getValues
argument_list|()
specifier|const
block|{
return|return
name|Values
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|Record
operator|*
operator|>
operator|&
name|getSuperClasses
argument_list|()
specifier|const
block|{
return|return
name|SuperClasses
return|;
block|}
name|bool
name|isTemplateArg
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|TemplateArgs
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|TemplateArgs
index|[
name|i
index|]
operator|==
name|Name
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
specifier|const
name|RecordVal
operator|*
name|getValue
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Values
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Values
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|==
name|Name
condition|)
return|return
operator|&
name|Values
index|[
name|i
index|]
return|;
return|return
literal|0
return|;
block|}
name|RecordVal
operator|*
name|getValue
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Values
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Values
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|==
name|Name
condition|)
return|return
operator|&
name|Values
index|[
name|i
index|]
return|;
return|return
literal|0
return|;
block|}
name|void
name|addTemplateArg
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|isTemplateArg
argument_list|(
name|Name
argument_list|)
operator|&&
literal|"Template arg already defined!"
argument_list|)
block|;
name|TemplateArgs
operator|.
name|push_back
argument_list|(
name|Name
argument_list|)
block|;   }
name|void
name|addValue
argument_list|(
argument|const RecordVal&RV
argument_list|)
block|{
name|assert
argument_list|(
name|getValue
argument_list|(
name|RV
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
literal|"Value already added!"
argument_list|)
block|;
name|Values
operator|.
name|push_back
argument_list|(
name|RV
argument_list|)
block|;   }
name|void
name|removeValue
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|assert
argument_list|(
name|getValue
argument_list|(
name|Name
argument_list|)
operator|&&
literal|"Cannot remove an entry that does not exist!"
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Values
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|Values
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|==
name|Name
condition|)
block|{
name|Values
operator|.
name|erase
argument_list|(
name|Values
operator|.
name|begin
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
name|assert
argument_list|(
literal|0
operator|&&
literal|"Name does not exist in record!"
argument_list|)
expr_stmt|;
block|}
name|bool
name|isSubClassOf
argument_list|(
argument|const Record *R
argument_list|)
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|SuperClasses
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|SuperClasses
index|[
name|i
index|]
operator|==
name|R
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
name|bool
name|isSubClassOf
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|SuperClasses
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|SuperClasses
index|[
name|i
index|]
operator|->
name|getName
argument_list|()
operator|==
name|Name
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
name|void
name|addSuperClass
argument_list|(
argument|Record *R
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|isSubClassOf
argument_list|(
name|R
argument_list|)
operator|&&
literal|"Already subclassing record!"
argument_list|)
block|;
name|SuperClasses
operator|.
name|push_back
argument_list|(
name|R
argument_list|)
block|;   }
comment|/// resolveReferences - If there are any field references that refer to fields
comment|/// that have been filled in, we can propagate the values now.
comment|///
name|void
name|resolveReferences
argument_list|()
block|{
name|resolveReferencesTo
argument_list|(
literal|0
argument_list|)
block|; }
comment|/// resolveReferencesTo - If anything in this record refers to RV, replace the
comment|/// reference to RV with the RHS of RV.  If RV is null, we resolve all
comment|/// possible references.
name|void
name|resolveReferencesTo
argument_list|(
specifier|const
name|RecordVal
operator|*
name|RV
argument_list|)
block|;
name|void
name|dump
argument_list|()
specifier|const
block|;
comment|//===--------------------------------------------------------------------===//
comment|// High-level methods useful to tablegen back-ends
comment|//
comment|/// getValueInit - Return the initializer for a value with the specified name,
comment|/// or throw an exception if the field does not exist.
comment|///
name|Init
operator|*
name|getValueInit
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsString - This method looks up the specified field and returns
comment|/// its value as a string, throwing an exception if the field does not exist
comment|/// or if the value is not a string.
comment|///
name|std
operator|::
name|string
name|getValueAsString
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsBitsInit - This method looks up the specified field and returns
comment|/// its value as a BitsInit, throwing an exception if the field does not exist
comment|/// or if the value is not the right type.
comment|///
name|BitsInit
operator|*
name|getValueAsBitsInit
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsListInit - This method looks up the specified field and returns
comment|/// its value as a ListInit, throwing an exception if the field does not exist
comment|/// or if the value is not the right type.
comment|///
name|ListInit
operator|*
name|getValueAsListInit
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsListOfDefs - This method looks up the specified field and
comment|/// returns its value as a vector of records, throwing an exception if the
comment|/// field does not exist or if the value is not the right type.
comment|///
name|std
operator|::
name|vector
operator|<
name|Record
operator|*
operator|>
name|getValueAsListOfDefs
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsListOfInts - This method looks up the specified field and returns
comment|/// its value as a vector of integers, throwing an exception if the field does
comment|/// not exist or if the value is not the right type.
comment|///
name|std
operator|::
name|vector
operator|<
name|int64_t
operator|>
name|getValueAsListOfInts
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsDef - This method looks up the specified field and returns its
comment|/// value as a Record, throwing an exception if the field does not exist or if
comment|/// the value is not the right type.
comment|///
name|Record
operator|*
name|getValueAsDef
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsBit - This method looks up the specified field and returns its
comment|/// value as a bit, throwing an exception if the field does not exist or if
comment|/// the value is not the right type.
comment|///
name|bool
name|getValueAsBit
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsInt - This method looks up the specified field and returns its
comment|/// value as an int64_t, throwing an exception if the field does not exist or
comment|/// if the value is not the right type.
comment|///
name|int64_t
name|getValueAsInt
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsDag - This method looks up the specified field and returns its
comment|/// value as an Dag, throwing an exception if the field does not exist or if
comment|/// the value is not the right type.
comment|///
name|DagInit
operator|*
name|getValueAsDag
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|;
comment|/// getValueAsCode - This method looks up the specified field and returns
comment|/// its value as the string data in a CodeInit, throwing an exception if the
comment|/// field does not exist or if the value is not a code object.
comment|///
name|std
operator|::
name|string
name|getValueAsCode
argument_list|(
argument|const std::string&FieldName
argument_list|)
specifier|const
block|; }
block|;
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|OS
expr|,
specifier|const
name|Record
operator|&
name|R
operator|)
block|;  struct
name|MultiClass
block|{
name|Record
name|Rec
block|;
comment|// Placeholder for template args and Name.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Record
operator|*
operator|>
name|RecordVector
expr_stmt|;
name|RecordVector
name|DefPrototypes
block|;
name|void
name|dump
argument_list|()
specifier|const
block|;
name|MultiClass
argument_list|(
argument|const std::string&Name
argument_list|,
argument|TGLoc Loc
argument_list|)
operator|:
name|Rec
argument_list|(
argument|Name
argument_list|,
argument|Loc
argument_list|)
block|{}
block|}
block|;
name|class
name|RecordKeeper
block|{
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|Record
operator|*
operator|>
name|Classes
block|,
name|Defs
block|;
name|public
operator|:
operator|~
name|RecordKeeper
argument_list|()
block|{
for|for
control|(
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
init|,
name|Record
operator|*
operator|>
operator|::
name|iterator
name|I
operator|=
name|Classes
operator|.
name|begin
argument_list|()
init|,
name|E
operator|=
name|Classes
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|delete
name|I
operator|->
name|second
decl_stmt|;
for|for
control|(
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
init|,
name|Record
operator|*
operator|>
operator|::
name|iterator
name|I
operator|=
name|Defs
operator|.
name|begin
argument_list|()
init|,
name|E
operator|=
name|Defs
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|delete
name|I
operator|->
name|second
decl_stmt|;
block|}
specifier|const
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|Record
operator|*
operator|>
operator|&
name|getClasses
argument_list|()
specifier|const
block|{
return|return
name|Classes
return|;
block|}
specifier|const
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|Record
operator|*
operator|>
operator|&
name|getDefs
argument_list|()
specifier|const
block|{
return|return
name|Defs
return|;
block|}
name|Record
operator|*
name|getClass
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
block|{
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|Record
operator|*
operator|>
operator|::
name|const_iterator
name|I
operator|=
name|Classes
operator|.
name|find
argument_list|(
name|Name
argument_list|)
block|;
return|return
name|I
operator|==
name|Classes
operator|.
name|end
argument_list|()
condition|?
literal|0
else|:
name|I
operator|->
name|second
return|;
block|}
name|Record
operator|*
name|getDef
argument_list|(
argument|const std::string&Name
argument_list|)
specifier|const
block|{
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|Record
operator|*
operator|>
operator|::
name|const_iterator
name|I
operator|=
name|Defs
operator|.
name|find
argument_list|(
name|Name
argument_list|)
block|;
return|return
name|I
operator|==
name|Defs
operator|.
name|end
argument_list|()
condition|?
literal|0
else|:
name|I
operator|->
name|second
return|;
block|}
name|void
name|addClass
argument_list|(
argument|Record *R
argument_list|)
block|{
name|assert
argument_list|(
name|getClass
argument_list|(
name|R
operator|->
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
literal|"Class already exists!"
argument_list|)
block|;
name|Classes
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|R
operator|->
name|getName
argument_list|()
argument_list|,
name|R
argument_list|)
argument_list|)
block|;   }
name|void
name|addDef
argument_list|(
argument|Record *R
argument_list|)
block|{
name|assert
argument_list|(
name|getDef
argument_list|(
name|R
operator|->
name|getName
argument_list|()
argument_list|)
operator|==
literal|0
operator|&&
literal|"Def already exists!"
argument_list|)
block|;
name|Defs
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|R
operator|->
name|getName
argument_list|()
argument_list|,
name|R
argument_list|)
argument_list|)
block|;   }
comment|/// removeClass - Remove, but do not delete, the specified record.
comment|///
name|void
name|removeClass
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|assert
argument_list|(
name|Classes
operator|.
name|count
argument_list|(
name|Name
argument_list|)
operator|&&
literal|"Class does not exist!"
argument_list|)
block|;
name|Classes
operator|.
name|erase
argument_list|(
name|Name
argument_list|)
block|;   }
comment|/// removeDef - Remove, but do not delete, the specified record.
comment|///
name|void
name|removeDef
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|assert
argument_list|(
name|Defs
operator|.
name|count
argument_list|(
name|Name
argument_list|)
operator|&&
literal|"Def does not exist!"
argument_list|)
block|;
name|Defs
operator|.
name|erase
argument_list|(
name|Name
argument_list|)
block|;   }
comment|//===--------------------------------------------------------------------===//
comment|// High-level helper methods, useful for tablegen backends...
comment|/// getAllDerivedDefinitions - This method returns all concrete definitions
comment|/// that derive from the specified class name.  If a class with the specified
comment|/// name does not exist, an exception is thrown.
name|std
operator|::
name|vector
operator|<
name|Record
operator|*
operator|>
name|getAllDerivedDefinitions
argument_list|(
argument|const std::string&ClassName
argument_list|)
specifier|const
block|;
name|void
name|dump
argument_list|()
specifier|const
block|; }
block|;
comment|/// LessRecord - Sorting predicate to sort record pointers by name.
comment|///
block|struct
name|LessRecord
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|Record
operator|*
name|Rec1
expr|,
specifier|const
name|Record
operator|*
name|Rec2
operator|)
specifier|const
block|{
return|return
name|Rec1
operator|->
name|getName
argument_list|()
operator|<
name|Rec2
operator|->
name|getName
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// LessRecordFieldName - Sorting predicate to sort record pointers by their
comment|/// name field.
comment|///
block|struct
name|LessRecordFieldName
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|Record
operator|*
name|Rec1
expr|,
specifier|const
name|Record
operator|*
name|Rec2
operator|)
specifier|const
block|{
return|return
name|Rec1
operator|->
name|getValueAsString
argument_list|(
literal|"Name"
argument_list|)
operator|<
name|Rec2
operator|->
name|getValueAsString
argument_list|(
literal|"Name"
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|TGError
block|{
name|TGLoc
name|Loc
block|;
name|std
operator|::
name|string
name|Message
block|;
name|public
operator|:
name|TGError
argument_list|(
argument|TGLoc loc
argument_list|,
argument|const std::string&message
argument_list|)
operator|:
name|Loc
argument_list|(
name|loc
argument_list|)
block|,
name|Message
argument_list|(
argument|message
argument_list|)
block|{}
name|TGLoc
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|Loc
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getMessage
argument_list|()
specifier|const
block|{
return|return
name|Message
return|;
block|}
expr|}
block|;
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|OS
expr|,
specifier|const
name|RecordKeeper
operator|&
name|RK
operator|)
block|;
specifier|extern
name|RecordKeeper
name|Records
block|;
name|void
name|PrintError
argument_list|(
argument|TGLoc ErrorLoc
argument_list|,
argument|const std::string&Msg
argument_list|)
block|;     }
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

