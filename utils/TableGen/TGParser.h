begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- TGParser.h - Parser for TableGen Files -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class represents the Parser for tablegen files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TGPARSER_H
end_ifndef

begin_define
define|#
directive|define
name|TGPARSER_H
end_define

begin_include
include|#
directive|include
file|"TGLexer.h"
end_include

begin_include
include|#
directive|include
file|"TGSourceMgr.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Record
decl_stmt|;
name|class
name|RecordVal
decl_stmt|;
struct_decl|struct
name|RecTy
struct_decl|;
struct_decl|struct
name|Init
struct_decl|;
struct_decl|struct
name|MultiClass
struct_decl|;
struct_decl|struct
name|SubClassReference
struct_decl|;
struct_decl|struct
name|SubMultiClassReference
struct_decl|;
struct|struct
name|LetRecord
block|{
name|std
operator|::
name|string
name|Name
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
name|Bits
expr_stmt|;
name|Init
modifier|*
name|Value
decl_stmt|;
name|TGLoc
name|Loc
decl_stmt|;
name|LetRecord
argument_list|(
argument|const std::string&N
argument_list|,
argument|const std::vector<unsigned>&B
argument_list|,
argument|Init *V
argument_list|,
argument|TGLoc L
argument_list|)
block|:
name|Name
argument_list|(
name|N
argument_list|)
operator|,
name|Bits
argument_list|(
name|B
argument_list|)
operator|,
name|Value
argument_list|(
name|V
argument_list|)
operator|,
name|Loc
argument_list|(
argument|L
argument_list|)
block|{     }
block|}
struct|;
name|class
name|TGParser
block|{
name|TGLexer
name|Lex
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|vector
operator|<
name|LetRecord
operator|>
expr|>
name|LetStack
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|MultiClass
operator|*
operator|>
name|MultiClasses
expr_stmt|;
comment|/// CurMultiClass - If we are parsing a 'multiclass' definition, this is the
comment|/// current value.
name|MultiClass
modifier|*
name|CurMultiClass
decl_stmt|;
name|public
label|:
name|TGParser
argument_list|(
name|TGSourceMgr
operator|&
name|SrcMgr
argument_list|)
operator|:
name|Lex
argument_list|(
name|SrcMgr
argument_list|)
operator|,
name|CurMultiClass
argument_list|(
literal|0
argument_list|)
block|{}
name|void
name|setIncludeDirs
argument_list|(
argument|const std::vector<std::string>&D
argument_list|)
block|{
name|Lex
operator|.
name|setIncludeDirs
argument_list|(
name|D
argument_list|)
block|;}
comment|/// ParseFile - Main entrypoint for parsing a tblgen file.  These parser
comment|/// routines return true on error, or false on success.
name|bool
name|ParseFile
argument_list|()
expr_stmt|;
name|bool
name|Error
argument_list|(
name|TGLoc
name|L
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Msg
argument_list|)
decl|const
block|{
name|Lex
operator|.
name|PrintError
argument_list|(
name|L
argument_list|,
name|Msg
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|bool
name|TokError
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Msg
argument_list|)
decl|const
block|{
return|return
name|Error
argument_list|(
name|Lex
operator|.
name|getLoc
argument_list|()
argument_list|,
name|Msg
argument_list|)
return|;
block|}
name|private
label|:
comment|// Semantic analysis methods.
name|bool
name|AddValue
parameter_list|(
name|Record
modifier|*
name|TheRec
parameter_list|,
name|TGLoc
name|Loc
parameter_list|,
specifier|const
name|RecordVal
modifier|&
name|RV
parameter_list|)
function_decl|;
name|bool
name|SetValue
argument_list|(
name|Record
operator|*
name|TheRec
argument_list|,
name|TGLoc
name|Loc
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|ValName
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|BitList
argument_list|,
name|Init
operator|*
name|V
argument_list|)
decl_stmt|;
name|bool
name|AddSubClass
parameter_list|(
name|Record
modifier|*
name|Rec
parameter_list|,
name|SubClassReference
modifier|&
name|SubClass
parameter_list|)
function_decl|;
name|bool
name|AddSubMultiClass
parameter_list|(
name|MultiClass
modifier|*
name|CurMC
parameter_list|,
name|SubMultiClassReference
modifier|&
name|SubMultiClass
parameter_list|)
function_decl|;
name|private
label|:
comment|// Parser methods.
name|bool
name|ParseObjectList
parameter_list|()
function_decl|;
name|bool
name|ParseObject
parameter_list|()
function_decl|;
name|bool
name|ParseClass
parameter_list|()
function_decl|;
name|bool
name|ParseMultiClass
parameter_list|()
function_decl|;
name|bool
name|ParseMultiClassDef
parameter_list|(
name|MultiClass
modifier|*
name|CurMC
parameter_list|)
function_decl|;
name|bool
name|ParseDefm
parameter_list|()
function_decl|;
name|bool
name|ParseTopLevelLet
parameter_list|()
function_decl|;
name|std
operator|::
name|vector
operator|<
name|LetRecord
operator|>
name|ParseLetList
argument_list|()
expr_stmt|;
name|Record
modifier|*
name|ParseDef
parameter_list|(
name|MultiClass
modifier|*
name|CurMultiClass
parameter_list|)
function_decl|;
name|bool
name|ParseObjectBody
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|bool
name|ParseBody
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|bool
name|ParseBodyItem
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|bool
name|ParseTemplateArgList
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|ParseDeclaration
argument_list|(
argument|Record *CurRec
argument_list|,
argument|bool ParsingTemplateArgs
argument_list|)
expr_stmt|;
name|SubClassReference
name|ParseSubClassReference
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|,
name|bool
name|isDefm
parameter_list|)
function_decl|;
name|SubMultiClassReference
name|ParseSubMultiClassReference
parameter_list|(
name|MultiClass
modifier|*
name|CurMC
parameter_list|)
function_decl|;
name|Init
modifier|*
name|ParseIDValue
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|Init
modifier|*
name|ParseIDValue
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|TGLoc
name|NameLoc
argument_list|)
decl_stmt|;
name|Init
modifier|*
name|ParseSimpleValue
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|,
name|RecTy
modifier|*
name|ItemType
init|=
literal|0
parameter_list|)
function_decl|;
name|Init
modifier|*
name|ParseValue
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|,
name|RecTy
modifier|*
name|ItemType
init|=
literal|0
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|Init
operator|*
operator|>
name|ParseValueList
argument_list|(
name|Record
operator|*
name|CurRec
argument_list|,
name|Record
operator|*
name|ArgsRec
operator|=
literal|0
argument_list|,
name|RecTy
operator|*
name|EltTy
operator|=
literal|0
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|Init
operator|*
operator|,
name|std
operator|::
name|string
operator|>
expr|>
name|ParseDagArgList
argument_list|(
name|Record
operator|*
argument_list|)
expr_stmt|;
name|bool
name|ParseOptionalRangeList
argument_list|(
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Ranges
argument_list|)
decl_stmt|;
name|bool
name|ParseOptionalBitList
argument_list|(
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Ranges
argument_list|)
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
name|ParseRangeList
argument_list|()
expr_stmt|;
name|bool
name|ParseRangePiece
argument_list|(
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
name|Ranges
argument_list|)
decl_stmt|;
name|RecTy
modifier|*
name|ParseType
parameter_list|()
function_decl|;
name|Init
modifier|*
name|ParseOperation
parameter_list|(
name|Record
modifier|*
name|CurRec
parameter_list|)
function_decl|;
name|RecTy
modifier|*
name|ParseOperatorType
parameter_list|()
function_decl|;
name|std
operator|::
name|string
name|ParseObjectName
argument_list|()
expr_stmt|;
name|Record
modifier|*
name|ParseClassID
parameter_list|()
function_decl|;
name|MultiClass
modifier|*
name|ParseMultiClassID
parameter_list|()
function_decl|;
name|Record
modifier|*
name|ParseDefmID
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

