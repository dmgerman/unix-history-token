begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|BENCHMARK_STRING_UTIL_H_
end_ifndef

begin_define
define|#
directive|define
name|BENCHMARK_STRING_UTIL_H_
end_define

begin_include
include|#
directive|include
file|<sstream>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|"internal_macros.h"
end_include

begin_decl_stmt
name|namespace
name|benchmark
block|{
name|void
name|AppendHumanReadable
argument_list|(
name|int
name|n
argument_list|,
name|std
operator|::
name|string
operator|*
name|str
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|HumanReadableNumber
argument_list|(
argument|double n
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|StringPrintF
argument_list|(
specifier|const
name|char
operator|*
name|format
argument_list|,
operator|...
argument_list|)
expr_stmt|;
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|StringCatImp
argument_list|(
argument|std::ostream& out
argument_list|)
name|BENCHMARK_NOEXCEPT
block|{
return|return
name|out
return|;
block|}
name|template
operator|<
name|class
name|First
operator|,
name|class
operator|...
name|Rest
operator|>
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|StringCatImp
argument_list|(
argument|std::ostream& out
argument_list|,
argument|First&& f
argument_list|,
argument|Rest&&... rest
argument_list|)
block|{
name|out
operator|<<
name|std
operator|::
name|forward
operator|<
name|First
operator|>
operator|(
name|f
operator|)
block|;
return|return
name|StringCatImp
argument_list|(
name|out
argument_list|,
name|std
operator|::
name|forward
operator|<
name|Rest
operator|>
operator|(
name|rest
operator|)
operator|...
argument_list|)
return|;
block|}
name|template
operator|<
name|class
operator|...
name|Args
operator|>
specifier|inline
name|std
operator|::
name|string
name|StrCat
argument_list|(
argument|Args&&... args
argument_list|)
block|{
name|std
operator|::
name|ostringstream
name|ss
block|;
name|StringCatImp
argument_list|(
name|ss
argument_list|,
name|std
operator|::
name|forward
operator|<
name|Args
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
block|;
return|return
name|ss
operator|.
name|str
argument_list|()
return|;
block|}
name|void
name|ReplaceAll
argument_list|(
name|std
operator|::
name|string
operator|*
name|str
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|from
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|to
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace benchmark
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// BENCHMARK_STRING_UTIL_H_
end_comment

end_unit

