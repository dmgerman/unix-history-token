begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|BENCHMARK_LOG_H_
end_ifndef

begin_define
define|#
directive|define
name|BENCHMARK_LOG_H_
end_define

begin_include
include|#
directive|include
file|<iostream>
end_include

begin_include
include|#
directive|include
file|<ostream>
end_include

begin_include
include|#
directive|include
file|"benchmark/macros.h"
end_include

begin_decl_stmt
name|namespace
name|benchmark
block|{
name|namespace
name|internal
block|{
typedef|typedef
name|std
operator|::
name|basic_ostream
operator|<
name|char
operator|>
operator|&
call|(
name|EndLType
call|)
argument_list|(
name|std
operator|::
name|basic_ostream
operator|<
name|char
operator|>
operator|&
argument_list|)
expr_stmt|;
name|class
name|LogType
block|{
name|friend
name|LogType
modifier|&
name|GetNullLogInstance
parameter_list|()
function_decl|;
name|friend
name|LogType
modifier|&
name|GetErrorLogInstance
parameter_list|()
function_decl|;
comment|// FIXME: Add locking to output.
name|template
operator|<
name|class
name|Tp
operator|>
name|friend
name|LogType
operator|&
name|operator
operator|<<
operator|(
name|LogType
operator|&
operator|,
name|Tp
specifier|const
operator|&
operator|)
expr_stmt|;
name|friend
name|LogType
operator|&
name|operator
operator|<<
operator|(
name|LogType
operator|&
operator|,
name|EndLType
operator|*
operator|)
expr_stmt|;
name|private
label|:
name|LogType
argument_list|(
name|std
operator|::
name|ostream
operator|*
name|out
argument_list|)
operator|:
name|out_
argument_list|(
argument|out
argument_list|)
block|{}
name|std
operator|::
name|ostream
operator|*
name|out_
expr_stmt|;
name|BENCHMARK_DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|LogType
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|Tp
operator|>
name|LogType
operator|&
name|operator
operator|<<
operator|(
name|LogType
operator|&
name|log
operator|,
name|Tp
specifier|const
operator|&
name|value
operator|)
block|{
if|if
condition|(
name|log
operator|.
name|out_
condition|)
block|{
operator|*
name|log
operator|.
name|out_
operator|<<
name|value
expr_stmt|;
block|}
return|return
name|log
return|;
block|}
specifier|inline
name|LogType
operator|&
name|operator
operator|<<
operator|(
name|LogType
operator|&
name|log
operator|,
name|EndLType
operator|*
name|m
operator|)
block|{
if|if
condition|(
name|log
operator|.
name|out_
condition|)
block|{
operator|*
name|log
operator|.
name|out_
operator|<<
name|m
expr_stmt|;
block|}
return|return
name|log
return|;
block|}
specifier|inline
name|int
modifier|&
name|LogLevel
parameter_list|()
block|{
specifier|static
name|int
name|log_level
init|=
literal|0
decl_stmt|;
return|return
name|log_level
return|;
block|}
specifier|inline
name|LogType
modifier|&
name|GetNullLogInstance
parameter_list|()
block|{
specifier|static
name|LogType
name|log
argument_list|(
name|nullptr
argument_list|)
decl_stmt|;
return|return
name|log
return|;
block|}
specifier|inline
name|LogType
modifier|&
name|GetErrorLogInstance
parameter_list|()
block|{
specifier|static
name|LogType
name|log
argument_list|(
operator|&
name|std
operator|::
name|clog
argument_list|)
decl_stmt|;
return|return
name|log
return|;
block|}
specifier|inline
name|LogType
modifier|&
name|GetLogInstanceForLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|<=
name|LogLevel
argument_list|()
condition|)
block|{
return|return
name|GetErrorLogInstance
argument_list|()
return|;
block|}
return|return
name|GetNullLogInstance
argument_list|()
return|;
block|}
block|}
comment|// end namespace internal
block|}
end_decl_stmt

begin_comment
comment|// end namespace benchmark
end_comment

begin_define
define|#
directive|define
name|VLOG
parameter_list|(
name|x
parameter_list|)
define|\
value|(::benchmark::internal::GetLogInstanceForLevel(x)<< "-- LOG("<< x<< "):" \                                                                          " ")
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

