begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|BENCHMARK_TIMERS_H
end_ifndef

begin_define
define|#
directive|define
name|BENCHMARK_TIMERS_H
end_define

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|benchmark
block|{
comment|// Return the CPU usage of the current process
name|double
name|ProcessCPUUsage
parameter_list|()
function_decl|;
comment|// Return the CPU usage of the children of the current process
name|double
name|ChildrenCPUUsage
parameter_list|()
function_decl|;
comment|// Return the CPU usage of the current thread
name|double
name|ThreadCPUUsage
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|HAVE_STEADY_CLOCK
argument_list|)
name|template
operator|<
name|bool
name|HighResIsSteady
operator|=
name|std
operator|::
name|chrono
operator|::
name|high_resolution_clock
operator|::
name|is_steady
operator|>
expr|struct
name|ChooseSteadyClock
block|{
typedef|typedef
name|std
operator|::
name|chrono
operator|::
name|high_resolution_clock
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|ChooseSteadyClock
operator|<
name|false
operator|>
block|{
typedef|typedef
name|std
operator|::
name|chrono
operator|::
name|steady_clock
name|type
expr_stmt|;
block|}
empty_stmt|;
endif|#
directive|endif
struct|struct
name|ChooseClockType
block|{
if|#
directive|if
name|defined
argument_list|(
name|HAVE_STEADY_CLOCK
argument_list|)
typedef|typedef
name|ChooseSteadyClock
operator|<
operator|>
operator|::
name|type
name|type
expr_stmt|;
else|#
directive|else
typedef|typedef
name|std
operator|::
name|chrono
operator|::
name|high_resolution_clock
name|type
expr_stmt|;
endif|#
directive|endif
block|}
struct|;
specifier|inline
name|double
name|ChronoClockNow
parameter_list|()
block|{
typedef|typedef
name|ChooseClockType
operator|::
name|type
name|ClockType
expr_stmt|;
name|using
name|FpSeconds
init|=
name|std
operator|::
name|chrono
operator|::
name|duration
operator|<
name|double
decl_stmt|,
name|std
decl|::
name|chrono
decl|::
name|seconds
decl|::
name|period
decl|>
decl_stmt|;
return|return
name|FpSeconds
argument_list|(
name|ClockType
operator|::
name|now
argument_list|()
operator|.
name|time_since_epoch
argument_list|()
argument_list|)
operator|.
name|count
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|LocalDateTimeString
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace benchmark
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// BENCHMARK_TIMERS_H
end_comment

end_unit

