begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|BENCHMARK_MUTEX_H_
end_ifndef

begin_define
define|#
directive|define
name|BENCHMARK_MUTEX_H_
end_define

begin_include
include|#
directive|include
file|<condition_variable>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_include
include|#
directive|include
file|"check.h"
end_include

begin_comment
comment|// Enable thread safety attributes only with clang.
end_comment

begin_comment
comment|// The attributes can be safely erased when compiling with other compilers.
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|HAVE_THREAD_SAFETY_ATTRIBUTES
argument_list|)
end_if

begin_define
define|#
directive|define
name|THREAD_ANNOTATION_ATTRIBUTE__
parameter_list|(
name|x
parameter_list|)
value|__attribute__((x))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|THREAD_ANNOTATION_ATTRIBUTE__
parameter_list|(
name|x
parameter_list|)
end_define

begin_comment
comment|// no-op
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|CAPABILITY
parameter_list|(
name|x
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(capability(x))
end_define

begin_define
define|#
directive|define
name|SCOPED_CAPABILITY
value|THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable)
end_define

begin_define
define|#
directive|define
name|GUARDED_BY
parameter_list|(
name|x
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x))
end_define

begin_define
define|#
directive|define
name|PT_GUARDED_BY
parameter_list|(
name|x
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x))
end_define

begin_define
define|#
directive|define
name|ACQUIRED_BEFORE
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|ACQUIRED_AFTER
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|REQUIRES
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|REQUIRES_SHARED
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|ACQUIRE
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|ACQUIRE_SHARED
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|RELEASE
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(release_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|RELEASE_SHARED
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|TRY_ACQUIRE
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|TRY_ACQUIRE_SHARED
parameter_list|(
modifier|...
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|EXCLUDES
parameter_list|(
modifier|...
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(__VA_ARGS__))
end_define

begin_define
define|#
directive|define
name|ASSERT_CAPABILITY
parameter_list|(
name|x
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x))
end_define

begin_define
define|#
directive|define
name|ASSERT_SHARED_CAPABILITY
parameter_list|(
name|x
parameter_list|)
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x))
end_define

begin_define
define|#
directive|define
name|RETURN_CAPABILITY
parameter_list|(
name|x
parameter_list|)
value|THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x))
end_define

begin_define
define|#
directive|define
name|NO_THREAD_SAFETY_ANALYSIS
define|\
value|THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)
end_define

begin_decl_stmt
name|namespace
name|benchmark
block|{
typedef|typedef
name|std
operator|::
name|condition_variable
name|Condition
expr_stmt|;
comment|// NOTE: Wrappers for std::mutex and std::unique_lock are provided so that
comment|// we can annotate them with thread safety attributes and use the
comment|// -Wthread-safety warning with clang. The standard library types cannot be
comment|// used directly because they do not provided the required annotations.
name|class
name|CAPABILITY
argument_list|(
literal|"mutex"
argument_list|)
name|Mutex
block|{
name|public
label|:
name|Mutex
argument_list|()
block|{}
name|void
name|lock
parameter_list|()
function|ACQUIRE
parameter_list|()
block|{
name|mut_
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
name|void
name|unlock
parameter_list|()
function|RELEASE
parameter_list|()
block|{
name|mut_
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|std
operator|::
name|mutex
operator|&
name|native_handle
argument_list|()
block|{
return|return
name|mut_
return|;
block|}
name|private
label|:
name|std
operator|::
name|mutex
name|mut_
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SCOPED_CAPABILITY
name|MutexLock
block|{
typedef|typedef
name|std
operator|::
name|unique_lock
operator|<
name|std
operator|::
name|mutex
operator|>
name|MutexLockImp
expr_stmt|;
name|public
label|:
name|MutexLock
argument_list|(
argument|Mutex& m
argument_list|)
name|ACQUIRE
argument_list|(
name|m
argument_list|)
operator|:
name|ml_
argument_list|(
argument|m.native_handle()
argument_list|)
block|{}
operator|~
name|MutexLock
argument_list|()
name|RELEASE
argument_list|()
block|{}
name|MutexLockImp
operator|&
name|native_handle
argument_list|()
block|{
return|return
name|ml_
return|;
block|}
name|private
label|:
name|MutexLockImp
name|ml_
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Barrier
block|{
name|public
label|:
name|Barrier
argument_list|(
argument|int num_threads
argument_list|)
block|:
name|running_threads_
argument_list|(
argument|num_threads
argument_list|)
block|{}
comment|// Called by each thread
name|bool
name|wait
parameter_list|()
function|EXCLUDES
parameter_list|(
name|lock_
parameter_list|)
block|{
name|bool
name|last_thread
init|=
name|false
decl_stmt|;
block|{
name|MutexLock
name|ml
argument_list|(
name|lock_
argument_list|)
decl_stmt|;
name|last_thread
operator|=
name|createBarrier
argument_list|(
name|ml
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|last_thread
condition|)
name|phase_condition_
operator|.
name|notify_all
argument_list|()
expr_stmt|;
return|return
name|last_thread
return|;
block|}
name|void
name|removeThread
parameter_list|()
function|EXCLUDES
parameter_list|(
name|lock_
parameter_list|)
block|{
name|MutexLock
name|ml
argument_list|(
name|lock_
argument_list|)
decl_stmt|;
operator|--
name|running_threads_
expr_stmt|;
if|if
condition|(
name|entered_
operator|!=
literal|0
condition|)
name|phase_condition_
operator|.
name|notify_all
argument_list|()
expr_stmt|;
block|}
name|private
label|:
name|Mutex
name|lock_
decl_stmt|;
name|Condition
name|phase_condition_
decl_stmt|;
name|int
name|running_threads_
decl_stmt|;
comment|// State for barrier management
name|int
name|phase_number_
init|=
literal|0
decl_stmt|;
name|int
name|entered_
init|=
literal|0
decl_stmt|;
comment|// Number of threads that have entered this barrier
comment|// Enter the barrier and wait until all other threads have also
comment|// entered the barrier.  Returns iff this is the last thread to
comment|// enter the barrier.
name|bool
name|createBarrier
parameter_list|(
name|MutexLock
modifier|&
name|ml
parameter_list|)
function|REQUIRES
parameter_list|(
name|lock_
parameter_list|)
block|{
name|CHECK_LT
argument_list|(
name|entered_
argument_list|,
name|running_threads_
argument_list|)
expr_stmt|;
name|entered_
operator|++
expr_stmt|;
if|if
condition|(
name|entered_
operator|<
name|running_threads_
condition|)
block|{
comment|// Wait for all threads to enter
name|int
name|phase_number_cp
init|=
name|phase_number_
decl_stmt|;
name|auto
name|cb
init|=
index|[
name|this
operator|,
name|phase_number_cp
index|]
operator|(
operator|)
block|{
return|return
name|this
operator|->
name|phase_number_
operator|>
name|phase_number_cp
operator|||
name|entered_
operator|==
name|running_threads_
return|;
comment|// A thread has aborted in error
block|}
empty_stmt|;
name|phase_condition_
operator|.
name|wait
argument_list|(
name|ml
operator|.
name|native_handle
argument_list|()
argument_list|,
name|cb
argument_list|)
expr_stmt|;
if|if
condition|(
name|phase_number_
operator|>
name|phase_number_cp
condition|)
return|return
name|false
return|;
comment|// else (running_threads_ == entered_) and we are the last thread.
block|}
comment|// Last thread has reached the barrier
name|phase_number_
operator|++
expr_stmt|;
name|entered_
operator|=
literal|0
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace benchmark
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// BENCHMARK_MUTEX_H_
end_comment

end_unit

