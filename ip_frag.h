begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2012 by Darren Reed.  *  * See the IPFILTER.LICENCE file for details on licencing.  *  * @(#)ip_frag.h	1.5 3/24/96  * $Id$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__IP_FRAG_H__
end_ifndef

begin_define
define|#
directive|define
name|__IP_FRAG_H__
end_define

begin_define
define|#
directive|define
name|IPFT_SIZE
value|257
end_define

begin_typedef
typedef|typedef
struct|struct
name|ipfr
block|{
name|struct
name|ipfr
modifier|*
name|ipfr_hnext
decl_stmt|,
modifier|*
modifier|*
name|ipfr_hprev
decl_stmt|;
name|struct
name|ipfr
modifier|*
name|ipfr_next
decl_stmt|,
modifier|*
modifier|*
name|ipfr_prev
decl_stmt|;
name|void
modifier|*
name|ipfr_data
decl_stmt|;
name|frentry_t
modifier|*
name|ipfr_rule
decl_stmt|;
name|u_long
name|ipfr_ttl
decl_stmt|;
name|u_int
name|ipfr_pkts
decl_stmt|;
name|u_int
name|ipfr_bytes
decl_stmt|;
name|u_int
name|ipfr_badorder
decl_stmt|;
name|int
name|ipfr_ref
decl_stmt|;
name|u_short
name|ipfr_off
decl_stmt|;
name|u_short
name|ipfr_firstend
decl_stmt|;
name|u_char
name|ipfr_p
decl_stmt|;
name|u_char
name|ipfr_seen0
decl_stmt|;
comment|/* 	 * All of the fields, from ipfr_ifp to ipfr_pass, are compared 	 * using bcmp to see if an identical entry is present.  It is 	 * therefore important for this set to remain together. 	 */
name|void
modifier|*
name|ipfr_ifp
decl_stmt|;
name|i6addr_t
name|ipfr_source
decl_stmt|;
name|i6addr_t
name|ipfr_dest
decl_stmt|;
name|u_32_t
name|ipfr_optmsk
decl_stmt|;
name|u_short
name|ipfr_secmsk
decl_stmt|;
name|u_short
name|ipfr_auth
decl_stmt|;
name|u_32_t
name|ipfr_id
decl_stmt|;
name|u_32_t
name|ipfr_pass
decl_stmt|;
name|int
name|ipfr_v
decl_stmt|;
block|}
name|ipfr_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ipfr_src
value|ipfr_source.in4
end_define

begin_define
define|#
directive|define
name|ipfr_dst
value|ipfr_dest.in4
end_define

begin_typedef
typedef|typedef
struct|struct
name|ipfrstat
block|{
name|u_long
name|ifs_exists
decl_stmt|;
comment|/* add& already exists */
name|u_long
name|ifs_nomem
decl_stmt|;
name|u_long
name|ifs_new
decl_stmt|;
name|u_long
name|ifs_hits
decl_stmt|;
name|u_long
name|ifs_expire
decl_stmt|;
name|u_long
name|ifs_inuse
decl_stmt|;
name|u_long
name|ifs_retrans0
decl_stmt|;
name|u_long
name|ifs_short
decl_stmt|;
name|u_long
name|ifs_bad
decl_stmt|;
name|u_long
name|ifs_overlap
decl_stmt|;
name|u_long
name|ifs_unordered
decl_stmt|;
name|u_long
name|ifs_strict
decl_stmt|;
name|u_long
name|ifs_miss
decl_stmt|;
name|u_long
name|ifs_maximum
decl_stmt|;
name|u_long
name|ifs_newbad
decl_stmt|;
name|u_long
name|ifs_newrestrictnot0
decl_stmt|;
name|struct
name|ipfr
modifier|*
modifier|*
name|ifs_table
decl_stmt|;
name|struct
name|ipfr
modifier|*
modifier|*
name|ifs_nattab
decl_stmt|;
block|}
name|ipfrstat_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|IPFR_CMPSZ
value|(offsetof(ipfr_t, ipfr_pass) - \ 			 offsetof(ipfr_t, ipfr_ifp))
end_define

begin_decl_stmt
specifier|extern
name|void
modifier|*
name|ipf_frag_soft_create
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_soft_init
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_soft_fini
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_soft_destroy
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_main_load
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_main_unload
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_load
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_clear
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_expire
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_forget
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_init
name|__P
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_32_t
name|ipf_frag_ipidknown
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_ipidnew
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|frentry_t
modifier|*
name|ipf_frag_known
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_natforget
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_natnew
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|,
expr|struct
name|nat
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|nat_t
modifier|*
name|ipf_frag_natknown
name|__P
argument_list|(
operator|(
name|fr_info_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_new
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|fr_info_t
operator|*
operator|,
name|u_32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ipfrstat_t
modifier|*
name|ipf_frag_stats
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_setlock
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_pkt_deref
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_pkt_next
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|ipftoken_t
operator|*
operator|,
name|ipfgeniter_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_frag_nat_deref
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ipf_frag_nat_next
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|,
name|ipftoken_t
operator|*
operator|,
name|ipfgeniter_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ipf_slowtimer
name|__P
argument_list|(
operator|(
name|ipf_main_softc_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __IP_FRAG_H__ */
end_comment

end_unit

