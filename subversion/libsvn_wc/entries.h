begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * entries.h :  manipulating entries  *  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  */
end_comment

begin_escape
end_escape

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_LIBSVN_WC_ENTRIES_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_LIBSVN_WC_ENTRIES_H
end_define

begin_include
include|#
directive|include
file|<apr_pools.h>
end_include

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_include
include|#
directive|include
file|"wc_db.h"
end_include

begin_include
include|#
directive|include
file|"private/svn_sqlite.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/** Get an ENTRY for the given LOCAL_ABSPATH.  *  * This API does not require an access baton, just a wc_db handle (DB).  * The requested entry MUST be present and version-controlled when  * ALLOW_UNVERSIONED is FALSE; otherwise, SVN_ERR_WC_PATH_NOT_FOUND is  * returned. When ALLOW_UNVERSIONED is TRUE, and the node is not under  * version control, *ENTRY will be set to NULL (this is easier for callers  * to handle, than detecting the error and clearing it).  *  * If you know the entry is a FILE or DIR, then specify that in KIND. If you  * are unsure, then specify 'svn_node_unknown' for KIND. This value will be  * used to optimize the access to the entry, so it is best to know the kind.  * If you specify FILE/DIR, and the entry is *something else*, then  * SVN_ERR_NODE_UNEXPECTED_KIND will be returned.  *  * If KIND == UNKNOWN, and you request the parent stub, and the node turns  * out to NOT be a directory, then SVN_ERR_NODE_UNEXPECTED_KIND is returned.  *  * NOTE: if SVN_ERR_NODE_UNEXPECTED_KIND is returned, then the ENTRY *IS*  * valid and may be examined. For any other error, ENTRY *IS NOT* valid.  *  * NOTE: if an access baton is available, then it will be examined for  * cached entries (and this routine may even cache them for you). It is  * not required, however, to do any access baton management for this API.  *  * ENTRY will be allocated in RESULT_POOL, and all temporary allocations  * will be performed in SCRATCH_POOL.  */
name|svn_error_t
modifier|*
name|svn_wc__get_entry
parameter_list|(
specifier|const
name|svn_wc_entry_t
modifier|*
modifier|*
name|entry
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
specifier|const
name|char
modifier|*
name|local_abspath
parameter_list|,
name|svn_boolean_t
name|allow_unversioned
parameter_list|,
name|svn_node_kind_t
name|kind
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Is ENTRY in a 'hidden' state in the sense of the 'show_hidden'  * switches on svn_wc_entries_read(), svn_wc_walk_entries*(), etc.? */
name|svn_error_t
modifier|*
name|svn_wc__entry_is_hidden
parameter_list|(
name|svn_boolean_t
modifier|*
name|hidden
parameter_list|,
specifier|const
name|svn_wc_entry_t
modifier|*
name|entry
parameter_list|)
function_decl|;
comment|/* The checksums of one pre-1.7 text-base file.  If the text-base file  * exists, both checksums are filled in, otherwise both fields are NULL. */
typedef|typedef
struct|struct
name|svn_wc__text_base_file_info_t
block|{
name|svn_checksum_t
modifier|*
name|sha1_checksum
decl_stmt|;
name|svn_checksum_t
modifier|*
name|md5_checksum
decl_stmt|;
block|}
name|svn_wc__text_base_file_info_t
typedef|;
comment|/* The text-base checksums of the normal base and/or the revert-base of one  * pre-1.7 versioned text file. */
typedef|typedef
struct|struct
name|svn_wc__text_base_info_t
block|{
name|svn_wc__text_base_file_info_t
name|normal_base
decl_stmt|;
name|svn_wc__text_base_file_info_t
name|revert_base
decl_stmt|;
block|}
name|svn_wc__text_base_info_t
typedef|;
comment|/* For internal use by upgrade.c to write entries in the wc-ng format.    Return in DIR_BATON the baton to be passed as PARENT_BATON when    upgrading child directories. Pass a NULL PARENT_BATON when upgrading    the root directory.     TEXT_BASES_INFO is a hash of information about all the text bases found    in this directory's admin area, keyed on (const char *) name of the    versioned file, with (svn_wc__text_base_info_t *) values. */
name|svn_error_t
modifier|*
name|svn_wc__write_upgraded_entries
parameter_list|(
name|void
modifier|*
modifier|*
name|dir_baton
parameter_list|,
name|void
modifier|*
name|parent_baton
parameter_list|,
name|svn_wc__db_t
modifier|*
name|db
parameter_list|,
name|svn_sqlite__db_t
modifier|*
name|sdb
parameter_list|,
name|apr_int64_t
name|repos_id
parameter_list|,
name|apr_int64_t
name|wc_id
parameter_list|,
specifier|const
name|char
modifier|*
name|dir_abspath
parameter_list|,
specifier|const
name|char
modifier|*
name|new_root_abspath
parameter_list|,
name|apr_hash_t
modifier|*
name|entries
parameter_list|,
name|apr_hash_t
modifier|*
name|text_bases_info
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Parse a file external specification in the NULL terminated STR and    place the path in PATH_RESULT, the peg revision in PEG_REV_RESULT    and revision number in REV_RESULT.  STR may be NULL, in which case    PATH_RESULT will be set to NULL and both PEG_REV_RESULT and    REV_RESULT set to svn_opt_revision_unspecified.     The format that is read is the same as a working-copy path with a    peg revision; see svn_opt_parse_path(). */
name|svn_error_t
modifier|*
name|svn_wc__unserialize_file_external
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|path_result
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|peg_rev_result
parameter_list|,
name|svn_opt_revision_t
modifier|*
name|rev_result
parameter_list|,
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Serialize into STR the file external path, peg revision number and    the operative revision number into a format that    unserialize_file_external() can parse.  The format is      %{peg_rev}:%{rev}:%{path}    where a rev will either be HEAD or the string revision number.  If    PATH is NULL then STR will be set to NULL.  This method writes to a    string instead of a svn_stringbuf_t so that the string can be    protected by write_str(). */
name|svn_error_t
modifier|*
name|svn_wc__serialize_file_external
parameter_list|(
specifier|const
name|char
modifier|*
modifier|*
name|str
parameter_list|,
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|peg_rev
parameter_list|,
specifier|const
name|svn_opt_revision_t
modifier|*
name|rev
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/* Non-deprecated wrapper variant of svn_wc_entries_read used implement    legacy API functions. See svn_wc_entries_read for a detailed description.  */
name|svn_error_t
modifier|*
name|svn_wc__entries_read_internal
parameter_list|(
name|apr_hash_t
modifier|*
modifier|*
name|entries
parameter_list|,
name|svn_wc_adm_access_t
modifier|*
name|adm_access
parameter_list|,
name|svn_boolean_t
name|show_hidden
parameter_list|,
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_LIBSVN_WC_ENTRIES_H */
end_comment

end_unit

