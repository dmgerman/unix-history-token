begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_diff_tree.h  * @brief Generic diff handler. Replacing the old svn_wc_diff_callbacks4_t  * infrastructure  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_DIFF_TREE_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_DIFF_TREE_H
end_define

begin_include
include|#
directive|include
file|"svn_types.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/*  *                   About the diff tree processor.  *  * Subversion uses two kinds of editors to describe changes. One to  * describe changes on how to *exactly* transform one tree to another tree,  * as efficiently as possible and one to describe the difference between trees  * in order to review the changes, or to allow applying them on a third tree  * which is similar to those other trees.  *  * The first case was originally handled by svn_delta_editor_t and might be  * replaced by svn_editor_t in a future version. This diff processor handles  * the other case and as such forms the layer below our diff and merge  * handling.  *  * The major difference between this and the other editors is that this diff  * always provides access to the full text and/or properties in the left and  * right tree when applicable to allow processor implementers to decide how  * to interpret changes.  *  * Originally this diff processor was not formalized explicitly, but  * informally handled by the working copy diff callbacks. These callbacks just  * provided the information to drive a unified diff and a textual merge. To go  * one step further and allow full tree conflict detection we needed a better  * defined diff handling. Instead of adding yet a few more functions and  * arguments to the already overloaded diff callbacks the api was completely  * redesigned with a few points in mind.  *  *   * It must be able to drive the old callbacks interface without users  *     noticing the difference (100% compatible).  *     (Implemented as svn_wc__wrap_diff_callbacks())  *  *   * It should provide the information that was missing in the old interface,  *     but required to close existing issues.  *  *     E.g. - properties and children on deleted directories.  *          - revision numbers and copyfrom information on directories.  *  * To cleanup the implementation and make it easier on diff processors to  * handle the results I also added the following constraints.  *  *   * Diffs should be fully reversable: anything that is deleted should be  *     available, just like something that is added.  *     (Proven via svn_diff__tree_processor_reverse_create)  *     ### Still in doubt if *_deleted() needs a copy_to argument, for the  *     ### 99% -> 100%.  *  *   * Diff processors should have an easy way to communicate that they are  *     not interrested in certain expensive to obtain results.  *  *   * Directories should have clear open and close events to allow adding them  *     before their children, but still allowing property changes to have  *     defined behavior.  *  *   * Files and directories should be handled as similar as possible as in  *     many cases they are just nodes in a tree.  *  *   * It should be easy to create diff wrappers to apply certain transforms.  *  * During the creation an additional requirement of knowing about 'some  * absent' nodes was added, to allow the merge to work on just this processor  * api.  *  * The api describes a clean open-close walk through a tree, depending on the  * driver multiple siblings can be described at the same time, but when a  * directory is closed all descendants are done.  *  * Note that it is possible for nodes to be described as a delete followed by  * an add at the same place within one parent. (Iff the diff is reversed you  * can see an add followed by a delete!)  *  * The directory batons live between the open and close events of a directory  * and are thereby guaranteed to outlive the batons of their descendants.  */
comment|/* Describes the source of a merge */
typedef|typedef
struct|struct
name|svn_diff_source_t
block|{
comment|/* Always available */
name|svn_revnum_t
name|revision
decl_stmt|;
comment|/* Depending on the driver available for copyfrom */
specifier|const
name|char
modifier|*
name|repos_relpath
decl_stmt|;
block|}
name|svn_diff_source_t
typedef|;
comment|/**  * A callback vtable invoked by our diff-editors, as they receive diffs  * from the server. 'svn diff' and 'svn merge' implement their own versions  * of this vtable.  *  * All callbacks receive the processor and at least a parent baton. Forwarding  * the processor allows future extensions to call into the old functions without  * revving the entire API.  *  * Users must call svn_diff__tree_processor_create() to allow adding new  * callbacks later. (E.g. when we decide how to add move support) These  * extensions can then just call into other callbacks.  *  * @since New in 1.8.  */
typedef|typedef
struct|struct
name|svn_diff_tree_processor_t
block|{
comment|/** The value passed to svn_diff__tree_processor_create() as BATON.    */
name|void
modifier|*
name|baton
decl_stmt|;
comment|/* To avoid an additional in some places */
comment|/* Called before a directories children are processed.    *    * Set *SKIP_CHILDREN to TRUE, to skip calling callbacks for all    * children.    *    * Set *SKIP to TRUE to skip calling the added, deleted, changed    * or closed callback for this node only.    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_opened
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|new_dir_baton
parameter_list|,
name|svn_boolean_t
modifier|*
name|skip
parameter_list|,
name|svn_boolean_t
modifier|*
name|skip_children
parameter_list|,
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|copyfrom_source
parameter_list|,
name|void
modifier|*
name|parent_dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after a directory and all its children are added    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_added
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|copyfrom_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|copyfrom_props
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|right_props
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after all children of this node are reported as deleted.    *    * The default implementation calls dir_closed().    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_deleted
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|left_props
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called instead of dir_closed() if the properties on the directory    *  were modified.    *    * The default implementation calls dir_closed().    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_changed
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|left_props
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|right_props
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|prop_changes
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called when a directory is closed without applying changes to    * the directory itself.    *    * When dir_changed or dir_deleted are handled by the default implementation    * they call dir_closed()    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|dir_closed
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called before file_added(), file_deleted(), file_changed() and      file_closed()    */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_opened
function_decl|)
parameter_list|(
name|void
modifier|*
modifier|*
name|new_file_baton
parameter_list|,
name|svn_boolean_t
modifier|*
name|skip
parameter_list|,
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|copyfrom_source
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after file_opened() for newly added and copied files */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_added
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|copyfrom_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
specifier|const
name|char
modifier|*
name|copyfrom_file
parameter_list|,
specifier|const
name|char
modifier|*
name|right_file
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|copyfrom_props
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|right_props
parameter_list|,
name|void
modifier|*
name|file_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after file_opened() for deleted or moved away files */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_deleted
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|char
modifier|*
name|left_file
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|left_props
parameter_list|,
name|void
modifier|*
name|file_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after file_opened() for changed files */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_changed
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
specifier|const
name|char
modifier|*
name|left_file
parameter_list|,
specifier|const
name|char
modifier|*
name|right_file
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|left_props
parameter_list|,
comment|/*const*/
name|apr_hash_t
modifier|*
name|right_props
parameter_list|,
name|svn_boolean_t
name|file_modified
parameter_list|,
specifier|const
name|apr_array_header_t
modifier|*
name|prop_changes
parameter_list|,
name|void
modifier|*
name|file_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called after file_opened() for unmodified files */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|file_closed
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|left_source
parameter_list|,
specifier|const
name|svn_diff_source_t
modifier|*
name|right_source
parameter_list|,
name|void
modifier|*
name|file_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/* Called when encountering a marker for an absent file or directory */
name|svn_error_t
modifier|*
function_decl|(
modifier|*
name|node_absent
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|void
modifier|*
name|dir_baton
parameter_list|,
specifier|const
name|struct
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
block|}
name|svn_diff_tree_processor_t
typedef|;
comment|/**  * Create a new svn_diff_tree_processor_t instance with all functions  * set to a callback doing nothing but copying the parent baton to  * the new baton.  *  * @since New in 1.8.  */
name|svn_diff_tree_processor_t
modifier|*
name|svn_diff__tree_processor_create
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/**  * Create a new svn_diff_tree_processor_t instance with all functions setup  * to call into another svn_diff_tree_processor_t processor, but with all  * adds and deletes inverted.  *  * @since New in 1.8.  */
comment|/* Used by libsvn clients repository diff */
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|svn_diff__tree_processor_reverse_create
parameter_list|(
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/**  * Create a new svn_diff_tree_processor_t instance with all functions setup  * to call into processor for all paths equal to and below prefix_relpath.  *  * @since New in 1.8.  */
comment|/* Used by libsvn clients repository diff */
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|svn_diff__tree_processor_filter_create
parameter_list|(
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix_relpath
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/**  * Create a new svn_diff_tree_processor_t instace with all function setup  * to call into processor with all adds with copyfrom information transformed  * to simple node changes.  *  * @since New in 1.8.  */
comment|/* Used by libsvn_wc diff editor */
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|svn_diff__tree_processor_copy_as_changed_create
parameter_list|(
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
comment|/**  * Create a new svn_diff_tree_processor_t instance with all functions setup  * to first call into processor1 and then processor2.  *  * This function is mostly a debug and migration helper.  *  * @since New in 1.8.  */
comment|/* Used by libsvn clients repository diff */
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|svn_diff__tree_processor_tee_create
parameter_list|(
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor1
parameter_list|,
specifier|const
name|svn_diff_tree_processor_t
modifier|*
name|processor2
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
name|svn_diff_source_t
modifier|*
name|svn_diff__source_create
parameter_list|(
name|svn_revnum_t
name|revision
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_DIFF_TREE_H */
end_comment

end_unit

