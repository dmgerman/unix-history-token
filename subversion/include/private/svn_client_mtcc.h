begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * @copyright  * ====================================================================  *    Licensed to the Apache Software Foundation (ASF) under one  *    or more contributor license agreements.  See the NOTICE file  *    distributed with this work for additional information  *    regarding copyright ownership.  The ASF licenses this file  *    to you under the Apache License, Version 2.0 (the  *    "License"); you may not use this file except in compliance  *    with the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *    Unless required by applicable law or agreed to in writing,  *    software distributed under the License is distributed on an  *    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  *    KIND, either express or implied.  See the License for the  *    specific language governing permissions and limitations  *    under the License.  * ====================================================================  * @endcopyright  *  * @file svn_client_mtcc.h  * @brief Subversion multicommand client support  *  * Requires:  The working copy library and client library.  * Provides:  High level multicommand api.  * Used By:   Client programs, svnmucc.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SVN_CLIENT_MTCC_H
end_ifndef

begin_define
define|#
directive|define
name|SVN_CLIENT_MTCC_H
end_define

begin_include
include|#
directive|include
file|"svn_client.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
comment|/**  *  * @defgroup clnt_mtcc Multi Command Context related functions  *  * @{  *  */
comment|/** This is a structure which stores a list of repository commands  * that can be played to a repository as a single operation  *  * Use svn_client__mtcc_create() to create instances  *  * @since New in 1.9.  */
typedef|typedef
name|struct
name|svn_client__mtcc_t
name|svn_client__mtcc_t
typedef|;
comment|/** Creates a new multicommand context for an operation on @a anchor_url and  * its descendants.  *  * Allocate the context in @a result_pool and perform temporary allocations in  * @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_create
parameter_list|(
name|svn_client__mtcc_t
modifier|*
modifier|*
name|mtcc
parameter_list|,
specifier|const
name|char
modifier|*
name|anchor_url
parameter_list|,
name|svn_revnum_t
name|base_revision
parameter_list|,
name|svn_client_ctx_t
modifier|*
name|ctx
parameter_list|,
name|apr_pool_t
modifier|*
name|result_pool
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds a file add operation of @a relpath to @a mtcc. If @a src_checksum  * is not null it will be provided to the repository to verify if the file  * was transferred successfully.  *  * Perform temporary allocations in @a scratch_pool.  *  * @note The current implementation keeps @a src_stream open until @a mtcc  * is committed.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_add_file
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|svn_stream_t
modifier|*
name|src_stream
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|src_checksum
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds a copy operation of the node @a src_relpath at revision @a revision  * to @a dst_relpath to @a mtcc.  *  * Perform temporary allocations in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_copy
parameter_list|(
specifier|const
name|char
modifier|*
name|src_relpath
parameter_list|,
name|svn_revnum_t
name|revision
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_relpath
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds a delete of @a relpath to @a mtcc.  *  * Perform temporary allocations in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_delete
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds an mkdir operation of @a relpath to @a mtcc.  *  * Perform temporary allocations in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_mkdir
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds a move operation of the node @a src_relpath to @a dst_relpath to  * @a mtcc.  *  * Perform temporary allocations in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_move
parameter_list|(
specifier|const
name|char
modifier|*
name|src_relpath
parameter_list|,
specifier|const
name|char
modifier|*
name|dst_relpath
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds a propset operation for the property @a propname to @a propval  * (which can be NULL for a delete) on @a relpath to @a mtcc.  *  * If @a skip_checks is not FALSE Subversion defined properties are verified  * for correctness like svn_client_propset_remote()  *  * Perform temporary allocations in @a scratch_pool.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_propset
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
specifier|const
name|char
modifier|*
name|propname
parameter_list|,
specifier|const
name|svn_string_t
modifier|*
name|propval
parameter_list|,
name|svn_boolean_t
name|skip_checks
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Adds an update file operation for @a relpath to @a mtcc.  *  * The final version of the file is provided with @a src_stream. If @a  * src_checksum is provided it will be provided to the repository to verify  * the final result.  *  * If @a base_checksum is provided it will be used by the repository to verify  * if the base file matches this checksum.  *  * If @a base_stream is not NULL only the binary diff from @a base_stream to  * @a src_stream is written to the repository.  *  * Perform temporary allocations in @a scratch_pool.  *  * @note Callers should assume that the mtcc requires @a src_stream and @a  * base_stream to be valid until @a mtcc is committed.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_add_update_file
parameter_list|(
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|svn_stream_t
modifier|*
name|src_stream
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|src_checksum
parameter_list|,
name|svn_stream_t
modifier|*
name|base_stream
parameter_list|,
specifier|const
name|svn_checksum_t
modifier|*
name|base_checksum
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Obtains the kind of node at @a relpath in the current state of @a mtcc.  * This value might be from the cache (in case of modifications, copies)  * or fetched from the repository.  *  * If @a check_repository is TRUE, verify the node type with the repository at  * least once and cache the result for further checks.  *  * When a node does not exist this functions sets @a *kind to @c svn_node_node.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_check_path
parameter_list|(
name|svn_node_kind_t
modifier|*
name|kind
parameter_list|,
specifier|const
name|char
modifier|*
name|relpath
parameter_list|,
name|svn_boolean_t
name|check_repository
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** Commits all operations stored in @a mtcc as a new revision and destroys  * @a mtcc.  *  * @since New in 1.9.  */
name|svn_error_t
modifier|*
name|svn_client__mtcc_commit
parameter_list|(
name|apr_hash_t
modifier|*
name|revprop_table
parameter_list|,
name|svn_commit_callback2_t
name|commit_callback
parameter_list|,
name|void
modifier|*
name|commit_baton
parameter_list|,
name|svn_client__mtcc_t
modifier|*
name|mtcc
parameter_list|,
name|apr_pool_t
modifier|*
name|scratch_pool
parameter_list|)
function_decl|;
comment|/** @} end group: Multi Command Context related functions */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* SVN_CLIENT_MTCC_H */
end_comment

end_unit

