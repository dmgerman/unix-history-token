begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * This file is produced by the script /sys/kern/vnode_if.sh.  * Do not modify anything in here by hand.  *  *	@(#)vnode_if.h	7.4 (Berkeley) %G%  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_default_desc
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|vop_lookup_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_lookup_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_LOOKUP
parameter_list|(
name|dvp
parameter_list|,
name|vpp
parameter_list|,
name|cnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
block|{
name|struct
name|vop_lookup_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_lookup
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_lookup
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_create_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_create_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_CREATE
parameter_list|(
name|dvp
parameter_list|,
name|vpp
parameter_list|,
name|cnp
parameter_list|,
name|vap
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
block|{
name|struct
name|vop_create_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_create
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_create
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_mknod_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_mknod_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_MKNOD
parameter_list|(
name|dvp
parameter_list|,
name|vpp
parameter_list|,
name|cnp
parameter_list|,
name|vap
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
block|{
name|struct
name|vop_mknod_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_mknod
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_mknod
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_open_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_open_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_OPEN
parameter_list|(
name|vp
parameter_list|,
name|mode
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_open_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_open
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_mode
operator|=
name|mode
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_open
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_close_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_fflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_close_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_CLOSE
parameter_list|(
name|vp
parameter_list|,
name|fflag
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|fflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_close_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_close
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_fflag
operator|=
name|fflag
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_close
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_access_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_access_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_ACCESS
parameter_list|(
name|vp
parameter_list|,
name|mode
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_access_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_access
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_mode
operator|=
name|mode
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_access
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_getattr_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_getattr_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_GETATTR
parameter_list|(
name|vp
parameter_list|,
name|vap
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_getattr_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_getattr
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_getattr
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_setattr_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_setattr_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_SETATTR
parameter_list|(
name|vp
parameter_list|,
name|vap
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_setattr_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_setattr
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_setattr
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_read_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|a_uio
decl_stmt|;
name|int
name|a_ioflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_read_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_READ
parameter_list|(
name|vp
parameter_list|,
name|uio
parameter_list|,
name|ioflag
parameter_list|,
name|cred
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|uio
decl_stmt|;
name|int
name|ioflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
block|{
name|struct
name|vop_read_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_read
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_uio
operator|=
name|uio
expr_stmt|;
name|a
operator|.
name|a_ioflag
operator|=
name|ioflag
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_read
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_write_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|a_uio
decl_stmt|;
name|int
name|a_ioflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_write_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_WRITE
parameter_list|(
name|vp
parameter_list|,
name|uio
parameter_list|,
name|ioflag
parameter_list|,
name|cred
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|uio
decl_stmt|;
name|int
name|ioflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
block|{
name|struct
name|vop_write_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_write
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_uio
operator|=
name|uio
expr_stmt|;
name|a
operator|.
name|a_ioflag
operator|=
name|ioflag
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_write
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_ioctl_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_command
decl_stmt|;
name|caddr_t
name|a_data
decl_stmt|;
name|int
name|a_fflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_ioctl_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_IOCTL
parameter_list|(
name|vp
parameter_list|,
name|command
parameter_list|,
name|data
parameter_list|,
name|fflag
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|command
decl_stmt|;
name|caddr_t
name|data
decl_stmt|;
name|int
name|fflag
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_ioctl_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_ioctl
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_command
operator|=
name|command
expr_stmt|;
name|a
operator|.
name|a_data
operator|=
name|data
expr_stmt|;
name|a
operator|.
name|a_fflag
operator|=
name|fflag
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_ioctl
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_select_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_which
decl_stmt|;
name|int
name|a_fflags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_select_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_SELECT
parameter_list|(
name|vp
parameter_list|,
name|which
parameter_list|,
name|fflags
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|which
decl_stmt|;
name|int
name|fflags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_select_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_select
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_which
operator|=
name|which
expr_stmt|;
name|a
operator|.
name|a_fflags
operator|=
name|fflags
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_select
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_mmap_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|int
name|a_fflags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_mmap_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_MMAP
parameter_list|(
name|vp
parameter_list|,
name|fflags
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|int
name|fflags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_mmap_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_mmap
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_fflags
operator|=
name|fflags
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_mmap
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_fsync_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|int
name|a_waitfor
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_fsync_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_FSYNC
parameter_list|(
name|vp
parameter_list|,
name|cred
parameter_list|,
name|waitfor
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|int
name|waitfor
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_fsync_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_fsync
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_waitfor
operator|=
name|waitfor
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_fsync
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_seek_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|off_t
name|a_oldoff
decl_stmt|;
name|off_t
name|a_newoff
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_seek_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_SEEK
parameter_list|(
name|vp
parameter_list|,
name|oldoff
parameter_list|,
name|newoff
parameter_list|,
name|cred
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|off_t
name|oldoff
decl_stmt|;
name|off_t
name|newoff
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
block|{
name|struct
name|vop_seek_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_seek
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_oldoff
operator|=
name|oldoff
expr_stmt|;
name|a
operator|.
name|a_newoff
operator|=
name|newoff
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_seek
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_remove_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_remove_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_REMOVE
parameter_list|(
name|dvp
parameter_list|,
name|vp
parameter_list|,
name|cnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
block|{
name|struct
name|vop_remove_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_remove
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_remove
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_link_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_tdvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_link_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_LINK
parameter_list|(
name|vp
parameter_list|,
name|tdvp
parameter_list|,
name|cnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|tdvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
block|{
name|struct
name|vop_link_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_link
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_tdvp
operator|=
name|tdvp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_link
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_rename_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_fdvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_fvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_fcnp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_tdvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_tvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_tcnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_rename_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_RENAME
parameter_list|(
name|fdvp
parameter_list|,
name|fvp
parameter_list|,
name|fcnp
parameter_list|,
name|tdvp
parameter_list|,
name|tvp
parameter_list|,
name|tcnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|fdvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|fvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|fcnp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|tdvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|tvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|tcnp
decl_stmt|;
block|{
name|struct
name|vop_rename_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_rename
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_fdvp
operator|=
name|fdvp
expr_stmt|;
name|a
operator|.
name|a_fvp
operator|=
name|fvp
expr_stmt|;
name|a
operator|.
name|a_fcnp
operator|=
name|fcnp
expr_stmt|;
name|a
operator|.
name|a_tdvp
operator|=
name|tdvp
expr_stmt|;
name|a
operator|.
name|a_tvp
operator|=
name|tvp
expr_stmt|;
name|a
operator|.
name|a_tcnp
operator|=
name|tcnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|fdvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_rename
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_mkdir_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_mkdir_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_MKDIR
parameter_list|(
name|dvp
parameter_list|,
name|vpp
parameter_list|,
name|cnp
parameter_list|,
name|vap
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
block|{
name|struct
name|vop_mkdir_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_mkdir
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_mkdir
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_rmdir_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_rmdir_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_RMDIR
parameter_list|(
name|dvp
parameter_list|,
name|vp
parameter_list|,
name|cnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
block|{
name|struct
name|vop_rmdir_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_rmdir
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_rmdir
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_symlink_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|a_vap
decl_stmt|;
name|char
modifier|*
name|a_target
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_symlink_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_SYMLINK
parameter_list|(
name|dvp
parameter_list|,
name|vpp
parameter_list|,
name|cnp
parameter_list|,
name|vap
parameter_list|,
name|target
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
name|struct
name|vattr
modifier|*
name|vap
decl_stmt|;
name|char
modifier|*
name|target
decl_stmt|;
block|{
name|struct
name|vop_symlink_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_symlink
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
name|a
operator|.
name|a_vap
operator|=
name|vap
expr_stmt|;
name|a
operator|.
name|a_target
operator|=
name|target
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_symlink
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_readdir_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|a_uio
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_readdir_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_READDIR
parameter_list|(
name|vp
parameter_list|,
name|uio
parameter_list|,
name|cred
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|uio
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
block|{
name|struct
name|vop_readdir_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_readdir
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_uio
operator|=
name|uio
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_readdir
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_readlink_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|a_uio
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_readlink_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_READLINK
parameter_list|(
name|vp
parameter_list|,
name|uio
parameter_list|,
name|cred
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|uio
modifier|*
name|uio
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
block|{
name|struct
name|vop_readlink_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_readlink
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_uio
operator|=
name|uio
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_readlink
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_abortop_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_dvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|a_cnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_abortop_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_ABORTOP
parameter_list|(
name|dvp
parameter_list|,
name|cnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|dvp
decl_stmt|;
name|struct
name|componentname
modifier|*
name|cnp
decl_stmt|;
block|{
name|struct
name|vop_abortop_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_abortop
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_dvp
operator|=
name|dvp
expr_stmt|;
name|a
operator|.
name|a_cnp
operator|=
name|cnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|dvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_abortop
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_inactive_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_inactive_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_INACTIVE
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_inactive_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_inactive
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_inactive
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_reclaim_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_reclaim_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_RECLAIM
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_reclaim_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_reclaim
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_reclaim
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_lock_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_lock_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_LOCK
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_lock_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_lock
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_lock
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_unlock_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_unlock_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_UNLOCK
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_unlock_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_unlock
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_unlock
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_bmap_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|daddr_t
name|a_bn
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
name|daddr_t
modifier|*
name|a_bnp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_bmap_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_BMAP
parameter_list|(
name|vp
parameter_list|,
name|bn
parameter_list|,
name|vpp
parameter_list|,
name|bnp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|daddr_t
name|bn
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
name|daddr_t
modifier|*
name|bnp
decl_stmt|;
block|{
name|struct
name|vop_bmap_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_bmap
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_bn
operator|=
name|bn
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
name|a
operator|.
name|a_bnp
operator|=
name|bnp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_bmap
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_print_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_print_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_PRINT
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_print_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_print
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_print
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_islocked_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_islocked_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_ISLOCKED
parameter_list|(
name|vp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
block|{
name|struct
name|vop_islocked_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_islocked
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_islocked
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_advlock_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|caddr_t
name|a_id
decl_stmt|;
name|int
name|a_op
decl_stmt|;
name|struct
name|flock
modifier|*
name|a_fl
decl_stmt|;
name|int
name|a_flags
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_advlock_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_ADVLOCK
parameter_list|(
name|vp
parameter_list|,
name|id
parameter_list|,
name|op
parameter_list|,
name|fl
parameter_list|,
name|flags
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|caddr_t
name|id
decl_stmt|;
name|int
name|op
decl_stmt|;
name|struct
name|flock
modifier|*
name|fl
decl_stmt|;
name|int
name|flags
decl_stmt|;
block|{
name|struct
name|vop_advlock_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_advlock
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_id
operator|=
name|id
expr_stmt|;
name|a
operator|.
name|a_op
operator|=
name|op
expr_stmt|;
name|a
operator|.
name|a_fl
operator|=
name|fl
expr_stmt|;
name|a
operator|.
name|a_flags
operator|=
name|flags
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_advlock
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_blkatoff_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|off_t
name|a_offset
decl_stmt|;
name|char
modifier|*
modifier|*
name|a_res
decl_stmt|;
name|struct
name|buf
modifier|*
modifier|*
name|a_bpp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_blkatoff_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_BLKATOFF
parameter_list|(
name|vp
parameter_list|,
name|offset
parameter_list|,
name|res
parameter_list|,
name|bpp
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|off_t
name|offset
decl_stmt|;
name|char
modifier|*
modifier|*
name|res
decl_stmt|;
name|struct
name|buf
modifier|*
modifier|*
name|bpp
decl_stmt|;
block|{
name|struct
name|vop_blkatoff_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_blkatoff
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_offset
operator|=
name|offset
expr_stmt|;
name|a
operator|.
name|a_res
operator|=
name|res
expr_stmt|;
name|a
operator|.
name|a_bpp
operator|=
name|bpp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_blkatoff
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_valloc_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_pvp
decl_stmt|;
name|int
name|a_mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|a_vpp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_valloc_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_VALLOC
parameter_list|(
name|pvp
parameter_list|,
name|mode
parameter_list|,
name|cred
parameter_list|,
name|vpp
parameter_list|)
name|struct
name|vnode
modifier|*
name|pvp
decl_stmt|;
name|int
name|mode
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|vnode
modifier|*
modifier|*
name|vpp
decl_stmt|;
block|{
name|struct
name|vop_valloc_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_valloc
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_pvp
operator|=
name|pvp
expr_stmt|;
name|a
operator|.
name|a_mode
operator|=
name|mode
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_vpp
operator|=
name|vpp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|pvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_valloc
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_vfree_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_pvp
decl_stmt|;
name|ino_t
name|a_ino
decl_stmt|;
name|int
name|a_mode
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_vfree_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_VFREE
parameter_list|(
name|pvp
parameter_list|,
name|ino
parameter_list|,
name|mode
parameter_list|)
name|struct
name|vnode
modifier|*
name|pvp
decl_stmt|;
name|ino_t
name|ino
decl_stmt|;
name|int
name|mode
decl_stmt|;
block|{
name|struct
name|vop_vfree_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_vfree
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_pvp
operator|=
name|pvp
expr_stmt|;
name|a
operator|.
name|a_ino
operator|=
name|ino
expr_stmt|;
name|a
operator|.
name|a_mode
operator|=
name|mode
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|pvp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_vfree
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_truncate_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|off_t
name|a_length
decl_stmt|;
name|int
name|a_flags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|a_cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|a_p
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_truncate_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_TRUNCATE
parameter_list|(
name|vp
parameter_list|,
name|length
parameter_list|,
name|flags
parameter_list|,
name|cred
parameter_list|,
name|p
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|off_t
name|length
decl_stmt|;
name|int
name|flags
decl_stmt|;
name|struct
name|ucred
modifier|*
name|cred
decl_stmt|;
name|struct
name|proc
modifier|*
name|p
decl_stmt|;
block|{
name|struct
name|vop_truncate_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_truncate
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_length
operator|=
name|length
expr_stmt|;
name|a
operator|.
name|a_flags
operator|=
name|flags
expr_stmt|;
name|a
operator|.
name|a_cred
operator|=
name|cred
expr_stmt|;
name|a
operator|.
name|a_p
operator|=
name|p
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_truncate
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_update_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|vnode
modifier|*
name|a_vp
decl_stmt|;
name|struct
name|timeval
modifier|*
name|a_ta
decl_stmt|;
name|struct
name|timeval
modifier|*
name|a_tm
decl_stmt|;
name|int
name|a_waitfor
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_update_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_UPDATE
parameter_list|(
name|vp
parameter_list|,
name|ta
parameter_list|,
name|tm
parameter_list|,
name|waitfor
parameter_list|)
name|struct
name|vnode
modifier|*
name|vp
decl_stmt|;
name|struct
name|timeval
modifier|*
name|ta
decl_stmt|;
name|struct
name|timeval
modifier|*
name|tm
decl_stmt|;
name|int
name|waitfor
decl_stmt|;
block|{
name|struct
name|vop_update_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_update
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_vp
operator|=
name|vp
expr_stmt|;
name|a
operator|.
name|a_ta
operator|=
name|ta
expr_stmt|;
name|a
operator|.
name|a_tm
operator|=
name|tm
expr_stmt|;
name|a
operator|.
name|a_waitfor
operator|=
name|waitfor
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
name|vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_update
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_include
include|#
directive|include
file|<sys/buf.h>
end_include

begin_struct
struct|struct
name|vop_strategy_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|buf
modifier|*
name|a_bp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_strategy_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_STRATEGY
parameter_list|(
name|bp
parameter_list|)
name|struct
name|buf
modifier|*
name|bp
decl_stmt|;
block|{
name|struct
name|vop_strategy_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_strategy
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_bp
operator|=
name|bp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
operator|(
name|bp
operator|)
operator|->
name|b_vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_strategy
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

begin_struct
struct|struct
name|vop_bwrite_args
block|{
name|struct
name|vnodeop_desc
modifier|*
name|a_desc
decl_stmt|;
name|struct
name|buf
modifier|*
name|a_bp
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|vnodeop_desc
name|vop_bwrite_desc
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|int
name|VOP_BWRITE
parameter_list|(
name|bp
parameter_list|)
name|struct
name|buf
modifier|*
name|bp
decl_stmt|;
block|{
name|struct
name|vop_bwrite_args
name|a
decl_stmt|;
name|a
operator|.
name|a_desc
operator|=
name|VDESC
argument_list|(
name|vop_bwrite
argument_list|)
expr_stmt|;
name|a
operator|.
name|a_bp
operator|=
name|bp
expr_stmt|;
return|return
operator|(
name|VCALL
argument_list|(
operator|(
name|bp
operator|)
operator|->
name|b_vp
argument_list|,
name|VOFFSET
argument_list|(
name|vop_bwrite
argument_list|)
argument_list|,
operator|&
name|a
argument_list|)
operator|)
return|;
block|}
end_function

end_unit

