begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|ONES
end_ifndef

begin_define
define|#
directive|define
name|ONES
value|((_BS_word)(~0L))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DOIT_SOLID
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|DOIT
end_ifdef

begin_define
define|#
directive|define
name|DOIT_SOLID
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|)
value|DOIT(dst, src, (_BS_word)(~0))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|DOIT_SOLID
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|)
value|(dst) = (COMBINE(dst, src))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DOIT
end_ifndef

begin_define
define|#
directive|define
name|DOIT
parameter_list|(
name|dst
parameter_list|,
name|src
parameter_list|,
name|mask
parameter_list|)
define|\
value|(dst) = ((COMBINE(dst, src))& (mask)) | ((dst)& ~(mask))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|_BS_word
name|word0
decl_stmt|,
name|mask
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|shift0
decl_stmt|,
name|shift1
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|length
operator|==
literal|0
condition|)
goto|goto
name|done
goto|;
end_if

begin_expr_stmt
name|shift0
operator|=
name|srcbit
operator|-
name|dstbit
expr_stmt|;
end_expr_stmt

begin_comment
comment|/* First handle the case that only one destination word is touched. */
end_comment

begin_if
if|if
condition|(
name|length
operator|+
name|dstbit
operator|<=
name|_BS_BITS_PER_WORD
condition|)
block|{
name|_BS_word
name|mask
init|=
operator|(
name|ONES
name|_BS_LEFT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|length
argument_list|)
operator|)
name|_BS_RIGHT
name|dstbit
decl_stmt|;
name|_BS_word
name|word0
init|=
operator|*
name|psrc
operator|++
decl_stmt|;
if|if
condition|(
name|shift0
operator|<=
literal|0
condition|)
comment|/* dstbit>= srcbit */
block|{
name|word0
operator|=
name|word0
name|_BS_RIGHT
argument_list|(
operator|-
name|shift0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|word0
operator|=
name|word0
name|_BS_LEFT
name|shift0
expr_stmt|;
if|if
condition|(
name|length
operator|+
name|srcbit
operator|>
name|_BS_BITS_PER_WORD
condition|)
name|word0
operator|=
name|word0
operator||
operator|(
operator|*
name|psrc
name|_BS_RIGHT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|shift0
argument_list|)
operator|)
expr_stmt|;
block|}
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
name|word0
argument_list|,
name|mask
argument_list|)
expr_stmt|;
goto|goto
name|done
goto|;
block|}
end_if

begin_comment
comment|/* Next optimize the case that the source and destination are aligned. */
end_comment

begin_if
if|if
condition|(
name|shift0
operator|==
literal|0
condition|)
block|{
name|_BS_word
name|mask
decl_stmt|;
if|if
condition|(
name|psrc
operator|>
name|pdst
condition|)
block|{
if|if
condition|(
name|srcbit
condition|)
block|{
name|mask
operator|=
name|ONES
name|_BS_RIGHT
name|srcbit
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|pdst
operator|++
expr_stmt|;
name|psrc
operator|++
expr_stmt|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
operator|-
name|srcbit
expr_stmt|;
block|}
for|for
control|(
init|;
name|length
operator|>=
name|_BS_BITS_PER_WORD
condition|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
control|)
block|{
name|DOIT_SOLID
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|)
expr_stmt|;
name|pdst
operator|++
expr_stmt|;
name|psrc
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|length
condition|)
block|{
name|mask
operator|=
name|ONES
name|_BS_LEFT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|length
argument_list|)
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|psrc
operator|<
name|pdst
condition|)
block|{
name|_BS_size_t
name|span
init|=
name|srcbit
operator|+
name|length
decl_stmt|;
name|pdst
operator|+=
name|span
operator|/
operator|(
name|_BS_size_t
operator|)
name|_BS_BITS_PER_WORD
expr_stmt|;
name|psrc
operator|+=
name|span
operator|/
operator|(
name|_BS_size_t
operator|)
name|_BS_BITS_PER_WORD
expr_stmt|;
name|span
operator|%=
operator|(
name|_BS_size_t
operator|)
name|_BS_BITS_PER_WORD
expr_stmt|;
if|if
condition|(
name|span
condition|)
block|{
name|mask
operator|=
name|ONES
name|_BS_LEFT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|span
argument_list|)
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|length
operator|-=
name|span
expr_stmt|;
block|}
name|pdst
operator|--
expr_stmt|;
name|psrc
operator|--
expr_stmt|;
for|for
control|(
init|;
name|length
operator|>=
name|_BS_BITS_PER_WORD
condition|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
control|)
block|{
name|DOIT_SOLID
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|)
expr_stmt|;
name|pdst
operator|--
expr_stmt|;
name|psrc
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|srcbit
condition|)
block|{
name|mask
operator|=
name|ONES
name|_BS_RIGHT
name|srcbit
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|*
name|psrc
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* else if (psrc == pdst) --nothing to do--; */
goto|goto
name|done
goto|;
block|}
end_if

begin_comment
comment|/* Now we assume shift!=0, and more than on destination word is changed. */
end_comment

begin_if
if|if
condition|(
name|psrc
operator|>=
name|pdst
condition|)
comment|/* Do the updates in forward direction. */
block|{
name|_BS_word
name|word0
init|=
operator|*
name|psrc
operator|++
decl_stmt|;
name|_BS_word
name|mask
init|=
name|ONES
name|_BS_RIGHT
name|dstbit
decl_stmt|;
if|if
condition|(
name|shift0
operator|>
literal|0
condition|)
block|{
name|_BS_word
name|word1
init|=
operator|*
name|psrc
operator|++
decl_stmt|;
name|shift1
operator|=
name|_BS_BITS_PER_WORD
operator|-
name|shift0
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|(
name|word0
name|_BS_LEFT
name|shift0
operator|)
operator||
operator|(
name|word1
name|_BS_RIGHT
name|shift1
operator|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|word0
operator|=
name|word1
expr_stmt|;
block|}
else|else
comment|/* dstbit> srcbit */
block|{
name|shift1
operator|=
operator|-
name|shift0
expr_stmt|;
name|shift0
operator|+=
name|_BS_BITS_PER_WORD
expr_stmt|;
name|DOIT
argument_list|(
argument|*pdst
argument_list|,
argument|word0 _BS_RIGHT shift1
argument_list|,
argument|mask
argument_list|)
empty_stmt|;
block|}
name|pdst
operator|++
expr_stmt|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
operator|-
name|dstbit
expr_stmt|;
for|for
control|(
init|;
name|length
operator|>=
name|_BS_BITS_PER_WORD
condition|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
control|)
block|{
specifier|register
name|_BS_word
name|word1
init|=
operator|*
name|psrc
operator|++
decl_stmt|;
name|DOIT_SOLID
argument_list|(
operator|*
name|pdst
argument_list|,
operator|(
name|word0
name|_BS_LEFT
name|shift0
operator|)
operator||
operator|(
name|word1
name|_BS_RIGHT
name|shift1
operator|)
argument_list|)
expr_stmt|;
name|pdst
operator|++
expr_stmt|;
name|word0
operator|=
name|word1
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|_BS_size_t
name|mask
init|=
name|ONES
name|_BS_LEFT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|length
argument_list|)
decl_stmt|;
name|word0
operator|=
name|word0
name|_BS_LEFT
name|shift0
expr_stmt|;
if|if
condition|(
name|length
operator|>
name|shift1
condition|)
name|word0
operator|=
name|word0
operator||
operator|(
operator|*
name|psrc
name|_BS_RIGHT
name|shift1
operator|)
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
name|word0
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|/* Do the updates in backward direction. */
block|{
name|_BS_word
name|word0
decl_stmt|;
comment|/* Make (psrc, srcbit) and (pdst, dstbit) point to *last* bit. */
name|psrc
operator|+=
operator|(
name|srcbit
operator|+
name|length
operator|-
literal|1
operator|)
operator|/
name|_BS_BITS_PER_WORD
expr_stmt|;
name|srcbit
operator|=
operator|(
name|srcbit
operator|+
name|length
operator|-
literal|1
operator|)
operator|%
name|_BS_BITS_PER_WORD
expr_stmt|;
name|pdst
operator|+=
operator|(
name|dstbit
operator|+
name|length
operator|-
literal|1
operator|)
operator|/
name|_BS_BITS_PER_WORD
expr_stmt|;
name|dstbit
operator|=
operator|(
name|dstbit
operator|+
name|length
operator|-
literal|1
operator|)
operator|%
name|_BS_BITS_PER_WORD
expr_stmt|;
name|shift0
operator|=
name|srcbit
operator|-
name|dstbit
expr_stmt|;
name|word0
operator|=
operator|*
name|psrc
operator|--
expr_stmt|;
name|mask
operator|=
name|ONES
name|_BS_LEFT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
literal|1
operator|-
name|dstbit
argument_list|)
expr_stmt|;
if|if
condition|(
name|shift0
operator|<
literal|0
condition|)
block|{
name|_BS_word
name|word1
init|=
operator|*
name|psrc
operator|--
decl_stmt|;
name|shift1
operator|=
operator|-
name|shift0
expr_stmt|;
name|shift0
operator|+=
name|_BS_BITS_PER_WORD
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
operator|(
name|word0
name|_BS_RIGHT
name|shift1
operator|)
operator||
operator|(
name|word1
name|_BS_LEFT
name|shift0
operator|)
argument_list|,
name|mask
argument_list|)
expr_stmt|;
name|word0
operator|=
name|word1
expr_stmt|;
block|}
else|else
block|{
name|shift1
operator|=
name|_BS_BITS_PER_WORD
operator|-
name|shift0
expr_stmt|;
name|DOIT
argument_list|(
argument|*pdst
argument_list|,
argument|word0 _BS_LEFT shift0
argument_list|,
argument|mask
argument_list|)
empty_stmt|;
block|}
name|pdst
operator|--
expr_stmt|;
name|length
operator|-=
name|dstbit
operator|+
literal|1
expr_stmt|;
for|for
control|(
init|;
name|length
operator|>=
name|_BS_BITS_PER_WORD
condition|;
name|length
operator|-=
name|_BS_BITS_PER_WORD
control|)
block|{
specifier|register
name|_BS_word
name|word1
init|=
operator|*
name|psrc
operator|--
decl_stmt|;
name|DOIT_SOLID
argument_list|(
operator|*
name|pdst
argument_list|,
operator|(
name|word0
name|_BS_RIGHT
name|shift1
operator|)
operator||
operator|(
name|word1
name|_BS_LEFT
name|shift0
operator|)
argument_list|)
expr_stmt|;
name|pdst
operator|--
expr_stmt|;
name|word0
operator|=
name|word1
expr_stmt|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|_BS_size_t
name|mask
init|=
name|ONES
name|_BS_RIGHT
argument_list|(
name|_BS_BITS_PER_WORD
operator|-
name|length
argument_list|)
decl_stmt|;
name|word0
operator|=
name|word0
name|_BS_RIGHT
name|shift1
expr_stmt|;
if|if
condition|(
name|length
operator|>
name|shift0
condition|)
name|word0
operator|=
name|word0
operator||
operator|(
operator|*
name|psrc
name|_BS_LEFT
name|shift0
operator|)
expr_stmt|;
name|DOIT
argument_list|(
operator|*
name|pdst
argument_list|,
name|word0
argument_list|,
name|mask
argument_list|)
expr_stmt|;
block|}
block|}
end_if

begin_label
name|done
label|:
end_label

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

