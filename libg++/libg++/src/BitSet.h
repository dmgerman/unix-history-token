begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BitSet_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_BitSet_h
value|1
end_define

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<bitprims.h>
end_include

begin_undef
undef|#
directive|undef
name|OK
end_undef

begin_define
define|#
directive|define
name|BITSETBITS
value|(sizeof(_BS_word) * CHAR_BIT)
end_define

begin_struct
struct|struct
name|BitSetRep
block|{
name|unsigned
name|short
name|len
decl_stmt|;
comment|// number of _BS_word in s
name|unsigned
name|short
name|sz
decl_stmt|;
comment|// allocated slots
name|unsigned
name|short
name|virt
decl_stmt|;
comment|// virtual 0 or 1
name|_BS_word
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// bits start here
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetalloc
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|_BS_word
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetcopy
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|BitSetRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetresize
parameter_list|(
name|BitSetRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetop
parameter_list|(
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
name|BitSetRep
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitSetRep
modifier|*
name|BitSetcmpl
parameter_list|(
specifier|const
name|BitSetRep
modifier|*
parameter_list|,
name|BitSetRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|BitSetRep
name|_nilBitSetRep
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitSet
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitSetBit
block|{
name|protected
label|:
name|BitSet
modifier|*
name|src
decl_stmt|;
name|unsigned
name|long
name|pos
decl_stmt|;
name|public
label|:
name|BitSetBit
argument_list|(
argument|BitSet* v
argument_list|,
argument|int p
argument_list|)
empty_stmt|;
name|BitSetBit
argument_list|(
specifier|const
name|BitSetBit
operator|&
name|b
argument_list|)
expr_stmt|;
operator|~
name|BitSetBit
argument_list|()
expr_stmt|;
name|operator
name|int
argument_list|()
specifier|const
expr_stmt|;
name|int
name|operator
init|=
operator|(
name|int
name|b
operator|)
decl_stmt|;
name|int
name|operator
init|=
operator|(
specifier|const
name|BitSetBit
operator|&
name|b
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BitSet
block|{
name|protected
label|:
name|BitSetRep
modifier|*
name|rep
decl_stmt|;
enum|enum
name|BS_op
block|{
name|BS_and
init|=
operator|(
name|int
operator|)
literal|'&'
block|,
name|BS_or
init|=
operator|(
name|int
operator|)
literal|'|'
block|,
name|BS_xor
init|=
operator|(
name|int
operator|)
literal|'^'
block|,
name|BS_diff
init|=
operator|(
name|int
operator|)
literal|'-'
block|,
name|BS_inv
init|=
operator|(
name|int
operator|)
literal|'~'
block|}
enum|;
name|BitSet
argument_list|(
argument|const BitSet& x
argument_list|,
argument|const BitSet& y
argument_list|,
argument|enum BS_op op
argument_list|)
block|{
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|NULL
argument_list|,
operator|(
name|char
operator|)
name|op
argument_list|)
expr_stmt|;
block|}
name|BitSet
argument_list|(
argument|const BitSet& x
argument_list|,
argument|enum BS_op
comment|/* op */
argument_list|)
block|{
name|rep
operator|=
name|BitSetcmpl
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
name|public
label|:
comment|// constructors
name|BitSet
argument_list|()
expr_stmt|;
name|BitSet
argument_list|(
specifier|const
name|BitSet
operator|&
argument_list|)
expr_stmt|;
operator|~
name|BitSet
argument_list|()
expr_stmt|;
name|BitSet
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
decl_stmt|;
comment|// equality& subset tests
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|int
name|lcompare
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|)
function_decl|;
comment|// operations on self
name|BitSet
operator|&
name|operator
operator||=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|BitSet
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|BitSet
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|BitSet
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
name|void
name|complement
parameter_list|()
function_decl|;
comment|// functional operators
name|friend
name|BitSet
name|operator
function_decl|& (const
name|BitSet
function_decl|& x
operator|,
function_decl|const BitSet& y
block|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|friend
name|BitSet
name|operator
operator||
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|friend
name|BitSet
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|friend
name|BitSet
name|operator
operator|-
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|BitSet
name|operator
operator|~
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// individual bit manipulation
end_comment

begin_function_decl
name|void
name|set
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// set all
end_comment

begin_function_decl
name|void
name|clear
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|// clear all
end_comment

begin_function_decl
name|void
name|invert
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|invert
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|test
argument_list|(
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|test
argument_list|(
name|int
name|from
argument_list|,
name|int
name|to
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function_decl
name|BitSetBit
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// iterators
end_comment

begin_decl_stmt
name|int
name|first
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|last
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|next
argument_list|(
name|int
name|pos
argument_list|,
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|prev
argument_list|(
name|int
name|pos
argument_list|,
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|previous
argument_list|(
name|int
name|pos
argument_list|,
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
comment|/* Obsolete synonym */
block|{
return|return
name|prev
argument_list|(
name|pos
argument_list|,
name|b
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// status
end_comment

begin_expr_stmt
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|virtual_bit
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|count
argument_list|(
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|// convertors& IO
end_comment

begin_function_decl
name|friend
name|BitSet
name|atoBitSet
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|star
init|=
literal|'*'
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// BitSettoa is deprecated; do not use in new programs.
end_comment

begin_function_decl
name|friend
specifier|const
name|char
modifier|*
name|BitSettoa
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|star
init|=
literal|'*'
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|BitSet
name|shorttoBitSet
parameter_list|(
name|unsigned
name|short
name|w
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|BitSet
name|longtoBitSet
parameter_list|(
name|unsigned
name|long
name|w
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|BitSet
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|printon
argument_list|(
name|ostream
operator|&
name|s
argument_list|,
name|char
name|f
operator|=
literal|'0'
argument_list|,
name|char
name|t
operator|=
literal|'1'
argument_list|,
name|char
name|star
operator|=
literal|'*'
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__STRICT_ANSI__
end_ifndef

begin_comment
comment|// procedural versions of operators
end_comment

begin_comment
comment|// The first three of these are incompatible with ANSI C++ digraphs.
end_comment

begin_comment
comment|// In any case, it's not a great interface.
end_comment

begin_function_decl
name|friend
name|void
name|and
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|void
name|or
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|void
name|xor
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|void
name|diff
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|friend
name|void
name|complement
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// misc
end_comment

begin_decl_stmt
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|BitSet
name|BitSetTmp
typedef|;
end_typedef

begin_comment
comment|// These are inlined regardless of optimization
end_comment

begin_function
specifier|inline
name|int
name|BitSet_index
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|l
argument_list|)
operator|/
name|BITSETBITS
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|BitSet_pos
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
name|l
operator|&
operator|(
name|BITSETBITS
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|BitSet
operator|::
name|BitSet
argument_list|()
operator|:
name|rep
argument_list|(
argument|&_nilBitSetRep
argument_list|)
block|{}
specifier|inline
name|BitSet
operator|::
name|BitSet
argument_list|(
specifier|const
name|BitSet
operator|&
name|x
argument_list|)
operator|:
name|rep
argument_list|(
argument|BitSetcopy(
literal|0
argument|, x.rep)
argument_list|)
block|{}
specifier|inline
name|BitSet
operator|::
operator|~
name|BitSet
argument_list|()
block|{
if|if
condition|(
name|rep
operator|!=
operator|&
name|_nilBitSetRep
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
operator|&
name|BitSet
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetcopy
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<=
name|x
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__STRICT_ANSI__
end_ifndef

begin_function
specifier|inline
name|void
name|and
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'&'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|or
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|xor
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|diff
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|complement
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
name|BitSet
modifier|&
name|r
parameter_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|BitSetcmpl
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|inline
name|BitSet
name|operator
function|& (const
name|BitSet
function|& x
operator|,
function|const BitSet& y
end_function

begin_block
unit|)
block|{
return|return
name|BitSet
operator|::
name|BitSet
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|BitSet
operator|::
name|BS_and
argument_list|)
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator||
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|BitSet
operator|::
name|BitSet
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|BitSet
operator|::
name|BS_or
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|BitSet
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitSet
modifier|&
name|x
parameter_list|,
specifier|const
name|BitSet
modifier|&
name|y
parameter_list|)
block|{
return|return
name|BitSet
operator|::
name|BitSet
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|BitSet
operator|::
name|BS_xor
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator|-
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|,
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
return|return
name|BitSet
operator|::
name|BitSet
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|BitSet
operator|::
name|BS_diff
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
name|operator
operator|~
operator|(
specifier|const
name|BitSet
operator|&
name|x
operator|)
block|{
return|return
name|BitSet
operator|::
name|BitSet
argument_list|(
name|x
argument_list|,
name|BitSet
operator|::
name|BS_inv
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
operator|&
name|BitSet
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetop
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|,
literal|'&'
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
operator|&
name|BitSet
operator|::
name|operator
operator||=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetop
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|,
literal|'|'
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
operator|&
name|BitSet
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetop
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|,
literal|'^'
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSet
operator|&
name|BitSet
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|BitSet
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BitSetop
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|,
literal|'-'
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|BitSet
operator|::
name|complement
argument_list|()
block|{
name|rep
operator|=
name|BitSetcmpl
argument_list|(
name|rep
argument_list|,
name|rep
argument_list|)
block|; }
specifier|inline
name|int
name|BitSet
operator|::
name|virtual_bit
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|virt
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSet
operator|::
name|first
argument_list|(
argument|int b
argument_list|)
specifier|const
block|{
return|return
name|next
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSet
operator|::
name|test
argument_list|(
argument|int p
argument_list|)
specifier|const
block|{
if|if
condition|(
name|p
operator|<
literal|0
condition|)
name|error
argument_list|(
literal|"Illegal bit index"
argument_list|)
expr_stmt|;
name|int
name|index
operator|=
name|BitSet_index
argument_list|(
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|index
operator|>=
name|rep
operator|->
name|len
operator|)
condition|?
name|rep
operator|->
name|virt
else|:
operator|(
operator|(
name|rep
operator|->
name|s
index|[
name|index
index|]
operator|&
operator|(
operator|(
name|_BS_word
operator|)
literal|1
operator|<<
name|BitSet_pos
argument_list|(
name|p
argument_list|)
operator|)
operator|)
operator|!=
literal|0
operator|)
return|;
end_return

begin_expr_stmt
unit|}   inline
name|void
name|BitSet
operator|::
name|set
argument_list|()
block|{
name|rep
operator|=
name|BitSetalloc
argument_list|(
name|rep
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
block|; }
specifier|inline
name|BitSetBit
operator|::
name|BitSetBit
argument_list|(
specifier|const
name|BitSetBit
operator|&
name|b
argument_list|)
operator|:
name|src
argument_list|(
name|b
operator|.
name|src
argument_list|)
operator|,
name|pos
argument_list|(
argument|b.pos
argument_list|)
block|{}
specifier|inline
name|BitSetBit
operator|::
name|BitSetBit
argument_list|(
argument|BitSet* v
argument_list|,
argument|int p
argument_list|)
block|{
name|src
operator|=
name|v
block|;
name|pos
operator|=
name|p
block|; }
specifier|inline
name|BitSetBit
operator|::
operator|~
name|BitSetBit
argument_list|()
block|{}
specifier|inline
name|BitSetBit
operator|::
name|operator
name|int
argument_list|()
specifier|const
block|{
return|return
name|src
operator|->
name|test
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSetBit
operator|::
name|operator
operator|=
operator|(
name|int
name|b
operator|)
block|{
if|if
condition|(
name|b
condition|)
name|src
operator|->
name|set
argument_list|(
name|pos
argument_list|)
expr_stmt|;
else|else
name|src
operator|->
name|clear
argument_list|(
name|pos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|b
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|BitSetBit
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitSetBit
operator|&
name|b
operator|)
block|{
name|int
name|i
operator|=
operator|(
name|int
operator|)
name|b
block|;
operator|*
name|this
operator|=
name|i
block|;
return|return
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitSetBit
name|BitSet
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
name|error
argument_list|(
literal|"illegal bit index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|BitSetBit
argument_list|(
name|this
argument_list|,
name|i
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

