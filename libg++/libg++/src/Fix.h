begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|// Fix.h : variable length fixed point data type
end_comment

begin_comment
comment|//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Fix_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Fix_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<Integer.h>
end_include

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_decl_stmt
name|class
name|Fix
block|{
struct|struct
name|Rep
comment|// internal Fix representation
block|{
name|_G_uint16_t
name|len
decl_stmt|;
comment|// length in bits
name|_G_uint16_t
name|siz
decl_stmt|;
comment|// allocated storage
name|_G_int16_t
name|ref
decl_stmt|;
comment|// reference count
name|_G_uint16_t
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// start of ushort array represention
block|}
struct|;
name|public
label|:
typedef|typedef
name|void
function_decl|(
modifier|*
name|PEH
function_decl|)
parameter_list|(
name|Rep
modifier|*
parameter_list|)
function_decl|;
name|private
label|:
name|Rep
modifier|*
name|rep
decl_stmt|;
name|Fix
argument_list|(
name|Rep
operator|*
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
specifier|const
name|Rep
operator|*
argument_list|)
expr_stmt|;
name|void
name|unique
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|_G_uint16_t
name|min_length
init|=
literal|1
decl_stmt|;
specifier|static
specifier|const
name|_G_uint16_t
name|max_length
init|=
literal|65535
decl_stmt|;
specifier|static
specifier|const
name|double
name|min_value
init|=
operator|-
literal|1.0
decl_stmt|;
specifier|static
specifier|const
name|double
name|max_value
init|=
literal|1.0
decl_stmt|;
specifier|static
name|_G_uint16_t
name|default_length
decl_stmt|;
specifier|static
name|int
name|default_print_width
decl_stmt|;
specifier|static
name|Rep
name|Rep_0
decl_stmt|;
specifier|static
name|Rep
name|Rep_m1
decl_stmt|;
specifier|static
name|Rep
name|Rep_quotient_bump
decl_stmt|;
comment|// internal class functions
specifier|static
name|void
name|mask
parameter_list|(
name|Rep
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|int
name|compare
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
specifier|const
name|Rep
modifier|*
init|=
operator|&
name|Rep_0
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|new_Fix
parameter_list|(
name|_G_uint16_t
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|new_Fix
parameter_list|(
name|_G_uint16_t
parameter_list|,
specifier|const
name|Rep
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|new_Fix
parameter_list|(
name|_G_uint16_t
parameter_list|,
name|double
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|copy
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|negate
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|add
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|subtract
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|multiply
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|multiply
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|divide
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
specifier|const
name|Rep
modifier|*
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|Rep
modifier|*
name|shift
parameter_list|(
specifier|const
name|Rep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|Rep
modifier|*
init|=
name|NULL
parameter_list|)
function_decl|;
specifier|static
name|one_arg_error_handler_t
name|error_handler
decl_stmt|;
specifier|static
name|one_arg_error_handler_t
name|range_error_handler
decl_stmt|;
specifier|static
name|PEH
name|overflow_handler
decl_stmt|;
name|public
label|:
name|Fix
argument_list|()
expr_stmt|;
name|Fix
argument_list|(
specifier|const
name|Fix
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|double
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|_G_uint16_t
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
specifier|const
name|Fix
operator|&
argument_list|)
expr_stmt|;
name|Fix
argument_list|(
name|int
argument_list|,
name|double
argument_list|)
expr_stmt|;
operator|~
name|Fix
argument_list|()
expr_stmt|;
name|Fix
name|operator
init|=
operator|(
specifier|const
name|Fix
operator|&
operator|)
decl_stmt|;
name|Fix
name|operator
init|=
operator|(
name|double
operator|)
decl_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
operator|&
name|operator
operator|+
operator|(
operator|)
expr_stmt|;
name|Fix
name|operator
operator|-
operator|(
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|+
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|-
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|,
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
operator|/
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
modifier|*
parameter_list|(
name|int
parameter_list|,
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Fix
name|operator
operator|%
operator|(
specifier|const
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|<<
operator|(
specifier|const
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
name|friend
name|Fix
name|operator
operator|>>
operator|(
specifier|const
name|Fix
operator|&
operator|,
name|int
operator|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
name|friend
name|Fix
name|operator
operator|<
condition|?
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// min
name|friend
name|Fix
name|operator
operator|>
condition|?
operator|(
specifier|const
name|Fix
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// max
endif|#
directive|endif
name|Fix
name|operator
operator|+=
operator|(
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|-=
operator|(
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|*=
operator|(
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|/=
operator|(
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
name|Fix
name|operator
operator|*=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|%=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|<<=
operator|(
name|int
operator|)
expr_stmt|;
name|Fix
name|operator
operator|>>=
operator|(
name|int
operator|)
expr_stmt|;
name|friend
name|char
modifier|*
name|Ftoa
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|,
name|int
name|width
init|=
name|default_print_width
parameter_list|)
function_decl|;
name|void
name|printon
argument_list|(
name|ostream
operator|&
argument_list|,
name|int
name|width
operator|=
name|default_print_width
argument_list|)
decl|const
decl_stmt|;
name|friend
name|Fix
name|atoF
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
name|len
init|=
name|default_length
parameter_list|)
function_decl|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
operator|,
name|Fix
operator|&
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
operator|,
specifier|const
name|Fix
operator|&
operator|)
expr_stmt|;
comment|// built-in functions
name|friend
name|Fix
name|abs
parameter_list|(
name|Fix
parameter_list|)
function_decl|;
comment|// absolute value
name|friend
name|int
name|sgn
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// -1, 0, +1
name|friend
name|Integer
name|mantissa
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// integer representation
name|friend
name|double
name|value
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// double value
name|friend
name|int
name|length
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// field length
name|friend
name|void
name|show
parameter_list|(
specifier|const
name|Fix
modifier|&
parameter_list|)
function_decl|;
comment|// show contents
comment|// error handlers
specifier|static
name|void
name|error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|// error handler
specifier|static
name|void
name|range_error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
comment|// range error handler
specifier|static
name|one_arg_error_handler_t
name|set_error_handler
parameter_list|(
name|one_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
specifier|static
name|one_arg_error_handler_t
name|set_range_error_handler
parameter_list|(
name|one_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
specifier|static
name|void
name|default_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|void
name|default_range_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|// non-operator versions for user
name|friend
name|void
name|negate
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|add
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|subtract
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|multiply
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|divide
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|q
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|shift
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
function_decl|;
comment|// overflow handlers
specifier|static
name|void
name|overflow_saturate
argument_list|(
name|Fix
operator|::
name|Rep
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|overflow_wrap
argument_list|(
name|Fix
operator|::
name|Rep
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|overflow_warning_saturate
argument_list|(
name|Fix
operator|::
name|Rep
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|overflow_warning
argument_list|(
name|Fix
operator|::
name|Rep
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|overflow_error
argument_list|(
name|Fix
operator|::
name|Rep
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|PEH
name|set_overflow_handler
parameter_list|(
name|PEH
parameter_list|)
function_decl|;
specifier|static
name|int
name|set_default_length
parameter_list|(
name|int
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// function definitions
end_comment

begin_expr_stmt
specifier|inline
name|void
name|Fix
operator|::
name|unique
argument_list|()
block|{
if|if
condition|(
name|rep
operator|->
name|ref
operator|>
literal|1
condition|)
block|{
name|rep
operator|->
name|ref
operator|--
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
name|rep
operator|->
name|len
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
name|Fix
operator|::
name|mask
argument_list|(
argument|Fix::Rep* x
argument_list|)
block|{
name|int
name|n
operator|=
name|x
operator|->
name|len
operator|&
literal|0x0f
block|;
if|if
condition|(
name|n
condition|)
name|x
operator|->
name|s
index|[
name|x
operator|->
name|siz
operator|-
literal|1
index|]
operator|&=
literal|0xffff0000
operator|>>
name|n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
operator|::
name|Rep
operator|*
name|Fix
operator|::
name|copy
argument_list|(
argument|const Fix::Rep* from
argument_list|,
argument|Fix::Rep* to
argument_list|)
block|{
name|_G_uint16_t
operator|*
name|ts
operator|=
name|to
operator|->
name|s
block|;
specifier|const
name|_G_uint16_t
operator|*
name|fs
operator|=
name|from
operator|->
name|s
block|;
name|int
name|ilim
operator|=
name|to
operator|->
name|siz
operator|<
name|from
operator|->
name|siz
condition|?
name|to
operator|->
name|siz
else|:
name|from
operator|->
name|siz
block|;
name|int
name|i
block|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ilim
condition|;
name|i
operator|++
control|)
operator|*
name|ts
operator|++
operator|=
operator|*
name|fs
operator|++
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
name|i
operator|<
name|to
operator|->
name|siz
condition|;
name|i
operator|++
control|)
operator|*
name|ts
operator|++
operator|=
literal|0
expr_stmt|;
end_for

begin_expr_stmt
name|mask
argument_list|(
name|to
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|to
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|Rep* f
argument_list|)
block|{
name|rep
operator|=
name|f
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|()
block|{
name|rep
operator|=
name|new_Fix
argument_list|(
name|default_length
argument_list|)
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|min_length
operator|||
name|len
operator|>
name|max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|_G_uint16_t
operator|)
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|_G_uint16_t len
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|min_length
operator|||
name|len
operator|>
name|max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|double d
argument_list|)
block|{
name|rep
operator|=
name|new_Fix
argument_list|(
name|default_length
argument_list|,
name|d
argument_list|)
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|const Fix&  y
argument_list|)
block|{
name|rep
operator|=
name|y
operator|.
name|rep
block|;
name|rep
operator|->
name|ref
operator|++
block|; }
specifier|inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|const Fix&  y
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|Fix
operator|::
name|min_length
operator|||
name|len
operator|>
name|Fix
operator|::
name|max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|_G_uint16_t
operator|)
name|len
argument_list|,
name|y
operator|.
name|rep
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|const Rep* fr
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|Fix
operator|::
name|min_length
operator|||
name|len
operator|>
name|Fix
operator|::
name|max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|_G_uint16_t
operator|)
name|len
argument_list|,
name|fr
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
name|Fix
argument_list|(
argument|int len
argument_list|,
argument|double d
argument_list|)
block|{
if|if
condition|(
name|len
operator|<
name|Fix
operator|::
name|min_length
operator|||
name|len
operator|>
name|Fix
operator|::
name|max_length
condition|)
name|error
argument_list|(
literal|"illegal length in declaration"
argument_list|)
expr_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
operator|(
name|_G_uint16_t
operator|)
name|len
argument_list|,
name|d
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|Fix
operator|::
operator|~
name|Fix
argument_list|()
block|{
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|rep
operator|->
name|len
operator|==
name|y
operator|.
name|rep
operator|->
name|len
condition|)
block|{
operator|++
name|y
operator|.
name|rep
operator|->
name|ref
expr_stmt|;
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
name|rep
operator|=
name|y
operator|.
name|rep
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|unique
argument_list|()
expr_stmt|;
name|copy
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
expr_stmt|;
block|}
end_else

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix
name|Fix
operator|::
name|operator
operator|=
operator|(
name|double
name|d
operator|)
block|{
name|int
name|oldlen
operator|=
name|rep
operator|->
name|len
block|;
if|if
condition|(
operator|--
name|rep
operator|->
name|ref
operator|<=
literal|0
condition|)
name|delete
name|rep
decl_stmt|;
name|rep
operator|=
name|new_Fix
argument_list|(
name|oldlen
argument_list|,
name|d
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
return|return
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
operator|&
name|Fix
operator|::
name|operator
operator|+
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|-
operator|(
operator|)
block|{
name|Rep
operator|*
name|r
operator|=
name|negate
argument_list|(
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|+
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|-
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|subtract
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix
name|operator
modifier|*
parameter_list|(
name|int
name|y
parameter_list|,
specifier|const
name|Fix
modifier|&
name|x
parameter_list|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|/
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
name|Fix
operator|::
name|divide
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|add
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|subtract
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|multiply
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|*=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|multiply
argument_list|(
name|rep
argument_list|,
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|divide
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|%
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|Fix
name|r
argument_list|(
operator|(
name|int
operator|)
name|x
operator|.
name|rep
operator|->
name|len
operator|+
name|y
argument_list|,
name|x
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|<<
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|rep
operator|=
name|Fix
operator|::
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
block|;
return|return
name|rep
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|>>
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|rep
operator|=
name|Fix
operator|::
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
operator|-
name|y
argument_list|)
block|;
return|return
name|rep
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|<<=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|shift
argument_list|(
name|rep
argument_list|,
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|Fix
operator|::
name|operator
operator|>>=
operator|(
name|int
name|y
operator|)
block|{
name|unique
argument_list|()
block|;
name|Fix
operator|::
name|shift
argument_list|(
name|rep
argument_list|,
operator|-
name|y
argument_list|,
name|rep
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__STRICT_ANSI__
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|<
condition|?
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<=
literal|0
condition|)
return|return
name|x
return|;
else|else
return|return
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix
name|operator
operator|>
condition|?
operator|(
specifier|const
name|Fix
operator|&
name|x
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>=
literal|0
condition|)
return|return
name|x
return|;
else|else
return|return
name|y
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|inline
name|Fix
name|abs
parameter_list|(
name|Fix
name|x
parameter_list|)
block|{
name|Fix
operator|::
name|Rep
operator|*
name|r
operator|=
operator|(
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|)
operator|>=
literal|0
condition|?
name|Fix
operator|::
name|new_Fix
argument_list|(
name|x
operator|.
name|rep
operator|->
name|len
argument_list|,
name|x
operator|.
name|rep
argument_list|)
else|:
name|Fix
operator|::
name|negate
argument_list|(
name|x
operator|.
name|rep
argument_list|)
operator|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|sgn
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|)
block|{
name|int
name|a
init|=
name|Fix
operator|::
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|)
decl_stmt|;
return|return
name|a
operator|==
literal|0
condition|?
literal|0
else|:
operator|(
name|a
operator|>
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|length
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|)
block|{
return|return
name|x
operator|.
name|rep
operator|->
name|len
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|Fix
operator|&
name|y
operator|)
block|{
if|if
condition|(
name|s
operator|.
name|opfx
argument_list|()
condition|)
name|y
operator|.
name|printon
argument_list|(
name|s
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|s
return|;
end_return

begin_function
unit|}  inline
name|void
name|negate
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|negate
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|add
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|subtract
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|subtract
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|multiply
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|divide
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
specifier|const
name|Fix
modifier|&
name|y
parameter_list|,
name|Fix
modifier|&
name|q
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|divide
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|q
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|shift
parameter_list|(
specifier|const
name|Fix
modifier|&
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|Fix
modifier|&
name|r
parameter_list|)
block|{
name|Fix
operator|::
name|shift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|r
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

end_unit

