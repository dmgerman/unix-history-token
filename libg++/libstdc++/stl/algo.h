begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ALGO_H
end_ifndef

begin_define
define|#
directive|define
name|ALGO_H
end_define

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<pair.h>
end_include

begin_include
include|#
directive|include
file|<iterator.h>
end_include

begin_include
include|#
directive|include
file|<algobase.h>
end_include

begin_include
include|#
directive|include
file|<heap.h>
end_include

begin_include
include|#
directive|include
file|<tempbuf.h>
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|__median
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|,
argument|const T& c
argument_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
if|if
condition|(
name|b
operator|<
name|c
condition|)
return|return
name|b
return|;
elseif|else
if|if
condition|(
name|a
operator|<
name|c
condition|)
return|return
name|c
return|;
else|else
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|a
operator|<
name|c
condition|)
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|b
operator|<
name|c
condition|)
return|return
name|c
return|;
else|else
return|return
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|__median
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|,
argument|const T& c
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
if|if
condition|(
name|comp
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
condition|)
return|return
name|b
return|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
condition|)
return|return
name|c
return|;
else|else
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
name|a
argument_list|,
name|c
argument_list|)
condition|)
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
name|b
argument_list|,
name|c
argument_list|)
condition|)
return|return
name|c
return|;
else|else
return|return
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Function
operator|>
name|Function
name|for_each
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|Function f
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|f
argument_list|(
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|f
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|T
operator|>
name|InputIterator
name|find
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
operator|*
name|first
operator|!=
name|value
condition|)
operator|++
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Predicate
operator|>
name|InputIterator
name|find_if
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|Predicate pred
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
operator|!
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|++
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|>
name|ForwardIterator
name|adjacent_find
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|last
return|;
name|ForwardIterator
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|next
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|==
operator|*
name|next
condition|)
return|return
name|first
return|;
name|first
operator|=
name|next
expr_stmt|;
block|}
end_while

begin_return
return|return
name|last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|BinaryPredicate
operator|>
name|ForwardIterator
name|adjacent_find
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|last
return|;
name|ForwardIterator
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|next
operator|!=
name|last
condition|)
block|{
if|if
condition|(
name|binary_pred
argument_list|(
operator|*
name|first
argument_list|,
operator|*
name|next
argument_list|)
condition|)
return|return
name|first
return|;
name|first
operator|=
name|next
expr_stmt|;
block|}
end_while

begin_return
return|return
name|last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|T
operator|,
name|class
name|Size
operator|>
name|void
name|count
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Size& n
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|*
name|first
operator|++
operator|==
name|value
condition|)
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|Size
operator|>
name|void
name|count_if
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|Size& n
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
operator|++
argument_list|)
condition|)
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|,
name|class
name|Distance1
operator|,
name|class
name|Distance2
operator|>
name|ForwardIterator1
name|__search
argument_list|(
argument|ForwardIterator1 first1
argument_list|,
argument|ForwardIterator1 last1
argument_list|,
argument|ForwardIterator2 first2
argument_list|,
argument|ForwardIterator2 last2
argument_list|,
argument|Distance1*
argument_list|,
argument|Distance2*
argument_list|)
block|{
name|Distance1
name|d1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|d1
argument_list|)
block|;
name|Distance2
name|d2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|d2
argument_list|)
block|;
if|if
condition|(
name|d1
operator|<
name|d2
condition|)
return|return
name|last1
return|;
name|ForwardIterator1
name|current1
operator|=
name|first1
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ForwardIterator2
name|current2
init|=
name|first2
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|current2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|current1
operator|++
operator|!=
operator|*
name|current2
operator|++
condition|)
if|if
condition|(
name|d1
operator|--
operator|==
name|d2
condition|)
return|return
name|last1
return|;
else|else
block|{
name|current1
operator|=
operator|++
name|first1
expr_stmt|;
name|current2
operator|=
name|first2
expr_stmt|;
block|}
end_while

begin_return
return|return
operator|(
name|current2
operator|==
name|last2
operator|)
condition|?
name|first1
else|:
name|last1
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|>
specifier|inline
name|ForwardIterator1
name|search
argument_list|(
argument|ForwardIterator1 first1
argument_list|,
argument|ForwardIterator1 last1
argument_list|,
argument|ForwardIterator2 first2
argument_list|,
argument|ForwardIterator2 last2
argument_list|)
block|{
return|return
name|__search
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|,
name|distance_type
argument_list|(
name|first1
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first2
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|,
name|class
name|BinaryPredicate
operator|,
name|class
name|Distance1
operator|,
name|class
name|Distance2
operator|>
name|ForwardIterator1
name|__search
argument_list|(
argument|ForwardIterator1 first1
argument_list|,
argument|ForwardIterator1 last1
argument_list|,
argument|ForwardIterator2 first2
argument_list|,
argument|ForwardIterator2 last2
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|Distance1*
argument_list|,
argument|Distance2*
argument_list|)
block|{
name|Distance1
name|d1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|d1
argument_list|)
block|;
name|Distance2
name|d2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|d2
argument_list|)
block|;
if|if
condition|(
name|d1
operator|<
name|d2
condition|)
return|return
name|last1
return|;
name|ForwardIterator1
name|current1
operator|=
name|first1
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ForwardIterator2
name|current2
init|=
name|first2
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|current2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|!
name|binary_pred
argument_list|(
operator|*
name|current1
operator|++
argument_list|,
operator|*
name|current2
operator|++
argument_list|)
condition|)
if|if
condition|(
name|d1
operator|--
operator|==
name|d2
condition|)
return|return
name|last1
return|;
else|else
block|{
name|current1
operator|=
operator|++
name|first1
expr_stmt|;
name|current2
operator|=
name|first2
expr_stmt|;
block|}
end_while

begin_return
return|return
operator|(
name|current2
operator|==
name|last2
operator|)
condition|?
name|first1
else|:
name|last1
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|ForwardIterator1
name|search
argument_list|(
argument|ForwardIterator1 first1
argument_list|,
argument|ForwardIterator1 last1
argument_list|,
argument|ForwardIterator2 first2
argument_list|,
argument|ForwardIterator2 last2
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
return|return
name|__search
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|,
name|binary_pred
argument_list|,
name|distance_type
argument_list|(
name|first1
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first2
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|>
name|ForwardIterator2
name|swap_ranges
argument_list|(
argument|ForwardIterator1 first1
argument_list|,
argument|ForwardIterator1 last1
argument_list|,
argument|ForwardIterator2 first2
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
condition|)
name|iter_swap
argument_list|(
name|first1
operator|++
argument_list|,
name|first2
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|UnaryOperation
operator|>
name|OutputIterator
name|transform
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|UnaryOperation op
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
name|result
operator|++
operator|=
name|op
argument_list|(
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryOperation
operator|>
name|OutputIterator
name|transform
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
condition|)
operator|*
name|result
operator|++
operator|=
name|binary_op
argument_list|(
operator|*
name|first1
operator|++
argument_list|,
operator|*
name|first2
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
name|void
name|replace
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& old_value
argument_list|,
argument|const T& new_value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|==
name|old_value
condition|)
operator|*
name|first
operator|=
name|new_value
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|T
operator|>
name|void
name|replace_if
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|const T& new_value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|*
name|first
operator|=
name|new_value
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|replace_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|const T& old_value
argument_list|,
argument|const T& new_value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
operator|*
name|result
operator|++
operator|=
operator|*
name|first
operator|==
name|old_value
condition|?
name|new_value
else|:
operator|*
name|first
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Iterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|replace_copy_if
argument_list|(
argument|Iterator first
argument_list|,
argument|Iterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Predicate pred
argument_list|,
argument|const T& new_value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
operator|*
name|result
operator|++
operator|=
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|?
name|new_value
else|:
operator|*
name|first
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Generator
operator|>
name|void
name|generate
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Generator gen
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
name|first
operator|++
operator|=
name|gen
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|OutputIterator
operator|,
name|class
name|Size
operator|,
name|class
name|Generator
operator|>
name|OutputIterator
name|generate_n
argument_list|(
argument|OutputIterator first
argument_list|,
argument|Size n
argument_list|,
argument|Generator gen
argument_list|)
block|{
while|while
condition|(
name|n
operator|--
operator|>
literal|0
condition|)
operator|*
name|first
operator|++
operator|=
name|gen
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|remove_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|const T& value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|!=
name|value
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Predicate
operator|>
name|OutputIterator
name|remove_copy_if
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Predicate pred
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|!
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
name|ForwardIterator
name|remove
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
name|first
operator|=
name|find
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|)
block|;
name|ForwardIterator
name|next
operator|=
name|first
block|;
return|return
name|first
operator|==
name|last
condition|?
name|first
else|:
name|remove_copy
argument_list|(
operator|++
name|next
argument_list|,
name|last
argument_list|,
name|first
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|>
name|ForwardIterator
name|remove_if
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|)
block|{
name|first
operator|=
name|find_if
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pred
argument_list|)
block|;
name|ForwardIterator
name|next
operator|=
name|first
block|;
return|return
name|first
operator|==
name|last
condition|?
name|first
else|:
name|remove_copy_if
argument_list|(
operator|++
name|next
argument_list|,
name|last
argument_list|,
name|first
argument_list|,
name|pred
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|ForwardIterator
operator|>
name|ForwardIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|ForwardIterator result
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
operator|*
name|result
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|*
name|result
operator|!=
operator|*
name|first
condition|)
operator|*
operator|++
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|BidirectionalIterator
operator|>
specifier|inline
name|BidirectionalIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|BidirectionalIterator result
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|RandomAccessIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
operator|*
name|result
operator|=
name|value
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
name|value
operator|!=
operator|*
name|first
condition|)
block|{
name|value
operator|=
operator|*
name|first
expr_stmt|;
operator|*
operator|++
name|result
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|OutputIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|output_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|OutputIterator
name|unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
end_expr_stmt

begin_return
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|iterator_category
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|} template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|ForwardIterator
operator|,
name|class
name|BinaryPredicate
operator|>
name|ForwardIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|ForwardIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
operator|*
name|result
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|!
name|binary_pred
argument_list|(
operator|*
name|result
argument_list|,
operator|*
name|first
argument_list|)
condition|)
operator|*
operator|++
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|BidirectionalIterator
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|BidirectionalIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|BidirectionalIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|binary_pred
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|RandomAccessIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|binary_pred
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryPredicate
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
operator|*
name|result
operator|=
name|value
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|!
name|binary_pred
argument_list|(
name|value
argument_list|,
operator|*
name|first
argument_list|)
condition|)
block|{
name|value
operator|=
operator|*
name|first
expr_stmt|;
operator|*
operator|++
name|result
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|OutputIterator
name|__unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|,
argument|output_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|binary_pred
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|OutputIterator
name|unique_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
end_expr_stmt

begin_return
return|return
name|__unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|binary_pred
argument_list|,
name|iterator_category
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|>
name|ForwardIterator
name|unique
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
name|first
operator|=
name|adjacent_find
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;
return|return
name|unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|first
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|BinaryPredicate
operator|>
name|ForwardIterator
name|unique
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
name|first
operator|=
name|adjacent_find
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|binary_pred
argument_list|)
block|;
return|return
name|unique_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|first
argument_list|,
name|binary_pred
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|>
name|void
name|__reverse
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|first
operator|==
name|last
operator|||
name|first
operator|==
operator|--
name|last
condition|)
return|return;
else|else
name|iter_swap
argument_list|(
name|first
operator|++
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
name|void
name|__reverse
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|first
operator|<
name|last
condition|)
name|iter_swap
argument_list|(
name|first
operator|++
argument_list|,
operator|--
name|last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|>
specifier|inline
name|void
name|reverse
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|)
block|{
name|__reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|reverse_copy
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
operator|--
name|last
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__rotate
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator middle
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
for|for
control|(
name|ForwardIterator
name|i
init|=
name|middle
init|;
condition|;
control|)
block|{
name|iter_swap
argument_list|(
name|first
operator|++
argument_list|,
name|i
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
name|middle
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|last
condition|)
return|return;
name|middle
operator|=
name|i
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|i
operator|==
name|last
condition|)
name|i
operator|=
name|middle
expr_stmt|;
end_elseif

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__rotate
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
name|reverse
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
block|;
name|reverse
argument_list|(
name|middle
argument_list|,
name|last
argument_list|)
block|;
name|reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|template
operator|<
name|class
name|EuclideanRingElement
operator|>
name|EuclideanRingElement
name|__gcd
argument_list|(
argument|EuclideanRingElement m
argument_list|,
argument|EuclideanRingElement n
argument_list|)
block|{
while|while
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
name|EuclideanRingElement
name|t
init|=
name|m
operator|%
name|n
decl_stmt|;
name|m
operator|=
name|n
expr_stmt|;
name|n
operator|=
name|t
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|m
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|void
name|__rotate_cycle
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|RandomAccessIterator initial
argument_list|,
argument|Distance shift
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|initial
block|;
name|RandomAccessIterator
name|ptr1
operator|=
name|initial
block|;
name|RandomAccessIterator
name|ptr2
operator|=
name|ptr1
operator|+
name|shift
block|;
while|while
condition|(
name|ptr2
operator|!=
name|initial
condition|)
block|{
operator|*
name|ptr1
operator|=
operator|*
name|ptr2
expr_stmt|;
name|ptr1
operator|=
name|ptr2
expr_stmt|;
if|if
condition|(
name|last
operator|-
name|ptr2
operator|>
name|shift
condition|)
name|ptr2
operator|+=
name|shift
expr_stmt|;
else|else
name|ptr2
operator|=
name|first
operator|+
operator|(
name|shift
operator|-
operator|(
name|last
operator|-
name|ptr2
operator|)
operator|)
expr_stmt|;
block|}
operator|*
name|ptr1
operator|=
name|value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__rotate
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|n
operator|=
name|__gcd
argument_list|(
name|last
operator|-
name|first
argument_list|,
name|middle
operator|-
name|first
argument_list|)
block|;
while|while
condition|(
name|n
operator|--
condition|)
name|__rotate_cycle
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|first
operator|+
name|n
argument_list|,
name|middle
operator|-
name|first
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
specifier|inline
name|void
name|rotate
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator middle
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|middle
operator|||
name|middle
operator|==
name|last
condition|)
return|return;
name|__rotate
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|rotate_copy
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator middle
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
return|return
name|copy
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|copy
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function_decl
name|unsigned
name|long
name|__long_random
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__random_shuffle
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Distance*
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
operator|+
literal|1
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|iter_swap
argument_list|(
name|i
argument_list|,
name|first
operator|+
name|Distance
argument_list|(
name|__long_random
argument_list|(
operator|(
name|i
operator|-
name|first
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|random_shuffle
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__random_shuffle
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|RandomNumberGenerator
operator|>
name|void
name|random_shuffle
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|RandomNumberGenerator& __rand
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
operator|+
literal|1
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|iter_swap
argument_list|(
name|i
argument_list|,
name|first
operator|+
name|__rand
argument_list|(
operator|(
name|i
operator|-
name|first
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Predicate
operator|>
name|BidirectionalIterator
name|partition
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Predicate pred
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
block|{
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
elseif|else
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|++
name|first
expr_stmt|;
else|else
break|break;
operator|--
name|last
expr_stmt|;
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
elseif|else
if|if
condition|(
operator|!
name|pred
argument_list|(
operator|*
name|last
argument_list|)
condition|)
operator|--
name|last
expr_stmt|;
else|else
break|break;
name|iter_swap
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__inplace_stable_partition
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|Distance len
argument_list|)
block|{
if|if
condition|(
name|len
operator|==
literal|1
condition|)
return|return
name|pred
argument_list|(
operator|*
name|first
argument_list|)
operator|?
name|last
operator|:
name|first
return|;
name|ForwardIterator
name|middle
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|advance
argument_list|(
name|middle
argument_list|,
name|len
operator|/
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ForwardIterator
name|first_cut
init|=
name|__inplace_stable_partition
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|pred
argument_list|,
name|len
operator|/
literal|2
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ForwardIterator
name|second_cut
init|=
name|__inplace_stable_partition
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|len
operator|-
name|len
operator|/
literal|2
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rotate
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|len
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first_cut
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Predicate
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|ForwardIterator
name|__stable_partition_adaptive
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|Distance len
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance buffer_size
argument_list|,
argument|Distance& fill_pointer
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|len
operator|<=
name|buffer_size
condition|)
block|{
name|len
operator|=
literal|0
expr_stmt|;
name|ForwardIterator
name|result1
init|=
name|first
decl_stmt|;
name|Pointer
name|result2
init|=
name|buffer
decl_stmt|;
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
name|len
operator|<
name|fill_pointer
condition|)
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|*
name|result1
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
else|else
block|{
operator|*
name|result2
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|raw_storage_iterator
operator|<
name|Pointer
operator|,
name|T
operator|>
name|result3
operator|=
name|result2
expr_stmt|;
while|while
condition|(
name|first
operator|!=
name|last
condition|)
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
operator|*
name|result1
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
else|else
block|{
operator|*
name|result3
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
operator|++
name|len
expr_stmt|;
block|}
name|fill_pointer
operator|=
name|len
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|copy
argument_list|(
name|buffer
argument_list|,
name|buffer
operator|+
name|len
argument_list|,
name|result1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result1
return|;
end_return

begin_expr_stmt
unit|}     ForwardIterator
name|middle
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|advance
argument_list|(
name|middle
argument_list|,
name|len
operator|/
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ForwardIterator
name|first_cut
init|=
name|__stable_partition_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|pred
argument_list|,
name|len
operator|/
literal|2
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
name|fill_pointer
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ForwardIterator
name|second_cut
init|=
name|__stable_partition_adaptive
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|len
operator|-
name|len
operator|/
literal|2
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
name|fill_pointer
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|rotate
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|len
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first_cut
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__stable_partition
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|Distance len
argument_list|,
argument|pair<Pointer
argument_list|,
argument|Distance> p
argument_list|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|==
literal|0
condition|)
return|return
name|__inplace_stable_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|len
argument_list|)
return|;
name|Distance
name|fill_pointer
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ForwardIterator
name|result
init|=
name|__stable_partition_adaptive
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|len
argument_list|,
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|second
argument_list|,
name|fill_pointer
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|destroy
argument_list|(
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|first
operator|+
name|fill_pointer
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|return_temporary_buffer
argument_list|(
name|p
operator|.
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|ForwardIterator
name|__stable_partition_aux
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|,
argument|Distance*
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
return|return
name|__stable_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|len
argument_list|,
name|get_temporary_buffer
argument_list|(
name|len
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Predicate
operator|>
specifier|inline
name|ForwardIterator
name|stable_partition
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Predicate pred
argument_list|)
block|{
return|return
name|__stable_partition_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pred
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|RandomAccessIterator
name|__unguarded_partition
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T pivot
argument_list|)
block|{
while|while
condition|(
literal|1
condition|)
block|{
while|while
condition|(
operator|*
name|first
operator|<
name|pivot
condition|)
operator|++
name|first
expr_stmt|;
operator|--
name|last
expr_stmt|;
while|while
condition|(
name|pivot
operator|<
operator|*
name|last
condition|)
operator|--
name|last
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|first
operator|<
name|last
operator|)
condition|)
return|return
name|first
return|;
name|iter_swap
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}      template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|RandomAccessIterator
name|__unguarded_partition
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T pivot
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
literal|1
condition|)
block|{
while|while
condition|(
name|comp
argument_list|(
operator|*
name|first
argument_list|,
name|pivot
argument_list|)
condition|)
operator|++
name|first
expr_stmt|;
operator|--
name|last
expr_stmt|;
while|while
condition|(
name|comp
argument_list|(
name|pivot
argument_list|,
operator|*
name|last
argument_list|)
condition|)
operator|--
name|last
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|first
operator|<
name|last
operator|)
condition|)
return|return
name|first
return|;
name|iter_swap
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_decl_stmt
unit|}  const
name|int
name|__stl_threshold
init|=
literal|16
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|void
name|__quick_sort_loop_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>
name|__stl_threshold
condition|)
block|{
name|RandomAccessIterator
name|cut
init|=
name|__unguarded_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|T
argument_list|(
name|__median
argument_list|(
operator|*
name|first
argument_list|,
operator|*
operator|(
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|last
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cut
operator|-
name|first
operator|>=
name|last
operator|-
name|cut
condition|)
block|{
name|__quick_sort_loop
argument_list|(
name|cut
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|last
operator|=
name|cut
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__quick_sort_loop
argument_list|(
name|first
argument_list|,
name|cut
argument_list|)
expr_stmt|;
name|first
operator|=
name|cut
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|__quick_sort_loop
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__quick_sort_loop_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__quick_sort_loop_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>
name|__stl_threshold
condition|)
block|{
name|RandomAccessIterator
name|cut
init|=
name|__unguarded_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|T
argument_list|(
name|__median
argument_list|(
operator|*
name|first
argument_list|,
operator|*
operator|(
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|last
operator|-
literal|1
operator|)
argument_list|,
name|comp
argument_list|)
argument_list|)
argument_list|,
name|comp
argument_list|)
decl_stmt|;
if|if
condition|(
name|cut
operator|-
name|first
operator|>=
name|last
operator|-
name|cut
condition|)
block|{
name|__quick_sort_loop
argument_list|(
name|cut
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|last
operator|=
name|cut
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__quick_sort_loop
argument_list|(
name|first
argument_list|,
name|cut
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|first
operator|=
name|cut
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__quick_sort_loop
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__quick_sort_loop_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|void
name|__unguarded_linear_insert
argument_list|(
argument|RandomAccessIterator last
argument_list|,
argument|T value
argument_list|)
block|{
name|RandomAccessIterator
name|next
operator|=
name|last
block|;
operator|--
name|next
block|;
while|while
condition|(
name|value
operator|<
operator|*
name|next
condition|)
block|{
operator|*
name|last
operator|=
operator|*
name|next
expr_stmt|;
name|last
operator|=
name|next
operator|--
expr_stmt|;
block|}
operator|*
name|last
operator|=
name|value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__unguarded_linear_insert
argument_list|(
argument|RandomAccessIterator last
argument_list|,
argument|T value
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|RandomAccessIterator
name|next
operator|=
name|last
block|;
operator|--
name|next
block|;
while|while
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|next
argument_list|)
condition|)
block|{
operator|*
name|last
operator|=
operator|*
name|next
expr_stmt|;
name|last
operator|=
name|next
operator|--
expr_stmt|;
block|}
operator|*
name|last
operator|=
name|value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
specifier|inline
name|void
name|__linear_insert
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|last
block|;
if|if
condition|(
name|value
operator|<
operator|*
name|first
condition|)
block|{
name|copy_backward
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|last
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|first
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__unguarded_linear_insert
argument_list|(
name|last
argument_list|,
name|value
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__linear_insert
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|last
block|;
if|if
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|first
argument_list|)
condition|)
block|{
name|copy_backward
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|last
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|first
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__unguarded_linear_insert
argument_list|(
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
name|void
name|__insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
operator|+
literal|1
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|__linear_insert
argument_list|(
name|first
argument_list|,
name|i
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
name|void
name|__insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
operator|+
literal|1
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|__linear_insert
argument_list|(
name|first
argument_list|,
name|i
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|void
name|__unguarded_insertion_sort_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|)
block|{
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|__unguarded_linear_insert
argument_list|(
name|i
argument_list|,
name|T
argument_list|(
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|__unguarded_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__unguarded_insertion_sort_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__unguarded_insertion_sort_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|first
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|__unguarded_linear_insert
argument_list|(
name|i
argument_list|,
name|T
argument_list|(
operator|*
name|i
argument_list|)
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__unguarded_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__unguarded_insertion_sort_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
name|void
name|__final_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
if|if
condition|(
name|last
operator|-
name|first
operator|>
name|__stl_threshold
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|__stl_threshold
argument_list|)
expr_stmt|;
name|__unguarded_insertion_sort
argument_list|(
name|first
operator|+
name|__stl_threshold
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
name|void
name|__final_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|last
operator|-
name|first
operator|>
name|__stl_threshold
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|__stl_threshold
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|__unguarded_insertion_sort
argument_list|(
name|first
operator|+
name|__stl_threshold
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
name|void
name|sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__quick_sort_loop
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;
name|__final_insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
name|void
name|sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__quick_sort_loop
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
block|;
name|__final_insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
name|void
name|__inplace_stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
if|if
condition|(
name|last
operator|-
name|first
operator|<
literal|15
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return;
block|}
name|RandomAccessIterator
name|middle
operator|=
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|middle
argument_list|,
name|last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|middle
operator|-
name|first
argument_list|,
name|last
operator|-
name|middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
name|void
name|__inplace_stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|last
operator|-
name|first
operator|<
literal|15
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return;
block|}
name|RandomAccessIterator
name|middle
operator|=
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|middle
operator|-
name|first
argument_list|,
name|last
operator|-
name|middle
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator1
operator|,
name|class
name|RandomAccessIterator2
operator|,
name|class
name|Distance
operator|>
name|void
name|__merge_sort_loop
argument_list|(
argument|RandomAccessIterator1 first
argument_list|,
argument|RandomAccessIterator1 last
argument_list|,
argument|RandomAccessIterator2 result
argument_list|,
argument|Distance step_size
argument_list|)
block|{
name|Distance
name|two_step
operator|=
literal|2
operator|*
name|step_size
block|;
while|while
condition|(
name|last
operator|-
name|first
operator|>=
name|two_step
condition|)
block|{
name|result
operator|=
name|merge
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|two_step
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|first
operator|+=
name|two_step
expr_stmt|;
block|}
name|step_size
operator|=
name|min
argument_list|(
name|Distance
argument_list|(
name|last
operator|-
name|first
argument_list|)
argument_list|,
name|step_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|merge
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator1
operator|,
name|class
name|RandomAccessIterator2
operator|,
name|class
name|Distance
operator|,
name|class
name|Compare
operator|>
name|void
name|__merge_sort_loop
argument_list|(
argument|RandomAccessIterator1 first
argument_list|,
argument|RandomAccessIterator1 last
argument_list|,
argument|RandomAccessIterator2 result
argument_list|,
argument|Distance step_size
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|Distance
name|two_step
operator|=
literal|2
operator|*
name|step_size
block|;
while|while
condition|(
name|last
operator|-
name|first
operator|>=
name|two_step
condition|)
block|{
name|result
operator|=
name|merge
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|two_step
argument_list|,
name|result
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|first
operator|+=
name|two_step
expr_stmt|;
block|}
name|step_size
operator|=
name|min
argument_list|(
name|Distance
argument_list|(
name|last
operator|-
name|first
argument_list|)
argument_list|,
name|step_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|merge
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|first
operator|+
name|step_size
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|}  const
name|int
name|__stl_chunk_size
init|=
literal|7
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__chunk_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Distance chunk_size
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>=
name|chunk_size
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|chunk_size
argument_list|)
expr_stmt|;
name|first
operator|+=
name|chunk_size
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Compare
operator|>
name|void
name|__chunk_insertion_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Distance chunk_size
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>=
name|chunk_size
condition|)
block|{
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|chunk_size
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|first
operator|+=
name|chunk_size
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|void
name|__merge_sort_with_buffer
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance*
argument_list|,
argument|T*
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Pointer
name|buffer_last
operator|=
name|buffer
operator|+
name|len
block|;
name|Distance
name|step_size
operator|=
name|__stl_chunk_size
block|;
name|__chunk_insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|step_size
argument_list|)
block|;
while|while
condition|(
name|step_size
operator|<
name|len
condition|)
block|{
name|__merge_sort_loop
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
name|step_size
argument_list|)
expr_stmt|;
name|step_size
operator|*=
literal|2
expr_stmt|;
name|__merge_sort_loop
argument_list|(
name|buffer
argument_list|,
name|buffer_last
argument_list|,
name|first
argument_list|,
name|step_size
argument_list|)
expr_stmt|;
name|step_size
operator|*=
literal|2
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__merge_sort_with_buffer
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance*
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Pointer
name|buffer_last
operator|=
name|buffer
operator|+
name|len
block|;
name|Distance
name|step_size
operator|=
name|__stl_chunk_size
block|;
name|__chunk_insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|step_size
argument_list|,
name|comp
argument_list|)
block|;
while|while
condition|(
name|step_size
operator|<
name|len
condition|)
block|{
name|__merge_sort_loop
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
name|step_size
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|step_size
operator|*=
literal|2
expr_stmt|;
name|__merge_sort_loop
argument_list|(
name|buffer
argument_list|,
name|buffer_last
argument_list|,
name|first
argument_list|,
name|step_size
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|step_size
operator|*=
literal|2
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|void
name|__stable_sort_adaptive
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance buffer_size
argument_list|,
argument|T*
argument_list|)
block|{
name|Distance
name|len
operator|=
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
operator|/
literal|2
block|;
name|RandomAccessIterator
name|middle
operator|=
name|first
operator|+
name|len
block|;
if|if
condition|(
name|len
operator|>
name|buffer_size
condition|)
block|{
name|__stable_sort_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|__stable_sort_adaptive
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__merge_sort_with_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|__merge_sort_with_buffer
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|Distance
argument_list|(
name|middle
operator|-
name|first
argument_list|)
argument_list|,
name|Distance
argument_list|(
name|last
operator|-
name|middle
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__stable_sort_adaptive
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance buffer_size
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|Distance
name|len
operator|=
operator|(
name|last
operator|-
name|first
operator|+
literal|1
operator|)
operator|/
literal|2
block|;
name|RandomAccessIterator
name|middle
operator|=
name|first
operator|+
name|len
block|;
if|if
condition|(
name|len
operator|>
name|buffer_size
condition|)
block|{
name|__stable_sort_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|__stable_sort_adaptive
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__merge_sort_with_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|__merge_sort_with_buffer
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|Distance
argument_list|(
name|middle
operator|-
name|first
argument_list|)
argument_list|,
name|Distance
argument_list|(
name|last
operator|-
name|middle
argument_list|)
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
specifier|inline
name|void
name|__stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|pair<Pointer
argument_list|,
argument|Distance> p
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|__inplace_stable_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return;
block|}
name|Distance
name|len
operator|=
name|min
argument_list|(
name|p
operator|.
name|second
argument_list|,
name|last
operator|-
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|copy
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|len
argument_list|,
name|raw_storage_iterator
operator|<
name|Pointer
argument_list|,
name|T
operator|>
operator|(
name|p
operator|.
name|first
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__stable_sort_adaptive
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|second
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|destroy
argument_list|(
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|first
operator|+
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|return_temporary_buffer
argument_list|(
name|p
operator|.
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Pointer
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|pair<Pointer
argument_list|,
argument|Distance> p
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|__inplace_stable_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return;
block|}
name|Distance
name|len
operator|=
name|min
argument_list|(
name|p
operator|.
name|second
argument_list|,
name|last
operator|-
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|copy
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|len
argument_list|,
name|raw_storage_iterator
operator|<
name|Pointer
argument_list|,
name|T
operator|>
operator|(
name|p
operator|.
name|first
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__stable_sort_adaptive
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|second
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|destroy
argument_list|(
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|first
operator|+
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|return_temporary_buffer
argument_list|(
name|p
operator|.
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__stable_sort_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Distance*
argument_list|)
block|{
name|__stable_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|get_temporary_buffer
argument_list|(
name|Distance
argument_list|(
name|last
operator|-
name|first
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__stable_sort_aux
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Distance*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__stable_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|get_temporary_buffer
argument_list|(
name|Distance
argument_list|(
name|last
operator|-
name|first
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__stable_sort_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|stable_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__stable_sort_aux
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|void
name|__partial_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|)
block|{
name|make_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
block|;
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|middle
init|;
name|i
operator|<
name|last
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|*
name|i
operator|<
operator|*
name|first
condition|)
name|__pop_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|i
argument_list|,
name|T
argument_list|(
operator|*
name|i
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|sort_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|partial_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__partial_sort
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__partial_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|make_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|comp
argument_list|)
block|;
for|for
control|(
name|RandomAccessIterator
name|i
init|=
name|middle
init|;
name|i
operator|<
name|last
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|i
argument_list|,
operator|*
name|first
argument_list|)
condition|)
name|__pop_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|i
argument_list|,
name|T
argument_list|(
operator|*
name|i
argument_list|)
argument_list|,
name|comp
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|sort_heap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|partial_sort
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator middle
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__partial_sort
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|RandomAccessIterator
name|__partial_sort_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result_first
argument_list|,
argument|RandomAccessIterator result_last
argument_list|,
argument|Distance*
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|result_first
operator|==
name|result_last
condition|)
return|return
name|result_last
return|;
name|RandomAccessIterator
name|result_real_last
operator|=
name|result_first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
name|result_real_last
operator|!=
name|result_last
condition|)
operator|*
name|result_real_last
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
end_while

begin_expr_stmt
name|make_heap
argument_list|(
name|result_first
argument_list|,
name|result_real_last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|<
operator|*
name|result_first
condition|)
name|__adjust_heap
argument_list|(
name|result_first
argument_list|,
name|Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Distance
argument_list|(
name|result_real_last
operator|-
name|result_first
argument_list|)
argument_list|,
name|T
argument_list|(
operator|*
name|first
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|sort_heap
argument_list|(
name|result_first
argument_list|,
name|result_real_last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result_real_last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|RandomAccessIterator
name|partial_sort_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result_first
argument_list|,
argument|RandomAccessIterator result_last
argument_list|)
block|{
return|return
name|__partial_sort_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result_first
argument_list|,
name|result_last
argument_list|,
name|distance_type
argument_list|(
name|result_first
argument_list|)
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|,
name|class
name|T
operator|>
name|RandomAccessIterator
name|__partial_sort_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result_first
argument_list|,
argument|RandomAccessIterator result_last
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|result_first
operator|==
name|result_last
condition|)
return|return
name|result_last
return|;
name|RandomAccessIterator
name|result_real_last
operator|=
name|result_first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|first
operator|!=
name|last
operator|&&
name|result_real_last
operator|!=
name|result_last
condition|)
operator|*
name|result_real_last
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
end_while

begin_expr_stmt
name|make_heap
argument_list|(
name|result_first
argument_list|,
name|result_real_last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first
argument_list|,
operator|*
name|result_first
argument_list|)
condition|)
name|__adjust_heap
argument_list|(
name|result_first
argument_list|,
name|Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Distance
argument_list|(
name|result_real_last
operator|-
name|result_first
argument_list|)
argument_list|,
name|T
argument_list|(
operator|*
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
expr_stmt|;
operator|++
name|first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|sort_heap
argument_list|(
name|result_first
argument_list|,
name|result_real_last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result_real_last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|RandomAccessIterator
name|partial_sort_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|RandomAccessIterator result_first
argument_list|,
argument|RandomAccessIterator result_last
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|__partial_sort_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result_first
argument_list|,
name|result_last
argument_list|,
name|comp
argument_list|,
name|distance_type
argument_list|(
name|result_first
argument_list|)
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|>
name|void
name|__nth_element
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator nth
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>
literal|3
condition|)
block|{
name|RandomAccessIterator
name|cut
init|=
name|__unguarded_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|T
argument_list|(
name|__median
argument_list|(
operator|*
name|first
argument_list|,
operator|*
operator|(
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|last
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cut
operator|<=
name|nth
condition|)
name|first
operator|=
name|cut
expr_stmt|;
else|else
name|last
operator|=
name|cut
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|void
name|nth_element
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator nth
argument_list|,
argument|RandomAccessIterator last
argument_list|)
block|{
name|__nth_element
argument_list|(
name|first
argument_list|,
name|nth
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__nth_element
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator nth
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|last
operator|-
name|first
operator|>
literal|3
condition|)
block|{
name|RandomAccessIterator
name|cut
init|=
name|__unguarded_partition
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|T
argument_list|(
name|__median
argument_list|(
operator|*
name|first
argument_list|,
operator|*
operator|(
name|first
operator|+
operator|(
name|last
operator|-
name|first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|last
operator|-
literal|1
operator|)
argument_list|,
name|comp
argument_list|)
argument_list|)
argument_list|,
name|comp
argument_list|)
decl_stmt|;
if|if
condition|(
name|cut
operator|<=
name|nth
condition|)
name|first
operator|=
name|cut
expr_stmt|;
else|else
name|last
operator|=
name|cut
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|nth_element
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator nth
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|__nth_element
argument_list|(
name|first
argument_list|,
name|nth
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|middle
operator|<
name|value
condition|)
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|len
operator|=
name|half
expr_stmt|;
end_else

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|ForwardIterator
name|__lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|RandomAccessIterator
name|__lower_bound
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
operator|*
name|middle
operator|<
name|value
condition|)
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|len
operator|=
name|half
expr_stmt|;
end_else

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
specifier|inline
name|ForwardIterator
name|lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|middle
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|len
operator|=
name|half
expr_stmt|;
end_else

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|ForwardIterator
name|__lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|RandomAccessIterator
name|__lower_bound
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|middle
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|len
operator|=
name|half
expr_stmt|;
end_else

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|ForwardIterator
name|lower_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|<
operator|*
name|middle
condition|)
name|len
operator|=
name|half
expr_stmt|;
else|else
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|ForwardIterator
name|__upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|RandomAccessIterator
name|__upper_bound
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|value
operator|<
operator|*
name|middle
condition|)
name|len
operator|=
name|half
expr_stmt|;
else|else
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
specifier|inline
name|ForwardIterator
name|upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|ForwardIterator
name|__upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|middle
argument_list|)
condition|)
name|len
operator|=
name|half
expr_stmt|;
else|else
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|ForwardIterator
name|__upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|RandomAccessIterator
name|__upper_bound
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|middle
argument_list|)
condition|)
name|len
operator|=
name|half
expr_stmt|;
else|else
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|ForwardIterator
name|upper_bound
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|__equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|,
name|left
block|,
name|right
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|middle
operator|<
name|value
condition|)
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|value
operator|<
operator|*
name|middle
condition|)
name|len
operator|=
name|half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|left
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|advance
argument_list|(
name|first
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|right
operator|=
name|upper_bound
argument_list|(
operator|++
name|middle
argument_list|,
name|first
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
operator|(
name|left
operator|,
name|right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}     return
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
operator|(
name|first
operator|,
name|first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|__equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
name|__equal_range
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|,
name|left
block|,
name|right
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
operator|*
name|middle
operator|<
name|value
condition|)
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|value
operator|<
operator|*
name|middle
condition|)
name|len
operator|=
name|half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|left
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|right
operator|=
name|upper_bound
argument_list|(
operator|++
name|middle
argument_list|,
name|first
operator|+
name|len
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
operator|(
name|left
operator|,
name|right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}     return
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
operator|(
name|first
operator|,
name|first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
specifier|inline
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|__equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|len
argument_list|)
block|;
name|Distance
name|half
block|;
name|ForwardIterator
name|middle
block|,
name|left
block|,
name|right
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
expr_stmt|;
name|advance
argument_list|(
name|middle
argument_list|,
name|half
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|middle
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|first
operator|=
name|middle
expr_stmt|;
operator|++
name|first
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|middle
argument_list|)
condition|)
name|len
operator|=
name|half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|left
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|advance
argument_list|(
name|first
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|right
operator|=
name|upper_bound
argument_list|(
operator|++
name|middle
argument_list|,
name|first
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
operator|(
name|left
operator|,
name|right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}     return
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
operator|(
name|first
operator|,
name|first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}             template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|__equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
operator|(
name|Distance
operator|*
operator|)
literal|0
argument_list|,
name|forward_iterator_tag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Distance
operator|>
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
name|__equal_range
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|,
argument|Distance*
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|Distance
name|len
operator|=
name|last
operator|-
name|first
block|;
name|Distance
name|half
block|;
name|RandomAccessIterator
name|middle
block|,
name|left
block|,
name|right
block|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|half
operator|=
name|len
operator|/
literal|2
expr_stmt|;
name|middle
operator|=
name|first
operator|+
name|half
expr_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|middle
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|first
operator|=
name|middle
operator|+
literal|1
expr_stmt|;
name|len
operator|=
name|len
operator|-
name|half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|middle
argument_list|)
condition|)
name|len
operator|=
name|half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|left
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|right
operator|=
name|upper_bound
argument_list|(
operator|++
name|middle
argument_list|,
name|first
operator|+
name|len
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
operator|(
name|left
operator|,
name|right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}     return
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|RandomAccessIterator
operator|>
operator|(
name|first
operator|,
name|first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}             template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|pair
operator|<
name|ForwardIterator
operator|,
name|ForwardIterator
operator|>
name|equal_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
name|bool
name|binary_search
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
name|ForwardIterator
name|i
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|)
block|;
return|return
name|i
operator|!=
name|last
operator|&&
operator|!
operator|(
name|value
operator|<
operator|*
name|i
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|bool
name|binary_search
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|ForwardIterator
name|i
operator|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|value
argument_list|,
name|comp
argument_list|)
block|;
return|return
name|i
operator|!=
name|last
operator|&&
operator|!
name|comp
argument_list|(
name|value
argument_list|,
operator|*
name|i
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|merge
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Compare
operator|>
name|OutputIterator
name|merge
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|>
name|void
name|__merge_without_buffer
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|)
block|{
if|if
condition|(
name|len1
operator|==
literal|0
operator|||
name|len2
operator|==
literal|0
condition|)
return|return;
end_expr_stmt

begin_if
if|if
condition|(
name|len1
operator|+
name|len2
operator|==
literal|2
condition|)
block|{
if|if
condition|(
operator|*
name|middle
operator|<
operator|*
name|first
condition|)
name|iter_swap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_decl_stmt
name|BidirectionalIterator
name|first_cut
init|=
name|first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BidirectionalIterator
name|second_cut
init|=
name|middle
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Distance
name|len11
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Distance
name|len22
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|len1
operator|>
name|len2
condition|)
block|{
name|len11
operator|=
name|len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
name|second_cut
operator|=
name|lower_bound
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
operator|*
name|first_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|len22
operator|=
name|len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
name|first_cut
operator|=
name|upper_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
operator|*
name|second_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|rotate
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|BidirectionalIterator
name|new_middle
init|=
name|first_cut
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|advance
argument_list|(
name|new_middle
argument_list|,
name|len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|new_middle
argument_list|,
name|len11
argument_list|,
name|len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|new_middle
argument_list|,
name|second_cut
argument_list|,
name|last
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len2
operator|-
name|len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Compare
operator|>
name|void
name|__merge_without_buffer
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|len1
operator|==
literal|0
operator|||
name|len2
operator|==
literal|0
condition|)
return|return;
end_expr_stmt

begin_if
if|if
condition|(
name|len1
operator|+
name|len2
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|comp
argument_list|(
operator|*
name|middle
argument_list|,
operator|*
name|first
argument_list|)
condition|)
name|iter_swap
argument_list|(
name|first
argument_list|,
name|middle
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_decl_stmt
name|BidirectionalIterator
name|first_cut
init|=
name|first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BidirectionalIterator
name|second_cut
init|=
name|middle
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Distance
name|len11
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Distance
name|len22
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|len1
operator|>
name|len2
condition|)
block|{
name|len11
operator|=
name|len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
name|second_cut
operator|=
name|lower_bound
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
operator|*
name|first_cut
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|len22
operator|=
name|len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
name|first_cut
operator|=
name|upper_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
operator|*
name|second_cut
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|rotate
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|BidirectionalIterator
name|new_middle
init|=
name|first_cut
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|advance
argument_list|(
name|new_middle
argument_list|,
name|len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|new_middle
argument_list|,
name|len11
argument_list|,
name|len22
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|new_middle
argument_list|,
name|second_cut
argument_list|,
name|last
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len2
operator|-
name|len22
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|__borland_bugfix_copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
comment|// this is used in __rotate_adaptive to work around some obscure Borland
comment|// bug. It is the same as copy, but with a different (and appropriate) name.
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first
operator|++
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|,
name|class
name|Distance
operator|>
name|BidirectionalIterator1
name|__rotate_adaptive
argument_list|(
argument|BidirectionalIterator1 first
argument_list|,
argument|BidirectionalIterator1 middle
argument_list|,
argument|BidirectionalIterator1 last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|BidirectionalIterator2 buffer
argument_list|,
argument|Distance buffer_size
argument_list|)
block|{
name|BidirectionalIterator2
name|buffer_end
block|;
if|if
condition|(
name|len1
operator|>
name|len2
operator|&&
name|len2
operator|<=
name|buffer_size
condition|)
block|{
name|buffer_end
operator|=
name|__borland_bugfix_copy
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|copy
argument_list|(
name|buffer
argument_list|,
name|buffer_end
argument_list|,
name|first
argument_list|)
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|len1
operator|<=
name|buffer_size
condition|)
block|{
name|buffer_end
operator|=
name|__borland_bugfix_copy
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|first
argument_list|)
expr_stmt|;
return|return
name|copy_backward
argument_list|(
name|buffer
argument_list|,
name|buffer_end
argument_list|,
name|last
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
block|{
name|rotate
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|advance
argument_list|(
name|first
argument_list|,
name|len2
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|,
name|class
name|BidirectionalIterator3
operator|>
name|BidirectionalIterator3
name|__merge_backward
argument_list|(
argument|BidirectionalIterator1 first1
argument_list|,
argument|BidirectionalIterator1 last1
argument_list|,
argument|BidirectionalIterator2 first2
argument_list|,
argument|BidirectionalIterator2 last2
argument_list|,
argument|BidirectionalIterator3 result
argument_list|)
block|{
if|if
condition|(
name|first1
operator|==
name|last1
condition|)
return|return
name|copy_backward
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|result
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
return|return
name|copy_backward
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
return|;
end_if

begin_expr_stmt
operator|--
name|last1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|last2
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
if|if
condition|(
operator|*
name|last2
operator|<
operator|*
name|last1
condition|)
block|{
operator|*
operator|--
name|result
operator|=
operator|*
name|last1
expr_stmt|;
if|if
condition|(
name|first1
operator|==
name|last1
condition|)
return|return
name|copy_backward
argument_list|(
name|first2
argument_list|,
operator|++
name|last2
argument_list|,
name|result
argument_list|)
return|;
operator|--
name|last1
expr_stmt|;
block|}
else|else
block|{
operator|*
operator|--
name|result
operator|=
operator|*
name|last2
expr_stmt|;
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
return|return
name|copy_backward
argument_list|(
name|first1
argument_list|,
operator|++
name|last1
argument_list|,
name|result
argument_list|)
return|;
operator|--
name|last2
expr_stmt|;
block|}
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|,
name|class
name|BidirectionalIterator3
operator|,
name|class
name|Compare
operator|>
name|BidirectionalIterator3
name|__merge_backward
argument_list|(
argument|BidirectionalIterator1 first1
argument_list|,
argument|BidirectionalIterator1 last1
argument_list|,
argument|BidirectionalIterator2 first2
argument_list|,
argument|BidirectionalIterator2 last2
argument_list|,
argument|BidirectionalIterator3 result
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first1
operator|==
name|last1
condition|)
return|return
name|copy_backward
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|result
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
return|return
name|copy_backward
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
return|;
end_if

begin_expr_stmt
operator|--
name|last1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|last2
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
if|if
condition|(
name|comp
argument_list|(
operator|*
name|last2
argument_list|,
operator|*
name|last1
argument_list|)
condition|)
block|{
operator|*
operator|--
name|result
operator|=
operator|*
name|last1
expr_stmt|;
if|if
condition|(
name|first1
operator|==
name|last1
condition|)
return|return
name|copy_backward
argument_list|(
name|first2
argument_list|,
operator|++
name|last2
argument_list|,
name|result
argument_list|)
return|;
operator|--
name|last1
expr_stmt|;
block|}
else|else
block|{
operator|*
operator|--
name|result
operator|=
operator|*
name|last2
expr_stmt|;
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
return|return
name|copy_backward
argument_list|(
name|first1
argument_list|,
operator|++
name|last1
argument_list|,
name|result
argument_list|)
return|;
operator|--
name|last2
expr_stmt|;
block|}
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Pointer
operator|,
name|class
name|T
operator|>
name|void
name|__merge_adaptive
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance buffer_size
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|len1
operator|<=
name|len2
operator|&&
name|len1
operator|<=
name|buffer_size
condition|)
block|{
name|Pointer
name|end_buffer
init|=
name|copy
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|buffer
argument_list|,
name|end_buffer
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|len2
operator|<=
name|buffer_size
condition|)
block|{
name|Pointer
name|end_buffer
init|=
name|copy
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|__merge_backward
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
name|end_buffer
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|BidirectionalIterator
name|first_cut
init|=
name|first
decl_stmt|;
name|BidirectionalIterator
name|second_cut
init|=
name|middle
decl_stmt|;
name|Distance
name|len11
init|=
literal|0
decl_stmt|;
name|Distance
name|len22
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len1
operator|>
name|len2
condition|)
block|{
name|len11
operator|=
name|len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
name|second_cut
operator|=
name|lower_bound
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
operator|*
name|first_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|len22
operator|=
name|len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
name|first_cut
operator|=
name|upper_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
operator|*
name|second_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
block|}
name|BidirectionalIterator
name|new_middle
init|=
name|__rotate_adaptive
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|new_middle
argument_list|,
name|len11
argument_list|,
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|__merge_adaptive
argument_list|(
name|new_middle
argument_list|,
name|second_cut
argument_list|,
name|last
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len2
operator|-
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Pointer
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__merge_adaptive
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|Pointer buffer
argument_list|,
argument|Distance buffer_size
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|len1
operator|<=
name|len2
operator|&&
name|len1
operator|<=
name|buffer_size
condition|)
block|{
name|Pointer
name|end_buffer
init|=
name|copy
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|buffer
argument_list|,
name|end_buffer
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|first
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|len2
operator|<=
name|buffer_size
condition|)
block|{
name|Pointer
name|end_buffer
init|=
name|copy
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|buffer
argument_list|)
decl_stmt|;
name|__merge_backward
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|buffer
argument_list|,
name|end_buffer
argument_list|,
name|last
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|BidirectionalIterator
name|first_cut
init|=
name|first
decl_stmt|;
name|BidirectionalIterator
name|second_cut
init|=
name|middle
decl_stmt|;
name|Distance
name|len11
init|=
literal|0
decl_stmt|;
name|Distance
name|len22
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len1
operator|>
name|len2
condition|)
block|{
name|len11
operator|=
name|len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
name|second_cut
operator|=
name|lower_bound
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
operator|*
name|first_cut
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|len22
operator|=
name|len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|second_cut
argument_list|,
name|len22
argument_list|)
expr_stmt|;
name|first_cut
operator|=
name|upper_bound
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
operator|*
name|second_cut
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|len11
argument_list|)
expr_stmt|;
block|}
name|BidirectionalIterator
name|new_middle
init|=
name|__rotate_adaptive
argument_list|(
name|first_cut
argument_list|,
name|middle
argument_list|,
name|second_cut
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|)
decl_stmt|;
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|first_cut
argument_list|,
name|new_middle
argument_list|,
name|len11
argument_list|,
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|__merge_adaptive
argument_list|(
name|new_middle
argument_list|,
name|second_cut
argument_list|,
name|last
argument_list|,
name|len1
operator|-
name|len11
argument_list|,
name|len2
operator|-
name|len22
argument_list|,
name|buffer
argument_list|,
name|buffer_size
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Pointer
operator|,
name|class
name|T
operator|>
name|void
name|__inplace_merge
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|pair<Pointer
argument_list|,
argument|Distance> p
argument_list|,
argument|T*
argument_list|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|)
expr_stmt|;
return|return;
block|}
name|Distance
name|len
operator|=
name|min
argument_list|(
name|p
operator|.
name|second
argument_list|,
name|len1
operator|+
name|len2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|fill_n
argument_list|(
name|raw_storage_iterator
operator|<
name|Pointer
argument_list|,
name|T
operator|>
operator|(
name|p
operator|.
name|first
operator|)
argument_list|,
name|len
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|,
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|second
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|destroy
argument_list|(
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|first
operator|+
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|return_temporary_buffer
argument_list|(
name|p
operator|.
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|,
name|class
name|Pointer
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|>
name|void
name|__inplace_merge
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Distance len1
argument_list|,
argument|Distance len2
argument_list|,
argument|pair<Pointer
argument_list|,
argument|Distance> p
argument_list|,
argument|T*
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|p
operator|.
name|first
operator|==
literal|0
condition|)
block|{
name|__merge_without_buffer
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|,
name|comp
argument_list|)
expr_stmt|;
return|return;
block|}
name|Distance
name|len
operator|=
name|min
argument_list|(
name|p
operator|.
name|second
argument_list|,
name|len1
operator|+
name|len2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|fill_n
argument_list|(
name|raw_storage_iterator
operator|<
name|Pointer
argument_list|,
name|T
operator|>
operator|(
name|p
operator|.
name|first
operator|)
argument_list|,
name|len
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|,
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|second
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|destroy
argument_list|(
name|p
operator|.
name|first
argument_list|,
name|p
operator|.
name|first
operator|+
name|len
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|return_temporary_buffer
argument_list|(
name|p
operator|.
name|first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__inplace_merge_aux
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|T*
argument_list|,
argument|Distance*
argument_list|)
block|{
name|Distance
name|len1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|len1
argument_list|)
block|;
name|Distance
name|len2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|len2
argument_list|)
block|;
name|__inplace_merge
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|,
name|get_temporary_buffer
argument_list|(
name|len1
operator|+
name|len2
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
block|; }
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|__inplace_merge_aux
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|T*
argument_list|,
argument|Distance*
argument_list|,
argument|Compare comp
argument_list|)
block|{
name|Distance
name|len1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|len1
argument_list|)
block|;
name|Distance
name|len2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|middle
argument_list|,
name|last
argument_list|,
name|len2
argument_list|)
block|;
name|__inplace_merge
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|len1
argument_list|,
name|len2
argument_list|,
name|get_temporary_buffer
argument_list|(
name|len1
operator|+
name|len2
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|)
argument_list|,
operator|(
name|T
operator|*
operator|)
literal|0
argument_list|,
name|comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|BidirectionalIterator
operator|>
specifier|inline
name|void
name|inplace_merge
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|middle
operator|||
name|middle
operator|==
name|last
condition|)
return|return;
name|__inplace_merge_aux
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|void
name|inplace_merge
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator middle
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|middle
operator|||
name|middle
operator|==
name|last
condition|)
return|return;
name|__inplace_merge_aux
argument_list|(
name|first
argument_list|,
name|middle
argument_list|,
name|last
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|>
name|bool
name|includes
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
return|return
name|false
return|;
elseif|else
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
operator|++
name|first1
expr_stmt|;
else|else
operator|++
name|first1
operator|,
operator|++
name|first2
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first2
operator|==
name|last2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|Compare
operator|>
name|bool
name|includes
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
return|return
name|false
return|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
operator|++
name|first1
expr_stmt|;
else|else
operator|++
name|first1
operator|,
operator|++
name|first2
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first2
operator|==
name|last2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|set_union
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
block|{
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
name|first2
operator|++
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Compare
operator|>
name|OutputIterator
name|set_union
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
block|{
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|set_intersection
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
operator|++
name|first1
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
operator|++
name|first2
expr_stmt|;
else|else
block|{
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Compare
operator|>
name|OutputIterator
name|set_intersection
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
operator|++
name|first1
expr_stmt|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
operator|++
name|first2
expr_stmt|;
else|else
block|{
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|set_difference
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
operator|++
name|first2
expr_stmt|;
else|else
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Compare
operator|>
name|OutputIterator
name|set_difference
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
operator|++
name|first2
expr_stmt|;
else|else
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|set_symmetric_difference
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Compare
operator|>
name|OutputIterator
name|set_symmetric_difference
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Compare comp
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first1
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
operator|*
name|result
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
else|else
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|copy
argument_list|(
name|first2
argument_list|,
name|last2
argument_list|,
name|copy
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|,
name|result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|>
name|ForwardIterator
name|max_element
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
name|ForwardIterator
name|result
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|*
name|result
operator|<
operator|*
name|first
condition|)
name|result
operator|=
name|first
expr_stmt|;
end_while

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Compare
operator|>
name|ForwardIterator
name|max_element
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
name|ForwardIterator
name|result
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|result
argument_list|,
operator|*
name|first
argument_list|)
condition|)
name|result
operator|=
name|first
expr_stmt|;
end_while

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|>
name|ForwardIterator
name|min_element
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
name|ForwardIterator
name|result
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
operator|*
name|first
operator|<
operator|*
name|result
condition|)
name|result
operator|=
name|first
expr_stmt|;
end_while

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|Compare
operator|>
name|ForwardIterator
name|min_element
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|first
return|;
name|ForwardIterator
name|result
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first
argument_list|,
operator|*
name|result
argument_list|)
condition|)
name|result
operator|=
name|first
expr_stmt|;
end_while

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|>
name|bool
name|next_permutation
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|false
return|;
name|BidirectionalIterator
name|i
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|i
operator|==
name|last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|i
operator|=
name|last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|BidirectionalIterator
name|ii
init|=
name|i
operator|--
decl_stmt|;
if|if
condition|(
operator|*
name|i
operator|<
operator|*
name|ii
condition|)
block|{
name|BidirectionalIterator
name|j
init|=
name|last
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|*
name|i
operator|<
operator|*
operator|--
name|j
operator|)
condition|)
empty_stmt|;
name|iter_swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|ii
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|i
operator|==
name|first
condition|)
block|{
name|reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Compare
operator|>
name|bool
name|next_permutation
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|false
return|;
name|BidirectionalIterator
name|i
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|i
operator|==
name|last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|i
operator|=
name|last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|BidirectionalIterator
name|ii
init|=
name|i
operator|--
decl_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|i
argument_list|,
operator|*
name|ii
argument_list|)
condition|)
block|{
name|BidirectionalIterator
name|j
init|=
name|last
decl_stmt|;
while|while
condition|(
operator|!
name|comp
argument_list|(
operator|*
name|i
argument_list|,
operator|*
operator|--
name|j
argument_list|)
condition|)
empty_stmt|;
name|iter_swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|ii
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|i
operator|==
name|first
condition|)
block|{
name|reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|>
name|bool
name|prev_permutation
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|false
return|;
name|BidirectionalIterator
name|i
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|i
operator|==
name|last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|i
operator|=
name|last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|BidirectionalIterator
name|ii
init|=
name|i
operator|--
decl_stmt|;
if|if
condition|(
operator|*
name|ii
operator|<
operator|*
name|i
condition|)
block|{
name|BidirectionalIterator
name|j
init|=
name|last
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|*
operator|--
name|j
operator|<
operator|*
name|i
operator|)
condition|)
empty_stmt|;
name|iter_swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|ii
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|i
operator|==
name|first
condition|)
block|{
name|reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Compare
operator|>
name|bool
name|prev_permutation
argument_list|(
argument|BidirectionalIterator first
argument_list|,
argument|BidirectionalIterator last
argument_list|,
argument|Compare comp
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|false
return|;
name|BidirectionalIterator
name|i
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|i
operator|==
name|last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|i
operator|=
name|last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|BidirectionalIterator
name|ii
init|=
name|i
operator|--
decl_stmt|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|ii
argument_list|,
operator|*
name|i
argument_list|)
condition|)
block|{
name|BidirectionalIterator
name|j
init|=
name|last
decl_stmt|;
while|while
condition|(
operator|!
name|comp
argument_list|(
operator|*
operator|--
name|j
argument_list|,
operator|*
name|i
argument_list|)
condition|)
empty_stmt|;
name|iter_swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|ii
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|i
operator|==
name|first
condition|)
block|{
name|reverse
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|T
operator|>
name|T
name|accumulate
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|T init
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|init
operator|=
name|init
operator|+
operator|*
name|first
operator|++
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|init
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|T
operator|,
name|class
name|BinaryOperation
operator|>
name|T
name|accumulate
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|T init
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|init
operator|=
name|binary_op
argument_list|(
name|init
argument_list|,
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|init
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|T
operator|>
name|T
name|inner_product
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|T init
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
condition|)
name|init
operator|=
name|init
operator|+
operator|(
operator|*
name|first1
operator|++
operator|*
operator|*
name|first2
operator|++
operator|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|init
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|T
operator|,
name|class
name|BinaryOperation1
operator|,
name|class
name|BinaryOperation2
operator|>
name|T
name|inner_product
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|T init
argument_list|,
argument|BinaryOperation1 binary_op1
argument_list|,
argument|BinaryOperation2 binary_op2
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
condition|)
name|init
operator|=
name|binary_op1
argument_list|(
name|init
argument_list|,
name|binary_op2
argument_list|(
operator|*
name|first1
operator|++
argument_list|,
operator|*
name|first2
operator|++
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|init
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|__partial_sum
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
block|{
name|value
operator|=
name|value
operator|+
operator|*
name|first
expr_stmt|;
operator|*
operator|++
name|result
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|partial_sum
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__partial_sum
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|,
name|class
name|BinaryOperation
operator|>
name|OutputIterator
name|__partial_sum
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|T*
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
block|{
name|value
operator|=
name|binary_op
argument_list|(
name|value
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
operator|*
operator|++
name|result
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryOperation
operator|>
name|OutputIterator
name|partial_sum
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__partial_sum
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|binary_op
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|__adjacent_difference
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
block|{
name|T
name|tmp
init|=
operator|*
name|first
decl_stmt|;
operator|*
operator|++
name|result
operator|=
name|tmp
operator|-
name|value
expr_stmt|;
name|value
operator|=
name|tmp
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
name|OutputIterator
name|adjacent_difference
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__adjacent_difference
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|,
name|class
name|BinaryOperation
operator|>
name|OutputIterator
name|__adjacent_difference
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|T*
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
name|T
name|value
operator|=
operator|*
name|first
block|;
while|while
condition|(
operator|++
name|first
operator|!=
name|last
condition|)
block|{
name|T
name|tmp
init|=
operator|*
name|first
decl_stmt|;
operator|*
operator|++
name|result
operator|=
name|binary_op
argument_list|(
name|tmp
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|value
operator|=
name|tmp
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|BinaryOperation
operator|>
name|OutputIterator
name|adjacent_difference
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|BinaryOperation binary_op
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return
name|result
return|;
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__adjacent_difference
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|value_type
argument_list|(
name|first
argument_list|)
argument_list|,
name|binary_op
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
name|void
name|iota
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|T value
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
name|first
operator|++
operator|=
name|value
operator|++
expr_stmt|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

