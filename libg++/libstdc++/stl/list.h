begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LIST_H
end_ifndef

begin_define
define|#
directive|define
name|LIST_H
end_define

begin_include
include|#
directive|include
file|<function.h>
end_include

begin_include
include|#
directive|include
file|<algobase.h>
end_include

begin_include
include|#
directive|include
file|<iterator.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|Allocator
end_ifndef

begin_define
define|#
directive|define
name|Allocator
value|allocator
end_define

begin_include
include|#
directive|include
file|<defalloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|list
end_ifndef

begin_define
define|#
directive|define
name|list
value|list
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|list
block|{
name|protected
operator|:
typedef|typedef
name|Allocator
operator|<
name|void
operator|>
operator|::
name|pointer
name|void_pointer
expr_stmt|;
block|struct
name|list_node
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|friend
name|list_node
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|list_node
block|{
name|void_pointer
name|next
decl_stmt|;
name|void_pointer
name|prev
decl_stmt|;
name|T
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
specifier|static
name|Allocator
operator|<
name|list_node
operator|>
name|list_node_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|Allocator
operator|<
name|T
operator|>
name|value_allocator
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
name|value_allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node
operator|>
name|list_node_allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node
operator|>
operator|::
name|pointer
name|link_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node
operator|>
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|link_type
name|get_node
parameter_list|()
block|{
return|return
operator|(
name|link_type
operator|)
operator|(
operator|::
name|operator
name|new
argument_list|(
sizeof|sizeof
argument_list|(
name|list_node
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|void
name|put_node
parameter_list|(
name|link_type
name|p
parameter_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
name|size_type
name|buffer_size
parameter_list|()
block|{
return|return
name|list_node_allocator
operator|.
name|init_page_size
argument_list|()
return|;
block|}
end_function

begin_struct_decl
struct_decl|struct
name|list_node_buffer
struct_decl|;
end_struct_decl

begin_decl_stmt
name|friend
name|list_node_buffer
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|list_node_buffer
block|{
name|void_pointer
name|next_buffer
decl_stmt|;
name|link_type
name|buffer
decl_stmt|;
block|}
struct|;
end_struct

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node_buffer
operator|>
name|buffer_allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|list_node_buffer
operator|>
operator|::
name|pointer
name|buffer_pointer
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_expr_stmt
specifier|static
name|Allocator
operator|<
name|list_node_buffer
operator|>
name|buffer_allocator
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|buffer_pointer
name|buffer_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|link_type
name|free_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|link_type
name|next_avail
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|link_type
name|last
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|add_new_buffer
parameter_list|()
block|{
name|buffer_pointer
name|tmp
init|=
name|buffer_allocator
operator|.
name|allocate
argument_list|(
operator|(
name|size_type
operator|)
literal|1
argument_list|)
decl_stmt|;
name|tmp
operator|->
name|buffer
operator|=
name|list_node_allocator
operator|.
name|allocate
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|->
name|next_buffer
operator|=
name|buffer_list
expr_stmt|;
name|buffer_list
operator|=
name|tmp
expr_stmt|;
name|next_avail
operator|=
name|buffer_list
operator|->
name|buffer
expr_stmt|;
name|last
operator|=
name|next_avail
operator|+
name|buffer_size
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|static
name|size_type
name|number_of_lists
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|deallocate_buffers
parameter_list|()
function_decl|;
end_function_decl

begin_function
name|link_type
name|get_node
parameter_list|()
block|{
name|link_type
name|tmp
init|=
name|free_list
decl_stmt|;
return|return
name|free_list
condition|?
operator|(
name|free_list
operator|=
call|(
name|link_type
call|)
argument_list|(
name|free_list
operator|->
name|next
argument_list|)
operator|,
name|tmp
operator|)
else|:
operator|(
name|next_avail
operator|==
name|last
condition|?
operator|(
name|add_new_buffer
argument_list|()
operator|,
name|next_avail
operator|++
operator|)
else|:
name|next_avail
operator|++
operator|)
return|;
comment|// ugly code for inlining - avoids multiple returns
block|}
end_function

begin_function
name|void
name|put_node
parameter_list|(
name|link_type
name|p
parameter_list|)
block|{
name|p
operator|->
name|next
operator|=
name|free_list
expr_stmt|;
name|free_list
operator|=
name|p
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|link_type
name|node
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|length
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_decl_stmt
name|class
name|iterator
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|const_iterator
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|iterator
range|:
name|public
name|bidirectional_iterator
operator|<
name|T
decl_stmt|,
name|difference_type
decl|>
block|{
name|friend
name|class
name|list
operator|<
name|T
operator|>
expr_stmt|;
name|friend
name|class
name|const_iterator
decl_stmt|;
comment|//  friend bool operator==(const iterator& x, const iterator& y);
name|protected
label|:
name|link_type
name|node
decl_stmt|;
name|iterator
argument_list|(
argument|link_type x
argument_list|)
block|:
name|node
argument_list|(
argument|x
argument_list|)
block|{}
name|public
label|:
name|iterator
argument_list|()
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|==
name|x
operator|.
name|node
return|;
block|}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|*
name|node
operator|)
operator|.
name|data
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|const_iterator
range|:
name|public
name|bidirectional_iterator
operator|<
name|T
decl_stmt|,
name|difference_type
decl|>
block|{
name|friend
name|class
name|list
operator|<
name|T
operator|>
expr_stmt|;
name|protected
label|:
name|link_type
name|node
decl_stmt|;
name|const_iterator
argument_list|(
argument|link_type x
argument_list|)
block|:
name|node
argument_list|(
argument|x
argument_list|)
block|{}
name|public
label|:
name|const_iterator
argument_list|()
block|{}
name|const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|x
argument_list|)
operator|:
name|node
argument_list|(
argument|x.node
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|==
name|x
operator|.
name|node
return|;
block|}
name|const_reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|*
name|node
operator|)
operator|.
name|data
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_typedef
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|list
argument_list|()
operator|:
name|length
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
operator|++
name|number_of_lists
block|;
endif|#
directive|endif
name|node
operator|=
name|get_node
argument_list|()
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|next
operator|=
name|node
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
operator|=
name|node
block|;     }
name|iterator
name|begin
argument_list|()
block|{
return|return
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|node
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|node
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|length
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|length
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|list_node_allocator
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
block|{
operator|::
name|swap
argument_list|(
name|node
argument_list|,
name|x
operator|.
name|node
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|length
argument_list|,
name|x
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|link_type
name|tmp
init|=
name|get_node
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|construct
argument_list|(
operator|&
operator|(
operator|*
name|tmp
operator|)
operator|.
name|data
argument_list|,
name|x
argument_list|)
expr_stmt|;
else|#
directive|else
name|construct
argument_list|(
name|value_allocator
operator|.
name|address
argument_list|(
operator|(
operator|*
name|tmp
operator|)
operator|.
name|data
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|(
operator|*
name|tmp
operator|)
operator|.
name|next
operator|=
name|position
operator|.
name|node
expr_stmt|;
operator|(
operator|*
name|tmp
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|tmp
expr_stmt|;
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
name|tmp
expr_stmt|;
operator|++
name|length
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|*
name|first
parameter_list|,
specifier|const
name|T
modifier|*
name|last
parameter_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
name|insert
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|*
name|first
parameter_list|,
specifier|const
name|T
modifier|*
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|next
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|next
argument_list|)
operator|)
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|destroy
argument_list|(
operator|&
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|data
argument_list|)
expr_stmt|;
else|#
directive|else
name|destroy
argument_list|(
name|value_allocator
operator|.
name|address
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|data
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|put_node
argument_list|(
name|position
operator|.
name|node
argument_list|)
expr_stmt|;
operator|--
name|length
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|erase
argument_list|(
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
name|iterator
name|tmp
init|=
name|end
argument_list|()
decl_stmt|;
name|erase
argument_list|(
operator|--
name|tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_macro
name|list
argument_list|(
argument|size_type n
argument_list|,
argument|const T& value = T()
argument_list|)
end_macro

begin_macro
unit|:
name|length
argument_list|(
literal|0
argument_list|)
end_macro

begin_block
block|{
ifndef|#
directive|ifndef
name|__GNUG__
operator|++
name|number_of_lists
expr_stmt|;
endif|#
directive|endif
name|node
operator|=
name|get_node
argument_list|()
expr_stmt|;
operator|(
operator|*
name|node
operator|)
operator|.
name|next
operator|=
name|node
expr_stmt|;
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
operator|=
name|node
expr_stmt|;
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|list
argument_list|(
specifier|const
name|T
operator|*
name|first
argument_list|,
specifier|const
name|T
operator|*
name|last
argument_list|)
operator|:
name|length
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
operator|++
name|number_of_lists
block|;
endif|#
directive|endif
name|node
operator|=
name|get_node
argument_list|()
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|next
operator|=
name|node
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
operator|=
name|node
block|;
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;     }
name|list
argument_list|(
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
operator|:
name|length
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
operator|++
name|number_of_lists
block|;
endif|#
directive|endif
name|node
operator|=
name|get_node
argument_list|()
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|next
operator|=
name|node
block|;
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
operator|=
name|node
block|;
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
block|;     }
operator|~
name|list
argument_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
block|;
name|put_node
argument_list|(
name|node
argument_list|)
block|;
ifndef|#
directive|ifndef
name|__GNUG__
if|if
condition|(
operator|--
name|number_of_lists
operator|==
literal|0
condition|)
name|deallocate_buffers
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_expr_stmt

begin_expr_stmt
name|list
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|void
name|transfer
parameter_list|(
name|iterator
name|position
parameter_list|,
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|position
operator|.
name|node
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|last
operator|.
name|node
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|first
operator|.
name|node
expr_stmt|;
name|link_type
name|tmp
init|=
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
decl_stmt|;
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
name|tmp
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_decl_stmt
name|void
name|splice
argument_list|(
name|iterator
name|position
argument_list|,
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|empty
argument_list|()
condition|)
block|{
name|transfer
argument_list|(
name|position
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|length
operator|+=
name|x
operator|.
name|length
expr_stmt|;
name|x
operator|.
name|length
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|splice
argument_list|(
name|iterator
name|position
argument_list|,
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|,
name|iterator
name|i
argument_list|)
block|{
name|iterator
name|j
init|=
name|i
decl_stmt|;
if|if
condition|(
name|position
operator|==
name|i
operator|||
name|position
operator|==
operator|++
name|j
condition|)
return|return;
name|transfer
argument_list|(
name|position
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
operator|++
name|length
expr_stmt|;
operator|--
name|x
operator|.
name|length
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|splice
argument_list|(
name|iterator
name|position
argument_list|,
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|,
name|iterator
name|first
argument_list|,
name|iterator
name|last
argument_list|)
block|{
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|&
name|x
operator|!=
name|this
condition|)
block|{
name|difference_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|x
operator|.
name|length
operator|-=
name|n
expr_stmt|;
name|length
operator|+=
name|n
expr_stmt|;
block|}
name|transfer
argument_list|(
name|position
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_function_decl
name|void
name|remove
parameter_list|(
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|unique
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|merge
argument_list|(
name|list
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|reverse
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sort
parameter_list|()
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|friend
name|difference_type
modifier|*
name|distance_type
parameter_list|(
specifier|const
name|iterator
modifier|&
parameter_list|)
block|{
return|return
operator|(
name|difference_type
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|friend
name|T
modifier|*
name|value_type
parameter_list|(
specifier|const
name|iterator
modifier|&
parameter_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|friend
name|bidirectional_iterator_tag
name|iterator_category
parameter_list|(
name|iterator
parameter_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|buffer_pointer
name|list
operator|<
name|T
operator|>
operator|::
name|buffer_list
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|link_type
name|list
operator|<
name|T
operator|>
operator|::
name|free_list
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|link_type
name|list
operator|<
name|T
operator|>
operator|::
name|next_avail
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|link_type
name|list
operator|<
name|T
operator|>
operator|::
name|last
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|size_type
name|list
operator|<
name|T
operator|>
operator|::
name|number_of_lists
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|list_node_allocator_type
name|list
operator|<
name|T
operator|>
operator|::
name|list_node_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|value_allocator_type
name|list
operator|<
name|T
operator|>
operator|::
name|value_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|::
name|buffer_allocator_type
name|list
operator|<
name|T
operator|>
operator|::
name|buffer_allocator
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*   * currently the following does not work - made into a member function  template<class T> inline bool operator==(const list<T>::iterator& x, const list<T>::iterator& y) {      return x.node == y.node;  } */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|deallocate_buffers
argument_list|()
block|{
while|while
condition|(
name|buffer_list
condition|)
block|{
name|buffer_pointer
name|tmp
init|=
name|buffer_list
decl_stmt|;
name|buffer_list
operator|=
call|(
name|buffer_pointer
call|)
argument_list|(
name|buffer_list
operator|->
name|next_buffer
argument_list|)
expr_stmt|;
name|list_node_allocator
operator|.
name|deallocate
argument_list|(
name|tmp
operator|->
name|buffer
argument_list|)
expr_stmt|;
name|buffer_allocator
operator|.
name|deallocate
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|free_list
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|next_avail
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|last
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const T* first
argument_list|,
argument|const T* last
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|size_type n
argument_list|,
argument|const T& x
argument_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
name|insert
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator first
argument_list|,
argument|iterator last
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|erase
argument_list|(
name|first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|list
operator|<
name|T
operator|>
operator|&
name|list
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|T
operator|>
operator|&
name|x
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|x
condition|)
block|{
name|iterator
name|first1
init|=
name|begin
argument_list|()
decl_stmt|;
name|iterator
name|last1
init|=
name|end
argument_list|()
decl_stmt|;
name|const_iterator
name|first2
init|=
name|x
operator|.
name|begin
argument_list|()
decl_stmt|;
name|const_iterator
name|last2
init|=
name|x
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
operator|*
name|first1
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
name|erase
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|remove
argument_list|(
argument|const T& value
argument_list|)
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|iterator
name|next
init|=
name|first
decl_stmt|;
operator|++
name|next
expr_stmt|;
if|if
condition|(
operator|*
name|first
operator|==
name|value
condition|)
name|erase
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|unique
argument_list|()
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|iterator
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|next
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|==
operator|*
name|next
condition|)
name|erase
argument_list|(
name|next
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|first
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|merge
argument_list|(
argument|list<T>& x
argument_list|)
block|{
name|iterator
name|first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last1
operator|=
name|end
argument_list|()
block|;
name|iterator
name|first2
operator|=
name|x
operator|.
name|begin
argument_list|()
block|;
name|iterator
name|last2
operator|=
name|x
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
block|{
name|iterator
name|next
init|=
name|first2
decl_stmt|;
name|transfer
argument_list|(
name|first1
argument_list|,
name|first2
argument_list|,
operator|++
name|next
argument_list|)
expr_stmt|;
name|first2
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
operator|++
name|first1
expr_stmt|;
end_else

begin_if
if|if
condition|(
name|first2
operator|!=
name|last2
condition|)
name|transfer
argument_list|(
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|length
operator|+=
name|x
operator|.
name|length
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|x
operator|.
name|length
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|reverse
argument_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|iterator
name|first
init|=
operator|++
name|begin
argument_list|()
init|;
name|first
operator|!=
name|end
argument_list|()
condition|;
control|)
block|{
name|iterator
name|old
init|=
name|first
operator|++
decl_stmt|;
name|transfer
argument_list|(
name|begin
argument_list|()
argument_list|,
name|old
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
end_for

begin_expr_stmt
unit|}      template
operator|<
name|class
name|T
operator|>
name|void
name|list
operator|<
name|T
operator|>
operator|::
name|sort
argument_list|()
block|{
if|if
condition|(
name|size
argument_list|()
operator|<
literal|2
condition|)
return|return;
name|list
operator|<
name|T
operator|>
name|carry
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|list
operator|<
name|T
operator|>
name|counter
index|[
literal|64
index|]
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|fill
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|carry
operator|.
name|splice
argument_list|(
name|carry
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|this
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|fill
operator|&&
operator|!
name|counter
index|[
name|i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|carry
argument_list|)
expr_stmt|;
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|fill
condition|)
operator|++
name|fill
expr_stmt|;
block|}
end_while

begin_for
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fill
condition|;
operator|++
name|i
control|)
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|counter
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
name|swap
argument_list|(
name|counter
index|[
name|fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_undef
unit|}
undef|#
directive|undef
name|Allocator
end_undef

begin_undef
undef|#
directive|undef
name|list
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

