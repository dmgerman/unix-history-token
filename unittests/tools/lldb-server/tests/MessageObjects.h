begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MessageObjects.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-types.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatVariadic.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llgs_tests
block|{
name|class
name|ThreadInfo
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|uint64_t
operator|,
name|ThreadInfo
operator|>
name|ThreadInfoMap
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|uint64_t
operator|,
name|uint64_t
operator|>
name|U64Map
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
name|int
operator|,
name|std
operator|::
name|string
operator|>
name|RegisterMap
expr_stmt|;
name|class
name|ProcessInfo
block|{
name|public
label|:
specifier|static
name|llvm
operator|::
name|Expected
operator|<
name|ProcessInfo
operator|>
name|Create
argument_list|(
argument|llvm::StringRef response
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|pid_t
name|GetPid
argument_list|()
specifier|const
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|endianness
name|GetEndian
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|ProcessInfo
argument_list|()
operator|=
expr|default
expr_stmt|;
name|lldb
operator|::
name|pid_t
name|m_pid
expr_stmt|;
name|lldb
operator|::
name|pid_t
name|m_parent_pid
expr_stmt|;
name|uint32_t
name|m_real_uid
decl_stmt|;
name|uint32_t
name|m_real_gid
decl_stmt|;
name|uint32_t
name|m_effective_uid
decl_stmt|;
name|uint32_t
name|m_effective_gid
decl_stmt|;
name|std
operator|::
name|string
name|m_triple
expr_stmt|;
name|llvm
operator|::
name|SmallString
operator|<
literal|16
operator|>
name|m_ostype
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|endianness
name|m_endian
expr_stmt|;
name|unsigned
name|int
name|m_ptrsize
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ThreadInfo
block|{
name|public
label|:
name|ThreadInfo
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ThreadInfo
argument_list|(
argument|llvm::StringRef name
argument_list|,
argument|llvm::StringRef reason
argument_list|,
argument|const RegisterMap&registers
argument_list|,
argument|unsigned int signal
argument_list|)
empty_stmt|;
name|llvm
operator|::
name|StringRef
name|ReadRegister
argument_list|(
argument|unsigned int register_id
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|ReadRegisterAsUint64
argument_list|(
name|unsigned
name|int
name|register_id
argument_list|,
name|uint64_t
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|std
operator|::
name|string
name|m_reason
expr_stmt|;
name|RegisterMap
name|m_registers
decl_stmt|;
name|unsigned
name|int
name|m_signal
decl_stmt|;
block|}
empty_stmt|;
name|class
name|JThreadsInfo
block|{
name|public
label|:
specifier|static
name|llvm
operator|::
name|Expected
operator|<
name|JThreadsInfo
operator|>
name|Create
argument_list|(
argument|llvm::StringRef response
argument_list|,
argument|llvm::support::endianness endian
argument_list|)
expr_stmt|;
specifier|const
name|ThreadInfoMap
operator|&
name|GetThreadInfos
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|JThreadsInfo
argument_list|()
operator|=
expr|default
expr_stmt|;
name|ThreadInfoMap
name|m_thread_infos
decl_stmt|;
block|}
empty_stmt|;
name|class
name|StopReply
block|{
name|public
label|:
specifier|static
name|llvm
operator|::
name|Expected
operator|<
name|StopReply
operator|>
name|Create
argument_list|(
argument|llvm::StringRef response
argument_list|,
argument|llvm::support::endianness endian
argument_list|)
expr_stmt|;
specifier|const
name|U64Map
operator|&
name|GetThreadPcs
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|StopReply
argument_list|()
operator|=
expr|default
expr_stmt|;
name|void
name|ParseResponse
argument_list|(
name|llvm
operator|::
name|StringRef
name|response
argument_list|,
name|llvm
operator|::
name|support
operator|::
name|endianness
name|endian
argument_list|)
decl_stmt|;
name|unsigned
name|int
name|m_signal
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|m_thread
expr_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|U64Map
name|m_thread_pcs
decl_stmt|;
name|RegisterMap
name|m_registers
decl_stmt|;
name|std
operator|::
name|string
name|m_reason
expr_stmt|;
block|}
empty_stmt|;
comment|// Common functions for parsing packet data.
name|llvm
operator|::
name|Expected
operator|<
name|llvm
operator|::
name|StringMap
operator|<
name|llvm
operator|::
name|StringRef
operator|>>
name|SplitPairList
argument_list|(
argument|llvm::StringRef caller
argument_list|,
argument|llvm::StringRef s
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|llvm
operator|::
name|Error
name|make_parsing_error
argument_list|(
argument|llvm::StringRef format
argument_list|,
argument|Args&&... args
argument_list|)
block|{
name|std
operator|::
name|string
name|error
operator|=
literal|"Unable to parse "
operator|+
name|llvm
operator|::
name|formatv
argument_list|(
name|format
operator|.
name|data
argument_list|()
argument_list|,
name|std
operator|::
name|forward
operator|<
name|Args
operator|>
operator|(
name|args
operator|)
operator|...
argument_list|)
operator|.
name|str
argument_list|()
block|;
return|return
name|llvm
operator|::
name|make_error
operator|<
name|llvm
operator|::
name|StringError
operator|>
operator|(
name|error
operator|,
name|llvm
operator|::
name|inconvertibleErrorCode
argument_list|()
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace llgs_tests
end_comment

end_unit

