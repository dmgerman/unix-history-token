begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------ OrcTestCommon.h - Utilities for Orc Unit Tests ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Common utilities for the Orc unit tests.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_UNITTESTS_EXECUTIONENGINE_ORC_ORCTESTCOMMON_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_UNITTESTS_EXECUTIONENGINE_ORC_ORCTESTCOMMON_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IRBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/LLVMContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/TypeBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ObjectFile.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/ExecutionEngine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JITSymbol.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TargetSelect.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// Base class for Orc tests that will execute code.
name|class
name|OrcExecutionTest
block|{
name|public
label|:
name|OrcExecutionTest
argument_list|()
block|{
if|if
condition|(
operator|!
name|NativeTargetInitialized
condition|)
block|{
name|InitializeNativeTarget
argument_list|()
expr_stmt|;
name|InitializeNativeTargetAsmParser
argument_list|()
expr_stmt|;
name|InitializeNativeTargetAsmPrinter
argument_list|()
expr_stmt|;
name|NativeTargetInitialized
operator|=
name|true
expr_stmt|;
block|}
comment|// Try to select a TargetMachine for the host.
name|TM
operator|.
name|reset
argument_list|(
name|EngineBuilder
argument_list|()
operator|.
name|selectTarget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|TM
condition|)
block|{
comment|// If we found a TargetMachine, check that it's one that Orc supports.
specifier|const
name|Triple
modifier|&
name|TT
init|=
name|TM
operator|->
name|getTargetTriple
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|TT
operator|.
name|getArch
argument_list|()
operator|!=
name|Triple
operator|::
name|x86_64
operator|&&
name|TT
operator|.
name|getArch
argument_list|()
operator|!=
name|Triple
operator|::
name|x86
operator|)
operator|||
name|TT
operator|.
name|isOSWindows
argument_list|()
condition|)
name|TM
operator|=
name|nullptr
expr_stmt|;
block|}
block|}
empty_stmt|;
name|protected
label|:
name|LLVMContext
name|Context
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|TargetMachine
operator|>
name|TM
expr_stmt|;
name|private
label|:
specifier|static
name|bool
name|NativeTargetInitialized
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ModuleBuilder
block|{
name|public
label|:
name|ModuleBuilder
argument_list|(
argument|LLVMContext&Context
argument_list|,
argument|StringRef Triple
argument_list|,
argument|StringRef Name
argument_list|)
empty_stmt|;
name|template
operator|<
name|typename
name|FuncType
operator|>
name|Function
operator|*
name|createFunctionDecl
argument_list|(
argument|StringRef Name
argument_list|)
block|{
return|return
name|Function
operator|::
name|Create
argument_list|(
name|TypeBuilder
operator|<
name|FuncType
argument_list|,
name|false
operator|>
operator|::
name|get
argument_list|(
name|M
operator|->
name|getContext
argument_list|()
argument_list|)
argument_list|,
name|GlobalValue
operator|::
name|ExternalLinkage
argument_list|,
name|Name
argument_list|,
name|M
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
name|Module
modifier|*
name|getModule
parameter_list|()
block|{
return|return
name|M
operator|.
name|get
argument_list|()
return|;
block|}
specifier|const
name|Module
operator|*
name|getModule
argument_list|()
specifier|const
block|{
return|return
name|M
operator|.
name|get
argument_list|()
return|;
block|}
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|takeModule
argument_list|()
block|{
return|return
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
return|;
block|}
name|private
label|:
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|M
expr_stmt|;
block|}
empty_stmt|;
comment|// Dummy struct type.
struct|struct
name|DummyStruct
block|{
name|int
name|X
index|[
literal|256
index|]
decl_stmt|;
block|}
struct|;
comment|// TypeBuilder specialization for DummyStruct.
name|template
operator|<
name|bool
name|XCompile
operator|>
name|class
name|TypeBuilder
operator|<
name|DummyStruct
operator|,
name|XCompile
operator|>
block|{
name|public
operator|:
specifier|static
name|StructType
operator|*
name|get
argument_list|(
argument|LLVMContext&Context
argument_list|)
block|{
return|return
name|StructType
operator|::
name|get
argument_list|(
name|TypeBuilder
operator|<
name|types
operator|::
name|i
operator|<
literal|32
operator|>
index|[
literal|256
index|]
argument_list|,
name|XCompile
operator|>
operator|::
name|get
argument_list|(
name|Context
argument_list|)
argument_list|,
name|nullptr
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
name|typename
name|HandleT
block|,
name|typename
name|AddModuleSetFtor
block|,
name|typename
name|RemoveModuleSetFtor
block|,
name|typename
name|FindSymbolFtor
block|,
name|typename
name|FindSymbolInFtor
operator|>
name|class
name|MockBaseLayer
block|{
name|public
operator|:
typedef|typedef
name|HandleT
name|ModuleSetHandleT
typedef|;
name|MockBaseLayer
argument_list|(
name|AddModuleSetFtor
operator|&&
name|AddModuleSet
argument_list|,
name|RemoveModuleSetFtor
operator|&&
name|RemoveModuleSet
argument_list|,
name|FindSymbolFtor
operator|&&
name|FindSymbol
argument_list|,
name|FindSymbolInFtor
operator|&&
name|FindSymbolIn
argument_list|)
operator|:
name|AddModuleSet
argument_list|(
name|AddModuleSet
argument_list|)
operator|,
name|RemoveModuleSet
argument_list|(
name|RemoveModuleSet
argument_list|)
operator|,
name|FindSymbol
argument_list|(
name|FindSymbol
argument_list|)
operator|,
name|FindSymbolIn
argument_list|(
argument|FindSymbolIn
argument_list|)
block|{}
name|template
operator|<
name|typename
name|ModuleSetT
block|,
name|typename
name|MemoryManagerPtrT
block|,
name|typename
name|SymbolResolverPtrT
operator|>
name|ModuleSetHandleT
name|addModuleSet
argument_list|(
argument|ModuleSetT Ms
argument_list|,
argument|MemoryManagerPtrT MemMgr
argument_list|,
argument|SymbolResolverPtrT Resolver
argument_list|)
block|{
return|return
name|AddModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Ms
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|MemMgr
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
return|;
block|}
name|void
name|removeModuleSet
argument_list|(
argument|ModuleSetHandleT H
argument_list|)
block|{
name|RemoveModuleSet
argument_list|(
name|H
argument_list|)
block|;   }
name|JITSymbol
name|findSymbol
argument_list|(
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
block|{
return|return
name|FindSymbol
argument_list|(
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
name|JITSymbol
name|findSymbolIn
argument_list|(
argument|ModuleSetHandleT H
argument_list|,
argument|const std::string&Name
argument_list|,
argument|bool ExportedSymbolsOnly
argument_list|)
block|{
return|return
name|FindSymbolIn
argument_list|(
name|H
argument_list|,
name|Name
argument_list|,
name|ExportedSymbolsOnly
argument_list|)
return|;
block|}
name|private
operator|:
name|AddModuleSetFtor
name|AddModuleSet
block|;
name|RemoveModuleSetFtor
name|RemoveModuleSet
block|;
name|FindSymbolFtor
name|FindSymbol
block|;
name|FindSymbolInFtor
name|FindSymbolIn
block|; }
expr_stmt|;
name|template
operator|<
name|typename
name|ModuleSetHandleT
operator|,
name|typename
name|AddModuleSetFtor
operator|,
name|typename
name|RemoveModuleSetFtor
operator|,
name|typename
name|FindSymbolFtor
operator|,
name|typename
name|FindSymbolInFtor
operator|>
name|MockBaseLayer
operator|<
name|ModuleSetHandleT
operator|,
name|AddModuleSetFtor
operator|,
name|RemoveModuleSetFtor
operator|,
name|FindSymbolFtor
operator|,
name|FindSymbolInFtor
operator|>
name|createMockBaseLayer
argument_list|(
argument|AddModuleSetFtor&&AddModuleSet
argument_list|,
argument|RemoveModuleSetFtor&&RemoveModuleSet
argument_list|,
argument|FindSymbolFtor&&FindSymbol
argument_list|,
argument|FindSymbolInFtor&&FindSymbolIn
argument_list|)
block|{
return|return
name|MockBaseLayer
operator|<
name|ModuleSetHandleT
operator|,
name|AddModuleSetFtor
operator|,
name|RemoveModuleSetFtor
operator|,
name|FindSymbolFtor
operator|,
name|FindSymbolInFtor
operator|>
operator|(
name|std
operator|::
name|forward
operator|<
name|AddModuleSetFtor
operator|>
operator|(
name|AddModuleSet
operator|)
operator|,
name|std
operator|::
name|forward
operator|<
name|RemoveModuleSetFtor
operator|>
operator|(
name|RemoveModuleSet
operator|)
operator|,
name|std
operator|::
name|forward
operator|<
name|FindSymbolFtor
operator|>
operator|(
name|FindSymbol
operator|)
operator|,
name|std
operator|::
name|forward
operator|<
name|FindSymbolInFtor
operator|>
operator|(
name|FindSymbolIn
operator|)
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|ReturnT
operator|>
name|class
name|DoNothingAndReturn
block|{
name|public
operator|:
name|DoNothingAndReturn
argument_list|(
argument|ReturnT Val
argument_list|)
operator|:
name|Val
argument_list|(
argument|Val
argument_list|)
block|{}
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|ReturnT
name|operator
argument_list|()
operator|(
name|Args
operator|...
operator|)
specifier|const
block|{
return|return
name|Val
return|;
block|}
name|private
operator|:
name|ReturnT
name|Val
block|; }
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|DoNothingAndReturn
operator|<
name|void
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
operator|...
name|Args
operator|>
name|void
name|operator
argument_list|()
operator|(
name|Args
operator|...
operator|)
specifier|const
block|{ }
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

