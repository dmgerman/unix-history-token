begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------- Queue.h - RPC Queue ------------------*-c++-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_UNITTESTS_EXECUTIONENGINE_ORC_QUEUECHANNEL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_UNITTESTS_EXECUTIONENGINE_ORC_QUEUECHANNEL_H
end_define

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/RawByteChannel.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Error.h"
end_include

begin_include
include|#
directive|include
file|<queue>
end_include

begin_include
include|#
directive|include
file|<condition_variable>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|QueueChannelError
range|:
name|public
name|ErrorInfo
operator|<
name|QueueChannelError
operator|>
block|{
name|public
operator|:
specifier|static
name|char
name|ID
block|; }
decl_stmt|;
name|class
name|QueueChannelClosedError
range|:
name|public
name|ErrorInfo
operator|<
name|QueueChannelClosedError
decl_stmt|,
name|QueueChannelError
decl|>
block|{
name|public
label|:
specifier|static
name|char
name|ID
decl_stmt|;
name|std
operator|::
name|error_code
name|convertToErrorCode
argument_list|()
specifier|const
name|override
block|{
return|return
name|inconvertibleErrorCode
argument_list|()
return|;
block|}
name|void
name|log
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
name|override
block|{
name|OS
operator|<<
literal|"Queue closed"
expr_stmt|;
block|}
block|}
empty_stmt|;
name|class
name|Queue
range|:
name|public
name|std
operator|::
name|queue
operator|<
name|char
operator|>
block|{
name|public
operator|:
name|using
name|ErrorInjector
operator|=
name|std
operator|::
name|function
operator|<
name|Error
argument_list|()
operator|>
block|;
name|Queue
argument_list|()
operator|:
name|ReadError
argument_list|(
index|[]
operator|(
operator|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
argument_list|)
block|,
name|WriteError
argument_list|(
argument|[]() { return Error::success(); }
argument_list|)
block|{}
name|Queue
argument_list|(
specifier|const
name|Queue
operator|&
argument_list|)
operator|=
name|delete
block|;
name|Queue
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Queue
operator|&
operator|)
operator|=
name|delete
block|;
name|Queue
argument_list|(
name|Queue
operator|&&
argument_list|)
operator|=
name|delete
block|;
name|Queue
operator|&
name|operator
operator|=
operator|(
name|Queue
operator|&&
operator|)
operator|=
name|delete
block|;
name|std
operator|::
name|mutex
operator|&
name|getMutex
argument_list|()
block|{
return|return
name|M
return|;
block|}
name|std
operator|::
name|condition_variable
operator|&
name|getCondVar
argument_list|()
block|{
return|return
name|CV
return|;
block|}
name|Error
name|checkReadError
argument_list|()
block|{
return|return
name|ReadError
argument_list|()
return|;
block|}
name|Error
name|checkWriteError
argument_list|()
block|{
return|return
name|WriteError
argument_list|()
return|;
block|}
name|void
name|setReadError
argument_list|(
argument|ErrorInjector NewReadError
argument_list|)
block|{
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|M
argument_list|)
block|;
name|ReadError
operator|=
name|std
operator|::
name|move
argument_list|(
name|NewReadError
argument_list|)
block|;     }
name|CV
operator|.
name|notify_one
argument_list|()
block|;   }
name|void
name|setWriteError
argument_list|(
argument|ErrorInjector NewWriteError
argument_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|M
argument_list|)
block|;
name|WriteError
operator|=
name|std
operator|::
name|move
argument_list|(
name|NewWriteError
argument_list|)
block|;   }
name|private
operator|:
name|std
operator|::
name|mutex
name|M
block|;
name|std
operator|::
name|condition_variable
name|CV
block|;
name|std
operator|::
name|function
operator|<
name|Error
argument_list|()
operator|>
name|ReadError
block|,
name|WriteError
block|; }
decl_stmt|;
name|class
name|QueueChannel
range|:
name|public
name|orc
operator|::
name|rpc
operator|::
name|RawByteChannel
block|{
name|public
operator|:
name|QueueChannel
argument_list|(
name|std
operator|::
name|shared_ptr
operator|<
name|Queue
operator|>
name|InQueue
argument_list|,
name|std
operator|::
name|shared_ptr
operator|<
name|Queue
operator|>
name|OutQueue
argument_list|)
operator|:
name|InQueue
argument_list|(
name|InQueue
argument_list|)
block|,
name|OutQueue
argument_list|(
argument|OutQueue
argument_list|)
block|{}
name|QueueChannel
argument_list|(
specifier|const
name|QueueChannel
operator|&
argument_list|)
operator|=
name|delete
block|;
name|QueueChannel
operator|&
name|operator
operator|=
operator|(
specifier|const
name|QueueChannel
operator|&
operator|)
operator|=
name|delete
block|;
name|QueueChannel
argument_list|(
name|QueueChannel
operator|&&
argument_list|)
operator|=
name|delete
block|;
name|QueueChannel
operator|&
name|operator
operator|=
operator|(
name|QueueChannel
operator|&&
operator|)
operator|=
name|delete
block|;
name|Error
name|readBytes
argument_list|(
argument|char *Dst
argument_list|,
argument|unsigned Size
argument_list|)
name|override
block|{
name|std
operator|::
name|unique_lock
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|InQueue
operator|->
name|getMutex
argument_list|()
argument_list|)
block|;
while|while
condition|(
name|Size
condition|)
block|{
block|{
name|Error
name|Err
init|=
name|InQueue
operator|->
name|checkReadError
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|Err
operator|&&
name|InQueue
operator|->
name|empty
argument_list|()
condition|)
block|{
name|InQueue
operator|->
name|getCondVar
argument_list|()
operator|.
name|wait
argument_list|(
name|Lock
argument_list|)
expr_stmt|;
name|Err
operator|=
name|InQueue
operator|->
name|checkReadError
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Err
condition|)
return|return
name|Err
return|;
block|}
operator|*
name|Dst
operator|++
operator|=
name|InQueue
operator|->
name|front
argument_list|()
expr_stmt|;
operator|--
name|Size
block|;
operator|++
name|NumRead
block|;
name|InQueue
operator|->
name|pop
argument_list|()
block|;     }
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_decl_stmt

begin_function
name|Error
name|appendBytes
parameter_list|(
specifier|const
name|char
modifier|*
name|Src
parameter_list|,
name|unsigned
name|Size
parameter_list|)
function|override
block|{
name|std
operator|::
name|unique_lock
operator|<
name|std
operator|::
name|mutex
operator|>
name|Lock
argument_list|(
name|OutQueue
operator|->
name|getMutex
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|Size
operator|--
condition|)
block|{
if|if
condition|(
name|Error
name|Err
init|=
name|OutQueue
operator|->
name|checkWriteError
argument_list|()
condition|)
return|return
name|Err
return|;
name|OutQueue
operator|->
name|push
argument_list|(
operator|*
name|Src
operator|++
argument_list|)
expr_stmt|;
operator|++
name|NumWritten
expr_stmt|;
block|}
name|OutQueue
operator|->
name|getCondVar
argument_list|()
operator|.
name|notify_one
argument_list|()
expr_stmt|;
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_function
name|Error
name|send
parameter_list|()
function|override
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|close
parameter_list|()
block|{
name|auto
name|ChannelClosed
init|=
index|[]
operator|(
operator|)
block|{
return|return
name|make_error
operator|<
name|QueueChannelClosedError
operator|>
operator|(
operator|)
return|;
block|}
empty_stmt|;
name|InQueue
operator|->
name|setReadError
argument_list|(
name|ChannelClosed
argument_list|)
expr_stmt|;
name|InQueue
operator|->
name|setWriteError
argument_list|(
name|ChannelClosed
argument_list|)
expr_stmt|;
name|OutQueue
operator|->
name|setReadError
argument_list|(
name|ChannelClosed
argument_list|)
expr_stmt|;
name|OutQueue
operator|->
name|setWriteError
argument_list|(
name|ChannelClosed
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|uint64_t
name|NumWritten
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|NumRead
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|Queue
operator|>
name|InQueue
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|shared_ptr
operator|<
name|Queue
operator|>
name|OutQueue
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|QueueChannel
operator|>
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|QueueChannel
operator|>>
name|createPairedQueueChannels
argument_list|()
block|{
name|auto
name|Q1
operator|=
name|std
operator|::
name|make_shared
operator|<
name|Queue
operator|>
operator|(
operator|)
block|;
name|auto
name|Q2
operator|=
name|std
operator|::
name|make_shared
operator|<
name|Queue
operator|>
operator|(
operator|)
block|;
name|auto
name|C1
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|QueueChannel
operator|>
operator|(
name|Q1
operator|,
name|Q2
operator|)
block|;
name|auto
name|C2
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|QueueChannel
operator|>
operator|(
name|Q2
operator|,
name|Q1
operator|)
block|;
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|C1
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|C2
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

