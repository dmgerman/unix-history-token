begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- JITEventListenerTestCommon.h - Helper for JITEventListener tests ------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===-------------------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|JIT_EVENT_LISTENER_TEST_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|JIT_EVENT_LISTENER_TEST_COMMON_H
end_define

begin_include
include|#
directive|include
file|"llvm/DIBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/DebugInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IRBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/TypeBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineCodeInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JIT.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JITEventListener.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Dwarf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TargetSelect.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Config/config.h"
end_include

begin_include
include|#
directive|include
file|"gtest/gtest.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|std
operator|::
name|string
operator|,
name|unsigned
name|int
operator|>
expr|>
name|SourceLocations
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint64_t
operator|,
name|SourceLocations
operator|>
name|NativeCodeMap
expr_stmt|;
end_typedef

begin_decl_stmt
name|class
name|JITEnvironment
range|:
name|public
name|testing
operator|::
name|Environment
block|{
name|virtual
name|void
name|SetUp
argument_list|()
block|{
comment|// Required to create a JIT.
name|llvm
operator|::
name|InitializeNativeTarget
argument_list|()
block|;   }
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|inline
name|unsigned
name|int
name|getLine
parameter_list|()
block|{
return|return
literal|12
return|;
block|}
end_function

begin_function
specifier|inline
name|unsigned
name|int
name|getCol
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
specifier|const
name|char
modifier|*
name|getFilename
parameter_list|()
block|{
return|return
literal|"mock_source_file.cpp"
return|;
block|}
end_function

begin_comment
comment|// Test fixture shared by tests for listener implementations
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|WrapperT
operator|>
name|class
name|JITEventListenerTestBase
operator|:
name|public
name|testing
operator|::
name|Test
block|{
name|protected
operator|:
name|llvm
operator|::
name|OwningPtr
operator|<
name|WrapperT
operator|>
name|MockWrapper
block|;
name|llvm
operator|::
name|OwningPtr
operator|<
name|llvm
operator|::
name|JITEventListener
operator|>
name|Listener
block|;
name|public
operator|:
name|llvm
operator|::
name|Module
operator|*
name|M
block|;
name|llvm
operator|::
name|MDNode
operator|*
name|Scope
block|;
name|llvm
operator|::
name|ExecutionEngine
operator|*
name|EE
block|;
name|llvm
operator|::
name|DIBuilder
operator|*
name|DebugBuilder
block|;
name|llvm
operator|::
name|IRBuilder
operator|<
operator|>
name|Builder
block|;
name|JITEventListenerTestBase
argument_list|(
name|WrapperT
operator|*
name|w
argument_list|)
operator|:
name|MockWrapper
argument_list|(
name|w
argument_list|)
block|,
name|M
argument_list|(
argument|new llvm::Module(
literal|"module"
argument|, llvm::getGlobalContext())
argument_list|)
block|,
name|EE
argument_list|(
name|llvm
operator|::
name|EngineBuilder
argument_list|(
name|M
argument_list|)
operator|.
name|setEngineKind
argument_list|(
name|llvm
operator|::
name|EngineKind
operator|::
name|JIT
argument_list|)
operator|.
name|setOptLevel
argument_list|(
name|llvm
operator|::
name|CodeGenOpt
operator|::
name|None
argument_list|)
operator|.
name|create
argument_list|()
argument_list|)
block|,
name|DebugBuilder
argument_list|(
argument|new llvm::DIBuilder(*M)
argument_list|)
block|,
name|Builder
argument_list|(
argument|llvm::getGlobalContext()
argument_list|)
block|{
name|DebugBuilder
operator|->
name|createCompileUnit
argument_list|(
name|llvm
operator|::
name|dwarf
operator|::
name|DW_LANG_C_plus_plus
argument_list|,
literal|"JIT"
argument_list|,
literal|"JIT"
argument_list|,
literal|"JIT"
argument_list|,
name|true
argument_list|,
literal|""
argument_list|,
literal|1
argument_list|)
block|;
name|Scope
operator|=
name|DebugBuilder
operator|->
name|createFile
argument_list|(
name|getFilename
argument_list|()
argument_list|,
literal|"."
argument_list|)
block|;   }
name|llvm
operator|::
name|Function
operator|*
name|buildFunction
argument_list|(
argument|const SourceLocations& DebugLocations
argument_list|)
block|{
name|using
name|namespace
name|llvm
block|;
name|LLVMContext
operator|&
name|GlobalContext
operator|=
name|getGlobalContext
argument_list|()
block|;
name|SourceLocations
operator|::
name|const_iterator
name|CurrentDebugLocation
operator|=
name|DebugLocations
operator|.
name|begin
argument_list|()
block|;
if|if
condition|(
name|CurrentDebugLocation
operator|!=
name|DebugLocations
operator|.
name|end
argument_list|()
condition|)
block|{
name|DebugLoc
name|DebugLocation
init|=
name|DebugLoc
operator|::
name|get
argument_list|(
name|getLine
argument_list|()
argument_list|,
name|getCol
argument_list|()
argument_list|,
name|DebugBuilder
operator|->
name|createFile
argument_list|(
name|CurrentDebugLocation
operator|->
name|first
argument_list|,
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
name|Builder
operator|.
name|SetCurrentDebugLocation
argument_list|(
name|DebugLocation
argument_list|)
expr_stmt|;
name|CurrentDebugLocation
operator|++
expr_stmt|;
block|}
name|Function
operator|*
name|Result
operator|=
name|Function
operator|::
name|Create
argument_list|(
name|TypeBuilder
operator|<
name|int32_t
argument_list|(
name|int32_t
argument_list|)
argument_list|,
name|false
operator|>
operator|::
name|get
argument_list|(
name|GlobalContext
argument_list|)
argument_list|,
name|GlobalValue
operator|::
name|ExternalLinkage
argument_list|,
literal|"id"
argument_list|,
name|M
argument_list|)
block|;
name|Value
operator|*
name|Arg
operator|=
name|Result
operator|->
name|arg_begin
argument_list|()
block|;
name|BasicBlock
operator|*
name|BB
operator|=
name|BasicBlock
operator|::
name|Create
argument_list|(
name|M
operator|->
name|getContext
argument_list|()
argument_list|,
literal|"entry"
argument_list|,
name|Result
argument_list|)
block|;
name|Builder
operator|.
name|SetInsertPoint
argument_list|(
name|BB
argument_list|)
block|;
name|Value
operator|*
name|one
operator|=
name|ConstantInt
operator|::
name|get
argument_list|(
name|GlobalContext
argument_list|,
name|APInt
argument_list|(
literal|32
argument_list|,
literal|1
argument_list|)
argument_list|)
block|;
for|for
control|(
init|;
name|CurrentDebugLocation
operator|!=
name|DebugLocations
operator|.
name|end
argument_list|()
condition|;
operator|++
name|CurrentDebugLocation
control|)
block|{
name|Arg
operator|=
name|Builder
operator|.
name|CreateMul
argument_list|(
name|Arg
argument_list|,
name|Builder
operator|.
name|CreateAdd
argument_list|(
name|Arg
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|Builder
operator|.
name|SetCurrentDebugLocation
argument_list|(
name|DebugLoc
operator|::
name|get
argument_list|(
name|CurrentDebugLocation
operator|->
name|second
argument_list|,
literal|0
argument_list|,
name|DebugBuilder
operator|->
name|createFile
argument_list|(
name|CurrentDebugLocation
operator|->
name|first
argument_list|,
literal|"."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Builder
operator|.
name|CreateRet
argument_list|(
name|Arg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Result
return|;
end_return

begin_macro
unit|}    void
name|TestNoDebugInfo
argument_list|(
argument|NativeCodeMap& ReportedDebugFuncs
argument_list|)
end_macro

begin_block
block|{
name|SourceLocations
name|DebugLocations
decl_stmt|;
name|llvm
operator|::
name|Function
operator|*
name|f
operator|=
name|buildFunction
argument_list|(
name|DebugLocations
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|f
argument_list|)
expr_stmt|;
comment|//Cause JITting and callbacks to our listener
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|EE
operator|->
name|getPointerToFunction
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|1
operator|==
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EE
operator|->
name|freeMachineCodeForFunction
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
name|void
name|TestSingleLine
parameter_list|(
name|NativeCodeMap
modifier|&
name|ReportedDebugFuncs
parameter_list|)
block|{
name|SourceLocations
name|DebugLocations
decl_stmt|;
name|DebugLocations
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|getFilename
argument_list|()
argument_list|)
argument_list|,
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|Function
operator|*
name|f
operator|=
name|buildFunction
argument_list|(
name|DebugLocations
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|EE
operator|->
name|getPointerToFunction
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|1
operator|==
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_STREQ
argument_list|(
name|ReportedDebugFuncs
operator|.
name|begin
argument_list|()
operator|->
name|second
operator|.
name|begin
argument_list|()
operator|->
name|first
operator|.
name|c_str
argument_list|()
argument_list|,
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|ReportedDebugFuncs
operator|.
name|begin
argument_list|()
operator|->
name|second
operator|.
name|begin
argument_list|()
operator|->
name|second
argument_list|,
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|EE
operator|->
name|freeMachineCodeForFunction
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|TestMultipleLines
parameter_list|(
name|NativeCodeMap
modifier|&
name|ReportedDebugFuncs
parameter_list|)
block|{
name|using
name|namespace
name|std
decl_stmt|;
name|SourceLocations
name|DebugLocations
decl_stmt|;
name|unsigned
name|int
name|c
init|=
literal|5
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
operator|++
name|i
control|)
block|{
name|DebugLocations
operator|.
name|push_back
argument_list|(
name|make_pair
argument_list|(
name|string
argument_list|(
name|getFilename
argument_list|()
argument_list|)
argument_list|,
name|getLine
argument_list|()
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|llvm
operator|::
name|Function
operator|*
name|f
operator|=
name|buildFunction
argument_list|(
name|DebugLocations
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|EE
operator|->
name|getPointerToFunction
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|1
operator|==
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SourceLocations
modifier|&
name|FunctionInfo
init|=
name|ReportedDebugFuncs
operator|.
name|begin
argument_list|()
operator|->
name|second
decl_stmt|;
name|EXPECT_EQ
argument_list|(
name|c
argument_list|,
name|FunctionInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|VerifyCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SourceLocations
operator|::
name|iterator
name|i
operator|=
name|FunctionInfo
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|FunctionInfo
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|EXPECT_STREQ
argument_list|(
name|i
operator|->
name|first
operator|.
name|c_str
argument_list|()
argument_list|,
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|i
operator|->
name|second
argument_list|,
name|getLine
argument_list|()
operator|+
name|VerifyCount
argument_list|)
expr_stmt|;
name|VerifyCount
operator|++
expr_stmt|;
block|}
name|EE
operator|->
name|freeMachineCodeForFunction
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|TestMultipleFiles
parameter_list|(
name|NativeCodeMap
modifier|&
name|ReportedDebugFuncs
parameter_list|)
block|{
name|std
operator|::
name|string
name|secondFilename
argument_list|(
literal|"another_file.cpp"
argument_list|)
expr_stmt|;
name|SourceLocations
name|DebugLocations
decl_stmt|;
name|DebugLocations
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|std
operator|::
name|string
argument_list|(
name|getFilename
argument_list|()
argument_list|)
argument_list|,
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DebugLocations
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|secondFilename
argument_list|,
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|Function
operator|*
name|f
operator|=
name|buildFunction
argument_list|(
name|DebugLocations
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|0
operator|!=
name|EE
operator|->
name|getPointerToFunction
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|1
operator|==
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SourceLocations
modifier|&
name|FunctionInfo
init|=
name|ReportedDebugFuncs
operator|.
name|begin
argument_list|()
operator|->
name|second
decl_stmt|;
name|EXPECT_TRUE
argument_list|(
literal|2
operator|==
name|FunctionInfo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_STREQ
argument_list|(
name|FunctionInfo
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|first
operator|.
name|c_str
argument_list|()
argument_list|,
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_STREQ
argument_list|(
name|FunctionInfo
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|first
operator|.
name|c_str
argument_list|()
argument_list|,
name|secondFilename
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|FunctionInfo
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|second
argument_list|,
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|FunctionInfo
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|second
argument_list|,
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|EE
operator|->
name|freeMachineCodeForFunction
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|EXPECT_TRUE
argument_list|(
name|ReportedDebugFuncs
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|//JIT_EVENT_LISTENER_TEST_COMMON_H
end_comment

end_unit

