begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- unittest/AST/MatchVerifier.h - AST unit test support ---------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Provides MatchVerifier, a base class to implement gtest matchers that
end_comment

begin_comment
comment|//  verify things that can be matched on the AST.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Also implements matchers based on MatchVerifier:
end_comment

begin_comment
comment|//  LocationVerifier and RangeVerifier to verify whether a matched node has
end_comment

begin_comment
comment|//  the expected source location or source range.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_UNITTESTS_AST_MATCHVERIFIER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_UNITTESTS_AST_MATCHVERIFIER_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/ASTMatchers/ASTMatchFinder.h"
end_include

begin_include
include|#
directive|include
file|"clang/ASTMatchers/ASTMatchers.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Tooling.h"
end_include

begin_include
include|#
directive|include
file|"gtest/gtest.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ast_matchers
block|{
enum|enum
name|Language
block|{
name|Lang_C
block|,
name|Lang_C89
block|,
name|Lang_CXX
block|,
name|Lang_CXX11
block|,
name|Lang_OpenCL
block|,
name|Lang_OBJCXX
block|}
enum|;
comment|/// \brief Base class for verifying some property of nodes found by a matcher.
name|template
operator|<
name|typename
name|NodeType
operator|>
name|class
name|MatchVerifier
operator|:
name|public
name|MatchFinder
operator|::
name|MatchCallback
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|MatcherType
operator|>
name|testing
operator|::
name|AssertionResult
name|match
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const MatcherType&AMatcher
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Args
block|;
return|return
name|match
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|Args
argument_list|,
name|Lang_CXX
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|MatcherType
operator|>
name|testing
operator|::
name|AssertionResult
name|match
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const MatcherType&AMatcher
argument_list|,
argument|Language L
argument_list|)
block|{
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Args
block|;
return|return
name|match
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|Args
argument_list|,
name|L
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|MatcherType
operator|>
name|testing
operator|::
name|AssertionResult
name|match
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const MatcherType&AMatcher
argument_list|,
argument|std::vector<std::string>& Args
argument_list|,
argument|Language L
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|void
name|run
argument_list|(
specifier|const
name|MatchFinder
operator|::
name|MatchResult
operator|&
name|Result
argument_list|)
block|;
name|virtual
name|void
name|verify
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|,
argument|const NodeType&Node
argument_list|)
block|{}
name|void
name|setFailure
argument_list|(
argument|const Twine&Result
argument_list|)
block|{
name|Verified
operator|=
name|false
block|;
name|VerifyResult
operator|=
name|Result
operator|.
name|str
argument_list|()
block|;   }
name|void
name|setSuccess
argument_list|()
block|{
name|Verified
operator|=
name|true
block|;   }
name|private
operator|:
name|bool
name|Verified
block|;
name|std
operator|::
name|string
name|VerifyResult
block|; }
expr_stmt|;
comment|/// \brief Runs a matcher over some code, and returns the result of the
comment|/// verifier for the matched node.
name|template
operator|<
name|typename
name|NodeType
operator|>
name|template
operator|<
name|typename
name|MatcherType
operator|>
name|testing
operator|::
name|AssertionResult
name|MatchVerifier
operator|<
name|NodeType
operator|>
operator|::
name|match
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const MatcherType&AMatcher
argument_list|,
argument|std::vector<std::string>& Args
argument_list|,
argument|Language L
argument_list|)
block|{
name|MatchFinder
name|Finder
block|;
name|Finder
operator|.
name|addMatcher
argument_list|(
name|AMatcher
operator|.
name|bind
argument_list|(
literal|""
argument_list|)
argument_list|,
name|this
argument_list|)
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|tooling
operator|::
name|FrontendActionFactory
operator|>
name|Factory
argument_list|(
name|tooling
operator|::
name|newFrontendActionFactory
argument_list|(
operator|&
name|Finder
argument_list|)
argument_list|)
block|;
name|StringRef
name|FileName
block|;
switch|switch
condition|(
name|L
condition|)
block|{
case|case
name|Lang_C
case|:
name|Args
operator|.
name|push_back
argument_list|(
literal|"-std=c99"
argument_list|)
expr_stmt|;
name|FileName
operator|=
literal|"input.c"
expr_stmt|;
break|break;
case|case
name|Lang_C89
case|:
name|Args
operator|.
name|push_back
argument_list|(
literal|"-std=c89"
argument_list|)
expr_stmt|;
name|FileName
operator|=
literal|"input.c"
expr_stmt|;
break|break;
case|case
name|Lang_CXX
case|:
name|Args
operator|.
name|push_back
argument_list|(
literal|"-std=c++98"
argument_list|)
expr_stmt|;
name|FileName
operator|=
literal|"input.cc"
expr_stmt|;
break|break;
case|case
name|Lang_CXX11
case|:
name|Args
operator|.
name|push_back
argument_list|(
literal|"-std=c++11"
argument_list|)
expr_stmt|;
name|FileName
operator|=
literal|"input.cc"
expr_stmt|;
break|break;
case|case
name|Lang_OpenCL
case|:
name|FileName
operator|=
literal|"input.cl"
expr_stmt|;
break|break;
case|case
name|Lang_OBJCXX
case|:
name|FileName
operator|=
literal|"input.mm"
expr_stmt|;
break|break;
block|}
comment|// Default to failure in case callback is never called
name|setFailure
argument_list|(
literal|"Could not find match"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tooling
operator|::
name|runToolOnCodeWithArgs
argument_list|(
name|Factory
operator|->
name|create
argument_list|()
argument_list|,
name|Code
argument_list|,
name|Args
argument_list|,
name|FileName
argument_list|)
condition|)
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Parsing error"
return|;
if|if
condition|(
operator|!
name|Verified
condition|)
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
name|VerifyResult
return|;
return|return
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|NodeType
operator|>
name|void
name|MatchVerifier
operator|<
name|NodeType
operator|>
operator|::
name|run
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|)
block|{
specifier|const
name|NodeType
operator|*
name|Node
operator|=
name|Result
operator|.
name|Nodes
operator|.
name|getNodeAs
operator|<
name|NodeType
operator|>
operator|(
literal|""
operator|)
block|;
if|if
condition|(
operator|!
name|Node
condition|)
block|{
name|setFailure
argument_list|(
literal|"Matched node has wrong type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Callback has been called, default to success.
name|setSuccess
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|Result
argument_list|,
operator|*
name|Node
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
operator|>
specifier|inline
name|void
name|MatchVerifier
operator|<
name|ast_type_traits
operator|::
name|DynTypedNode
operator|>
operator|::
name|run
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|)
block|{
name|BoundNodes
operator|::
name|IDToNodeMap
name|M
operator|=
name|Result
operator|.
name|Nodes
operator|.
name|getMap
argument_list|()
block|;
name|BoundNodes
operator|::
name|IDToNodeMap
operator|::
name|const_iterator
name|I
operator|=
name|M
operator|.
name|find
argument_list|(
literal|""
argument_list|)
block|;
if|if
condition|(
name|I
operator|==
name|M
operator|.
name|end
argument_list|()
condition|)
block|{
name|setFailure
argument_list|(
literal|"Node was not bound"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Callback has been called, default to success.
name|setSuccess
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|Result
argument_list|,
name|I
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
block|}
comment|/// \brief Verify whether a node has the correct source location.
comment|///
comment|/// By default, Node.getSourceLocation() is checked. This can be changed
comment|/// by overriding getLocation().
name|template
operator|<
name|typename
name|NodeType
operator|>
name|class
name|LocationVerifier
operator|:
name|public
name|MatchVerifier
operator|<
name|NodeType
operator|>
block|{
name|public
operator|:
name|void
name|expectLocation
argument_list|(
argument|unsigned Line
argument_list|,
argument|unsigned Column
argument_list|)
block|{
name|ExpectLine
operator|=
name|Line
block|;
name|ExpectColumn
operator|=
name|Column
block|;   }
name|protected
operator|:
name|void
name|verify
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|,
argument|const NodeType&Node
argument_list|)
block|{
name|SourceLocation
name|Loc
operator|=
name|getLocation
argument_list|(
name|Node
argument_list|)
block|;
name|unsigned
name|Line
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingLineNumber
argument_list|(
name|Loc
argument_list|)
block|;
name|unsigned
name|Column
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingColumnNumber
argument_list|(
name|Loc
argument_list|)
block|;
if|if
condition|(
name|Line
operator|!=
name|ExpectLine
operator|||
name|Column
operator|!=
name|ExpectColumn
condition|)
block|{
name|std
operator|::
name|string
name|MsgStr
expr_stmt|;
name|llvm
operator|::
name|raw_string_ostream
name|Msg
argument_list|(
name|MsgStr
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|"Expected location<"
operator|<<
name|ExpectLine
operator|<<
literal|":"
operator|<<
name|ExpectColumn
operator|<<
literal|">, found<"
expr_stmt|;
name|Loc
operator|.
name|print
argument_list|(
name|Msg
argument_list|,
operator|*
name|Result
operator|.
name|SourceManager
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|'>'
expr_stmt|;
name|this
operator|->
name|setFailure
argument_list|(
name|Msg
operator|.
name|str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|virtual
name|SourceLocation
name|getLocation
argument_list|(
argument|const NodeType&Node
argument_list|)
block|{
return|return
name|Node
operator|.
name|getLocation
argument_list|()
return|;
block|}
name|private
operator|:
name|unsigned
name|ExpectLine
block|,
name|ExpectColumn
block|; }
expr_stmt|;
comment|/// \brief Verify whether a node has the correct source range.
comment|///
comment|/// By default, Node.getSourceRange() is checked. This can be changed
comment|/// by overriding getRange().
name|template
operator|<
name|typename
name|NodeType
operator|>
name|class
name|RangeVerifier
operator|:
name|public
name|MatchVerifier
operator|<
name|NodeType
operator|>
block|{
name|public
operator|:
name|void
name|expectRange
argument_list|(
argument|unsigned BeginLine
argument_list|,
argument|unsigned BeginColumn
argument_list|,
argument|unsigned EndLine
argument_list|,
argument|unsigned EndColumn
argument_list|)
block|{
name|ExpectBeginLine
operator|=
name|BeginLine
block|;
name|ExpectBeginColumn
operator|=
name|BeginColumn
block|;
name|ExpectEndLine
operator|=
name|EndLine
block|;
name|ExpectEndColumn
operator|=
name|EndColumn
block|;   }
name|protected
operator|:
name|void
name|verify
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|,
argument|const NodeType&Node
argument_list|)
block|{
name|SourceRange
name|R
operator|=
name|getRange
argument_list|(
name|Node
argument_list|)
block|;
name|SourceLocation
name|Begin
operator|=
name|R
operator|.
name|getBegin
argument_list|()
block|;
name|SourceLocation
name|End
operator|=
name|R
operator|.
name|getEnd
argument_list|()
block|;
name|unsigned
name|BeginLine
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingLineNumber
argument_list|(
name|Begin
argument_list|)
block|;
name|unsigned
name|BeginColumn
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingColumnNumber
argument_list|(
name|Begin
argument_list|)
block|;
name|unsigned
name|EndLine
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingLineNumber
argument_list|(
name|End
argument_list|)
block|;
name|unsigned
name|EndColumn
operator|=
name|Result
operator|.
name|SourceManager
operator|->
name|getSpellingColumnNumber
argument_list|(
name|End
argument_list|)
block|;
if|if
condition|(
name|BeginLine
operator|!=
name|ExpectBeginLine
operator|||
name|BeginColumn
operator|!=
name|ExpectBeginColumn
operator|||
name|EndLine
operator|!=
name|ExpectEndLine
operator|||
name|EndColumn
operator|!=
name|ExpectEndColumn
condition|)
block|{
name|std
operator|::
name|string
name|MsgStr
expr_stmt|;
name|llvm
operator|::
name|raw_string_ostream
name|Msg
argument_list|(
name|MsgStr
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|"Expected range<"
operator|<<
name|ExpectBeginLine
operator|<<
literal|":"
operator|<<
name|ExpectBeginColumn
operator|<<
literal|'-'
operator|<<
name|ExpectEndLine
operator|<<
literal|":"
operator|<<
name|ExpectEndColumn
operator|<<
literal|">, found<"
expr_stmt|;
name|Begin
operator|.
name|print
argument_list|(
name|Msg
argument_list|,
operator|*
name|Result
operator|.
name|SourceManager
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|'-'
expr_stmt|;
name|End
operator|.
name|print
argument_list|(
name|Msg
argument_list|,
operator|*
name|Result
operator|.
name|SourceManager
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|'>'
expr_stmt|;
name|this
operator|->
name|setFailure
argument_list|(
name|Msg
operator|.
name|str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|virtual
name|SourceRange
name|getRange
argument_list|(
argument|const NodeType&Node
argument_list|)
block|{
return|return
name|Node
operator|.
name|getSourceRange
argument_list|()
return|;
block|}
name|private
operator|:
name|unsigned
name|ExpectBeginLine
block|,
name|ExpectBeginColumn
block|,
name|ExpectEndLine
block|,
name|ExpectEndColumn
block|; }
expr_stmt|;
comment|/// \brief Verify whether a node's dump contains a given substring.
name|class
name|DumpVerifier
range|:
name|public
name|MatchVerifier
operator|<
name|ast_type_traits
operator|::
name|DynTypedNode
operator|>
block|{
name|public
operator|:
name|void
name|expectSubstring
argument_list|(
argument|const std::string&Str
argument_list|)
block|{
name|ExpectSubstring
operator|=
name|Str
block|;   }
name|protected
operator|:
name|void
name|verify
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|,
argument|const ast_type_traits::DynTypedNode&Node
argument_list|)
block|{
name|std
operator|::
name|string
name|DumpStr
block|;
name|llvm
operator|::
name|raw_string_ostream
name|Dump
argument_list|(
name|DumpStr
argument_list|)
block|;
name|Node
operator|.
name|dump
argument_list|(
name|Dump
argument_list|,
operator|*
name|Result
operator|.
name|SourceManager
argument_list|)
block|;
if|if
condition|(
name|Dump
operator|.
name|str
argument_list|()
operator|.
name|find
argument_list|(
name|ExpectSubstring
argument_list|)
operator|==
name|std
operator|::
name|string
operator|::
name|npos
condition|)
block|{
name|std
operator|::
name|string
name|MsgStr
expr_stmt|;
name|llvm
operator|::
name|raw_string_ostream
name|Msg
argument_list|(
name|MsgStr
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|"Expected dump substring<"
operator|<<
name|ExpectSubstring
operator|<<
literal|">, found<"
operator|<<
name|Dump
operator|.
name|str
argument_list|()
operator|<<
literal|'>'
expr_stmt|;
name|this
operator|->
name|setFailure
argument_list|(
name|Msg
operator|.
name|str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|private
operator|:
name|std
operator|::
name|string
name|ExpectSubstring
block|; }
decl_stmt|;
comment|/// \brief Verify whether a node's pretty print matches a given string.
name|class
name|PrintVerifier
range|:
name|public
name|MatchVerifier
operator|<
name|ast_type_traits
operator|::
name|DynTypedNode
operator|>
block|{
name|public
operator|:
name|void
name|expectString
argument_list|(
argument|const std::string&Str
argument_list|)
block|{
name|ExpectString
operator|=
name|Str
block|;   }
name|protected
operator|:
name|void
name|verify
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|,
argument|const ast_type_traits::DynTypedNode&Node
argument_list|)
block|{
name|std
operator|::
name|string
name|PrintStr
block|;
name|llvm
operator|::
name|raw_string_ostream
name|Print
argument_list|(
name|PrintStr
argument_list|)
block|;
name|Node
operator|.
name|print
argument_list|(
name|Print
argument_list|,
name|Result
operator|.
name|Context
operator|->
name|getPrintingPolicy
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|Print
operator|.
name|str
argument_list|()
operator|!=
name|ExpectString
condition|)
block|{
name|std
operator|::
name|string
name|MsgStr
expr_stmt|;
name|llvm
operator|::
name|raw_string_ostream
name|Msg
argument_list|(
name|MsgStr
argument_list|)
expr_stmt|;
name|Msg
operator|<<
literal|"Expected pretty print<"
operator|<<
name|ExpectString
operator|<<
literal|">, found<"
operator|<<
name|Print
operator|.
name|str
argument_list|()
operator|<<
literal|'>'
expr_stmt|;
name|this
operator|->
name|setFailure
argument_list|(
name|Msg
operator|.
name|str
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|private
operator|:
name|std
operator|::
name|string
name|ExpectString
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace ast_matchers
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

