begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangRenameTests.cpp - clang-rename unit tests --------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"unittests/Tooling/RewriterTestContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/ASTMatchers/ASTMatchFinder.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/FileManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/FileSystemOptions.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/VirtualFileSystem.h"
end_include

begin_include
include|#
directive|include
file|"clang/Format/Format.h"
end_include

begin_include
include|#
directive|include
file|"clang/Frontend/CompilerInstance.h"
end_include

begin_include
include|#
directive|include
file|"clang/Frontend/PCHContainerOperations.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Refactoring.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Refactoring/Rename/RenamingAction.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Refactoring/Rename/USRFindingAction.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Tooling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/IntrusiveRefCntPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|"gtest/gtest.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|clang_rename
block|{
name|namespace
name|test
block|{
struct|struct
name|Case
block|{
name|std
operator|::
name|string
name|Before
expr_stmt|;
name|std
operator|::
name|string
name|After
expr_stmt|;
name|std
operator|::
name|string
name|OldName
expr_stmt|;
name|std
operator|::
name|string
name|NewName
expr_stmt|;
block|}
struct|;
name|class
name|ClangRenameTest
range|:
name|public
name|testing
operator|::
name|Test
decl_stmt|,
name|public
name|testing
decl|::
name|WithParamInterface
decl|<
name|Case
decl|>
block|{
name|protected
label|:
name|void
name|AppendToHeader
parameter_list|(
name|StringRef
name|Code
parameter_list|)
block|{
name|HeaderContent
operator|+=
name|Code
operator|.
name|str
argument_list|()
expr_stmt|;
block|}
name|std
operator|::
name|string
name|runClangRenameOnCode
argument_list|(
argument|llvm::StringRef Code
argument_list|,
argument|llvm::StringRef OldName
argument_list|,
argument|llvm::StringRef NewName
argument_list|)
block|{
name|std
operator|::
name|string
name|NewCode
block|;
name|llvm
operator|::
name|raw_string_ostream
argument_list|(
name|NewCode
argument_list|)
operator|<<
name|llvm
operator|::
name|format
argument_list|(
literal|"#include \"%s\"\n%s"
argument_list|,
name|HeaderName
operator|.
name|c_str
argument_list|()
argument_list|,
name|Code
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
block|;
name|tooling
operator|::
name|FileContentMappings
name|FileContents
operator|=
block|{
block|{
name|HeaderName
block|,
name|HeaderContent
block|}
block|,
block|{
name|CCName
block|,
name|NewCode
block|}
block|}
block|;
name|clang
operator|::
name|RewriterTestContext
name|Context
block|;
name|Context
operator|.
name|createInMemoryFile
argument_list|(
name|HeaderName
argument_list|,
name|HeaderContent
argument_list|)
block|;
name|clang
operator|::
name|FileID
name|InputFileID
operator|=
name|Context
operator|.
name|createInMemoryFile
argument_list|(
name|CCName
argument_list|,
name|NewCode
argument_list|)
block|;
name|tooling
operator|::
name|USRFindingAction
name|FindingAction
argument_list|(
block|{}
argument_list|,
block|{
name|OldName
block|}
block|,
name|false
block|)
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|tooling
operator|::
name|FrontendActionFactory
operator|>
name|USRFindingActionFactory
operator|=
name|tooling
operator|::
name|newFrontendActionFactory
argument_list|(
operator|&
name|FindingAction
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tooling
operator|::
name|runToolOnCodeWithArgs
argument_list|(
name|USRFindingActionFactory
operator|->
name|create
argument_list|()
argument_list|,
name|NewCode
argument_list|,
block|{
literal|"-std=c++11"
block|}
operator|,
name|CCName
operator|,
literal|"clang-rename"
operator|,
name|std
operator|::
name|make_shared
operator|<
name|PCHContainerOperations
operator|>
operator|(
operator|)
operator|,
name|FileContents
block|)
decl_stmt|)       return "";
specifier|const
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>>
operator|&
name|USRList
operator|=
name|FindingAction
operator|.
name|getUSRList
argument_list|()
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|NewNames
operator|=
block|{
name|NewName
block|}
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|tooling
operator|::
name|Replacements
operator|>
name|FileToReplacements
expr_stmt|;
name|tooling
operator|::
name|QualifiedRenamingAction
name|RenameAction
argument_list|(
name|NewNames
argument_list|,
name|USRList
argument_list|,
name|FileToReplacements
argument_list|)
expr_stmt|;
name|auto
name|RenameActionFactory
init|=
name|tooling
operator|::
name|newFrontendActionFactory
argument_list|(
operator|&
name|RenameAction
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tooling
operator|::
name|runToolOnCodeWithArgs
argument_list|(
name|RenameActionFactory
operator|->
name|create
argument_list|()
argument_list|,
name|NewCode
argument_list|,
block|{
literal|"-std=c++11"
block|}
operator|,
name|CCName
operator|,
literal|"clang-rename"
operator|,
name|std
operator|::
name|make_shared
operator|<
name|PCHContainerOperations
operator|>
operator|(
operator|)
operator|,
name|FileContents
block|)
decl_stmt|)       return "";
name|formatAndApplyAllReplacements
argument_list|(
name|FileToReplacements
argument_list|,
name|Context
operator|.
name|Rewrite
argument_list|,
literal|"llvm"
argument_list|)
expr_stmt|;
return|return
name|Context
operator|.
name|getRewrittenText
argument_list|(
name|InputFileID
argument_list|)
return|;
block|}
name|void
name|CompareSnippets
parameter_list|(
name|StringRef
name|Expected
parameter_list|,
name|StringRef
name|Actual
parameter_list|)
block|{
name|std
operator|::
name|string
name|ExpectedCode
expr_stmt|;
name|llvm
operator|::
name|raw_string_ostream
argument_list|(
name|ExpectedCode
argument_list|)
operator|<<
name|llvm
operator|::
name|format
argument_list|(
literal|"#include \"%s\"\n%s"
argument_list|,
name|HeaderName
operator|.
name|c_str
argument_list|()
argument_list|,
name|Expected
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|EXPECT_EQ
argument_list|(
name|format
argument_list|(
name|ExpectedCode
argument_list|)
argument_list|,
name|format
argument_list|(
name|Actual
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|std
operator|::
name|string
name|format
argument_list|(
argument|llvm::StringRef Code
argument_list|)
block|{
name|tooling
operator|::
name|Replacements
name|Replaces
operator|=
name|format
operator|::
name|reformat
argument_list|(
name|format
operator|::
name|getLLVMStyle
argument_list|()
argument_list|,
name|Code
argument_list|,
block|{
name|tooling
operator|::
name|Range
argument_list|(
literal|0
argument_list|,
argument|Code.size()
argument_list|)
block|}
block|)
expr_stmt|;
name|auto
name|ChangedCode
init|=
name|tooling
operator|::
name|applyAllReplacements
argument_list|(
name|Code
argument_list|,
name|Replaces
argument_list|)
decl_stmt|;
name|EXPECT_TRUE
argument_list|(
name|static_cast
operator|<
name|bool
operator|>
operator|(
name|ChangedCode
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ChangedCode
condition|)
block|{
name|llvm
operator|::
name|errs
argument_list|()
operator|<<
name|llvm
operator|::
name|toString
argument_list|(
name|ChangedCode
operator|.
name|takeError
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
return|return
operator|*
name|ChangedCode
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|HeaderContent
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|HeaderName
operator|=
literal|"header.h"
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|CCName
operator|=
literal|"input.cc"
expr_stmt|;
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace test
end_comment

begin_comment
unit|}
comment|// namespace clang_rename
end_comment

begin_comment
unit|}
comment|// namesdpace clang
end_comment

end_unit

