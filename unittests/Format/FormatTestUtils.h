begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- unittest/Format/FormatTestUtils.h - Formatting unit tests ----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines utility functions for Clang-Format related tests.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FORMAT_TEST_UTILS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FORMAT_TEST_UTILS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|format
block|{
name|namespace
name|test
block|{
specifier|inline
name|std
operator|::
name|string
name|messUp
argument_list|(
argument|llvm::StringRef Code
argument_list|)
block|{
name|std
operator|::
name|string
name|MessedUp
argument_list|(
name|Code
operator|.
name|str
argument_list|()
argument_list|)
block|;
name|bool
name|InComment
operator|=
name|false
block|;
name|bool
name|InPreprocessorDirective
operator|=
name|false
block|;
name|bool
name|JustReplacedNewline
operator|=
name|false
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|MessedUp
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|==
literal|'/'
operator|&&
name|MessedUp
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'/'
condition|)
block|{
if|if
condition|(
name|JustReplacedNewline
condition|)
name|MessedUp
index|[
name|i
operator|-
literal|1
index|]
operator|=
literal|'\n'
expr_stmt|;
name|InComment
operator|=
name|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|==
literal|'#'
operator|&&
operator|(
name|JustReplacedNewline
operator|||
name|i
operator|==
literal|0
operator|)
condition|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|MessedUp
index|[
name|i
operator|-
literal|1
index|]
operator|=
literal|'\n'
expr_stmt|;
name|InPreprocessorDirective
operator|=
name|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|==
literal|'\\'
operator|&&
name|MessedUp
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'\n'
condition|)
block|{
name|MessedUp
index|[
name|i
index|]
operator|=
literal|' '
expr_stmt|;
name|MessedUp
index|[
name|i
operator|+
literal|1
index|]
operator|=
literal|' '
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|==
literal|'\n'
condition|)
block|{
if|if
condition|(
name|InComment
condition|)
block|{
name|InComment
operator|=
name|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|InPreprocessorDirective
condition|)
block|{
name|InPreprocessorDirective
operator|=
name|false
expr_stmt|;
block|}
else|else
block|{
name|JustReplacedNewline
operator|=
name|true
expr_stmt|;
name|MessedUp
index|[
name|i
index|]
operator|=
literal|' '
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|!=
literal|' '
condition|)
block|{
name|JustReplacedNewline
operator|=
name|false
expr_stmt|;
block|}
block|}
name|std
operator|::
name|string
name|WithoutWhitespace
expr_stmt|;
if|if
condition|(
name|MessedUp
index|[
literal|0
index|]
operator|!=
literal|' '
condition|)
name|WithoutWhitespace
operator|.
name|push_back
argument_list|(
name|MessedUp
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|1
init|,
name|e
init|=
name|MessedUp
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|MessedUp
index|[
name|i
index|]
operator|!=
literal|' '
operator|||
name|MessedUp
index|[
name|i
operator|-
literal|1
index|]
operator|!=
literal|' '
condition|)
name|WithoutWhitespace
operator|.
name|push_back
argument_list|(
name|MessedUp
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|WithoutWhitespace
return|;
block|}
block|}
comment|// end namespace test
block|}
end_decl_stmt

begin_comment
comment|// end namespace format
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_FORMAT_TEST_UTILS_H
end_comment

end_unit

