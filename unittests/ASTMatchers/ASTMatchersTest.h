begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- unittest/Tooling/ASTMatchersTest.h - Matcher tests helpers ------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_UNITTESTS_ASTMATCHERS_ASTMATCHERSTEST_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_UNITTESTS_ASTMATCHERS_ASTMATCHERSTEST_H
end_define

begin_include
include|#
directive|include
file|"clang/ASTMatchers/ASTMatchFinder.h"
end_include

begin_include
include|#
directive|include
file|"clang/Frontend/ASTUnit.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/Tooling.h"
end_include

begin_include
include|#
directive|include
file|"gtest/gtest.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ast_matchers
block|{
name|using
name|clang
operator|::
name|tooling
operator|::
name|buildASTFromCodeWithArgs
expr_stmt|;
name|using
name|clang
operator|::
name|tooling
operator|::
name|newFrontendActionFactory
expr_stmt|;
name|using
name|clang
operator|::
name|tooling
operator|::
name|runToolOnCodeWithArgs
expr_stmt|;
name|using
name|clang
operator|::
name|tooling
operator|::
name|FrontendActionFactory
expr_stmt|;
name|using
name|clang
operator|::
name|tooling
operator|::
name|FileContentMappings
expr_stmt|;
name|class
name|BoundNodesCallback
block|{
name|public
label|:
name|virtual
operator|~
name|BoundNodesCallback
argument_list|()
block|{}
name|virtual
name|bool
name|run
argument_list|(
specifier|const
name|BoundNodes
operator|*
name|BoundNodes
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|run
parameter_list|(
specifier|const
name|BoundNodes
modifier|*
name|BoundNodes
parameter_list|,
name|ASTContext
modifier|*
name|Context
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|onEndOfTranslationUnit
parameter_list|()
block|{}
block|}
empty_stmt|;
comment|// If 'FindResultVerifier' is not NULL, sets *Verified to the result of
comment|// running 'FindResultVerifier' with the bound nodes as argument.
comment|// If 'FindResultVerifier' is NULL, sets *Verified to true when Run is called.
name|class
name|VerifyMatch
range|:
name|public
name|MatchFinder
operator|::
name|MatchCallback
block|{
name|public
operator|:
name|VerifyMatch
argument_list|(
name|BoundNodesCallback
operator|*
name|FindResultVerifier
argument_list|,
name|bool
operator|*
name|Verified
argument_list|)
operator|:
name|Verified
argument_list|(
name|Verified
argument_list|)
block|,
name|FindResultReviewer
argument_list|(
argument|FindResultVerifier
argument_list|)
block|{}
name|void
name|run
argument_list|(
argument|const MatchFinder::MatchResult&Result
argument_list|)
name|override
block|{
if|if
condition|(
name|FindResultReviewer
operator|!=
name|nullptr
condition|)
block|{
operator|*
name|Verified
operator||=
name|FindResultReviewer
operator|->
name|run
argument_list|(
operator|&
name|Result
operator|.
name|Nodes
argument_list|,
name|Result
operator|.
name|Context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|*
name|Verified
operator|=
name|true
expr_stmt|;
block|}
block|}
name|void
name|onEndOfTranslationUnit
argument_list|()
name|override
block|{
if|if
condition|(
name|FindResultReviewer
condition|)
name|FindResultReviewer
operator|->
name|onEndOfTranslationUnit
argument_list|()
expr_stmt|;
block|}
name|private
operator|:
name|bool
operator|*
specifier|const
name|Verified
block|;
name|BoundNodesCallback
operator|*
specifier|const
name|FindResultReviewer
block|; }
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchesConditionally
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|,
argument|bool ExpectMatch
argument_list|,
argument|llvm::StringRef CompileArg
argument_list|,
argument|const FileContentMappings&VirtualMappedFiles = FileContentMappings()
argument_list|,
argument|const std::string&Filename =
literal|"input.cc"
argument_list|)
block|{
name|bool
name|Found
operator|=
name|false
block|,
name|DynamicFound
operator|=
name|false
block|;
name|MatchFinder
name|Finder
block|;
name|VerifyMatch
name|VerifyFound
argument_list|(
name|nullptr
argument_list|,
operator|&
name|Found
argument_list|)
block|;
name|Finder
operator|.
name|addMatcher
argument_list|(
name|AMatcher
argument_list|,
operator|&
name|VerifyFound
argument_list|)
block|;
name|VerifyMatch
name|VerifyDynamicFound
argument_list|(
name|nullptr
argument_list|,
operator|&
name|DynamicFound
argument_list|)
block|;
if|if
condition|(
operator|!
name|Finder
operator|.
name|addDynamicMatcher
argument_list|(
name|AMatcher
argument_list|,
operator|&
name|VerifyDynamicFound
argument_list|)
condition|)
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not add dynamic matcher"
return|;
name|std
operator|::
name|unique_ptr
operator|<
name|FrontendActionFactory
operator|>
name|Factory
argument_list|(
name|newFrontendActionFactory
argument_list|(
operator|&
name|Finder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some tests use typeof, which is a gnu extension.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Args
expr_stmt|;
name|Args
operator|.
name|push_back
argument_list|(
name|CompileArg
argument_list|)
expr_stmt|;
comment|// Some tests need rtti/exceptions on
name|Args
operator|.
name|push_back
argument_list|(
literal|"-frtti"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|push_back
argument_list|(
literal|"-fexceptions"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runToolOnCodeWithArgs
argument_list|(
name|Factory
operator|->
name|create
argument_list|()
argument_list|,
name|Code
argument_list|,
name|Args
argument_list|,
name|Filename
argument_list|,
name|std
operator|::
name|make_shared
operator|<
name|RawPCHContainerOperations
operator|>
operator|(
operator|)
argument_list|,
name|VirtualMappedFiles
argument_list|)
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Parsing error in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
if|if
condition|(
name|Found
operator|!=
name|DynamicFound
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Dynamic match result ("
operator|<<
name|DynamicFound
operator|<<
literal|") does not match static result ("
operator|<<
name|Found
operator|<<
literal|")"
return|;
block|}
if|if
condition|(
operator|!
name|Found
operator|&&
name|ExpectMatch
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not find match in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
elseif|else
if|if
condition|(
name|Found
operator|&&
operator|!
name|ExpectMatch
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Found unexpected match in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
return|return
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matches
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|true
argument_list|,
literal|"-std=c++11"
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|notMatches
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|false
argument_list|,
literal|"-std=c++11"
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchesObjC
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|true
argument_list|,
literal|""
argument_list|,
name|FileContentMappings
argument_list|()
argument_list|,
literal|"input.m"
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|notMatchesObjC
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|false
argument_list|,
literal|""
argument_list|,
name|FileContentMappings
argument_list|()
argument_list|,
literal|"input.m"
argument_list|)
return|;
block|}
comment|// Function based on matchesConditionally with "-x cuda" argument added and
comment|// small CUDA header prepended to the code string.
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchesConditionallyWithCuda
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|,
argument|bool ExpectMatch
argument_list|,
argument|llvm::StringRef CompileArg
argument_list|)
block|{
specifier|const
name|std
operator|::
name|string
name|CudaHeader
operator|=
literal|"typedef unsigned int size_t;\n"
literal|"#define __constant__ __attribute__((constant))\n"
literal|"#define __device__ __attribute__((device))\n"
literal|"#define __global__ __attribute__((global))\n"
literal|"#define __host__ __attribute__((host))\n"
literal|"#define __shared__ __attribute__((shared))\n"
literal|"struct dim3 {"
literal|"  unsigned x, y, z;"
literal|"  __host__ __device__ dim3(unsigned x, unsigned y = 1, unsigned z = 1)"
literal|"      : x(x), y(y), z(z) {}"
literal|"};"
literal|"typedef struct cudaStream *cudaStream_t;"
literal|"int cudaConfigureCall(dim3 gridSize, dim3 blockSize,"
literal|"                      size_t sharedSize = 0,"
literal|"                      cudaStream_t stream = 0);"
block|;
name|bool
name|Found
operator|=
name|false
block|,
name|DynamicFound
operator|=
name|false
block|;
name|MatchFinder
name|Finder
block|;
name|VerifyMatch
name|VerifyFound
argument_list|(
name|nullptr
argument_list|,
operator|&
name|Found
argument_list|)
block|;
name|Finder
operator|.
name|addMatcher
argument_list|(
name|AMatcher
argument_list|,
operator|&
name|VerifyFound
argument_list|)
block|;
name|VerifyMatch
name|VerifyDynamicFound
argument_list|(
name|nullptr
argument_list|,
operator|&
name|DynamicFound
argument_list|)
block|;
if|if
condition|(
operator|!
name|Finder
operator|.
name|addDynamicMatcher
argument_list|(
name|AMatcher
argument_list|,
operator|&
name|VerifyDynamicFound
argument_list|)
condition|)
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not add dynamic matcher"
return|;
name|std
operator|::
name|unique_ptr
operator|<
name|FrontendActionFactory
operator|>
name|Factory
argument_list|(
name|newFrontendActionFactory
argument_list|(
operator|&
name|Finder
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some tests use typeof, which is a gnu extension.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Args
expr_stmt|;
name|Args
operator|.
name|push_back
argument_list|(
literal|"-xcuda"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|push_back
argument_list|(
literal|"-fno-ms-extensions"
argument_list|)
expr_stmt|;
name|Args
operator|.
name|push_back
argument_list|(
name|CompileArg
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|runToolOnCodeWithArgs
argument_list|(
name|Factory
operator|->
name|create
argument_list|()
argument_list|,
name|CudaHeader
operator|+
name|Code
argument_list|,
name|Args
argument_list|)
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Parsing error in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
if|if
condition|(
name|Found
operator|!=
name|DynamicFound
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Dynamic match result ("
operator|<<
name|DynamicFound
operator|<<
literal|") does not match static result ("
operator|<<
name|Found
operator|<<
literal|")"
return|;
block|}
if|if
condition|(
operator|!
name|Found
operator|&&
name|ExpectMatch
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not find match in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
elseif|else
if|if
condition|(
name|Found
operator|&&
operator|!
name|ExpectMatch
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Found unexpected match in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
return|return
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchesWithCuda
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionallyWithCuda
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|true
argument_list|,
literal|"-std=c++11"
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|notMatchesWithCuda
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|)
block|{
return|return
name|matchesConditionallyWithCuda
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|false
argument_list|,
literal|"-std=c++11"
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchAndVerifyResultConditionally
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|,
argument|BoundNodesCallback *FindResultVerifier
argument_list|,
argument|bool ExpectResult
argument_list|)
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|BoundNodesCallback
operator|>
name|ScopedVerifier
argument_list|(
name|FindResultVerifier
argument_list|)
block|;
name|bool
name|VerifiedResult
operator|=
name|false
block|;
name|MatchFinder
name|Finder
block|;
name|VerifyMatch
name|VerifyVerifiedResult
argument_list|(
name|FindResultVerifier
argument_list|,
operator|&
name|VerifiedResult
argument_list|)
block|;
name|Finder
operator|.
name|addMatcher
argument_list|(
name|AMatcher
argument_list|,
operator|&
name|VerifyVerifiedResult
argument_list|)
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|FrontendActionFactory
operator|>
name|Factory
argument_list|(
name|newFrontendActionFactory
argument_list|(
operator|&
name|Finder
argument_list|)
argument_list|)
block|;
comment|// Some tests use typeof, which is a gnu extension.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|Args
argument_list|(
literal|1
argument_list|,
literal|"-std=gnu++98"
argument_list|)
block|;
if|if
condition|(
operator|!
name|runToolOnCodeWithArgs
argument_list|(
name|Factory
operator|->
name|create
argument_list|()
argument_list|,
name|Code
argument_list|,
name|Args
argument_list|)
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Parsing error in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|VerifiedResult
operator|&&
name|ExpectResult
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not verify result in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
elseif|else
if|if
condition|(
name|VerifiedResult
operator|&&
operator|!
name|ExpectResult
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Verified unexpected result in \""
operator|<<
name|Code
operator|<<
literal|"\""
return|;
block|}
end_if

begin_expr_stmt
name|VerifiedResult
operator|=
name|false
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|ASTUnit
operator|>
name|AST
argument_list|(
name|buildASTFromCodeWithArgs
argument_list|(
name|Code
argument_list|,
name|Args
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|AST
operator|.
name|get
argument_list|()
condition|)
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Parsing error in \""
operator|<<
name|Code
operator|<<
literal|"\" while building AST"
return|;
end_if

begin_expr_stmt
name|Finder
operator|.
name|matchAST
argument_list|(
name|AST
operator|->
name|getASTContext
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|VerifiedResult
operator|&&
name|ExpectResult
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Could not verify result in \""
operator|<<
name|Code
operator|<<
literal|"\" with AST"
return|;
block|}
elseif|else
if|if
condition|(
name|VerifiedResult
operator|&&
operator|!
name|ExpectResult
condition|)
block|{
return|return
name|testing
operator|::
name|AssertionFailure
argument_list|()
operator|<<
literal|"Verified unexpected result in \""
operator|<<
name|Code
operator|<<
literal|"\" with AST"
return|;
block|}
end_if

begin_return
return|return
name|testing
operator|::
name|AssertionSuccess
argument_list|()
return|;
end_return

begin_comment
unit|}
comment|// FIXME: Find better names for these functions (or document what they
end_comment

begin_comment
comment|// do more precisely).
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchAndVerifyResultTrue
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|,
argument|BoundNodesCallback *FindResultVerifier
argument_list|)
block|{
return|return
name|matchAndVerifyResultConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|FindResultVerifier
argument_list|,
name|true
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|testing
operator|::
name|AssertionResult
name|matchAndVerifyResultFalse
argument_list|(
argument|const std::string&Code
argument_list|,
argument|const T&AMatcher
argument_list|,
argument|BoundNodesCallback *FindResultVerifier
argument_list|)
block|{
return|return
name|matchAndVerifyResultConditionally
argument_list|(
name|Code
argument_list|,
name|AMatcher
argument_list|,
name|FindResultVerifier
argument_list|,
name|false
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace ast_matchers
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_UNITTESTS_AST_MATCHERS_AST_MATCHERS_TEST_H
end_comment

end_unit

