begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RewriterTestContext.h ----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a utility class for Rewriter related tests.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_REWRITER_TEST_CONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_REWRITER_TEST_CONTEXT_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/FileManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/LangOptions.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/Frontend/DiagnosticOptions.h"
end_include

begin_include
include|#
directive|include
file|"clang/Frontend/TextDiagnosticPrinter.h"
end_include

begin_include
include|#
directive|include
file|"clang/Rewrite/Rewriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FileSystem.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Path.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// \brief A class that sets up a ready to use Rewriter.
comment|///
comment|/// Useful in unit tests that need a Rewriter. Creates all dependencies
comment|/// of a Rewriter with default values for testing and provides convenience
comment|/// methods, which help with writing tests that change files.
name|class
name|RewriterTestContext
block|{
name|public
label|:
name|RewriterTestContext
argument_list|()
operator|:
name|Diagnostics
argument_list|(
name|llvm
operator|::
name|IntrusiveRefCntPtr
operator|<
name|DiagnosticIDs
operator|>
operator|(
operator|)
argument_list|)
operator|,
name|DiagnosticPrinter
argument_list|(
name|llvm
operator|::
name|outs
argument_list|()
argument_list|,
name|DiagnosticOptions
argument_list|()
argument_list|)
operator|,
name|Files
argument_list|(
operator|(
name|FileSystemOptions
argument_list|()
operator|)
argument_list|)
operator|,
name|Sources
argument_list|(
name|Diagnostics
argument_list|,
name|Files
argument_list|)
operator|,
name|Rewrite
argument_list|(
argument|Sources
argument_list|,
argument|Options
argument_list|)
block|{
name|Diagnostics
operator|.
name|setClient
argument_list|(
operator|&
name|DiagnosticPrinter
argument_list|,
name|false
argument_list|)
block|;   }
operator|~
name|RewriterTestContext
argument_list|()
block|{
if|if
condition|(
operator|!
name|TemporaryDirectory
operator|.
name|empty
argument_list|()
condition|)
block|{
name|uint32_t
name|RemovedCount
init|=
literal|0
decl_stmt|;
name|llvm
operator|::
name|sys
operator|::
name|fs
operator|::
name|remove_all
argument_list|(
name|TemporaryDirectory
operator|.
name|str
argument_list|()
argument_list|,
name|RemovedCount
argument_list|)
expr_stmt|;
block|}
block|}
name|FileID
name|createInMemoryFile
argument_list|(
argument|StringRef Name
argument_list|,
argument|StringRef Content
argument_list|)
block|{
specifier|const
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|Source
operator|=
name|llvm
operator|::
name|MemoryBuffer
operator|::
name|getMemBuffer
argument_list|(
name|Content
argument_list|)
block|;
specifier|const
name|FileEntry
operator|*
name|Entry
operator|=
name|Files
operator|.
name|getVirtualFile
argument_list|(
name|Name
argument_list|,
name|Source
operator|->
name|getBufferSize
argument_list|()
argument_list|,
literal|0
argument_list|)
block|;
name|Sources
operator|.
name|overrideFileContents
argument_list|(
name|Entry
argument_list|,
name|Source
argument_list|,
name|true
argument_list|)
block|;
name|assert
argument_list|(
name|Entry
operator|!=
name|NULL
argument_list|)
block|;
return|return
name|Sources
operator|.
name|createFileID
argument_list|(
name|Entry
argument_list|,
name|SourceLocation
argument_list|()
argument_list|,
name|SrcMgr
operator|::
name|C_User
argument_list|)
return|;
block|}
name|FileID
name|createOnDiskFile
parameter_list|(
name|StringRef
name|Name
parameter_list|,
name|StringRef
name|Content
parameter_list|)
block|{
if|if
condition|(
name|TemporaryDirectory
operator|.
name|empty
argument_list|()
condition|)
block|{
name|int
name|FD
decl_stmt|;
name|bool
name|error
init|=
name|llvm
operator|::
name|sys
operator|::
name|fs
operator|::
name|unique_file
argument_list|(
literal|"rewriter-test-%%-%%-%%-%%/anchor"
argument_list|,
name|FD
argument_list|,
name|TemporaryDirectory
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|!
name|error
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|error
expr_stmt|;
name|llvm
operator|::
name|raw_fd_ostream
name|Closer
argument_list|(
name|FD
argument_list|,
comment|/*shouldClose=*/
name|true
argument_list|)
expr_stmt|;
name|TemporaryDirectory
operator|=
name|llvm
operator|::
name|sys
operator|::
name|path
operator|::
name|parent_path
argument_list|(
name|TemporaryDirectory
argument_list|)
expr_stmt|;
block|}
name|llvm
operator|::
name|SmallString
operator|<
literal|1024
operator|>
name|Path
argument_list|(
name|TemporaryDirectory
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|sys
operator|::
name|path
operator|::
name|append
argument_list|(
name|Path
argument_list|,
name|Name
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|ErrorInfo
expr_stmt|;
name|llvm
operator|::
name|raw_fd_ostream
name|OutStream
argument_list|(
name|Path
operator|.
name|c_str
argument_list|()
argument_list|,
name|ErrorInfo
argument_list|,
name|llvm
operator|::
name|raw_fd_ostream
operator|::
name|F_Binary
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ErrorInfo
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|OutStream
operator|<<
name|Content
expr_stmt|;
name|OutStream
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|const
name|FileEntry
modifier|*
name|File
init|=
name|Files
operator|.
name|getFile
argument_list|(
name|Path
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|File
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|Sources
operator|.
name|createFileID
argument_list|(
name|File
argument_list|,
name|SourceLocation
argument_list|()
argument_list|,
name|SrcMgr
operator|::
name|C_User
argument_list|)
return|;
block|}
name|SourceLocation
name|getLocation
parameter_list|(
name|FileID
name|ID
parameter_list|,
name|unsigned
name|Line
parameter_list|,
name|unsigned
name|Column
parameter_list|)
block|{
name|SourceLocation
name|Result
init|=
name|Sources
operator|.
name|translateFileLineCol
argument_list|(
name|Sources
operator|.
name|getFileEntryForID
argument_list|(
name|ID
argument_list|)
argument_list|,
name|Line
argument_list|,
name|Column
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|Result
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
name|std
operator|::
name|string
name|getRewrittenText
argument_list|(
argument|FileID ID
argument_list|)
block|{
name|std
operator|::
name|string
name|Result
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Result
argument_list|)
block|;
name|Rewrite
operator|.
name|getEditBuffer
argument_list|(
name|ID
argument_list|)
operator|.
name|write
argument_list|(
name|OS
argument_list|)
block|;
name|OS
operator|.
name|flush
argument_list|()
block|;
return|return
name|Result
return|;
block|}
name|std
operator|::
name|string
name|getFileContentFromDisk
argument_list|(
argument|StringRef Name
argument_list|)
block|{
name|llvm
operator|::
name|SmallString
operator|<
literal|1024
operator|>
name|Path
argument_list|(
name|TemporaryDirectory
operator|.
name|str
argument_list|()
argument_list|)
block|;
name|llvm
operator|::
name|sys
operator|::
name|path
operator|::
name|append
argument_list|(
name|Path
argument_list|,
name|Name
argument_list|)
block|;
comment|// We need to read directly from the FileManager without relaying through
comment|// a FileEntry, as otherwise we'd read through an already opened file
comment|// descriptor, which might not see the changes made.
comment|// FIXME: Figure out whether there is a way to get the SourceManger to
comment|// reopen the file.
return|return
name|Files
operator|.
name|getBufferForFile
argument_list|(
name|Path
argument_list|,
name|NULL
argument_list|)
operator|->
name|getBuffer
argument_list|()
return|;
block|}
name|DiagnosticsEngine
name|Diagnostics
decl_stmt|;
name|TextDiagnosticPrinter
name|DiagnosticPrinter
decl_stmt|;
name|FileManager
name|Files
decl_stmt|;
name|SourceManager
name|Sources
decl_stmt|;
name|LangOptions
name|Options
decl_stmt|;
name|Rewriter
name|Rewrite
decl_stmt|;
comment|// Will be set once on disk files are generated.
name|SmallString
operator|<
literal|128
operator|>
name|TemporaryDirectory
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

