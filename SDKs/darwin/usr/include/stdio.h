begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ===-- stdio.h - stub SDK header for compiler-rt --------------------------===  *  *                     The LLVM Compiler Infrastructure  *  * This file is dual licensed under the MIT and the University of Illinois Open  * Source Licenses. See LICENSE.TXT for details.  *  * ===-----------------------------------------------------------------------===  *  * This is a stub SDK header file. This file is not part of the interface of  * this library nor an official version of the appropriate SDK header. It is  * intended only to stub the features of this header required by compiler-rt.  *  * ===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STDIO_H__
end_ifndef

begin_define
define|#
directive|define
name|__STDIO_H__
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
name|struct
name|__sFILE
name|FILE
typedef|;
typedef|typedef
name|__SIZE_TYPE__
name|size_t
typedef|;
comment|/* Determine the appropriate fdopen, fopen(), and fwrite() functions. */
if|#
directive|if
name|defined
argument_list|(
name|__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|__i386
argument_list|)
define|#
directive|define
name|__FDOPEN_NAME
value|"_fdopen$UNIX2003"
define|#
directive|define
name|__FOPEN_NAME
value|"_fopen$UNIX2003"
define|#
directive|define
name|__FWRITE_NAME
value|"_fwrite$UNIX2003"
elif|#
directive|elif
name|defined
argument_list|(
name|__x86_64__
argument_list|)
define|#
directive|define
name|__FDOPEN_NAME
value|"_fdopen"
define|#
directive|define
name|__FOPEN_NAME
value|"_fopen"
define|#
directive|define
name|__FWRITE_NAME
value|"_fwrite"
elif|#
directive|elif
name|defined
argument_list|(
name|__arm
argument_list|)
define|#
directive|define
name|__FDOPEN_NAME
value|"_fdopen"
define|#
directive|define
name|__FOPEN_NAME
value|"_fopen"
define|#
directive|define
name|__FWRITE_NAME
value|"_fwrite"
else|#
directive|else
error|#
directive|error
literal|"unrecognized architecture for targetting OS X"
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__
argument_list|)
if|#
directive|if
name|defined
argument_list|(
name|__i386
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64
argument_list|)
define|#
directive|define
name|__FDOPEN_NAME
value|"_fdopen"
define|#
directive|define
name|__FOPEN_NAME
value|"_fopen"
define|#
directive|define
name|__FWRITE_NAME
value|"_fwrite"
elif|#
directive|elif
name|defined
argument_list|(
name|__arm
argument_list|)
define|#
directive|define
name|__FDOPEN_NAME
value|"_fdopen"
define|#
directive|define
name|__FOPEN_NAME
value|"_fopen"
define|#
directive|define
name|__FWRITE_NAME
value|"_fwrite"
else|#
directive|else
error|#
directive|error
literal|"unrecognized architecture for targetting iOS"
endif|#
directive|endif
else|#
directive|else
error|#
directive|error
literal|"unrecognized architecture for targetting Darwin"
endif|#
directive|endif
define|#
directive|define
name|stderr
value|__stderrp
specifier|extern
name|FILE
modifier|*
name|__stderrp
decl_stmt|;
ifndef|#
directive|ifndef
name|SEEK_SET
define|#
directive|define
name|SEEK_SET
value|0
comment|/* set file offset to offset */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SEEK_CUR
define|#
directive|define
name|SEEK_CUR
value|1
comment|/* set file offset to current plus offset */
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SEEK_END
define|#
directive|define
name|SEEK_END
value|2
comment|/* set file offset to EOF plus offset */
endif|#
directive|endif
name|int
name|fclose
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|fflush
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|fopen
argument_list|(
specifier|const
name|char
operator|*
name|__restrict
argument_list|,
specifier|const
name|char
operator|*
name|__restrict
argument_list|)
asm|__asm(__FOPEN_NAME);
name|FILE
modifier|*
name|fdopen
argument_list|(
name|int
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
asm|__asm(__FDOPEN_NAME);
name|int
name|fprintf
argument_list|(
name|FILE
operator|*
name|__restrict
argument_list|,
specifier|const
name|char
operator|*
name|__restrict
argument_list|,
operator|...
argument_list|)
decl_stmt|;
name|size_t
name|fwrite
argument_list|(
specifier|const
name|void
operator|*
name|__restrict
argument_list|,
name|size_t
argument_list|,
name|size_t
argument_list|,
name|FILE
operator|*
name|__restrict
argument_list|)
asm|__asm(__FWRITE_NAME);
name|size_t
name|fread
argument_list|(
name|void
operator|*
name|__restrict
argument_list|,
name|size_t
argument_list|,
name|size_t
argument_list|,
name|FILE
operator|*
name|__restrict
argument_list|)
decl_stmt|;
name|long
name|ftell
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|fseek
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|snprintf
parameter_list|(
name|char
modifier|*
name|__restrict
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
name|__restrict
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STDIO_H__ */
end_comment

end_unit

