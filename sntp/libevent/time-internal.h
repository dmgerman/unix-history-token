begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2007 Niels Provos<provos@citi.umich.edu>  * Copyright (c) 2007-2012 Niels Provos and Nick Mathewson  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TIME_INTERNAL_H_INCLUDED_
end_ifndef

begin_define
define|#
directive|define
name|TIME_INTERNAL_H_INCLUDED_
end_define

begin_include
include|#
directive|include
file|"event2/event-config.h"
end_include

begin_include
include|#
directive|include
file|"evconfig-private.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|EVENT__HAVE_MACH_MACH_TIME_H
end_ifdef

begin_comment
comment|/* For mach_timebase_info */
end_comment

begin_include
include|#
directive|include
file|<mach/mach_time.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_include
include|#
directive|include
file|"event2/util.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|EVENT__HAVE_CLOCK_GETTIME
argument_list|)
operator|&&
name|defined
argument_list|(
name|CLOCK_MONOTONIC
argument_list|)
define|#
directive|define
name|HAVE_POSIX_MONOTONIC
elif|#
directive|elif
name|defined
argument_list|(
name|EVENT__HAVE_MACH_ABSOLUTE_TIME
argument_list|)
define|#
directive|define
name|HAVE_MACH_MONOTONIC
elif|#
directive|elif
name|defined
argument_list|(
name|_WIN32
argument_list|)
define|#
directive|define
name|HAVE_WIN32_MONOTONIC
else|#
directive|else
define|#
directive|define
name|HAVE_FALLBACK_MONOTONIC
endif|#
directive|endif
name|long
name|evutil_tv_to_msec_
parameter_list|(
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|void
name|evutil_usleep_
parameter_list|(
specifier|const
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|_WIN32
typedef|typedef
name|ULONGLONG
function_decl|(
name|WINAPI
modifier|*
name|ev_GetTickCount_func
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
struct|struct
name|evutil_monotonic_timer
block|{
ifdef|#
directive|ifdef
name|HAVE_MACH_MONOTONIC
name|struct
name|mach_timebase_info
name|mach_timebase_units
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_POSIX_MONOTONIC
name|int
name|monotonic_clock
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_WIN32_MONOTONIC
name|ev_GetTickCount_func
name|GetTickCount64_fn
decl_stmt|;
name|ev_GetTickCount_func
name|GetTickCount_fn
decl_stmt|;
name|ev_uint64_t
name|last_tick_count
decl_stmt|;
name|ev_uint64_t
name|adjust_tick_count
decl_stmt|;
name|ev_uint64_t
name|first_tick
decl_stmt|;
name|ev_uint64_t
name|first_counter
decl_stmt|;
name|double
name|usec_per_count
decl_stmt|;
name|int
name|use_performance_counter
decl_stmt|;
endif|#
directive|endif
name|struct
name|timeval
name|adjust_monotonic_clock
decl_stmt|;
name|struct
name|timeval
name|last_time
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|EV_MONOT_PRECISE
value|1
define|#
directive|define
name|EV_MONOT_FALLBACK
value|2
name|int
name|evutil_configure_monotonic_time_
parameter_list|(
name|struct
name|evutil_monotonic_timer
modifier|*
name|mt
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
name|evutil_gettime_monotonic_
parameter_list|(
name|struct
name|evutil_monotonic_timer
modifier|*
name|mt
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EVENT_INTERNAL_H_INCLUDED_ */
end_comment

end_unit

