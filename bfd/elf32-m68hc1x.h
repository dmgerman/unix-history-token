begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Motorola 68HC11/68HC12-specific support for 32-bit ELF    Copyright 2003, 2004 Free Software Foundation, Inc.    Contributed by Stephane Carrez (stcarrez@nerim.fr)  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ELF32_M68HC1X_H
end_ifndef

begin_define
define|#
directive|define
name|_ELF32_M68HC1X_H
end_define

begin_include
include|#
directive|include
file|"elf-bfd.h"
end_include

begin_include
include|#
directive|include
file|"bfdlink.h"
end_include

begin_include
include|#
directive|include
file|"elf/m68hc11.h"
end_include

begin_comment
comment|/* Name of symbols exported by HC11/HC12 linker when there is a memory    bank window.  */
end_comment

begin_define
define|#
directive|define
name|BFD_M68HC11_BANK_START_NAME
value|"__bank_start"
end_define

begin_define
define|#
directive|define
name|BFD_M68HC11_BANK_SIZE_NAME
value|"__bank_size"
end_define

begin_define
define|#
directive|define
name|BFD_M68HC11_BANK_VIRTUAL_NAME
value|"__bank_virtual"
end_define

begin_comment
comment|/* Set and control ELF flags in ELF header.  */
end_comment

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_m68hc11_elf_merge_private_bfd_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_m68hc11_elf_set_private_flags
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|flagword
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_m68hc11_elf_print_private_bfd_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* This hash entry is used to record a trampoline that must be generated    to call a far function using a normal calling convention ('jsr').    The trampoline is used when a pointer to a far function is used.    It takes care of installing the proper memory bank as well as creating    the 'call/rtc' calling convention.  */
end_comment

begin_struct
struct|struct
name|elf32_m68hc11_stub_hash_entry
block|{
comment|/* Base hash table entry structure.  */
name|struct
name|bfd_hash_entry
name|root
decl_stmt|;
comment|/* The stub section.  */
name|asection
modifier|*
name|stub_sec
decl_stmt|;
comment|/* Offset within stub_sec of the beginning of this stub.  */
name|bfd_vma
name|stub_offset
decl_stmt|;
comment|/* Given the symbol's value and its section we can determine its final      value when building the stubs (so the stub knows where to jump.  */
name|bfd_vma
name|target_value
decl_stmt|;
name|asection
modifier|*
name|target_section
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Placeholder for the parameters to compute memory page and physical address.    The following formulas are used:     sym> bank_virtual =>      %addr(sym) = (((sym - bank_virtual)& bank_mask) + bank_physical      %page(sym) = (((sym - bank_virtual)>> bank_shift) % 256     sym< bank_virtual =>      %addr(sym) = sym      %page(sym) = 0      These parameters are obtained from the symbol table by looking    at the following:     __bank_start         Symbol marking the start of memory bank window                         (bank_physical)    __bank_virtual       Logical address of symbols for which the transformation                         must be computed    __bank_page_size     Size in bytes of page size (this is *NOT* the memory                         bank window size and the window size is always                         less or equal to the page size)     For 68HC12, the window is at 0x8000 and the page size is 16K (full window).    For 68HC11 this is board specific (implemented by external hardware).  */
end_comment

begin_struct
struct|struct
name|m68hc11_page_info
block|{
name|bfd_vma
name|bank_virtual
decl_stmt|;
name|bfd_vma
name|bank_physical
decl_stmt|;
name|bfd_vma
name|bank_physical_end
decl_stmt|;
name|bfd_vma
name|bank_mask
decl_stmt|;
name|bfd_vma
name|bank_size
decl_stmt|;
name|int
name|bank_shift
decl_stmt|;
name|int
name|bank_param_initialized
decl_stmt|;
name|bfd_vma
name|trampoline_addr
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|m68hc11_elf_link_hash_table
block|{
name|struct
name|elf_link_hash_table
name|root
decl_stmt|;
name|struct
name|m68hc11_page_info
name|pinfo
decl_stmt|;
comment|/* The stub hash table.  */
name|struct
name|bfd_hash_table
modifier|*
name|stub_hash_table
decl_stmt|;
comment|/* Linker stub bfd.  */
name|bfd
modifier|*
name|stub_bfd
decl_stmt|;
name|asection
modifier|*
name|stub_section
decl_stmt|;
name|asection
modifier|*
name|tramp_section
decl_stmt|;
comment|/* Linker call-backs.  */
name|asection
operator|*
operator|(
operator|*
name|add_stub_section
operator|)
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|asection
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* Assorted information used by elf32_hppa_size_stubs.  */
name|unsigned
name|int
name|bfd_count
decl_stmt|;
name|int
name|top_index
decl_stmt|;
name|asection
modifier|*
modifier|*
name|input_list
decl_stmt|;
comment|/* Small local sym to section mapping cache.  */
name|struct
name|sym_sec_cache
name|sym_sec
decl_stmt|;
name|bfd_boolean
argument_list|(
argument|* size_one_stub
argument_list|)
name|PARAMS
argument_list|(
operator|(
expr|struct
name|bfd_hash_entry
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
name|bfd_boolean
argument_list|(
argument|* build_one_stub
argument_list|)
name|PARAMS
argument_list|(
operator|(
expr|struct
name|bfd_hash_entry
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Get the Sparc64 ELF linker hash table from a link_info structure.  */
end_comment

begin_define
define|#
directive|define
name|m68hc11_elf_hash_table
parameter_list|(
name|p
parameter_list|)
define|\
value|((struct m68hc11_elf_link_hash_table *) ((p)->hash))
end_define

begin_comment
comment|/* Create a 68HC11/68HC12 ELF linker hash table.  */
end_comment

begin_function_decl
specifier|extern
name|struct
name|m68hc11_elf_link_hash_table
modifier|*
name|m68hc11_elf_hash_table_create
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|m68hc11_elf_bfd_link_hash_table_free
parameter_list|(
name|struct
name|bfd_link_hash_table
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|m68hc11_elf_get_bank_parameters
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Return 1 if the address is in banked memory.    This can be applied to a virtual address and to a physical address.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|m68hc11_addr_is_banked
parameter_list|(
name|struct
name|m68hc11_page_info
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Return the physical address seen by the processor, taking    into account banked memory.  */
end_comment

begin_function_decl
specifier|extern
name|bfd_vma
name|m68hc11_phys_addr
parameter_list|(
name|struct
name|m68hc11_page_info
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Return the page number corresponding to an address in banked memory.  */
end_comment

begin_function_decl
specifier|extern
name|bfd_vma
name|m68hc11_phys_page
parameter_list|(
name|struct
name|m68hc11_page_info
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_reloc_status_type
name|m68hc11_elf_ignore_reloc
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|arelent
modifier|*
name|reloc_entry
parameter_list|,
name|asymbol
modifier|*
name|symbol
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|char
modifier|*
modifier|*
name|error_message
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_reloc_status_type
name|m68hc11_elf_special_reloc
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|arelent
modifier|*
name|reloc_entry
parameter_list|,
name|asymbol
modifier|*
name|symbol
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|char
modifier|*
modifier|*
name|error_message
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* GC mark and sweep.  */
end_comment

begin_function_decl
name|asection
modifier|*
name|elf32_m68hc11_gc_mark_hook
parameter_list|(
name|asection
modifier|*
name|sec
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|Elf_Internal_Rela
modifier|*
name|rel
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
name|h
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|sym
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_gc_sweep_hook
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_check_relocs
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_relocate_section
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd_byte
modifier|*
name|contents
parameter_list|,
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|local_syms
parameter_list|,
name|asection
modifier|*
modifier|*
name|local_sections
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_add_symbol_hook
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|sym
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|namep
parameter_list|,
name|flagword
modifier|*
name|flagsp
parameter_list|,
name|asection
modifier|*
modifier|*
name|secp
parameter_list|,
name|bfd_vma
modifier|*
name|valp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Tweak the OSABI field of the elf header.  */
end_comment

begin_function_decl
specifier|extern
name|void
name|elf32_m68hc11_post_process_headers
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|elf32_m68hc11_setup_section_lists
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_size_stubs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
function_decl|(
modifier|*
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bfd_boolean
name|elf32_m68hc11_build_stubs
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

