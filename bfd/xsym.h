begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* xSYM symbol-file support for BFD.    Copyright 1999, 2000, 2001, 2002, 2003    Free Software Foundation, Inc.     This file is part of BFD, the Binary File Descriptor library.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_include
include|#
directive|include
file|"bfd.h"
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__xSYM_H__
end_ifndef

begin_define
define|#
directive|define
name|__xSYM_H__
end_define

begin_define
define|#
directive|define
name|BFD_SYM_VERSION_STR_3_1
value|"\013Version 3.1"
end_define

begin_define
define|#
directive|define
name|BFD_SYM_VERSION_STR_3_2
value|"\013Version 3.2"
end_define

begin_define
define|#
directive|define
name|BFD_SYM_VERSION_STR_3_3
value|"\013Version 3.3"
end_define

begin_define
define|#
directive|define
name|BFD_SYM_VERSION_STR_3_4
value|"\013Version 3.4"
end_define

begin_define
define|#
directive|define
name|BFD_SYM_VERSION_STR_3_5
value|"\013Version 3.5"
end_define

begin_define
define|#
directive|define
name|BFD_SYM_END_OF_LIST_3_2
value|0xffff
end_define

begin_define
define|#
directive|define
name|BFD_SYM_END_OF_LIST_3_4
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|BFD_SYM_END_OF_LIST
value|BFD_SYM_END_OF_LIST_3_4
end_define

begin_define
define|#
directive|define
name|BFD_SYM_FILE_NAME_INDEX_3_2
value|0xfffe
end_define

begin_define
define|#
directive|define
name|BFD_SYM_FILE_NAME_INDEX_3_4
value|0xfffffffe
end_define

begin_define
define|#
directive|define
name|BFD_SYM_FILE_NAME_INDEX
value|BFD_SYM_FILE_NAME_INDEX_3_4
end_define

begin_define
define|#
directive|define
name|BFD_SYM_SOURCE_FILE_CHANGE_3_2
value|0xfffe
end_define

begin_define
define|#
directive|define
name|BFD_SYM_SOURCE_FILE_CHANGE_3_4
value|0xfffffffe
end_define

begin_define
define|#
directive|define
name|BFD_SYM_SOURCE_FILE_CHANGE
value|BFD_SYM_SOURCE_FILE_CHANGE_3_4
end_define

begin_define
define|#
directive|define
name|BFD_SYM_MAXIMUM_LEGAL_INDEX_3_2
value|0xfffd
end_define

begin_define
define|#
directive|define
name|BFD_SYM_MAXIMUM_LEGAL_INDEX_3_4
value|0xfffffffd
end_define

begin_define
define|#
directive|define
name|BFD_SYM_MAXIMUM_LEGAL_INDEX
value|BFD_SYM_MAXIMUM_LEGAL_INDEX_3_4
end_define

begin_enum
enum|enum
name|bfd_sym_storage_class
block|{
name|BFD_SYM_STORAGE_CLASS_REGISTER
init|=
literal|0
block|,
name|BFD_SYM_STORAGE_CLASS_GLOBAL
init|=
literal|1
block|,
name|BFD_SYM_STORAGE_CLASS_FRAME_RELATIVE
init|=
literal|2
block|,
name|BFD_SYM_STORAGE_CLASS_STACK_RELATIVE
init|=
literal|3
block|,
name|BFD_SYM_STORAGE_CLASS_ABSOLUTE
init|=
literal|4
block|,
name|BFD_SYM_STORAGE_CLASS_CONSTANT
init|=
literal|5
block|,
name|BFD_SYM_STORAGE_CLASS_BIGCONSTANT
init|=
literal|6
block|,
name|BFD_SYM_STORAGE_CLASS_RESOURCE
init|=
literal|99
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|bfd_sym_storage_class
name|bfd_sym_storage_class
typedef|;
end_typedef

begin_enum
enum|enum
name|bfd_sym_storage_kind
block|{
name|BFD_SYM_STORAGE_KIND_LOCAL
init|=
literal|0
block|,
name|BFD_SYM_STORAGE_KIND_VALUE
init|=
literal|1
block|,
name|BFD_SYM_STORAGE_KIND_REFERENCE
init|=
literal|2
block|,
name|BFD_SYM_STORAGE_KIND_WITH
init|=
literal|3
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|bfd_sym_storage_kind
name|bfd_sym_storage_kind
typedef|;
end_typedef

begin_enum
enum|enum
name|bfd_sym_version
block|{
name|BFD_SYM_VERSION_3_1
block|,
name|BFD_SYM_VERSION_3_2
block|,
name|BFD_SYM_VERSION_3_3
block|,
name|BFD_SYM_VERSION_3_4
block|,
name|BFD_SYM_VERSION_3_5
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|bfd_sym_version
name|bfd_sym_version
typedef|;
end_typedef

begin_enum
enum|enum
name|bfd_sym_module_kind
block|{
name|BFD_SYM_MODULE_KIND_NONE
init|=
literal|0
block|,
name|BFD_SYM_MODULE_KIND_PROGRAM
init|=
literal|1
block|,
name|BFD_SYM_MODULE_KIND_UNIT
init|=
literal|2
block|,
name|BFD_SYM_MODULE_KIND_PROCEDURE
init|=
literal|3
block|,
name|BFD_SYM_MODULE_KIND_FUNCTION
init|=
literal|4
block|,
name|BFD_SYM_MODULE_KIND_DATA
init|=
literal|5
block|,
name|BFD_SYM_MODULE_KIND_BLOCK
init|=
literal|6
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|bfd_sym_module_kind
name|bfd_sym_module_kind
typedef|;
end_typedef

begin_enum
enum|enum
name|bfd_sym_symbol_scope
block|{
name|BFD_SYM_SYMBOL_SCOPE_LOCAL
init|=
literal|0
block|,
comment|/* Object is seen only inside current scope.  */
name|BFD_SYM_SYMBOL_SCOPE_GLOBAL
init|=
literal|1
comment|/* Object has global scope.  */
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|bfd_sym_symbol_scope
name|bfd_sym_symbol_scope
typedef|;
end_typedef

begin_struct
struct|struct
name|bfd_sym_file_reference
block|{
name|unsigned
name|long
name|fref_frte_index
decl_stmt|;
comment|/* File reference table index.  */
name|unsigned
name|long
name|fref_offset
decl_stmt|;
comment|/* Absolute offset into source file.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_file_reference
name|bfd_sym_file_reference
typedef|;
end_typedef

begin_comment
comment|/* NAME TABLE (NTE).  */
end_comment

begin_comment
comment|/* RESOURCES TABLE (RTE)     All code and data is *defined* to reside in a resource.  Even A5    relative data is defined to reside in a dummy resource of ResType    'gbld'.  Code always resides in a resource.  Because a code/data    is built of many modules, when walking through a resource we must    point back to the modules in the order they were defined.  This is    done by requiring the entries in the Modules Entry table to be    ordered by resource/resource-number and by the location in that    resource.  Hence, the resource table entry points to the first    module making up that resource.  All modules table entries following    that first one with the same restype/resnum are contiguous and offset    from that first entry.  */
end_comment

begin_struct
struct|struct
name|bfd_sym_resources_table_entry
block|{
name|unsigned
name|char
name|rte_res_type
index|[
literal|4
index|]
decl_stmt|;
comment|/* Resource Type.  */
name|unsigned
name|short
name|rte_res_number
decl_stmt|;
comment|/* Resource Number.  */
name|unsigned
name|long
name|rte_nte_index
decl_stmt|;
comment|/* Name of the resource.  */
name|unsigned
name|long
name|rte_mte_first
decl_stmt|;
comment|/* Index of first module in the resource.  */
name|unsigned
name|long
name|rte_mte_last
decl_stmt|;
comment|/* Index of the last module in the resource.	*/
name|unsigned
name|long
name|rte_res_size
decl_stmt|;
comment|/* Size of the resource.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_resources_table_entry
name|bfd_sym_resources_table_entry
typedef|;
end_typedef

begin_comment
comment|/* MODULES TABLE (MTE)     Modules table entries are ordered by their appearance in a resource.    (Note that having a single module copied into two resources is not    possible).  Modules map back to their resource via an index into the    resource table and an offset into the resource.  Modules also point    to their source files, both the definition module and implementation    module.  Because modules can be textually nested within other    modules, a link to the parent (containing) module is required.  This    module can textually contain other modules.  A link to the contiguous    list of child (contained) modules is required.  Variables, statements,    and types defined in the module are pointed to by indexing the head of    the contiguous lists of contained variables, contained statements,    and contained types.  */
end_comment

begin_struct
struct|struct
name|bfd_sym_modules_table_entry
block|{
name|unsigned
name|long
name|mte_rte_index
decl_stmt|;
comment|/* Which resource it is in.  */
name|unsigned
name|long
name|mte_res_offset
decl_stmt|;
comment|/* Offset into the resource.  */
name|unsigned
name|long
name|mte_size
decl_stmt|;
comment|/* Size of module.  */
name|char
name|mte_kind
decl_stmt|;
comment|/* What kind of module this is.  */
name|char
name|mte_scope
decl_stmt|;
comment|/* How visible is it?  */
name|unsigned
name|long
name|mte_parent
decl_stmt|;
comment|/* Containing module.  */
name|bfd_sym_file_reference
name|mte_imp_fref
decl_stmt|;
comment|/* Implementation source.  */
name|unsigned
name|long
name|mte_imp_end
decl_stmt|;
comment|/* End of implementation source.  */
name|unsigned
name|long
name|mte_nte_index
decl_stmt|;
comment|/* The name of the module.  */
name|unsigned
name|long
name|mte_cmte_index
decl_stmt|;
comment|/* Modules contained in this.  */
name|unsigned
name|long
name|mte_cvte_index
decl_stmt|;
comment|/* Variables contained in this.  */
name|unsigned
name|long
name|mte_clte_index
decl_stmt|;
comment|/* Local labels defined here.  */
name|unsigned
name|long
name|mte_ctte_index
decl_stmt|;
comment|/* Types contained in this.  */
name|unsigned
name|long
name|mte_csnte_idx_1
decl_stmt|;
comment|/* CSNTE index of mte_snbr_first.  */
name|unsigned
name|long
name|mte_csnte_idx_2
decl_stmt|;
comment|/* CSNTE index of mte_snbr_last.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_modules_table_entry
name|bfd_sym_modules_table_entry
typedef|;
end_typedef

begin_comment
comment|/* FILE REFERENCES TABLE (FRTE)     The FILE REFERENCES TABLE maps from source file to module& offset.    The table is ordered by increasing file offset.  Each new offset    references a module.   				FRT	= FILE_SOURCE_START  							FILE_SOURCE_INCREMENT*  							END_OF_LIST.  	*** THIS MECHANISM IS VERY SLOW FOR FILE+STATEMENT_NUMBER TO  	*** MODULE/CODE ADDRESS OPERATIONS.  ANOTHER MECHANISM IS  	***	REQUIRED!!  */
end_comment

begin_union
union|union
name|bfd_sym_file_references_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, FILE_NAME_INDEX, or module table entry.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
comment|/* FILE_NAME_INDEX.  */
name|unsigned
name|long
name|type
decl_stmt|;
name|unsigned
name|long
name|nte_index
decl_stmt|;
name|unsigned
name|long
name|mod_date
decl_stmt|;
block|}
name|filename
struct|;
struct|struct
block|{
comment|/*< FILE_NAME_INDEX.  */
name|unsigned
name|long
name|mte_index
decl_stmt|;
name|unsigned
name|long
name|file_offset
decl_stmt|;
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_file_references_table_entry
name|bfd_sym_file_references_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONTAINED MODULES TABLE (CMTE)     Contained Modules are lists of indices into the modules table.  The    lists are terminated by an END_OF_LIST index.  All entries are of the    same size, hence mapping an index into a CMTE list is simple.     CMT = MTE_INDEX* END_OF_LIST.  */
end_comment

begin_union
union|union
name|bfd_sym_contained_modules_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, index.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
name|unsigned
name|long
name|mte_index
decl_stmt|;
comment|/* Index into the Modules Table.  */
name|unsigned
name|long
name|nte_index
decl_stmt|;
comment|/* The name of the module.  */
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_contained_modules_table_entry
name|bfd_sym_contained_modules_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONTAINED VARIABLES TABLE (CVTE)     Contained Variables map into the module table, file table, name table, and type    table.  Contained Variables are a contiguous list of source file change record,    giving the name of and offset into the source file corresponding to all variables    following.  Variable definition records contain an index into the name table (giving    the text of the variable as it appears in the source code), an index into the type    table giving the type of the variable, an increment added to the source file    offset giving the start of the implementation of the variable, and a storage    class address, giving information on variable's runtime address.     CVT = SOURCE_FILE_CHANGE SYMBOL_INFO* END_OF_LIST.    SYMBOL_INFO = SYMBOL_DEFINITION | SOURCE_FILE_CHANGE .     All entries are of the same size, making the fetching of data simple.  The    variable entries in the list are in ALPHABETICAL ORDER to simplify the display of    available variables for several of the debugger's windows.  */
end_comment

begin_comment
comment|/* 'la_size' determines the variant used below:       == BFD_SYM_CVTE_SCA      Traditional STORAGE_CLASS_ADDRESS;<= BFD_SYM_CVTE_LA_MAX_SIZE      That many logical address bytes ("in-situ");       == BFD_SYM_CVTE_BIG_LA      Logical address bytes in constant pool, at offset 'big_la'.  */
end_comment

begin_define
define|#
directive|define
name|BFD_SYM_CVTE_SCA
value|0
end_define

begin_comment
comment|/* Indicate SCA variant of CVTE.  */
end_comment

begin_define
define|#
directive|define
name|BFD_SYM_CVTE_LA_MAX_SIZE
value|13
end_define

begin_comment
comment|/* Max# of logical address bytes in a CVTE.  */
end_comment

begin_define
define|#
directive|define
name|BFD_SYM_CVTE_BIG_LA
value|127
end_define

begin_comment
comment|/* Indicates LA redirection to constant pool.  */
end_comment

begin_union
union|union
name|bfd_sym_contained_variables_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, SOURCE_FILE_CHANGE, or type table entry.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
comment|/* SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|type
decl_stmt|;
name|bfd_sym_file_reference
name|fref
decl_stmt|;
block|}
name|file
struct|;
struct|struct
block|{
comment|/*< SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|tte_index
decl_stmt|;
name|unsigned
name|long
name|nte_index
decl_stmt|;
name|unsigned
name|long
name|file_delta
decl_stmt|;
comment|/* Increment from previous source.  */
name|unsigned
name|char
name|scope
decl_stmt|;
name|unsigned
name|char
name|la_size
decl_stmt|;
comment|/* #bytes of LAs below.  */
union|union
block|{
comment|/* la_size == BFD_SYM_CVTE_SCA.  */
struct|struct
block|{
name|unsigned
name|char
name|sca_kind
decl_stmt|;
comment|/* Distinguish local from value/var formal.  */
name|unsigned
name|char
name|sca_class
decl_stmt|;
comment|/* The storage class itself.  */
name|unsigned
name|long
name|sca_offset
decl_stmt|;
block|}
name|scstruct
struct|;
comment|/* la_size<= BFD_SYM_CVTE_LA_MAX_SIZE.  */
struct|struct
block|{
name|unsigned
name|char
name|la
index|[
name|BFD_SYM_CVTE_LA_MAX_SIZE
index|]
decl_stmt|;
comment|/* Logical address bytes.  */
name|unsigned
name|char
name|la_kind
decl_stmt|;
comment|/* Eqv. cvte_location.sca_kind.  */
block|}
name|lastruct
struct|;
comment|/* la_size == BFD_SYM_CVTE_BIG_LA 127.  */
struct|struct
block|{
name|unsigned
name|long
name|big_la
decl_stmt|;
comment|/* Logical address bytes in constant pool.  */
name|unsigned
name|char
name|big_la_kind
decl_stmt|;
comment|/* Eqv. cvte_location.sca_kind.  */
block|}
name|biglastruct
struct|;
block|}
name|address
union|;
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_contained_variables_table_entry
name|bfd_sym_contained_variables_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONTAINED STATEMENTS TABLE (CSNTE)     Contained Statements table.  This table is similar to the Contained    Variables table except that instead of VARIABLE_DEFINITION entries, this    module contains STATEMENT_NUMBER_DEFINITION entries.  A statement number    definition points back to the containing module (via an index into    the module entry table) and contains the file and resource deltas    to add to the previous values to get to this statement.    All entries are of the same size, making the fetching of data simple.  The    entries in the table are in order of increasing statement number within the    source file.     The Contained Statements table is indexed from two places.  An MTE contains    an index to the first statement number within the module.  An FRTE contains    an index to the first statement in the table (Possibly.  This is slow.)  Or    a table of fast statement number to CSNTE entry mappings indexes into the    table.  Choice not yet made.  */
end_comment

begin_union
union|union
name|bfd_sym_contained_statements_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, SOURCE_FILE_CHANGE, or statement table entry.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
comment|/* SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|type
decl_stmt|;
name|bfd_sym_file_reference
name|fref
decl_stmt|;
comment|/* File name table.  */
block|}
name|file
struct|;
struct|struct
block|{
name|unsigned
name|long
name|mte_index
decl_stmt|;
comment|/* Which module contains it.  */
name|unsigned
name|long
name|file_delta
decl_stmt|;
comment|/* Where it is defined.  */
name|unsigned
name|long
name|mte_offset
decl_stmt|;
comment|/* Where it is in the module.  */
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_contained_statements_table_entry
name|bfd_sym_contained_statements_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONTAINED LABELS TABLE (CLTE)     Contained Labels table names those labels local to the module.  It is similar    to the Contained Statements table.  */
end_comment

begin_union
union|union
name|bfd_sym_contained_labels_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, SOURCE_FILE_CHANGE, index.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
comment|/* SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|type
decl_stmt|;
name|bfd_sym_file_reference
name|fref
decl_stmt|;
block|}
name|file
struct|;
struct|struct
block|{
comment|/*< SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|mte_index
decl_stmt|;
comment|/* Which module contains us.  */
name|unsigned
name|long
name|mte_offset
decl_stmt|;
comment|/* Where it is in the module.  */
name|unsigned
name|long
name|nte_index
decl_stmt|;
comment|/* The name of the label.  */
name|unsigned
name|long
name|file_delta
decl_stmt|;
comment|/* Where it is defined.  */
name|unsigned
name|short
name|scope
decl_stmt|;
comment|/* How visible the label is.  */
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_contained_labels_table_entry
name|bfd_sym_contained_labels_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONTAINED TYPES TABLE (CTTE)     Contained Types define the named types that are in the module.  It is used to    map name indices into type indices.  The type entries in the table are in    alphabetical order by type name.  */
end_comment

begin_union
union|union
name|bfd_sym_contained_types_table_entry
block|{
struct|struct
block|{
comment|/* END_OF_LIST, SOURCE_FILE_CHANGE, or type table entry.  */
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
comment|/* SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|type
decl_stmt|;
name|bfd_sym_file_reference
name|fref
decl_stmt|;
block|}
name|file
struct|;
struct|struct
block|{
comment|/*< SOURCE_FILE_CHANGE.  */
name|unsigned
name|long
name|tte_index
decl_stmt|;
name|unsigned
name|long
name|nte_index
decl_stmt|;
name|unsigned
name|long
name|file_delta
decl_stmt|;
comment|/* From last file definition.  */
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_contained_types_table_entry
name|bfd_sym_contained_types_table_entry
typedef|;
end_typedef

begin_comment
comment|/* TYPE TABLE (TTE).  */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|long
name|bfd_sym_type_table_entry
typedef|;
end_typedef

begin_comment
comment|/* TYPE INFORMATION TABLE (TINFO).  */
end_comment

begin_struct
struct|struct
name|bfd_sym_type_information_table_entry
block|{
name|unsigned
name|long
name|nte_index
decl_stmt|;
name|unsigned
name|long
name|physical_size
decl_stmt|;
name|unsigned
name|long
name|logical_size
decl_stmt|;
name|unsigned
name|long
name|offset
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_type_information_table_entry
name|bfd_sym_type_information_table_entry
typedef|;
end_typedef

begin_comment
comment|/* FILE REFERENCES INDEX TABLE (FITE)     The FRTE INDEX TABLE indexes into the FILE REFERENCE TABLE above.  The FRTE    at that index is the FILE_SOURCE_START for a series of files.  The FRTEs are    indexed from 1.  The list is terminated with an END_OF_LIST.  */
end_comment

begin_union
union|union
name|bfd_sym_file_references_index_table_entry
block|{
struct|struct
block|{
name|unsigned
name|long
name|type
decl_stmt|;
block|}
name|generic
struct|;
struct|struct
block|{
name|unsigned
name|long
name|frte_index
decl_stmt|;
comment|/* Index into the FRTE table.  */
name|unsigned
name|long
name|nte_index
decl_stmt|;
comment|/* Name table index, gives filename.  */
block|}
name|entry
struct|;
block|}
union|;
end_union

begin_typedef
typedef|typedef
name|union
name|bfd_sym_file_references_index_table_entry
name|bfd_sym_file_references_index_table_entry
typedef|;
end_typedef

begin_comment
comment|/* CONSTANT POOL (CONST)     The CONSTANT_POOL consists of entries that start on word boundaries.  The entries    are referenced by byte index into the constant pool, not by record number.     Each entry takes the form:<16-bit size><that many bytes of stuff>     Entries do not cross page boundaries.  */
end_comment

begin_typedef
typedef|typedef
name|short
name|bfd_sym_constant_pool_entry
typedef|;
end_typedef

begin_comment
comment|/* The DISK_SYMBOL_HEADER_BLOCK is the first record in a .SYM file,    defining the physical characteristics of the symbolic information.    The remainder of the * .SYM file is stored in fixed block    allocations. For the purposes of paging, the * file is considered    to be an array of dshb_page_size blocks, with block 0 (and *    possibly more) devoted to the DISK_SYMBOL_HEADER_BLOCK.     The dti_object_count field means that the allowed indices for that    type of object are 0 .. dti_object_count. An index of 0, although    allowed, is never done.  However, an 0th entry is created in the    table.  That entry is filled with all zeroes.  The reason for this    is to avoid off-by-one programming errors that would otherwise    occur: an index of k *MEANS* k, not k-1 when going to the disk    table.  */
end_comment

begin_struct
struct|struct
name|bfd_sym_table_info
block|{
name|unsigned
name|long
name|dti_first_page
decl_stmt|;
comment|/* First page for this table.  */
name|unsigned
name|long
name|dti_page_count
decl_stmt|;
comment|/* Number of pages for the table.  */
name|unsigned
name|long
name|dti_object_count
decl_stmt|;
comment|/* Number of objects in the table.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_table_info
name|bfd_sym_table_info
typedef|;
end_typedef

begin_struct
struct|struct
name|bfd_sym_header_block
block|{
name|unsigned
name|char
name|dshb_id
index|[
literal|32
index|]
decl_stmt|;
comment|/* Version information.  */
name|unsigned
name|short
name|dshb_page_size
decl_stmt|;
comment|/* Size of the pages/blocks.  */
name|unsigned
name|long
name|dshb_hash_page
decl_stmt|;
comment|/* Disk page for the hash table.  */
name|unsigned
name|long
name|dshb_root_mte
decl_stmt|;
comment|/* MTE index of the program root.  */
name|unsigned
name|long
name|dshb_mod_date
decl_stmt|;
comment|/* modification date of executable.  */
name|bfd_sym_table_info
name|dshb_frte
decl_stmt|;
comment|/* Per TABLE information.  */
name|bfd_sym_table_info
name|dshb_rte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_mte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_cmte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_cvte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_csnte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_clte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_ctte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_tte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_nte
decl_stmt|;
name|bfd_sym_table_info
name|dshb_tinfo
decl_stmt|;
name|bfd_sym_table_info
name|dshb_fite
decl_stmt|;
comment|/* File information.  */
name|bfd_sym_table_info
name|dshb_const
decl_stmt|;
comment|/* Constant pool.  */
name|unsigned
name|char
name|dshb_file_creator
index|[
literal|4
index|]
decl_stmt|;
comment|/* Executable's creator.  */
name|unsigned
name|char
name|dshb_file_type
index|[
literal|4
index|]
decl_stmt|;
comment|/* Executable's file type.  */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_header_block
name|bfd_sym_header_block
typedef|;
end_typedef

begin_struct
struct|struct
name|bfd_sym_data_struct
block|{
name|unsigned
name|char
modifier|*
name|name_table
decl_stmt|;
name|bfd_sym_header_block
name|header
decl_stmt|;
name|bfd_sym_version
name|version
decl_stmt|;
name|bfd
modifier|*
name|sbfd
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|bfd_sym_data_struct
name|bfd_sym_data_struct
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|bfd_boolean
name|bfd_sym_mkobject
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|asymbol
operator|*
operator|,
name|bfd_print_symbol_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_boolean
name|bfd_sym_valid
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|char
modifier|*
name|bfd_sym_read_name_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_header_block
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_file_reference_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_file_reference
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_disk_table_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_table_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_header_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_header_block
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_read_header_v32
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_header_block
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_read_header_v34
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_header_block
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_read_header
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_header_block
operator|*
operator|,
name|bfd_sym_version
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_read_version
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_version
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_table_summary
name|PARAMS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|bfd_sym_table_info
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_header
name|PARAMS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|bfd_sym_header_block
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_resources_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_resources_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_modules_table_entry_v33
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_modules_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_file_references_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_file_references_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_contained_modules_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_contained_modules_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_contained_variables_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_contained_variables_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_contained_statements_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_contained_statements_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_contained_labels_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_contained_labels_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_parse_type_table_entry_v32
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
name|bfd_sym_type_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_resources_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_resources_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_modules_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_modules_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_file_references_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_file_references_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_contained_modules_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_contained_modules_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_contained_variables_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_contained_variables_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_contained_statements_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_contained_statements_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_contained_labels_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_contained_labels_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_contained_types_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_contained_types_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_file_references_index_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_file_references_index_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_constant_pool_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_constant_pool_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_type_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_type_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_type_information_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_type_information_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_type_table_information
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_type_information_table_entry
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|unsigned
name|char
modifier|*
name|bfd_sym_symbol_name
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|unsigned
name|char
modifier|*
name|bfd_sym_module_name
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_unparse_storage_kind
name|PARAMS
argument_list|(
operator|(
expr|enum
name|bfd_sym_storage_kind
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_unparse_storage_class
name|PARAMS
argument_list|(
operator|(
expr|enum
name|bfd_sym_storage_class
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_unparse_module_kind
name|PARAMS
argument_list|(
operator|(
expr|enum
name|bfd_sym_module_kind
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_unparse_symbol_scope
name|PARAMS
argument_list|(
operator|(
expr|enum
name|bfd_sym_symbol_scope
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_file_reference
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_file_reference
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_resources_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_resources_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_modules_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_modules_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_file_references_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_file_references_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_contained_modules_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_contained_modules_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_contained_variables_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
name|f
operator|,
name|bfd_sym_contained_variables_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_contained_statements_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_contained_statements_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_contained_labels_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_contained_labels_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_contained_types_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_contained_types_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_type_operator_name
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_sym_type_basic_name
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_fetch_long
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|unsigned
name|long
operator|,
name|unsigned
name|long
operator|,
name|unsigned
name|long
operator|*
operator|,
name|long
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_type_information
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
name|long
operator|,
name|unsigned
name|long
operator|,
name|unsigned
name|long
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_type_information_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_type_information_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_file_references_index_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_file_references_index_table_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_print_constant_pool_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|bfd_sym_constant_pool_entry
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|char
modifier|*
name|bfd_sym_display_name_table_entry
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_name_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_resources_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_modules_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_file_references_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_contained_modules_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_contained_variables_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_contained_statements_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_contained_labels_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_contained_types_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_file_references_index_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_constant_pool
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_display_type_information_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_scan
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_sym_version
operator|,
name|bfd_sym_data_struct
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|bfd_target
modifier|*
name|bfd_sym_object_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|asymbol
modifier|*
name|bfd_sym_make_empty_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_sym_get_symbol_info
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|,
name|symbol_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|bfd_sym_get_symtab_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|bfd_sym_canonicalize_symtab
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_sym_sizeof_headers
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd_boolean
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __xSYM_H__ */
end_comment

end_unit

