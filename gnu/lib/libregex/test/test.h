begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* test.h: for Regex testing.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TEST_H
end_ifndef

begin_define
define|#
directive|define
name|TEST_H
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|"regex.h"
end_include

begin_comment
comment|/* A strlen that works even on a null pointer.  */
end_comment

begin_define
define|#
directive|define
name|SAFE_STRLEN
parameter_list|(
name|s
parameter_list|)
value|(s == NULL ? 0 : strlen (s))
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|false
init|=
literal|0
block|,
name|true
init|=
literal|1
block|}
name|boolean
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|boolean
name|test_should_match
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|omit_register_tests
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|void
modifier|*
name|xmalloc
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/* Defined in upcase.c.  */
end_comment

begin_decl_stmt
specifier|extern
name|char
name|upcase
index|[]
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
enum|enum
block|{
name|all_test
block|,
name|other_test
block|,
name|posix_basic_test
block|,
name|posix_extended_test
block|,
name|posix_interface_test
block|,
name|regress_test
block|}
name|test_type
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|test_type
name|t
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|__STDC__
end_if

begin_function_decl
specifier|extern
name|char
modifier|*
name|concat
parameter_list|(
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|general_test
parameter_list|(
name|unsigned
name|pattern_should_be_valid
parameter_list|,
name|unsigned
name|match_whole_string
parameter_list|,
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|str1
parameter_list|,
name|char
modifier|*
name|str2
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|range
parameter_list|,
name|int
name|end
parameter_list|,
name|char
modifier|*
name|correct_fastmap
parameter_list|,
name|struct
name|re_registers
modifier|*
name|correct_regs
parameter_list|,
name|int
name|can_be_null
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|init_pattern_buffer
parameter_list|(
name|regex_t
modifier|*
name|pattern_buffer_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_compile
parameter_list|(
name|unsigned
name|valid_pattern
parameter_list|,
name|int
name|error_code_expected
parameter_list|,
specifier|const
name|char
modifier|*
name|pattern
parameter_list|,
name|regex_t
modifier|*
name|pattern_buffer_ptr
parameter_list|,
name|int
name|cflags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|delimiter_to_ops
parameter_list|(
name|char
modifier|*
name|source
parameter_list|,
name|char
name|left_delimiter
parameter_list|,
name|char
name|right_delimiter
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_search_return
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_berk_search
parameter_list|(
specifier|const
name|char
modifier|*
name|pattern
parameter_list|,
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_fastmap
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|fastmap_string
parameter_list|,
name|unsigned
name|invert
parameter_list|,
name|unsigned
name|match_newline
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_fastmap_search
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|str
parameter_list|,
name|char
modifier|*
name|fastmap_string
parameter_list|,
name|unsigned
name|invert
parameter_list|,
name|unsigned
name|match_newline
parameter_list|,
name|int
name|can_be_null
parameter_list|,
name|int
name|start0
parameter_list|,
name|int
name|end0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_all_registers
parameter_list|(
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|str1
parameter_list|,
name|char
modifier|*
name|str2
parameter_list|,
name|int
name|start0
parameter_list|,
name|int
name|end0
parameter_list|,
name|int
name|start1
parameter_list|,
name|int
name|end1
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|end2
parameter_list|,
name|int
name|start3
parameter_list|,
name|int
name|end3
parameter_list|,
name|int
name|start4
parameter_list|,
name|int
name|end4
parameter_list|,
name|int
name|start5
parameter_list|,
name|int
name|end5
parameter_list|,
name|int
name|start6
parameter_list|,
name|int
name|end6
parameter_list|,
name|int
name|start7
parameter_list|,
name|int
name|end7
parameter_list|,
name|int
name|start8
parameter_list|,
name|int
name|end8
parameter_list|,
name|int
name|start9
parameter_list|,
name|int
name|end9
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|print_pattern_info
parameter_list|(
specifier|const
name|char
modifier|*
name|pattern
parameter_list|,
name|regex_t
modifier|*
name|pattern_buffer_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|compile_and_print_pattern
parameter_list|(
name|char
modifier|*
name|pattern
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_case_fold
parameter_list|(
specifier|const
name|char
modifier|*
name|pattern
parameter_list|,
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_posix_generic
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_grouping
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|invalid_pattern
parameter_list|(
name|int
name|error_code_expected
parameter_list|,
name|char
modifier|*
name|pattern
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|valid_nonposix_pattern
parameter_list|(
name|char
modifier|*
name|pattern
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|valid_pattern
parameter_list|(
name|char
modifier|*
name|pattern
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_match_2
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|str1
parameter_list|,
name|char
modifier|*
name|str2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|test_match
parameter_list|(
specifier|const
name|char
modifier|*
name|pat
parameter_list|,
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STDC__  */
end_comment

begin_define
define|#
directive|define
name|TEST_REGISTERS_2
parameter_list|(
name|pat
parameter_list|,
name|str1
parameter_list|,
name|str2
parameter_list|,
name|start0
parameter_list|,
name|end0
parameter_list|,
name|start1
parameter_list|,
name|end1
parameter_list|,
name|start2
parameter_list|,
name|end2
parameter_list|)
define|\
value|if (!omit_register_tests)						\     test_all_registers (pat, str1, str2, start0, end0, start1, end1,	\ 	  	        start2, end2, -1, -1,  -1, -1,  -1, -1,  -1, -1,\                         -1, -1, -1, -1,  -1, -1)			\   #define TEST_REGISTERS(pat, str, start0, end0, start1, end1, start2, end2) \    TEST_REGISTERS_2 (pat, str, NULL, start0, end0, start1, end1, start2, end2)\  #define BRACES_TO_OPS(string)  ((char *) delimiters_to_ops (string, '{', '}'))
end_define

begin_define
define|#
directive|define
name|PARENS_TO_OPS
parameter_list|(
name|string
parameter_list|)
value|((char *) delimiters_to_ops (string, '(', ')'))
end_define

begin_define
define|#
directive|define
name|INVALID_PATTERN
parameter_list|(
name|pat
parameter_list|)
define|\
value|general_test (0, 0, pat, NULL, NULL, -1, 0, -1, NULL, 0, -1)
end_define

begin_define
define|#
directive|define
name|MATCH_SELF
parameter_list|(
name|p
parameter_list|)
value|test_match (p, p)
end_define

begin_define
define|#
directive|define
name|TEST_POSITIONED_MATCH
parameter_list|(
name|pat
parameter_list|,
name|str
parameter_list|,
name|start
parameter_list|)
define|\
value|general_test (1, 0, pat, str, NULL, start, 1, SAFE_STRLEN (str),	\ 		NULL, 0, -1)
end_define

begin_define
define|#
directive|define
name|TEST_TRUNCATED_MATCH
parameter_list|(
name|pat
parameter_list|,
name|str
parameter_list|,
name|end
parameter_list|)
define|\
value|general_test (1, 0, pat, str, NULL, 0, 1, end, NULL, 0, -1)
end_define

begin_define
define|#
directive|define
name|TEST_SEARCH_2
parameter_list|(
name|pat
parameter_list|,
name|str1
parameter_list|,
name|str2
parameter_list|,
name|start
parameter_list|,
name|range
parameter_list|,
name|one_past_end
parameter_list|)
define|\
value|general_test (1, 0, pat, str1, str2, start, range, one_past_end, 	\   NULL, 0, -1)
end_define

begin_define
define|#
directive|define
name|TEST_SEARCH
parameter_list|(
name|pat
parameter_list|,
name|str
parameter_list|,
name|start
parameter_list|,
name|range
parameter_list|)
define|\
value|{									\     TEST_SEARCH_2 (pat, str, NULL, start, range, SAFE_STRLEN (str));	\     TEST_SEARCH_2 (pat, NULL, str, start, range, SAFE_STRLEN (str));	\   }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* TEST_H  */
end_comment

begin_escape
end_escape

begin_comment
comment|/* Local variables: make-backup-files: t version-control: t trim-versions-without-asking: nil End: */
end_comment

end_unit

