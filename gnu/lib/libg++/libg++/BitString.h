begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BitString_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_BitString_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_define
define|#
directive|define
name|BITSTRBITS
value|(sizeof(short) * CHAR_BIT)
end_define

begin_struct
struct|struct
name|BitStrRep
block|{
name|unsigned
name|int
name|len
decl_stmt|;
comment|// length in bits
name|unsigned
name|short
name|sz
decl_stmt|;
comment|// allocated slots
name|unsigned
name|short
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// bits start here
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|BStr_alloc
parameter_list|(
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|short
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|BStr_resize
parameter_list|(
name|BitStrRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|BStr_copy
parameter_list|(
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|cmpl
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|and
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|or
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|xor
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|diff
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|cat
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|cat
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|BitStrRep
modifier|*
name|lshift
parameter_list|(
specifier|const
name|BitStrRep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|BitStrRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|BitString
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitPattern
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|BitStrBit
block|{
name|protected
label|:
name|BitString
modifier|&
name|src
decl_stmt|;
name|unsigned
name|int
name|pos
decl_stmt|;
name|public
label|:
name|BitStrBit
argument_list|(
argument|BitString& v
argument_list|,
argument|int p
argument_list|)
empty_stmt|;
name|BitStrBit
argument_list|(
specifier|const
name|BitStrBit
operator|&
name|b
argument_list|)
expr_stmt|;
operator|~
name|BitStrBit
argument_list|()
expr_stmt|;
name|operator
name|unsigned
name|int
argument_list|()
specifier|const
expr_stmt|;
name|int
name|operator
init|=
operator|(
name|unsigned
name|int
name|b
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BitSubString
block|{
name|friend
name|class
name|BitString
decl_stmt|;
name|friend
name|class
name|BitPattern
decl_stmt|;
name|protected
label|:
name|BitString
modifier|&
name|S
decl_stmt|;
name|unsigned
name|int
name|pos
decl_stmt|;
name|unsigned
name|int
name|len
decl_stmt|;
name|BitSubString
argument_list|(
argument|BitString& x
argument_list|,
argument|int p
argument_list|,
argument|int l
argument_list|)
empty_stmt|;
name|BitSubString
argument_list|(
specifier|const
name|BitSubString
operator|&
name|x
argument_list|)
expr_stmt|;
name|public
label|:
operator|~
name|BitSubString
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|BitString
operator|&
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|BitSubString
operator|&
operator|)
decl_stmt|;
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BitString
block|{
name|friend
name|class
name|BitSubString
decl_stmt|;
name|friend
name|class
name|BitPattern
decl_stmt|;
name|protected
label|:
name|BitStrRep
modifier|*
name|rep
decl_stmt|;
name|int
name|search
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|unsigned
name|short
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
decl|const
decl_stmt|;
name|int
name|match
argument_list|(
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|unsigned
name|short
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
decl|const
decl_stmt|;
name|BitSubString
name|_substr
parameter_list|(
name|int
name|first
parameter_list|,
name|int
name|l
parameter_list|)
function_decl|;
name|public
label|:
comment|// constructors
name|BitString
argument_list|()
expr_stmt|;
name|BitString
argument_list|(
specifier|const
name|BitString
operator|&
argument_list|)
expr_stmt|;
name|BitString
argument_list|(
specifier|const
name|BitSubString
operator|&
name|y
argument_list|)
expr_stmt|;
operator|~
name|BitString
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
name|unsigned
name|int
name|bit
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|BitSubString
operator|&
name|y
operator|)
decl_stmt|;
comment|// equality& subset tests
name|friend
name|int
name|operator
operator|==
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitString
operator|&
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
comment|// procedural versions of operators
name|friend
name|void
name|and
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|or
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|xor
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|diff
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|cat
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|lshift
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|rshift
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|complement
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|lcompare
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|)
function_decl|;
comment|// assignment-based operators
comment|// (constuctive versions decalred inline below
name|void
name|operator
operator||=
operator|(
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|&=
operator|(
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|-=
operator|(
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|^=
operator|(
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
name|unsigned
name|int
name|b
operator|)
expr_stmt|;
name|void
name|operator
operator|<<=
operator|(
name|int
name|s
operator|)
expr_stmt|;
name|void
name|operator
operator|>>=
operator|(
name|int
name|s
operator|)
expr_stmt|;
name|void
name|complement
parameter_list|()
function_decl|;
comment|// individual bit manipulation
name|void
name|set
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|void
name|set
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|invert
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|void
name|invert
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
function_decl|;
name|int
name|test
argument_list|(
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|test
argument_list|(
name|int
name|from
argument_list|,
name|int
name|to
argument_list|)
decl|const
decl_stmt|;
name|void
name|assign
parameter_list|(
name|int
name|p
parameter_list|,
name|unsigned
name|int
name|bit
parameter_list|)
function_decl|;
comment|// indexing
name|BitStrBit
name|operator
function_decl|[]
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
comment|// iterators
name|int
name|first
argument_list|(
name|unsigned
name|int
name|bit
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|last
argument_list|(
name|unsigned
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|next
argument_list|(
name|int
name|pos
argument_list|,
name|unsigned
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|prev
argument_list|(
name|int
name|pos
argument_list|,
name|unsigned
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|previous
argument_list|(
name|int
name|pos
argument_list|,
name|unsigned
name|int
name|b
operator|=
literal|1
argument_list|)
decl|const
block|{
return|return
name|prev
argument_list|(
name|pos
argument_list|,
name|b
argument_list|)
return|;
block|}
comment|/* Obsolete synonym */
comment|// searching& matching
name|int
name|index
argument_list|(
name|unsigned
name|int
name|bit
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|BitString
operator|&
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|BitSubString
operator|&
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|index
argument_list|(
specifier|const
name|BitPattern
operator|&
argument_list|,
name|int
name|startpos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitSubString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitPattern
operator|&
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitString
operator|&
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitSubString
operator|&
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|contains
argument_list|(
specifier|const
name|BitPattern
operator|&
argument_list|,
name|int
name|pos
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|BitString
operator|&
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|BitSubString
operator|&
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
name|int
name|matches
argument_list|(
specifier|const
name|BitPattern
operator|&
argument_list|,
name|int
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|// BitSubString extraction
name|BitSubString
name|at
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BitSubString
name|at
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|at
parameter_list|(
specifier|const
name|BitSubString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|at
parameter_list|(
specifier|const
name|BitPattern
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|before
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|BitSubString
name|before
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|before
parameter_list|(
specifier|const
name|BitSubString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|before
parameter_list|(
specifier|const
name|BitPattern
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|after
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
name|BitSubString
name|after
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|after
parameter_list|(
specifier|const
name|BitSubString
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
name|BitSubString
name|after
parameter_list|(
specifier|const
name|BitPattern
modifier|&
parameter_list|,
name|int
name|startpos
init|=
literal|0
parameter_list|)
function_decl|;
comment|// other friends& utilities
name|friend
name|BitString
name|common_prefix
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
name|pos
init|=
literal|0
parameter_list|)
function_decl|;
name|friend
name|BitString
name|common_suffix
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
specifier|const
name|BitString
modifier|&
parameter_list|,
name|int
name|pos
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|friend
name|BitString
name|reverse
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|)
function_decl|;
name|void
name|right_trim
parameter_list|(
name|unsigned
name|int
name|bit
parameter_list|)
function_decl|;
name|void
name|left_trim
parameter_list|(
name|unsigned
name|int
name|bit
parameter_list|)
function_decl|;
comment|// status
name|int
name|empty
argument_list|()
specifier|const
expr_stmt|;
name|int
name|count
argument_list|(
name|unsigned
name|int
name|bit
operator|=
literal|1
argument_list|)
decl|const
decl_stmt|;
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
comment|// convertors& IO
name|friend
name|BitString
name|atoBitString
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|)
function_decl|;
comment|// BitStringtoa is deprecated; do not use in new programs!
name|friend
specifier|const
name|char
modifier|*
name|BitStringtoa
parameter_list|(
specifier|const
name|BitString
modifier|&
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|)
function_decl|;
name|void
name|printon
argument_list|(
name|ostream
operator|&
argument_list|,
name|char
name|f
operator|=
literal|'0'
argument_list|,
name|char
name|t
operator|=
literal|'1'
argument_list|)
decl|const
decl_stmt|;
name|friend
name|BitString
name|shorttoBitString
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|friend
name|BitString
name|longtoBitString
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|BitString
operator|&
operator|)
expr_stmt|;
comment|// misc
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
comment|// indirect friends
name|friend
name|BitPattern
name|atoBitPattern
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|x
init|=
literal|'X'
parameter_list|)
function_decl|;
name|friend
specifier|const
name|char
modifier|*
name|BitPatterntoa
parameter_list|(
specifier|const
name|BitPattern
modifier|&
name|p
parameter_list|,
name|char
name|f
init|=
literal|'0'
parameter_list|,
name|char
name|t
init|=
literal|'1'
parameter_list|,
name|char
name|x
init|=
literal|'X'
parameter_list|)
function_decl|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BitPattern
block|{
name|public
label|:
name|BitString
name|pattern
decl_stmt|;
name|BitString
name|mask
decl_stmt|;
name|BitPattern
argument_list|()
expr_stmt|;
name|BitPattern
argument_list|(
specifier|const
name|BitPattern
operator|&
argument_list|)
expr_stmt|;
name|BitPattern
argument_list|(
specifier|const
name|BitString
operator|&
name|p
argument_list|,
specifier|const
name|BitString
operator|&
name|m
argument_list|)
expr_stmt|;
operator|~
name|BitPattern
argument_list|()
expr_stmt|;
name|friend
specifier|const
name|char
modifier|*
name|BitPatterntoa
parameter_list|(
specifier|const
name|BitPattern
modifier|&
name|p
parameter_list|,
name|char
name|f
comment|/*='0'*/
parameter_list|,
name|char
name|t
comment|/*='1'*/
parameter_list|,
name|char
name|x
comment|/*='X'*/
parameter_list|)
function_decl|;
name|void
name|printon
argument_list|(
name|ostream
operator|&
argument_list|,
name|char
name|f
operator|=
literal|'0'
argument_list|,
name|char
name|t
operator|=
literal|'1'
argument_list|,
name|char
name|x
operator|=
literal|'X'
argument_list|)
decl|const
decl_stmt|;
name|friend
name|BitPattern
name|atoBitPattern
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|char
name|f
parameter_list|,
name|char
name|t
parameter_list|,
name|char
name|x
parameter_list|)
function_decl|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|BitPattern
operator|&
operator|)
expr_stmt|;
name|int
name|search
argument_list|(
specifier|const
name|unsigned
name|short
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
decl|const
decl_stmt|;
name|int
name|match
argument_list|(
specifier|const
name|unsigned
name|short
operator|*
name|xs
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
decl|const
decl_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|BitString
name|operator
function_decl|& (const
name|BitString
function_decl|& x
operator|,
function_decl|const BitString& y
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|BitString
name|operator
operator||
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|BitString
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitString
modifier|&
name|x
parameter_list|,
specifier|const
name|BitString
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|BitString
name|operator
operator|<<
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BitString
name|operator
operator|>>
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BitString
name|operator
operator|-
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|unsigned
name|int
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|BitString
name|operator
operator|~
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|BitStrRep
name|_nilBitStrRep
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|BitString
name|_nil_BitString
decl_stmt|;
end_decl_stmt

begin_comment
comment|// primitive bit extraction
end_comment

begin_comment
comment|// These must be inlined regardless of optimization.
end_comment

begin_function
specifier|inline
name|int
name|BitStr_index
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
call|(
name|unsigned
call|)
argument_list|(
name|l
argument_list|)
operator|/
name|BITSTRBITS
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|BitStr_pos
parameter_list|(
name|int
name|l
parameter_list|)
block|{
return|return
name|l
operator|&
operator|(
name|BITSTRBITS
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|// constructors& assignment
end_comment

begin_expr_stmt
specifier|inline
name|BitString
operator|::
name|BitString
argument_list|()
operator|:
name|rep
argument_list|(
argument|&_nilBitStrRep
argument_list|)
block|{}
specifier|inline
name|BitString
operator|::
name|BitString
argument_list|(
specifier|const
name|BitString
operator|&
name|x
argument_list|)
operator|:
name|rep
argument_list|(
argument|BStr_copy(
literal|0
argument|, x.rep)
argument_list|)
block|{}
specifier|inline
name|BitString
operator|::
name|BitString
argument_list|(
specifier|const
name|BitSubString
operator|&
name|y
argument_list|)
operator|:
name|rep
argument_list|(
argument|BStr_alloc(
literal|0
argument|, y.S.rep->s, y.pos, y.pos+y.len, y.len)
argument_list|)
block|{}
specifier|inline
name|BitString
operator|::
operator|~
name|BitString
argument_list|()
block|{
if|if
condition|(
name|rep
operator|!=
operator|&
name|_nilBitStrRep
condition|)
name|delete
name|rep
decl_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_NRV
argument_list|)
end_if

begin_decl_stmt
specifier|inline
name|BitString
name|shorttoBitString
argument_list|(
name|unsigned
name|short
name|w
argument_list|)
decl|return
name|r
block|{
name|r
operator|.
name|rep
operator|=
name|BStr_alloc
argument_list|(
literal|0
argument_list|,
operator|&
name|w
argument_list|,
literal|0
argument_list|,
name|BITSTRBITS
argument_list|,
name|BITSTRBITS
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|inline
name|BitString
name|longtoBitString
argument_list|(
name|unsigned
name|long
name|w
argument_list|)
decl|return
name|r
block|{
name|unsigned
name|short
name|u
index|[
literal|2
index|]
decl_stmt|;
name|u
index|[
literal|0
index|]
operator|=
name|w
operator|&
operator|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|~
operator|(
literal|0
operator|)
argument_list|)
operator|)
expr_stmt|;
name|u
index|[
literal|1
index|]
operator|=
name|w
operator|>>
name|BITSTRBITS
expr_stmt|;
name|r
operator|.
name|rep
operator|=
name|BStr_alloc
argument_list|(
literal|0
argument_list|,
operator|&
name|u
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|BITSTRBITS
argument_list|,
literal|2
operator|*
name|BITSTRBITS
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function
specifier|inline
name|BitString
name|shorttoBitString
parameter_list|(
name|unsigned
name|short
name|w
parameter_list|)
block|{
name|BitString
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|BStr_alloc
argument_list|(
literal|0
argument_list|,
operator|&
name|w
argument_list|,
literal|0
argument_list|,
name|BITSTRBITS
argument_list|,
name|BITSTRBITS
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|BitString
name|longtoBitString
parameter_list|(
name|unsigned
name|long
name|w
parameter_list|)
block|{
name|BitString
name|r
decl_stmt|;
name|unsigned
name|short
name|u
index|[
literal|2
index|]
decl_stmt|;
name|u
index|[
literal|0
index|]
operator|=
name|w
operator|&
operator|(
call|(
name|unsigned
name|short
call|)
argument_list|(
operator|~
operator|(
literal|0
operator|)
argument_list|)
operator|)
expr_stmt|;
name|u
index|[
literal|1
index|]
operator|=
name|w
operator|>>
name|BITSTRBITS
expr_stmt|;
name|r
operator|.
name|rep
operator|=
name|BStr_alloc
argument_list|(
literal|0
argument_list|,
operator|&
name|u
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|2
operator|*
name|BITSTRBITS
argument_list|,
literal|2
operator|*
name|BITSTRBITS
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BStr_copy
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|=
operator|(
name|unsigned
name|int
name|b
operator|)
block|{
name|unsigned
name|short
name|bit
operator|=
name|b
block|;
name|rep
operator|=
name|BStr_alloc
argument_list|(
name|rep
argument_list|,
operator|&
name|bit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|=
operator|(
specifier|const
name|BitSubString
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|BStr_alloc
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|S
operator|.
name|rep
operator|->
name|s
argument_list|,
name|y
operator|.
name|pos
argument_list|,
name|y
operator|.
name|pos
operator|+
name|y
operator|.
name|len
argument_list|,
name|y
operator|.
name|len
argument_list|)
block|; }
specifier|inline
name|BitSubString
operator|::
name|BitSubString
argument_list|(
specifier|const
name|BitSubString
operator|&
name|x
argument_list|)
operator|:
name|S
argument_list|(
name|x
operator|.
name|S
argument_list|)
operator|,
name|pos
argument_list|(
name|x
operator|.
name|pos
argument_list|)
operator|,
name|len
argument_list|(
argument|x.len
argument_list|)
block|{}
specifier|inline
name|BitSubString
operator|::
name|BitSubString
argument_list|(
argument|BitString& x
argument_list|,
argument|int p
argument_list|,
argument|int l
argument_list|)
operator|:
name|S
argument_list|(
name|x
argument_list|)
operator|,
name|pos
argument_list|(
name|p
argument_list|)
operator|,
name|len
argument_list|(
argument|l
argument_list|)
block|{}
specifier|inline
name|BitSubString
operator|::
operator|~
name|BitSubString
argument_list|()
block|{}
specifier|inline
name|BitPattern
operator|::
name|BitPattern
argument_list|(
specifier|const
name|BitString
operator|&
name|p
argument_list|,
specifier|const
name|BitString
operator|&
name|m
argument_list|)
operator|:
name|pattern
argument_list|(
name|p
argument_list|)
operator|,
name|mask
argument_list|(
argument|m
argument_list|)
block|{}
specifier|inline
name|BitPattern
operator|::
name|BitPattern
argument_list|(
specifier|const
name|BitPattern
operator|&
name|b
argument_list|)
operator|:
name|pattern
argument_list|(
name|b
operator|.
name|pattern
argument_list|)
operator|,
name|mask
argument_list|(
argument|b.mask
argument_list|)
block|{}
specifier|inline
name|BitPattern
operator|::
name|BitPattern
argument_list|()
block|{}
specifier|inline
name|BitPattern
operator|::
operator|~
name|BitPattern
argument_list|()
block|{}
comment|// procedural versions of operators
specifier|inline
name|void
name|and
argument_list|(
argument|const BitString& x
argument_list|,
argument|const BitString& y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|and
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|or
argument_list|(
argument|const BitString& x
argument_list|,
argument|const BitString& y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|or
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|xor
argument_list|(
argument|const BitString& x
argument_list|,
argument|const BitString& y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|xor
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|diff
argument_list|(
argument|const BitString& x
argument_list|,
argument|const BitString& y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|diff
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const BitString& x
argument_list|,
argument|const BitString& y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|cat
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|cat
argument_list|(
argument|const BitString& x
argument_list|,
argument|unsigned int y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|cat
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|rshift
argument_list|(
argument|const BitString& x
argument_list|,
argument|int y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
operator|-
name|y
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|lshift
argument_list|(
argument|const BitString& x
argument_list|,
argument|int y
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|complement
argument_list|(
argument|const BitString& x
argument_list|,
argument|BitString& r
argument_list|)
block|{
name|r
operator|.
name|rep
operator|=
name|cmpl
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|r
operator|.
name|rep
argument_list|)
block|; }
comment|// operators
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|and
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator||=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|or
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|xor
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|<<=
operator|(
name|int
name|y
operator|)
block|{
name|lshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|>>=
operator|(
name|int
name|y
operator|)
block|{
name|rshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|diff
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|operator
operator|+=
operator|(
name|unsigned
name|int
name|y
operator|)
block|{
name|cat
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|complement
argument_list|()
block|{
operator|::
name|complement
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|this
argument_list|)
block|; }
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_NRV
argument_list|)
specifier|inline
name|BitString
name|operator
operator|&
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
block|{
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator||
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|^
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|<<
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|>>
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|-
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|diff
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|unsigned
name|int
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|BitString
name|operator
operator|~
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|)
end_return

begin_return
return|return
name|r
block|{
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|; }
else|#
directive|else
comment|/* NO_NRV */
specifier|inline
name|BitString
name|operator
operator|&
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_return

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator||
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|BitString
name|operator
modifier|^
parameter_list|(
specifier|const
name|BitString
modifier|&
name|x
parameter_list|,
specifier|const
name|BitString
modifier|&
name|y
parameter_list|)
block|{
name|BitString
name|r
decl_stmt|;
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|<<
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|>>
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|int
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|-
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|diff
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|+
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
name|unsigned
name|int
name|y
operator|)
block|{
name|BitString
name|r
block|;
name|cat
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitString
name|operator
operator|~
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|)
block|{
name|BitString
name|r
block|;
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// status, matching
end_comment

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|empty
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|->
name|len
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|index
argument_list|(
argument|const BitString& y
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|rep
operator|->
name|len
argument_list|,
name|y
operator|.
name|rep
operator|->
name|s
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
operator|->
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|index
argument_list|(
argument|const BitSubString& y
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
name|startpos
argument_list|,
name|rep
operator|->
name|len
argument_list|,
name|y
operator|.
name|S
operator|.
name|rep
operator|->
name|s
argument_list|,
name|y
operator|.
name|pos
argument_list|,
name|y
operator|.
name|pos
operator|+
name|y
operator|.
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitString& y
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|rep
operator|->
name|len
argument_list|,
name|y
operator|.
name|rep
operator|->
name|s
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
operator|->
name|len
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitSubString& y
argument_list|)
specifier|const
block|{
return|return
name|search
argument_list|(
literal|0
argument_list|,
name|rep
operator|->
name|len
argument_list|,
name|y
operator|.
name|S
operator|.
name|rep
operator|->
name|s
argument_list|,
name|y
operator|.
name|pos
argument_list|,
name|y
operator|.
name|pos
operator|+
name|y
operator|.
name|len
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
operator|->
name|s
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
operator|->
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|matches
argument_list|(
argument|const BitString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|1
argument_list|,
name|y
operator|.
name|rep
operator|->
name|s
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
operator|->
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitSubString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|S
operator|.
name|rep
operator|->
name|s
argument_list|,
name|y
operator|.
name|pos
argument_list|,
name|y
operator|.
name|pos
operator|+
name|y
operator|.
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|matches
argument_list|(
argument|const BitSubString& y
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|match
argument_list|(
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|1
argument_list|,
name|y
operator|.
name|S
operator|.
name|rep
operator|->
name|s
argument_list|,
name|y
operator|.
name|pos
argument_list|,
name|y
operator|.
name|pos
operator|+
name|y
operator|.
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitPattern& r
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|search
argument_list|(
name|rep
operator|->
name|s
argument_list|,
literal|0
argument_list|,
name|rep
operator|->
name|len
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|contains
argument_list|(
argument|const BitPattern& r
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|match
argument_list|(
name|rep
operator|->
name|s
argument_list|,
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|matches
argument_list|(
argument|const BitPattern& r
argument_list|,
argument|int p
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|match
argument_list|(
name|rep
operator|->
name|s
argument_list|,
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|index
argument_list|(
argument|const BitPattern& r
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
return|return
name|r
operator|.
name|search
argument_list|(
name|rep
operator|->
name|s
argument_list|,
name|startpos
argument_list|,
name|rep
operator|->
name|len
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSubString
operator|::
name|length
argument_list|()
specifier|const
block|{
return|return
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitSubString
operator|::
name|empty
argument_list|()
specifier|const
block|{
return|return
name|len
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
return|return
operator|!
operator|(
name|x
operator|==
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|BitString
operator|&
name|x
operator|,
specifier|const
name|BitString
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|<=
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|first
argument_list|(
argument|unsigned int b
argument_list|)
specifier|const
block|{
return|return
name|next
argument_list|(
operator|-
literal|1
argument_list|,
name|b
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|last
argument_list|(
argument|unsigned int b
argument_list|)
specifier|const
block|{
return|return
name|prev
argument_list|(
name|rep
operator|->
name|len
argument_list|,
name|b
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitString
operator|::
name|index
argument_list|(
argument|unsigned int bit
argument_list|,
argument|int startpos
argument_list|)
specifier|const
block|{
if|if
condition|(
name|startpos
operator|>=
literal|0
condition|)
return|return
name|next
argument_list|(
name|startpos
operator|-
literal|1
argument_list|,
name|bit
argument_list|)
return|;
else|else
return|return
name|prev
argument_list|(
name|rep
operator|->
name|len
operator|+
name|startpos
operator|+
literal|1
argument_list|,
name|bit
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|BitString
operator|::
name|right_trim
argument_list|(
argument|unsigned int b
argument_list|)
block|{
name|int
name|nb
operator|=
operator|(
name|b
operator|==
literal|0
operator|)
operator|?
literal|1
operator|:
literal|0
block|;
name|rep
operator|=
name|BStr_resize
argument_list|(
name|rep
argument_list|,
name|prev
argument_list|(
name|rep
operator|->
name|len
argument_list|,
name|nb
argument_list|)
operator|+
literal|1
argument_list|)
block|; }
specifier|inline
name|void
name|BitString
operator|::
name|left_trim
argument_list|(
argument|unsigned int b
argument_list|)
block|{
name|int
name|nb
operator|=
operator|(
name|b
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
block|;
name|int
name|p
operator|=
name|next
argument_list|(
operator|-
literal|1
argument_list|,
name|nb
argument_list|)
block|;
name|rep
operator|=
name|BStr_alloc
argument_list|(
name|rep
argument_list|,
name|rep
operator|->
name|s
argument_list|,
name|p
argument_list|,
name|rep
operator|->
name|len
argument_list|,
name|rep
operator|->
name|len
operator|-
name|p
argument_list|)
block|; }
specifier|inline
name|int
name|BitString
operator|::
name|test
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
operator|(
call|(
name|unsigned
call|)
argument_list|(
name|i
argument_list|)
operator|>=
name|rep
operator|->
name|len
operator|)
condition|?
literal|0
else|:
operator|(
operator|(
name|rep
operator|->
name|s
index|[
name|BitStr_index
argument_list|(
name|i
argument_list|)
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
name|BitStr_pos
argument_list|(
name|i
argument_list|)
operator|)
operator|)
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// subscripting
end_comment

begin_expr_stmt
specifier|inline
name|BitStrBit
operator|::
name|BitStrBit
argument_list|(
specifier|const
name|BitStrBit
operator|&
name|b
argument_list|)
operator|:
name|src
argument_list|(
name|b
operator|.
name|src
argument_list|)
operator|,
name|pos
argument_list|(
argument|b.pos
argument_list|)
block|{}
specifier|inline
name|BitStrBit
operator|::
name|BitStrBit
argument_list|(
argument|BitString& v
argument_list|,
argument|int p
argument_list|)
operator|:
name|src
argument_list|(
name|v
argument_list|)
operator|,
name|pos
argument_list|(
argument|p
argument_list|)
block|{}
specifier|inline
name|BitStrBit
operator|::
operator|~
name|BitStrBit
argument_list|()
block|{}
specifier|inline
name|BitStrBit
operator|::
name|operator
name|unsigned
name|int
argument_list|()
specifier|const
block|{
return|return
name|src
operator|.
name|test
argument_list|(
name|pos
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|BitStrBit
operator|::
name|operator
operator|=
operator|(
name|unsigned
name|int
name|b
operator|)
block|{
name|src
operator|.
name|assign
argument_list|(
name|pos
argument_list|,
name|b
argument_list|)
block|;
return|return
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|BitStrBit
name|BitString
operator|::
name|operator
index|[]
operator|(
name|int
name|i
operator|)
block|{
if|if
condition|(
call|(
name|unsigned
call|)
argument_list|(
name|i
argument_list|)
operator|>=
name|rep
operator|->
name|len
condition|)
name|error
argument_list|(
literal|"illegal bit index"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|BitStrBit
argument_list|(
operator|*
name|this
argument_list|,
name|i
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  inline
name|BitSubString
name|BitString
operator|::
name|_substr
argument_list|(
argument|int first
argument_list|,
argument|int l
argument_list|)
block|{
if|if
condition|(
name|first
operator|<
literal|0
operator|||
name|l
operator|<=
literal|0
operator|||
call|(
name|unsigned
call|)
argument_list|(
name|first
operator|+
name|l
argument_list|)
operator|>
name|rep
operator|->
name|len
condition|)
return|return
name|BitSubString
argument_list|(
name|_nil_BitString
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
return|;
else|else
return|return
name|BitSubString
argument_list|(
operator|*
name|this
argument_list|,
name|first
argument_list|,
name|l
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

