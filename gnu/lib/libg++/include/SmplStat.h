begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1988 Free Software Foundation     written by Dirk Grunwald (grunwald@cs.uiuc.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SampleStatistic_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|SampleStatistic_h
value|1
end_define

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_decl_stmt
name|class
name|SampleStatistic
block|{
name|protected
label|:
name|int
name|n
decl_stmt|;
name|double
name|x
decl_stmt|;
name|double
name|x2
decl_stmt|;
name|double
name|minValue
decl_stmt|,
name|maxValue
decl_stmt|;
name|public
label|:
name|SampleStatistic
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|SampleStatistic
argument_list|()
expr_stmt|;
name|virtual
name|void
name|reset
parameter_list|()
function_decl|;
name|virtual
name|void
name|operator
operator|+=
operator|(
name|double
operator|)
expr_stmt|;
name|int
name|samples
parameter_list|()
function_decl|;
name|double
name|mean
parameter_list|()
function_decl|;
name|double
name|stdDev
parameter_list|()
function_decl|;
name|double
name|var
parameter_list|()
function_decl|;
name|double
name|min
parameter_list|()
function_decl|;
name|double
name|max
parameter_list|()
function_decl|;
name|double
name|confidence
parameter_list|(
name|int
name|p_percentage
parameter_list|)
function_decl|;
name|double
name|confidence
parameter_list|(
name|double
name|p_value
parameter_list|)
function_decl|;
name|void
name|error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_function_decl
specifier|extern
name|void
name|default_SampleStatistic_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|SampleStatistic_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|one_arg_error_handler_t
name|set_SampleStatistic_error_handler
parameter_list|(
name|one_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|inline
name|SampleStatistic
operator|::
name|SampleStatistic
argument_list|()
block|{
name|reset
argument_list|()
block|;}
specifier|inline
name|int
name|SampleStatistic
operator|::
name|samples
argument_list|()
block|{
return|return
operator|(
name|n
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|SampleStatistic
operator|::
name|min
argument_list|()
block|{
return|return
operator|(
name|minValue
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|SampleStatistic
operator|::
name|max
argument_list|()
block|{
return|return
operator|(
name|maxValue
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|SampleStatistic
operator|::
operator|~
name|SampleStatistic
argument_list|()
block|{}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

