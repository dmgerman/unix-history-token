begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1988, 1992 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_comment
comment|/*   arithmetic, etc. functions on built in types */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_builtin_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_builtin_h
value|1
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_define
define|#
directive|define
name|_VOLATILE_VOID
value|volatile void
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_VOLATILE_VOID
value|void
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|one_arg_error_handler_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|two_arg_error_handler_t
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
name|long
name|gcd
parameter_list|(
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|long
name|lg
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|double
name|pow
parameter_list|(
name|double
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|long
name|pow
parameter_list|(
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_extern
extern|extern
literal|"C"
name|double
name|start_timer
parameter_list|()
function_decl|;
end_extern

begin_extern
extern|extern
literal|"C"
name|double
name|return_elapsed_time
parameter_list|(
name|double
name|last_time
init|=
literal|0.0
parameter_list|)
function_decl|;
end_extern

begin_function_decl
name|char
modifier|*
name|dtoa
parameter_list|(
name|double
name|x
parameter_list|,
name|char
name|cvt
init|=
literal|'g'
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|,
name|int
name|prec
init|=
literal|6
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|hashpjw
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|multiplicativehash
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|int
name|foldhash
parameter_list|(
name|double
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|_VOLATILE_VOID
name|default_one_arg_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|_VOLATILE_VOID
name|default_two_arg_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|two_arg_error_handler_t
name|lib_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|two_arg_error_handler_t
name|set_lib_error_handler
parameter_list|(
name|two_arg_error_handler_t
name|f
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|IV
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|_G_MATH_H_INLINES
end_if

begin_comment
comment|/* hpux and SCO define this in math.h */
end_comment

begin_function
specifier|inline
name|double
name|abs
parameter_list|(
name|double
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|<
literal|0.0
operator|)
condition|?
operator|-
name|arg
else|:
name|arg
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|inline
name|float
name|abs
parameter_list|(
name|float
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|<
literal|0.0
operator|)
condition|?
operator|-
name|arg
else|:
name|arg
return|;
block|}
end_function

begin_function
specifier|inline
name|short
name|abs
parameter_list|(
name|short
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|<
literal|0
operator|)
condition|?
operator|-
name|arg
else|:
name|arg
return|;
block|}
end_function

begin_function
specifier|inline
name|long
name|abs
parameter_list|(
name|long
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|<
literal|0
operator|)
condition|?
operator|-
name|arg
else|:
name|arg
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|sign
parameter_list|(
name|long
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|(
operator|(
name|arg
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|sign
parameter_list|(
name|double
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|==
literal|0.0
operator|)
condition|?
literal|0
else|:
operator|(
operator|(
name|arg
operator|>
literal|0.0
operator|)
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|long
name|sqr
parameter_list|(
name|long
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|*
name|arg
return|;
block|}
end_function

begin_if
if|#
directive|if
operator|!
name|_G_MATH_H_INLINES
end_if

begin_comment
comment|/* hpux and SCO define this in math.h */
end_comment

begin_function
specifier|inline
name|double
name|sqr
parameter_list|(
name|double
name|arg
parameter_list|)
block|{
return|return
name|arg
operator|*
name|arg
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|inline
name|int
name|even
parameter_list|(
name|long
name|arg
parameter_list|)
block|{
return|return
operator|!
operator|(
name|arg
operator|&
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|odd
parameter_list|(
name|long
name|arg
parameter_list|)
block|{
return|return
operator|(
name|arg
operator|&
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|long
name|lcm
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
return|return
name|x
operator|/
name|gcd
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|*
name|y
return|;
block|}
end_function

begin_function
specifier|inline
name|void
function|(
name|setbit
function|)
parameter_list|(
name|long
modifier|&
name|x
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|x
operator||=
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|clearbit
parameter_list|(
name|long
modifier|&
name|x
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|x
operator|&=
operator|~
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|int
name|testbit
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|b
parameter_list|)
block|{
return|return
operator|(
operator|(
name|x
operator|&
operator|(
literal|1
operator|<<
name|b
operator|)
operator|)
operator|!=
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

