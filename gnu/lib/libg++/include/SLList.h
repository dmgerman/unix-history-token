begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988, 1992 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SLList_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_comment
comment|//#pragma interface
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_SLList_h
value|1
end_define

begin_include
include|#
directive|include
file|<Pix.h>
end_include

begin_struct
struct|struct
name|BaseSLNode
block|{
name|BaseSLNode
modifier|*
name|tl
decl_stmt|;
name|void
modifier|*
name|item
parameter_list|()
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
comment|// Return ((SLNode<T>*)this)->hd
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|SLNode
operator|:
name|public
name|BaseSLNode
block|{
name|public
operator|:
name|T
name|hd
block|;
comment|// Data part of node
name|SLNode
argument_list|()
block|{ }
name|SLNode
argument_list|(
specifier|const
name|T
operator|&
name|h
argument_list|,
name|SLNode
operator|*
name|t
operator|=
literal|0
argument_list|)
operator|:
name|hd
argument_list|(
argument|h
argument_list|)
block|{
name|tl
operator|=
name|t
block|; }
operator|~
name|SLNode
argument_list|()
block|{ }
block|}
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|extern
name|int
name|__SLListLength
parameter_list|(
name|BaseSLNode
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|BaseSLList
block|{
name|protected
label|:
name|BaseSLNode
modifier|*
name|last
decl_stmt|;
name|virtual
name|void
name|delete_node
parameter_list|(
name|BaseSLNode
modifier|*
name|node
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|BaseSLNode
modifier|*
name|copy_node
parameter_list|(
specifier|const
name|void
modifier|*
name|datum
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|copy_item
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|void
modifier|*
name|src
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
operator|~
name|BaseSLList
argument_list|()
block|{ }
name|BaseSLList
argument_list|()
block|{
name|last
operator|=
literal|0
block|; }
name|void
name|copy
argument_list|(
specifier|const
name|BaseSLList
operator|&
argument_list|)
expr_stmt|;
name|BaseSLList
modifier|&
name|operator
init|=
operator|(
specifier|const
name|BaseSLList
operator|&
name|a
operator|)
decl_stmt|;
name|Pix
name|ins_after
parameter_list|(
name|Pix
name|p
parameter_list|,
specifier|const
name|void
modifier|*
name|datum
parameter_list|)
function_decl|;
name|Pix
name|prepend
parameter_list|(
specifier|const
name|void
modifier|*
name|datum
parameter_list|)
function_decl|;
name|Pix
name|append
parameter_list|(
specifier|const
name|void
modifier|*
name|datum
parameter_list|)
function_decl|;
name|int
name|remove_front
parameter_list|(
name|void
modifier|*
name|dst
parameter_list|,
name|int
name|signal_error
init|=
literal|0
parameter_list|)
function_decl|;
name|void
name|join
parameter_list|(
name|BaseSLList
modifier|&
parameter_list|)
function_decl|;
name|public
label|:
name|int
name|length
argument_list|()
specifier|const
expr_stmt|;
name|int
name|empty
argument_list|()
specifier|const
block|{
return|return
name|last
operator|==
literal|0
return|;
block|}
name|void
name|clear
parameter_list|()
function_decl|;
name|Pix
name|prepend
parameter_list|(
name|BaseSLNode
modifier|*
parameter_list|)
function_decl|;
name|Pix
name|append
parameter_list|(
name|BaseSLNode
modifier|*
parameter_list|)
function_decl|;
name|int
name|OK
parameter_list|()
function_decl|;
name|void
name|error
parameter_list|(
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
name|void
name|del_after
parameter_list|(
name|Pix
name|p
parameter_list|)
function_decl|;
name|int
name|owns
parameter_list|(
name|Pix
name|p
parameter_list|)
function_decl|;
name|void
name|del_front
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|SLList
operator|:
name|public
name|BaseSLList
block|{
name|private
operator|:
name|virtual
name|void
name|delete_node
argument_list|(
argument|BaseSLNode *node
argument_list|)
block|{
name|delete
argument_list|(
argument|SLNode<T>*
argument_list|)
name|node
block|; }
name|virtual
name|BaseSLNode
operator|*
name|copy_node
argument_list|(
argument|const void *datum
argument_list|)
block|{
return|return
name|new
name|SLNode
operator|<
name|T
operator|>
operator|(
operator|*
operator|(
specifier|const
name|T
operator|*
operator|)
name|datum
operator|)
return|;
block|}
name|virtual
name|void
name|copy_item
argument_list|(
argument|void *dst
argument_list|,
argument|void *src
argument_list|)
block|{
operator|*
operator|(
name|T
operator|*
operator|)
name|dst
operator|=
operator|*
operator|(
name|T
operator|*
operator|)
name|src
block|; }
name|public
operator|:
name|SLList
argument_list|()
operator|:
name|BaseSLList
argument_list|()
block|{ }
name|SLList
argument_list|(
specifier|const
name|SLList
operator|<
name|T
operator|>
operator|&
name|a
argument_list|)
operator|:
name|BaseSLList
argument_list|()
block|{
name|copy
argument_list|(
name|a
argument_list|)
block|; }
name|SLList
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|SLList
operator|<
name|T
operator|>
operator|&
name|a
operator|)
block|{
name|BaseSLList
operator|::
name|operator
operator|=
operator|(
operator|(
specifier|const
name|BaseSLList
operator|&
operator|)
name|a
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|virtual
operator|~
name|SLList
argument_list|()
block|{
name|clear
argument_list|()
block|; }
name|Pix
name|prepend
argument_list|(
argument|const T& item
argument_list|)
block|{
return|return
name|BaseSLList
operator|::
name|prepend
argument_list|(
operator|&
name|item
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|Pix
name|append
parameter_list|(
specifier|const
name|T
modifier|&
name|item
parameter_list|)
block|{
return|return
name|BaseSLList
operator|::
name|append
argument_list|(
operator|&
name|item
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|Pix
name|prepend
argument_list|(
name|SLNode
operator|<
name|T
operator|>
operator|*
name|node
argument_list|)
block|{
return|return
name|BaseSLList
operator|::
name|prepend
argument_list|(
name|node
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|Pix
name|append
argument_list|(
name|SLNode
operator|<
name|T
operator|>
operator|*
name|node
argument_list|)
block|{
return|return
name|BaseSLList
operator|::
name|append
argument_list|(
name|node
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|T
operator|&
name|operator
argument_list|()
operator|(
name|Pix
name|p
operator|)
block|{
if|if
condition|(
name|p
operator|==
literal|0
condition|)
name|error
argument_list|(
literal|"null Pix"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
operator|(
name|SLNode
operator|<
name|T
operator|>
operator|*
operator|)
operator|(
name|p
operator|)
operator|)
operator|->
name|hd
return|;
end_return

begin_function
unit|}     inline
name|Pix
name|first
parameter_list|()
block|{
return|return
operator|(
name|last
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
name|Pix
argument_list|(
name|last
operator|->
name|tl
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|next
parameter_list|(
name|Pix
modifier|&
name|p
parameter_list|)
block|{
name|p
operator|=
operator|(
name|p
operator|==
literal|0
operator|||
name|p
operator|==
name|last
operator|)
condition|?
literal|0
else|:
name|Pix
argument_list|(
operator|(
operator|(
name|SLNode
operator|<
name|T
operator|>
operator|*
operator|)
operator|(
name|p
operator|)
operator|)
operator|->
name|tl
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|Pix
name|ins_after
parameter_list|(
name|Pix
name|p
parameter_list|,
specifier|const
name|T
modifier|&
name|item
parameter_list|)
block|{
return|return
name|BaseSLList
operator|::
name|ins_after
argument_list|(
name|p
argument_list|,
operator|&
name|item
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|void
name|join
argument_list|(
name|SLList
operator|<
name|T
operator|>
operator|&
name|a
argument_list|)
block|{
name|BaseSLList
operator|::
name|join
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|T
modifier|&
name|front
parameter_list|()
block|{
if|if
condition|(
name|last
operator|==
literal|0
condition|)
name|error
argument_list|(
literal|"front: empty list"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SLNode
operator|<
name|T
operator|>
operator|*
operator|)
name|last
operator|->
name|tl
operator|)
operator|->
name|hd
return|;
block|}
end_function

begin_function
name|T
modifier|&
name|rear
parameter_list|()
block|{
if|if
condition|(
name|last
operator|==
literal|0
condition|)
name|error
argument_list|(
literal|"rear: empty list"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|SLNode
operator|<
name|T
operator|>
operator|*
operator|)
name|last
operator|)
operator|->
name|hd
return|;
block|}
end_function

begin_function
name|int
name|remove_front
parameter_list|(
name|T
modifier|&
name|x
parameter_list|)
block|{
return|return
name|BaseSLList
operator|::
name|remove_front
argument_list|(
operator|&
name|x
argument_list|)
return|;
block|}
end_function

begin_function
name|T
name|remove_front
parameter_list|()
block|{
name|T
name|dst
decl_stmt|;
name|BaseSLList
operator|::
name|remove_front
argument_list|(
operator|&
name|dst
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return
name|dst
return|;
block|}
end_function

begin_endif
unit|};
endif|#
directive|endif
end_endif

end_unit

