begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/* Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Obstack_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Obstack_h
value|1
end_define

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_decl_stmt
name|class
name|Obstack
block|{
struct|struct
name|_obstack_chunk
block|{
name|char
modifier|*
name|limit
decl_stmt|;
name|_obstack_chunk
modifier|*
name|prev
decl_stmt|;
name|char
name|contents
index|[
literal|4
index|]
decl_stmt|;
block|}
struct|;
name|protected
label|:
name|long
name|chunksize
decl_stmt|;
name|_obstack_chunk
modifier|*
name|chunk
decl_stmt|;
name|char
modifier|*
name|objectbase
decl_stmt|;
name|char
modifier|*
name|nextfree
decl_stmt|;
name|char
modifier|*
name|chunklimit
decl_stmt|;
name|int
name|alignmentmask
decl_stmt|;
name|void
name|_free
parameter_list|(
name|void
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
name|newchunk
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|public
label|:
name|Obstack
argument_list|(
argument|int size =
literal|4080
argument_list|,
argument|int alignment =
literal|4
argument_list|)
empty_stmt|;
comment|// 4080=4096-mallocslop
operator|~
name|Obstack
argument_list|()
expr_stmt|;
name|void
modifier|*
name|base
parameter_list|()
function_decl|;
name|void
modifier|*
name|next_free
parameter_list|()
function_decl|;
name|int
name|alignment_mask
parameter_list|()
function_decl|;
name|int
name|chunk_size
parameter_list|()
function_decl|;
name|int
name|size
parameter_list|()
function_decl|;
name|int
name|room
parameter_list|()
function_decl|;
name|int
name|contains
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
comment|// does Obstack hold pointer p?
name|void
name|grow
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|grow
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|,
name|char
name|terminator
parameter_list|)
function_decl|;
name|void
name|grow
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|grow
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
name|grow_fast
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
name|blank
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|blank_fast
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|finish
parameter_list|()
function_decl|;
name|void
modifier|*
name|finish
parameter_list|(
name|char
name|terminator
parameter_list|)
function_decl|;
name|void
modifier|*
name|copy
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|copy
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|,
name|char
name|terminator
parameter_list|)
function_decl|;
name|void
modifier|*
name|copy
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|copy
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|void
modifier|*
name|alloc
parameter_list|(
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|free
parameter_list|(
name|void
modifier|*
name|obj
parameter_list|)
function_decl|;
name|void
name|shrink
parameter_list|(
name|int
name|size
init|=
literal|1
parameter_list|)
function_decl|;
comment|// suggested by ken@cs.rochester.edu
name|int
name|OK
parameter_list|()
function_decl|;
comment|// rep invariant
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|Obstack
operator|::
operator|~
name|Obstack
argument_list|()
block|{
name|_free
argument_list|(
literal|0
argument_list|)
block|; }
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|base
argument_list|()
block|{
return|return
name|objectbase
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|next_free
argument_list|()
block|{
return|return
name|nextfree
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Obstack
operator|::
name|alignment_mask
argument_list|()
block|{
return|return
name|alignmentmask
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Obstack
operator|::
name|chunk_size
argument_list|()
block|{
return|return
name|chunksize
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Obstack
operator|::
name|size
argument_list|()
block|{
return|return
name|nextfree
operator|-
name|objectbase
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Obstack
operator|::
name|room
argument_list|()
block|{
return|return
name|chunklimit
operator|-
name|nextfree
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|Obstack
operator|::
name|grow
argument_list|(
argument|const void* data
argument_list|,
argument|int size
argument_list|)
block|{
if|if
condition|(
name|nextfree
operator|+
name|size
operator|>
name|chunklimit
condition|)
name|newchunk
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|nextfree
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|nextfree
operator|+=
name|size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
name|Obstack
operator|::
name|grow
argument_list|(
argument|const void* data
argument_list|,
argument|int size
argument_list|,
argument|char terminator
argument_list|)
block|{
if|if
condition|(
name|nextfree
operator|+
name|size
operator|+
literal|1
operator|>
name|chunklimit
condition|)
name|newchunk
argument_list|(
name|size
operator|+
literal|1
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|nextfree
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|nextfree
operator|+=
name|size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|*
operator|(
name|nextfree
operator|)
operator|++
operator|=
name|terminator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
name|Obstack
operator|::
name|grow
argument_list|(
argument|const char* s
argument_list|)
block|{
name|grow
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|)
name|s
argument_list|,
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|)
block|; }
specifier|inline
name|void
name|Obstack
operator|::
name|grow
argument_list|(
argument|char c
argument_list|)
block|{
if|if
condition|(
name|nextfree
operator|+
literal|1
operator|>
name|chunklimit
condition|)
name|newchunk
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|*
operator|(
name|nextfree
operator|)
operator|++
operator|=
name|c
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
name|Obstack
operator|::
name|blank
argument_list|(
argument|int size
argument_list|)
block|{
if|if
condition|(
name|nextfree
operator|+
name|size
operator|>
name|chunklimit
condition|)
name|newchunk
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|nextfree
operator|+=
name|size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  inline
name|void
operator|*
name|Obstack
operator|::
name|finish
argument_list|(
argument|char terminator
argument_list|)
block|{
name|grow
argument_list|(
name|terminator
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|copy
argument_list|(
argument|const void* data
argument_list|,
argument|int size
argument_list|)
block|{
name|grow
argument_list|(
name|data
argument_list|,
name|size
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|copy
argument_list|(
argument|const void* data
argument_list|,
argument|int size
argument_list|,
argument|char terminator
argument_list|)
block|{
name|grow
argument_list|(
name|data
argument_list|,
name|size
argument_list|,
name|terminator
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|copy
argument_list|(
argument|const char* s
argument_list|)
block|{
name|grow
argument_list|(
operator|(
specifier|const
name|void
operator|*
operator|)
name|s
argument_list|,
name|strlen
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|copy
argument_list|(
argument|char c
argument_list|)
block|{
name|grow
argument_list|(
name|c
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
operator|*
name|Obstack
operator|::
name|alloc
argument_list|(
argument|int size
argument_list|)
block|{
name|blank
argument_list|(
name|size
argument_list|)
block|;
return|return
name|finish
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|Obstack
operator|::
name|free
argument_list|(
argument|void* obj
argument_list|)
block|{
if|if
condition|(
name|obj
operator|>=
operator|(
name|void
operator|*
operator|)
name|chunk
operator|&&
name|obj
operator|<
operator|(
name|void
operator|*
operator|)
name|chunklimit
condition|)
name|nextfree
operator|=
name|objectbase
operator|=
operator|(
name|char
operator|*
operator|)
name|obj
expr_stmt|;
else|else
name|_free
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|Obstack
operator|::
name|grow_fast
argument_list|(
argument|char c
argument_list|)
block|{
operator|*
operator|(
name|nextfree
operator|)
operator|++
operator|=
name|c
block|; }
specifier|inline
name|void
name|Obstack
operator|::
name|blank_fast
argument_list|(
argument|int size
argument_list|)
block|{
name|nextfree
operator|+=
name|size
block|; }
specifier|inline
name|void
name|Obstack
operator|::
name|shrink
argument_list|(
argument|int size
argument_list|)
comment|// from ken@cs.rochester.edu
block|{
if|if
condition|(
name|nextfree
operator|>=
name|objectbase
operator|+
name|size
condition|)
name|nextfree
operator|-=
name|size
expr_stmt|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

