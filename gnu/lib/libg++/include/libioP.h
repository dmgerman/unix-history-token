begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  Copyright (C) 1993 Free Software Foundation  This file is part of the GNU IO Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  As a special exception, if you link this library with files compiled with a GNU compiler to produce an executable, this does not cause the resulting executable to be covered by the GNU General Public License. This exception does not however invalidate any other reasons why the executable file might be covered by the GNU General Public License. */
end_comment

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|errno
end_ifndef

begin_decl_stmt
specifier|extern
name|int
name|errno
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"iolibio.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
typedef|typedef
enum|enum
name|_IO_seekflags_
block|{
name|_IO_seek_set
init|=
literal|0
block|,
name|_IO_seek_cur
init|=
literal|1
block|,
name|_IO_seek_end
init|=
literal|2
block|,
comment|/* These bits are ignored unless the _IO_FILE has independent      read and write positions. */
name|_IO_seek_not_in
init|=
literal|4
block|,
comment|/* Don't move read posistion. */
name|_IO_seek_not_out
init|=
literal|8
block|,
comment|/* Don't move write posistion. */
name|_IO_seek_pos_ignored
init|=
literal|16
comment|/* Result is ignored (except EOF) */
block|}
name|_IO_seekflags
typedef|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_overflow_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_underflow_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|_IO_size_t
argument_list|(
argument|*_IO_xsputn_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|_IO_size_t
argument_list|(
argument|*_IO_xsgetn_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|_IO_ssize_t
argument_list|(
argument|*_IO_read_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|_IO_ssize_t
argument_list|(
argument|*_IO_write_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_stat_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|_IO_fpos_t
argument_list|(
argument|*_IO_seek_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_doallocate_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_pbackfail_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_setbuf_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|*_IO_sync_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|(
argument|*_IO_finish_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* finalize */
typedef|typedef
name|int
argument_list|(
argument|*_IO_close_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* finalize */
typedef|typedef
name|_IO_fpos_t
argument_list|(
argument|*_IO_seekoff_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
expr_stmt|;
comment|/* The _IO_seek_cur and _IO_seek_end options are not allowed. */
typedef|typedef
name|_IO_fpos_t
argument_list|(
argument|*_IO_seekpos_t
argument_list|)
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_fpos_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
expr_stmt|;
struct|struct
name|_IO_jump_t
block|{
name|_IO_overflow_t
name|__overflow
decl_stmt|;
name|_IO_underflow_t
name|__underflow
decl_stmt|;
name|_IO_xsputn_t
name|__xsputn
decl_stmt|;
name|_IO_xsgetn_t
name|__xsgetn
decl_stmt|;
name|_IO_read_t
name|__read
decl_stmt|;
name|_IO_write_t
name|__write
decl_stmt|;
name|_IO_doallocate_t
name|__doallocate
decl_stmt|;
name|_IO_pbackfail_t
name|__pbackfail
decl_stmt|;
name|_IO_setbuf_t
name|__setbuf
decl_stmt|;
name|_IO_sync_t
name|__sync
decl_stmt|;
name|_IO_finish_t
name|__finish
decl_stmt|;
name|_IO_close_t
name|__close
decl_stmt|;
name|_IO_stat_t
name|__stat
decl_stmt|;
name|_IO_seek_t
name|__seek
decl_stmt|;
name|_IO_seekoff_t
name|__seekoff
decl_stmt|;
name|_IO_seekpos_t
name|__seekpos
decl_stmt|;
name|_IO_underflow_t
name|__uflow
decl_stmt|;
if|#
directive|if
literal|0
block|get_column;     set_column;
endif|#
directive|endif
block|}
struct|;
comment|/* We always allocate an extra word following an _IO_FILE.    This is for compatibility with C++ streambuf; the word can    be used to smash to a pointer to a virtual function table. */
struct|struct
name|_IO_FILE_plus
block|{
name|_IO_FILE
name|file
decl_stmt|;
specifier|const
name|void
modifier|*
name|vtable
decl_stmt|;
block|}
struct|;
comment|/* Generic functions */
specifier|extern
name|_IO_fpos_t
name|_IO_seekoff
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_seekpos
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_fpos_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_switch_to_get_mode
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_init
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_sputbackc
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_sungetc
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_un_link
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_link_in
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_doallocbuf
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_unsave_markers
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_setb
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|unsigned
name|_IO_adjust_column
name|__P
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
define|#
directive|define
name|_IO_sputn
parameter_list|(
name|__fp
parameter_list|,
name|__s
parameter_list|,
name|__n
parameter_list|)
value|(__fp->_jumps->__xsputn(__fp, __s, __n))
comment|/* Marker-related function. */
specifier|extern
name|void
name|_IO_init_marker
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_marker
operator|*
operator|,
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_remove_marker
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_marker
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_marker_difference
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_marker
operator|*
operator|,
expr|struct
name|_IO_marker
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_marker_delta
name|__P
argument_list|(
operator|(
expr|struct
name|_IO_marker
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_seekmark
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
expr|struct
name|_IO_marker
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
comment|/* Default jumptable functions. */
specifier|extern
name|int
name|_IO_default_underflow
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_uflow
name|_PARAMS
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_doallocate
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_default_finish
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_pbackfail
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_setbuf
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_size_t
name|_IO_default_xsputn
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_size_t
name|_IO_default_xsgetn
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_default_seekoff
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_default_seekpos
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_fpos_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_default_write
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_default_read
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_stat
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_default_seek
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_default_sync
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
define|#
directive|define
name|_IO_default_close
value|((_IO_close_t)_IO_default_sync)
specifier|extern
name|struct
name|_IO_jump_t
name|_IO_file_jumps
decl_stmt|;
specifier|extern
name|struct
name|_IO_jump_t
name|_IO_streambuf_jumps
decl_stmt|;
specifier|extern
name|struct
name|_IO_jump_t
name|_IO_proc_jumps
decl_stmt|;
specifier|extern
name|struct
name|_IO_jump_t
name|_IO_str_jumps
decl_stmt|;
specifier|extern
name|int
name|_IO_do_write
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_flush_all
name|__P
argument_list|(
operator|(
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_cleanup
name|__P
argument_list|(
operator|(
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_flush_all_linebuffered
name|__P
argument_list|(
operator|(
operator|)
argument_list|)
decl_stmt|;
define|#
directive|define
name|_IO_do_flush
parameter_list|(
name|_f
parameter_list|)
define|\
value|_IO_do_write(_f, (_f)->_IO_write_base, \ 	       (_f)->_IO_write_ptr-(_f)->_IO_write_base)
define|#
directive|define
name|_IO_in_put_mode
parameter_list|(
name|_fp
parameter_list|)
value|((_fp)->_flags& _IO_CURRENTLY_PUTTING)
define|#
directive|define
name|_IO_mask_flags
parameter_list|(
name|fp
parameter_list|,
name|f
parameter_list|,
name|mask
parameter_list|)
define|\
value|((fp)->_flags = ((fp)->_flags& ~(mask)) | ((f)& (mask)))
define|#
directive|define
name|_IO_setg
parameter_list|(
name|fp
parameter_list|,
name|eb
parameter_list|,
name|g
parameter_list|,
name|eg
parameter_list|)
value|((fp)->_IO_read_base = (eb),\ 	(fp)->_IO_read_ptr = (g), (fp)->_IO_read_end = (eg))
define|#
directive|define
name|_IO_setp
parameter_list|(
name|__fp
parameter_list|,
name|__p
parameter_list|,
name|__ep
parameter_list|)
define|\
value|((__fp)->_IO_write_base = (__fp)->_IO_write_ptr = __p, (__fp)->_IO_write_end = (__ep))
define|#
directive|define
name|_IO_have_backup
parameter_list|(
name|fp
parameter_list|)
value|((fp)->_IO_save_base != NULL)
define|#
directive|define
name|_IO_in_backup
parameter_list|(
name|fp
parameter_list|)
value|((fp)->_flags& _IO_IN_BACKUP)
define|#
directive|define
name|_IO_have_markers
parameter_list|(
name|fp
parameter_list|)
value|((fp)->_markers != NULL)
define|#
directive|define
name|_IO_blen
parameter_list|(
name|p
parameter_list|)
value|((fp)->_IO_buf_end - (fp)->_IO_buf_base)
comment|/* Jumptable functions for files. */
specifier|extern
name|int
name|_IO_file_doallocate
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_setbuf
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_file_seekoff
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_size_t
name|_IO_file_xsputn
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_stat
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_close
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_underflow
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_overflow
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
define|#
directive|define
name|_IO_file_is_open
parameter_list|(
name|__fp
parameter_list|)
value|((__fp)->_fileno>= 0)
specifier|extern
name|void
name|_IO_file_init
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_FILE
modifier|*
name|_IO_file_attach
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_FILE
modifier|*
name|_IO_file_fopen
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_file_write
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_file_read
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|void
operator|*
operator|,
name|_IO_ssize_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_sync
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_file_close_it
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_file_seek
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_file_finish
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
comment|/* Other file functions. */
specifier|extern
name|_IO_FILE
modifier|*
name|_IO_file_attach
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
comment|/* Jumptable functions for proc_files. */
specifier|extern
name|_IO_FILE
modifier|*
name|_IO_proc_open
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_proc_close
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
comment|/* Jumptable functions for strfiles. */
specifier|extern
name|int
name|_IO_str_underflow
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_str_overflow
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_str_pbackfail
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_fpos_t
name|_IO_str_seekoff
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|_IO_off_t
operator|,
name|_IO_seekflags
operator|)
argument_list|)
decl_stmt|;
comment|/* Other strfile functions */
specifier|extern
name|void
name|_IO_str_init_static
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|_IO_str_init_readonly
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_str_count
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_size_t
name|_IO_getline
name|__P
argument_list|(
operator|(
name|_IO_FILE
operator|*
operator|,
name|char
operator|*
operator|,
name|_IO_size_t
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|double
name|_IO_strtod
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|_IO_dtoa
name|__P
argument_list|(
operator|(
name|double
name|__d
operator|,
name|int
name|__mode
operator|,
name|int
name|__ndigits
operator|,
name|int
operator|*
name|__decpt
operator|,
name|int
operator|*
name|__sign
operator|,
name|char
operator|*
operator|*
name|__rve
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_outfloat
name|__P
argument_list|(
operator|(
name|double
name|__value
operator|,
name|_IO_FILE
operator|*
name|__sb
operator|,
name|int
name|__type
operator|,
name|int
name|__width
operator|,
name|int
name|__precision
operator|,
name|int
name|__flags
operator|,
name|int
name|__sign_mode
operator|,
name|int
name|__fill
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_FILE
modifier|*
name|_IO_list_all
decl_stmt|;
specifier|extern
name|void
function_decl|(
modifier|*
name|_IO_cleanup_registration_needed
function_decl|)
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|EOF
define|#
directive|define
name|EOF
value|(-1)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NULL
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|__GNUC__
argument_list|)
define|#
directive|define
name|NULL
value|((void*)0)
else|#
directive|else
define|#
directive|define
name|NULL
value|(0)
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|FREE_BUF
parameter_list|(
name|_B
parameter_list|)
value|free(_B)
define|#
directive|define
name|ALLOC_BUF
parameter_list|(
name|_S
parameter_list|)
value|(char*)malloc(_S)
ifndef|#
directive|ifndef
name|OS_FSTAT
define|#
directive|define
name|OS_FSTAT
value|fstat
endif|#
directive|endif
struct_decl|struct
name|stat
struct_decl|;
specifier|extern
name|_IO_ssize_t
name|_IO_read
name|__P
argument_list|(
operator|(
name|int
operator|,
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_ssize_t
name|_IO_write
name|__P
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|void
operator|*
operator|,
name|_IO_size_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|_IO_off_t
name|_IO_lseek
name|__P
argument_list|(
operator|(
name|int
operator|,
name|_IO_off_t
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_close
name|__P
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_IO_fstat
name|__P
argument_list|(
operator|(
name|int
operator|,
expr|struct
name|stat
operator|*
operator|)
argument_list|)
decl_stmt|;
comment|/* Operations on _IO_fpos_t.    Normally, these are trivial, but we provide hooks for configurations    where an _IO_fpos_t is a struct.    Note that _IO_off_t must be an integral type. */
comment|/* _IO_pos_BAD is an _IO_fpos_t value indicating error, unknown, or EOF. */
ifndef|#
directive|ifndef
name|_IO_pos_BAD
define|#
directive|define
name|_IO_pos_BAD
value|((_IO_fpos_t)(-1))
endif|#
directive|endif
comment|/* _IO_pos_as_off converts an _IO_fpos_t value to an _IO_off_t value. */
ifndef|#
directive|ifndef
name|_IO_pos_as_off
define|#
directive|define
name|_IO_pos_as_off
parameter_list|(
name|__pos
parameter_list|)
value|((_IO_off_t)(__pos))
endif|#
directive|endif
comment|/* _IO_pos_adjust adjust an _IO_fpos_t by some number of bytes. */
ifndef|#
directive|ifndef
name|_IO_pos_adjust
define|#
directive|define
name|_IO_pos_adjust
parameter_list|(
name|__pos
parameter_list|,
name|__delta
parameter_list|)
value|((__pos) += (__delta))
endif|#
directive|endif
comment|/* _IO_pos_0 is an _IO_fpos_t value indicating beginning of file. */
ifndef|#
directive|ifndef
name|_IO_pos_0
define|#
directive|define
name|_IO_pos_0
value|((_IO_fpos_t)0)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* check following! */
end_comment

begin_define
define|#
directive|define
name|FILEBUF_LITERAL
parameter_list|(
name|CHAIN
parameter_list|,
name|FLAGS
parameter_list|,
name|FD
parameter_list|)
define|\
value|{ _IO_MAGIC+_IO_LINKED+_IO_IS_FILEBUF+FLAGS, \          0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, CHAIN,&_IO_file_jumps, FD}
end_define

begin_comment
comment|/* Define builtinbuf_vtable as a name for the virtual function table    of the builtinbuf class. */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|builtinbuf_vtable
argument_list|)
operator|&&
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_decl_stmt
specifier|extern
name|char
name|builtinbuf_vtable
index|[]
name|asm
argument_list|(
name|_G_VTABLE_LABEL_PREFIX
if|#
directive|if
name|_G_VTABLE_LABEL_HAS_LENGTH
literal|"10"
endif|#
directive|endif
literal|"builtinbuf"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* !__GNUC__ */
end_comment

begin_if
if|#
directive|if
name|_G_VTABLE_LABEL_HAS_LENGTH
end_if

begin_define
define|#
directive|define
name|builtinbuf_vtable
value|_G_VTABLE_LABEL_PREFIX_ID##10builtinbuf
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|builtinbuf_vtable
value|_G_VTABLE_LABEL_PREFIX_ID##builtinbuf
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|char
name|builtinbuf_vtable
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !__GNUC__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined(builtinbuf_vtable)&& defined(__cplusplus) */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_define
define|#
directive|define
name|_IO_va_start
parameter_list|(
name|args
parameter_list|,
name|last
parameter_list|)
value|va_start(args, last)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_IO_va_start
parameter_list|(
name|args
parameter_list|,
name|last
parameter_list|)
value|va_start(args)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|_IO_fake_stdiobuf
name|_IO_stdin_buf
decl_stmt|,
name|_IO_stdout_buf
decl_stmt|,
name|_IO_stderr_buf
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
literal|1
end_if

begin_define
define|#
directive|define
name|COERCE_FILE
parameter_list|(
name|FILE
parameter_list|)
end_define

begin_comment
comment|/* Nothing */
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* This is part of the kludge for binary compatibility with old stdio. */
end_comment

begin_define
define|#
directive|define
name|COERCE_FILE
parameter_list|(
name|FILE
parameter_list|)
define|\
value|(((FILE)->_IO_file_flags& _IO_MAGIC_MASK) == _OLD_MAGIC_MASK \&& (FILE) = *(FILE**)&((int*)fp)[1])
end_define

begin_endif
endif|#
directive|endif
end_endif

end_unit

