begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Integer_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Integer_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_struct
struct|struct
name|IntRep
comment|// internal Integer representations
block|{
name|unsigned
name|short
name|len
decl_stmt|;
comment|// current length
name|unsigned
name|short
name|sz
decl_stmt|;
comment|// allocated space
name|short
name|sgn
decl_stmt|;
comment|// 1 means>= 0; 0 means< 0
name|unsigned
name|short
name|s
index|[
literal|1
index|]
decl_stmt|;
comment|// represented as ushort array starting here
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|Ialloc
parameter_list|(
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|short
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|Icalloc
parameter_list|(
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|Icopy_long
parameter_list|(
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|Icopy
parameter_list|(
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|Iresize
parameter_list|(
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|add
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|add
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|multiply
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|multiply
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|lshift
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|lshift
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|int
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|bitop
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|bitop
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|,
name|char
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|power
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|div
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|mod
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|div
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|mod
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|compl
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|abs
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|negate
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|pow
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|gcd
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|compare
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|compare
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ucompare
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ucompare
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|Itoa
parameter_list|(
specifier|const
name|IntRep
modifier|*
name|x
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|IntRep
modifier|*
name|atoIntRep
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|Itolong
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|double
name|Itodouble
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|Iislong
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|Iisdouble
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|lg
parameter_list|(
specifier|const
name|IntRep
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|class
name|Integer
block|{
name|protected
label|:
name|IntRep
modifier|*
name|rep
decl_stmt|;
name|public
label|:
name|Integer
argument_list|()
expr_stmt|;
name|Integer
argument_list|(
name|long
argument_list|)
expr_stmt|;
name|Integer
argument_list|(
specifier|const
name|Integer
operator|&
argument_list|)
expr_stmt|;
operator|~
name|Integer
argument_list|()
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|Integer
operator|&
operator|)
decl_stmt|;
name|void
name|operator
init|=
operator|(
name|long
operator|)
decl_stmt|;
comment|// unary operations to self
name|void
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|void
name|operator
operator|--
operator|(
operator|)
expr_stmt|;
name|void
name|negate
parameter_list|()
function_decl|;
comment|// negate in-place
name|void
name|abs
parameter_list|()
function_decl|;
comment|// absolute-value in-place
name|void
name|complement
parameter_list|()
function_decl|;
comment|// bitwise complement in-place
comment|// assignment-based operations
name|void
name|operator
operator|+=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|-=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|*=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|/=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|%=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|<<=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|>>=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|&=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator||=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|^=
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|-=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|*=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|/=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|%=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|<<=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|>>=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|&=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator||=
operator|(
name|long
operator|)
expr_stmt|;
name|void
name|operator
operator|^=
operator|(
name|long
operator|)
expr_stmt|;
comment|// (constructive binary operations are inlined below)
ifdef|#
directive|ifdef
name|__GNUG__
name|friend
name|Integer
name|operator
operator|<
condition|?
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
expr_stmt|;
comment|// min
name|friend
name|Integer
name|operator
operator|>
condition|?
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
expr_stmt|;
comment|// max
endif|#
directive|endif
comment|// builtin Integer functions that must be friends
name|friend
name|long
name|lg
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
comment|// floor log base 2 of abs(x)
name|friend
name|double
name|ratio
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
function_decl|;
comment|// return x/y as a double
name|friend
name|Integer
name|gcd
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|even
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
comment|// true if even
name|friend
name|int
name|odd
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
comment|// true if odd
name|friend
name|int
name|sign
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
comment|// returns -1, 0, +1
name|friend
name|void
name|setbit
parameter_list|(
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|b
parameter_list|)
function_decl|;
comment|// set b'th bit of x
name|friend
name|void
name|clearbit
parameter_list|(
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|b
parameter_list|)
function_decl|;
comment|// clear b'th bit
name|friend
name|int
name|testbit
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|b
parameter_list|)
function_decl|;
comment|// return b'th bit
comment|// procedural versions of operators
name|friend
name|void
name|abs
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|negate
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|complement
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|int
name|compare
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|ucompare
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|add
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|sub
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|mul
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|div
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|mod
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|divide
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|q
parameter_list|,
name|Integer
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|and
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|or
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|xor
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|lshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|rshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|int
name|compare
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|friend
name|int
name|ucompare
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|friend
name|void
name|add
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|sub
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|mul
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|div
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|mod
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|divide
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|q
parameter_list|,
name|long
modifier|&
name|r
parameter_list|)
function_decl|;
name|friend
name|void
name|and
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|or
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|xor
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|lshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|rshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|int
name|compare
parameter_list|(
name|long
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
name|friend
name|int
name|ucompare
parameter_list|(
name|long
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
name|friend
name|void
name|add
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|sub
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|mul
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|and
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|or
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
name|friend
name|void
name|xor
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
function_decl|;
comment|// coercion& conversion
name|int
name|fits_in_long
argument_list|()
specifier|const
expr_stmt|;
name|int
name|fits_in_double
argument_list|()
specifier|const
expr_stmt|;
name|operator
name|long
argument_list|()
specifier|const
expr_stmt|;
name|operator
name|double
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|char
modifier|*
name|Itoa
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|)
function_decl|;
name|friend
name|Integer
name|atoI
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|base
init|=
literal|10
parameter_list|)
function_decl|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Integer
operator|&
name|y
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
expr_stmt|;
comment|// error detection
name|int
name|initialized
argument_list|()
specifier|const
expr_stmt|;
specifier|volatile
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
decl_stmt|;
name|int
name|OK
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//  (These are declared inline)
end_comment

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|==
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|~
operator|(
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|+
operator|(
name|long
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|-
operator|(
name|long
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Integer
name|operator
modifier|*
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|operator
modifier|*
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|operator
modifier|*
parameter_list|(
name|long
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Integer
name|operator
function_decl|&  (const
name|Integer
function_decl|&
operator|,
function_decl|const Integer&
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|Integer
name|operator
function_decl|&  (const
name|Integer
function_decl|&
operator|,
function_decl|long
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|Integer
name|operator
function_decl|&  (
name|long
function_decl|, const
name|Integer
function_decl|&
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
operator|,
name|long
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|Integer
name|operator
operator||
operator|(
name|long
operator|,
specifier|const
name|Integer
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Integer
name|operator
modifier|^
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|operator
modifier|^
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|operator
modifier|^
parameter_list|(
name|long
parameter_list|,
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|abs
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// absolute value
end_comment

begin_function_decl
name|Integer
name|sqr
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// square
end_comment

begin_function_decl
name|Integer
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Integer
name|Ipow
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// x to the y as Integer
end_comment

begin_function_decl
specifier|extern
name|char
modifier|*
name|dec
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|oct
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|hex
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|int
name|width
init|=
literal|0
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Integer
name|sqrt
parameter_list|(
specifier|const
name|Integer
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// floor of square root
end_comment

begin_function_decl
specifier|extern
name|Integer
name|lcm
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// least common mult
end_comment

begin_typedef
typedef|typedef
name|Integer
name|IntTmp
typedef|;
end_typedef

begin_comment
comment|// for backward compatibility
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|Integer
operator|::
name|Integer
argument_list|()
operator|:
name|rep
argument_list|(
literal|0
argument_list|)
block|{}
specifier|inline
name|Integer
operator|::
name|Integer
argument_list|(
argument|long y
argument_list|)
operator|:
name|rep
argument_list|(
argument|Icopy_long(
literal|0
argument|, y)
argument_list|)
block|{}
specifier|inline
name|Integer
operator|::
name|Integer
argument_list|(
specifier|const
name|Integer
operator|&
name|y
argument_list|)
operator|:
name|rep
argument_list|(
argument|Icopy(
literal|0
argument|, y.rep)
argument_list|)
block|{}
specifier|inline
name|Integer
operator|::
operator|~
name|Integer
argument_list|()
block|{
name|delete
name|rep
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|rep
operator|=
name|Icopy
argument_list|(
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|=
operator|(
name|long
name|y
operator|)
block|{
name|rep
operator|=
name|Icopy_long
argument_list|(
name|rep
argument_list|,
name|y
argument_list|)
block|;  }
specifier|inline
name|Integer
operator|::
name|operator
name|long
argument_list|()
specifier|const
block|{
return|return
name|Itolong
argument_list|(
name|rep
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Integer
operator|::
name|initialized
argument_list|()
specifier|const
block|{
return|return
name|rep
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Integer
operator|::
name|fits_in_long
argument_list|()
specifier|const
block|{
return|return
name|Iislong
argument_list|(
name|rep
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
operator|::
name|operator
name|double
argument_list|()
specifier|const
block|{
return|return
name|Itodouble
argument_list|(
name|rep
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|Integer
operator|::
name|fits_in_double
argument_list|()
specifier|const
block|{
return|return
name|Iisdouble
argument_list|(
name|rep
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// procedural versions
end_comment

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|ucompare
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
name|ucompare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|ucompare
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
return|return
name|ucompare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|compare
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
operator|-
name|compare
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|ucompare
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
operator|-
name|ucompare
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|void
name|add
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|sub
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|y
operator|.
name|rep
argument_list|,
literal|1
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|mul
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|div
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|div
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|mod
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|mod
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|and
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'&'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|or
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|xor
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|lshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|rshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|,
literal|1
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|power
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|long
argument_list|(
name|y
argument_list|)
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
comment|// not incorrect
block|}
end_function

begin_function
specifier|inline
name|void
name|add
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|sub
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|x
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
operator|-
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|mul
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|multiply
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|div
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|div
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|mod
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|mod
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|and
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'&'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|or
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|xor
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|lshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|rshift
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|lshift
argument_list|(
name|x
operator|.
name|rep
argument_list|,
operator|-
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|power
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|abs
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|abs
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|negate
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|negate
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|complement
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|compl
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|add
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|y
operator|.
name|rep
argument_list|,
literal|0
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|sub
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|add
argument_list|(
name|y
operator|.
name|rep
argument_list|,
literal|1
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|mul
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|multiply
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|and
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'&'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|or
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'|'
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|inline
name|void
name|xor
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|Integer
modifier|&
name|dest
parameter_list|)
block|{
name|dest
operator|.
name|rep
operator|=
name|bitop
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|x
argument_list|,
name|dest
operator|.
name|rep
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// operator versions
end_comment

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|<=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
return|return
name|compare
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
operator|>=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|add
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|+=
operator|(
name|long
name|y
operator|)
block|{
name|add
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
name|add
argument_list|(
operator|*
name|this
argument_list|,
literal|1
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|sub
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|-=
operator|(
name|long
name|y
operator|)
block|{
name|sub
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|--
operator|(
operator|)
block|{
name|add
argument_list|(
operator|*
name|this
argument_list|,
operator|-
literal|1
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|mul
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|*=
operator|(
name|long
name|y
operator|)
block|{
name|mul
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|&=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|and
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|&=
operator|(
name|long
name|y
operator|)
block|{
name|and
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator||=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|or
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator||=
operator|(
name|long
name|y
operator|)
block|{
name|or
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|^=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|xor
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|^=
operator|(
name|long
name|y
operator|)
block|{
name|xor
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|div
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|/=
operator|(
name|long
name|y
operator|)
block|{
name|div
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|%=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|mod
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|%=
operator|(
name|long
name|y
operator|)
block|{
name|mod
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|<<=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|lshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|<<=
operator|(
name|long
name|y
operator|)
block|{
name|lshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|>>=
operator|(
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|rshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|operator
operator|>>=
operator|(
name|long
name|y
operator|)
block|{
name|rshift
argument_list|(
operator|*
name|this
argument_list|,
name|y
argument_list|,
operator|*
name|this
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__GNUG__
specifier|inline
name|Integer
name|operator
operator|<
condition|?
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
operator|(
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|<=
literal|0
operator|)
condition|?
name|x
else|:
name|y
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|>
condition|?
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
operator|(
name|compare
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
operator|>=
literal|0
operator|)
condition|?
name|x
else|:
name|y
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
specifier|inline
name|void
name|Integer
operator|::
name|abs
argument_list|()
block|{
operator|::
name|abs
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|negate
argument_list|()
block|{
operator|::
name|negate
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|void
name|Integer
operator|::
name|complement
argument_list|()
block|{
operator|::
name|complement
argument_list|(
operator|*
name|this
argument_list|,
operator|*
name|this
argument_list|)
block|; }
specifier|inline
name|int
name|sign
argument_list|(
argument|const Integer& x
argument_list|)
block|{
return|return
operator|(
name|x
operator|.
name|rep
operator|->
name|len
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|(
operator|(
name|x
operator|.
name|rep
operator|->
name|sgn
operator|==
literal|1
operator|)
operator|?
literal|1
operator|:
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|int
name|even
parameter_list|(
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
name|y
operator|.
name|rep
operator|->
name|len
operator|==
literal|0
operator|||
operator|!
operator|(
name|y
operator|.
name|rep
operator|->
name|s
index|[
literal|0
index|]
operator|&
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|odd
parameter_list|(
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
return|return
name|y
operator|.
name|rep
operator|->
name|len
operator|>
literal|0
operator|&&
operator|(
name|y
operator|.
name|rep
operator|->
name|s
index|[
literal|0
index|]
operator|&
literal|1
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|char
modifier|*
name|Itoa
parameter_list|(
specifier|const
name|Integer
modifier|&
name|y
parameter_list|,
name|int
name|base
parameter_list|,
name|int
name|width
parameter_list|)
block|{
return|return
name|Itoa
argument_list|(
name|y
operator|.
name|rep
argument_list|,
name|base
argument_list|,
name|width
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
return|return
name|s
operator|<<
name|Itoa
argument_list|(
name|y
operator|.
name|rep
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|long
name|lg
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|)
block|{
return|return
name|lg
argument_list|(
name|x
operator|.
name|rep
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// constructive operations
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_NRV
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
block|{
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|+
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|-
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|*
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|*
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|*
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|sqr
argument_list|(
argument|const Integer& x
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|mul
argument_list|(
name|x
argument_list|,
name|x
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|&
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|&
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|&
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator||
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|^
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|^
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|^
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|div
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|div
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|mod
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|mod
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_return

begin_return
return|return
name|r
block|{
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
end_return

begin_return
return|return
name|r
return|;
end_return

begin_block
block|{
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
end_expr_stmt

begin_return
return|return
name|r
block|{
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|pow
argument_list|(
argument|const Integer& x
argument_list|,
argument|long y
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|pow
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|Ipow
argument_list|(
argument|long x
argument_list|,
argument|long y
argument_list|)
end_return

begin_return
return|return
name|r
argument_list|(
argument|x
argument_list|)
block|{
name|pow
argument_list|(
name|r
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|pow
argument_list|(
argument|const Integer& x
argument_list|,
argument|const Integer& y
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|pow
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|abs
argument_list|(
argument|const Integer& x
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|abs
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|)
end_return

begin_return
return|return
name|r
block|{
name|negate
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|operator
operator|~
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|)
end_return

begin_return
return|return
name|r
block|{
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|; }
specifier|inline
name|Integer
name|atoI
argument_list|(
argument|const char* s
argument_list|,
argument|int base
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|r
operator|.
name|rep
operator|=
name|atoIntRep
argument_list|(
name|s
argument_list|,
name|base
argument_list|)
block|; }
specifier|inline
name|Integer
name|gcd
argument_list|(
argument|const Integer& x
argument_list|,
argument|const Integer& y
argument_list|)
end_return

begin_return
return|return
name|r
block|{
name|r
operator|.
name|rep
operator|=
name|gcd
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
block|; }
else|#
directive|else
comment|/* NO_NRV */
specifier|inline
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_return

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|+
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|+
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|add
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|-
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|sub
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Integer
name|operator
modifier|*
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|operator
modifier|*
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|operator
modifier|*
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|mul
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|sqr
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|mul
argument_list|(
name|x
argument_list|,
name|x
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|operator
function|&  (const
name|Integer
function|& x
operator|,
function|const Integer& y
end_function

begin_block
unit|)
block|{
name|Integer
name|r
decl_stmt|;
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_block

begin_function
specifier|inline
name|Integer
name|operator
function|&  (const
name|Integer
function|& x
operator|,
function|long y
end_function

begin_block
unit|)
block|{
name|Integer
name|r
decl_stmt|;
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_block

begin_function
specifier|inline
name|Integer
name|operator
function|&  (
name|long
name|x
function|, const
name|Integer
function|& y
end_function

begin_block
unit|)
block|{
name|Integer
name|r
decl_stmt|;
name|and
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_block

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator||
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator||
operator|(
name|long
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|or
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Integer
name|operator
modifier|^
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|operator
modifier|^
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|operator
modifier|^
parameter_list|(
name|long
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|xor
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|div
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|/
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|div
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|mod
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|%
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|mod
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|<<
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|lshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
specifier|const
name|Integer
operator|&
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|>>
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|,
name|long
name|y
operator|)
block|{
name|Integer
name|r
block|;
name|rshift
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Integer
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|pow
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|Ipow
parameter_list|(
name|long
name|x
parameter_list|,
name|long
name|y
parameter_list|)
block|{
name|Integer
name|r
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|pow
argument_list|(
name|r
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|pow
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|pow
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|abs
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|abs
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|-
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|)
block|{
name|Integer
name|r
block|;
name|negate
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Integer
name|operator
operator|~
operator|(
specifier|const
name|Integer
operator|&
name|x
operator|)
block|{
name|Integer
name|r
block|;
name|complement
argument_list|(
name|x
argument_list|,
name|r
argument_list|)
block|;
return|return
name|r
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Integer
name|atoI
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|,
name|int
name|base
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|atoIntRep
argument_list|(
name|s
argument_list|,
name|base
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_function
specifier|inline
name|Integer
name|gcd
parameter_list|(
specifier|const
name|Integer
modifier|&
name|x
parameter_list|,
specifier|const
name|Integer
modifier|&
name|y
parameter_list|)
block|{
name|Integer
name|r
decl_stmt|;
name|r
operator|.
name|rep
operator|=
name|gcd
argument_list|(
name|x
operator|.
name|rep
argument_list|,
name|y
operator|.
name|rep
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

