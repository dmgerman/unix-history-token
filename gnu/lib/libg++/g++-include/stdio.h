begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of the GNU C++ Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details. You should have received a copy of the GNU Library General Public License along with this library; if not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_stdio_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__stdio_h_recursive
end_ifdef

begin_empty
empty|#include_next<stdio.h>
end_empty

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__stdio_h_recursive
end_define

begin_comment
comment|// Note:  The #define _stdio_h is at the end of this file,
end_comment

begin_comment
comment|// in case #include_next<stdio.h> finds an installed version of this
end_comment

begin_comment
comment|// same file -- we want it to continue until it finds the C version.
end_comment

begin_include
include|#
directive|include
file|<_G_config.h>
end_include

begin_extern
extern|extern
literal|"C"
block|{
undef|#
directive|undef
name|NULL
define|#
directive|define
name|fdopen
value|__hide_fdopen
define|#
directive|define
name|fopen
value|__hide_fopen
define|#
directive|define
name|fprintf
value|__hide_fprintf
define|#
directive|define
name|fputs
value|__hide_fputs
define|#
directive|define
name|fread
value|__hide_fread
define|#
directive|define
name|freopen
value|__hide_freopen
define|#
directive|define
name|fscanf
value|__hide_fscanf
define|#
directive|define
name|ftell
value|__hide_ftell
define|#
directive|define
name|fwrite
value|__hide_fwrite
define|#
directive|define
name|new
value|__hide_new
comment|/* In case 'new' is used as a parameter name. */
define|#
directive|define
name|perror
value|__hide_perror
define|#
directive|define
name|popen
value|__hide_popen
define|#
directive|define
name|printf
value|__hide_printf
define|#
directive|define
name|puts
value|__hide_puts
define|#
directive|define
name|putw
value|__hide_putw
define|#
directive|define
name|rewind
value|__hide_rewind
define|#
directive|define
name|tempnam
value|__hide_tempnam
define|#
directive|define
name|scanf
value|__hide_scanf
define|#
directive|define
name|setbuf
value|__hide_setbuf
define|#
directive|define
name|setbuffer
value|__hide_setbuffer
define|#
directive|define
name|setlinebuf
value|__hide_setlinebuf
define|#
directive|define
name|setvbuf
value|__hide_setvbuf
define|#
directive|define
name|sprintf
value|__hide_sprintf
define|#
directive|define
name|sscanf
value|__hide_sscanf
define|#
directive|define
name|tempnam
value|__hide_tempnam
define|#
directive|define
name|vfprintf
value|__hide_vfprintf
define|#
directive|define
name|vprintf
value|__hide_vprintf
define|#
directive|define
name|vsprintf
value|__hide_vsprintf
define|#
directive|define
name|_flsbuf
value|__hide__flsbuf
empty|#include_next<stdio.h>
undef|#
directive|undef
name|fdopen
undef|#
directive|undef
name|fopen
undef|#
directive|undef
name|fprintf
undef|#
directive|undef
name|fputs
undef|#
directive|undef
name|fread
undef|#
directive|undef
name|freopen
undef|#
directive|undef
name|fscanf
undef|#
directive|undef
name|ftell
undef|#
directive|undef
name|fwrite
undef|#
directive|undef
name|new
undef|#
directive|undef
name|perror
undef|#
directive|undef
name|popen
undef|#
directive|undef
name|printf
undef|#
directive|undef
name|puts
undef|#
directive|undef
name|putw
comment|/* SCO defines remove to call unlink; that's very dangerous for us.  */
undef|#
directive|undef
name|remove
undef|#
directive|undef
name|rewind
undef|#
directive|undef
name|tempnam
undef|#
directive|undef
name|scanf
undef|#
directive|undef
name|setbuf
undef|#
directive|undef
name|setbuffer
undef|#
directive|undef
name|setlinebuf
undef|#
directive|undef
name|setvbuf
undef|#
directive|undef
name|sprintf
undef|#
directive|undef
name|sscanf
undef|#
directive|undef
name|tempnam
undef|#
directive|undef
name|vprintf
undef|#
directive|undef
name|vfprintf
undef|#
directive|undef
name|vsprintf
undef|#
directive|undef
name|_flsbuf
ifndef|#
directive|ifndef
name|NULL
define|#
directive|define
name|NULL
value|_G_NULL
endif|#
directive|endif
ifndef|#
directive|ifndef
name|size_t
define|#
directive|define
name|size_t
value|_G_size_t
endif|#
directive|endif
block|}
end_extern

begin_extern
extern|extern
literal|"C"
block|{
name|int
name|fclose
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|fdopen
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|fflush
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|fgetc
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|__386BSD__
name|char
modifier|*
name|fgets
name|_G_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|fgets
name|_G_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
name|_G_size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|FILE
modifier|*
name|fopen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|fprintf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|int
name|fputc
parameter_list|(
name|int
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|fputs
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|fread
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|VMS
name|FILE
modifier|*
name|freopen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|FILE
modifier|*
modifier|...
parameter_list|)
function_decl|;
else|#
directive|else
name|FILE
modifier|*
name|freopen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
endif|#
directive|endif
name|int
name|fscanf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|int
name|fseek
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|long
name|ftell
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|size_t
name|fwrite
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|gets
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|getw
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|pclose
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|void
name|perror
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|popen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|printf
parameter_list|(
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|int
name|puts
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|int
name|putw
parameter_list|(
name|int
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|rewind
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|scanf
parameter_list|(
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|void
name|setbuf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|setbuffer
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|setlinebuf
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|setvbuf
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|sscanf
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|tmpfile
parameter_list|()
function_decl|;
name|int
name|ungetc
parameter_list|(
name|int
parameter_list|,
name|FILE
modifier|*
parameter_list|)
function_decl|;
name|int
name|vfprintf
name|_G_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
name|int
name|vprintf
name|_G_ARGS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
name|_G_sprintf_return_type
name|sprintf
name|_G_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|...
operator|)
argument_list|)
decl_stmt|;
name|_G_sprintf_return_type
name|vsprintf
name|_G_ARGS
argument_list|(
operator|(
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|_G_va_list
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_filbuf
name|_G_ARGS
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|_flsbuf
name|_G_ARGS
argument_list|(
operator|(
name|unsigned
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
block|}
end_extern

begin_ifndef
ifndef|#
directive|ifndef
name|L_ctermid
end_ifndef

begin_define
define|#
directive|define
name|L_ctermid
value|9
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|L_cuserid
end_ifndef

begin_define
define|#
directive|define
name|L_cuserid
value|9
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|P_tmpdir
end_ifndef

begin_define
define|#
directive|define
name|P_tmpdir
value|"/tmp/"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|L_tmpnam
end_ifndef

begin_define
define|#
directive|define
name|L_tmpnam
value|(sizeof(P_tmpdir) + 15)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_stdio_h
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _stdio_h
end_comment

end_unit

