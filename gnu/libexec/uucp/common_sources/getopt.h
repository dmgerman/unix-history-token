begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Declarations for getopt.    Copyright (C) 1989, 1990, 1991, 1992 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify it    under the terms of the GNU General Public License as published by the    Free Software Foundation; either version 2, or (at your option) any    later version.        This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.        You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.     This file was modified slightly by Ian Lance Taylor, November 1992,    for Taylor UUCP.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GETOPT_H
end_ifndef

begin_define
define|#
directive|define
name|_GETOPT_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Ian Lance Taylor<ian@airs.com> added the following defines for    Taylor UUCP.  This avoids reported conflicts with system getopt    definitions.  */
define|#
directive|define
name|getopt
value|gnu_getopt
define|#
directive|define
name|optarg
value|gnu_optarg
define|#
directive|define
name|optind
value|gnu_optind
define|#
directive|define
name|opterr
value|gnu_opterr
comment|/* For communication from `getopt' to the caller.    When `getopt' finds an option that takes an argument,    the argument value is returned here.    Also, when `ordering' is RETURN_IN_ORDER,    each non-option ARGV-element is returned here.  */
specifier|extern
name|char
modifier|*
name|optarg
decl_stmt|;
comment|/* Index in ARGV of the next element to be scanned.    This is used for communication to and from the caller    and for communication between successive calls to `getopt'.     On entry to `getopt', zero means this is the first call; initialize.     When `getopt' returns EOF, this is the index of the first of the    non-option elements that the caller should itself scan.     Otherwise, `optind' communicates from one call to the next    how much of ARGV has been scanned so far.  */
specifier|extern
name|int
name|optind
decl_stmt|;
comment|/* Callers store zero here to inhibit the error message `getopt' prints    for unrecognized options.  */
specifier|extern
name|int
name|opterr
decl_stmt|;
comment|/* Describe the long-named options requested by the application.    The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector    of `struct option' terminated by an element containing a name which is    zero.     The field `has_arg' is:    no_argument		(or 0) if the option does not take an argument,    required_argument	(or 1) if the option requires an argument,    optional_argument 	(or 2) if the option takes an optional argument.     If the field `flag' is not NULL, it points to a variable that is set    to the value given in the field `val' when the option is found, but    left unchanged if the option is not found.     To have a long-named option do something other than set an `int' to    a compiled-in constant, such as set a value from `optarg', set the    option's `flag' field to zero and its `val' field to a nonzero    value (the equivalent single-letter option character, if there is    one).  For long options that have a zero `flag' field, `getopt'    returns the contents of the `val' field.  */
struct|struct
name|option
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* has_arg can't be an enum because some compilers complain about      type mismatches in all the code that assumes it is an int.  */
name|int
name|has_arg
decl_stmt|;
name|int
modifier|*
name|flag
decl_stmt|;
name|int
name|val
decl_stmt|;
block|}
struct|;
comment|/* Names for the values of the `has_arg' field of `struct option'.  */
enum|enum
name|_argtype
block|{
name|no_argument
block|,
name|required_argument
block|,
name|optional_argument
block|}
enum|;
specifier|extern
name|int
name|getopt
name|P
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
specifier|const
operator|*
name|argv
operator|,
specifier|const
name|char
operator|*
name|shortopts
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getopt_long
name|P
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
specifier|const
operator|*
name|argv
operator|,
specifier|const
name|char
operator|*
name|shortopts
operator|,
specifier|const
expr|struct
name|option
operator|*
name|longopts
operator|,
name|int
operator|*
name|longind
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|getopt_long_only
name|P
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
specifier|const
operator|*
name|argv
operator|,
specifier|const
name|char
operator|*
name|shortopts
operator|,
specifier|const
expr|struct
name|option
operator|*
name|longopts
operator|,
name|int
operator|*
name|longind
operator|)
argument_list|)
decl_stmt|;
comment|/* Internal only.  Users should not call this directly.  */
specifier|extern
name|int
name|_getopt_internal
name|P
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
specifier|const
operator|*
name|argv
operator|,
specifier|const
name|char
operator|*
name|shortopts
operator|,
specifier|const
expr|struct
name|option
operator|*
name|longopts
operator|,
name|int
operator|*
name|longind
operator|,
name|int
name|long_only
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GETOPT_H */
end_comment

end_unit

