begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* prot.h    Protocol header file.     Copyright (C) 1991, 1992 Ian Lance Taylor     This file is part of the Taylor UUCP package.     This program is free software; you can redistribute it and/or    modify it under the terms of the GNU General Public License as    published by the Free Software Foundation; either version 2 of the    License, or (at your option) any later version.     This program is distributed in the hope that it will be useful, but    WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.     The author of the program may be contacted at ian@airs.com or    c/o Infinity Development Systems, P.O. Box 520, Waltham, MA 02254.    */
end_comment

begin_comment
comment|/* We need the definition of uuconf_cmdtab to declare the protocol    parameter arrays.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|UUCONF_H
end_ifndef

begin_include
include|#
directive|include
file|"uuconf.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|ANSI_C
end_if

begin_comment
comment|/* These structures are used in prototypes but are not defined in this    header file.  */
end_comment

begin_struct_decl
struct_decl|struct
name|sdaemon
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sconnection
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|stransfer
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* The sprotocol structure holds information and functions for a specific    protocol (e.g. the 'g' protocol).  */
end_comment

begin_struct
struct|struct
name|sprotocol
block|{
comment|/* The name of the protocol (e.g. 'g').  */
name|char
name|bname
decl_stmt|;
comment|/* Reliability requirements, an or of UUCONF_RELIABLE_xxx defines      from uuconf.h.  */
name|int
name|ireliable
decl_stmt|;
comment|/* The maximum number of channels this protocol can support.  */
name|int
name|cchans
decl_stmt|;
comment|/* Protocol parameter commands.  */
name|struct
name|uuconf_cmdtab
modifier|*
name|qcmds
decl_stmt|;
comment|/* A routine to start the protocol.  If *pzlog is set to be      non-NULL, it is an informative message to be logged; it should      then be passed to ubuffree.  */
name|boolean
argument_list|(
argument|*pfstart
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
expr_stmt|;
comment|/* Shutdown the protocol.  */
name|boolean
argument_list|(
argument|*pfshutdown
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
expr_stmt|;
comment|/* Send a command to the other side.  */
name|boolean
argument_list|(
argument|*pfsendcmd
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
expr_stmt|;
comment|/* Get buffer to space to fill with data.  This should set *pcdata      to the amount of data desired.  */
name|char
operator|*
operator|(
operator|*
name|pzgetspace
operator|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
expr_stmt|;
comment|/* Send data to the other side.  The argument z must be a return      value of pzgetspace.  The ipos argument is the file position, and      is ignored by most protocols.  */
name|boolean
argument_list|(
argument|*pfsenddata
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
expr_stmt|;
comment|/* Wait for data to come in and call fgot_data with it until      fgot_data sets *pfexit.  */
name|boolean
argument_list|(
argument|*pfwait
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
expr_stmt|;
comment|/* Handle any file level actions that need to be taken.  If a file      transfer is starting rather than ending, fstart is TRUE.  If the      file is being sent rather than received, fsend is TRUE.  If      fstart and fsend are both TRUE, cbytes holds the size of the      file.  If *pfhandled is set to TRUE, then the protocol routine      has taken care of queueing up qtrans for the next action.  */
name|boolean
argument_list|(
argument|*pffile
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
expr|struct
name|stransfer
operator|*
name|qtrans
operator|,
name|boolean
name|fstart
operator|,
name|boolean
name|fsend
operator|,
name|long
name|cbytes
operator|,
name|boolean
operator|*
name|pfhandled
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Send data to the other system.  If the fread argument is TRUE, this    will also receive data into the receive buffer abPrecbuf; fread is    passed as TRUE if the protocol expects data to be coming back, to    make sure the input buffer does not fill up.  Returns FALSE on    error.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|fsend_data
name|P
argument_list|(
operator|(
expr|struct
name|sconnection
operator|*
name|qconn
operator|,
specifier|const
name|char
operator|*
name|zsend
operator|,
name|size_t
name|csend
operator|,
name|boolean
name|fdoread
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Receive data from the other system when there is no data to send.    The cneed argument is the amount of data desired and the ctimeout    argument is the timeout in seconds.  This will set *pcrec to the    amount of data received.  It will return FALSE on error.  If a    timeout occurs, it will return TRUE with *pcrec set to zero.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|freceive_data
name|P
argument_list|(
operator|(
expr|struct
name|sconnection
operator|*
name|qconn
operator|,
name|size_t
name|cneed
operator|,
name|size_t
operator|*
name|pcrec
operator|,
name|int
name|ctimeout
operator|,
name|boolean
name|freport
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Get one character from the remote system, going through the    procotol buffering.  The ctimeout argument is the timeout in    seconds, and the freport argument is TRUE if errors should be    reported (when closing a connection it is pointless to report    errors).  This returns a character or -1 on a timeout or -2 on an    error.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|breceive_char
name|P
argument_list|(
operator|(
expr|struct
name|sconnection
operator|*
name|qconn
operator|,
name|int
name|ctimeout
operator|,
name|boolean
name|freport
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Compute a 32 bit CRC of a data buffer, given an initial CRC.  */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|long
name|icrc
name|P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|unsigned
name|long
name|ick
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* The initial CRC value to use for a new buffer.  */
end_comment

begin_if
if|#
directive|if
name|ANSI_C
end_if

begin_define
define|#
directive|define
name|ICRCINIT
value|(0xffffffffUL)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ICRCINIT
value|((unsigned long) 0xffffffffL)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* The size of the receive buffer.  */
end_comment

begin_define
define|#
directive|define
name|CRECBUFLEN
value|(16384)
end_define

begin_comment
comment|/* Buffer to hold received data.  */
end_comment

begin_decl_stmt
specifier|extern
name|char
name|abPrecbuf
index|[
name|CRECBUFLEN
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Index of start of data in abPrecbuf.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|iPrecstart
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Index of end of data (first byte not included in data) in abPrecbuf.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|iPrecend
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* There are a couple of variables and functions that are shared by    the 'i' and 'j' protocols (the 'j' protocol is just a wrapper    around the 'i' protocol).  These belong in a separate header file,    protij.h, but I don't want to create one for just a couple of    things.  */
end_comment

begin_comment
comment|/* An escape sequence of characters for the 'j' protocol to avoid    (protocol parameter ``avoid'').  */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|zJavoid_parameter
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Timeout to use when sending the 'i' protocol SYNC packet (protocol    parameter ``sync-timeout'').  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|cIsync_timeout
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Shared startup routine for the 'i' and 'j' protocols.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|fijstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|,
name|int
name|imaxpacksize
operator|,
name|boolean
argument_list|(
argument|*pfsend
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sconnection
operator|*
name|qconn
operator|,
specifier|const
name|char
operator|*
name|zsend
operator|,
name|size_t
name|csend
operator|,
name|boolean
name|fdoread
operator|)
argument_list|)
operator|,
name|boolean
argument_list|(
argument|*pfreceive
argument_list|)
name|P
argument_list|(
operator|(
expr|struct
name|sconnection
operator|*
name|qconn
operator|,
name|size_t
name|cneed
operator|,
name|size_t
operator|*
name|pcrec
operator|,
name|int
name|ctimeout
operator|,
name|boolean
name|freport
operator|)
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'g' protocol functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asGproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fgstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fbiggstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fgshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fgsendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|zggetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fgsenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fgwait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'f' protocol functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asFproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ffstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ffshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ffsendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|zfgetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ffsenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ffwait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fffile
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
expr|struct
name|stransfer
operator|*
name|qtrans
operator|,
name|boolean
name|fstart
operator|,
name|boolean
name|fsend
operator|,
name|long
name|cbytes
operator|,
name|boolean
operator|*
name|pfhandled
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 't' protocol functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asTproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftsendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|ztgetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftsenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftwait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ftfile
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
expr|struct
name|stransfer
operator|*
name|qtrans
operator|,
name|boolean
name|fstart
operator|,
name|boolean
name|fsend
operator|,
name|long
name|cbytes
operator|,
name|boolean
operator|*
name|pfhandled
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'e' protocol functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asEproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|festart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|feshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fesendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|zegetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fesenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fewait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fefile
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
expr|struct
name|stransfer
operator|*
name|qtrans
operator|,
name|boolean
name|fstart
operator|,
name|boolean
name|fsend
operator|,
name|long
name|cbytes
operator|,
name|boolean
operator|*
name|pfhandled
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'i' protocol functions.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asIproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fistart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fishutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fisendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|zigetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fisenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fiwait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'j' protocol functions.  The 'j' protocol mostly    uses the 'i' protocol functions, but it has a couple of functions    of its own.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|fjstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fjshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for 'a' protocol functions (these use 'z' as the second    character because 'a' is a modified Zmodem protocol).  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|uuconf_cmdtab
name|asZproto_params
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzstart
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
operator|*
name|pzlog
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzshutdown
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzsendcmd
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
specifier|const
name|char
operator|*
name|z
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|zzgetspace
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|size_t
operator|*
name|pcdata
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzsenddata
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
name|char
operator|*
name|z
operator|,
name|size_t
name|c
operator|,
name|int
name|ilocal
operator|,
name|int
name|iremote
operator|,
name|long
name|ipos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzwait
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|fzfile
name|P
argument_list|(
operator|(
expr|struct
name|sdaemon
operator|*
name|qdaemon
operator|,
expr|struct
name|stransfer
operator|*
name|qtrans
operator|,
name|boolean
name|fstart
operator|,
name|boolean
name|fsend
operator|,
name|long
name|cbytes
operator|,
name|boolean
operator|*
name|pfhandled
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

