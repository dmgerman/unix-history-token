begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Basic data types for Objective C.    Copyright (C) 1993 Free Software Foundation, Inc.  This file is part of GNU CC.  GNU CC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files    compiled with GCC to produce an executable, this does not cause    the resulting executable to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__objc_INCLUDE_GNU
end_ifndef

begin_define
define|#
directive|define
name|__objc_INCLUDE_GNU
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifdef|#
directive|ifdef
name|IN_GCC
include|#
directive|include
file|"gstddef.h"
else|#
directive|else
include|#
directive|include
file|"stddef.h"
endif|#
directive|endif
comment|/* ** Definition of the boolean type.   */
typedef|typedef
name|char
name|BOOL
typedef|;
define|#
directive|define
name|YES
value|(BOOL)1
define|#
directive|define
name|NO
value|(BOOL)0
comment|/* ** Definition of a selector.  Selectors are really of type unsigned int. ** The runtime does this mapping from SEL's to names internally in the ** sel_... operations.  You should never use the fact that it is actually ** an integer, since other Objective-C implementations use other conventions. */
typedef|typedef
name|void
modifier|*
name|SEL
typedef|;
comment|/* ** ObjC uses this typedef for untyped instances. */
typedef|typedef
struct|struct
name|objc_object
block|{
name|struct
name|objc_class
modifier|*
name|class_pointer
decl_stmt|;
block|}
typedef|*
name|id
typedef|;
comment|/* ** Definition of method type.  When retrieving the implementation of a ** method, this is type of the pointer returned */
typedef|typedef
name|id
function_decl|(
modifier|*
name|IMP
function_decl|)
parameter_list|(
name|id
parameter_list|,
name|SEL
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* ** More simple types... */
define|#
directive|define
name|nil
value|(id)0
comment|/* id of Nil instance */
define|#
directive|define
name|Nil
value|(Class*)0
comment|/* id of Nil class */
typedef|typedef
name|char
modifier|*
name|STR
typedef|;
comment|/* String alias */
comment|/* ** The compiler generates one of these structures for each class.   **  ** This structure is the definition for classes.  **  ** This structure is generated by the compiler in the executable and used by ** the run-time during normal messaging operations.  Therefore some members ** change type. The compiler generates "char* const" and places a string in ** the following member variables:  super_class.  */
typedef|typedef
name|struct
name|objc_class
name|MetaClass
typedef|;
typedef|typedef
name|struct
name|objc_class
name|Class
typedef|;
struct|struct
name|objc_class
block|{
name|MetaClass
modifier|*
name|class_pointer
decl_stmt|;
comment|/* Pointer to the class's                                                 meta class. */
name|struct
name|objc_class
modifier|*
name|super_class
decl_stmt|;
comment|/* Pointer to the super                                                  class. NULL for class                                                  Object. */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Name of the class. */
name|long
name|version
decl_stmt|;
comment|/* Unknown. */
name|unsigned
name|long
name|info
decl_stmt|;
comment|/* Bit mask.  See class masks                                                  defined above. */
name|long
name|instance_size
decl_stmt|;
comment|/* Size in bytes of the class.                                                   The sum of the class definition                                                  and all super class                                                  definitions. */
name|struct
name|objc_ivar_list
modifier|*
name|ivars
decl_stmt|;
comment|/* Pointer to a structure that                                                 describes the instance                                                  variables in the class                                                 definition.  NULL indicates                                                 no instance variables.  Does                                                 not include super class                                                 variables. */
name|struct
name|objc_method_list
modifier|*
name|methods
decl_stmt|;
comment|/* Linked list of instance                                                 methods defined for the                                                  class. */
name|struct
name|sarray
modifier|*
name|dtable
decl_stmt|;
comment|/* Pointer to instance  					         method dispatch table. */
name|struct
name|objc_class
modifier|*
name|subclass_list
decl_stmt|;
comment|/* Subclasses */
name|struct
name|objc_class
modifier|*
name|sibling_class
decl_stmt|;
name|struct
name|objc_protocol_list
modifier|*
name|protocols
decl_stmt|;
comment|/* Protocols conformed to */
block|}
struct|;
ifndef|#
directive|ifndef
name|__OBJC__
typedef|typedef
struct|struct
name|objc_protocol
block|{
name|struct
name|objc_class
modifier|*
name|class_pointer
decl_stmt|;
name|char
modifier|*
name|protocol_name
decl_stmt|;
name|struct
name|objc_protocol_list
modifier|*
name|protocol_list
decl_stmt|;
name|struct
name|objc_method_description_list
modifier|*
name|instance_methods
decl_stmt|,
modifier|*
name|class_methods
decl_stmt|;
block|}
name|Protocol
typedef|;
else|#
directive|else
block|@
name|class
name|Protocol
decl_stmt|;
endif|#
directive|endif
typedef|typedef
name|void
modifier|*
name|retval_t
typedef|;
comment|/* return value */
typedef|typedef
name|void
function_decl|(
modifier|*
name|apply_t
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* function pointer */
if|#
directive|if
name|defined
argument_list|(
name|REG_ARGS
argument_list|)
operator|||
name|defined
argument_list|(
name|STACK_ARGS
argument_list|)
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|arg_pointer
decl_stmt|;
ifdef|#
directive|ifdef
name|STRUCT_RETURN
name|void
modifier|*
name|struct_return
decl_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|REG_ARGS
name|void
modifier|*
name|regs
index|[
literal|2
index|]
decl_stmt|;
endif|#
directive|endif
block|}
typedef|*
name|arglist_t
typedef|;
ifdef|#
directive|ifdef
name|REG_ARGS
define|#
directive|define
name|__objc_frame_receiver
parameter_list|(
name|FRAME
parameter_list|)
value|(FRAME)->regs[0]
define|#
directive|define
name|__objc_frame_selector
parameter_list|(
name|FRAME
parameter_list|)
value|((SEL)(FRAME)->regs[1])
else|#
directive|else
define|#
directive|define
name|__objc_frame_receiver
parameter_list|(
name|FRAME
parameter_list|)
value|((id*)(FRAME)->arg_pointer)[0]
define|#
directive|define
name|__objc_frame_selector
parameter_list|(
name|FRAME
parameter_list|)
value|((SEL*)(FRAME)->arg_pointer)[1]
endif|#
directive|endif
else|#
directive|else
typedef|typedef
name|void
modifier|*
name|arglist_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__OBJC__
argument_list|)
include|#
directive|include
file|"objc/sarray.h"
specifier|static
name|id
name|nil_method
parameter_list|(
name|id
name|rcv
parameter_list|,
name|SEL
name|op
parameter_list|,
modifier|...
parameter_list|)
block|{
return|return
name|rcv
return|;
block|}
specifier|extern
name|__inline__
name|IMP
name|objc_msg_lookup
parameter_list|(
name|id
name|receiver
parameter_list|,
name|SEL
name|op
parameter_list|)
block|{
if|if
condition|(
name|receiver
condition|)
return|return
name|sarray_get
argument_list|(
name|receiver
operator|->
name|class_pointer
operator|->
name|dtable
argument_list|,
operator|(
name|size_t
operator|)
name|op
argument_list|)
return|;
else|else
return|return
name|nil_method
return|;
block|}
else|#
directive|else
name|IMP
name|objc_msg_lookup
parameter_list|(
name|id
name|receiver
parameter_list|,
name|SEL
name|op
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not __objc_INCLUDE_GNU */
end_comment

end_unit

