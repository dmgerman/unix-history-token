begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* BFD ECOFF object file private structure.    Copyright (C) 1993 Free Software Foundation, Inc.    Written by Ian Lance Taylor, Cygnus Support.  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_comment
comment|/* This is the backend information kept for ECOFF files.  This    structure is constant for a particular backend.  The first element    is the COFF backend data structure, so that ECOFF targets can use    the generic COFF code.  */
end_comment

begin_define
define|#
directive|define
name|ecoff_backend
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((struct ecoff_backend_data *) (abfd)->xvec->backend_data)
end_define

begin_struct
struct|struct
name|ecoff_backend_data
block|{
comment|/* COFF backend information.  This must be the first field.  */
name|bfd_coff_backend_data
name|coff
decl_stmt|;
comment|/* Supported architecture.  */
name|enum
name|bfd_architecture
name|arch
decl_stmt|;
comment|/* Symbol table magic number.  */
name|int
name|sym_magic
decl_stmt|;
comment|/* Initial portion of armap string.  */
specifier|const
name|char
modifier|*
name|armap_start
decl_stmt|;
comment|/* Alignment of debugging information.  E.g., 4.  */
name|bfd_size_type
name|debug_align
decl_stmt|;
comment|/* The page boundary used to align sections in a demand-paged      executable file.  E.g., 0x1000.  */
name|bfd_vma
name|round
decl_stmt|;
comment|/* Bitsize of constructor entries.  */
name|unsigned
name|int
name|constructor_bitsize
decl_stmt|;
comment|/* Reloc to use for constructor entries.  */
name|CONST
name|struct
name|reloc_howto_struct
modifier|*
name|constructor_reloc
decl_stmt|;
comment|/* Sizes of external symbolic information.  */
name|bfd_size_type
name|external_hdr_size
decl_stmt|;
name|bfd_size_type
name|external_dnr_size
decl_stmt|;
name|bfd_size_type
name|external_pdr_size
decl_stmt|;
name|bfd_size_type
name|external_sym_size
decl_stmt|;
name|bfd_size_type
name|external_opt_size
decl_stmt|;
name|bfd_size_type
name|external_fdr_size
decl_stmt|;
name|bfd_size_type
name|external_rfd_size
decl_stmt|;
name|bfd_size_type
name|external_ext_size
decl_stmt|;
comment|/* Functions to swap in external symbolic data.  */
name|void
argument_list|(
argument|*swap_hdr_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|HDRR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_dnr_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|DNR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_pdr_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|PDR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_sym_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|SYMR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_opt_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|OPTR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_fdr_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|FDR
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_rfd_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|RFDT
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_ext_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|EXTR
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* Functions to swap out external symbolic data.  */
name|void
argument_list|(
argument|*swap_hdr_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|HDRR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_dnr_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|DNR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_pdr_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|PDR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_sym_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|SYMR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_opt_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|OPTR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_fdr_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|FDR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_rfd_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|RFDT
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_ext_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|EXTR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
comment|/* It so happens that the auxiliary type information has the same      type and format for all known ECOFF targets.  I don't see any      reason that that should change, so at least for now the auxiliary      swapping information is not in this table.  */
comment|/* External reloc size.  */
name|bfd_size_type
name|external_reloc_size
decl_stmt|;
comment|/* Reloc swapping functions.  */
name|void
argument_list|(
argument|*swap_reloc_in
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
expr|struct
name|internal_reloc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*swap_reloc_out
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
expr|struct
name|internal_reloc
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
comment|/* Backend reloc tweaking.  */
name|void
argument_list|(
argument|*finish_reloc
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
expr|struct
name|internal_reloc
operator|*
operator|,
name|arelent
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This is the target specific information kept for ECOFF files.  */
end_comment

begin_define
define|#
directive|define
name|ecoff_data
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->tdata.ecoff_obj_data)
end_define

begin_typedef
typedef|typedef
struct|struct
name|ecoff_tdata
block|{
comment|/* The reloc file position, set by      ecoff_compute_section_file_positions.  */
name|file_ptr
name|reloc_filepos
decl_stmt|;
comment|/* The symbol table file position, set by ecoff_mkobject_hook.  */
name|file_ptr
name|sym_filepos
decl_stmt|;
comment|/* The start and end of the text segment.  Only valid for an      existing file, not for one we are creating.  */
name|unsigned
name|long
name|text_start
decl_stmt|;
name|unsigned
name|long
name|text_end
decl_stmt|;
comment|/* The cached gp value.  This is used when relocating.  */
name|bfd_vma
name|gp
decl_stmt|;
comment|/* The maximum size of objects to optimize using gp.  This is      typically set by the -G option to the compiler, assembler or      linker.  */
name|int
name|gp_size
decl_stmt|;
comment|/* The register masks.  When linking, all the masks found in the      input files are combined into the masks of the output file.      These are not all used for all targets, but that's OK, because      the relevant ones are the only ones swapped in and out.  */
name|unsigned
name|long
name|gprmask
decl_stmt|;
name|unsigned
name|long
name|fprmask
decl_stmt|;
name|unsigned
name|long
name|cprmask
index|[
literal|4
index|]
decl_stmt|;
comment|/* The size of the unswapped ECOFF symbolic information.  */
name|bfd_size_type
name|raw_size
decl_stmt|;
comment|/* The unswapped ECOFF symbolic information.  */
name|PTR
name|raw_syments
decl_stmt|;
comment|/* The swapped ECOFF symbolic header.  */
name|HDRR
name|symbolic_header
decl_stmt|;
comment|/* Pointers to the unswapped symbolic information.  */
name|unsigned
name|char
modifier|*
name|line
decl_stmt|;
name|PTR
name|external_dnr
decl_stmt|;
comment|/* struct dnr_ext */
name|PTR
name|external_pdr
decl_stmt|;
comment|/* struct pdr_ext */
name|PTR
name|external_sym
decl_stmt|;
comment|/* struct sym_ext */
name|PTR
name|external_opt
decl_stmt|;
comment|/* struct opt_ext */
name|union
name|aux_ext
modifier|*
name|external_aux
decl_stmt|;
name|char
modifier|*
name|ss
decl_stmt|;
name|char
modifier|*
name|ssext
decl_stmt|;
name|PTR
name|external_fdr
decl_stmt|;
comment|/* struct fdr_ext */
name|PTR
name|external_rfd
decl_stmt|;
comment|/* struct rfd_ext */
name|PTR
name|external_ext
decl_stmt|;
comment|/* struct ext_ext */
comment|/* The swapped FDR information.  */
name|FDR
modifier|*
name|fdr
decl_stmt|;
comment|/* The FDR index.  This is set for an input BFD to a link so that      the external symbols can set their FDR index correctly.  */
name|unsigned
name|int
name|ifdbase
decl_stmt|;
comment|/* The canonical BFD symbols.  */
name|struct
name|ecoff_symbol_struct
modifier|*
name|canonical_symbols
decl_stmt|;
block|}
name|ecoff_data_type
typedef|;
end_typedef

begin_comment
comment|/* Each canonical asymbol really looks like this.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|ecoff_symbol_struct
block|{
comment|/* The actual symbol which the rest of BFD works with */
name|asymbol
name|symbol
decl_stmt|;
comment|/* The fdr for this symbol.  */
name|FDR
modifier|*
name|fdr
decl_stmt|;
comment|/* true if this is a local symbol rather than an external one.  */
name|boolean
name|local
decl_stmt|;
comment|/* A pointer to the unswapped hidden information for this symbol.      This is either a struct sym_ext or a struct ext_ext, depending on      the value of the local field above.  */
name|PTR
name|native
decl_stmt|;
block|}
name|ecoff_symbol_type
typedef|;
end_typedef

begin_comment
comment|/* We take the address of the first element of a asymbol to ensure that the    macro is only ever applied to an asymbol.  */
end_comment

begin_define
define|#
directive|define
name|ecoffsymbol
parameter_list|(
name|asymbol
parameter_list|)
value|((ecoff_symbol_type *) (&((asymbol)->the_bfd)))
end_define

begin_comment
comment|/* This is a hack borrowed from coffcode.h; we need to save the index    of an external symbol when we write it out so that can set the    symbol index correctly when we write out the relocs.  */
end_comment

begin_define
define|#
directive|define
name|ecoff_get_sym_index
parameter_list|(
name|symbol
parameter_list|)
value|((unsigned long) (symbol)->udata)
end_define

begin_define
define|#
directive|define
name|ecoff_set_sym_index
parameter_list|(
name|symbol
parameter_list|,
name|idx
parameter_list|)
value|((symbol)->udata = (PTR) (idx))
end_define

begin_comment
comment|/* Make an ECOFF object.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_mkobject
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Read in the ECOFF symbolic debugging information.  */
end_comment

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_slurp_symbolic_info
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Generic ECOFF BFD backend vectors.  */
end_comment

begin_decl_stmt
specifier|extern
name|asymbol
modifier|*
name|ecoff_make_empty_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|ecoff_get_symtab_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|ecoff_get_symtab
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asymbol
operator|*
operator|*
name|alocation
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ecoff_get_symbol_info
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asymbol
operator|*
name|symbol
operator|,
name|symbol_info
operator|*
name|ret
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|ecoff_print_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|PTR
name|filep
operator|,
name|asymbol
operator|*
name|symbol
operator|,
name|bfd_print_symbol_type
name|how
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|ecoff_canonicalize_reloc
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asection
operator|*
name|section
operator|,
name|arelent
operator|*
operator|*
name|relptr
operator|,
name|asymbol
operator|*
operator|*
name|symbols
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_find_nearest_line
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asection
operator|*
name|section
operator|,
name|asymbol
operator|*
operator|*
name|symbols
operator|,
name|bfd_vma
name|offset
operator|,
name|CONST
name|char
operator|*
operator|*
name|filename_ptr
operator|,
name|CONST
name|char
operator|*
operator|*
name|fnname_ptr
operator|,
name|unsigned
name|int
operator|*
name|retline_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_bfd_seclet_link
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|PTR
name|data
operator|,
name|boolean
name|relocateable
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_set_arch_mach
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
expr|enum
name|bfd_architecture
name|arch
operator|,
name|unsigned
name|long
name|machine
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ecoff_sizeof_headers
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|boolean
name|reloc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_set_section_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asection
operator|*
name|section
operator|,
name|PTR
name|location
operator|,
name|file_ptr
name|offset
operator|,
name|bfd_size_type
name|count
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_get_section_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asection
operator|*
name|section
operator|,
name|PTR
name|location
operator|,
name|file_ptr
name|offset
operator|,
name|bfd_size_type
name|count
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_write_object_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_slurp_armap
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_write_armap
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|unsigned
name|int
name|elength
operator|,
expr|struct
name|orl
operator|*
name|map
operator|,
name|unsigned
name|int
name|orl_count
operator|,
name|int
name|stridx
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ecoff_slurp_extended_name_table
value|_bfd_slurp_extended_name_table
end_define

begin_decl_stmt
specifier|extern
name|bfd_target
modifier|*
name|ecoff_archive_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ecoff_get_lineno
define|\
value|((alent *(*) PARAMS ((bfd *, asymbol *))) bfd_nullvoidptr)
end_define

begin_define
define|#
directive|define
name|ecoff_truncate_arname
value|bfd_dont_truncate_arname
end_define

begin_define
define|#
directive|define
name|ecoff_openr_next_archived_file
value|bfd_generic_openr_next_archived_file
end_define

begin_define
define|#
directive|define
name|ecoff_generic_stat_arch_elt
value|bfd_generic_stat_arch_elt
end_define

begin_define
define|#
directive|define
name|ecoff_get_reloc_upper_bound
value|coff_get_reloc_upper_bound
end_define

begin_define
define|#
directive|define
name|ecoff_close_and_cleanup
value|bfd_generic_close_and_cleanup
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_debug_info_start
value|bfd_void
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_debug_info_end
value|bfd_void
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_debug_info_accumulate
define|\
value|((void (*) PARAMS ((bfd *, struct sec *))) bfd_void)
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_get_relocated_section_contents
define|\
value|bfd_generic_get_relocated_section_contents
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_relax_section
value|bfd_generic_relax_section
end_define

begin_define
define|#
directive|define
name|ecoff_bfd_make_debug_symbol
define|\
value|((asymbol *(*) PARAMS ((bfd *, void *, unsigned long))) bfd_nullvoidptr)
end_define

begin_comment
comment|/* Hook functions for the generic COFF section reading code.  */
end_comment

begin_decl_stmt
specifier|extern
name|PTR
name|ecoff_mkobject_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
name|filehdr
operator|,
name|PTR
name|aouthdr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|asection
modifier|*
name|ecoff_make_section_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_new_section_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|asection
operator|*
name|section
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|ecoff_set_alignment_hook
define|\
value|((void (*) PARAMS ((bfd *, asection *, PTR))) bfd_void)
end_define

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_set_arch_mach_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|PTR
name|filehdr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|long
name|ecoff_sec_to_styp_flags
name|PARAMS
argument_list|(
operator|(
name|CONST
name|char
operator|*
name|name
operator|,
name|flagword
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|flagword
name|ecoff_styp_to_sec_flags
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|,
name|PTR
name|hdr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|ecoff_slurp_symbol_table
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
name|abfd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

