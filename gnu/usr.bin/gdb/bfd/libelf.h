begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* BFD back-end data structures for ELF files.    Copyright (C) 1992, 1993 Free Software Foundation, Inc.    Written by Cygnus Support.  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBELF_H_
end_ifndef

begin_define
define|#
directive|define
name|_LIBELF_H_
value|1
end_define

begin_include
include|#
directive|include
file|"elf/common.h"
end_include

begin_include
include|#
directive|include
file|"elf/internal.h"
end_include

begin_include
include|#
directive|include
file|"elf/external.h"
end_include

begin_comment
comment|/* If size isn't specified as 64 or 32, NAME macro should fail.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NAME
end_ifndef

begin_if
if|#
directive|if
name|ARCH_SIZE
operator|==
literal|64
end_if

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|CAT4(x,64,_,y)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|ARCH_SIZE
operator|==
literal|32
end_if

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|CAT4(x,32,_,y)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|NAME
end_ifndef

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|CAT4(x,NOSIZE,_,y)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ElfNAME
parameter_list|(
name|X
parameter_list|)
value|NAME(Elf,X)
end_define

begin_define
define|#
directive|define
name|elfNAME
parameter_list|(
name|X
parameter_list|)
value|NAME(elf,X)
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|asymbol
name|symbol
decl_stmt|;
name|Elf_Internal_Sym
name|internal_elf_sym
decl_stmt|;
union|union
block|{
name|unsigned
name|int
name|hppa_arg_reloc
decl_stmt|;
name|PTR
name|any
decl_stmt|;
block|}
name|tc_data
union|;
block|}
name|elf_symbol_type
typedef|;
end_typedef

begin_struct
struct|struct
name|elf_backend_data
block|{
name|int
name|use_rela_p
decl_stmt|;
name|int
name|elf_64_p
decl_stmt|;
name|enum
name|bfd_architecture
name|arch
decl_stmt|;
name|void
argument_list|(
argument|*elf_info_to_howto
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|arelent
operator|*
operator|,
name|Elf_Internal_Rela
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*elf_info_to_howto_rel
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|arelent
operator|*
operator|,
name|Elf_Internal_Rel
operator|*
operator|)
argument_list|)
expr_stmt|;
name|bfd_vma
name|maxpagesize
decl_stmt|;
name|void
argument_list|(
argument|*write_relocs
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|,
name|PTR
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*elf_backend_symbol_processing
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|)
argument_list|)
expr_stmt|;
name|boolean
argument_list|(
argument|*elf_backend_symbol_table_processing
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|elf_symbol_type
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|boolean
argument_list|(
argument|*elf_backend_section_processing
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|Elf32_Internal_Shdr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|boolean
argument_list|(
argument|*elf_backend_section_from_shdr
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|Elf32_Internal_Shdr
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|boolean
argument_list|(
argument|*elf_backend_fake_sections
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|Elf32_Internal_Shdr
operator|*
operator|,
name|asection
operator|*
operator|)
argument_list|)
expr_stmt|;
name|boolean
argument_list|(
argument|*elf_backend_section_from_bfd_section
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|Elf32_Internal_Shdr
operator|*
operator|,
name|asection
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|elf_sym_extra
block|{
name|int
name|elf_sym_num
decl_stmt|;
comment|/* sym# after locals/globals are reordered */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|elf_sym_extra
name|Elf_Sym_Extra
typedef|;
end_typedef

begin_struct
struct|struct
name|bfd_elf_arch_map
block|{
name|enum
name|bfd_architecture
name|bfd_arch
decl_stmt|;
name|int
name|elf_arch
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|bfd_elf_arch_map
name|bfd_elf_arch_map
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|int
name|bfd_elf_arch_map_size
decl_stmt|;
end_decl_stmt

begin_struct
struct|struct
name|bfd_elf_section_data
block|{
name|Elf_Internal_Shdr
name|this_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|rel_hdr
decl_stmt|;
name|int
name|this_idx
decl_stmt|,
name|rel_idx
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|elf_section_data
parameter_list|(
name|sec
parameter_list|)
value|((struct bfd_elf_section_data*)sec->used_by_bfd)
end_define

begin_define
define|#
directive|define
name|shdr_name
parameter_list|(
name|abfd
parameter_list|,
name|shdr
parameter_list|)
value|(elf_shstrtab (abfd)->tab + (shdr)->sh_name)
end_define

begin_define
define|#
directive|define
name|get_elf_backend_data
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((struct elf_backend_data *) (abfd)->xvec->backend_data)
end_define

begin_struct
struct|struct
name|strtab
block|{
name|char
modifier|*
name|tab
decl_stmt|;
name|int
name|nentries
decl_stmt|;
name|int
name|length
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Some private data is stashed away for future use using the tdata pointer    in the bfd structure.  */
end_comment

begin_struct
struct|struct
name|elf_obj_tdata
block|{
name|Elf_Internal_Ehdr
name|elf_header
index|[
literal|1
index|]
decl_stmt|;
comment|/* Actual data, but ref like ptr */
name|Elf_Internal_Shdr
modifier|*
modifier|*
name|elf_sect_ptr
decl_stmt|;
name|Elf_Internal_Phdr
modifier|*
name|phdr
decl_stmt|;
name|struct
name|strtab
modifier|*
name|strtab_ptr
decl_stmt|;
name|int
name|num_locals
decl_stmt|;
name|int
name|num_globals
decl_stmt|;
name|Elf_Internal_Sym
modifier|*
name|internal_syms
decl_stmt|;
name|elf_symbol_type
modifier|*
name|symbols
decl_stmt|;
comment|/* elf_symbol_type */
name|Elf_Sym_Extra
modifier|*
name|sym_extra
decl_stmt|;
name|asymbol
modifier|*
modifier|*
name|section_syms
decl_stmt|;
comment|/* STT_SECTION symbols for each section */
name|int
name|num_section_syms
decl_stmt|;
comment|/* number of section_syms allocated */
name|Elf_Internal_Shdr
name|symtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|shstrtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|strtab_hdr
decl_stmt|;
name|int
name|symtab_section
decl_stmt|,
name|shstrtab_section
decl_stmt|,
name|strtab_section
decl_stmt|;
name|file_ptr
name|next_file_pos
decl_stmt|;
name|void
modifier|*
name|prstatus
decl_stmt|;
comment|/* The raw /proc prstatus structure */
name|void
modifier|*
name|prpsinfo
decl_stmt|;
comment|/* The raw /proc prpsinfo structure */
name|bfd_vma
name|gp
decl_stmt|;
comment|/* The gp value (MIPS only, for now) */
name|int
name|gp_size
decl_stmt|;
comment|/* The gp size (MIPS only, for now) */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|elf_tdata
parameter_list|(
name|bfd
parameter_list|)
value|((bfd) -> tdata.elf_obj_data)
end_define

begin_define
define|#
directive|define
name|elf_elfheader
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> elf_header)
end_define

begin_define
define|#
directive|define
name|elf_elfsections
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> elf_sect_ptr)
end_define

begin_define
define|#
directive|define
name|elf_shstrtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> strtab_ptr)
end_define

begin_define
define|#
directive|define
name|elf_onesymtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> symtab_section)
end_define

begin_define
define|#
directive|define
name|elf_num_locals
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_locals)
end_define

begin_define
define|#
directive|define
name|elf_num_globals
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_globals)
end_define

begin_define
define|#
directive|define
name|elf_sym_extra
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> sym_extra)
end_define

begin_define
define|#
directive|define
name|elf_section_syms
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> section_syms)
end_define

begin_define
define|#
directive|define
name|elf_num_section_syms
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_section_syms)
end_define

begin_define
define|#
directive|define
name|core_prpsinfo
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> prpsinfo)
end_define

begin_define
define|#
directive|define
name|core_prstatus
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> prstatus)
end_define

begin_define
define|#
directive|define
name|obj_symbols
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> symbols)
end_define

begin_define
define|#
directive|define
name|obj_internal_syms
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> internal_syms)
end_define

begin_define
define|#
directive|define
name|elf_gp
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> gp)
end_define

begin_define
define|#
directive|define
name|elf_gp_size
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> gp_size)
end_define

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|elf_string_from_elf_section
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|unsigned
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|elf_get_str_section
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|bfd_elf32_mkobject
value|bfd_elf_mkobject
end_define

begin_define
define|#
directive|define
name|bfd_elf64_mkobject
value|bfd_elf_mkobject
end_define

begin_define
define|#
directive|define
name|elf_mkobject
value|bfd_elf_mkobject
end_define

begin_decl_stmt
specifier|extern
name|unsigned
name|long
name|bfd_elf_hash
name|PARAMS
argument_list|(
operator|(
name|CONST
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_reloc_status_type
name|bfd_elf_generic_reloc
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|arelent
operator|*
operator|,
name|asymbol
operator|*
operator|,
name|PTR
operator|,
name|asection
operator|*
operator|,
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf_mkobject
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|Elf_Internal_Shdr
modifier|*
name|bfd_elf_find_section
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_write_object_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_write_object_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_target
modifier|*
name|bfd_elf32_object_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_target
modifier|*
name|bfd_elf32_core_file_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|bfd_elf32_core_file_failing_command
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_elf32_core_file_failing_signal
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_core_file_matches_executable_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_set_section_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|,
name|PTR
operator|,
name|file_ptr
operator|,
name|bfd_size_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf32_get_symtab_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf32_get_symtab
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf32_get_reloc_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf32_canonicalize_reloc
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|,
name|arelent
operator|*
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|asymbol
modifier|*
name|bfd_elf32_make_empty_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf32_print_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|asymbol
operator|*
operator|,
name|bfd_print_symbol_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf32_get_symbol_info
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|,
name|symbol_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|alent
modifier|*
name|bfd_elf32_get_lineno
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_set_arch_mach
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
expr|enum
name|bfd_architecture
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_find_nearest_line
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|,
name|bfd_vma
operator|,
name|CONST
name|char
operator|*
operator|*
operator|,
name|CONST
name|char
operator|*
operator|*
operator|,
name|unsigned
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_elf32_sizeof_headers
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|boolean
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf32__write_relocs
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf32_new_section_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* If the target doesn't have reloc handling written yet:  */
end_comment

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf32_no_info_to_howto
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|arelent
operator|*
operator|,
name|Elf32_Internal_Rela
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_target
modifier|*
name|bfd_elf64_object_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bfd_target
modifier|*
name|bfd_elf64_core_file_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|bfd_elf64_core_file_failing_command
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_elf64_core_file_failing_signal
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_core_file_matches_executable_p
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_set_section_contents
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|,
name|PTR
operator|,
name|file_ptr
operator|,
name|bfd_size_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf64_get_symtab_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf64_get_symtab
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf64_get_reloc_upper_bound
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|int
name|bfd_elf64_canonicalize_reloc
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|sec_ptr
operator|,
name|arelent
operator|*
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|asymbol
modifier|*
name|bfd_elf64_make_empty_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf64_print_symbol
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|asymbol
operator|*
operator|,
name|bfd_print_symbol_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf64_get_symbol_info
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|,
name|symbol_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|alent
modifier|*
name|bfd_elf64_get_lineno
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asymbol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_set_arch_mach
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
expr|enum
name|bfd_architecture
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_find_nearest_line
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|,
name|asymbol
operator|*
operator|*
operator|,
name|bfd_vma
operator|,
name|CONST
name|char
operator|*
operator|*
operator|,
name|CONST
name|char
operator|*
operator|*
operator|,
name|unsigned
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|bfd_elf64_sizeof_headers
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|boolean
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf64__write_relocs
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|boolean
name|bfd_elf64_new_section_hook
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|asection
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* If the target doesn't have reloc handling written yet:  */
end_comment

begin_decl_stmt
specifier|extern
name|void
name|bfd_elf64_no_info_to_howto
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|arelent
operator|*
operator|,
name|Elf64_Internal_Rela
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBELF_H_ */
end_comment

end_unit

