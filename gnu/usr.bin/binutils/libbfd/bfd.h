begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_comment
comment|/* DO NOT EDIT!  -*- buffer-read-only: t -*-  This file is automatically     generated from "bfd-in.h", "init.c", "opncls.c", "libbfd.c",     "bfdio.c", "bfdwin.c", "section.c", "archures.c", "reloc.c",     "syms.c", "bfd.c", "archive.c", "corefile.c", "targets.c", "format.c",     "linker.c" and "simple.c".    Run "make headers" in your build bfd/ to regenerate.  */
end_comment

begin_comment
comment|/* Main header file for the bfd library -- portable access to object files.     Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,    1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.     Contributed by Cygnus Support.     This file is part of BFD, the Binary File Descriptor library.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__BFD_H_SEEN__
end_ifndef

begin_define
define|#
directive|define
name|__BFD_H_SEEN__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|"ansidecl.h"
include|#
directive|include
file|"symcat.h"
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|HAVE_STRINGIZE
argument_list|)
ifndef|#
directive|ifndef
name|SABER
comment|/* This hack is to avoid a problem with some strict ANSI C preprocessors.    The problem is, "32_" is not a valid preprocessing token, and we don't    want extra underscores (e.g., "nlm_32_").  The XCONCAT2 macro will    cause the inner CONCAT2 macros to be evaluated first, producing    still-valid pp-tokens.  Then the final concatenation can be done.  */
undef|#
directive|undef
name|CONCAT4
define|#
directive|define
name|CONCAT4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|XCONCAT2(CONCAT2(a,b),CONCAT2(c,d))
endif|#
directive|endif
endif|#
directive|endif
comment|/* The word size used by BFD on the host.  This may be 64 with a 32    bit target if the host is 64 bit, or if other 64 bit targets have    been selected with --enable-targets, or if --enable-64-bit-bfd.  */
define|#
directive|define
name|BFD_ARCH_SIZE
value|64
if|#
directive|if
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__powerpc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__arm__
argument_list|)
define|#
directive|define
name|BFD_HOST_64BIT_LONG
value|0
define|#
directive|define
name|BFD_HOST_64_BIT
value|long long
define|#
directive|define
name|BFD_HOST_U_64_BIT
value|unsigned long long
elif|#
directive|elif
name|defined
argument_list|(
name|__alpha__
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__ia64__
argument_list|)
define|#
directive|define
name|BFD_HOST_64BIT_LONG
value|1
define|#
directive|define
name|BFD_HOST_64_BIT
value|long
define|#
directive|define
name|BFD_HOST_U_64_BIT
value|unsigned long
else|#
directive|else
error|#
directive|error
error|Unsupported architecture/platform.
endif|#
directive|endif
comment|/* 64-bit host */
define|#
directive|define
name|BFD_HOST_LONG_LONG
value|1
typedef|typedef
name|BFD_HOST_64_BIT
name|bfd_int64_t
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_uint64_t
typedef|;
if|#
directive|if
name|BFD_ARCH_SIZE
operator|>=
literal|64
define|#
directive|define
name|BFD64
endif|#
directive|endif
ifndef|#
directive|ifndef
name|INLINE
if|#
directive|if
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|INLINE
value|__inline__
else|#
directive|else
define|#
directive|define
name|INLINE
endif|#
directive|endif
endif|#
directive|endif
comment|/* Forward declaration.  */
typedef|typedef
name|struct
name|bfd
name|bfd
typedef|;
comment|/* Boolean type used in bfd.  Too many systems define their own    versions of "boolean" for us to safely typedef a "boolean" of    our own.  Using an enum for "bfd_boolean" has its own set of    problems, with strange looking casts required to avoid warnings    on some older compilers.  Thus we just use an int.     General rule: Functions which are bfd_boolean return TRUE on    success and FALSE on failure (unless they're a predicate).  */
typedef|typedef
name|int
name|bfd_boolean
typedef|;
undef|#
directive|undef
name|FALSE
undef|#
directive|undef
name|TRUE
define|#
directive|define
name|FALSE
value|0
define|#
directive|define
name|TRUE
value|1
if|#
directive|if
literal|0
comment|/* Poison.  */
undef|#
directive|undef
name|false
undef|#
directive|undef
name|true
define|#
directive|define
name|false
value|dont_use_false_in_bfd
define|#
directive|define
name|true
value|dont_use_true_in_bfd
endif|#
directive|endif
ifdef|#
directive|ifdef
name|BFD64
ifndef|#
directive|ifndef
name|BFD_HOST_64_BIT
error|#
directive|error
error|No 64 bit integer type available
endif|#
directive|endif
comment|/* ! defined (BFD_HOST_64_BIT) */
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_vma
typedef|;
typedef|typedef
name|BFD_HOST_64_BIT
name|bfd_signed_vma
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_size_type
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|symvalue
typedef|;
ifndef|#
directive|ifndef
name|fprintf_vma
if|#
directive|if
name|BFD_HOST_64BIT_LONG
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|sprintf (s, "%016lx", x)
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|f
parameter_list|,
name|x
parameter_list|)
value|fprintf (f, "%016lx", x)
else|#
directive|else
define|#
directive|define
name|_bfd_int64_low
parameter_list|(
name|x
parameter_list|)
value|((unsigned long) (((x)& 0xffffffff)))
define|#
directive|define
name|_bfd_int64_high
parameter_list|(
name|x
parameter_list|)
value|((unsigned long) (((x)>> 32)& 0xffffffff))
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
define|\
value|fprintf ((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
define|\
value|sprintf ((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))
endif|#
directive|endif
endif|#
directive|endif
else|#
directive|else
comment|/* not BFD64  */
comment|/* Represent a target address.  Also used as a generic unsigned type    which is guaranteed to be big enough to hold any arithmetic types    we need to deal with.  */
typedef|typedef
name|unsigned
name|long
name|bfd_vma
typedef|;
comment|/* A generic signed type which is guaranteed to be big enough to hold any    arithmetic types we need to deal with.  Can be assumed to be compatible    with bfd_vma in the same way that signed and unsigned ints are compatible    (as parameters, in assignment, etc).  */
typedef|typedef
name|long
name|bfd_signed_vma
typedef|;
typedef|typedef
name|unsigned
name|long
name|symvalue
typedef|;
typedef|typedef
name|unsigned
name|long
name|bfd_size_type
typedef|;
comment|/* Print a bfd_vma x on stream s.  */
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|fprintf (s, "%08lx", x)
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|sprintf (s, "%08lx", x)
endif|#
directive|endif
comment|/* not BFD64  */
ifndef|#
directive|ifndef
name|BFD_HOST_64_BIT
comment|/* Fall back on a 32 bit type.  The idea is to make these types always    available for function return types, but in the case that    BFD_HOST_64_BIT is undefined such a function should abort or    otherwise signal an error.  */
typedef|typedef
name|bfd_signed_vma
name|bfd_int64_t
typedef|;
typedef|typedef
name|bfd_vma
name|bfd_uint64_t
typedef|;
endif|#
directive|endif
comment|/* An offset into a file.  BFD always uses the largest possible offset    based on the build time availability of fseek, fseeko, or fseeko64.  */
typedef|typedef
name|BFD_HOST_64_BIT
name|file_ptr
typedef|;
typedef|typedef
name|unsigned
name|BFD_HOST_64_BIT
name|ufile_ptr
typedef|;
specifier|extern
name|void
name|bfd_sprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_fprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
define|#
directive|define
name|printf_vma
parameter_list|(
name|x
parameter_list|)
value|fprintf_vma(stdout,x)
define|#
directive|define
name|bfd_printf_vma
parameter_list|(
name|abfd
parameter_list|,
name|x
parameter_list|)
value|bfd_fprintf_vma (abfd,stdout,x)
typedef|typedef
name|unsigned
name|int
name|flagword
typedef|;
comment|/* 32 bits of flags */
typedef|typedef
name|unsigned
name|char
name|bfd_byte
typedef|;
comment|/* File formats.  */
typedef|typedef
enum|enum
name|bfd_format
block|{
name|bfd_unknown
init|=
literal|0
block|,
comment|/* File format is unknown.  */
name|bfd_object
block|,
comment|/* Linker/assembler/compiler output.  */
name|bfd_archive
block|,
comment|/* Object archive file.  */
name|bfd_core
block|,
comment|/* Core dump.  */
name|bfd_type_end
comment|/* Marks the end; don't use it!  */
block|}
name|bfd_format
typedef|;
comment|/* Values that may appear in the flags field of a BFD.  These also    appear in the object_flags field of the bfd_target structure, where    they indicate the set of flags used by that backend (not all flags    are meaningful for all object file formats) (FIXME: at the moment,    the object_flags values have mostly just been copied from backend    to another, and are not necessarily correct).  */
comment|/* No flags.  */
define|#
directive|define
name|BFD_NO_FLAGS
value|0x00
comment|/* BFD contains relocation entries.  */
define|#
directive|define
name|HAS_RELOC
value|0x01
comment|/* BFD is directly executable.  */
define|#
directive|define
name|EXEC_P
value|0x02
comment|/* BFD has line number information (basically used for F_LNNO in a    COFF header).  */
define|#
directive|define
name|HAS_LINENO
value|0x04
comment|/* BFD has debugging information.  */
define|#
directive|define
name|HAS_DEBUG
value|0x08
comment|/* BFD has symbols.  */
define|#
directive|define
name|HAS_SYMS
value|0x10
comment|/* BFD has local symbols (basically used for F_LSYMS in a COFF    header).  */
define|#
directive|define
name|HAS_LOCALS
value|0x20
comment|/* BFD is a dynamic object.  */
define|#
directive|define
name|DYNAMIC
value|0x40
comment|/* Text section is write protected (if D_PAGED is not set, this is    like an a.out NMAGIC file) (the linker sets this by default, but    clears it for -r or -N).  */
define|#
directive|define
name|WP_TEXT
value|0x80
comment|/* BFD is dynamically paged (this is like an a.out ZMAGIC file) (the    linker sets this by default, but clears it for -r or -n or -N).  */
define|#
directive|define
name|D_PAGED
value|0x100
comment|/* BFD is relaxable (this means that bfd_relax_section may be able to    do something) (sometimes bfd_relax_section can do something even if    this is not set).  */
define|#
directive|define
name|BFD_IS_RELAXABLE
value|0x200
comment|/* This may be set before writing out a BFD to request using a    traditional format.  For example, this is used to request that when    writing out an a.out object the symbols not be hashed to eliminate    duplicates.  */
define|#
directive|define
name|BFD_TRADITIONAL_FORMAT
value|0x400
comment|/* This flag indicates that the BFD contents are actually cached in    memory.  If this is set, iostream points to a bfd_in_memory struct.  */
define|#
directive|define
name|BFD_IN_MEMORY
value|0x800
comment|/* The sections in this BFD specify a memory page.  */
define|#
directive|define
name|HAS_LOAD_PAGE
value|0x1000
comment|/* Symbols and relocation.  */
comment|/* A count of carsyms (canonical archive symbols).  */
typedef|typedef
name|unsigned
name|long
name|symindex
typedef|;
comment|/* How to perform a relocation.  */
typedef|typedef
specifier|const
name|struct
name|reloc_howto_struct
name|reloc_howto_type
typedef|;
define|#
directive|define
name|BFD_NO_MORE_SYMBOLS
value|((symindex) ~0)
comment|/* General purpose part of a symbol X;    target specific parts are in libcoff.h, libaout.h, etc.  */
define|#
directive|define
name|bfd_get_section
parameter_list|(
name|x
parameter_list|)
value|((x)->section)
define|#
directive|define
name|bfd_get_output_section
parameter_list|(
name|x
parameter_list|)
value|((x)->section->output_section)
define|#
directive|define
name|bfd_set_section
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x)->section) = (y)
define|#
directive|define
name|bfd_asymbol_base
parameter_list|(
name|x
parameter_list|)
value|((x)->section->vma)
define|#
directive|define
name|bfd_asymbol_value
parameter_list|(
name|x
parameter_list|)
value|(bfd_asymbol_base(x) + (x)->value)
define|#
directive|define
name|bfd_asymbol_name
parameter_list|(
name|x
parameter_list|)
value|((x)->name)
comment|/*Perhaps future: #define bfd_asymbol_bfd(x) ((x)->section->owner)*/
define|#
directive|define
name|bfd_asymbol_bfd
parameter_list|(
name|x
parameter_list|)
value|((x)->the_bfd)
define|#
directive|define
name|bfd_asymbol_flavour
parameter_list|(
name|x
parameter_list|)
value|(bfd_asymbol_bfd(x)->xvec->flavour)
comment|/* A canonical archive symbol.  */
comment|/* This is a type pun with struct ranlib on purpose!  */
typedef|typedef
struct|struct
name|carsym
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|file_ptr
name|file_offset
decl_stmt|;
comment|/* Look here to find the file.  */
block|}
name|carsym
typedef|;
comment|/* To make these you call a carsymogen.  */
comment|/* Used in generating armaps (archive tables of contents).    Perhaps just a forward definition would do?  */
struct|struct
name|orl
comment|/* Output ranlib.  */
block|{
name|char
modifier|*
modifier|*
name|name
decl_stmt|;
comment|/* Symbol name.  */
union|union
block|{
name|file_ptr
name|pos
decl_stmt|;
name|bfd
modifier|*
name|abfd
decl_stmt|;
block|}
name|u
union|;
comment|/* bfd* or file position.  */
name|int
name|namidx
decl_stmt|;
comment|/* Index into string table.  */
block|}
struct|;
comment|/* Linenumber stuff.  */
typedef|typedef
struct|struct
name|lineno_cache_entry
block|{
name|unsigned
name|int
name|line_number
decl_stmt|;
comment|/* Linenumber from start of function.  */
union|union
block|{
name|struct
name|bfd_symbol
modifier|*
name|sym
decl_stmt|;
comment|/* Function name.  */
name|bfd_vma
name|offset
decl_stmt|;
comment|/* Offset into section.  */
block|}
name|u
union|;
block|}
name|alent
typedef|;
comment|/* Object and core file sections.  */
define|#
directive|define
name|align_power
parameter_list|(
name|addr
parameter_list|,
name|align
parameter_list|)
define|\
value|(((addr) + ((bfd_vma) 1<< (align)) - 1)& ((bfd_vma) -1<< (align)))
typedef|typedef
name|struct
name|bfd_section
modifier|*
name|sec_ptr
typedef|;
define|#
directive|define
name|bfd_get_section_name
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->name + 0)
define|#
directive|define
name|bfd_get_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->vma + 0)
define|#
directive|define
name|bfd_get_section_lma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->lma + 0)
define|#
directive|define
name|bfd_get_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->alignment_power + 0)
define|#
directive|define
name|bfd_section_name
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->name)
define|#
directive|define
name|bfd_section_size
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|(bfd_get_section_size_before_reloc(ptr))
define|#
directive|define
name|bfd_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->vma)
define|#
directive|define
name|bfd_section_lma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->lma)
define|#
directive|define
name|bfd_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->alignment_power)
define|#
directive|define
name|bfd_get_section_flags
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->flags + 0)
define|#
directive|define
name|bfd_get_section_userdata
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->userdata)
define|#
directive|define
name|bfd_is_com_section
parameter_list|(
name|ptr
parameter_list|)
value|(((ptr)->flags& SEC_IS_COMMON) != 0)
define|#
directive|define
name|bfd_set_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->vma = (ptr)->lma = (val)), ((ptr)->user_set_vma = TRUE), TRUE)
define|#
directive|define
name|bfd_set_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->alignment_power = (val)),TRUE)
define|#
directive|define
name|bfd_set_section_userdata
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->userdata = (val)),TRUE)
typedef|typedef
name|struct
name|stat
name|stat_type
typedef|;
typedef|typedef
enum|enum
name|bfd_print_symbol
block|{
name|bfd_print_symbol_name
block|,
name|bfd_print_symbol_more
block|,
name|bfd_print_symbol_all
block|}
name|bfd_print_symbol_type
typedef|;
comment|/* Information about a symbol that nm needs.  */
typedef|typedef
struct|struct
name|_symbol_info
block|{
name|symvalue
name|value
decl_stmt|;
name|char
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Symbol name.  */
name|unsigned
name|char
name|stab_type
decl_stmt|;
comment|/* Stab type.  */
name|char
name|stab_other
decl_stmt|;
comment|/* Stab other.  */
name|short
name|stab_desc
decl_stmt|;
comment|/* Stab desc.  */
specifier|const
name|char
modifier|*
name|stab_name
decl_stmt|;
comment|/* String for stab type.  */
block|}
name|symbol_info
typedef|;
comment|/* Get the name of a stabs type code.  */
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_get_stab_name
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Hash table routines.  There is no way to free up a hash table.  */
comment|/* An element in the hash table.  Most uses will actually use a larger    structure, and an instance of this will be the first field.  */
struct|struct
name|bfd_hash_entry
block|{
comment|/* Next entry for this hash code.  */
name|struct
name|bfd_hash_entry
modifier|*
name|next
decl_stmt|;
comment|/* String being hashed.  */
specifier|const
name|char
modifier|*
name|string
decl_stmt|;
comment|/* Hash code.  This is the full hash code, not the index into the      table.  */
name|unsigned
name|long
name|hash
decl_stmt|;
block|}
struct|;
comment|/* A hash table.  */
struct|struct
name|bfd_hash_table
block|{
comment|/* The hash array.  */
name|struct
name|bfd_hash_entry
modifier|*
modifier|*
name|table
decl_stmt|;
comment|/* The number of slots in the hash table.  */
name|unsigned
name|int
name|size
decl_stmt|;
comment|/* A function used to create new elements in the hash table.  The      first entry is itself a pointer to an element.  When this      function is first invoked, this pointer will be NULL.  However,      having the pointer permits a hierarchy of method functions to be      built each of which calls the function in the superclass.  Thus      each function should be written to allocate a new block of memory      only if the argument is NULL.  */
name|struct
name|bfd_hash_entry
modifier|*
function_decl|(
modifier|*
name|newfunc
function_decl|)
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* An objalloc for this hash table.  This is a struct objalloc *,      but we use void * to avoid requiring the inclusion of objalloc.h.  */
name|void
modifier|*
name|memory
decl_stmt|;
block|}
struct|;
comment|/* Initialize a hash table.  */
specifier|extern
name|bfd_boolean
name|bfd_hash_table_init
argument_list|(
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
expr|struct
name|bfd_hash_entry
operator|*
call|(
modifier|*
call|)
argument_list|(
expr|struct
name|bfd_hash_entry
operator|*
argument_list|,
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Initialize a hash table specifying a size.  */
specifier|extern
name|bfd_boolean
name|bfd_hash_table_init_n
argument_list|(
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
expr|struct
name|bfd_hash_entry
operator|*
call|(
modifier|*
call|)
argument_list|(
expr|struct
name|bfd_hash_entry
operator|*
argument_list|,
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
argument_list|,
name|unsigned
name|int
name|size
argument_list|)
decl_stmt|;
comment|/* Free up a hash table.  */
specifier|extern
name|void
name|bfd_hash_table_free
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|)
function_decl|;
comment|/* Look up a string in a hash table.  If CREATE is TRUE, a new entry    will be created for this string if one does not already exist.  The    COPY argument must be TRUE if this routine should copy the string    into newly allocated memory when adding an entry.  */
specifier|extern
name|struct
name|bfd_hash_entry
modifier|*
name|bfd_hash_lookup
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
name|create
parameter_list|,
name|bfd_boolean
name|copy
parameter_list|)
function_decl|;
comment|/* Replace an entry in a hash table.  */
specifier|extern
name|void
name|bfd_hash_replace
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|struct
name|bfd_hash_entry
modifier|*
name|old
parameter_list|,
name|struct
name|bfd_hash_entry
modifier|*
name|nw
parameter_list|)
function_decl|;
comment|/* Base method for creating a hash table entry.  */
specifier|extern
name|struct
name|bfd_hash_entry
modifier|*
name|bfd_hash_newfunc
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Grab some space for a hash table entry.  */
specifier|extern
name|void
modifier|*
name|bfd_hash_allocate
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
comment|/* Traverse a hash table in a random order, calling a function on each    element.  If the function returns FALSE, the traversal stops.  The    INFO argument is passed to the function.  */
specifier|extern
name|void
name|bfd_hash_traverse
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|info
parameter_list|)
function_decl|;
define|#
directive|define
name|COFF_SWAP_TABLE
value|(void *)&bfd_coff_std_swap_table
comment|/* User program access to BFD facilities.  */
comment|/* Direct I/O routines, for programs which know more about the object    file than BFD does.  Use higher level routines if possible.  */
specifier|extern
name|bfd_size_type
name|bfd_bread
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_size_type
name|bfd_bwrite
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_seek
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|file_ptr
name|bfd_tell
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_flush
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_stat
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|)
function_decl|;
comment|/* Deprecated old routines.  */
if|#
directive|if
name|__GNUC__
define|#
directive|define
name|bfd_read
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_read", __FILE__, __LINE__, __FUNCTION__),	\    bfd_bread ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
define|#
directive|define
name|bfd_write
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_write", __FILE__, __LINE__, __FUNCTION__),	\    bfd_bwrite ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
else|#
directive|else
define|#
directive|define
name|bfd_read
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_read", (const char *) 0, 0, (const char *) 0), \    bfd_bread ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
define|#
directive|define
name|bfd_write
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_write", (const char *) 0, 0, (const char *) 0),\    bfd_bwrite ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
endif|#
directive|endif
specifier|extern
name|void
name|warn_deprecated
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Cast from const char * to char * so that caller can assign to    a char * without a warning.  */
define|#
directive|define
name|bfd_get_filename
parameter_list|(
name|abfd
parameter_list|)
value|((char *) (abfd)->filename)
define|#
directive|define
name|bfd_get_cacheable
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->cacheable)
define|#
directive|define
name|bfd_get_format
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->format)
define|#
directive|define
name|bfd_get_target
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->name)
define|#
directive|define
name|bfd_get_flavour
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->flavour)
define|#
directive|define
name|bfd_family_coff
parameter_list|(
name|abfd
parameter_list|)
define|\
value|(bfd_get_flavour (abfd) == bfd_target_coff_flavour || \    bfd_get_flavour (abfd) == bfd_target_xcoff_flavour)
define|#
directive|define
name|bfd_big_endian
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->byteorder == BFD_ENDIAN_BIG)
define|#
directive|define
name|bfd_little_endian
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->byteorder == BFD_ENDIAN_LITTLE)
define|#
directive|define
name|bfd_header_big_endian
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((abfd)->xvec->header_byteorder == BFD_ENDIAN_BIG)
define|#
directive|define
name|bfd_header_little_endian
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((abfd)->xvec->header_byteorder == BFD_ENDIAN_LITTLE)
define|#
directive|define
name|bfd_get_file_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->flags)
define|#
directive|define
name|bfd_applicable_file_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->object_flags)
define|#
directive|define
name|bfd_applicable_section_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->section_flags)
define|#
directive|define
name|bfd_my_archive
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->my_archive)
define|#
directive|define
name|bfd_has_map
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->has_armap)
define|#
directive|define
name|bfd_valid_reloc_types
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->valid_reloc_types)
define|#
directive|define
name|bfd_usrdata
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->usrdata)
define|#
directive|define
name|bfd_get_start_address
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->start_address)
define|#
directive|define
name|bfd_get_symcount
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->symcount)
define|#
directive|define
name|bfd_get_outsymbols
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->outsymbols)
define|#
directive|define
name|bfd_count_sections
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->section_count)
define|#
directive|define
name|bfd_get_dynamic_symcount
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->dynsymcount)
define|#
directive|define
name|bfd_get_symbol_leading_char
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->symbol_leading_char)
define|#
directive|define
name|bfd_set_cacheable
parameter_list|(
name|abfd
parameter_list|,
name|bool
parameter_list|)
value|(((abfd)->cacheable = bool), TRUE)
specifier|extern
name|bfd_boolean
name|bfd_cache_close
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
comment|/* NB: This declaration should match the autogenerated one in libbfd.h.  */
specifier|extern
name|bfd_boolean
name|bfd_record_phdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|bfd_boolean
parameter_list|,
name|flagword
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_vma
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_boolean
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Byte swapping routines.  */
name|bfd_uint64_t
name|bfd_getb64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_uint64_t
name|bfd_getl64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
name|bfd_getb_signed_64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
name|bfd_getl_signed_64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getb32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getl32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getb_signed_32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getl_signed_32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getb16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getl16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getb_signed_16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getl_signed_16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb64
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl64
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb32
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl32
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb16
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl16
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Byte swapping routines which take size and endiannes as arguments.  */
name|bfd_uint64_t
name|bfd_get_bits
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
name|void
name|bfd_put_bits
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* Externally visible ECOFF routines.  */
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
struct_decl|struct
name|ecoff_debug_info
struct_decl|;
struct_decl|struct
name|ecoff_debug_swap
struct_decl|;
struct_decl|struct
name|ecoff_extr
struct_decl|;
struct_decl|struct
name|bfd_symbol
struct_decl|;
struct_decl|struct
name|bfd_link_info
struct_decl|;
struct_decl|struct
name|bfd_link_hash_entry
struct_decl|;
struct_decl|struct
name|bfd_elf_version_tree
struct_decl|;
endif|#
directive|endif
specifier|extern
name|bfd_vma
name|bfd_ecoff_get_gp_value
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_set_gp_value
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_vma
name|gp_value
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_set_regmasks
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|unsigned
name|long
name|gprmask
parameter_list|,
name|unsigned
name|long
name|fprmask
parameter_list|,
name|unsigned
name|long
modifier|*
name|cprmask
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|bfd_ecoff_debug_init
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_ecoff_debug_free
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_accumulate
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|input_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|input_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_accumulate_other
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_externals
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|bfd_boolean
name|relocatable
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
name|get_extr
function_decl|)
parameter_list|(
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|struct
name|ecoff_extr
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|set_index
function_decl|)
parameter_list|(
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_one_external
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|ecoff_extr
modifier|*
name|esym
parameter_list|)
function_decl|;
specifier|extern
name|bfd_size_type
name|bfd_ecoff_debug_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_write_debug
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|file_ptr
name|where
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_write_accumulated_debug
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|file_ptr
name|where
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_mips_ecoff_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Externally visible ELF routines.  */
struct|struct
name|bfd_link_needed_list
block|{
name|struct
name|bfd_link_needed_list
modifier|*
name|next
decl_stmt|;
name|bfd
modifier|*
name|by
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
enum|enum
name|dynamic_lib_link_class
block|{
name|DYN_NORMAL
init|=
literal|0
block|,
name|DYN_AS_NEEDED
init|=
literal|1
block|,
name|DYN_DT_NEEDED
init|=
literal|2
block|}
enum|;
specifier|extern
name|bfd_boolean
name|bfd_elf_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_elf_get_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_get_bfd_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_needed_list
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_elf_version_tree
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf_set_dt_needed_name
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_elf_get_dt_soname
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf_set_dyn_lib_class
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_elf_get_runpath_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_discard_info
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Return an upper bound on the number of bytes required to store a    copy of ABFD's program header table entries.  Return -1 if an error    occurs; bfd_get_error will return an appropriate code.  */
specifier|extern
name|long
name|bfd_get_elf_phdr_upper_bound
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
comment|/* Copy ABFD's program header table entries to *PHDRS.  The entries    will be stored as an array of Elf_Internal_Phdr structures, as    defined in include/elf/internal.h.  To find out how large the    buffer needs to be, call bfd_get_elf_phdr_upper_bound.     Return the number of program header table entries read, or -1 if an    error occurs; bfd_get_error will return an appropriate code.  */
specifier|extern
name|int
name|bfd_get_elf_phdrs
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|void
modifier|*
name|phdrs
parameter_list|)
function_decl|;
comment|/* Create a new BFD as if by bfd_openr.  Rather than opening a file,    reconstruct an ELF file by reading the segments out of remote memory    based on the ELF file header at EHDR_VMA and the ELF program headers it    points to.  If not null, *LOADBASEP is filled in with the difference    between the VMAs from which the segments were read, and the VMAs the    file headers (and hence BFD's idea of each section's VMA) put them at.     The function TARGET_READ_MEMORY is called to copy LEN bytes from the    remote memory at target address VMA into the local buffer at MYADDR; it    should return zero on success or an `errno' code on failure.  TEMPL must    be a BFD for an ELF target with the word size and byte order found in    the remote memory.  */
specifier|extern
name|bfd
modifier|*
name|bfd_elf_bfd_from_remote_memory
parameter_list|(
name|bfd
modifier|*
name|templ
parameter_list|,
name|bfd_vma
name|ehdr_vma
parameter_list|,
name|bfd_vma
modifier|*
name|loadbasep
parameter_list|,
name|int
function_decl|(
modifier|*
name|target_read_memory
function_decl|)
parameter_list|(
name|bfd_vma
name|vma
parameter_list|,
name|char
modifier|*
name|myaddr
parameter_list|,
name|int
name|len
parameter_list|)
parameter_list|)
function_decl|;
comment|/* Return the arch_size field of an elf bfd, or -1 if not elf.  */
specifier|extern
name|int
name|bfd_get_arch_size
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Return TRUE if address "naturally" sign extends, or -1 if not elf.  */
specifier|extern
name|int
name|bfd_get_sign_extend_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_section
modifier|*
name|_bfd_elf_tls_setup
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68k_elf32_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_mips_elf32_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* SunOS shared library support routines for the linker.  */
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_sunos_get_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sunos_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sunos_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Linux shared library support routines for the linker.  */
specifier|extern
name|bfd_boolean
name|bfd_i386linux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68klinux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sparclinux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* mmap hacks */
struct_decl|struct
name|_bfd_window_internal
struct_decl|;
typedef|typedef
name|struct
name|_bfd_window_internal
name|bfd_window_internal
typedef|;
typedef|typedef
struct|struct
name|_bfd_window
block|{
comment|/* What the user asked for.  */
name|void
modifier|*
name|data
decl_stmt|;
name|bfd_size_type
name|size
decl_stmt|;
comment|/* The actual window used by BFD.  Small user-requested read-only      regions sharing a page may share a single window into the object      file.  Read-write versions shouldn't until I've fixed things to      keep track of which portions have been claimed by the      application; don't want to give the same region back when the      application wants two writable copies!  */
name|struct
name|_bfd_window_internal
modifier|*
name|i
decl_stmt|;
block|}
name|bfd_window
typedef|;
specifier|extern
name|void
name|bfd_init_window
parameter_list|(
name|bfd_window
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_free_window
parameter_list|(
name|bfd_window
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_get_file_window
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd_window
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* XCOFF support routines for the linker.  */
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_record_set
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_import_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_export_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_count_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|bfd_boolean
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_boolean
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_generate_rtinit
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* XCOFF support routines for ar.  */
specifier|extern
name|bfd_boolean
name|bfd_xcoff_ar_archive_set_magic
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Externally visible COFF routines.  */
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
struct_decl|struct
name|internal_syment
struct_decl|;
union_decl|union
name|internal_auxent
union_decl|;
endif|#
directive|endif
specifier|extern
name|bfd_boolean
name|bfd_coff_get_syment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|struct
name|internal_syment
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_coff_get_auxent
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|int
parameter_list|,
name|union
name|internal_auxent
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_coff_set_symbol_class
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68k_coff_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* PE ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* ELF ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_add_glue_sections_to_bfd
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* ARM Note section processing.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_merge_machines
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_update_notes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|int
name|bfd_arm_get_mach_from_notes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* TI COFF load page support.  */
specifier|extern
name|void
name|bfd_ticoff_set_section_load_page
parameter_list|(
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_ticoff_get_section_load_page
parameter_list|(
name|struct
name|bfd_section
modifier|*
parameter_list|)
function_decl|;
comment|/* H8/300 functions.  */
specifier|extern
name|bfd_vma
name|bfd_h8300_pad_address
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
comment|/* IA64 Itanium code generation.  Called from linker.  */
specifier|extern
name|void
name|bfd_elf32_ia64_after_parse
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf64_ia64_after_parse
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Extracted from init.c.  */
name|void
name|bfd_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* Extracted from opncls.c.  */
name|bfd
modifier|*
name|bfd_openr
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|)
function_decl|;
name|bfd
modifier|*
name|bfd_fdopenr
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|,
name|int
name|fd
parameter_list|)
function_decl|;
name|bfd
modifier|*
name|bfd_openstreamr
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd
modifier|*
name|bfd_openw
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|target
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_close
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_close_all_done
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|bfd
modifier|*
name|bfd_create
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|bfd
modifier|*
name|templ
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_make_writable
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_make_readable
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|unsigned
name|long
name|bfd_calc_gnu_debuglink_crc32
parameter_list|(
name|unsigned
name|long
name|crc
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|buf
parameter_list|,
name|bfd_size_type
name|len
parameter_list|)
function_decl|;
name|char
modifier|*
name|bfd_follow_gnu_debuglink
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|dir
parameter_list|)
function_decl|;
name|struct
name|bfd_section
modifier|*
name|bfd_create_gnu_debuglink_section
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_fill_in_gnu_debuglink_section
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_section
modifier|*
name|sect
parameter_list|,
specifier|const
name|char
modifier|*
name|filename
parameter_list|)
function_decl|;
comment|/* Extracted from libbfd.c.  */
comment|/* Byte swapping macros for user section data.  */
define|#
directive|define
name|bfd_put_8
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|((void) (*((unsigned char *) (ptr)) = (val)& 0xff))
define|#
directive|define
name|bfd_put_signed_8
define|\
value|bfd_put_8
define|#
directive|define
name|bfd_get_8
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|(*(unsigned char *) (ptr)& 0xff)
define|#
directive|define
name|bfd_get_signed_8
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|(((*(unsigned char *) (ptr)& 0xff) ^ 0x80) - 0x80)
define|#
directive|define
name|bfd_put_16
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_putx16, ((val),(ptr)))
define|#
directive|define
name|bfd_put_signed_16
define|\
value|bfd_put_16
define|#
directive|define
name|bfd_get_16
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx16, (ptr))
define|#
directive|define
name|bfd_get_signed_16
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx_signed_16, (ptr))
define|#
directive|define
name|bfd_put_32
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_putx32, ((val),(ptr)))
define|#
directive|define
name|bfd_put_signed_32
define|\
value|bfd_put_32
define|#
directive|define
name|bfd_get_32
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx32, (ptr))
define|#
directive|define
name|bfd_get_signed_32
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx_signed_32, (ptr))
define|#
directive|define
name|bfd_put_64
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_putx64, ((val), (ptr)))
define|#
directive|define
name|bfd_put_signed_64
define|\
value|bfd_put_64
define|#
directive|define
name|bfd_get_64
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx64, (ptr))
define|#
directive|define
name|bfd_get_signed_64
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_getx_signed_64, (ptr))
define|#
directive|define
name|bfd_get
parameter_list|(
name|bits
parameter_list|,
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|((bits) == 8 ? (bfd_vma) bfd_get_8 (abfd, ptr)       \    : (bits) == 16 ? bfd_get_16 (abfd, ptr)             \    : (bits) == 32 ? bfd_get_32 (abfd, ptr)             \    : (bits) == 64 ? bfd_get_64 (abfd, ptr)             \    : (abort (), (bfd_vma) - 1))
define|#
directive|define
name|bfd_put
parameter_list|(
name|bits
parameter_list|,
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|((bits) == 8 ? bfd_put_8  (abfd, val, ptr)           \    : (bits) == 16 ? bfd_put_16 (abfd, val, ptr)                \    : (bits) == 32 ? bfd_put_32 (abfd, val, ptr)                \    : (bits) == 64 ? bfd_put_64 (abfd, val, ptr)                \    : (abort (), (void) 0))
comment|/* Byte swapping macros for file header data.  */
define|#
directive|define
name|bfd_h_put_8
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|bfd_put_8 (abfd, val, ptr)
define|#
directive|define
name|bfd_h_put_signed_8
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|bfd_put_8 (abfd, val, ptr)
define|#
directive|define
name|bfd_h_get_8
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|bfd_get_8 (abfd, ptr)
define|#
directive|define
name|bfd_h_get_signed_8
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|bfd_get_signed_8 (abfd, ptr)
define|#
directive|define
name|bfd_h_put_16
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_putx16, (val, ptr))
define|#
directive|define
name|bfd_h_put_signed_16
define|\
value|bfd_h_put_16
define|#
directive|define
name|bfd_h_get_16
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx16, (ptr))
define|#
directive|define
name|bfd_h_get_signed_16
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx_signed_16, (ptr))
define|#
directive|define
name|bfd_h_put_32
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_putx32, (val, ptr))
define|#
directive|define
name|bfd_h_put_signed_32
define|\
value|bfd_h_put_32
define|#
directive|define
name|bfd_h_get_32
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx32, (ptr))
define|#
directive|define
name|bfd_h_get_signed_32
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx_signed_32, (ptr))
define|#
directive|define
name|bfd_h_put_64
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_putx64, (val, ptr))
define|#
directive|define
name|bfd_h_put_signed_64
define|\
value|bfd_h_put_64
define|#
directive|define
name|bfd_h_get_64
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx64, (ptr))
define|#
directive|define
name|bfd_h_get_signed_64
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|)
define|\
value|BFD_SEND (abfd, bfd_h_getx_signed_64, (ptr))
comment|/* Aliases for the above, which should eventually go away.  */
define|#
directive|define
name|H_PUT_64
value|bfd_h_put_64
define|#
directive|define
name|H_PUT_32
value|bfd_h_put_32
define|#
directive|define
name|H_PUT_16
value|bfd_h_put_16
define|#
directive|define
name|H_PUT_8
value|bfd_h_put_8
define|#
directive|define
name|H_PUT_S64
value|bfd_h_put_signed_64
define|#
directive|define
name|H_PUT_S32
value|bfd_h_put_signed_32
define|#
directive|define
name|H_PUT_S16
value|bfd_h_put_signed_16
define|#
directive|define
name|H_PUT_S8
value|bfd_h_put_signed_8
define|#
directive|define
name|H_GET_64
value|bfd_h_get_64
define|#
directive|define
name|H_GET_32
value|bfd_h_get_32
define|#
directive|define
name|H_GET_16
value|bfd_h_get_16
define|#
directive|define
name|H_GET_8
value|bfd_h_get_8
define|#
directive|define
name|H_GET_S64
value|bfd_h_get_signed_64
define|#
directive|define
name|H_GET_S32
value|bfd_h_get_signed_32
define|#
directive|define
name|H_GET_S16
value|bfd_h_get_signed_16
define|#
directive|define
name|H_GET_S8
value|bfd_h_get_signed_8
comment|/* Extracted from bfdio.c.  */
name|long
name|bfd_get_mtime
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|long
name|bfd_get_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
comment|/* Extracted from bfdwin.c.  */
comment|/* Extracted from section.c.  */
comment|/* This structure is used for a comdat section, as in PE.  A comdat    section is associated with a particular symbol.  When the linker    sees a comdat section, it keeps only one of the sections with a    given name and associated with a given symbol.  */
struct|struct
name|bfd_comdat_info
block|{
comment|/* The name of the symbol associated with a comdat section.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* The local symbol table index of the symbol associated with a      comdat section.  This is only meaningful to the object file format      specific code; it is not an index into the list returned by      bfd_canonicalize_symtab.  */
name|long
name|symbol
decl_stmt|;
block|}
struct|;
typedef|typedef
struct|struct
name|bfd_section
block|{
comment|/* The name of the section; the name isn't a copy, the pointer is      the same as that passed to bfd_make_section.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* A unique sequence number.  */
name|int
name|id
decl_stmt|;
comment|/* Which section in the bfd; 0..n-1 as sections are created in a bfd.  */
name|int
name|index
decl_stmt|;
comment|/* The next section in the list belonging to the BFD, or NULL.  */
name|struct
name|bfd_section
modifier|*
name|next
decl_stmt|;
comment|/* The field flags contains attributes of the section. Some      flags are read in from the object file, and some are      synthesized from other information.  */
name|flagword
name|flags
decl_stmt|;
define|#
directive|define
name|SEC_NO_FLAGS
value|0x000
comment|/* Tells the OS to allocate space for this section when loading.      This is clear for a section containing debug information only.  */
define|#
directive|define
name|SEC_ALLOC
value|0x001
comment|/* Tells the OS to load the section from the file when loading.      This is clear for a .bss section.  */
define|#
directive|define
name|SEC_LOAD
value|0x002
comment|/* The section contains data still to be relocated, so there is      some relocation information too.  */
define|#
directive|define
name|SEC_RELOC
value|0x004
comment|/* ELF reserves 4 processor specific bits and 8 operating system      specific bits in sh_flags; at present we can get away with just      one in communicating between the assembler and BFD, but this      isn't a good long-term solution.  */
define|#
directive|define
name|SEC_ARCH_BIT_0
value|0x008
comment|/* A signal to the OS that the section contains read only data.  */
define|#
directive|define
name|SEC_READONLY
value|0x010
comment|/* The section contains code only.  */
define|#
directive|define
name|SEC_CODE
value|0x020
comment|/* The section contains data only.  */
define|#
directive|define
name|SEC_DATA
value|0x040
comment|/* The section will reside in ROM.  */
define|#
directive|define
name|SEC_ROM
value|0x080
comment|/* The section contains constructor information. This section      type is used by the linker to create lists of constructors and      destructors used by<<g++>>. When a back end sees a symbol      which should be used in a constructor list, it creates a new      section for the type of name (e.g.,<<__CTOR_LIST__>>), attaches      the symbol to it, and builds a relocation. To build the lists      of constructors, all the linker has to do is catenate all the      sections called<<__CTOR_LIST__>> and relocate the data      contained within - exactly the operations it would peform on      standard data.  */
define|#
directive|define
name|SEC_CONSTRUCTOR
value|0x100
comment|/* The section has contents - a data section could be<<SEC_ALLOC>> |<<SEC_HAS_CONTENTS>>; a debug section could be<<SEC_HAS_CONTENTS>>  */
define|#
directive|define
name|SEC_HAS_CONTENTS
value|0x200
comment|/* An instruction to the linker to not output the section      even if it has information which would normally be written.  */
define|#
directive|define
name|SEC_NEVER_LOAD
value|0x400
comment|/* The section is a COFF shared library section.  This flag is      only for the linker.  If this type of section appears in      the input file, the linker must copy it to the output file      without changing the vma or size.  FIXME: Although this      was originally intended to be general, it really is COFF      specific (and the flag was renamed to indicate this).  It      might be cleaner to have some more general mechanism to      allow the back end to control what the linker does with      sections.  */
define|#
directive|define
name|SEC_COFF_SHARED_LIBRARY
value|0x800
comment|/* The section contains thread local data.  */
define|#
directive|define
name|SEC_THREAD_LOCAL
value|0x1000
comment|/* The section has GOT references.  This flag is only for the      linker, and is currently only used by the elf32-hppa back end.      It will be set if global offset table references were detected      in this section, which indicate to the linker that the section      contains PIC code, and must be handled specially when doing a      static link.  */
define|#
directive|define
name|SEC_HAS_GOT_REF
value|0x4000
comment|/* The section contains common symbols (symbols may be defined      multiple times, the value of a symbol is the amount of      space it requires, and the largest symbol value is the one      used).  Most targets have exactly one of these (which we      translate to bfd_com_section_ptr), but ECOFF has two.  */
define|#
directive|define
name|SEC_IS_COMMON
value|0x8000
comment|/* The section contains only debugging information.  For      example, this is set for ELF .debug and .stab sections.      strip tests this flag to see if a section can be      discarded.  */
define|#
directive|define
name|SEC_DEBUGGING
value|0x10000
comment|/* The contents of this section are held in memory pointed to      by the contents field.  This is checked by bfd_get_section_contents,      and the data is retrieved from memory if appropriate.  */
define|#
directive|define
name|SEC_IN_MEMORY
value|0x20000
comment|/* The contents of this section are to be excluded by the      linker for executable and shared objects unless those      objects are to be further relocated.  */
define|#
directive|define
name|SEC_EXCLUDE
value|0x40000
comment|/* The contents of this section are to be sorted based on the sum of      the symbol and addend values specified by the associated relocation      entries.  Entries without associated relocation entries will be      appended to the end of the section in an unspecified order.  */
define|#
directive|define
name|SEC_SORT_ENTRIES
value|0x80000
comment|/* When linking, duplicate sections of the same name should be      discarded, rather than being combined into a single section as      is usually done.  This is similar to how common symbols are      handled.  See SEC_LINK_DUPLICATES below.  */
define|#
directive|define
name|SEC_LINK_ONCE
value|0x100000
comment|/* If SEC_LINK_ONCE is set, this bitfield describes how the linker      should handle duplicate sections.  */
define|#
directive|define
name|SEC_LINK_DUPLICATES
value|0x600000
comment|/* This value for SEC_LINK_DUPLICATES means that duplicate      sections with the same name should simply be discarded.  */
define|#
directive|define
name|SEC_LINK_DUPLICATES_DISCARD
value|0x0
comment|/* This value for SEC_LINK_DUPLICATES means that the linker      should warn if there are any duplicate sections, although      it should still only link one copy.  */
define|#
directive|define
name|SEC_LINK_DUPLICATES_ONE_ONLY
value|0x200000
comment|/* This value for SEC_LINK_DUPLICATES means that the linker      should warn if any duplicate sections are a different size.  */
define|#
directive|define
name|SEC_LINK_DUPLICATES_SAME_SIZE
value|0x400000
comment|/* This value for SEC_LINK_DUPLICATES means that the linker      should warn if any duplicate sections contain different      contents.  */
define|#
directive|define
name|SEC_LINK_DUPLICATES_SAME_CONTENTS
value|0x600000
comment|/* This section was created by the linker as part of dynamic      relocation or other arcane processing.  It is skipped when      going through the first-pass output, trusting that someone      else up the line will take care of it later.  */
define|#
directive|define
name|SEC_LINKER_CREATED
value|0x800000
comment|/* This section should not be subject to garbage collection.  */
define|#
directive|define
name|SEC_KEEP
value|0x1000000
comment|/* This section contains "short" data, and should be placed      "near" the GP.  */
define|#
directive|define
name|SEC_SMALL_DATA
value|0x2000000
comment|/* This section contains data which may be shared with other      executables or shared objects.  */
define|#
directive|define
name|SEC_SHARED
value|0x4000000
comment|/* When a section with this flag is being linked, then if the size of      the input section is less than a page, it should not cross a page      boundary.  If the size of the input section is one page or more, it      should be aligned on a page boundary.  */
define|#
directive|define
name|SEC_BLOCK
value|0x8000000
comment|/* Conditionally link this section; do not link if there are no      references found to any symbol in the section.  */
define|#
directive|define
name|SEC_CLINK
value|0x10000000
comment|/* Attempt to merge identical entities in the section.      Entity size is given in the entsize field.  */
define|#
directive|define
name|SEC_MERGE
value|0x20000000
comment|/* If given with SEC_MERGE, entities to merge are zero terminated      strings where entsize specifies character size instead of fixed      size entries.  */
define|#
directive|define
name|SEC_STRINGS
value|0x40000000
comment|/* This section contains data about section groups.  */
define|#
directive|define
name|SEC_GROUP
value|0x80000000
comment|/*  End of section flags.  */
comment|/* Some internal packed boolean fields.  */
comment|/* See the vma field.  */
name|unsigned
name|int
name|user_set_vma
range|:
literal|1
decl_stmt|;
comment|/* Whether relocations have been processed.  */
name|unsigned
name|int
name|reloc_done
range|:
literal|1
decl_stmt|;
comment|/* A mark flag used by some of the linker backends.  */
name|unsigned
name|int
name|linker_mark
range|:
literal|1
decl_stmt|;
comment|/* Another mark flag used by some of the linker backends.  Set for      output sections that have an input section.  */
name|unsigned
name|int
name|linker_has_input
range|:
literal|1
decl_stmt|;
comment|/* A mark flag used by some linker backends for garbage collection.  */
name|unsigned
name|int
name|gc_mark
range|:
literal|1
decl_stmt|;
comment|/* The following flags are used by the ELF linker. */
comment|/* Mark sections which have been allocated to segments.  */
name|unsigned
name|int
name|segment_mark
range|:
literal|1
decl_stmt|;
comment|/* Type of sec_info information.  */
name|unsigned
name|int
name|sec_info_type
range|:
literal|3
decl_stmt|;
define|#
directive|define
name|ELF_INFO_TYPE_NONE
value|0
define|#
directive|define
name|ELF_INFO_TYPE_STABS
value|1
define|#
directive|define
name|ELF_INFO_TYPE_MERGE
value|2
define|#
directive|define
name|ELF_INFO_TYPE_EH_FRAME
value|3
define|#
directive|define
name|ELF_INFO_TYPE_JUST_SYMS
value|4
comment|/* Nonzero if this section uses RELA relocations, rather than REL.  */
name|unsigned
name|int
name|use_rela_p
range|:
literal|1
decl_stmt|;
comment|/* Bits used by various backends.  */
name|unsigned
name|int
name|has_tls_reloc
range|:
literal|1
decl_stmt|;
comment|/* Nonzero if this section needs the relax finalize pass.  */
name|unsigned
name|int
name|need_finalize_relax
range|:
literal|1
decl_stmt|;
comment|/* Nonzero if this section has a gp reloc.  */
name|unsigned
name|int
name|has_gp_reloc
range|:
literal|1
decl_stmt|;
comment|/* Unused bits.  */
name|unsigned
name|int
name|flag13
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|flag14
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|flag15
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|flag16
range|:
literal|4
decl_stmt|;
name|unsigned
name|int
name|flag20
range|:
literal|4
decl_stmt|;
name|unsigned
name|int
name|flag24
range|:
literal|8
decl_stmt|;
comment|/* End of internal packed boolean fields.  */
comment|/*  The virtual memory address of the section - where it will be       at run time.  The symbols are relocated against this.  The       user_set_vma flag is maintained by bfd; if it's not set, the       backend can assign addresses (for example, in<<a.out>>, where       the default address for<<.data>> is dependent on the specific       target and various flags).  */
name|bfd_vma
name|vma
decl_stmt|;
comment|/*  The load address of the section - where it would be in a       rom image; really only used for writing section header       information.  */
name|bfd_vma
name|lma
decl_stmt|;
comment|/* The size of the section in octets, as it will be output.      Contains a value even if the section has no contents (e.g., the      size of<<.bss>>).  This will be filled in after relocation.  */
name|bfd_size_type
name|_cooked_size
decl_stmt|;
comment|/* The original size on disk of the section, in octets.  Normally this      value is the same as the size, but if some relaxing has      been done, then this value will be bigger.  */
name|bfd_size_type
name|_raw_size
decl_stmt|;
comment|/* If this section is going to be output, then this value is the      offset in *bytes* into the output section of the first byte in the      input section (byte ==> smallest addressable unit on the      target).  In most cases, if this was going to start at the      100th octet (8-bit quantity) in the output section, this value      would be 100.  However, if the target byte size is 16 bits      (bfd_octets_per_byte is "2"), this value would be 50.  */
name|bfd_vma
name|output_offset
decl_stmt|;
comment|/* The output section through which to map on output.  */
name|struct
name|bfd_section
modifier|*
name|output_section
decl_stmt|;
comment|/* The alignment requirement of the section, as an exponent of 2 -      e.g., 3 aligns to 2^3 (or 8).  */
name|unsigned
name|int
name|alignment_power
decl_stmt|;
comment|/* If an input section, a pointer to a vector of relocation      records for the data in this section.  */
name|struct
name|reloc_cache_entry
modifier|*
name|relocation
decl_stmt|;
comment|/* If an output section, a pointer to a vector of pointers to      relocation records for the data in this section.  */
name|struct
name|reloc_cache_entry
modifier|*
modifier|*
name|orelocation
decl_stmt|;
comment|/* The number of relocation records in one of the above.  */
name|unsigned
name|reloc_count
decl_stmt|;
comment|/* Information below is back end specific - and not always used      or updated.  */
comment|/* File position of section data.  */
name|file_ptr
name|filepos
decl_stmt|;
comment|/* File position of relocation info.  */
name|file_ptr
name|rel_filepos
decl_stmt|;
comment|/* File position of line data.  */
name|file_ptr
name|line_filepos
decl_stmt|;
comment|/* Pointer to data for applications.  */
name|void
modifier|*
name|userdata
decl_stmt|;
comment|/* If the SEC_IN_MEMORY flag is set, this points to the actual      contents.  */
name|unsigned
name|char
modifier|*
name|contents
decl_stmt|;
comment|/* Attached line number information.  */
name|alent
modifier|*
name|lineno
decl_stmt|;
comment|/* Number of line number records.  */
name|unsigned
name|int
name|lineno_count
decl_stmt|;
comment|/* Entity size for merging purposes.  */
name|unsigned
name|int
name|entsize
decl_stmt|;
comment|/* Optional information about a COMDAT entry; NULL if not COMDAT.  */
name|struct
name|bfd_comdat_info
modifier|*
name|comdat
decl_stmt|;
comment|/* Points to the kept section if this section is a link-once section,      and is discarded.  */
name|struct
name|bfd_section
modifier|*
name|kept_section
decl_stmt|;
comment|/* When a section is being output, this value changes as more      linenumbers are written out.  */
name|file_ptr
name|moving_line_filepos
decl_stmt|;
comment|/* What the section number is in the target world.  */
name|int
name|target_index
decl_stmt|;
name|void
modifier|*
name|used_by_bfd
decl_stmt|;
comment|/* If this is a constructor section then here is a list of the      relocations created to relocate items within it.  */
name|struct
name|relent_chain
modifier|*
name|constructor_chain
decl_stmt|;
comment|/* The BFD which owns the section.  */
name|bfd
modifier|*
name|owner
decl_stmt|;
comment|/* A symbol which points at this section only.  */
name|struct
name|bfd_symbol
modifier|*
name|symbol
decl_stmt|;
name|struct
name|bfd_symbol
modifier|*
modifier|*
name|symbol_ptr_ptr
decl_stmt|;
name|struct
name|bfd_link_order
modifier|*
name|link_order_head
decl_stmt|;
name|struct
name|bfd_link_order
modifier|*
name|link_order_tail
decl_stmt|;
block|}
name|asection
typedef|;
comment|/* These sections are global, and are managed by BFD.  The application    and target back end are not permitted to change the values in    these sections.  New code should use the section_ptr macros rather    than referring directly to the const sections.  The const sections    may eventually vanish.  */
define|#
directive|define
name|BFD_ABS_SECTION_NAME
value|"*ABS*"
define|#
directive|define
name|BFD_UND_SECTION_NAME
value|"*UND*"
define|#
directive|define
name|BFD_COM_SECTION_NAME
value|"*COM*"
define|#
directive|define
name|BFD_IND_SECTION_NAME
value|"*IND*"
comment|/* The absolute section.  */
specifier|extern
name|asection
name|bfd_abs_section
decl_stmt|;
define|#
directive|define
name|bfd_abs_section_ptr
value|((asection *)&bfd_abs_section)
define|#
directive|define
name|bfd_is_abs_section
parameter_list|(
name|sec
parameter_list|)
value|((sec) == bfd_abs_section_ptr)
comment|/* Pointer to the undefined section.  */
specifier|extern
name|asection
name|bfd_und_section
decl_stmt|;
define|#
directive|define
name|bfd_und_section_ptr
value|((asection *)&bfd_und_section)
define|#
directive|define
name|bfd_is_und_section
parameter_list|(
name|sec
parameter_list|)
value|((sec) == bfd_und_section_ptr)
comment|/* Pointer to the common section.  */
specifier|extern
name|asection
name|bfd_com_section
decl_stmt|;
define|#
directive|define
name|bfd_com_section_ptr
value|((asection *)&bfd_com_section)
comment|/* Pointer to the indirect section.  */
specifier|extern
name|asection
name|bfd_ind_section
decl_stmt|;
define|#
directive|define
name|bfd_ind_section_ptr
value|((asection *)&bfd_ind_section)
define|#
directive|define
name|bfd_is_ind_section
parameter_list|(
name|sec
parameter_list|)
value|((sec) == bfd_ind_section_ptr)
define|#
directive|define
name|bfd_is_const_section
parameter_list|(
name|SEC
parameter_list|)
define|\
value|(   ((SEC) == bfd_abs_section_ptr)            \   || ((SEC) == bfd_und_section_ptr)            \   || ((SEC) == bfd_com_section_ptr)            \   || ((SEC) == bfd_ind_section_ptr))
specifier|extern
specifier|const
name|struct
name|bfd_symbol
modifier|*
specifier|const
name|bfd_abs_symbol
decl_stmt|;
specifier|extern
specifier|const
name|struct
name|bfd_symbol
modifier|*
specifier|const
name|bfd_com_symbol
decl_stmt|;
specifier|extern
specifier|const
name|struct
name|bfd_symbol
modifier|*
specifier|const
name|bfd_und_symbol
decl_stmt|;
specifier|extern
specifier|const
name|struct
name|bfd_symbol
modifier|*
specifier|const
name|bfd_ind_symbol
decl_stmt|;
define|#
directive|define
name|bfd_get_section_size_before_reloc
parameter_list|(
name|section
parameter_list|)
define|\
value|((section)->_raw_size)
define|#
directive|define
name|bfd_get_section_size_after_reloc
parameter_list|(
name|section
parameter_list|)
define|\
value|((section)->reloc_done ? (section)->_cooked_size \                             : (abort (), (bfd_size_type) 1))
comment|/* Macros to handle insertion and deletion of a bfd's sections.  These    only handle the list pointers, ie. do not adjust section_count,    target_index etc.  */
define|#
directive|define
name|bfd_section_list_remove
parameter_list|(
name|ABFD
parameter_list|,
name|PS
parameter_list|)
define|\
value|do                                                   \     {                                                  \       asection **_ps = PS;                             \       asection *_s = *_ps;                             \       *_ps = _s->next;                                 \       if (_s->next == NULL)                            \         (ABFD)->section_tail = _ps;                    \     }                                                  \   while (0)
define|#
directive|define
name|bfd_section_list_insert
parameter_list|(
name|ABFD
parameter_list|,
name|PS
parameter_list|,
name|S
parameter_list|)
define|\
value|do                                                   \     {                                                  \       asection **_ps = PS;                             \       asection *_s = S;                                \       _s->next = *_ps;                                 \       *_ps = _s;                                       \       if (_s->next == NULL)                            \         (ABFD)->section_tail =&_s->next;              \     }                                                  \   while (0)
name|void
name|bfd_section_list_clear
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|asection
modifier|*
name|bfd_get_section_by_name
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|char
modifier|*
name|bfd_get_unique_section_name
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|templat
parameter_list|,
name|int
modifier|*
name|count
parameter_list|)
function_decl|;
name|asection
modifier|*
name|bfd_make_section_old_way
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|asection
modifier|*
name|bfd_make_section_anyway
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|asection
modifier|*
name|bfd_make_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_section_flags
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
name|flagword
name|flags
parameter_list|)
function_decl|;
name|void
name|bfd_map_over_sections
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sect
parameter_list|,
name|void
modifier|*
name|obj
parameter_list|)
parameter_list|,
name|void
modifier|*
name|obj
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_section_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
name|bfd_size_type
name|val
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_section_contents
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|section
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|file_ptr
name|offset
parameter_list|,
name|bfd_size_type
name|count
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_get_section_contents
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|section
parameter_list|,
name|void
modifier|*
name|location
parameter_list|,
name|file_ptr
name|offset
parameter_list|,
name|bfd_size_type
name|count
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_copy_private_section_data
parameter_list|(
name|bfd
modifier|*
name|ibfd
parameter_list|,
name|asection
modifier|*
name|isec
parameter_list|,
name|bfd
modifier|*
name|obfd
parameter_list|,
name|asection
modifier|*
name|osec
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_copy_private_section_data
parameter_list|(
name|ibfd
parameter_list|,
name|isection
parameter_list|,
name|obfd
parameter_list|,
name|osection
parameter_list|)
define|\
value|BFD_SEND (obfd, _bfd_copy_private_section_data, \                (ibfd, isection, obfd, osection))
name|void
name|_bfd_strip_section_from_output
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|section
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_generic_discard_group
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|group
parameter_list|)
function_decl|;
comment|/* Extracted from archures.c.  */
enum|enum
name|bfd_architecture
block|{
name|bfd_arch_unknown
block|,
comment|/* File arch not known.  */
name|bfd_arch_obscure
block|,
comment|/* Arch known, not one of these.  */
name|bfd_arch_m68k
block|,
comment|/* Motorola 68xxx */
define|#
directive|define
name|bfd_mach_m68000
value|1
define|#
directive|define
name|bfd_mach_m68008
value|2
define|#
directive|define
name|bfd_mach_m68010
value|3
define|#
directive|define
name|bfd_mach_m68020
value|4
define|#
directive|define
name|bfd_mach_m68030
value|5
define|#
directive|define
name|bfd_mach_m68040
value|6
define|#
directive|define
name|bfd_mach_m68060
value|7
define|#
directive|define
name|bfd_mach_cpu32
value|8
define|#
directive|define
name|bfd_mach_mcf5200
value|9
define|#
directive|define
name|bfd_mach_mcf5206e
value|10
define|#
directive|define
name|bfd_mach_mcf5307
value|11
define|#
directive|define
name|bfd_mach_mcf5407
value|12
define|#
directive|define
name|bfd_mach_mcf528x
value|13
name|bfd_arch_vax
block|,
comment|/* DEC Vax */
name|bfd_arch_i960
block|,
comment|/* Intel 960 */
comment|/* The order of the following is important.        lower number indicates a machine type that        only accepts a subset of the instructions        available to machines with higher numbers.        The exception is the "ca", which is        incompatible with all other machines except        "core".  */
define|#
directive|define
name|bfd_mach_i960_core
value|1
define|#
directive|define
name|bfd_mach_i960_ka_sa
value|2
define|#
directive|define
name|bfd_mach_i960_kb_sb
value|3
define|#
directive|define
name|bfd_mach_i960_mc
value|4
define|#
directive|define
name|bfd_mach_i960_xa
value|5
define|#
directive|define
name|bfd_mach_i960_ca
value|6
define|#
directive|define
name|bfd_mach_i960_jx
value|7
define|#
directive|define
name|bfd_mach_i960_hx
value|8
name|bfd_arch_or32
block|,
comment|/* OpenRISC 32 */
name|bfd_arch_a29k
block|,
comment|/* AMD 29000 */
name|bfd_arch_sparc
block|,
comment|/* SPARC */
define|#
directive|define
name|bfd_mach_sparc
value|1
comment|/* The difference between v8plus and v9 is that v9 is a true 64 bit env.  */
define|#
directive|define
name|bfd_mach_sparc_sparclet
value|2
define|#
directive|define
name|bfd_mach_sparc_sparclite
value|3
define|#
directive|define
name|bfd_mach_sparc_v8plus
value|4
define|#
directive|define
name|bfd_mach_sparc_v8plusa
value|5
comment|/* with ultrasparc add'ns.  */
define|#
directive|define
name|bfd_mach_sparc_sparclite_le
value|6
define|#
directive|define
name|bfd_mach_sparc_v9
value|7
define|#
directive|define
name|bfd_mach_sparc_v9a
value|8
comment|/* with ultrasparc add'ns.  */
define|#
directive|define
name|bfd_mach_sparc_v8plusb
value|9
comment|/* with cheetah add'ns.  */
define|#
directive|define
name|bfd_mach_sparc_v9b
value|10
comment|/* with cheetah add'ns.  */
comment|/* Nonzero if MACH has the v9 instruction set.  */
define|#
directive|define
name|bfd_mach_sparc_v9_p
parameter_list|(
name|mach
parameter_list|)
define|\
value|((mach)>= bfd_mach_sparc_v8plus&& (mach)<= bfd_mach_sparc_v9b \&& (mach) != bfd_mach_sparc_sparclite_le)
name|bfd_arch_mips
block|,
comment|/* MIPS Rxxxx */
define|#
directive|define
name|bfd_mach_mips3000
value|3000
define|#
directive|define
name|bfd_mach_mips3900
value|3900
define|#
directive|define
name|bfd_mach_mips4000
value|4000
define|#
directive|define
name|bfd_mach_mips4010
value|4010
define|#
directive|define
name|bfd_mach_mips4100
value|4100
define|#
directive|define
name|bfd_mach_mips4111
value|4111
define|#
directive|define
name|bfd_mach_mips4120
value|4120
define|#
directive|define
name|bfd_mach_mips4300
value|4300
define|#
directive|define
name|bfd_mach_mips4400
value|4400
define|#
directive|define
name|bfd_mach_mips4600
value|4600
define|#
directive|define
name|bfd_mach_mips4650
value|4650
define|#
directive|define
name|bfd_mach_mips5000
value|5000
define|#
directive|define
name|bfd_mach_mips5400
value|5400
define|#
directive|define
name|bfd_mach_mips5500
value|5500
define|#
directive|define
name|bfd_mach_mips6000
value|6000
define|#
directive|define
name|bfd_mach_mips7000
value|7000
define|#
directive|define
name|bfd_mach_mips8000
value|8000
define|#
directive|define
name|bfd_mach_mips10000
value|10000
define|#
directive|define
name|bfd_mach_mips12000
value|12000
define|#
directive|define
name|bfd_mach_mips16
value|16
define|#
directive|define
name|bfd_mach_mips5
value|5
define|#
directive|define
name|bfd_mach_mips_sb1
value|12310201
comment|/* octal 'SB', 01 */
define|#
directive|define
name|bfd_mach_mipsisa32
value|32
define|#
directive|define
name|bfd_mach_mipsisa32r2
value|33
define|#
directive|define
name|bfd_mach_mipsisa64
value|64
define|#
directive|define
name|bfd_mach_mipsisa64r2
value|65
name|bfd_arch_i386
block|,
comment|/* Intel 386 */
define|#
directive|define
name|bfd_mach_i386_i386
value|1
define|#
directive|define
name|bfd_mach_i386_i8086
value|2
define|#
directive|define
name|bfd_mach_i386_i386_intel_syntax
value|3
define|#
directive|define
name|bfd_mach_x86_64
value|64
define|#
directive|define
name|bfd_mach_x86_64_intel_syntax
value|65
name|bfd_arch_we32k
block|,
comment|/* AT&T WE32xxx */
name|bfd_arch_tahoe
block|,
comment|/* CCI/Harris Tahoe */
name|bfd_arch_i860
block|,
comment|/* Intel 860 */
name|bfd_arch_i370
block|,
comment|/* IBM 360/370 Mainframes */
name|bfd_arch_romp
block|,
comment|/* IBM ROMP PC/RT */
name|bfd_arch_alliant
block|,
comment|/* Alliant */
name|bfd_arch_convex
block|,
comment|/* Convex */
name|bfd_arch_m88k
block|,
comment|/* Motorola 88xxx */
name|bfd_arch_m98k
block|,
comment|/* Motorola 98xxx */
name|bfd_arch_pyramid
block|,
comment|/* Pyramid Technology */
name|bfd_arch_h8300
block|,
comment|/* Renesas H8/300 (formerly Hitachi H8/300) */
define|#
directive|define
name|bfd_mach_h8300
value|1
define|#
directive|define
name|bfd_mach_h8300h
value|2
define|#
directive|define
name|bfd_mach_h8300s
value|3
define|#
directive|define
name|bfd_mach_h8300hn
value|4
define|#
directive|define
name|bfd_mach_h8300sn
value|5
define|#
directive|define
name|bfd_mach_h8300sx
value|6
define|#
directive|define
name|bfd_mach_h8300sxn
value|7
name|bfd_arch_pdp11
block|,
comment|/* DEC PDP-11 */
name|bfd_arch_powerpc
block|,
comment|/* PowerPC */
define|#
directive|define
name|bfd_mach_ppc
value|32
define|#
directive|define
name|bfd_mach_ppc64
value|64
define|#
directive|define
name|bfd_mach_ppc_403
value|403
define|#
directive|define
name|bfd_mach_ppc_403gc
value|4030
define|#
directive|define
name|bfd_mach_ppc_505
value|505
define|#
directive|define
name|bfd_mach_ppc_601
value|601
define|#
directive|define
name|bfd_mach_ppc_602
value|602
define|#
directive|define
name|bfd_mach_ppc_603
value|603
define|#
directive|define
name|bfd_mach_ppc_ec603e
value|6031
define|#
directive|define
name|bfd_mach_ppc_604
value|604
define|#
directive|define
name|bfd_mach_ppc_620
value|620
define|#
directive|define
name|bfd_mach_ppc_630
value|630
define|#
directive|define
name|bfd_mach_ppc_750
value|750
define|#
directive|define
name|bfd_mach_ppc_860
value|860
define|#
directive|define
name|bfd_mach_ppc_a35
value|35
define|#
directive|define
name|bfd_mach_ppc_rs64ii
value|642
define|#
directive|define
name|bfd_mach_ppc_rs64iii
value|643
define|#
directive|define
name|bfd_mach_ppc_7400
value|7400
define|#
directive|define
name|bfd_mach_ppc_e500
value|500
name|bfd_arch_rs6000
block|,
comment|/* IBM RS/6000 */
define|#
directive|define
name|bfd_mach_rs6k
value|6000
define|#
directive|define
name|bfd_mach_rs6k_rs1
value|6001
define|#
directive|define
name|bfd_mach_rs6k_rsc
value|6003
define|#
directive|define
name|bfd_mach_rs6k_rs2
value|6002
name|bfd_arch_hppa
block|,
comment|/* HP PA RISC */
define|#
directive|define
name|bfd_mach_hppa10
value|10
define|#
directive|define
name|bfd_mach_hppa11
value|11
define|#
directive|define
name|bfd_mach_hppa20
value|20
define|#
directive|define
name|bfd_mach_hppa20w
value|25
name|bfd_arch_d10v
block|,
comment|/* Mitsubishi D10V */
define|#
directive|define
name|bfd_mach_d10v
value|1
define|#
directive|define
name|bfd_mach_d10v_ts2
value|2
define|#
directive|define
name|bfd_mach_d10v_ts3
value|3
name|bfd_arch_d30v
block|,
comment|/* Mitsubishi D30V */
name|bfd_arch_dlx
block|,
comment|/* DLX */
name|bfd_arch_m68hc11
block|,
comment|/* Motorola 68HC11 */
name|bfd_arch_m68hc12
block|,
comment|/* Motorola 68HC12 */
define|#
directive|define
name|bfd_mach_m6812_default
value|0
define|#
directive|define
name|bfd_mach_m6812
value|1
define|#
directive|define
name|bfd_mach_m6812s
value|2
name|bfd_arch_z8k
block|,
comment|/* Zilog Z8000 */
define|#
directive|define
name|bfd_mach_z8001
value|1
define|#
directive|define
name|bfd_mach_z8002
value|2
name|bfd_arch_h8500
block|,
comment|/* Renesas H8/500 (formerly Hitachi H8/500) */
name|bfd_arch_sh
block|,
comment|/* Renesas / SuperH SH (formerly Hitachi SH) */
define|#
directive|define
name|bfd_mach_sh
value|1
define|#
directive|define
name|bfd_mach_sh2
value|0x20
define|#
directive|define
name|bfd_mach_sh_dsp
value|0x2d
define|#
directive|define
name|bfd_mach_sh2e
value|0x2e
define|#
directive|define
name|bfd_mach_sh3
value|0x30
define|#
directive|define
name|bfd_mach_sh3_dsp
value|0x3d
define|#
directive|define
name|bfd_mach_sh3e
value|0x3e
define|#
directive|define
name|bfd_mach_sh4
value|0x40
define|#
directive|define
name|bfd_mach_sh4_nofpu
value|0x41
define|#
directive|define
name|bfd_mach_sh4a
value|0x4a
define|#
directive|define
name|bfd_mach_sh4a_nofpu
value|0x4b
define|#
directive|define
name|bfd_mach_sh4al_dsp
value|0x4d
define|#
directive|define
name|bfd_mach_sh5
value|0x50
name|bfd_arch_alpha
block|,
comment|/* Dec Alpha */
define|#
directive|define
name|bfd_mach_alpha_ev4
value|0x10
define|#
directive|define
name|bfd_mach_alpha_ev5
value|0x20
define|#
directive|define
name|bfd_mach_alpha_ev6
value|0x30
name|bfd_arch_arm
block|,
comment|/* Advanced Risc Machines ARM.  */
define|#
directive|define
name|bfd_mach_arm_unknown
value|0
define|#
directive|define
name|bfd_mach_arm_2
value|1
define|#
directive|define
name|bfd_mach_arm_2a
value|2
define|#
directive|define
name|bfd_mach_arm_3
value|3
define|#
directive|define
name|bfd_mach_arm_3M
value|4
define|#
directive|define
name|bfd_mach_arm_4
value|5
define|#
directive|define
name|bfd_mach_arm_4T
value|6
define|#
directive|define
name|bfd_mach_arm_5
value|7
define|#
directive|define
name|bfd_mach_arm_5T
value|8
define|#
directive|define
name|bfd_mach_arm_5TE
value|9
define|#
directive|define
name|bfd_mach_arm_XScale
value|10
define|#
directive|define
name|bfd_mach_arm_ep9312
value|11
define|#
directive|define
name|bfd_mach_arm_iWMMXt
value|12
name|bfd_arch_ns32k
block|,
comment|/* National Semiconductors ns32000 */
name|bfd_arch_w65
block|,
comment|/* WDC 65816 */
name|bfd_arch_tic30
block|,
comment|/* Texas Instruments TMS320C30 */
name|bfd_arch_tic4x
block|,
comment|/* Texas Instruments TMS320C3X/4X */
define|#
directive|define
name|bfd_mach_tic3x
value|30
define|#
directive|define
name|bfd_mach_tic4x
value|40
name|bfd_arch_tic54x
block|,
comment|/* Texas Instruments TMS320C54X */
name|bfd_arch_tic80
block|,
comment|/* TI TMS320c80 (MVP) */
name|bfd_arch_v850
block|,
comment|/* NEC V850 */
define|#
directive|define
name|bfd_mach_v850
value|1
define|#
directive|define
name|bfd_mach_v850e
value|'E'
define|#
directive|define
name|bfd_mach_v850e1
value|'1'
name|bfd_arch_arc
block|,
comment|/* ARC Cores */
define|#
directive|define
name|bfd_mach_arc_5
value|5
define|#
directive|define
name|bfd_mach_arc_6
value|6
define|#
directive|define
name|bfd_mach_arc_7
value|7
define|#
directive|define
name|bfd_mach_arc_8
value|8
name|bfd_arch_m32r
block|,
comment|/* Renesas M32R (formerly Mitsubishi M32R/D) */
define|#
directive|define
name|bfd_mach_m32r
value|1
comment|/* For backwards compatibility.  */
define|#
directive|define
name|bfd_mach_m32rx
value|'x'
define|#
directive|define
name|bfd_mach_m32r2
value|'2'
name|bfd_arch_mn10200
block|,
comment|/* Matsushita MN10200 */
name|bfd_arch_mn10300
block|,
comment|/* Matsushita MN10300 */
define|#
directive|define
name|bfd_mach_mn10300
value|300
define|#
directive|define
name|bfd_mach_am33
value|330
define|#
directive|define
name|bfd_mach_am33_2
value|332
name|bfd_arch_fr30
block|,
define|#
directive|define
name|bfd_mach_fr30
value|0x46523330
name|bfd_arch_frv
block|,
define|#
directive|define
name|bfd_mach_frv
value|1
define|#
directive|define
name|bfd_mach_frvsimple
value|2
define|#
directive|define
name|bfd_mach_fr300
value|300
define|#
directive|define
name|bfd_mach_fr400
value|400
define|#
directive|define
name|bfd_mach_frvtomcat
value|499
comment|/* fr500 prototype */
define|#
directive|define
name|bfd_mach_fr500
value|500
define|#
directive|define
name|bfd_mach_fr550
value|550
name|bfd_arch_mcore
block|,
name|bfd_arch_ia64
block|,
comment|/* HP/Intel ia64 */
define|#
directive|define
name|bfd_mach_ia64_elf64
value|64
define|#
directive|define
name|bfd_mach_ia64_elf32
value|32
name|bfd_arch_ip2k
block|,
comment|/* Ubicom IP2K microcontrollers. */
define|#
directive|define
name|bfd_mach_ip2022
value|1
define|#
directive|define
name|bfd_mach_ip2022ext
value|2
name|bfd_arch_iq2000
block|,
comment|/* Vitesse IQ2000.  */
define|#
directive|define
name|bfd_mach_iq2000
value|1
define|#
directive|define
name|bfd_mach_iq10
value|2
name|bfd_arch_pj
block|,
name|bfd_arch_avr
block|,
comment|/* Atmel AVR microcontrollers.  */
define|#
directive|define
name|bfd_mach_avr1
value|1
define|#
directive|define
name|bfd_mach_avr2
value|2
define|#
directive|define
name|bfd_mach_avr3
value|3
define|#
directive|define
name|bfd_mach_avr4
value|4
define|#
directive|define
name|bfd_mach_avr5
value|5
name|bfd_arch_cris
block|,
comment|/* Axis CRIS */
name|bfd_arch_s390
block|,
comment|/* IBM s390 */
define|#
directive|define
name|bfd_mach_s390_31
value|31
define|#
directive|define
name|bfd_mach_s390_64
value|64
name|bfd_arch_openrisc
block|,
comment|/* OpenRISC */
name|bfd_arch_mmix
block|,
comment|/* Donald Knuth's educational processor.  */
name|bfd_arch_xstormy16
block|,
define|#
directive|define
name|bfd_mach_xstormy16
value|1
name|bfd_arch_msp430
block|,
comment|/* Texas Instruments MSP430 architecture.  */
define|#
directive|define
name|bfd_mach_msp11
value|11
define|#
directive|define
name|bfd_mach_msp110
value|110
define|#
directive|define
name|bfd_mach_msp12
value|12
define|#
directive|define
name|bfd_mach_msp13
value|13
define|#
directive|define
name|bfd_mach_msp14
value|14
define|#
directive|define
name|bfd_mach_msp15
value|15
define|#
directive|define
name|bfd_mach_msp16
value|16
define|#
directive|define
name|bfd_mach_msp31
value|31
define|#
directive|define
name|bfd_mach_msp32
value|32
define|#
directive|define
name|bfd_mach_msp33
value|33
define|#
directive|define
name|bfd_mach_msp41
value|41
define|#
directive|define
name|bfd_mach_msp42
value|42
define|#
directive|define
name|bfd_mach_msp43
value|43
define|#
directive|define
name|bfd_mach_msp44
value|44
name|bfd_arch_xtensa
block|,
comment|/* Tensilica's Xtensa cores.  */
define|#
directive|define
name|bfd_mach_xtensa
value|1
name|bfd_arch_last
block|}
enum|;
typedef|typedef
struct|struct
name|bfd_arch_info
block|{
name|int
name|bits_per_word
decl_stmt|;
name|int
name|bits_per_address
decl_stmt|;
name|int
name|bits_per_byte
decl_stmt|;
name|enum
name|bfd_architecture
name|arch
decl_stmt|;
name|unsigned
name|long
name|mach
decl_stmt|;
specifier|const
name|char
modifier|*
name|arch_name
decl_stmt|;
specifier|const
name|char
modifier|*
name|printable_name
decl_stmt|;
name|unsigned
name|int
name|section_align_power
decl_stmt|;
comment|/* TRUE if this is the default machine for the architecture.      The default arch should be the first entry for an arch so that      all the entries for that arch can be accessed via<<next>>.  */
name|bfd_boolean
name|the_default
decl_stmt|;
specifier|const
name|struct
name|bfd_arch_info
modifier|*
function_decl|(
modifier|*
name|compatible
function_decl|)
parameter_list|(
specifier|const
name|struct
name|bfd_arch_info
modifier|*
name|a
parameter_list|,
specifier|const
name|struct
name|bfd_arch_info
modifier|*
name|b
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|scan
function_decl|)
parameter_list|(
specifier|const
name|struct
name|bfd_arch_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|const
name|struct
name|bfd_arch_info
modifier|*
name|next
decl_stmt|;
block|}
name|bfd_arch_info_type
typedef|;
specifier|const
name|char
modifier|*
name|bfd_printable_name
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|const
name|bfd_arch_info_type
modifier|*
name|bfd_scan_arch
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
modifier|*
name|bfd_arch_list
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|bfd_arch_info_type
modifier|*
name|bfd_arch_get_compatible
parameter_list|(
specifier|const
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|bfd
modifier|*
name|bbfd
parameter_list|,
name|bfd_boolean
name|accept_unknowns
parameter_list|)
function_decl|;
name|void
name|bfd_set_arch_info
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|bfd_arch_info_type
modifier|*
name|arg
parameter_list|)
function_decl|;
name|enum
name|bfd_architecture
name|bfd_get_arch
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|unsigned
name|long
name|bfd_get_mach
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|unsigned
name|int
name|bfd_arch_bits_per_byte
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|unsigned
name|int
name|bfd_arch_bits_per_address
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|const
name|bfd_arch_info_type
modifier|*
name|bfd_get_arch_info
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|const
name|bfd_arch_info_type
modifier|*
name|bfd_lookup_arch
parameter_list|(
name|enum
name|bfd_architecture
name|arch
parameter_list|,
name|unsigned
name|long
name|machine
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|bfd_printable_arch_mach
parameter_list|(
name|enum
name|bfd_architecture
name|arch
parameter_list|,
name|unsigned
name|long
name|machine
parameter_list|)
function_decl|;
name|unsigned
name|int
name|bfd_octets_per_byte
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|unsigned
name|int
name|bfd_arch_mach_octets_per_byte
parameter_list|(
name|enum
name|bfd_architecture
name|arch
parameter_list|,
name|unsigned
name|long
name|machine
parameter_list|)
function_decl|;
comment|/* Extracted from reloc.c.  */
typedef|typedef
enum|enum
name|bfd_reloc_status
block|{
comment|/* No errors detected.  */
name|bfd_reloc_ok
block|,
comment|/* The relocation was performed, but there was an overflow.  */
name|bfd_reloc_overflow
block|,
comment|/* The address to relocate was not within the section supplied.  */
name|bfd_reloc_outofrange
block|,
comment|/* Used by special functions.  */
name|bfd_reloc_continue
block|,
comment|/* Unsupported relocation size requested.  */
name|bfd_reloc_notsupported
block|,
comment|/* Unused.  */
name|bfd_reloc_other
block|,
comment|/* The symbol to relocate against was undefined.  */
name|bfd_reloc_undefined
block|,
comment|/* The relocation was performed, but may not be ok - presently      generated only when linking i960 coff files with i960 b.out      symbols.  If this type is returned, the error_message argument      to bfd_perform_relocation will be set.  */
name|bfd_reloc_dangerous
block|}
name|bfd_reloc_status_type
typedef|;
typedef|typedef
struct|struct
name|reloc_cache_entry
block|{
comment|/* A pointer into the canonical table of pointers.  */
name|struct
name|bfd_symbol
modifier|*
modifier|*
name|sym_ptr_ptr
decl_stmt|;
comment|/* offset in section.  */
name|bfd_size_type
name|address
decl_stmt|;
comment|/* addend for relocation value.  */
name|bfd_vma
name|addend
decl_stmt|;
comment|/* Pointer to how to perform the required relocation.  */
name|reloc_howto_type
modifier|*
name|howto
decl_stmt|;
block|}
name|arelent
typedef|;
enum|enum
name|complain_overflow
block|{
comment|/* Do not complain on overflow.  */
name|complain_overflow_dont
block|,
comment|/* Complain if the bitfield overflows, whether it is considered      as signed or unsigned.  */
name|complain_overflow_bitfield
block|,
comment|/* Complain if the value overflows when considered as signed      number.  */
name|complain_overflow_signed
block|,
comment|/* Complain if the value overflows when considered as an      unsigned number.  */
name|complain_overflow_unsigned
block|}
enum|;
struct|struct
name|reloc_howto_struct
block|{
comment|/*  The type field has mainly a documentary use - the back end can       do what it wants with it, though normally the back end's       external idea of what a reloc number is stored       in this field.  For example, a PC relative word relocation       in a coff environment has the type 023 - because that's       what the outside world calls a R_PCRWORD reloc.  */
name|unsigned
name|int
name|type
decl_stmt|;
comment|/*  The value the final relocation is shifted right by.  This drops       unwanted data from the relocation.  */
name|unsigned
name|int
name|rightshift
decl_stmt|;
comment|/*  The size of the item to be relocated.  This is *not* a       power-of-two measure.  To get the number of bytes operated       on by a type of relocation, use bfd_get_reloc_size.  */
name|int
name|size
decl_stmt|;
comment|/*  The number of bits in the item to be relocated.  This is used       when doing overflow checking.  */
name|unsigned
name|int
name|bitsize
decl_stmt|;
comment|/*  Notes that the relocation is relative to the location in the       data section of the addend.  The relocation function will       subtract from the relocation value the address of the location       being relocated.  */
name|bfd_boolean
name|pc_relative
decl_stmt|;
comment|/*  The bit position of the reloc value in the destination.       The relocated value is left shifted by this amount.  */
name|unsigned
name|int
name|bitpos
decl_stmt|;
comment|/* What type of overflow error should be checked for when      relocating.  */
name|enum
name|complain_overflow
name|complain_on_overflow
decl_stmt|;
comment|/* If this field is non null, then the supplied function is      called rather than the normal function.  This allows really      strange relocation methods to be accommodated (e.g., i960 callj      instructions).  */
name|bfd_reloc_status_type
function_decl|(
modifier|*
name|special_function
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* The textual name of the relocation type.  */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Some formats record a relocation addend in the section contents      rather than with the relocation.  For ELF formats this is the      distinction between USE_REL and USE_RELA (though the code checks      for USE_REL == 1/0).  The value of this field is TRUE if the      addend is recorded with the section contents; when performing a      partial link (ld -r) the section contents (the data) will be      modified.  The value of this field is FALSE if addends are      recorded with the relocation (in arelent.addend); when performing      a partial link the relocation will be modified.      All relocations for all ELF USE_RELA targets should set this field      to FALSE (values of TRUE should be looked on with suspicion).      However, the converse is not true: not all relocations of all ELF      USE_REL targets set this field to TRUE.  Why this is so is peculiar      to each particular target.  For relocs that aren't used in partial      links (e.g. GOT stuff) it doesn't matter what this is set to.  */
name|bfd_boolean
name|partial_inplace
decl_stmt|;
comment|/* src_mask selects the part of the instruction (or data) to be used      in the relocation sum.  If the target relocations don't have an      addend in the reloc, eg. ELF USE_REL, src_mask will normally equal      dst_mask to extract the addend from the section contents.  If      relocations do have an addend in the reloc, eg. ELF USE_RELA, this      field should be zero.  Non-zero values for ELF USE_RELA targets are      bogus as in those cases the value in the dst_mask part of the      section contents should be treated as garbage.  */
name|bfd_vma
name|src_mask
decl_stmt|;
comment|/* dst_mask selects which parts of the instruction (or data) are      replaced with a relocated value.  */
name|bfd_vma
name|dst_mask
decl_stmt|;
comment|/* When some formats create PC relative instructions, they leave      the value of the pc of the place being relocated in the offset      slot of the instruction, so that a PC relative relocation can      be made just by adding in an ordinary offset (e.g., sun3 a.out).      Some formats leave the displacement part of an instruction      empty (e.g., m88k bcs); this flag signals the fact.  */
name|bfd_boolean
name|pcrel_offset
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|HOWTO
parameter_list|(
name|C
parameter_list|,
name|R
parameter_list|,
name|S
parameter_list|,
name|B
parameter_list|,
name|P
parameter_list|,
name|BI
parameter_list|,
name|O
parameter_list|,
name|SF
parameter_list|,
name|NAME
parameter_list|,
name|INPLACE
parameter_list|,
name|MASKSRC
parameter_list|,
name|MASKDST
parameter_list|,
name|PC
parameter_list|)
define|\
value|{ (unsigned) C, R, S, B, P, BI, O, SF, NAME, INPLACE, MASKSRC, MASKDST, PC }
define|#
directive|define
name|NEWHOWTO
parameter_list|(
name|FUNCTION
parameter_list|,
name|NAME
parameter_list|,
name|SIZE
parameter_list|,
name|REL
parameter_list|,
name|IN
parameter_list|)
define|\
value|HOWTO (0, 0, SIZE, 0, REL, 0, complain_overflow_dont, FUNCTION, \          NAME, FALSE, 0, 0, IN)
define|#
directive|define
name|EMPTY_HOWTO
parameter_list|(
name|C
parameter_list|)
define|\
value|HOWTO ((C), 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL, \          NULL, FALSE, 0, 0, FALSE)
define|#
directive|define
name|HOWTO_PREPARE
parameter_list|(
name|relocation
parameter_list|,
name|symbol
parameter_list|)
define|\
value|{                                                     \     if (symbol != NULL)                                 \       {                                                 \         if (bfd_is_com_section (symbol->section))       \           {                                             \             relocation = 0;                             \           }                                             \         else                                            \           {                                             \             relocation = symbol->value;                 \           }                                             \       }                                                 \   }
name|unsigned
name|int
name|bfd_get_reloc_size
parameter_list|(
name|reloc_howto_type
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|relent_chain
block|{
name|arelent
name|relent
decl_stmt|;
name|struct
name|relent_chain
modifier|*
name|next
decl_stmt|;
block|}
name|arelent_chain
typedef|;
name|bfd_reloc_status_type
name|bfd_check_overflow
parameter_list|(
name|enum
name|complain_overflow
name|how
parameter_list|,
name|unsigned
name|int
name|bitsize
parameter_list|,
name|unsigned
name|int
name|rightshift
parameter_list|,
name|unsigned
name|int
name|addrsize
parameter_list|,
name|bfd_vma
name|relocation
parameter_list|)
function_decl|;
name|bfd_reloc_status_type
name|bfd_perform_relocation
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|arelent
modifier|*
name|reloc_entry
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|char
modifier|*
modifier|*
name|error_message
parameter_list|)
function_decl|;
name|bfd_reloc_status_type
name|bfd_install_relocation
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|arelent
modifier|*
name|reloc_entry
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|bfd_vma
name|data_start
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|char
modifier|*
modifier|*
name|error_message
parameter_list|)
function_decl|;
enum|enum
name|bfd_reloc_code_real
block|{
name|_dummy_first_bfd_reloc_code_real
block|,
comment|/* Basic absolute relocations of N bits.  */
name|BFD_RELOC_64
block|,
name|BFD_RELOC_32
block|,
name|BFD_RELOC_26
block|,
name|BFD_RELOC_24
block|,
name|BFD_RELOC_16
block|,
name|BFD_RELOC_14
block|,
name|BFD_RELOC_8
block|,
comment|/* PC-relative relocations.  Sometimes these are relative to the address of the relocation itself; sometimes they are relative to the start of the section containing the relocation.  It depends on the specific target.  The 24-bit relocation is used in some Intel 960 configurations.  */
name|BFD_RELOC_64_PCREL
block|,
name|BFD_RELOC_32_PCREL
block|,
name|BFD_RELOC_24_PCREL
block|,
name|BFD_RELOC_16_PCREL
block|,
name|BFD_RELOC_12_PCREL
block|,
name|BFD_RELOC_8_PCREL
block|,
comment|/* For ELF.  */
name|BFD_RELOC_32_GOT_PCREL
block|,
name|BFD_RELOC_16_GOT_PCREL
block|,
name|BFD_RELOC_8_GOT_PCREL
block|,
name|BFD_RELOC_32_GOTOFF
block|,
name|BFD_RELOC_16_GOTOFF
block|,
name|BFD_RELOC_LO16_GOTOFF
block|,
name|BFD_RELOC_HI16_GOTOFF
block|,
name|BFD_RELOC_HI16_S_GOTOFF
block|,
name|BFD_RELOC_8_GOTOFF
block|,
name|BFD_RELOC_64_PLT_PCREL
block|,
name|BFD_RELOC_32_PLT_PCREL
block|,
name|BFD_RELOC_24_PLT_PCREL
block|,
name|BFD_RELOC_16_PLT_PCREL
block|,
name|BFD_RELOC_8_PLT_PCREL
block|,
name|BFD_RELOC_64_PLTOFF
block|,
name|BFD_RELOC_32_PLTOFF
block|,
name|BFD_RELOC_16_PLTOFF
block|,
name|BFD_RELOC_LO16_PLTOFF
block|,
name|BFD_RELOC_HI16_PLTOFF
block|,
name|BFD_RELOC_HI16_S_PLTOFF
block|,
name|BFD_RELOC_8_PLTOFF
block|,
comment|/* Relocations used by 68K ELF.  */
name|BFD_RELOC_68K_GLOB_DAT
block|,
name|BFD_RELOC_68K_JMP_SLOT
block|,
name|BFD_RELOC_68K_RELATIVE
block|,
comment|/* Linkage-table relative.  */
name|BFD_RELOC_32_BASEREL
block|,
name|BFD_RELOC_16_BASEREL
block|,
name|BFD_RELOC_LO16_BASEREL
block|,
name|BFD_RELOC_HI16_BASEREL
block|,
name|BFD_RELOC_HI16_S_BASEREL
block|,
name|BFD_RELOC_8_BASEREL
block|,
name|BFD_RELOC_RVA
block|,
comment|/* Absolute 8-bit relocation, but used to form an address like 0xFFnn.  */
name|BFD_RELOC_8_FFnn
block|,
comment|/* These PC-relative relocations are stored as word displacements -- i.e., byte displacements shifted right two bits.  The 30-bit word displacement (<<32_PCREL_S2>> -- 32 bits, shifted 2) is used on the SPARC.  (SPARC tools generally refer to this as<<WDISP30>>.)  The signed 16-bit displacement is used on the MIPS, and the 23-bit displacement is used on the Alpha.  */
name|BFD_RELOC_32_PCREL_S2
block|,
name|BFD_RELOC_16_PCREL_S2
block|,
name|BFD_RELOC_23_PCREL_S2
block|,
comment|/* High 22 bits and low 10 bits of 32-bit value, placed into lower bits of the target word.  These are used on the SPARC.  */
name|BFD_RELOC_HI22
block|,
name|BFD_RELOC_LO10
block|,
comment|/* For systems that allocate a Global Pointer register, these are displacements off that register.  These relocation types are handled specially, because the value the register will have is decided relatively late.  */
name|BFD_RELOC_GPREL16
block|,
name|BFD_RELOC_GPREL32
block|,
comment|/* Reloc types used for i960/b.out.  */
name|BFD_RELOC_I960_CALLJ
block|,
comment|/* SPARC ELF relocations.  There is probably some overlap with other relocation types already defined.  */
name|BFD_RELOC_NONE
block|,
name|BFD_RELOC_SPARC_WDISP22
block|,
name|BFD_RELOC_SPARC22
block|,
name|BFD_RELOC_SPARC13
block|,
name|BFD_RELOC_SPARC_GOT10
block|,
name|BFD_RELOC_SPARC_GOT13
block|,
name|BFD_RELOC_SPARC_GOT22
block|,
name|BFD_RELOC_SPARC_PC10
block|,
name|BFD_RELOC_SPARC_PC22
block|,
name|BFD_RELOC_SPARC_WPLT30
block|,
name|BFD_RELOC_SPARC_COPY
block|,
name|BFD_RELOC_SPARC_GLOB_DAT
block|,
name|BFD_RELOC_SPARC_JMP_SLOT
block|,
name|BFD_RELOC_SPARC_RELATIVE
block|,
name|BFD_RELOC_SPARC_UA16
block|,
name|BFD_RELOC_SPARC_UA32
block|,
name|BFD_RELOC_SPARC_UA64
block|,
comment|/* I think these are specific to SPARC a.out (e.g., Sun 4).  */
name|BFD_RELOC_SPARC_BASE13
block|,
name|BFD_RELOC_SPARC_BASE22
block|,
comment|/* SPARC64 relocations  */
define|#
directive|define
name|BFD_RELOC_SPARC_64
value|BFD_RELOC_64
name|BFD_RELOC_SPARC_10
block|,
name|BFD_RELOC_SPARC_11
block|,
name|BFD_RELOC_SPARC_OLO10
block|,
name|BFD_RELOC_SPARC_HH22
block|,
name|BFD_RELOC_SPARC_HM10
block|,
name|BFD_RELOC_SPARC_LM22
block|,
name|BFD_RELOC_SPARC_PC_HH22
block|,
name|BFD_RELOC_SPARC_PC_HM10
block|,
name|BFD_RELOC_SPARC_PC_LM22
block|,
name|BFD_RELOC_SPARC_WDISP16
block|,
name|BFD_RELOC_SPARC_WDISP19
block|,
name|BFD_RELOC_SPARC_7
block|,
name|BFD_RELOC_SPARC_6
block|,
name|BFD_RELOC_SPARC_5
block|,
define|#
directive|define
name|BFD_RELOC_SPARC_DISP64
value|BFD_RELOC_64_PCREL
name|BFD_RELOC_SPARC_PLT32
block|,
name|BFD_RELOC_SPARC_PLT64
block|,
name|BFD_RELOC_SPARC_HIX22
block|,
name|BFD_RELOC_SPARC_LOX10
block|,
name|BFD_RELOC_SPARC_H44
block|,
name|BFD_RELOC_SPARC_M44
block|,
name|BFD_RELOC_SPARC_L44
block|,
name|BFD_RELOC_SPARC_REGISTER
block|,
comment|/* SPARC little endian relocation  */
name|BFD_RELOC_SPARC_REV32
block|,
comment|/* SPARC TLS relocations  */
name|BFD_RELOC_SPARC_TLS_GD_HI22
block|,
name|BFD_RELOC_SPARC_TLS_GD_LO10
block|,
name|BFD_RELOC_SPARC_TLS_GD_ADD
block|,
name|BFD_RELOC_SPARC_TLS_GD_CALL
block|,
name|BFD_RELOC_SPARC_TLS_LDM_HI22
block|,
name|BFD_RELOC_SPARC_TLS_LDM_LO10
block|,
name|BFD_RELOC_SPARC_TLS_LDM_ADD
block|,
name|BFD_RELOC_SPARC_TLS_LDM_CALL
block|,
name|BFD_RELOC_SPARC_TLS_LDO_HIX22
block|,
name|BFD_RELOC_SPARC_TLS_LDO_LOX10
block|,
name|BFD_RELOC_SPARC_TLS_LDO_ADD
block|,
name|BFD_RELOC_SPARC_TLS_IE_HI22
block|,
name|BFD_RELOC_SPARC_TLS_IE_LO10
block|,
name|BFD_RELOC_SPARC_TLS_IE_LD
block|,
name|BFD_RELOC_SPARC_TLS_IE_LDX
block|,
name|BFD_RELOC_SPARC_TLS_IE_ADD
block|,
name|BFD_RELOC_SPARC_TLS_LE_HIX22
block|,
name|BFD_RELOC_SPARC_TLS_LE_LOX10
block|,
name|BFD_RELOC_SPARC_TLS_DTPMOD32
block|,
name|BFD_RELOC_SPARC_TLS_DTPMOD64
block|,
name|BFD_RELOC_SPARC_TLS_DTPOFF32
block|,
name|BFD_RELOC_SPARC_TLS_DTPOFF64
block|,
name|BFD_RELOC_SPARC_TLS_TPOFF32
block|,
name|BFD_RELOC_SPARC_TLS_TPOFF64
block|,
comment|/* Alpha ECOFF and ELF relocations.  Some of these treat the symbol or "addend" in some special way. For GPDISP_HI16 ("gpdisp") relocations, the symbol is ignored when writing; when reading, it will be the absolute section symbol.  The addend is the displacement in bytes of the "lda" instruction from the "ldah" instruction (which is at the address of this reloc).  */
name|BFD_RELOC_ALPHA_GPDISP_HI16
block|,
comment|/* For GPDISP_LO16 ("ignore") relocations, the symbol is handled as with GPDISP_HI16 relocs.  The addend is ignored when writing the relocations out, and is filled in with the file's GP value on reading, for convenience.  */
name|BFD_RELOC_ALPHA_GPDISP_LO16
block|,
comment|/* The ELF GPDISP relocation is exactly the same as the GPDISP_HI16 relocation except that there is no accompanying GPDISP_LO16 relocation.  */
name|BFD_RELOC_ALPHA_GPDISP
block|,
comment|/* The Alpha LITERAL/LITUSE relocs are produced by a symbol reference; the assembler turns it into a LDQ instruction to load the address of the symbol, and then fills in a register in the real instruction.  The LITERAL reloc, at the LDQ instruction, refers to the .lita section symbol.  The addend is ignored when writing, but is filled in with the file's GP value on reading, for convenience, as with the GPDISP_LO16 reloc.  The ELF_LITERAL reloc is somewhere between 16_GOTOFF and GPDISP_LO16. It should refer to the symbol to be referenced, as with 16_GOTOFF, but it generates output not based on the position within the .got section, but relative to the GP value chosen for the file during the final link stage.  The LITUSE reloc, on the instruction using the loaded address, gives information to the linker that it might be able to use to optimize away some literal section references.  The symbol is ignored (read as the absolute section symbol), and the "addend" indicates the type of instruction using the register: 1 - "memory" fmt insn 2 - byte-manipulation (byte offset reg) 3 - jsr (target of branch)  */
name|BFD_RELOC_ALPHA_LITERAL
block|,
name|BFD_RELOC_ALPHA_ELF_LITERAL
block|,
name|BFD_RELOC_ALPHA_LITUSE
block|,
comment|/* The HINT relocation indicates a value that should be filled into the "hint" field of a jmp/jsr/ret instruction, for possible branch- prediction logic which may be provided on some processors.  */
name|BFD_RELOC_ALPHA_HINT
block|,
comment|/* The LINKAGE relocation outputs a linkage pair in the object file, which is filled by the linker.  */
name|BFD_RELOC_ALPHA_LINKAGE
block|,
comment|/* The CODEADDR relocation outputs a STO_CA in the object file, which is filled by the linker.  */
name|BFD_RELOC_ALPHA_CODEADDR
block|,
comment|/* The GPREL_HI/LO relocations together form a 32-bit offset from the GP register.  */
name|BFD_RELOC_ALPHA_GPREL_HI16
block|,
name|BFD_RELOC_ALPHA_GPREL_LO16
block|,
comment|/* Like BFD_RELOC_23_PCREL_S2, except that the source and target must share a common GP, and the target address is adjusted for STO_ALPHA_STD_GPLOAD.  */
name|BFD_RELOC_ALPHA_BRSGP
block|,
comment|/* Alpha thread-local storage relocations.  */
name|BFD_RELOC_ALPHA_TLSGD
block|,
name|BFD_RELOC_ALPHA_TLSLDM
block|,
name|BFD_RELOC_ALPHA_DTPMOD64
block|,
name|BFD_RELOC_ALPHA_GOTDTPREL16
block|,
name|BFD_RELOC_ALPHA_DTPREL64
block|,
name|BFD_RELOC_ALPHA_DTPREL_HI16
block|,
name|BFD_RELOC_ALPHA_DTPREL_LO16
block|,
name|BFD_RELOC_ALPHA_DTPREL16
block|,
name|BFD_RELOC_ALPHA_GOTTPREL16
block|,
name|BFD_RELOC_ALPHA_TPREL64
block|,
name|BFD_RELOC_ALPHA_TPREL_HI16
block|,
name|BFD_RELOC_ALPHA_TPREL_LO16
block|,
name|BFD_RELOC_ALPHA_TPREL16
block|,
comment|/* Bits 27..2 of the relocation address shifted right 2 bits; simple reloc otherwise.  */
name|BFD_RELOC_MIPS_JMP
block|,
comment|/* The MIPS16 jump instruction.  */
name|BFD_RELOC_MIPS16_JMP
block|,
comment|/* MIPS16 GP relative reloc.  */
name|BFD_RELOC_MIPS16_GPREL
block|,
comment|/* High 16 bits of 32-bit value; simple reloc.  */
name|BFD_RELOC_HI16
block|,
comment|/* High 16 bits of 32-bit value but the low 16 bits will be sign extended and added to form the final result.  If the low 16 bits form a negative number, we need to add one to the high value to compensate for the borrow when the low bits are added.  */
name|BFD_RELOC_HI16_S
block|,
comment|/* Low 16 bits.  */
name|BFD_RELOC_LO16
block|,
comment|/* Like BFD_RELOC_HI16_S, but PC relative.  */
name|BFD_RELOC_PCREL_HI16_S
block|,
comment|/* Like BFD_RELOC_LO16, but PC relative.  */
name|BFD_RELOC_PCREL_LO16
block|,
comment|/* Relocation against a MIPS literal section.  */
name|BFD_RELOC_MIPS_LITERAL
block|,
comment|/* MIPS ELF relocations.  */
name|BFD_RELOC_MIPS_GOT16
block|,
name|BFD_RELOC_MIPS_CALL16
block|,
name|BFD_RELOC_MIPS_GOT_HI16
block|,
name|BFD_RELOC_MIPS_GOT_LO16
block|,
name|BFD_RELOC_MIPS_CALL_HI16
block|,
name|BFD_RELOC_MIPS_CALL_LO16
block|,
name|BFD_RELOC_MIPS_SUB
block|,
name|BFD_RELOC_MIPS_GOT_PAGE
block|,
name|BFD_RELOC_MIPS_GOT_OFST
block|,
name|BFD_RELOC_MIPS_GOT_DISP
block|,
name|BFD_RELOC_MIPS_SHIFT5
block|,
name|BFD_RELOC_MIPS_SHIFT6
block|,
name|BFD_RELOC_MIPS_INSERT_A
block|,
name|BFD_RELOC_MIPS_INSERT_B
block|,
name|BFD_RELOC_MIPS_DELETE
block|,
name|BFD_RELOC_MIPS_HIGHEST
block|,
name|BFD_RELOC_MIPS_HIGHER
block|,
name|BFD_RELOC_MIPS_SCN_DISP
block|,
name|BFD_RELOC_MIPS_REL16
block|,
name|BFD_RELOC_MIPS_RELGOT
block|,
name|BFD_RELOC_MIPS_JALR
block|,
comment|/* Fujitsu Frv Relocations.  */
name|BFD_RELOC_FRV_LABEL16
block|,
name|BFD_RELOC_FRV_LABEL24
block|,
name|BFD_RELOC_FRV_LO16
block|,
name|BFD_RELOC_FRV_HI16
block|,
name|BFD_RELOC_FRV_GPREL12
block|,
name|BFD_RELOC_FRV_GPRELU12
block|,
name|BFD_RELOC_FRV_GPREL32
block|,
name|BFD_RELOC_FRV_GPRELHI
block|,
name|BFD_RELOC_FRV_GPRELLO
block|,
name|BFD_RELOC_FRV_GOT12
block|,
name|BFD_RELOC_FRV_GOTHI
block|,
name|BFD_RELOC_FRV_GOTLO
block|,
name|BFD_RELOC_FRV_FUNCDESC
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOT12
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOTHI
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOTLO
block|,
name|BFD_RELOC_FRV_FUNCDESC_VALUE
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOTOFF12
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOTOFFHI
block|,
name|BFD_RELOC_FRV_FUNCDESC_GOTOFFLO
block|,
name|BFD_RELOC_FRV_GOTOFF12
block|,
name|BFD_RELOC_FRV_GOTOFFHI
block|,
name|BFD_RELOC_FRV_GOTOFFLO
block|,
comment|/* This is a 24bit GOT-relative reloc for the mn10300.  */
name|BFD_RELOC_MN10300_GOTOFF24
block|,
comment|/* This is a 32bit GOT-relative reloc for the mn10300, offset by two bytes in the instruction.  */
name|BFD_RELOC_MN10300_GOT32
block|,
comment|/* This is a 24bit GOT-relative reloc for the mn10300, offset by two bytes in the instruction.  */
name|BFD_RELOC_MN10300_GOT24
block|,
comment|/* This is a 16bit GOT-relative reloc for the mn10300, offset by two bytes in the instruction.  */
name|BFD_RELOC_MN10300_GOT16
block|,
comment|/* Copy symbol at runtime.  */
name|BFD_RELOC_MN10300_COPY
block|,
comment|/* Create GOT entry.  */
name|BFD_RELOC_MN10300_GLOB_DAT
block|,
comment|/* Create PLT entry.  */
name|BFD_RELOC_MN10300_JMP_SLOT
block|,
comment|/* Adjust by program base.  */
name|BFD_RELOC_MN10300_RELATIVE
block|,
comment|/* i386/elf relocations  */
name|BFD_RELOC_386_GOT32
block|,
name|BFD_RELOC_386_PLT32
block|,
name|BFD_RELOC_386_COPY
block|,
name|BFD_RELOC_386_GLOB_DAT
block|,
name|BFD_RELOC_386_JUMP_SLOT
block|,
name|BFD_RELOC_386_RELATIVE
block|,
name|BFD_RELOC_386_GOTOFF
block|,
name|BFD_RELOC_386_GOTPC
block|,
name|BFD_RELOC_386_TLS_TPOFF
block|,
name|BFD_RELOC_386_TLS_IE
block|,
name|BFD_RELOC_386_TLS_GOTIE
block|,
name|BFD_RELOC_386_TLS_LE
block|,
name|BFD_RELOC_386_TLS_GD
block|,
name|BFD_RELOC_386_TLS_LDM
block|,
name|BFD_RELOC_386_TLS_LDO_32
block|,
name|BFD_RELOC_386_TLS_IE_32
block|,
name|BFD_RELOC_386_TLS_LE_32
block|,
name|BFD_RELOC_386_TLS_DTPMOD32
block|,
name|BFD_RELOC_386_TLS_DTPOFF32
block|,
name|BFD_RELOC_386_TLS_TPOFF32
block|,
comment|/* x86-64/elf relocations  */
name|BFD_RELOC_X86_64_GOT32
block|,
name|BFD_RELOC_X86_64_PLT32
block|,
name|BFD_RELOC_X86_64_COPY
block|,
name|BFD_RELOC_X86_64_GLOB_DAT
block|,
name|BFD_RELOC_X86_64_JUMP_SLOT
block|,
name|BFD_RELOC_X86_64_RELATIVE
block|,
name|BFD_RELOC_X86_64_GOTPCREL
block|,
name|BFD_RELOC_X86_64_32S
block|,
name|BFD_RELOC_X86_64_DTPMOD64
block|,
name|BFD_RELOC_X86_64_DTPOFF64
block|,
name|BFD_RELOC_X86_64_TPOFF64
block|,
name|BFD_RELOC_X86_64_TLSGD
block|,
name|BFD_RELOC_X86_64_TLSLD
block|,
name|BFD_RELOC_X86_64_DTPOFF32
block|,
name|BFD_RELOC_X86_64_GOTTPOFF
block|,
name|BFD_RELOC_X86_64_TPOFF32
block|,
comment|/* ns32k relocations  */
name|BFD_RELOC_NS32K_IMM_8
block|,
name|BFD_RELOC_NS32K_IMM_16
block|,
name|BFD_RELOC_NS32K_IMM_32
block|,
name|BFD_RELOC_NS32K_IMM_8_PCREL
block|,
name|BFD_RELOC_NS32K_IMM_16_PCREL
block|,
name|BFD_RELOC_NS32K_IMM_32_PCREL
block|,
name|BFD_RELOC_NS32K_DISP_8
block|,
name|BFD_RELOC_NS32K_DISP_16
block|,
name|BFD_RELOC_NS32K_DISP_32
block|,
name|BFD_RELOC_NS32K_DISP_8_PCREL
block|,
name|BFD_RELOC_NS32K_DISP_16_PCREL
block|,
name|BFD_RELOC_NS32K_DISP_32_PCREL
block|,
comment|/* PDP11 relocations  */
name|BFD_RELOC_PDP11_DISP_8_PCREL
block|,
name|BFD_RELOC_PDP11_DISP_6_PCREL
block|,
comment|/* Picojava relocs.  Not all of these appear in object files.  */
name|BFD_RELOC_PJ_CODE_HI16
block|,
name|BFD_RELOC_PJ_CODE_LO16
block|,
name|BFD_RELOC_PJ_CODE_DIR16
block|,
name|BFD_RELOC_PJ_CODE_DIR32
block|,
name|BFD_RELOC_PJ_CODE_REL16
block|,
name|BFD_RELOC_PJ_CODE_REL32
block|,
comment|/* Power(rs6000) and PowerPC relocations.  */
name|BFD_RELOC_PPC_B26
block|,
name|BFD_RELOC_PPC_BA26
block|,
name|BFD_RELOC_PPC_TOC16
block|,
name|BFD_RELOC_PPC_B16
block|,
name|BFD_RELOC_PPC_B16_BRTAKEN
block|,
name|BFD_RELOC_PPC_B16_BRNTAKEN
block|,
name|BFD_RELOC_PPC_BA16
block|,
name|BFD_RELOC_PPC_BA16_BRTAKEN
block|,
name|BFD_RELOC_PPC_BA16_BRNTAKEN
block|,
name|BFD_RELOC_PPC_COPY
block|,
name|BFD_RELOC_PPC_GLOB_DAT
block|,
name|BFD_RELOC_PPC_JMP_SLOT
block|,
name|BFD_RELOC_PPC_RELATIVE
block|,
name|BFD_RELOC_PPC_LOCAL24PC
block|,
name|BFD_RELOC_PPC_EMB_NADDR32
block|,
name|BFD_RELOC_PPC_EMB_NADDR16
block|,
name|BFD_RELOC_PPC_EMB_NADDR16_LO
block|,
name|BFD_RELOC_PPC_EMB_NADDR16_HI
block|,
name|BFD_RELOC_PPC_EMB_NADDR16_HA
block|,
name|BFD_RELOC_PPC_EMB_SDAI16
block|,
name|BFD_RELOC_PPC_EMB_SDA2I16
block|,
name|BFD_RELOC_PPC_EMB_SDA2REL
block|,
name|BFD_RELOC_PPC_EMB_SDA21
block|,
name|BFD_RELOC_PPC_EMB_MRKREF
block|,
name|BFD_RELOC_PPC_EMB_RELSEC16
block|,
name|BFD_RELOC_PPC_EMB_RELST_LO
block|,
name|BFD_RELOC_PPC_EMB_RELST_HI
block|,
name|BFD_RELOC_PPC_EMB_RELST_HA
block|,
name|BFD_RELOC_PPC_EMB_BIT_FLD
block|,
name|BFD_RELOC_PPC_EMB_RELSDA
block|,
name|BFD_RELOC_PPC64_HIGHER
block|,
name|BFD_RELOC_PPC64_HIGHER_S
block|,
name|BFD_RELOC_PPC64_HIGHEST
block|,
name|BFD_RELOC_PPC64_HIGHEST_S
block|,
name|BFD_RELOC_PPC64_TOC16_LO
block|,
name|BFD_RELOC_PPC64_TOC16_HI
block|,
name|BFD_RELOC_PPC64_TOC16_HA
block|,
name|BFD_RELOC_PPC64_TOC
block|,
name|BFD_RELOC_PPC64_PLTGOT16
block|,
name|BFD_RELOC_PPC64_PLTGOT16_LO
block|,
name|BFD_RELOC_PPC64_PLTGOT16_HI
block|,
name|BFD_RELOC_PPC64_PLTGOT16_HA
block|,
name|BFD_RELOC_PPC64_ADDR16_DS
block|,
name|BFD_RELOC_PPC64_ADDR16_LO_DS
block|,
name|BFD_RELOC_PPC64_GOT16_DS
block|,
name|BFD_RELOC_PPC64_GOT16_LO_DS
block|,
name|BFD_RELOC_PPC64_PLT16_LO_DS
block|,
name|BFD_RELOC_PPC64_SECTOFF_DS
block|,
name|BFD_RELOC_PPC64_SECTOFF_LO_DS
block|,
name|BFD_RELOC_PPC64_TOC16_DS
block|,
name|BFD_RELOC_PPC64_TOC16_LO_DS
block|,
name|BFD_RELOC_PPC64_PLTGOT16_DS
block|,
name|BFD_RELOC_PPC64_PLTGOT16_LO_DS
block|,
comment|/* PowerPC and PowerPC64 thread-local storage relocations.  */
name|BFD_RELOC_PPC_TLS
block|,
name|BFD_RELOC_PPC_DTPMOD
block|,
name|BFD_RELOC_PPC_TPREL16
block|,
name|BFD_RELOC_PPC_TPREL16_LO
block|,
name|BFD_RELOC_PPC_TPREL16_HI
block|,
name|BFD_RELOC_PPC_TPREL16_HA
block|,
name|BFD_RELOC_PPC_TPREL
block|,
name|BFD_RELOC_PPC_DTPREL16
block|,
name|BFD_RELOC_PPC_DTPREL16_LO
block|,
name|BFD_RELOC_PPC_DTPREL16_HI
block|,
name|BFD_RELOC_PPC_DTPREL16_HA
block|,
name|BFD_RELOC_PPC_DTPREL
block|,
name|BFD_RELOC_PPC_GOT_TLSGD16
block|,
name|BFD_RELOC_PPC_GOT_TLSGD16_LO
block|,
name|BFD_RELOC_PPC_GOT_TLSGD16_HI
block|,
name|BFD_RELOC_PPC_GOT_TLSGD16_HA
block|,
name|BFD_RELOC_PPC_GOT_TLSLD16
block|,
name|BFD_RELOC_PPC_GOT_TLSLD16_LO
block|,
name|BFD_RELOC_PPC_GOT_TLSLD16_HI
block|,
name|BFD_RELOC_PPC_GOT_TLSLD16_HA
block|,
name|BFD_RELOC_PPC_GOT_TPREL16
block|,
name|BFD_RELOC_PPC_GOT_TPREL16_LO
block|,
name|BFD_RELOC_PPC_GOT_TPREL16_HI
block|,
name|BFD_RELOC_PPC_GOT_TPREL16_HA
block|,
name|BFD_RELOC_PPC_GOT_DTPREL16
block|,
name|BFD_RELOC_PPC_GOT_DTPREL16_LO
block|,
name|BFD_RELOC_PPC_GOT_DTPREL16_HI
block|,
name|BFD_RELOC_PPC_GOT_DTPREL16_HA
block|,
name|BFD_RELOC_PPC64_TPREL16_DS
block|,
name|BFD_RELOC_PPC64_TPREL16_LO_DS
block|,
name|BFD_RELOC_PPC64_TPREL16_HIGHER
block|,
name|BFD_RELOC_PPC64_TPREL16_HIGHERA
block|,
name|BFD_RELOC_PPC64_TPREL16_HIGHEST
block|,
name|BFD_RELOC_PPC64_TPREL16_HIGHESTA
block|,
name|BFD_RELOC_PPC64_DTPREL16_DS
block|,
name|BFD_RELOC_PPC64_DTPREL16_LO_DS
block|,
name|BFD_RELOC_PPC64_DTPREL16_HIGHER
block|,
name|BFD_RELOC_PPC64_DTPREL16_HIGHERA
block|,
name|BFD_RELOC_PPC64_DTPREL16_HIGHEST
block|,
name|BFD_RELOC_PPC64_DTPREL16_HIGHESTA
block|,
comment|/* IBM 370/390 relocations  */
name|BFD_RELOC_I370_D12
block|,
comment|/* The type of reloc used to build a constructor table - at the moment probably a 32 bit wide absolute relocation, but the target can choose. It generally does map to one of the other relocation types.  */
name|BFD_RELOC_CTOR
block|,
comment|/* ARM 26 bit pc-relative branch.  The lowest two bits must be zero and are not stored in the instruction.  */
name|BFD_RELOC_ARM_PCREL_BRANCH
block|,
comment|/* ARM 26 bit pc-relative branch.  The lowest bit must be zero and is not stored in the instruction.  The 2nd lowest bit comes from a 1 bit field in the instruction.  */
name|BFD_RELOC_ARM_PCREL_BLX
block|,
comment|/* Thumb 22 bit pc-relative branch.  The lowest bit must be zero and is not stored in the instruction.  The 2nd lowest bit comes from a 1 bit field in the instruction.  */
name|BFD_RELOC_THUMB_PCREL_BLX
block|,
comment|/* These relocs are only used within the ARM assembler.  They are not (at present) written to any object files.  */
name|BFD_RELOC_ARM_IMMEDIATE
block|,
name|BFD_RELOC_ARM_ADRL_IMMEDIATE
block|,
name|BFD_RELOC_ARM_OFFSET_IMM
block|,
name|BFD_RELOC_ARM_SHIFT_IMM
block|,
name|BFD_RELOC_ARM_SWI
block|,
name|BFD_RELOC_ARM_MULTI
block|,
name|BFD_RELOC_ARM_CP_OFF_IMM
block|,
name|BFD_RELOC_ARM_CP_OFF_IMM_S2
block|,
name|BFD_RELOC_ARM_ADR_IMM
block|,
name|BFD_RELOC_ARM_LDR_IMM
block|,
name|BFD_RELOC_ARM_LITERAL
block|,
name|BFD_RELOC_ARM_IN_POOL
block|,
name|BFD_RELOC_ARM_OFFSET_IMM8
block|,
name|BFD_RELOC_ARM_HWLITERAL
block|,
name|BFD_RELOC_ARM_THUMB_ADD
block|,
name|BFD_RELOC_ARM_THUMB_IMM
block|,
name|BFD_RELOC_ARM_THUMB_SHIFT
block|,
name|BFD_RELOC_ARM_THUMB_OFFSET
block|,
name|BFD_RELOC_ARM_GOT12
block|,
name|BFD_RELOC_ARM_GOT32
block|,
name|BFD_RELOC_ARM_JUMP_SLOT
block|,
name|BFD_RELOC_ARM_COPY
block|,
name|BFD_RELOC_ARM_GLOB_DAT
block|,
name|BFD_RELOC_ARM_PLT32
block|,
name|BFD_RELOC_ARM_RELATIVE
block|,
name|BFD_RELOC_ARM_GOTOFF
block|,
name|BFD_RELOC_ARM_GOTPC
block|,
comment|/* Renesas / SuperH SH relocs.  Not all of these appear in object files.  */
name|BFD_RELOC_SH_PCDISP8BY2
block|,
name|BFD_RELOC_SH_PCDISP12BY2
block|,
name|BFD_RELOC_SH_IMM4
block|,
name|BFD_RELOC_SH_IMM4BY2
block|,
name|BFD_RELOC_SH_IMM4BY4
block|,
name|BFD_RELOC_SH_IMM8
block|,
name|BFD_RELOC_SH_IMM8BY2
block|,
name|BFD_RELOC_SH_IMM8BY4
block|,
name|BFD_RELOC_SH_PCRELIMM8BY2
block|,
name|BFD_RELOC_SH_PCRELIMM8BY4
block|,
name|BFD_RELOC_SH_SWITCH16
block|,
name|BFD_RELOC_SH_SWITCH32
block|,
name|BFD_RELOC_SH_USES
block|,
name|BFD_RELOC_SH_COUNT
block|,
name|BFD_RELOC_SH_ALIGN
block|,
name|BFD_RELOC_SH_CODE
block|,
name|BFD_RELOC_SH_DATA
block|,
name|BFD_RELOC_SH_LABEL
block|,
name|BFD_RELOC_SH_LOOP_START
block|,
name|BFD_RELOC_SH_LOOP_END
block|,
name|BFD_RELOC_SH_COPY
block|,
name|BFD_RELOC_SH_GLOB_DAT
block|,
name|BFD_RELOC_SH_JMP_SLOT
block|,
name|BFD_RELOC_SH_RELATIVE
block|,
name|BFD_RELOC_SH_GOTPC
block|,
name|BFD_RELOC_SH_GOT_LOW16
block|,
name|BFD_RELOC_SH_GOT_MEDLOW16
block|,
name|BFD_RELOC_SH_GOT_MEDHI16
block|,
name|BFD_RELOC_SH_GOT_HI16
block|,
name|BFD_RELOC_SH_GOTPLT_LOW16
block|,
name|BFD_RELOC_SH_GOTPLT_MEDLOW16
block|,
name|BFD_RELOC_SH_GOTPLT_MEDHI16
block|,
name|BFD_RELOC_SH_GOTPLT_HI16
block|,
name|BFD_RELOC_SH_PLT_LOW16
block|,
name|BFD_RELOC_SH_PLT_MEDLOW16
block|,
name|BFD_RELOC_SH_PLT_MEDHI16
block|,
name|BFD_RELOC_SH_PLT_HI16
block|,
name|BFD_RELOC_SH_GOTOFF_LOW16
block|,
name|BFD_RELOC_SH_GOTOFF_MEDLOW16
block|,
name|BFD_RELOC_SH_GOTOFF_MEDHI16
block|,
name|BFD_RELOC_SH_GOTOFF_HI16
block|,
name|BFD_RELOC_SH_GOTPC_LOW16
block|,
name|BFD_RELOC_SH_GOTPC_MEDLOW16
block|,
name|BFD_RELOC_SH_GOTPC_MEDHI16
block|,
name|BFD_RELOC_SH_GOTPC_HI16
block|,
name|BFD_RELOC_SH_COPY64
block|,
name|BFD_RELOC_SH_GLOB_DAT64
block|,
name|BFD_RELOC_SH_JMP_SLOT64
block|,
name|BFD_RELOC_SH_RELATIVE64
block|,
name|BFD_RELOC_SH_GOT10BY4
block|,
name|BFD_RELOC_SH_GOT10BY8
block|,
name|BFD_RELOC_SH_GOTPLT10BY4
block|,
name|BFD_RELOC_SH_GOTPLT10BY8
block|,
name|BFD_RELOC_SH_GOTPLT32
block|,
name|BFD_RELOC_SH_SHMEDIA_CODE
block|,
name|BFD_RELOC_SH_IMMU5
block|,
name|BFD_RELOC_SH_IMMS6
block|,
name|BFD_RELOC_SH_IMMS6BY32
block|,
name|BFD_RELOC_SH_IMMU6
block|,
name|BFD_RELOC_SH_IMMS10
block|,
name|BFD_RELOC_SH_IMMS10BY2
block|,
name|BFD_RELOC_SH_IMMS10BY4
block|,
name|BFD_RELOC_SH_IMMS10BY8
block|,
name|BFD_RELOC_SH_IMMS16
block|,
name|BFD_RELOC_SH_IMMU16
block|,
name|BFD_RELOC_SH_IMM_LOW16
block|,
name|BFD_RELOC_SH_IMM_LOW16_PCREL
block|,
name|BFD_RELOC_SH_IMM_MEDLOW16
block|,
name|BFD_RELOC_SH_IMM_MEDLOW16_PCREL
block|,
name|BFD_RELOC_SH_IMM_MEDHI16
block|,
name|BFD_RELOC_SH_IMM_MEDHI16_PCREL
block|,
name|BFD_RELOC_SH_IMM_HI16
block|,
name|BFD_RELOC_SH_IMM_HI16_PCREL
block|,
name|BFD_RELOC_SH_PT_16
block|,
name|BFD_RELOC_SH_TLS_GD_32
block|,
name|BFD_RELOC_SH_TLS_LD_32
block|,
name|BFD_RELOC_SH_TLS_LDO_32
block|,
name|BFD_RELOC_SH_TLS_IE_32
block|,
name|BFD_RELOC_SH_TLS_LE_32
block|,
name|BFD_RELOC_SH_TLS_DTPMOD32
block|,
name|BFD_RELOC_SH_TLS_DTPOFF32
block|,
name|BFD_RELOC_SH_TLS_TPOFF32
block|,
comment|/* Thumb 23-, 12- and 9-bit pc-relative branches.  The lowest bit must be zero and is not stored in the instruction.  */
name|BFD_RELOC_THUMB_PCREL_BRANCH9
block|,
name|BFD_RELOC_THUMB_PCREL_BRANCH12
block|,
name|BFD_RELOC_THUMB_PCREL_BRANCH23
block|,
comment|/* ARC Cores relocs. ARC 22 bit pc-relative branch.  The lowest two bits must be zero and are not stored in the instruction.  The high 20 bits are installed in bits 26 through 7 of the instruction.  */
name|BFD_RELOC_ARC_B22_PCREL
block|,
comment|/* ARC 26 bit absolute branch.  The lowest two bits must be zero and are not stored in the instruction.  The high 24 bits are installed in bits 23 through 0.  */
name|BFD_RELOC_ARC_B26
block|,
comment|/* Mitsubishi D10V relocs. This is a 10-bit reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_D10V_10_PCREL_R
block|,
comment|/* Mitsubishi D10V relocs. This is a 10-bit reloc with the right 2 bits assumed to be 0.  This is the same as the previous reloc except it is in the left container, i.e., shifted left 15 bits.  */
name|BFD_RELOC_D10V_10_PCREL_L
block|,
comment|/* This is an 18-bit reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_D10V_18
block|,
comment|/* This is an 18-bit reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_D10V_18_PCREL
block|,
comment|/* Mitsubishi D30V relocs. This is a 6-bit absolute reloc.  */
name|BFD_RELOC_D30V_6
block|,
comment|/* This is a 6-bit pc-relative reloc with the right 3 bits assumed to be 0.  */
name|BFD_RELOC_D30V_9_PCREL
block|,
comment|/* This is a 6-bit pc-relative reloc with the right 3 bits assumed to be 0. Same as the previous reloc but on the right side of the container.  */
name|BFD_RELOC_D30V_9_PCREL_R
block|,
comment|/* This is a 12-bit absolute reloc with the right 3 bitsassumed to be 0.  */
name|BFD_RELOC_D30V_15
block|,
comment|/* This is a 12-bit pc-relative reloc with the right 3 bits assumed to be 0.  */
name|BFD_RELOC_D30V_15_PCREL
block|,
comment|/* This is a 12-bit pc-relative reloc with the right 3 bits assumed to be 0. Same as the previous reloc but on the right side of the container.  */
name|BFD_RELOC_D30V_15_PCREL_R
block|,
comment|/* This is an 18-bit absolute reloc with the right 3 bits assumed to be 0.  */
name|BFD_RELOC_D30V_21
block|,
comment|/* This is an 18-bit pc-relative reloc with the right 3 bits assumed to be 0.  */
name|BFD_RELOC_D30V_21_PCREL
block|,
comment|/* This is an 18-bit pc-relative reloc with the right 3 bits assumed to be 0. Same as the previous reloc but on the right side of the container.  */
name|BFD_RELOC_D30V_21_PCREL_R
block|,
comment|/* This is a 32-bit absolute reloc.  */
name|BFD_RELOC_D30V_32
block|,
comment|/* This is a 32-bit pc-relative reloc.  */
name|BFD_RELOC_D30V_32_PCREL
block|,
comment|/* DLX relocs  */
name|BFD_RELOC_DLX_HI16_S
block|,
comment|/* DLX relocs  */
name|BFD_RELOC_DLX_LO16
block|,
comment|/* DLX relocs  */
name|BFD_RELOC_DLX_JMP26
block|,
comment|/* Renesas M32R (formerly Mitsubishi M32R) relocs. This is a 24 bit absolute address.  */
name|BFD_RELOC_M32R_24
block|,
comment|/* This is a 10-bit pc-relative reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_M32R_10_PCREL
block|,
comment|/* This is an 18-bit reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_M32R_18_PCREL
block|,
comment|/* This is a 26-bit reloc with the right 2 bits assumed to be 0.  */
name|BFD_RELOC_M32R_26_PCREL
block|,
comment|/* This is a 16-bit reloc containing the high 16 bits of an address used when the lower 16 bits are treated as unsigned.  */
name|BFD_RELOC_M32R_HI16_ULO
block|,
comment|/* This is a 16-bit reloc containing the high 16 bits of an address used when the lower 16 bits are treated as signed.  */
name|BFD_RELOC_M32R_HI16_SLO
block|,
comment|/* This is a 16-bit reloc containing the lower 16 bits of an address.  */
name|BFD_RELOC_M32R_LO16
block|,
comment|/* This is a 16-bit reloc containing the small data area offset for use in add3, load, and store instructions.  */
name|BFD_RELOC_M32R_SDA16
block|,
comment|/* For PIC.  */
name|BFD_RELOC_M32R_GOT24
block|,
name|BFD_RELOC_M32R_26_PLTREL
block|,
name|BFD_RELOC_M32R_COPY
block|,
name|BFD_RELOC_M32R_GLOB_DAT
block|,
name|BFD_RELOC_M32R_JMP_SLOT
block|,
name|BFD_RELOC_M32R_RELATIVE
block|,
name|BFD_RELOC_M32R_GOTOFF
block|,
name|BFD_RELOC_M32R_GOTPC24
block|,
name|BFD_RELOC_M32R_GOT16_HI_ULO
block|,
name|BFD_RELOC_M32R_GOT16_HI_SLO
block|,
name|BFD_RELOC_M32R_GOT16_LO
block|,
name|BFD_RELOC_M32R_GOTPC_HI_ULO
block|,
name|BFD_RELOC_M32R_GOTPC_HI_SLO
block|,
name|BFD_RELOC_M32R_GOTPC_LO
block|,
comment|/* This is a 9-bit reloc  */
name|BFD_RELOC_V850_9_PCREL
block|,
comment|/* This is a 22-bit reloc  */
name|BFD_RELOC_V850_22_PCREL
block|,
comment|/* This is a 16 bit offset from the short data area pointer.  */
name|BFD_RELOC_V850_SDA_16_16_OFFSET
block|,
comment|/* This is a 16 bit offset (of which only 15 bits are used) from the short data area pointer.  */
name|BFD_RELOC_V850_SDA_15_16_OFFSET
block|,
comment|/* This is a 16 bit offset from the zero data area pointer.  */
name|BFD_RELOC_V850_ZDA_16_16_OFFSET
block|,
comment|/* This is a 16 bit offset (of which only 15 bits are used) from the zero data area pointer.  */
name|BFD_RELOC_V850_ZDA_15_16_OFFSET
block|,
comment|/* This is an 8 bit offset (of which only 6 bits are used) from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_6_8_OFFSET
block|,
comment|/* This is an 8bit offset (of which only 7 bits are used) from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_7_8_OFFSET
block|,
comment|/* This is a 7 bit offset from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_7_7_OFFSET
block|,
comment|/* This is a 16 bit offset from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_16_16_OFFSET
block|,
comment|/* This is a 5 bit offset (of which only 4 bits are used) from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_4_5_OFFSET
block|,
comment|/* This is a 4 bit offset from the tiny data area pointer.  */
name|BFD_RELOC_V850_TDA_4_4_OFFSET
block|,
comment|/* This is a 16 bit offset from the short data area pointer, with the bits placed non-contiguously in the instruction.  */
name|BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET
block|,
comment|/* This is a 16 bit offset from the zero data area pointer, with the bits placed non-contiguously in the instruction.  */
name|BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET
block|,
comment|/* This is a 6 bit offset from the call table base pointer.  */
name|BFD_RELOC_V850_CALLT_6_7_OFFSET
block|,
comment|/* This is a 16 bit offset from the call table base pointer.  */
name|BFD_RELOC_V850_CALLT_16_16_OFFSET
block|,
comment|/* Used for relaxing indirect function calls.  */
name|BFD_RELOC_V850_LONGCALL
block|,
comment|/* Used for relaxing indirect jumps.  */
name|BFD_RELOC_V850_LONGJUMP
block|,
comment|/* Used to maintain alignment whilst relaxing.  */
name|BFD_RELOC_V850_ALIGN
block|,
comment|/* This is a 32bit pcrel reloc for the mn10300, offset by two bytes in the instruction.  */
name|BFD_RELOC_MN10300_32_PCREL
block|,
comment|/* This is a 16bit pcrel reloc for the mn10300, offset by two bytes in the instruction.  */
name|BFD_RELOC_MN10300_16_PCREL
block|,
comment|/* This is a 8bit DP reloc for the tms320c30, where the most significant 8 bits of a 24 bit word are placed into the least significant 8 bits of the opcode.  */
name|BFD_RELOC_TIC30_LDP
block|,
comment|/* This is a 7bit reloc for the tms320c54x, where the least significant 7 bits of a 16 bit word are placed into the least significant 7 bits of the opcode.  */
name|BFD_RELOC_TIC54X_PARTLS7
block|,
comment|/* This is a 9bit DP reloc for the tms320c54x, where the most significant 9 bits of a 16 bit word are placed into the least significant 9 bits of the opcode.  */
name|BFD_RELOC_TIC54X_PARTMS9
block|,
comment|/* This is an extended address 23-bit reloc for the tms320c54x.  */
name|BFD_RELOC_TIC54X_23
block|,
comment|/* This is a 16-bit reloc for the tms320c54x, where the least significant 16 bits of a 23-bit extended address are placed into the opcode.  */
name|BFD_RELOC_TIC54X_16_OF_23
block|,
comment|/* This is a reloc for the tms320c54x, where the most significant 7 bits of a 23-bit extended address are placed into the opcode.  */
name|BFD_RELOC_TIC54X_MS7_OF_23
block|,
comment|/* This is a 48 bit reloc for the FR30 that stores 32 bits.  */
name|BFD_RELOC_FR30_48
block|,
comment|/* This is a 32 bit reloc for the FR30 that stores 20 bits split up into two sections.  */
name|BFD_RELOC_FR30_20
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores a 6 bit word offset in 4 bits.  */
name|BFD_RELOC_FR30_6_IN_4
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores an 8 bit byte offset into 8 bits.  */
name|BFD_RELOC_FR30_8_IN_8
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores a 9 bit short offset into 8 bits.  */
name|BFD_RELOC_FR30_9_IN_8
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores a 10 bit word offset into 8 bits.  */
name|BFD_RELOC_FR30_10_IN_8
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores a 9 bit pc relative short offset into 8 bits.  */
name|BFD_RELOC_FR30_9_PCREL
block|,
comment|/* This is a 16 bit reloc for the FR30 that stores a 12 bit pc relative short offset into 11 bits.  */
name|BFD_RELOC_FR30_12_PCREL
block|,
comment|/* Motorola Mcore relocations.  */
name|BFD_RELOC_MCORE_PCREL_IMM8BY4
block|,
name|BFD_RELOC_MCORE_PCREL_IMM11BY2
block|,
name|BFD_RELOC_MCORE_PCREL_IMM4BY2
block|,
name|BFD_RELOC_MCORE_PCREL_32
block|,
name|BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2
block|,
name|BFD_RELOC_MCORE_RVA
block|,
comment|/* These are relocations for the GETA instruction.  */
name|BFD_RELOC_MMIX_GETA
block|,
name|BFD_RELOC_MMIX_GETA_1
block|,
name|BFD_RELOC_MMIX_GETA_2
block|,
name|BFD_RELOC_MMIX_GETA_3
block|,
comment|/* These are relocations for a conditional branch instruction.  */
name|BFD_RELOC_MMIX_CBRANCH
block|,
name|BFD_RELOC_MMIX_CBRANCH_J
block|,
name|BFD_RELOC_MMIX_CBRANCH_1
block|,
name|BFD_RELOC_MMIX_CBRANCH_2
block|,
name|BFD_RELOC_MMIX_CBRANCH_3
block|,
comment|/* These are relocations for the PUSHJ instruction.  */
name|BFD_RELOC_MMIX_PUSHJ
block|,
name|BFD_RELOC_MMIX_PUSHJ_1
block|,
name|BFD_RELOC_MMIX_PUSHJ_2
block|,
name|BFD_RELOC_MMIX_PUSHJ_3
block|,
name|BFD_RELOC_MMIX_PUSHJ_STUBBABLE
block|,
comment|/* These are relocations for the JMP instruction.  */
name|BFD_RELOC_MMIX_JMP
block|,
name|BFD_RELOC_MMIX_JMP_1
block|,
name|BFD_RELOC_MMIX_JMP_2
block|,
name|BFD_RELOC_MMIX_JMP_3
block|,
comment|/* This is a relocation for a relative address as in a GETA instruction or a branch.  */
name|BFD_RELOC_MMIX_ADDR19
block|,
comment|/* This is a relocation for a relative address as in a JMP instruction.  */
name|BFD_RELOC_MMIX_ADDR27
block|,
comment|/* This is a relocation for an instruction field that may be a general register or a value 0..255.  */
name|BFD_RELOC_MMIX_REG_OR_BYTE
block|,
comment|/* This is a relocation for an instruction field that may be a general register.  */
name|BFD_RELOC_MMIX_REG
block|,
comment|/* This is a relocation for two instruction fields holding a register and an offset, the equivalent of the relocation.  */
name|BFD_RELOC_MMIX_BASE_PLUS_OFFSET
block|,
comment|/* This relocation is an assertion that the expression is not allocated as a global register.  It does not modify contents.  */
name|BFD_RELOC_MMIX_LOCAL
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit pc relative short offset into 7 bits.  */
name|BFD_RELOC_AVR_7_PCREL
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 13 bit pc relative short offset into 12 bits.  */
name|BFD_RELOC_AVR_13_PCREL
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 17 bit value (usually program memory address) into 16 bits.  */
name|BFD_RELOC_AVR_16_PM
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (usually data memory address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_LO8_LDI
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (high 8 bit of data memory address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_HI8_LDI
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (most high 8 bit of program memory address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_HH8_LDI
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (usually data memory address) into 8 bit immediate value of SUBI insn.  */
name|BFD_RELOC_AVR_LO8_LDI_NEG
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (high 8 bit of data memory address) into 8 bit immediate value of SUBI insn.  */
name|BFD_RELOC_AVR_HI8_LDI_NEG
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (most high 8 bit of program memory address) into 8 bit immediate value of LDI or SUBI insn.  */
name|BFD_RELOC_AVR_HH8_LDI_NEG
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (usually command address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_LO8_LDI_PM
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (high 8 bit of command address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_HI8_LDI_PM
block|,
comment|/* This is a 16 bit reloc for the AVR that stores 8 bit value (most high 8 bit of command address) into 8 bit immediate value of LDI insn.  */
name|BFD_RELOC_AVR_HH8_LDI_PM
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (usually command address) into 8 bit immediate value of SUBI insn.  */
name|BFD_RELOC_AVR_LO8_LDI_PM_NEG
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (high 8 bit of 16 bit command address) into 8 bit immediate value of SUBI insn.  */
name|BFD_RELOC_AVR_HI8_LDI_PM_NEG
block|,
comment|/* This is a 16 bit reloc for the AVR that stores negated 8 bit value (high 6 bit of 22 bit command address) into 8 bit immediate value of SUBI insn.  */
name|BFD_RELOC_AVR_HH8_LDI_PM_NEG
block|,
comment|/* This is a 32 bit reloc for the AVR that stores 23 bit value into 22 bits.  */
name|BFD_RELOC_AVR_CALL
block|,
comment|/* Direct 12 bit.  */
name|BFD_RELOC_390_12
block|,
comment|/* 12 bit GOT offset.  */
name|BFD_RELOC_390_GOT12
block|,
comment|/* 32 bit PC relative PLT address.  */
name|BFD_RELOC_390_PLT32
block|,
comment|/* Copy symbol at runtime.  */
name|BFD_RELOC_390_COPY
block|,
comment|/* Create GOT entry.  */
name|BFD_RELOC_390_GLOB_DAT
block|,
comment|/* Create PLT entry.  */
name|BFD_RELOC_390_JMP_SLOT
block|,
comment|/* Adjust by program base.  */
name|BFD_RELOC_390_RELATIVE
block|,
comment|/* 32 bit PC relative offset to GOT.  */
name|BFD_RELOC_390_GOTPC
block|,
comment|/* 16 bit GOT offset.  */
name|BFD_RELOC_390_GOT16
block|,
comment|/* PC relative 16 bit shifted by 1.  */
name|BFD_RELOC_390_PC16DBL
block|,
comment|/* 16 bit PC rel. PLT shifted by 1.  */
name|BFD_RELOC_390_PLT16DBL
block|,
comment|/* PC relative 32 bit shifted by 1.  */
name|BFD_RELOC_390_PC32DBL
block|,
comment|/* 32 bit PC rel. PLT shifted by 1.  */
name|BFD_RELOC_390_PLT32DBL
block|,
comment|/* 32 bit PC rel. GOT shifted by 1.  */
name|BFD_RELOC_390_GOTPCDBL
block|,
comment|/* 64 bit GOT offset.  */
name|BFD_RELOC_390_GOT64
block|,
comment|/* 64 bit PC relative PLT address.  */
name|BFD_RELOC_390_PLT64
block|,
comment|/* 32 bit rel. offset to GOT entry.  */
name|BFD_RELOC_390_GOTENT
block|,
comment|/* 64 bit offset to GOT.  */
name|BFD_RELOC_390_GOTOFF64
block|,
comment|/* 12-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_390_GOTPLT12
block|,
comment|/* 16-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_390_GOTPLT16
block|,
comment|/* 32-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_390_GOTPLT32
block|,
comment|/* 64-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_390_GOTPLT64
block|,
comment|/* 32-bit rel. offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_390_GOTPLTENT
block|,
comment|/* 16-bit rel. offset from the GOT to a PLT entry.  */
name|BFD_RELOC_390_PLTOFF16
block|,
comment|/* 32-bit rel. offset from the GOT to a PLT entry.  */
name|BFD_RELOC_390_PLTOFF32
block|,
comment|/* 64-bit rel. offset from the GOT to a PLT entry.  */
name|BFD_RELOC_390_PLTOFF64
block|,
comment|/* s390 tls relocations.  */
name|BFD_RELOC_390_TLS_LOAD
block|,
name|BFD_RELOC_390_TLS_GDCALL
block|,
name|BFD_RELOC_390_TLS_LDCALL
block|,
name|BFD_RELOC_390_TLS_GD32
block|,
name|BFD_RELOC_390_TLS_GD64
block|,
name|BFD_RELOC_390_TLS_GOTIE12
block|,
name|BFD_RELOC_390_TLS_GOTIE32
block|,
name|BFD_RELOC_390_TLS_GOTIE64
block|,
name|BFD_RELOC_390_TLS_LDM32
block|,
name|BFD_RELOC_390_TLS_LDM64
block|,
name|BFD_RELOC_390_TLS_IE32
block|,
name|BFD_RELOC_390_TLS_IE64
block|,
name|BFD_RELOC_390_TLS_IEENT
block|,
name|BFD_RELOC_390_TLS_LE32
block|,
name|BFD_RELOC_390_TLS_LE64
block|,
name|BFD_RELOC_390_TLS_LDO32
block|,
name|BFD_RELOC_390_TLS_LDO64
block|,
name|BFD_RELOC_390_TLS_DTPMOD
block|,
name|BFD_RELOC_390_TLS_DTPOFF
block|,
name|BFD_RELOC_390_TLS_TPOFF
block|,
comment|/* Long displacement extension.  */
name|BFD_RELOC_390_20
block|,
name|BFD_RELOC_390_GOT20
block|,
name|BFD_RELOC_390_GOTPLT20
block|,
name|BFD_RELOC_390_TLS_GOTIE20
block|,
comment|/* Scenix IP2K - 9-bit register number / data address  */
name|BFD_RELOC_IP2K_FR9
block|,
comment|/* Scenix IP2K - 4-bit register/data bank number  */
name|BFD_RELOC_IP2K_BANK
block|,
comment|/* Scenix IP2K - low 13 bits of instruction word address  */
name|BFD_RELOC_IP2K_ADDR16CJP
block|,
comment|/* Scenix IP2K - high 3 bits of instruction word address  */
name|BFD_RELOC_IP2K_PAGE3
block|,
comment|/* Scenix IP2K - ext/low/high 8 bits of data address  */
name|BFD_RELOC_IP2K_LO8DATA
block|,
name|BFD_RELOC_IP2K_HI8DATA
block|,
name|BFD_RELOC_IP2K_EX8DATA
block|,
comment|/* Scenix IP2K - low/high 8 bits of instruction word address  */
name|BFD_RELOC_IP2K_LO8INSN
block|,
name|BFD_RELOC_IP2K_HI8INSN
block|,
comment|/* Scenix IP2K - even/odd PC modifier to modify snb pcl.0  */
name|BFD_RELOC_IP2K_PC_SKIP
block|,
comment|/* Scenix IP2K - 16 bit word address in text section.  */
name|BFD_RELOC_IP2K_TEXT
block|,
comment|/* Scenix IP2K - 7-bit sp or dp offset  */
name|BFD_RELOC_IP2K_FR_OFFSET
block|,
comment|/* Scenix VPE4K coprocessor - data/insn-space addressing  */
name|BFD_RELOC_VPE4KMATH_DATA
block|,
name|BFD_RELOC_VPE4KMATH_INSN
block|,
comment|/* These two relocations are used by the linker to determine which of the entries in a C++ virtual function table are actually used.  When the --gc-sections option is given, the linker will zero out the entries that are not used, so that the code for those functions need not be included in the output.  VTABLE_INHERIT is a zero-space relocation used to describe to the linker the inheritance tree of a C++ virtual function table.  The relocation's symbol should be the parent class' vtable, and the relocation should be located at the child vtable.  VTABLE_ENTRY is a zero-space relocation that describes the use of a virtual function table entry.  The reloc's symbol should refer to the table of the class mentioned in the code.  Off of that base, an offset describes the entry that is being used.  For Rela hosts, this offset is stored in the reloc's addend.  For Rel hosts, we are forced to put this offset in the reloc's section offset.  */
name|BFD_RELOC_VTABLE_INHERIT
block|,
name|BFD_RELOC_VTABLE_ENTRY
block|,
comment|/* Intel IA64 Relocations.  */
name|BFD_RELOC_IA64_IMM14
block|,
name|BFD_RELOC_IA64_IMM22
block|,
name|BFD_RELOC_IA64_IMM64
block|,
name|BFD_RELOC_IA64_DIR32MSB
block|,
name|BFD_RELOC_IA64_DIR32LSB
block|,
name|BFD_RELOC_IA64_DIR64MSB
block|,
name|BFD_RELOC_IA64_DIR64LSB
block|,
name|BFD_RELOC_IA64_GPREL22
block|,
name|BFD_RELOC_IA64_GPREL64I
block|,
name|BFD_RELOC_IA64_GPREL32MSB
block|,
name|BFD_RELOC_IA64_GPREL32LSB
block|,
name|BFD_RELOC_IA64_GPREL64MSB
block|,
name|BFD_RELOC_IA64_GPREL64LSB
block|,
name|BFD_RELOC_IA64_LTOFF22
block|,
name|BFD_RELOC_IA64_LTOFF64I
block|,
name|BFD_RELOC_IA64_PLTOFF22
block|,
name|BFD_RELOC_IA64_PLTOFF64I
block|,
name|BFD_RELOC_IA64_PLTOFF64MSB
block|,
name|BFD_RELOC_IA64_PLTOFF64LSB
block|,
name|BFD_RELOC_IA64_FPTR64I
block|,
name|BFD_RELOC_IA64_FPTR32MSB
block|,
name|BFD_RELOC_IA64_FPTR32LSB
block|,
name|BFD_RELOC_IA64_FPTR64MSB
block|,
name|BFD_RELOC_IA64_FPTR64LSB
block|,
name|BFD_RELOC_IA64_PCREL21B
block|,
name|BFD_RELOC_IA64_PCREL21BI
block|,
name|BFD_RELOC_IA64_PCREL21M
block|,
name|BFD_RELOC_IA64_PCREL21F
block|,
name|BFD_RELOC_IA64_PCREL22
block|,
name|BFD_RELOC_IA64_PCREL60B
block|,
name|BFD_RELOC_IA64_PCREL64I
block|,
name|BFD_RELOC_IA64_PCREL32MSB
block|,
name|BFD_RELOC_IA64_PCREL32LSB
block|,
name|BFD_RELOC_IA64_PCREL64MSB
block|,
name|BFD_RELOC_IA64_PCREL64LSB
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR22
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR64I
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR32MSB
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR32LSB
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR64MSB
block|,
name|BFD_RELOC_IA64_LTOFF_FPTR64LSB
block|,
name|BFD_RELOC_IA64_SEGREL32MSB
block|,
name|BFD_RELOC_IA64_SEGREL32LSB
block|,
name|BFD_RELOC_IA64_SEGREL64MSB
block|,
name|BFD_RELOC_IA64_SEGREL64LSB
block|,
name|BFD_RELOC_IA64_SECREL32MSB
block|,
name|BFD_RELOC_IA64_SECREL32LSB
block|,
name|BFD_RELOC_IA64_SECREL64MSB
block|,
name|BFD_RELOC_IA64_SECREL64LSB
block|,
name|BFD_RELOC_IA64_REL32MSB
block|,
name|BFD_RELOC_IA64_REL32LSB
block|,
name|BFD_RELOC_IA64_REL64MSB
block|,
name|BFD_RELOC_IA64_REL64LSB
block|,
name|BFD_RELOC_IA64_LTV32MSB
block|,
name|BFD_RELOC_IA64_LTV32LSB
block|,
name|BFD_RELOC_IA64_LTV64MSB
block|,
name|BFD_RELOC_IA64_LTV64LSB
block|,
name|BFD_RELOC_IA64_IPLTMSB
block|,
name|BFD_RELOC_IA64_IPLTLSB
block|,
name|BFD_RELOC_IA64_COPY
block|,
name|BFD_RELOC_IA64_LTOFF22X
block|,
name|BFD_RELOC_IA64_LDXMOV
block|,
name|BFD_RELOC_IA64_TPREL14
block|,
name|BFD_RELOC_IA64_TPREL22
block|,
name|BFD_RELOC_IA64_TPREL64I
block|,
name|BFD_RELOC_IA64_TPREL64MSB
block|,
name|BFD_RELOC_IA64_TPREL64LSB
block|,
name|BFD_RELOC_IA64_LTOFF_TPREL22
block|,
name|BFD_RELOC_IA64_DTPMOD64MSB
block|,
name|BFD_RELOC_IA64_DTPMOD64LSB
block|,
name|BFD_RELOC_IA64_LTOFF_DTPMOD22
block|,
name|BFD_RELOC_IA64_DTPREL14
block|,
name|BFD_RELOC_IA64_DTPREL22
block|,
name|BFD_RELOC_IA64_DTPREL64I
block|,
name|BFD_RELOC_IA64_DTPREL32MSB
block|,
name|BFD_RELOC_IA64_DTPREL32LSB
block|,
name|BFD_RELOC_IA64_DTPREL64MSB
block|,
name|BFD_RELOC_IA64_DTPREL64LSB
block|,
name|BFD_RELOC_IA64_LTOFF_DTPREL22
block|,
comment|/* Motorola 68HC11 reloc. This is the 8 bit high part of an absolute address.  */
name|BFD_RELOC_M68HC11_HI8
block|,
comment|/* Motorola 68HC11 reloc. This is the 8 bit low part of an absolute address.  */
name|BFD_RELOC_M68HC11_LO8
block|,
comment|/* Motorola 68HC11 reloc. This is the 3 bit of a value.  */
name|BFD_RELOC_M68HC11_3B
block|,
comment|/* Motorola 68HC11 reloc. This reloc marks the beginning of a jump/call instruction. It is used for linker relaxation to correctly identify beginning of instruction and change some branches to use PC-relative addressing mode.  */
name|BFD_RELOC_M68HC11_RL_JUMP
block|,
comment|/* Motorola 68HC11 reloc. This reloc marks a group of several instructions that gcc generates and for which the linker relaxation pass can modify and/or remove some of them.  */
name|BFD_RELOC_M68HC11_RL_GROUP
block|,
comment|/* Motorola 68HC11 reloc. This is the 16-bit lower part of an address.  It is used for 'call' instruction to specify the symbol address without any special transformation (due to memory bank window).  */
name|BFD_RELOC_M68HC11_LO16
block|,
comment|/* Motorola 68HC11 reloc. This is a 8-bit reloc that specifies the page number of an address. It is used by 'call' instruction to specify the page number of the symbol.  */
name|BFD_RELOC_M68HC11_PAGE
block|,
comment|/* Motorola 68HC11 reloc. This is a 24-bit reloc that represents the address with a 16-bit value and a 8-bit page number.  The symbol address is transformed to follow the 16K memory bank of 68HC12 (seen as mapped in the window).  */
name|BFD_RELOC_M68HC11_24
block|,
comment|/* Motorola 68HC12 reloc. This is the 5 bits of a value.  */
name|BFD_RELOC_M68HC12_5B
block|,
comment|/* These relocs are only used within the CRIS assembler.  They are not (at present) written to any object files.  */
name|BFD_RELOC_CRIS_BDISP8
block|,
name|BFD_RELOC_CRIS_UNSIGNED_5
block|,
name|BFD_RELOC_CRIS_SIGNED_6
block|,
name|BFD_RELOC_CRIS_UNSIGNED_6
block|,
name|BFD_RELOC_CRIS_UNSIGNED_4
block|,
comment|/* Relocs used in ELF shared libraries for CRIS.  */
name|BFD_RELOC_CRIS_COPY
block|,
name|BFD_RELOC_CRIS_GLOB_DAT
block|,
name|BFD_RELOC_CRIS_JUMP_SLOT
block|,
name|BFD_RELOC_CRIS_RELATIVE
block|,
comment|/* 32-bit offset to symbol-entry within GOT.  */
name|BFD_RELOC_CRIS_32_GOT
block|,
comment|/* 16-bit offset to symbol-entry within GOT.  */
name|BFD_RELOC_CRIS_16_GOT
block|,
comment|/* 32-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_CRIS_32_GOTPLT
block|,
comment|/* 16-bit offset to symbol-entry within GOT, with PLT handling.  */
name|BFD_RELOC_CRIS_16_GOTPLT
block|,
comment|/* 32-bit offset to symbol, relative to GOT.  */
name|BFD_RELOC_CRIS_32_GOTREL
block|,
comment|/* 32-bit offset to symbol with PLT entry, relative to GOT.  */
name|BFD_RELOC_CRIS_32_PLT_GOTREL
block|,
comment|/* 32-bit offset to symbol with PLT entry, relative to this relocation.  */
name|BFD_RELOC_CRIS_32_PLT_PCREL
block|,
comment|/* Intel i860 Relocations.  */
name|BFD_RELOC_860_COPY
block|,
name|BFD_RELOC_860_GLOB_DAT
block|,
name|BFD_RELOC_860_JUMP_SLOT
block|,
name|BFD_RELOC_860_RELATIVE
block|,
name|BFD_RELOC_860_PC26
block|,
name|BFD_RELOC_860_PLT26
block|,
name|BFD_RELOC_860_PC16
block|,
name|BFD_RELOC_860_LOW0
block|,
name|BFD_RELOC_860_SPLIT0
block|,
name|BFD_RELOC_860_LOW1
block|,
name|BFD_RELOC_860_SPLIT1
block|,
name|BFD_RELOC_860_LOW2
block|,
name|BFD_RELOC_860_SPLIT2
block|,
name|BFD_RELOC_860_LOW3
block|,
name|BFD_RELOC_860_LOGOT0
block|,
name|BFD_RELOC_860_SPGOT0
block|,
name|BFD_RELOC_860_LOGOT1
block|,
name|BFD_RELOC_860_SPGOT1
block|,
name|BFD_RELOC_860_LOGOTOFF0
block|,
name|BFD_RELOC_860_SPGOTOFF0
block|,
name|BFD_RELOC_860_LOGOTOFF1
block|,
name|BFD_RELOC_860_SPGOTOFF1
block|,
name|BFD_RELOC_860_LOGOTOFF2
block|,
name|BFD_RELOC_860_LOGOTOFF3
block|,
name|BFD_RELOC_860_LOPC
block|,
name|BFD_RELOC_860_HIGHADJ
block|,
name|BFD_RELOC_860_HAGOT
block|,
name|BFD_RELOC_860_HAGOTOFF
block|,
name|BFD_RELOC_860_HAPC
block|,
name|BFD_RELOC_860_HIGH
block|,
name|BFD_RELOC_860_HIGOT
block|,
name|BFD_RELOC_860_HIGOTOFF
block|,
comment|/* OpenRISC Relocations.  */
name|BFD_RELOC_OPENRISC_ABS_26
block|,
name|BFD_RELOC_OPENRISC_REL_26
block|,
comment|/* H8 elf Relocations.  */
name|BFD_RELOC_H8_DIR16A8
block|,
name|BFD_RELOC_H8_DIR16R8
block|,
name|BFD_RELOC_H8_DIR24A8
block|,
name|BFD_RELOC_H8_DIR24R8
block|,
name|BFD_RELOC_H8_DIR32A16
block|,
comment|/* Sony Xstormy16 Relocations.  */
name|BFD_RELOC_XSTORMY16_REL_12
block|,
name|BFD_RELOC_XSTORMY16_12
block|,
name|BFD_RELOC_XSTORMY16_24
block|,
name|BFD_RELOC_XSTORMY16_FPTR16
block|,
comment|/* Relocations used by VAX ELF.  */
name|BFD_RELOC_VAX_GLOB_DAT
block|,
name|BFD_RELOC_VAX_JMP_SLOT
block|,
name|BFD_RELOC_VAX_RELATIVE
block|,
comment|/* msp430 specific relocation codes  */
name|BFD_RELOC_MSP430_10_PCREL
block|,
name|BFD_RELOC_MSP430_16_PCREL
block|,
name|BFD_RELOC_MSP430_16
block|,
name|BFD_RELOC_MSP430_16_PCREL_BYTE
block|,
name|BFD_RELOC_MSP430_16_BYTE
block|,
comment|/* IQ2000 Relocations.  */
name|BFD_RELOC_IQ2000_OFFSET_16
block|,
name|BFD_RELOC_IQ2000_OFFSET_21
block|,
name|BFD_RELOC_IQ2000_UHI16
block|,
comment|/* Special Xtensa relocation used only by PLT entries in ELF shared objects to indicate that the runtime linker should set the value to one of its own internal functions or data structures.  */
name|BFD_RELOC_XTENSA_RTLD
block|,
comment|/* Xtensa relocations for ELF shared objects.  */
name|BFD_RELOC_XTENSA_GLOB_DAT
block|,
name|BFD_RELOC_XTENSA_JMP_SLOT
block|,
name|BFD_RELOC_XTENSA_RELATIVE
block|,
comment|/* Xtensa relocation used in ELF object files for symbols that may require PLT entries.  Otherwise, this is just a generic 32-bit relocation.  */
name|BFD_RELOC_XTENSA_PLT
block|,
comment|/* Generic Xtensa relocations.  Only the operand number is encoded in the relocation.  The details are determined by extracting the instruction opcode.  */
name|BFD_RELOC_XTENSA_OP0
block|,
name|BFD_RELOC_XTENSA_OP1
block|,
name|BFD_RELOC_XTENSA_OP2
block|,
comment|/* Xtensa relocation to mark that the assembler expanded the  instructions from an original target.  The expansion size is encoded in the reloc size.  */
name|BFD_RELOC_XTENSA_ASM_EXPAND
block|,
comment|/* Xtensa relocation to mark that the linker should simplify  assembler-expanded instructions.  This is commonly used  internally by the linker after analysis of a  BFD_RELOC_XTENSA_ASM_EXPAND.  */
name|BFD_RELOC_XTENSA_ASM_SIMPLIFY
block|,
name|BFD_RELOC_UNUSED
block|}
enum|;
typedef|typedef
name|enum
name|bfd_reloc_code_real
name|bfd_reloc_code_real_type
typedef|;
name|reloc_howto_type
modifier|*
name|bfd_reloc_type_lookup
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_reloc_code_real_type
name|code
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|bfd_get_reloc_code_name
parameter_list|(
name|bfd_reloc_code_real_type
name|code
parameter_list|)
function_decl|;
comment|/* Extracted from syms.c.  */
typedef|typedef
struct|struct
name|bfd_symbol
block|{
comment|/* A pointer to the BFD which owns the symbol. This information      is necessary so that a back end can work out what additional      information (invisible to the application writer) is carried      with the symbol.       This field is *almost* redundant, since you can use section->owner      instead, except that some symbols point to the global sections      bfd_{abs,com,und}_section.  This could be fixed by making      these globals be per-bfd (or per-target-flavor).  FIXME.  */
name|struct
name|bfd
modifier|*
name|the_bfd
decl_stmt|;
comment|/* Use bfd_asymbol_bfd(sym) to access this field.  */
comment|/* The text of the symbol. The name is left alone, and not copied; the      application may not alter it.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* The value of the symbol.  This really should be a union of a      numeric value with a pointer, since some flags indicate that      a pointer to another symbol is stored here.  */
name|symvalue
name|value
decl_stmt|;
comment|/* Attributes of a symbol.  */
define|#
directive|define
name|BSF_NO_FLAGS
value|0x00
comment|/* The symbol has local scope;<<static>> in<<C>>. The value      is the offset into the section of the data.  */
define|#
directive|define
name|BSF_LOCAL
value|0x01
comment|/* The symbol has global scope; initialized data in<<C>>. The      value is the offset into the section of the data.  */
define|#
directive|define
name|BSF_GLOBAL
value|0x02
comment|/* The symbol has global scope and is exported. The value is      the offset into the section of the data.  */
define|#
directive|define
name|BSF_EXPORT
value|BSF_GLOBAL
comment|/* No real difference.  */
comment|/* A normal C symbol would be one of:<<BSF_LOCAL>>,<<BSF_FORT_COMM>>,<<BSF_UNDEFINED>> or<<BSF_GLOBAL>>.  */
comment|/* The symbol is a debugging record. The value has an arbitrary      meaning, unless BSF_DEBUGGING_RELOC is also set.  */
define|#
directive|define
name|BSF_DEBUGGING
value|0x08
comment|/* The symbol denotes a function entry point.  Used in ELF,      perhaps others someday.  */
define|#
directive|define
name|BSF_FUNCTION
value|0x10
comment|/* Used by the linker.  */
define|#
directive|define
name|BSF_KEEP
value|0x20
define|#
directive|define
name|BSF_KEEP_G
value|0x40
comment|/* A weak global symbol, overridable without warnings by      a regular global symbol of the same name.  */
define|#
directive|define
name|BSF_WEAK
value|0x80
comment|/* This symbol was created to point to a section, e.g. ELF's      STT_SECTION symbols.  */
define|#
directive|define
name|BSF_SECTION_SYM
value|0x100
comment|/* The symbol used to be a common symbol, but now it is      allocated.  */
define|#
directive|define
name|BSF_OLD_COMMON
value|0x200
comment|/* The default value for common data.  */
define|#
directive|define
name|BFD_FORT_COMM_DEFAULT_VALUE
value|0
comment|/* In some files the type of a symbol sometimes alters its      location in an output file - ie in coff a<<ISFCN>> symbol      which is also<<C_EXT>> symbol appears where it was      declared and not at the end of a section.  This bit is set      by the target BFD part to convey this information.  */
define|#
directive|define
name|BSF_NOT_AT_END
value|0x400
comment|/* Signal that the symbol is the label of constructor section.  */
define|#
directive|define
name|BSF_CONSTRUCTOR
value|0x800
comment|/* Signal that the symbol is a warning symbol.  The name is a      warning.  The name of the next symbol is the one to warn about;      if a reference is made to a symbol with the same name as the next      symbol, a warning is issued by the linker.  */
define|#
directive|define
name|BSF_WARNING
value|0x1000
comment|/* Signal that the symbol is indirect.  This symbol is an indirect      pointer to the symbol with the same name as the next symbol.  */
define|#
directive|define
name|BSF_INDIRECT
value|0x2000
comment|/* BSF_FILE marks symbols that contain a file name.  This is used      for ELF STT_FILE symbols.  */
define|#
directive|define
name|BSF_FILE
value|0x4000
comment|/* Symbol is from dynamic linking information.  */
define|#
directive|define
name|BSF_DYNAMIC
value|0x8000
comment|/* The symbol denotes a data object.  Used in ELF, and perhaps      others someday.  */
define|#
directive|define
name|BSF_OBJECT
value|0x10000
comment|/* This symbol is a debugging symbol.  The value is the offset      into the section of the data.  BSF_DEBUGGING should be set      as well.  */
define|#
directive|define
name|BSF_DEBUGGING_RELOC
value|0x20000
comment|/* This symbol is thread local.  Used in ELF.  */
define|#
directive|define
name|BSF_THREAD_LOCAL
value|0x40000
name|flagword
name|flags
decl_stmt|;
comment|/* A pointer to the section to which this symbol is      relative.  This will always be non NULL, there are special      sections for undefined and absolute symbols.  */
name|struct
name|bfd_section
modifier|*
name|section
decl_stmt|;
comment|/* Back end special data.  */
union|union
block|{
name|void
modifier|*
name|p
decl_stmt|;
name|bfd_vma
name|i
decl_stmt|;
block|}
name|udata
union|;
block|}
name|asymbol
typedef|;
define|#
directive|define
name|bfd_get_symtab_upper_bound
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_get_symtab_upper_bound, (abfd))
name|bfd_boolean
name|bfd_is_local_label
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asymbol
modifier|*
name|sym
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_is_local_label_name
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_is_local_label_name
parameter_list|(
name|abfd
parameter_list|,
name|name
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_is_local_label_name, (abfd, name))
define|#
directive|define
name|bfd_canonicalize_symtab
parameter_list|(
name|abfd
parameter_list|,
name|location
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_canonicalize_symtab, (abfd, location))
name|bfd_boolean
name|bfd_set_symtab
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asymbol
modifier|*
modifier|*
name|location
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|)
function_decl|;
name|void
name|bfd_print_symbol_vandf
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|void
modifier|*
name|file
parameter_list|,
name|asymbol
modifier|*
name|symbol
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_make_empty_symbol
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_make_empty_symbol, (abfd))
name|asymbol
modifier|*
name|_bfd_generic_make_empty_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_make_debug_symbol
parameter_list|(
name|abfd
parameter_list|,
name|ptr
parameter_list|,
name|size
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_make_debug_symbol, (abfd, ptr, size))
name|int
name|bfd_decode_symclass
parameter_list|(
name|asymbol
modifier|*
name|symbol
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_is_undefined_symclass
parameter_list|(
name|int
name|symclass
parameter_list|)
function_decl|;
name|void
name|bfd_symbol_info
parameter_list|(
name|asymbol
modifier|*
name|symbol
parameter_list|,
name|symbol_info
modifier|*
name|ret
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_copy_private_symbol_data
parameter_list|(
name|bfd
modifier|*
name|ibfd
parameter_list|,
name|asymbol
modifier|*
name|isym
parameter_list|,
name|bfd
modifier|*
name|obfd
parameter_list|,
name|asymbol
modifier|*
name|osym
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_copy_private_symbol_data
parameter_list|(
name|ibfd
parameter_list|,
name|isymbol
parameter_list|,
name|obfd
parameter_list|,
name|osymbol
parameter_list|)
define|\
value|BFD_SEND (obfd, _bfd_copy_private_symbol_data, \             (ibfd, isymbol, obfd, osymbol))
comment|/* Extracted from bfd.c.  */
struct|struct
name|bfd
block|{
comment|/* A unique identifier of the BFD  */
name|unsigned
name|int
name|id
decl_stmt|;
comment|/* The filename the application opened the BFD with.  */
specifier|const
name|char
modifier|*
name|filename
decl_stmt|;
comment|/* A pointer to the target jump table.  */
specifier|const
name|struct
name|bfd_target
modifier|*
name|xvec
decl_stmt|;
comment|/* To avoid dragging too many header files into every file that      includes `<<bfd.h>>', IOSTREAM has been declared as a "char *",      and MTIME as a "long".  Their correct types, to which they      are cast when used, are "FILE *" and "time_t".    The iostream      is the result of an fopen on the filename.  However, if the      BFD_IN_MEMORY flag is set, then iostream is actually a pointer      to a bfd_in_memory struct.  */
name|void
modifier|*
name|iostream
decl_stmt|;
comment|/* Is the file descriptor being cached?  That is, can it be closed as      needed, and re-opened when accessed later?  */
name|bfd_boolean
name|cacheable
decl_stmt|;
comment|/* Marks whether there was a default target specified when the      BFD was opened. This is used to select which matching algorithm      to use to choose the back end.  */
name|bfd_boolean
name|target_defaulted
decl_stmt|;
comment|/* The caching routines use these to maintain a      least-recently-used list of BFDs.  */
name|struct
name|bfd
modifier|*
name|lru_prev
decl_stmt|,
modifier|*
name|lru_next
decl_stmt|;
comment|/* When a file is closed by the caching routines, BFD retains      state information on the file here...  */
name|ufile_ptr
name|where
decl_stmt|;
comment|/* ... and here: (``once'' means at least once).  */
name|bfd_boolean
name|opened_once
decl_stmt|;
comment|/* Set if we have a locally maintained mtime value, rather than      getting it from the file each time.  */
name|bfd_boolean
name|mtime_set
decl_stmt|;
comment|/* File modified time, if mtime_set is TRUE.  */
name|long
name|mtime
decl_stmt|;
comment|/* Reserved for an unimplemented file locking extension.  */
name|int
name|ifd
decl_stmt|;
comment|/* The format which belongs to the BFD. (object, core, etc.)  */
name|bfd_format
name|format
decl_stmt|;
comment|/* The direction with which the BFD was opened.  */
enum|enum
name|bfd_direction
block|{
name|no_direction
init|=
literal|0
block|,
name|read_direction
init|=
literal|1
block|,
name|write_direction
init|=
literal|2
block|,
name|both_direction
init|=
literal|3
block|}
name|direction
enum|;
comment|/* Format_specific flags.  */
name|flagword
name|flags
decl_stmt|;
comment|/* Currently my_archive is tested before adding origin to      anything. I believe that this can become always an add of      origin, with origin set to 0 for non archive files.  */
name|ufile_ptr
name|origin
decl_stmt|;
comment|/* Remember when output has begun, to stop strange things      from happening.  */
name|bfd_boolean
name|output_has_begun
decl_stmt|;
comment|/* A hash table for section names.  */
name|struct
name|bfd_hash_table
name|section_htab
decl_stmt|;
comment|/* Pointer to linked list of sections.  */
name|struct
name|bfd_section
modifier|*
name|sections
decl_stmt|;
comment|/* The place where we add to the section list.  */
name|struct
name|bfd_section
modifier|*
modifier|*
name|section_tail
decl_stmt|;
comment|/* The number of sections.  */
name|unsigned
name|int
name|section_count
decl_stmt|;
comment|/* Stuff only useful for object files:      The start address.  */
name|bfd_vma
name|start_address
decl_stmt|;
comment|/* Used for input and output.  */
name|unsigned
name|int
name|symcount
decl_stmt|;
comment|/* Symbol table for output BFD (with symcount entries).  */
name|struct
name|bfd_symbol
modifier|*
modifier|*
name|outsymbols
decl_stmt|;
comment|/* Used for slurped dynamic symbol tables.  */
name|unsigned
name|int
name|dynsymcount
decl_stmt|;
comment|/* Pointer to structure which contains architecture information.  */
specifier|const
name|struct
name|bfd_arch_info
modifier|*
name|arch_info
decl_stmt|;
comment|/* Stuff only useful for archives.  */
name|void
modifier|*
name|arelt_data
decl_stmt|;
name|struct
name|bfd
modifier|*
name|my_archive
decl_stmt|;
comment|/* The containing archive BFD.  */
name|struct
name|bfd
modifier|*
name|next
decl_stmt|;
comment|/* The next BFD in the archive.  */
name|struct
name|bfd
modifier|*
name|archive_head
decl_stmt|;
comment|/* The first BFD in the archive.  */
name|bfd_boolean
name|has_armap
decl_stmt|;
comment|/* A chain of BFD structures involved in a link.  */
name|struct
name|bfd
modifier|*
name|link_next
decl_stmt|;
comment|/* A field used by _bfd_generic_link_add_archive_symbols.  This will      be used only for archive elements.  */
name|int
name|archive_pass
decl_stmt|;
comment|/* Used by the back end to hold private data.  */
union|union
block|{
name|struct
name|aout_data_struct
modifier|*
name|aout_data
decl_stmt|;
name|struct
name|artdata
modifier|*
name|aout_ar_data
decl_stmt|;
name|struct
name|_oasys_data
modifier|*
name|oasys_obj_data
decl_stmt|;
name|struct
name|_oasys_ar_data
modifier|*
name|oasys_ar_data
decl_stmt|;
name|struct
name|coff_tdata
modifier|*
name|coff_obj_data
decl_stmt|;
name|struct
name|pe_tdata
modifier|*
name|pe_obj_data
decl_stmt|;
name|struct
name|xcoff_tdata
modifier|*
name|xcoff_obj_data
decl_stmt|;
name|struct
name|ecoff_tdata
modifier|*
name|ecoff_obj_data
decl_stmt|;
name|struct
name|ieee_data_struct
modifier|*
name|ieee_data
decl_stmt|;
name|struct
name|ieee_ar_data_struct
modifier|*
name|ieee_ar_data
decl_stmt|;
name|struct
name|srec_data_struct
modifier|*
name|srec_data
decl_stmt|;
name|struct
name|ihex_data_struct
modifier|*
name|ihex_data
decl_stmt|;
name|struct
name|tekhex_data_struct
modifier|*
name|tekhex_data
decl_stmt|;
name|struct
name|elf_obj_tdata
modifier|*
name|elf_obj_data
decl_stmt|;
name|struct
name|nlm_obj_tdata
modifier|*
name|nlm_obj_data
decl_stmt|;
name|struct
name|bout_data_struct
modifier|*
name|bout_data
decl_stmt|;
name|struct
name|mmo_data_struct
modifier|*
name|mmo_data
decl_stmt|;
name|struct
name|sun_core_struct
modifier|*
name|sun_core_data
decl_stmt|;
name|struct
name|sco5_core_struct
modifier|*
name|sco5_core_data
decl_stmt|;
name|struct
name|trad_core_struct
modifier|*
name|trad_core_data
decl_stmt|;
name|struct
name|som_data_struct
modifier|*
name|som_data
decl_stmt|;
name|struct
name|hpux_core_struct
modifier|*
name|hpux_core_data
decl_stmt|;
name|struct
name|hppabsd_core_struct
modifier|*
name|hppabsd_core_data
decl_stmt|;
name|struct
name|sgi_core_struct
modifier|*
name|sgi_core_data
decl_stmt|;
name|struct
name|lynx_core_struct
modifier|*
name|lynx_core_data
decl_stmt|;
name|struct
name|osf_core_struct
modifier|*
name|osf_core_data
decl_stmt|;
name|struct
name|cisco_core_struct
modifier|*
name|cisco_core_data
decl_stmt|;
name|struct
name|versados_data_struct
modifier|*
name|versados_data
decl_stmt|;
name|struct
name|netbsd_core_struct
modifier|*
name|netbsd_core_data
decl_stmt|;
name|struct
name|mach_o_data_struct
modifier|*
name|mach_o_data
decl_stmt|;
name|struct
name|mach_o_fat_data_struct
modifier|*
name|mach_o_fat_data
decl_stmt|;
name|struct
name|bfd_pef_data_struct
modifier|*
name|pef_data
decl_stmt|;
name|struct
name|bfd_pef_xlib_data_struct
modifier|*
name|pef_xlib_data
decl_stmt|;
name|struct
name|bfd_sym_data_struct
modifier|*
name|sym_data
decl_stmt|;
name|void
modifier|*
name|any
decl_stmt|;
block|}
name|tdata
union|;
comment|/* Used by the application to hold private data.  */
name|void
modifier|*
name|usrdata
decl_stmt|;
comment|/* Where all the allocated stuff under this BFD goes.  This is a      struct objalloc *, but we use void * to avoid requiring the inclusion      of objalloc.h.  */
name|void
modifier|*
name|memory
decl_stmt|;
block|}
struct|;
typedef|typedef
enum|enum
name|bfd_error
block|{
name|bfd_error_no_error
init|=
literal|0
block|,
name|bfd_error_system_call
block|,
name|bfd_error_invalid_target
block|,
name|bfd_error_wrong_format
block|,
name|bfd_error_wrong_object_format
block|,
name|bfd_error_invalid_operation
block|,
name|bfd_error_no_memory
block|,
name|bfd_error_no_symbols
block|,
name|bfd_error_no_armap
block|,
name|bfd_error_no_more_archived_files
block|,
name|bfd_error_malformed_archive
block|,
name|bfd_error_file_not_recognized
block|,
name|bfd_error_file_ambiguously_recognized
block|,
name|bfd_error_no_contents
block|,
name|bfd_error_nonrepresentable_section
block|,
name|bfd_error_no_debug_section
block|,
name|bfd_error_bad_value
block|,
name|bfd_error_file_truncated
block|,
name|bfd_error_file_too_big
block|,
name|bfd_error_invalid_error_code
block|}
name|bfd_error_type
typedef|;
name|bfd_error_type
name|bfd_get_error
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|bfd_set_error
parameter_list|(
name|bfd_error_type
name|error_tag
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|bfd_errmsg
parameter_list|(
name|bfd_error_type
name|error_tag
parameter_list|)
function_decl|;
name|void
name|bfd_perror
parameter_list|(
specifier|const
name|char
modifier|*
name|message
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|bfd_error_handler_type
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|bfd_error_handler_type
name|bfd_set_error_handler
parameter_list|(
name|bfd_error_handler_type
parameter_list|)
function_decl|;
name|void
name|bfd_set_error_program_name
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|bfd_error_handler_type
name|bfd_get_error_handler
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|bfd_archive_filename
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|long
name|bfd_get_reloc_upper_bound
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sect
parameter_list|)
function_decl|;
name|long
name|bfd_canonicalize_reloc
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
name|arelent
modifier|*
modifier|*
name|loc
parameter_list|,
name|asymbol
modifier|*
modifier|*
name|syms
parameter_list|)
function_decl|;
name|void
name|bfd_set_reloc
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
name|arelent
modifier|*
modifier|*
name|rel
parameter_list|,
name|unsigned
name|int
name|count
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_file_flags
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|flagword
name|flags
parameter_list|)
function_decl|;
name|int
name|bfd_get_arch_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|int
name|bfd_get_sign_extend_vma
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_start_address
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_vma
name|vma
parameter_list|)
function_decl|;
name|unsigned
name|int
name|bfd_get_gp_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|void
name|bfd_set_gp_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|unsigned
name|int
name|i
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_scan_vma
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|end
parameter_list|,
name|int
name|base
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_copy_private_bfd_data
parameter_list|(
name|bfd
modifier|*
name|ibfd
parameter_list|,
name|bfd
modifier|*
name|obfd
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_copy_private_bfd_data
parameter_list|(
name|ibfd
parameter_list|,
name|obfd
parameter_list|)
define|\
value|BFD_SEND (obfd, _bfd_copy_private_bfd_data, \                (ibfd, obfd))
name|bfd_boolean
name|bfd_merge_private_bfd_data
parameter_list|(
name|bfd
modifier|*
name|ibfd
parameter_list|,
name|bfd
modifier|*
name|obfd
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_merge_private_bfd_data
parameter_list|(
name|ibfd
parameter_list|,
name|obfd
parameter_list|)
define|\
value|BFD_SEND (obfd, _bfd_merge_private_bfd_data, \                (ibfd, obfd))
name|bfd_boolean
name|bfd_set_private_flags
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|flagword
name|flags
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_set_private_flags
parameter_list|(
name|abfd
parameter_list|,
name|flags
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_set_private_flags, (abfd, flags))
define|#
directive|define
name|bfd_sizeof_headers
parameter_list|(
name|abfd
parameter_list|,
name|reloc
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_sizeof_headers, (abfd, reloc))
define|#
directive|define
name|bfd_find_nearest_line
parameter_list|(
name|abfd
parameter_list|,
name|sec
parameter_list|,
name|syms
parameter_list|,
name|off
parameter_list|,
name|file
parameter_list|,
name|func
parameter_list|,
name|line
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_find_nearest_line, \                  (abfd, sec, syms, off, file, func, line))
define|#
directive|define
name|bfd_debug_info_start
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_debug_info_start, (abfd))
define|#
directive|define
name|bfd_debug_info_end
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_debug_info_end, (abfd))
define|#
directive|define
name|bfd_debug_info_accumulate
parameter_list|(
name|abfd
parameter_list|,
name|section
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_debug_info_accumulate, (abfd, section))
define|#
directive|define
name|bfd_stat_arch_elt
parameter_list|(
name|abfd
parameter_list|,
name|stat
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_stat_arch_elt,(abfd, stat))
define|#
directive|define
name|bfd_update_armap_timestamp
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_update_armap_timestamp, (abfd))
define|#
directive|define
name|bfd_set_arch_mach
parameter_list|(
name|abfd
parameter_list|,
name|arch
parameter_list|,
name|mach
parameter_list|)
define|\
value|BFD_SEND ( abfd, _bfd_set_arch_mach, (abfd, arch, mach))
define|#
directive|define
name|bfd_relax_section
parameter_list|(
name|abfd
parameter_list|,
name|section
parameter_list|,
name|link_info
parameter_list|,
name|again
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_relax_section, (abfd, section, link_info, again))
define|#
directive|define
name|bfd_gc_sections
parameter_list|(
name|abfd
parameter_list|,
name|link_info
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_gc_sections, (abfd, link_info))
define|#
directive|define
name|bfd_merge_sections
parameter_list|(
name|abfd
parameter_list|,
name|link_info
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_merge_sections, (abfd, link_info))
define|#
directive|define
name|bfd_discard_group
parameter_list|(
name|abfd
parameter_list|,
name|sec
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_discard_group, (abfd, sec))
define|#
directive|define
name|bfd_link_hash_table_create
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_link_hash_table_create, (abfd))
define|#
directive|define
name|bfd_link_hash_table_free
parameter_list|(
name|abfd
parameter_list|,
name|hash
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_link_hash_table_free, (hash))
define|#
directive|define
name|bfd_link_add_symbols
parameter_list|(
name|abfd
parameter_list|,
name|info
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_link_add_symbols, (abfd, info))
define|#
directive|define
name|bfd_link_just_syms
parameter_list|(
name|sec
parameter_list|,
name|info
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_link_just_syms, (sec, info))
define|#
directive|define
name|bfd_final_link
parameter_list|(
name|abfd
parameter_list|,
name|info
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_final_link, (abfd, info))
define|#
directive|define
name|bfd_free_cached_info
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_free_cached_info, (abfd))
define|#
directive|define
name|bfd_get_dynamic_symtab_upper_bound
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_get_dynamic_symtab_upper_bound, (abfd))
define|#
directive|define
name|bfd_print_private_bfd_data
parameter_list|(
name|abfd
parameter_list|,
name|file
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_print_private_bfd_data, (abfd, file))
define|#
directive|define
name|bfd_canonicalize_dynamic_symtab
parameter_list|(
name|abfd
parameter_list|,
name|asymbols
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_canonicalize_dynamic_symtab, (abfd, asymbols))
define|#
directive|define
name|bfd_get_dynamic_reloc_upper_bound
parameter_list|(
name|abfd
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_get_dynamic_reloc_upper_bound, (abfd))
define|#
directive|define
name|bfd_canonicalize_dynamic_reloc
parameter_list|(
name|abfd
parameter_list|,
name|arels
parameter_list|,
name|asyms
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_canonicalize_dynamic_reloc, (abfd, arels, asyms))
specifier|extern
name|bfd_byte
modifier|*
name|bfd_get_relocated_section_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_order
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_alt_mach_code
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|int
name|alternative
parameter_list|)
function_decl|;
struct|struct
name|bfd_preserve
block|{
name|void
modifier|*
name|marker
decl_stmt|;
name|void
modifier|*
name|tdata
decl_stmt|;
name|flagword
name|flags
decl_stmt|;
specifier|const
name|struct
name|bfd_arch_info
modifier|*
name|arch_info
decl_stmt|;
name|struct
name|bfd_section
modifier|*
name|sections
decl_stmt|;
name|struct
name|bfd_section
modifier|*
modifier|*
name|section_tail
decl_stmt|;
name|unsigned
name|int
name|section_count
decl_stmt|;
name|struct
name|bfd_hash_table
name|section_htab
decl_stmt|;
block|}
struct|;
name|bfd_boolean
name|bfd_preserve_save
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_preserve
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_preserve_restore
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_preserve
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_preserve_finish
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_preserve
modifier|*
parameter_list|)
function_decl|;
comment|/* Extracted from archive.c.  */
name|symindex
name|bfd_get_next_mapent
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|symindex
name|previous
parameter_list|,
name|carsym
modifier|*
modifier|*
name|sym
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_archive_head
parameter_list|(
name|bfd
modifier|*
name|output
parameter_list|,
name|bfd
modifier|*
name|new_head
parameter_list|)
function_decl|;
name|bfd
modifier|*
name|bfd_openr_next_archived_file
parameter_list|(
name|bfd
modifier|*
name|archive
parameter_list|,
name|bfd
modifier|*
name|previous
parameter_list|)
function_decl|;
comment|/* Extracted from corefile.c.  */
specifier|const
name|char
modifier|*
name|bfd_core_file_failing_command
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|int
name|bfd_core_file_failing_signal
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
name|bfd_boolean
name|core_file_matches_executable_p
parameter_list|(
name|bfd
modifier|*
name|core_bfd
parameter_list|,
name|bfd
modifier|*
name|exec_bfd
parameter_list|)
function_decl|;
comment|/* Extracted from targets.c.  */
define|#
directive|define
name|BFD_SEND
parameter_list|(
name|bfd
parameter_list|,
name|message
parameter_list|,
name|arglist
parameter_list|)
define|\
value|((*((bfd)->xvec->message)) arglist)
ifdef|#
directive|ifdef
name|DEBUG_BFD_SEND
undef|#
directive|undef
name|BFD_SEND
define|#
directive|define
name|BFD_SEND
parameter_list|(
name|bfd
parameter_list|,
name|message
parameter_list|,
name|arglist
parameter_list|)
define|\
value|(((bfd)&& (bfd)->xvec&& (bfd)->xvec->message) ? \     ((*((bfd)->xvec->message)) arglist) : \     (bfd_assert (__FILE__,__LINE__), NULL))
endif|#
directive|endif
define|#
directive|define
name|BFD_SEND_FMT
parameter_list|(
name|bfd
parameter_list|,
name|message
parameter_list|,
name|arglist
parameter_list|)
define|\
value|(((bfd)->xvec->message[(int) ((bfd)->format)]) arglist)
ifdef|#
directive|ifdef
name|DEBUG_BFD_SEND
undef|#
directive|undef
name|BFD_SEND_FMT
define|#
directive|define
name|BFD_SEND_FMT
parameter_list|(
name|bfd
parameter_list|,
name|message
parameter_list|,
name|arglist
parameter_list|)
define|\
value|(((bfd)&& (bfd)->xvec&& (bfd)->xvec->message) ? \    (((bfd)->xvec->message[(int) ((bfd)->format)]) arglist) : \    (bfd_assert (__FILE__,__LINE__), NULL))
endif|#
directive|endif
enum|enum
name|bfd_flavour
block|{
name|bfd_target_unknown_flavour
block|,
name|bfd_target_aout_flavour
block|,
name|bfd_target_coff_flavour
block|,
name|bfd_target_ecoff_flavour
block|,
name|bfd_target_xcoff_flavour
block|,
name|bfd_target_elf_flavour
block|,
name|bfd_target_ieee_flavour
block|,
name|bfd_target_nlm_flavour
block|,
name|bfd_target_oasys_flavour
block|,
name|bfd_target_tekhex_flavour
block|,
name|bfd_target_srec_flavour
block|,
name|bfd_target_ihex_flavour
block|,
name|bfd_target_som_flavour
block|,
name|bfd_target_os9k_flavour
block|,
name|bfd_target_versados_flavour
block|,
name|bfd_target_msdos_flavour
block|,
name|bfd_target_ovax_flavour
block|,
name|bfd_target_evax_flavour
block|,
name|bfd_target_mmo_flavour
block|,
name|bfd_target_mach_o_flavour
block|,
name|bfd_target_pef_flavour
block|,
name|bfd_target_pef_xlib_flavour
block|,
name|bfd_target_sym_flavour
block|}
enum|;
enum|enum
name|bfd_endian
block|{
name|BFD_ENDIAN_BIG
block|,
name|BFD_ENDIAN_LITTLE
block|,
name|BFD_ENDIAN_UNKNOWN
block|}
enum|;
comment|/* Forward declaration.  */
typedef|typedef
name|struct
name|bfd_link_info
name|_bfd_link_info
typedef|;
typedef|typedef
struct|struct
name|bfd_target
block|{
comment|/* Identifies the kind of target, e.g., SunOS4, Ultrix, etc.  */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* The "flavour" of a back end is a general indication about     the contents of a file.  */
name|enum
name|bfd_flavour
name|flavour
decl_stmt|;
comment|/* The order of bytes within the data area of a file.  */
name|enum
name|bfd_endian
name|byteorder
decl_stmt|;
comment|/* The order of bytes within the header parts of a file.  */
name|enum
name|bfd_endian
name|header_byteorder
decl_stmt|;
comment|/* A mask of all the flags which an executable may have set -      from the set<<BFD_NO_FLAGS>>,<<HAS_RELOC>>, ...<<D_PAGED>>.  */
name|flagword
name|object_flags
decl_stmt|;
comment|/* A mask of all the flags which a section may have set - from     the set<<SEC_NO_FLAGS>>,<<SEC_ALLOC>>, ...<<SET_NEVER_LOAD>>.  */
name|flagword
name|section_flags
decl_stmt|;
comment|/* The character normally found at the front of a symbol.     (if any), perhaps `_'.  */
name|char
name|symbol_leading_char
decl_stmt|;
comment|/* The pad character for file names within an archive header.  */
name|char
name|ar_pad_char
decl_stmt|;
comment|/* The maximum number of characters in an archive header.  */
name|unsigned
name|short
name|ar_max_namelen
decl_stmt|;
comment|/* Entries for byte swapping for data. These are different from the      other entry points, since they don't take a BFD asthe first argument.      Certain other handlers could do the same.  */
name|bfd_uint64_t
function_decl|(
modifier|*
name|bfd_getx64
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
function_decl|(
modifier|*
name|bfd_getx_signed_64
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_putx64
function_decl|)
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|bfd_getx32
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
function_decl|(
modifier|*
name|bfd_getx_signed_32
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_putx32
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|bfd_getx16
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
function_decl|(
modifier|*
name|bfd_getx_signed_16
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_putx16
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Byte swapping for the headers.  */
name|bfd_uint64_t
function_decl|(
modifier|*
name|bfd_h_getx64
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
function_decl|(
modifier|*
name|bfd_h_getx_signed_64
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_h_putx64
function_decl|)
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|bfd_h_getx32
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
function_decl|(
modifier|*
name|bfd_h_getx_signed_32
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_h_putx32
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
function_decl|(
modifier|*
name|bfd_h_getx16
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
function_decl|(
modifier|*
name|bfd_h_getx_signed_16
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bfd_h_putx16
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Format dependent routines: these are vectors of entry points      within the target vector structure, one for each format to check.  */
comment|/* Check the format of a file being read.  Return a<<bfd_target *>> or zero.  */
specifier|const
name|struct
name|bfd_target
modifier|*
function_decl|(
modifier|*
name|_bfd_check_format
index|[
name|bfd_type_end
index|]
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Set the format of a file being written.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_set_format
index|[
name|bfd_type_end
index|]
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Write cached information into a file being written, at<<bfd_close>>.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_write_contents
index|[
name|bfd_type_end
index|]
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Generic entry points.  */
define|#
directive|define
name|BFD_JUMP_TABLE_GENERIC
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_close_and_cleanup, \   NAME##_bfd_free_cached_info, \   NAME##_new_section_hook, \   NAME##_get_section_contents, \   NAME##_get_section_contents_in_window
comment|/* Called when the BFD is being closed to do any necessary cleanup.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_close_and_cleanup
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Ask the BFD to free all cached information.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_free_cached_info
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Called when a new section is created.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_new_section_hook
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|)
function_decl|;
comment|/* Read the contents of a section.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_get_section_contents
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
name|void
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_get_section_contents_in_window
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
name|bfd_window
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
comment|/* Entry points to copy private data.  */
define|#
directive|define
name|BFD_JUMP_TABLE_COPY
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_bfd_copy_private_bfd_data, \   NAME##_bfd_merge_private_bfd_data, \   NAME##_bfd_copy_private_section_data, \   NAME##_bfd_copy_private_symbol_data, \   NAME##_bfd_set_private_flags, \   NAME##_bfd_print_private_bfd_data
comment|/* Called to copy BFD general private data from one object file      to another.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_copy_private_bfd_data
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Called to merge BFD general private data from one object file      to a common output file when linking.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_merge_private_bfd_data
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Called to copy BFD private section data from one object file      to another.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_copy_private_section_data
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|)
function_decl|;
comment|/* Called to copy BFD private symbol data from one symbol      to another.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_copy_private_symbol_data
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
comment|/* Called to set private backend flags.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_set_private_flags
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|flagword
parameter_list|)
function_decl|;
comment|/* Called to print private BFD data.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_print_private_bfd_data
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Core file entry points.  */
define|#
directive|define
name|BFD_JUMP_TABLE_CORE
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_core_file_failing_command, \   NAME##_core_file_failing_signal, \   NAME##_core_file_matches_executable_p
name|char
modifier|*
function_decl|(
modifier|*
name|_core_file_failing_command
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|_core_file_failing_signal
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_core_file_matches_executable_p
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Archive entry points.  */
define|#
directive|define
name|BFD_JUMP_TABLE_ARCHIVE
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_slurp_armap, \   NAME##_slurp_extended_name_table, \   NAME##_construct_extended_name_table, \   NAME##_truncate_arname, \   NAME##_write_armap, \   NAME##_read_ar_hdr, \   NAME##_openr_next_archived_file, \   NAME##_get_elt_at_index, \   NAME##_generic_stat_arch_elt, \   NAME##_update_armap_timestamp
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_slurp_armap
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_slurp_extended_name_table
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_construct_extended_name_table
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|bfd_size_type
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|_bfd_truncate_arname
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|write_armap
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|orl
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|_bfd_read_ar_hdr_fn
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|bfd
modifier|*
function_decl|(
modifier|*
name|openr_next_archived_file
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_get_elt_at_index
parameter_list|(
name|b
parameter_list|,
name|i
parameter_list|)
value|BFD_SEND (b, _bfd_get_elt_at_index, (b,i))
name|bfd
modifier|*
function_decl|(
modifier|*
name|_bfd_get_elt_at_index
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|symindex
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|_bfd_stat_arch_elt
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_update_armap_timestamp
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Entry points used for symbols.  */
define|#
directive|define
name|BFD_JUMP_TABLE_SYMBOLS
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_get_symtab_upper_bound, \   NAME##_canonicalize_symtab, \   NAME##_make_empty_symbol, \   NAME##_print_symbol, \   NAME##_get_symbol_info, \   NAME##_bfd_is_local_label_name, \   NAME##_get_lineno, \   NAME##_find_nearest_line, \   NAME##_bfd_make_debug_symbol, \   NAME##_read_minisymbols, \   NAME##_minisymbol_to_symbol
name|long
function_decl|(
modifier|*
name|_bfd_get_symtab_upper_bound
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|_bfd_canonicalize_symtab
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|struct
name|bfd_symbol
modifier|*
function_decl|(
modifier|*
name|_bfd_make_empty_symbol
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|_bfd_print_symbol
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|bfd_print_symbol_type
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_print_symbol
parameter_list|(
name|b
parameter_list|,
name|p
parameter_list|,
name|s
parameter_list|,
name|e
parameter_list|)
value|BFD_SEND (b, _bfd_print_symbol, (b,p,s,e))
name|void
function_decl|(
modifier|*
name|_bfd_get_symbol_info
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|symbol_info
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_get_symbol_info
parameter_list|(
name|b
parameter_list|,
name|p
parameter_list|,
name|e
parameter_list|)
value|BFD_SEND (b, _bfd_get_symbol_info, (b,p,e))
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_is_local_label_name
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|alent
modifier|*
function_decl|(
modifier|*
name|_get_lineno
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_find_nearest_line
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
comment|/* Back-door to allow format-aware applications to create debug symbols     while using BFD for everything else.  Currently used by the assembler     when creating COFF files.  */
name|asymbol
modifier|*
function_decl|(
modifier|*
name|_bfd_make_debug_symbol
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
name|size
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_read_minisymbols
parameter_list|(
name|b
parameter_list|,
name|d
parameter_list|,
name|m
parameter_list|,
name|s
parameter_list|)
define|\
value|BFD_SEND (b, _read_minisymbols, (b, d, m, s))
name|long
function_decl|(
modifier|*
name|_read_minisymbols
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|,
name|void
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_minisymbol_to_symbol
parameter_list|(
name|b
parameter_list|,
name|d
parameter_list|,
name|m
parameter_list|,
name|f
parameter_list|)
define|\
value|BFD_SEND (b, _minisymbol_to_symbol, (b, d, m, f))
name|asymbol
modifier|*
function_decl|(
modifier|*
name|_minisymbol_to_symbol
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
comment|/* Routines for relocs.  */
define|#
directive|define
name|BFD_JUMP_TABLE_RELOCS
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_get_reloc_upper_bound, \   NAME##_canonicalize_reloc, \   NAME##_bfd_reloc_type_lookup
name|long
function_decl|(
modifier|*
name|_get_reloc_upper_bound
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|_bfd_canonicalize_reloc
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
name|arelent
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* See documentation on reloc types.  */
name|reloc_howto_type
modifier|*
function_decl|(
modifier|*
name|reloc_type_lookup
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_reloc_code_real_type
parameter_list|)
function_decl|;
comment|/* Routines used when writing an object file.  */
define|#
directive|define
name|BFD_JUMP_TABLE_WRITE
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_set_arch_mach, \   NAME##_set_section_contents
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_set_arch_mach
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|enum
name|bfd_architecture
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_set_section_contents
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
comment|/* Routines used by the linker.  */
define|#
directive|define
name|BFD_JUMP_TABLE_LINK
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_sizeof_headers, \   NAME##_bfd_get_relocated_section_contents, \   NAME##_bfd_relax_section, \   NAME##_bfd_link_hash_table_create, \   NAME##_bfd_link_hash_table_free, \   NAME##_bfd_link_add_symbols, \   NAME##_bfd_link_just_syms, \   NAME##_bfd_final_link, \   NAME##_bfd_link_split_section, \   NAME##_bfd_gc_sections, \   NAME##_bfd_merge_sections, \   NAME##_bfd_discard_group
name|int
function_decl|(
modifier|*
name|_bfd_sizeof_headers
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
name|bfd_byte
modifier|*
function_decl|(
modifier|*
name|_bfd_get_relocated_section_contents
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_order
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_relax_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|)
function_decl|;
comment|/* Create a hash table for the linker.  Different backends store      different information in this table.  */
name|struct
name|bfd_link_hash_table
modifier|*
function_decl|(
modifier|*
name|_bfd_link_hash_table_create
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Release the memory associated with the linker hash table.  */
name|void
function_decl|(
modifier|*
name|_bfd_link_hash_table_free
function_decl|)
parameter_list|(
name|struct
name|bfd_link_hash_table
modifier|*
parameter_list|)
function_decl|;
comment|/* Add symbols from this object file into the hash table.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_link_add_symbols
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Indicate that we are only retrieving symbol values from this section.  */
name|void
function_decl|(
modifier|*
name|_bfd_link_just_syms
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Do a link based on the link_order structures attached to each      section of the BFD.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_final_link
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Should this section be split up into smaller pieces during linking.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_link_split_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|)
function_decl|;
comment|/* Remove sections that are not referenced from the output.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_gc_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Attempt to merge SEC_MERGE sections.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_merge_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Discard members of a group.  */
name|bfd_boolean
function_decl|(
modifier|*
name|_bfd_discard_group
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|)
function_decl|;
comment|/* Routines to handle dynamic symbols and relocs.  */
define|#
directive|define
name|BFD_JUMP_TABLE_DYNAMIC
parameter_list|(
name|NAME
parameter_list|)
define|\
value|NAME##_get_dynamic_symtab_upper_bound, \   NAME##_canonicalize_dynamic_symtab, \   NAME##_get_dynamic_reloc_upper_bound, \   NAME##_canonicalize_dynamic_reloc
comment|/* Get the amount of memory required to hold the dynamic symbols.  */
name|long
function_decl|(
modifier|*
name|_bfd_get_dynamic_symtab_upper_bound
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Read in the dynamic symbols.  */
name|long
function_decl|(
modifier|*
name|_bfd_canonicalize_dynamic_symtab
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Get the amount of memory required to hold the dynamic relocs.  */
name|long
function_decl|(
modifier|*
name|_bfd_get_dynamic_reloc_upper_bound
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Read in the dynamic relocs.  */
name|long
function_decl|(
modifier|*
name|_bfd_canonicalize_dynamic_reloc
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Opposite endian version of this target.  */
specifier|const
name|struct
name|bfd_target
modifier|*
name|alternative_target
decl_stmt|;
comment|/* Data for use by back-end routines, which isn't      generic enough to belong in this structure.  */
specifier|const
name|void
modifier|*
name|backend_data
decl_stmt|;
block|}
name|bfd_target
typedef|;
name|bfd_boolean
name|bfd_set_default_target
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
specifier|const
name|bfd_target
modifier|*
name|bfd_find_target
parameter_list|(
specifier|const
name|char
modifier|*
name|target_name
parameter_list|,
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
modifier|*
name|bfd_target_list
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|bfd_target
modifier|*
name|bfd_search_for_target
parameter_list|(
name|int
function_decl|(
modifier|*
name|search_func
function_decl|)
parameter_list|(
specifier|const
name|bfd_target
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Extracted from format.c.  */
name|bfd_boolean
name|bfd_check_format
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_format
name|format
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_check_format_matches
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_format
name|format
parameter_list|,
name|char
modifier|*
modifier|*
modifier|*
name|matching
parameter_list|)
function_decl|;
name|bfd_boolean
name|bfd_set_format
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_format
name|format
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|bfd_format_string
parameter_list|(
name|bfd_format
name|format
parameter_list|)
function_decl|;
comment|/* Extracted from linker.c.  */
name|bfd_boolean
name|bfd_link_split_section
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|)
function_decl|;
define|#
directive|define
name|bfd_link_split_section
parameter_list|(
name|abfd
parameter_list|,
name|sec
parameter_list|)
define|\
value|BFD_SEND (abfd, _bfd_link_split_section, (abfd, sec))
comment|/* Extracted from simple.c.  */
name|bfd_byte
modifier|*
name|bfd_simple_get_relocated_section_contents
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|asection
modifier|*
name|sec
parameter_list|,
name|bfd_byte
modifier|*
name|outbuf
parameter_list|,
name|asymbol
modifier|*
modifier|*
name|symbol_table
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

