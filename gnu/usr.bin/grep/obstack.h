begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* obstack.h - object stack macros    Copyright (C) 1988,89,90,91,92,93,94,96,97,98,99 Free Software Foundation, Inc.     This file is part of the GNU C Library.  Its master source is NOT part of    the C library, however.  The master source lives in /gd/gnu/lib.     The GNU C Library is free software; you can redistribute it and/or    modify it under the terms of the GNU Library General Public License as    published by the Free Software Foundation; either version 2 of the    License, or (at your option) any later version.     The GNU C Library is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    Library General Public License for more details.     You should have received a copy of the GNU Library General Public    License along with the GNU C Library; see the file COPYING.LIB.  If not,    write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* Summary:  All the apparent functions defined here are macros. The idea is that you would use these pre-tested macros to solve a very specific set of problems, and they would run fast. Caution: no side-effects in arguments please!! They may be evaluated MANY times!!  These macros operate a stack of objects.  Each object starts life small, and may grow to maturity.  (Consider building a word syllable by syllable.)  An object can move while it is growing.  Once it has been "finished" it never changes address again.  So the "top of the stack" is typically an immature growing object, while the rest of the stack is of mature, fixed size and fixed address objects.  These routines grab large chunks of memory, using a function you supply, called `obstack_chunk_alloc'.  On occasion, they free chunks, by calling `obstack_chunk_free'.  You must define them and declare them before using any obstack macros.  Each independent stack is represented by a `struct obstack'. Each of the obstack macros expects a pointer to such a structure as the first argument.  One motivation for this package is the problem of growing char strings in symbol tables.  Unless you are "fascist pig with a read-only mind" --Gosper's immortal quote from HAKMEM item 154, out of context--you would not like to put any arbitrary upper limit on the length of your symbols.  In practice this often means you will build many short symbols and a few long symbols.  At the time you are reading a symbol you don't know how long it is.  One traditional method is to read a symbol into a buffer, realloc()ating the buffer every time you try to read a symbol that is longer than the buffer.  This is beaut, but you still will want to copy the symbol from the buffer to a more permanent symbol-table entry say about half the time.  With obstacks, you can work differently.  Use one obstack for all symbol names.  As you read a symbol, grow the name in the obstack gradually. When the name is complete, finalize it.  Then, if the symbol exists already, free the newly read name.  The way we do this is to take a large chunk, allocating memory from low addresses.  When you want to build a symbol in the chunk you just add chars above the current "high water mark" in the chunk.  When you have finished adding chars, because you got to the end of the symbol, you know how long the chars are, and you can create a new object. Mostly the chars will not burst over the highest address of the chunk, because you would typically expect a chunk to be (say) 100 times as long as an average object.  In case that isn't clear, when we have enough chars to make up the object, THEY ARE ALREADY CONTIGUOUS IN THE CHUNK (guaranteed) so we just point to it where it lies.  No moving of chars is needed and this is the second win: potentially long strings need never be explicitly shuffled. Once an object is formed, it does not change its address during its lifetime.  When the chars burst over a chunk boundary, we allocate a larger chunk, and then copy the partly formed object from the end of the old chunk to the beginning of the new larger chunk.  We then carry on accreting characters to the end of the object as we normally would.  A special macro is provided to add a single char at a time to a growing object.  This allows the use of register variables, which break the ordinary 'growth' macro.  Summary: 	We allocate large chunks. 	We carve out one object at a time from the current chunk. 	Once carved, an object never moves. 	We are free to append data of any size to the currently 	  growing object. 	Exactly one object is growing in an obstack at any one time. 	You can run one obstack per control block. 	You may have as many control blocks as you dare. 	Because of the way we do it, you can `unwind' an obstack 	  back to a previous state. (You may remove objects much 	  as you would with a stack.) */
end_comment

begin_comment
comment|/* Don't do the contents of this file more than once.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_OBSTACK_H
end_ifndef

begin_define
define|#
directive|define
name|_OBSTACK_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* We use subtraction of (char *) 0 instead of casting to int    because on word-addressable machines a simple cast to int    may ignore the byte-within-word field of the pointer.  */
ifndef|#
directive|ifndef
name|__PTR_TO_INT
define|#
directive|define
name|__PTR_TO_INT
parameter_list|(
name|P
parameter_list|)
value|((P) - (char *) 0)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__INT_TO_PTR
define|#
directive|define
name|__INT_TO_PTR
parameter_list|(
name|P
parameter_list|)
value|((P) + (char *) 0)
endif|#
directive|endif
comment|/* We need the type of the resulting object.  If __PTRDIFF_TYPE__ is    defined, as with GNU C, use that; that way we don't pollute the    namespace with<stddef.h>'s symbols.  Otherwise, if<stddef.h> is    available, include it and use ptrdiff_t.  In traditional C, long is    the best that we can do.  */
ifdef|#
directive|ifdef
name|__PTRDIFF_TYPE__
define|#
directive|define
name|PTR_INT_TYPE
value|__PTRDIFF_TYPE__
else|#
directive|else
ifdef|#
directive|ifdef
name|HAVE_STDDEF_H
include|#
directive|include
file|<stddef.h>
define|#
directive|define
name|PTR_INT_TYPE
value|ptrdiff_t
else|#
directive|else
define|#
directive|define
name|PTR_INT_TYPE
value|long
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
name|defined
name|_LIBC
operator|||
name|defined
name|HAVE_STRING_H
include|#
directive|include
file|<string.h>
define|#
directive|define
name|_obstack_memcpy
parameter_list|(
name|To
parameter_list|,
name|From
parameter_list|,
name|N
parameter_list|)
value|memcpy ((To), (From), (N))
else|#
directive|else
ifdef|#
directive|ifdef
name|memcpy
define|#
directive|define
name|_obstack_memcpy
parameter_list|(
name|To
parameter_list|,
name|From
parameter_list|,
name|N
parameter_list|)
value|memcpy ((To), (From), (N))
else|#
directive|else
define|#
directive|define
name|_obstack_memcpy
parameter_list|(
name|To
parameter_list|,
name|From
parameter_list|,
name|N
parameter_list|)
value|bcopy ((From), (To), (N))
endif|#
directive|endif
endif|#
directive|endif
struct|struct
name|_obstack_chunk
comment|/* Lives at front of each chunk. */
block|{
name|char
modifier|*
name|limit
decl_stmt|;
comment|/* 1 past end of this chunk */
name|struct
name|_obstack_chunk
modifier|*
name|prev
decl_stmt|;
comment|/* address of prior chunk or NULL */
name|char
name|contents
index|[
literal|4
index|]
decl_stmt|;
comment|/* objects begin here */
block|}
struct|;
struct|struct
name|obstack
comment|/* control current object in current chunk */
block|{
name|long
name|chunk_size
decl_stmt|;
comment|/* preferred size to allocate chunks in */
name|struct
name|_obstack_chunk
modifier|*
name|chunk
decl_stmt|;
comment|/* address of current struct obstack_chunk */
name|char
modifier|*
name|object_base
decl_stmt|;
comment|/* address of object we are building */
name|char
modifier|*
name|next_free
decl_stmt|;
comment|/* where to add next char to current object */
name|char
modifier|*
name|chunk_limit
decl_stmt|;
comment|/* address of char after current chunk */
name|PTR_INT_TYPE
name|temp
decl_stmt|;
comment|/* Temporary for some macros.  */
name|int
name|alignment_mask
decl_stmt|;
comment|/* Mask of alignment for each object. */
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
comment|/* These prototypes vary based on `use_extra_arg', and we use      casts to the prototypeless function type in all assignments,      but having prototypes here quiets -Wstrict-prototypes.  */
name|struct
name|_obstack_chunk
modifier|*
function_decl|(
modifier|*
name|chunkfun
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|freefun
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|_obstack_chunk
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|extra_arg
decl_stmt|;
comment|/* first arg for chunk alloc/dealloc funcs */
else|#
directive|else
name|struct
name|_obstack_chunk
modifier|*
function_decl|(
modifier|*
name|chunkfun
function_decl|)
parameter_list|()
function_decl|;
comment|/* User's fcn to allocate a chunk.  */
name|void
function_decl|(
modifier|*
name|freefun
function_decl|)
parameter_list|()
function_decl|;
comment|/* User's function to free a chunk.  */
name|char
modifier|*
name|extra_arg
decl_stmt|;
comment|/* first arg for chunk alloc/dealloc funcs */
endif|#
directive|endif
name|unsigned
name|use_extra_arg
range|:
literal|1
decl_stmt|;
comment|/* chunk alloc/dealloc funcs take extra arg */
name|unsigned
name|maybe_empty_object
range|:
literal|1
decl_stmt|;
comment|/* There is a possibility that the current 				   chunk contains a zero-length object.  This 				   prevents freeing the chunk if we allocate 				   a bigger chunk to replace it. */
name|unsigned
name|alloc_failed
range|:
literal|1
decl_stmt|;
comment|/* No longer used, as we now call the failed 				   handler on error, but retained for binary 				   compatibility.  */
block|}
struct|;
comment|/* Declare the external functions we use; they are in obstack.c.  */
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
specifier|extern
name|void
name|_obstack_newchunk
parameter_list|(
name|struct
name|obstack
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|_obstack_free
parameter_list|(
name|struct
name|obstack
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_obstack_begin
parameter_list|(
name|struct
name|obstack
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|long
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_obstack_begin_1
parameter_list|(
name|struct
name|obstack
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|long
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|_obstack_memory_used
parameter_list|(
name|struct
name|obstack
modifier|*
parameter_list|)
function_decl|;
else|#
directive|else
specifier|extern
name|void
name|_obstack_newchunk
parameter_list|()
function_decl|;
specifier|extern
name|void
name|_obstack_free
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_obstack_begin
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_obstack_begin_1
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_obstack_memory_used
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
comment|/* Do the function-declarations after the structs    but before defining the macros.  */
name|void
name|obstack_init
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_alloc
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_copy
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|address
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_copy0
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|address
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|obstack_free
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|block
parameter_list|)
function_decl|;
name|void
name|obstack_blank
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|obstack_grow
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|obstack_grow0
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|obstack_1grow
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|data_char
parameter_list|)
function_decl|;
name|void
name|obstack_ptr_grow
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|obstack_int_grow
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_finish
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|int
name|obstack_object_size
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|int
name|obstack_room
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|void
name|obstack_make_room
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
name|obstack_1grow_fast
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|data_char
parameter_list|)
function_decl|;
name|void
name|obstack_ptr_grow_fast
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|obstack_int_grow_fast
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|data
parameter_list|)
function_decl|;
name|void
name|obstack_blank_fast
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|,
name|int
name|size
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_base
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|void
modifier|*
name|obstack_next_free
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|int
name|obstack_alignment_mask
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|int
name|obstack_chunk_size
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
name|int
name|obstack_memory_used
parameter_list|(
name|struct
name|obstack
modifier|*
name|obstack
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* __STDC__ */
comment|/* Non-ANSI C cannot really support alternative functions for these macros,    so we do not declare them.  */
comment|/* Error handler called when `obstack_chunk_alloc' failed to allocate    more memory.  This can be set to a user defined function which    should either abort gracefully or use longjump - but shouldn't    return.  The default action is to print a message and abort.  */
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
specifier|extern
name|void
function_decl|(
modifier|*
name|obstack_alloc_failed_handler
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
specifier|extern
name|void
function_decl|(
modifier|*
name|obstack_alloc_failed_handler
function_decl|)
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* Exit value used when `print_and_abort' is used.  */
specifier|extern
name|int
name|obstack_exit_failure
decl_stmt|;
comment|/* Pointer to beginning of object being allocated or to be allocated next.    Note that this might not be the final address of the object    because a new chunk might be needed to hold the final size.  */
define|#
directive|define
name|obstack_base
parameter_list|(
name|h
parameter_list|)
value|((h)->object_base)
comment|/* Size for allocating ordinary chunks.  */
define|#
directive|define
name|obstack_chunk_size
parameter_list|(
name|h
parameter_list|)
value|((h)->chunk_size)
comment|/* Pointer to next byte not yet allocated in current chunk.  */
define|#
directive|define
name|obstack_next_free
parameter_list|(
name|h
parameter_list|)
value|((h)->next_free)
comment|/* Mask specifying low bits that should be clear in address of an object.  */
define|#
directive|define
name|obstack_alignment_mask
parameter_list|(
name|h
parameter_list|)
value|((h)->alignment_mask)
comment|/* To prevent prototype warnings provide complete argument list in    standard C version.  */
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
define|#
directive|define
name|obstack_init
parameter_list|(
name|h
parameter_list|)
define|\
value|_obstack_begin ((h), 0, 0, \ 		  (void *(*) (long)) obstack_chunk_alloc, (void (*) (void *)) obstack_chunk_free)
define|#
directive|define
name|obstack_begin
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|)
define|\
value|_obstack_begin ((h), (size), 0, \ 		  (void *(*) (long)) obstack_chunk_alloc, (void (*) (void *)) obstack_chunk_free)
define|#
directive|define
name|obstack_specify_allocation
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|,
name|alignment
parameter_list|,
name|chunkfun
parameter_list|,
name|freefun
parameter_list|)
define|\
value|_obstack_begin ((h), (size), (alignment), \ 		    (void *(*) (long)) (chunkfun), (void (*) (void *)) (freefun))
define|#
directive|define
name|obstack_specify_allocation_with_arg
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|,
name|alignment
parameter_list|,
name|chunkfun
parameter_list|,
name|freefun
parameter_list|,
name|arg
parameter_list|)
define|\
value|_obstack_begin_1 ((h), (size), (alignment), \ 		    (void *(*) (void *, long)) (chunkfun), \ 		    (void (*) (void *, void *)) (freefun), (arg))
define|#
directive|define
name|obstack_chunkfun
parameter_list|(
name|h
parameter_list|,
name|newchunkfun
parameter_list|)
define|\
value|((h) -> chunkfun = (struct _obstack_chunk *(*)(void *, long)) (newchunkfun))
define|#
directive|define
name|obstack_freefun
parameter_list|(
name|h
parameter_list|,
name|newfreefun
parameter_list|)
define|\
value|((h) -> freefun = (void (*)(void *, struct _obstack_chunk *)) (newfreefun))
else|#
directive|else
define|#
directive|define
name|obstack_init
parameter_list|(
name|h
parameter_list|)
define|\
value|_obstack_begin ((h), 0, 0, \ 		  (void *(*) ()) obstack_chunk_alloc, (void (*) ()) obstack_chunk_free)
define|#
directive|define
name|obstack_begin
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|)
define|\
value|_obstack_begin ((h), (size), 0, \ 		  (void *(*) ()) obstack_chunk_alloc, (void (*) ()) obstack_chunk_free)
define|#
directive|define
name|obstack_specify_allocation
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|,
name|alignment
parameter_list|,
name|chunkfun
parameter_list|,
name|freefun
parameter_list|)
define|\
value|_obstack_begin ((h), (size), (alignment), \ 		    (void *(*) ()) (chunkfun), (void (*) ()) (freefun))
define|#
directive|define
name|obstack_specify_allocation_with_arg
parameter_list|(
name|h
parameter_list|,
name|size
parameter_list|,
name|alignment
parameter_list|,
name|chunkfun
parameter_list|,
name|freefun
parameter_list|,
name|arg
parameter_list|)
define|\
value|_obstack_begin_1 ((h), (size), (alignment), \ 		    (void *(*) ()) (chunkfun), (void (*) ()) (freefun), (arg))
define|#
directive|define
name|obstack_chunkfun
parameter_list|(
name|h
parameter_list|,
name|newchunkfun
parameter_list|)
define|\
value|((h) -> chunkfun = (struct _obstack_chunk *(*)()) (newchunkfun))
define|#
directive|define
name|obstack_freefun
parameter_list|(
name|h
parameter_list|,
name|newfreefun
parameter_list|)
define|\
value|((h) -> freefun = (void (*)()) (newfreefun))
endif|#
directive|endif
define|#
directive|define
name|obstack_1grow_fast
parameter_list|(
name|h
parameter_list|,
name|achar
parameter_list|)
value|(*((h)->next_free)++ = achar)
define|#
directive|define
name|obstack_blank_fast
parameter_list|(
name|h
parameter_list|,
name|n
parameter_list|)
value|((h)->next_free += (n))
define|#
directive|define
name|obstack_memory_used
parameter_list|(
name|h
parameter_list|)
value|_obstack_memory_used (h)
if|#
directive|if
name|defined
name|__GNUC__
operator|&&
name|defined
name|__STDC__
operator|&&
name|__STDC__
comment|/* NextStep 2.0 cc is really gcc 1.93 but it defines __GNUC__ = 2 and    does not implement __extension__.  But that compiler doesn't define    __GNUC_MINOR__.  */
if|#
directive|if
name|__GNUC__
operator|<
literal|2
operator|||
operator|(
name|__NeXT__
operator|&&
operator|!
name|__GNUC_MINOR__
operator|)
define|#
directive|define
name|__extension__
endif|#
directive|endif
comment|/* For GNU C, if not -traditional,    we can define these macros to compute all args only once    without using a global variable.    Also, we can avoid using the `temp' slot, to make faster code.  */
define|#
directive|define
name|obstack_object_size
parameter_list|(
name|OBSTACK
parameter_list|)
define|\
value|__extension__								\   ({ struct obstack *__o = (OBSTACK);					\      (unsigned) (__o->next_free - __o->object_base); })
define|#
directive|define
name|obstack_room
parameter_list|(
name|OBSTACK
parameter_list|)
define|\
value|__extension__								\   ({ struct obstack *__o = (OBSTACK);					\      (unsigned) (__o->chunk_limit - __o->next_free); })
define|#
directive|define
name|obstack_make_room
parameter_list|(
name|OBSTACK
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    int __len = (length);						\    if (__o->chunk_limit - __o->next_free< __len)			\      _obstack_newchunk (__o, __len);					\    (void) 0; })
define|#
directive|define
name|obstack_empty_p
parameter_list|(
name|OBSTACK
parameter_list|)
define|\
value|__extension__								\   ({ struct obstack *__o = (OBSTACK);					\      (__o->chunk->prev == 0&& __o->next_free - __o->chunk->contents == 0); })
define|#
directive|define
name|obstack_grow
parameter_list|(
name|OBSTACK
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    int __len = (length);						\    if (__o->next_free + __len> __o->chunk_limit)			\      _obstack_newchunk (__o, __len);					\    _obstack_memcpy (__o->next_free, (char *) (where), __len);		\    __o->next_free += __len;						\    (void) 0; })
define|#
directive|define
name|obstack_grow0
parameter_list|(
name|OBSTACK
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    int __len = (length);						\    if (__o->next_free + __len + 1> __o->chunk_limit)			\      _obstack_newchunk (__o, __len + 1);				\    _obstack_memcpy (__o->next_free, (char *) (where), __len);		\    __o->next_free += __len;						\    *(__o->next_free)++ = 0;						\    (void) 0; })
define|#
directive|define
name|obstack_1grow
parameter_list|(
name|OBSTACK
parameter_list|,
name|datum
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    if (__o->next_free + 1> __o->chunk_limit)				\      _obstack_newchunk (__o, 1);					\    *(__o->next_free)++ = (datum);					\    (void) 0; })
comment|/* These assume that the obstack alignment is good enough for pointers or ints,    and that the data added so far to the current object    shares that much alignment.  */
define|#
directive|define
name|obstack_ptr_grow
parameter_list|(
name|OBSTACK
parameter_list|,
name|datum
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    if (__o->next_free + sizeof (void *)> __o->chunk_limit)		\      _obstack_newchunk (__o, sizeof (void *));				\    *((void **)__o->next_free)++ = ((void *)datum);			\    (void) 0; })
define|#
directive|define
name|obstack_int_grow
parameter_list|(
name|OBSTACK
parameter_list|,
name|datum
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    if (__o->next_free + sizeof (int)> __o->chunk_limit)		\      _obstack_newchunk (__o, sizeof (int));				\    *((int *)__o->next_free)++ = ((int)datum);				\    (void) 0; })
define|#
directive|define
name|obstack_ptr_grow_fast
parameter_list|(
name|h
parameter_list|,
name|aptr
parameter_list|)
value|(*((void **) (h)->next_free)++ = (void *)aptr)
define|#
directive|define
name|obstack_int_grow_fast
parameter_list|(
name|h
parameter_list|,
name|aint
parameter_list|)
value|(*((int *) (h)->next_free)++ = (int) aint)
define|#
directive|define
name|obstack_blank
parameter_list|(
name|OBSTACK
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    int __len = (length);						\    if (__o->chunk_limit - __o->next_free< __len)			\      _obstack_newchunk (__o, __len);					\    __o->next_free += __len;						\    (void) 0; })
define|#
directive|define
name|obstack_alloc
parameter_list|(
name|OBSTACK
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__h = (OBSTACK);					\    obstack_blank (__h, (length));					\    obstack_finish (__h); })
define|#
directive|define
name|obstack_copy
parameter_list|(
name|OBSTACK
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__h = (OBSTACK);					\    obstack_grow (__h, (where), (length));				\    obstack_finish (__h); })
define|#
directive|define
name|obstack_copy0
parameter_list|(
name|OBSTACK
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__h = (OBSTACK);					\    obstack_grow0 (__h, (where), (length));				\    obstack_finish (__h); })
comment|/* The local variable is named __o1 to avoid a name conflict    when obstack_blank is called.  */
define|#
directive|define
name|obstack_finish
parameter_list|(
name|OBSTACK
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o1 = (OBSTACK);					\    void *value;								\    value = (void *) __o1->object_base;					\    if (__o1->next_free == value)					\      __o1->maybe_empty_object = 1;					\    __o1->next_free							\      = __INT_TO_PTR ((__PTR_TO_INT (__o1->next_free)+__o1->alignment_mask)\& ~ (__o1->alignment_mask));			\    if (__o1->next_free - (char *)__o1->chunk				\> __o1->chunk_limit - (char *)__o1->chunk)			\      __o1->next_free = __o1->chunk_limit;				\    __o1->object_base = __o1->next_free;					\    value; })
define|#
directive|define
name|obstack_free
parameter_list|(
name|OBSTACK
parameter_list|,
name|OBJ
parameter_list|)
define|\
value|__extension__								\ ({ struct obstack *__o = (OBSTACK);					\    void *__obj = (OBJ);							\    if (__obj> (void *)__o->chunk&& __obj< (void *)__o->chunk_limit)  \      __o->next_free = __o->object_base = (char *)__obj;			\    else (obstack_free) (__o, __obj); })
else|#
directive|else
comment|/* not __GNUC__ or not __STDC__ */
define|#
directive|define
name|obstack_object_size
parameter_list|(
name|h
parameter_list|)
define|\
value|(unsigned) ((h)->next_free - (h)->object_base)
define|#
directive|define
name|obstack_room
parameter_list|(
name|h
parameter_list|)
define|\
value|(unsigned) ((h)->chunk_limit - (h)->next_free)
define|#
directive|define
name|obstack_empty_p
parameter_list|(
name|h
parameter_list|)
define|\
value|((h)->chunk->prev == 0&& (h)->next_free - (h)->chunk->contents == 0)
comment|/* Note that the call to _obstack_newchunk is enclosed in (..., 0)    so that we can avoid having void expressions    in the arms of the conditional expression.    Casting the third operand to void was tried before,    but some compilers won't accept it.  */
define|#
directive|define
name|obstack_make_room
parameter_list|(
name|h
parameter_list|,
name|length
parameter_list|)
define|\
value|( (h)->temp = (length),							\   (((h)->next_free + (h)->temp> (h)->chunk_limit)			\    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0))
define|#
directive|define
name|obstack_grow
parameter_list|(
name|h
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|( (h)->temp = (length),							\   (((h)->next_free + (h)->temp> (h)->chunk_limit)			\    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),			\   _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),	\   (h)->next_free += (h)->temp)
define|#
directive|define
name|obstack_grow0
parameter_list|(
name|h
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|( (h)->temp = (length),							\   (((h)->next_free + (h)->temp + 1> (h)->chunk_limit)			\    ? (_obstack_newchunk ((h), (h)->temp + 1), 0) : 0),			\   _obstack_memcpy ((h)->next_free, (char *) (where), (h)->temp),	\   (h)->next_free += (h)->temp,						\   *((h)->next_free)++ = 0)
define|#
directive|define
name|obstack_1grow
parameter_list|(
name|h
parameter_list|,
name|datum
parameter_list|)
define|\
value|( (((h)->next_free + 1> (h)->chunk_limit)				\    ? (_obstack_newchunk ((h), 1), 0) : 0),				\   (*((h)->next_free)++ = (datum)))
define|#
directive|define
name|obstack_ptr_grow
parameter_list|(
name|h
parameter_list|,
name|datum
parameter_list|)
define|\
value|( (((h)->next_free + sizeof (char *)> (h)->chunk_limit)		\    ? (_obstack_newchunk ((h), sizeof (char *)), 0) : 0),		\   (*((char **) (((h)->next_free+=sizeof(char *))-sizeof(char *))) = ((char *) datum)))
define|#
directive|define
name|obstack_int_grow
parameter_list|(
name|h
parameter_list|,
name|datum
parameter_list|)
define|\
value|( (((h)->next_free + sizeof (int)> (h)->chunk_limit)			\    ? (_obstack_newchunk ((h), sizeof (int)), 0) : 0),			\   (*((int *) (((h)->next_free+=sizeof(int))-sizeof(int))) = ((int) datum)))
define|#
directive|define
name|obstack_ptr_grow_fast
parameter_list|(
name|h
parameter_list|,
name|aptr
parameter_list|)
value|(*((char **) (h)->next_free)++ = (char *) aptr)
define|#
directive|define
name|obstack_int_grow_fast
parameter_list|(
name|h
parameter_list|,
name|aint
parameter_list|)
value|(*((int *) (h)->next_free)++ = (int) aint)
define|#
directive|define
name|obstack_blank
parameter_list|(
name|h
parameter_list|,
name|length
parameter_list|)
define|\
value|( (h)->temp = (length),							\   (((h)->chunk_limit - (h)->next_free< (h)->temp)			\    ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),			\   ((h)->next_free += (h)->temp))
define|#
directive|define
name|obstack_alloc
parameter_list|(
name|h
parameter_list|,
name|length
parameter_list|)
define|\
value|(obstack_blank ((h), (length)), obstack_finish ((h)))
define|#
directive|define
name|obstack_copy
parameter_list|(
name|h
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|(obstack_grow ((h), (where), (length)), obstack_finish ((h)))
define|#
directive|define
name|obstack_copy0
parameter_list|(
name|h
parameter_list|,
name|where
parameter_list|,
name|length
parameter_list|)
define|\
value|(obstack_grow0 ((h), (where), (length)), obstack_finish ((h)))
define|#
directive|define
name|obstack_finish
parameter_list|(
name|h
parameter_list|)
define|\
value|( ((h)->next_free == (h)->object_base					\    ? (((h)->maybe_empty_object = 1), 0)					\    : 0),								\   (h)->temp = __PTR_TO_INT ((h)->object_base),				\   (h)->next_free							\     = __INT_TO_PTR ((__PTR_TO_INT ((h)->next_free)+(h)->alignment_mask)	\& ~ ((h)->alignment_mask)),				\   (((h)->next_free - (char *) (h)->chunk				\> (h)->chunk_limit - (char *) (h)->chunk)				\    ? ((h)->next_free = (h)->chunk_limit) : 0),				\   (h)->object_base = (h)->next_free,					\   __INT_TO_PTR ((h)->temp))
if|#
directive|if
name|defined
name|__STDC__
operator|&&
name|__STDC__
define|#
directive|define
name|obstack_free
parameter_list|(
name|h
parameter_list|,
name|obj
parameter_list|)
define|\
value|( (h)->temp = (char *) (obj) - (char *) (h)->chunk,			\   (((h)->temp> 0&& (h)->temp< (h)->chunk_limit - (char *) (h)->chunk)\    ? (int) ((h)->next_free = (h)->object_base				\ 	    = (h)->temp + (char *) (h)->chunk)				\    : (((obstack_free) ((h), (h)->temp + (char *) (h)->chunk), 0), 0)))
else|#
directive|else
define|#
directive|define
name|obstack_free
parameter_list|(
name|h
parameter_list|,
name|obj
parameter_list|)
define|\
value|( (h)->temp = (char *) (obj) - (char *) (h)->chunk,			\   (((h)->temp> 0&& (h)->temp< (h)->chunk_limit - (char *) (h)->chunk)\    ? (int) ((h)->next_free = (h)->object_base				\ 	    = (h)->temp + (char *) (h)->chunk)				\    : (_obstack_free ((h), (h)->temp + (char *) (h)->chunk), 0)))
endif|#
directive|endif
endif|#
directive|endif
comment|/* not __GNUC__ or not __STDC__ */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_comment
comment|/* C++ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* obstack.h */
end_comment

end_unit

