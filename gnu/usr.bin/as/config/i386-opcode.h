begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * This code is derived from software copyrighted by the Free Software  * Foundation.  *  * Modified 1991 by Donn Seeley at UUNET Technologies, Inc.  *  *	@(#)i386-opcode.h	6.3 (Berkeley) 5/8/91  */
end_comment

begin_comment
comment|/* i386-opcode.h -- Intel 80386 opcode table    Copyright (C) 1989, Free Software Foundation.  This file is part of GAS, the GNU Assembler.  GAS is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  GAS is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GAS; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_decl_stmt
name|template
name|i386_optab
index|[]
init|=
block|{
define|#
directive|define
name|_
value|None
comment|/* move instructions */
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xa0
block|,
name|_
block|,
name|DW
operator||
name|NoModrm
block|,
name|Disp32
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x88
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xb0
block|,
name|_
block|,
name|ShortFormW
block|,
name|Imm
block|,
name|Reg
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xc6
block|,
name|_
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x8c
block|,
name|_
block|,
name|D
operator||
name|Modrm
block|,
name|SReg3
operator||
name|SReg2
block|,
name|Reg16
operator||
name|Mem16
block|,
literal|0
block|}
block|,
comment|/* move to/from control debug registers */
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f20
block|,
name|_
block|,
name|D
operator||
name|Modrm
block|,
name|Control
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f21
block|,
name|_
block|,
name|D
operator||
name|Modrm
block|,
name|Debug
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f24
block|,
name|_
block|,
name|D
operator||
name|Modrm
block|,
name|Test
block|,
name|Reg32
block|,
literal|0
block|}
block|,
comment|/* move with sign extend */
comment|/* "movsbl"& "movsbw" must not be unified into "movsb" to avoid    conflict with the "movs" string move instruction.  Thus,    {"movsb", 2, 0x0fbe, _, ReverseRegRegmem|Modrm, Reg8|Mem,  Reg16|Reg32, 0},    is not kosher; we must seperate the two instructions. */
block|{
literal|"movsbl"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|_
block|,
name|ReverseRegRegmem
operator||
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"movsbw"
block|,
literal|2
block|,
literal|0x660fbe
block|,
name|_
block|,
name|ReverseRegRegmem
operator||
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
name|Reg16
block|,
literal|0
block|}
block|,
block|{
literal|"movswl"
block|,
literal|2
block|,
literal|0x0fbf
block|,
name|_
block|,
name|ReverseRegRegmem
operator||
name|Modrm
block|,
name|Reg16
operator||
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
comment|/* move with zero extend */
block|{
literal|"movzb"
block|,
literal|2
block|,
literal|0x0fb6
block|,
name|_
block|,
name|ReverseRegRegmem
operator||
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
name|Reg16
operator||
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"movzwl"
block|,
literal|2
block|,
literal|0x0fb7
block|,
name|_
block|,
name|ReverseRegRegmem
operator||
name|Modrm
block|,
name|Reg16
operator||
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
comment|/* push instructions */
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x50
block|,
name|_
block|,
name|ShortForm
block|,
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0xff
block|,
literal|0x6
block|,
name|Modrm
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x6a
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm8S
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x68
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x06
block|,
name|_
block|,
name|Seg2ShortForm
block|,
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x0fa0
block|,
name|_
block|,
name|Seg3ShortForm
block|,
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* push all */
block|{
literal|"pusha"
block|,
literal|0
block|,
literal|0x60
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* pop instructions */
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x58
block|,
name|_
block|,
name|ShortForm
block|,
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x8f
block|,
literal|0x0
block|,
name|Modrm
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|POP_SEG_SHORT
value|0x7
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x07
block|,
name|_
block|,
name|Seg2ShortForm
block|,
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x0fa1
block|,
name|_
block|,
name|Seg3ShortForm
block|,
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* pop all */
block|{
literal|"popa"
block|,
literal|0
block|,
literal|0x61
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* xchg exchange instructions    xchg commutes:  we allow both operand orders */
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x90
block|,
name|_
block|,
name|ShortForm
block|,
name|WordReg
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x90
block|,
name|_
block|,
name|ShortForm
block|,
name|Acc
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x86
block|,
name|_
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x86
block|,
name|_
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
name|Reg
block|,
literal|0
block|}
block|,
comment|/* in/out from ports */
block|{
literal|"in"
block|,
literal|2
block|,
literal|0xe4
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm8
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"in"
block|,
literal|2
block|,
literal|0xec
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|InOutPortReg
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"out"
block|,
literal|2
block|,
literal|0xe6
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Acc
block|,
name|Imm8
block|,
literal|0
block|}
block|,
block|{
literal|"out"
block|,
literal|2
block|,
literal|0xee
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Acc
block|,
name|InOutPortReg
block|,
literal|0
block|}
block|,
comment|/* load effective address */
block|{
literal|"lea"
block|,
literal|2
block|,
literal|0x8d
block|,
name|_
block|,
name|Modrm
block|,
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|,
comment|/* load segment registers from memory */
block|{
literal|"lds"
block|,
literal|2
block|,
literal|0xc5
block|,
name|_
block|,
name|Modrm
block|,
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"les"
block|,
literal|2
block|,
literal|0xc4
block|,
name|_
block|,
name|Modrm
block|,
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"lfs"
block|,
literal|2
block|,
literal|0x0fb4
block|,
name|_
block|,
name|Modrm
block|,
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"lgs"
block|,
literal|2
block|,
literal|0x0fb5
block|,
name|_
block|,
name|Modrm
block|,
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
block|{
literal|"lss"
block|,
literal|2
block|,
literal|0x0fb2
block|,
name|_
block|,
name|Modrm
block|,
name|Mem
block|,
name|Reg32
block|,
literal|0
block|}
block|,
comment|/* flags register instructions */
block|{
literal|"clc"
block|,
literal|0
block|,
literal|0xf8
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cld"
block|,
literal|0
block|,
literal|0xfc
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cli"
block|,
literal|0
block|,
literal|0xfa
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"clts"
block|,
literal|0
block|,
literal|0x0f06
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cmc"
block|,
literal|0
block|,
literal|0xf5
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lahf"
block|,
literal|0
block|,
literal|0x9f
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sahf"
block|,
literal|0
block|,
literal|0x9e
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"pushf"
block|,
literal|0
block|,
literal|0x9c
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"popf"
block|,
literal|0
block|,
literal|0x9d
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"stc"
block|,
literal|0
block|,
literal|0xf9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"std"
block|,
literal|0
block|,
literal|0xfd
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sti"
block|,
literal|0
block|,
literal|0xfb
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x0
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x83
block|,
literal|0
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x4
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x80
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"inc"
block|,
literal|1
block|,
literal|0x40
block|,
name|_
block|,
name|ShortForm
block|,
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"inc"
block|,
literal|1
block|,
literal|0xfe
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x28
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x83
block|,
literal|5
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x2c
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x80
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"dec"
block|,
literal|1
block|,
literal|0x48
block|,
name|_
block|,
name|ShortForm
block|,
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"dec"
block|,
literal|1
block|,
literal|0xfe
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x18
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x83
block|,
literal|3
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x1c
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x80
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x38
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x83
block|,
literal|7
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x3c
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x80
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0x84
block|,
name|_
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
name|Reg
block|,
literal|0
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0x84
block|,
name|_
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0xa8
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x20
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x83
block|,
literal|4
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x24
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x80
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x08
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x83
block|,
literal|1
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x0c
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x80
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x30
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x83
block|,
literal|6
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x34
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x80
block|,
literal|6
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x10
block|,
name|_
block|,
name|DW
operator||
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x83
block|,
literal|2
block|,
name|Modrm
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x14
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
name|Imm
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x80
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|Imm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"neg"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"not"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"aaa"
block|,
literal|0
block|,
literal|0x37
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"aas"
block|,
literal|0
block|,
literal|0x3f
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"daa"
block|,
literal|0
block|,
literal|0x27
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"das"
block|,
literal|0
block|,
literal|0x2f
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"aad"
block|,
literal|0
block|,
literal|0xd50a
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"aam"
block|,
literal|0
block|,
literal|0xd40a
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* conversion insns */
comment|/* conversion:  intel naming */
block|{
literal|"cbw"
block|,
literal|0
block|,
literal|0x6698
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cwd"
block|,
literal|0
block|,
literal|0x6699
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cwde"
block|,
literal|0
block|,
literal|0x98
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cdq"
block|,
literal|0
block|,
literal|0x99
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/*  att naming */
block|{
literal|"cbtw"
block|,
literal|0
block|,
literal|0x6698
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cwtl"
block|,
literal|0
block|,
literal|0x98
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cwtd"
block|,
literal|0
block|,
literal|0x6699
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cltd"
block|,
literal|0
block|,
literal|0x99
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* Warning! the mul/imul (opcode 0xf6) must only have 1 operand!  They are    expanding 64-bit multiplies, and *cannot* be selected to accomplish    'imul %ebx, %eax' (opcode 0x0faf must be used in this case)    These multiplies can only be selected with single opearnd forms. */
block|{
literal|"mul"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"imul"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* imulKludge here is needed to reverse the i.rm.reg& i.rm.regmem fields.    These instructions are exceptions:  'imul $2, %eax, %ecx' would put    '%eax' in the reg field and '%ecx' in the regmem field if we did not    switch them. */
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x0faf
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|WordReg
operator||
name|Mem
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"imul"
block|,
literal|3
block|,
literal|0x6b
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|Imm8S
block|,
name|WordReg
operator||
name|Mem
block|,
name|WordReg
block|}
block|,
block|{
literal|"imul"
block|,
literal|3
block|,
literal|0x69
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|Imm16
operator||
name|Imm32
block|,
name|WordReg
operator||
name|Mem
block|,
name|WordReg
block|}
block|,
comment|/*   imul with 2 operands mimicks imul with 3 by puting register both   in i.rm.reg& i.rm.regmem fields */
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x6b
block|,
name|_
block|,
name|Modrm
operator||
name|imulKludge
block|,
name|Imm8S
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x69
block|,
name|_
block|,
name|Modrm
operator||
name|imulKludge
block|,
name|Imm16
operator||
name|Imm32
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"div"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|6
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"div"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|6
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"idiv"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"idiv"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rol"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|0
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"ror"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|1
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcl"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|2
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"rcr"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|3
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sal"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shl"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|4
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"shld"
block|,
literal|3
block|,
literal|0x0fa4
block|,
name|_
block|,
name|Modrm
block|,
name|Imm8
block|,
name|WordReg
block|,
name|WordReg
operator||
name|Mem
block|}
block|,
block|{
literal|"shld"
block|,
literal|3
block|,
literal|0x0fa5
block|,
name|_
block|,
name|Modrm
block|,
name|ShiftCount
block|,
name|WordReg
block|,
name|WordReg
operator||
name|Mem
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"shr"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|5
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"shrd"
block|,
literal|3
block|,
literal|0x0fac
block|,
name|_
block|,
name|Modrm
block|,
name|Imm8
block|,
name|WordReg
block|,
name|WordReg
operator||
name|Mem
block|}
block|,
block|{
literal|"shrd"
block|,
literal|3
block|,
literal|0x0fad
block|,
name|_
block|,
name|Modrm
block|,
name|ShiftCount
block|,
name|WordReg
block|,
name|WordReg
operator||
name|Mem
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Imm1
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|ShiftCount
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"sar"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|7
block|,
name|W
operator||
name|Modrm
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* control transfer instructions */
define|#
directive|define
name|CALL_PC_RELATIVE
value|0xe8
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xe8
block|,
name|_
block|,
name|JumpDword
block|,
name|Disp32
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xff
block|,
literal|2
block|,
name|Modrm
block|,
name|Reg
operator||
name|Mem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|CALL_FAR_IMMEDIATE
value|0x9a
block|{
literal|"lcall"
block|,
literal|2
block|,
literal|0x9a
block|,
name|_
block|,
name|JumpInterSegment
block|,
name|Imm16
block|,
name|Imm32
block|,
literal|0
block|}
block|,
block|{
literal|"lcall"
block|,
literal|1
block|,
literal|0xff
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|JUMP_PC_RELATIVE
value|0xeb
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xeb
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|4
block|,
name|Modrm
block|,
name|Reg32
operator||
name|Mem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|JUMP_FAR_IMMEDIATE
value|0xea
block|{
literal|"ljmp"
block|,
literal|2
block|,
literal|0xea
block|,
name|_
block|,
name|JumpInterSegment
block|,
name|Imm16
block|,
name|Imm32
block|,
literal|0
block|}
block|,
block|{
literal|"ljmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ret"
block|,
literal|0
block|,
literal|0xc3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ret"
block|,
literal|1
block|,
literal|0xc2
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lret"
block|,
literal|0
block|,
literal|0xcb
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lret"
block|,
literal|1
block|,
literal|0xca
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"enter"
block|,
literal|2
block|,
literal|0xc8
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm16
block|,
name|Imm8
block|,
literal|0
block|}
block|,
block|{
literal|"leave"
block|,
literal|0
block|,
literal|0xc9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* conditional jumps */
block|{
literal|"jo"
block|,
literal|1
block|,
literal|0x70
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jno"
block|,
literal|1
block|,
literal|0x71
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jb"
block|,
literal|1
block|,
literal|0x72
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jc"
block|,
literal|1
block|,
literal|0x72
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnae"
block|,
literal|1
block|,
literal|0x72
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnb"
block|,
literal|1
block|,
literal|0x73
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnc"
block|,
literal|1
block|,
literal|0x73
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jae"
block|,
literal|1
block|,
literal|0x73
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"je"
block|,
literal|1
block|,
literal|0x74
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jz"
block|,
literal|1
block|,
literal|0x74
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jne"
block|,
literal|1
block|,
literal|0x75
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnz"
block|,
literal|1
block|,
literal|0x75
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jbe"
block|,
literal|1
block|,
literal|0x76
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jna"
block|,
literal|1
block|,
literal|0x76
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnbe"
block|,
literal|1
block|,
literal|0x77
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ja"
block|,
literal|1
block|,
literal|0x77
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"js"
block|,
literal|1
block|,
literal|0x78
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jns"
block|,
literal|1
block|,
literal|0x79
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jp"
block|,
literal|1
block|,
literal|0x7a
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jpe"
block|,
literal|1
block|,
literal|0x7a
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnp"
block|,
literal|1
block|,
literal|0x7b
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jpo"
block|,
literal|1
block|,
literal|0x7b
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jl"
block|,
literal|1
block|,
literal|0x7c
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnge"
block|,
literal|1
block|,
literal|0x7c
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnl"
block|,
literal|1
block|,
literal|0x7d
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jge"
block|,
literal|1
block|,
literal|0x7d
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jle"
block|,
literal|1
block|,
literal|0x7e
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jng"
block|,
literal|1
block|,
literal|0x7e
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jnle"
block|,
literal|1
block|,
literal|0x7f
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jg"
block|,
literal|1
block|,
literal|0x7f
block|,
name|_
block|,
name|Jump
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* these turn into pseudo operations when disp is larger than 8 bits */
define|#
directive|define
name|IS_JUMP_ON_CX_ZERO
parameter_list|(
name|o
parameter_list|)
define|\
value|(o == 0x67e3)
define|#
directive|define
name|IS_JUMP_ON_ECX_ZERO
parameter_list|(
name|o
parameter_list|)
define|\
value|(o == 0xe3)
block|{
literal|"jcxz"
block|,
literal|1
block|,
literal|0x67e3
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"jecxz"
block|,
literal|1
block|,
literal|0xe3
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|IS_LOOP_ECX_TIMES
parameter_list|(
name|o
parameter_list|)
define|\
value|(o == 0xe2 || o == 0xe1 || o == 0xe0)
block|{
literal|"loop"
block|,
literal|1
block|,
literal|0xe2
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"loopz"
block|,
literal|1
block|,
literal|0xe1
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"loope"
block|,
literal|1
block|,
literal|0xe1
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"loopnz"
block|,
literal|1
block|,
literal|0xe0
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"loopne"
block|,
literal|1
block|,
literal|0xe0
block|,
name|_
block|,
name|JumpByte
block|,
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* set byte on flag instructions */
block|{
literal|"seto"
block|,
literal|1
block|,
literal|0x0f90
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setno"
block|,
literal|1
block|,
literal|0x0f91
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setb"
block|,
literal|1
block|,
literal|0x0f92
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnae"
block|,
literal|1
block|,
literal|0x0f92
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnb"
block|,
literal|1
block|,
literal|0x0f93
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setae"
block|,
literal|1
block|,
literal|0x0f93
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sete"
block|,
literal|1
block|,
literal|0x0f94
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setz"
block|,
literal|1
block|,
literal|0x0f94
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setne"
block|,
literal|1
block|,
literal|0x0f95
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnz"
block|,
literal|1
block|,
literal|0x0f95
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setbe"
block|,
literal|1
block|,
literal|0x0f96
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setna"
block|,
literal|1
block|,
literal|0x0f96
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnbe"
block|,
literal|1
block|,
literal|0x0f97
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"seta"
block|,
literal|1
block|,
literal|0x0f97
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sets"
block|,
literal|1
block|,
literal|0x0f98
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setns"
block|,
literal|1
block|,
literal|0x0f99
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setp"
block|,
literal|1
block|,
literal|0x0f9a
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setpe"
block|,
literal|1
block|,
literal|0x0f9a
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnp"
block|,
literal|1
block|,
literal|0x0f9b
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setpo"
block|,
literal|1
block|,
literal|0x0f9b
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setl"
block|,
literal|1
block|,
literal|0x0f9c
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnge"
block|,
literal|1
block|,
literal|0x0f9c
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnl"
block|,
literal|1
block|,
literal|0x0f9d
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setge"
block|,
literal|1
block|,
literal|0x0f9d
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setle"
block|,
literal|1
block|,
literal|0x0f9e
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setng"
block|,
literal|1
block|,
literal|0x0f9e
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setnle"
block|,
literal|1
block|,
literal|0x0f9f
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"setg"
block|,
literal|1
block|,
literal|0x0f9f
block|,
literal|0
block|,
name|Modrm
block|,
name|Reg8
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
define|#
directive|define
name|IS_STRING_INSTRUCTION
parameter_list|(
name|o
parameter_list|)
define|\
value|((o) == 0xa6 || (o) == 0x6c || (o) == 0x6e || (o) == 0x6e || \    (o) == 0xac || (o) == 0xa4 || (o) == 0xae || (o) == 0xaa || \    (o) == 0xd7)
comment|/* string manipulation */
block|{
literal|"cmps"
block|,
literal|0
block|,
literal|0xa6
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ins"
block|,
literal|0
block|,
literal|0x6c
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"outs"
block|,
literal|0
block|,
literal|0x6e
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lods"
block|,
literal|0
block|,
literal|0xac
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"movs"
block|,
literal|0
block|,
literal|0xa4
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"scas"
block|,
literal|0
block|,
literal|0xae
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"stos"
block|,
literal|0
block|,
literal|0xaa
block|,
name|_
block|,
name|W
operator||
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"xlat"
block|,
literal|0
block|,
literal|0xd7
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* bit manipulation */
block|{
literal|"bsf"
block|,
literal|2
block|,
literal|0x0fbc
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|Reg
operator||
name|Mem
block|,
name|Reg
block|,
literal|0
block|}
block|,
block|{
literal|"bsr"
block|,
literal|2
block|,
literal|0x0fbd
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|Reg
operator||
name|Mem
block|,
name|Reg
block|,
literal|0
block|}
block|,
block|{
literal|"bt"
block|,
literal|2
block|,
literal|0x0fa3
block|,
name|_
block|,
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"bt"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|4
block|,
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"btc"
block|,
literal|2
block|,
literal|0x0fbb
block|,
name|_
block|,
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"btc"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|7
block|,
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"btr"
block|,
literal|2
block|,
literal|0x0fb3
block|,
name|_
block|,
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"btr"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|6
block|,
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"bts"
block|,
literal|2
block|,
literal|0x0fab
block|,
name|_
block|,
name|Modrm
block|,
name|Reg
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"bts"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|5
block|,
name|Modrm
block|,
name|Imm8
block|,
name|Reg
operator||
name|Mem
block|,
literal|0
block|}
block|,
comment|/* interrupts& op. sys insns */
comment|/* See i386.c for conversion of 'int $3' into the special int 3 insn. */
define|#
directive|define
name|INT_OPCODE
value|0xcd
define|#
directive|define
name|INT3_OPCODE
value|0xcc
block|{
literal|"int"
block|,
literal|1
block|,
literal|0xcd
block|,
name|_
block|,
name|NoModrm
block|,
name|Imm8
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"int3"
block|,
literal|0
block|,
literal|0xcc
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"into"
block|,
literal|0
block|,
literal|0xce
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"iret"
block|,
literal|0
block|,
literal|0xcf
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"boundl"
block|,
literal|2
block|,
literal|0x62
block|,
name|_
block|,
name|Modrm
block|,
name|Reg32
block|,
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"boundw"
block|,
literal|2
block|,
literal|0x6662
block|,
name|_
block|,
name|Modrm
block|,
name|Reg16
block|,
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"hlt"
block|,
literal|0
block|,
literal|0xf4
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"wait"
block|,
literal|0
block|,
literal|0x9b
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* nop is actually 'xchgl %eax, %eax' */
block|{
literal|"nop"
block|,
literal|0
block|,
literal|0x90
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* protection control */
block|{
literal|"arpl"
block|,
literal|2
block|,
literal|0x63
block|,
name|_
block|,
name|Modrm
block|,
name|Reg16
block|,
name|Reg16
operator||
name|Mem
block|,
literal|0
block|}
block|,
block|{
literal|"lar"
block|,
literal|2
block|,
literal|0x0f02
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|WordReg
operator||
name|Mem
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"lgdt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lidt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lldt"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|2
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lmsw"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|6
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lsl"
block|,
literal|2
block|,
literal|0x0f03
block|,
name|_
block|,
name|Modrm
operator||
name|ReverseRegRegmem
block|,
name|WordReg
operator||
name|Mem
block|,
name|WordReg
block|,
literal|0
block|}
block|,
block|{
literal|"ltr"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|3
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sgdt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sidt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|1
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"sldt"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|0
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"smsw"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|4
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"str"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|1
block|,
name|Modrm
block|,
name|Reg16
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"verr"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|4
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"verw"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|5
block|,
name|Modrm
block|,
name|WordReg
operator||
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* floating point instructions */
comment|/* load */
block|{
literal|"fld"
block|,
literal|1
block|,
literal|0xd9c0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"flds"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem float */
block|{
literal|"fildl"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem word */
block|{
literal|"fldl"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem double */
block|{
literal|"fldl"
block|,
literal|1
block|,
literal|0xd9c0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"filds"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem dword */
block|{
literal|"fildq"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem qword */
block|{
literal|"fldt"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem efloat */
block|{
literal|"fbld"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- mem bcd */
comment|/* store (no pop) */
block|{
literal|"fst"
block|,
literal|1
block|,
literal|0xddd0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"fsts"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem float */
block|{
literal|"fistl"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem dword */
block|{
literal|"fstl"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem double */
block|{
literal|"fstl"
block|,
literal|1
block|,
literal|0xddd0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"fists"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem word */
comment|/* store (with pop) */
block|{
literal|"fstp"
block|,
literal|1
block|,
literal|0xddd8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"fstps"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem float */
block|{
literal|"fistpl"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem word */
block|{
literal|"fstpl"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem double */
block|{
literal|"fstpl"
block|,
literal|1
block|,
literal|0xddd8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* register */
block|{
literal|"fistps"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem dword */
block|{
literal|"fistpq"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem qword */
block|{
literal|"fstpt"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem efloat */
block|{
literal|"fbstp"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0 --> mem bcd */
comment|/* exchange %st<n> with %st0 */
block|{
literal|"fxch"
block|,
literal|1
block|,
literal|0xd9c8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* comparison (without pop) */
block|{
literal|"fcom"
block|,
literal|1
block|,
literal|0xd8d0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fcoms"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem float  */
block|{
literal|"ficoml"
block|,
literal|1
block|,
literal|0xda
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem word  */
block|{
literal|"fcoml"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem double  */
block|{
literal|"fcoml"
block|,
literal|1
block|,
literal|0xd8d0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ficoms"
block|,
literal|1
block|,
literal|0xde
block|,
literal|2
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem dword */
comment|/* comparison (with pop) */
block|{
literal|"fcomp"
block|,
literal|1
block|,
literal|0xd8d8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fcomps"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem float  */
block|{
literal|"ficompl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem word  */
block|{
literal|"fcompl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem double  */
block|{
literal|"fcompl"
block|,
literal|1
block|,
literal|0xd8d8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ficomps"
block|,
literal|1
block|,
literal|0xde
block|,
literal|3
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, mem dword */
block|{
literal|"fcompp"
block|,
literal|0
block|,
literal|0xded9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* compare %st0, %st1& pop twice */
comment|/* unordered comparison (with pop) */
block|{
literal|"fucom"
block|,
literal|1
block|,
literal|0xdde0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fucomp"
block|,
literal|1
block|,
literal|0xdde8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fucompp"
block|,
literal|0
block|,
literal|0xdae9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* ucompare %st0, %st1& pop twice */
block|{
literal|"ftst"
block|,
literal|0
block|,
literal|0xd9e4
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* test %st0 */
block|{
literal|"fxam"
block|,
literal|0
block|,
literal|0xd9e5
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* examine %st0 */
comment|/* load constants into %st0 */
block|{
literal|"fld1"
block|,
literal|0
block|,
literal|0xd9e8
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- 1.0 */
block|{
literal|"fldl2t"
block|,
literal|0
block|,
literal|0xd9e9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- log2(10) */
block|{
literal|"fldl2e"
block|,
literal|0
block|,
literal|0xd9ea
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- log2(e) */
block|{
literal|"fldpi"
block|,
literal|0
block|,
literal|0xd9eb
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- pi */
block|{
literal|"fldlg2"
block|,
literal|0
block|,
literal|0xd9ec
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- log10(2) */
block|{
literal|"fldln2"
block|,
literal|0
block|,
literal|0xd9ed
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- ln(2) */
block|{
literal|"fldz"
block|,
literal|0
block|,
literal|0xd9ee
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* %st0<-- 0.0 */
comment|/* arithmetic */
comment|/* add */
block|{
literal|"fadd"
block|,
literal|1
block|,
literal|0xd8c0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fadd"
block|,
literal|2
block|,
literal|0xd8c0
block|,
name|_
block|,
name|ShortForm
operator||
name|FloatD
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"fadd"
block|,
literal|0
block|,
literal|0xdcc1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* alias for fadd %st, %st(1) */
block|{
literal|"faddp"
block|,
literal|1
block|,
literal|0xdac0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"faddp"
block|,
literal|2
block|,
literal|0xdac0
block|,
name|_
block|,
name|ShortForm
operator||
name|FloatD
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"faddp"
block|,
literal|0
block|,
literal|0xdec1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* alias for faddp %st, %st(1) */
block|{
literal|"fadds"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fiaddl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"faddl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fiadds"
block|,
literal|1
block|,
literal|0xde
block|,
literal|0
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* sub */
comment|/* Note:  intel has decided that certain of these operations are reversed    in assembler syntax. */
block|{
literal|"fsub"
block|,
literal|1
block|,
literal|0xd8e0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsub"
block|,
literal|2
block|,
literal|0xd8e0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fsub"
block|,
literal|2
block|,
literal|0xdce8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fsub"
block|,
literal|2
block|,
literal|0xdce0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsub"
block|,
literal|0
block|,
literal|0xdce1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|1
block|,
literal|0xdae0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdae0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdee8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdee0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsubp"
block|,
literal|0
block|,
literal|0xdee1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubs"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fisubl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fisubs"
block|,
literal|1
block|,
literal|0xde
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* sub reverse */
block|{
literal|"fsubr"
block|,
literal|1
block|,
literal|0xd8e8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubr"
block|,
literal|2
block|,
literal|0xd8e8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fsubr"
block|,
literal|2
block|,
literal|0xdce0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fsubr"
block|,
literal|2
block|,
literal|0xdce8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsubr"
block|,
literal|0
block|,
literal|0xdce9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|1
block|,
literal|0xdae8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdae8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdee0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdee8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsubrp"
block|,
literal|0
block|,
literal|0xdee9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubrs"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fisubrl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsubrl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fisubrs"
block|,
literal|1
block|,
literal|0xde
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* mul */
block|{
literal|"fmul"
block|,
literal|1
block|,
literal|0xd8c8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fmul"
block|,
literal|2
block|,
literal|0xd8c8
block|,
name|_
block|,
name|ShortForm
operator||
name|FloatD
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"fmul"
block|,
literal|0
block|,
literal|0xdcc9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|1
block|,
literal|0xdac8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|2
block|,
literal|0xdac8
block|,
name|_
block|,
name|ShortForm
operator||
name|FloatD
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|0
block|,
literal|0xdec9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fmuls"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|1
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fimull"
block|,
literal|1
block|,
literal|0xda
block|,
literal|1
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fmull"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|1
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fimuls"
block|,
literal|1
block|,
literal|0xde
block|,
literal|1
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* div */
comment|/* Note:  intel has decided that certain of these operations are reversed    in assembler syntax. */
block|{
literal|"fdiv"
block|,
literal|1
block|,
literal|0xd8f0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdiv"
block|,
literal|2
block|,
literal|0xd8f0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fdiv"
block|,
literal|2
block|,
literal|0xdcf8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fdiv"
block|,
literal|2
block|,
literal|0xdcf0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdiv"
block|,
literal|0
block|,
literal|0xdcf1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|1
block|,
literal|0xdaf0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdaf0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdef8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdef0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdivp"
block|,
literal|0
block|,
literal|0xdef1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivs"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fidivl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fidivs"
block|,
literal|1
block|,
literal|0xde
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* div reverse */
block|{
literal|"fdivr"
block|,
literal|1
block|,
literal|0xd8f8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivr"
block|,
literal|2
block|,
literal|0xd8f8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fdivr"
block|,
literal|2
block|,
literal|0xdcf0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fdivr"
block|,
literal|2
block|,
literal|0xdcf8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdivr"
block|,
literal|0
block|,
literal|0xdcf9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|1
block|,
literal|0xdaf8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdaf8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|,
ifdef|#
directive|ifdef
name|NON_BROKEN_OPCODES
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdef0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
else|#
directive|else
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdef8
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdivrp"
block|,
literal|0
block|,
literal|0xdef9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivrs"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fidivrl"
block|,
literal|1
block|,
literal|0xda
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdivrl"
block|,
literal|1
block|,
literal|0xdc
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fidivrs"
block|,
literal|1
block|,
literal|0xde
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"f2xm1"
block|,
literal|0
block|,
literal|0xd9f0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fyl2x"
block|,
literal|0
block|,
literal|0xd9f1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fptan"
block|,
literal|0
block|,
literal|0xd9f2
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fpatan"
block|,
literal|0
block|,
literal|0xd9f3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fxtract"
block|,
literal|0
block|,
literal|0xd9f4
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fprem1"
block|,
literal|0
block|,
literal|0xd9f5
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fdecstp"
block|,
literal|0
block|,
literal|0xd9f6
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fincstp"
block|,
literal|0
block|,
literal|0xd9f7
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fprem"
block|,
literal|0
block|,
literal|0xd9f8
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fyl2xp1"
block|,
literal|0
block|,
literal|0xd9f9
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsqrt"
block|,
literal|0
block|,
literal|0xd9fa
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsincos"
block|,
literal|0
block|,
literal|0xd9fb
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"frndint"
block|,
literal|0
block|,
literal|0xd9fc
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fscale"
block|,
literal|0
block|,
literal|0xd9fd
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsin"
block|,
literal|0
block|,
literal|0xd9fe
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fcos"
block|,
literal|0
block|,
literal|0xd9ff
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fchs"
block|,
literal|0
block|,
literal|0xd9e0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fabs"
block|,
literal|0
block|,
literal|0xd9e1
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* processor control */
block|{
literal|"fninit"
block|,
literal|0
block|,
literal|0xdbe3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"finit"
block|,
literal|0
block|,
literal|0xdbe3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fldcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|5
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnstcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fstcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|1
block|,
literal|0xdfe0
block|,
name|_
block|,
name|NoModrm
block|,
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|0
block|,
literal|0xdfe0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|1
block|,
literal|0xdfe0
block|,
name|_
block|,
name|NoModrm
block|,
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|7
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|0
block|,
literal|0xdfe0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnclex"
block|,
literal|0
block|,
literal|0xdbe2
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fclex"
block|,
literal|0
block|,
literal|0xdbe2
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/*  We ignore the short format (287) versions of fstenv/fldenv& fsave/frstor  instructions;  i'm not sure how to add them or how they are different.  My 386/387 book offers no details about this. */
block|{
literal|"fnstenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fstenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fldenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnsave"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fsave"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|6
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"frstor"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|4
block|,
name|Modrm
block|,
name|Mem
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ffree"
block|,
literal|1
block|,
literal|0xddc0
block|,
name|_
block|,
name|ShortForm
block|,
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fnop"
block|,
literal|0
block|,
literal|0xd9d0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fwait"
block|,
literal|0
block|,
literal|0x9b
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/*   opcode prefixes; we allow them as seperate insns too   (see prefix table below) */
block|{
literal|"aword"
block|,
literal|0
block|,
literal|0x67
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"word"
block|,
literal|0
block|,
literal|0x66
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"lock"
block|,
literal|0
block|,
literal|0xf0
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cs"
block|,
literal|0
block|,
literal|0x2e
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ds"
block|,
literal|0
block|,
literal|0x3e
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"es"
block|,
literal|0
block|,
literal|0x26
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"fs"
block|,
literal|0
block|,
literal|0x64
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"gs"
block|,
literal|0
block|,
literal|0x65
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"ss"
block|,
literal|0
block|,
literal|0x36
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"rep"
block|,
literal|0
block|,
literal|0xf3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"repe"
block|,
literal|0
block|,
literal|0xf3
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"repne"
block|,
literal|0
block|,
literal|0xf2
block|,
name|_
block|,
name|NoModrm
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|""
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
comment|/* sentinal */
block|}
decl_stmt|;
end_decl_stmt

begin_undef
undef|#
directive|undef
name|_
end_undef

begin_decl_stmt
name|template
modifier|*
name|i386_optab_end
init|=
name|i386_optab
operator|+
sizeof|sizeof
argument_list|(
name|i386_optab
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|i386_optab
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* 386 register table */
end_comment

begin_decl_stmt
name|reg_entry
name|i386_regtab
index|[]
init|=
block|{
comment|/* 8 bit regs */
block|{
literal|"al"
block|,
name|Reg8
operator||
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"cl"
block|,
name|Reg8
operator||
name|ShiftCount
block|,
literal|1
block|}
block|,
block|{
literal|"dl"
block|,
name|Reg8
block|,
literal|2
block|}
block|,
block|{
literal|"bl"
block|,
name|Reg8
block|,
literal|3
block|}
block|,
block|{
literal|"ah"
block|,
name|Reg8
block|,
literal|4
block|}
block|,
block|{
literal|"ch"
block|,
name|Reg8
block|,
literal|5
block|}
block|,
block|{
literal|"dh"
block|,
name|Reg8
block|,
literal|6
block|}
block|,
block|{
literal|"bh"
block|,
name|Reg8
block|,
literal|7
block|}
block|,
comment|/* 16 bit regs */
block|{
literal|"ax"
block|,
name|Reg16
operator||
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"cx"
block|,
name|Reg16
block|,
literal|1
block|}
block|,
block|{
literal|"dx"
block|,
name|Reg16
operator||
name|InOutPortReg
block|,
literal|2
block|}
block|,
block|{
literal|"bx"
block|,
name|Reg16
block|,
literal|3
block|}
block|,
block|{
literal|"sp"
block|,
name|Reg16
block|,
literal|4
block|}
block|,
block|{
literal|"bp"
block|,
name|Reg16
block|,
literal|5
block|}
block|,
block|{
literal|"si"
block|,
name|Reg16
block|,
literal|6
block|}
block|,
block|{
literal|"di"
block|,
name|Reg16
block|,
literal|7
block|}
block|,
comment|/* 32 bit regs */
block|{
literal|"eax"
block|,
name|Reg32
operator||
name|Acc
block|,
literal|0
block|}
block|,
block|{
literal|"ecx"
block|,
name|Reg32
block|,
literal|1
block|}
block|,
block|{
literal|"edx"
block|,
name|Reg32
block|,
literal|2
block|}
block|,
block|{
literal|"ebx"
block|,
name|Reg32
block|,
literal|3
block|}
block|,
block|{
literal|"esp"
block|,
name|Reg32
block|,
literal|4
block|}
block|,
block|{
literal|"ebp"
block|,
name|Reg32
block|,
literal|5
block|}
block|,
block|{
literal|"esi"
block|,
name|Reg32
block|,
literal|6
block|}
block|,
block|{
literal|"edi"
block|,
name|Reg32
block|,
literal|7
block|}
block|,
comment|/* segment registers */
block|{
literal|"es"
block|,
name|SReg2
block|,
literal|0
block|}
block|,
block|{
literal|"cs"
block|,
name|SReg2
block|,
literal|1
block|}
block|,
block|{
literal|"ss"
block|,
name|SReg2
block|,
literal|2
block|}
block|,
block|{
literal|"ds"
block|,
name|SReg2
block|,
literal|3
block|}
block|,
block|{
literal|"fs"
block|,
name|SReg3
block|,
literal|4
block|}
block|,
block|{
literal|"gs"
block|,
name|SReg3
block|,
literal|5
block|}
block|,
comment|/* control registers */
block|{
literal|"cr0"
block|,
name|Control
block|,
literal|0
block|}
block|,
block|{
literal|"cr2"
block|,
name|Control
block|,
literal|2
block|}
block|,
block|{
literal|"cr3"
block|,
name|Control
block|,
literal|3
block|}
block|,
comment|/* debug registers */
block|{
literal|"db0"
block|,
name|Debug
block|,
literal|0
block|}
block|,
block|{
literal|"db1"
block|,
name|Debug
block|,
literal|1
block|}
block|,
block|{
literal|"db2"
block|,
name|Debug
block|,
literal|2
block|}
block|,
block|{
literal|"db3"
block|,
name|Debug
block|,
literal|3
block|}
block|,
block|{
literal|"db6"
block|,
name|Debug
block|,
literal|6
block|}
block|,
block|{
literal|"db7"
block|,
name|Debug
block|,
literal|7
block|}
block|,
comment|/* test registers */
block|{
literal|"tr6"
block|,
name|Test
block|,
literal|6
block|}
block|,
block|{
literal|"tr7"
block|,
name|Test
block|,
literal|7
block|}
block|,
comment|/* float registers */
block|{
literal|"st(0)"
block|,
name|FloatReg
operator||
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"st"
block|,
name|FloatReg
operator||
name|FloatAcc
block|,
literal|0
block|}
block|,
block|{
literal|"st(1)"
block|,
name|FloatReg
block|,
literal|1
block|}
block|,
block|{
literal|"st(2)"
block|,
name|FloatReg
block|,
literal|2
block|}
block|,
block|{
literal|"st(3)"
block|,
name|FloatReg
block|,
literal|3
block|}
block|,
block|{
literal|"st(4)"
block|,
name|FloatReg
block|,
literal|4
block|}
block|,
block|{
literal|"st(5)"
block|,
name|FloatReg
block|,
literal|5
block|}
block|,
block|{
literal|"st(6)"
block|,
name|FloatReg
block|,
literal|6
block|}
block|,
block|{
literal|"st(7)"
block|,
name|FloatReg
block|,
literal|7
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|MAX_REG_NAME_SIZE
value|8
end_define

begin_comment
comment|/* for parsing register names from input */
end_comment

begin_decl_stmt
name|reg_entry
modifier|*
name|i386_regtab_end
init|=
name|i386_regtab
operator|+
sizeof|sizeof
argument_list|(
name|i386_regtab
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|i386_regtab
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* segment stuff */
end_comment

begin_decl_stmt
name|seg_entry
name|cs
init|=
block|{
literal|"cs"
block|,
literal|0x2e
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|ds
init|=
block|{
literal|"ds"
block|,
literal|0x3e
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|ss
init|=
block|{
literal|"ss"
block|,
literal|0x36
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|es
init|=
block|{
literal|"es"
block|,
literal|0x26
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|fs
init|=
block|{
literal|"fs"
block|,
literal|0x64
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|gs
init|=
block|{
literal|"gs"
block|,
literal|0x65
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
name|null
init|=
block|{
literal|""
block|,
literal|0x0
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*   This table is used to store the default segment register implied by all   possible memory addressing modes.   It is indexed by the mode& modrm entries of the modrm byte as follows:       index = (mode<<3) | modrm; */
end_comment

begin_decl_stmt
name|seg_entry
modifier|*
name|one_byte_segment_defaults
index|[]
init|=
block|{
comment|/* mode 0 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|null
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 1 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|null
block|,
operator|&
name|ss
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 2 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|null
block|,
operator|&
name|ss
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 3 --- not a memory reference; never referenced */
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|seg_entry
modifier|*
name|two_byte_segment_defaults
index|[]
init|=
block|{
comment|/* mode 0 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ss
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 1 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ss
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 2 */
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ss
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
operator|&
name|ds
block|,
comment|/* mode 3 --- not a memory reference; never referenced */
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|prefix_entry
name|i386_prefixtab
index|[]
init|=
block|{
block|{
literal|"addr16"
block|,
literal|0x67
block|}
block|,
comment|/* address size prefix ==> 16bit addressing 				 * (How is this useful?) */
define|#
directive|define
name|WORD_PREFIX_OPCODE
value|0x66
block|{
literal|"data16"
block|,
literal|0x66
block|}
block|,
comment|/* operand size prefix */
block|{
literal|"lock"
block|,
literal|0xf0
block|}
block|,
comment|/* bus lock prefix */
block|{
literal|"wait"
block|,
literal|0x9b
block|}
block|,
comment|/* wait for coprocessor */
block|{
literal|"cs"
block|,
literal|0x2e
block|}
block|,
block|{
literal|"ds"
block|,
literal|0x3e
block|}
block|,
comment|/* segment overrides ... */
block|{
literal|"es"
block|,
literal|0x26
block|}
block|,
block|{
literal|"fs"
block|,
literal|0x64
block|}
block|,
block|{
literal|"gs"
block|,
literal|0x65
block|}
block|,
block|{
literal|"ss"
block|,
literal|0x36
block|}
block|,
comment|/* REPE& REPNE used to detect rep/repne with a non-string instruction */
define|#
directive|define
name|REPNE
value|0xf2
define|#
directive|define
name|REPE
value|0xf3
block|{
literal|"rep"
block|,
literal|0xf3
block|}
block|,
block|{
literal|"repe"
block|,
literal|0xf3
block|}
block|,
comment|/* repeat string instructions */
block|{
literal|"repne"
block|,
literal|0xf2
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|prefix_entry
modifier|*
name|i386_prefixtab_end
init|=
name|i386_prefixtab
operator|+
sizeof|sizeof
argument_list|(
name|i386_prefixtab
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|i386_prefixtab
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

