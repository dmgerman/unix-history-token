begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Table of opcodes for the AMD 29000    Copyright (C) 1990, 1991 Free Software Foundation, Inc.  This file is part of GDB and GAS.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 1, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; see the file COPYING.  If not, write to the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_struct
struct|struct
name|a29k_opcode
block|{
comment|/* Name of the instruction.  */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Opcode word */
name|unsigned
name|long
name|opcode
decl_stmt|;
comment|/* A string of characters which describe the operands.      Valid characters are:      ,        Itself.  The character appears in the assembly code.      a        RA.  The register number is in bits 8-15 of the instruction.      b        RB.  The register number is in bits 0-7 of the instruction.      c        RC.  The register number is in bits 16-23 of the instruction.      i        An immediate operand is in bits 0-7 of the instruction.      x        Bits 0-7 and 16-23 of the instruction are bits 0-7 and 8-15               (respectively) of the immediate operand.      h        Same as x but the instruction contains bits 16-31 of the               immediate operand.      X        Same as x but bits 16-31 of the signed immediate operand               are set to 1 (thus the operand is always negative).      P,A      Bits 0-7 and 16-23 of the instruction are bits 2-9 and 10-17               (respectively) of the immediate operand. 	      P=PC-relative, sign-extended to 32 bits. 	      A=Absolute, zero-extended to 32 bits.      e        CE bit (bit 23) for a load/store instruction.      n        Control field (bits 16-22) for a load/store instruction.      v        Immediate operand in bits 16-23 of the instruction.               (used for trap numbers).      s        SA.  Special-purpose register number in bits 8-15               of the instruction.      u        UI--bit 7 of the instruction.      r        RND--bits 4-6 of the instruction.      d        FD--bits 2-3 of the instruction.      f        FS--bits 0-1 of the instruction.       Extensions for 29050:       d	      FMT--bits 2-3 of the instruction (not really new).      f	      ACN--bits 0-1 of the instruction (not really new).      F	      FUNC--Special function in bits 18-21 of the instruction.      C	      ACN--bits 16-17 specifying the accumlator register.  */
name|char
modifier|*
name|args
decl_stmt|;
block|}
struct|;
end_struct

begin_ifndef
ifndef|#
directive|ifndef
name|CONST
end_ifndef

begin_define
define|#
directive|define
name|CONST
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONST */
end_comment

begin_expr_stmt
specifier|static
name|CONST
expr|struct
name|a29k_opcode
name|a29k_opcodes
index|[]
operator|=
block|{
block|{
literal|"add"
block|,
literal|0x14000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"add"
block|,
literal|0x15000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"addc"
block|,
literal|0x1c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"addc"
block|,
literal|0x1d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"addcs"
block|,
literal|0x18000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"addcs"
block|,
literal|0x19000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"addcu"
block|,
literal|0x1a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"addcu"
block|,
literal|0x1b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"adds"
block|,
literal|0x10000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"adds"
block|,
literal|0x11000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"addu"
block|,
literal|0x12000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"addu"
block|,
literal|0x13000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"and"
block|,
literal|0x90000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"and"
block|,
literal|0x91000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"andn"
block|,
literal|0x9c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"andn"
block|,
literal|0x9d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"aseq"
block|,
literal|0x70000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"aseq"
block|,
literal|0x71000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asge"
block|,
literal|0x5c000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asge"
block|,
literal|0x5d000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asgeu"
block|,
literal|0x5e000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asgeu"
block|,
literal|0x5f000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asgt"
block|,
literal|0x58000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asgt"
block|,
literal|0x59000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asgtu"
block|,
literal|0x5a000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asgtu"
block|,
literal|0x5b000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asle"
block|,
literal|0x54000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asle"
block|,
literal|0x55000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asleu"
block|,
literal|0x56000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asleu"
block|,
literal|0x57000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"aslt"
block|,
literal|0x50000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"aslt"
block|,
literal|0x51000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asltu"
block|,
literal|0x52000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asltu"
block|,
literal|0x53000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"asneq"
block|,
literal|0x72000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"asneq"
block|,
literal|0x73000000
block|,
literal|"v,a,i"
block|}
block|,
block|{
literal|"call"
block|,
literal|0xa8000000
block|,
literal|"a,P"
block|}
block|,
block|{
literal|"call"
block|,
literal|0xa9000000
block|,
literal|"a,A"
block|}
block|,
block|{
literal|"calli"
block|,
literal|0xc8000000
block|,
literal|"a,b"
block|}
block|,
block|{
literal|"class"
block|,
literal|0xe6000000
block|,
literal|"c,a,f"
block|}
block|,
block|{
literal|"clz"
block|,
literal|0x08000000
block|,
literal|"c,b"
block|}
block|,
block|{
literal|"clz"
block|,
literal|0x09000000
block|,
literal|"c,i"
block|}
block|,
block|{
literal|"const"
block|,
literal|0x03000000
block|,
literal|"a,x"
block|}
block|,
block|{
literal|"consth"
block|,
literal|0x02000000
block|,
literal|"a,h"
block|}
block|,
block|{
literal|"consthz"
block|,
literal|0x05000000
block|,
literal|"a,h"
block|}
block|,
block|{
literal|"constn"
block|,
literal|0x01000000
block|,
literal|"a,X"
block|}
block|,
block|{
literal|"convert"
block|,
literal|0xe4000000
block|,
literal|"c,a,u,r,d,f"
block|}
block|,
block|{
literal|"cpbyte"
block|,
literal|0x2e000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpbyte"
block|,
literal|0x2f000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpeq"
block|,
literal|0x60000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpeq"
block|,
literal|0x61000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpge"
block|,
literal|0x4c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpge"
block|,
literal|0x4d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpgeu"
block|,
literal|0x4e000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpgeu"
block|,
literal|0x4f000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpgt"
block|,
literal|0x48000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpgt"
block|,
literal|0x49000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpgtu"
block|,
literal|0x4a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpgtu"
block|,
literal|0x4b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cple"
block|,
literal|0x44000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cple"
block|,
literal|0x45000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpleu"
block|,
literal|0x46000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpleu"
block|,
literal|0x47000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cplt"
block|,
literal|0x40000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cplt"
block|,
literal|0x41000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpltu"
block|,
literal|0x42000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpltu"
block|,
literal|0x43000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"cpneq"
block|,
literal|0x62000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"cpneq"
block|,
literal|0x63000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"dadd"
block|,
literal|0xf1000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"ddiv"
block|,
literal|0xf7000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"deq"
block|,
literal|0xeb000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"dge"
block|,
literal|0xef000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"dgt"
block|,
literal|0xed000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"div"
block|,
literal|0x6a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"div"
block|,
literal|0x6b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"div0"
block|,
literal|0x68000000
block|,
literal|"c,b"
block|}
block|,
block|{
literal|"div0"
block|,
literal|0x69000000
block|,
literal|"c,i"
block|}
block|,
block|{
literal|"divide"
block|,
literal|0xe1000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"dividu"
block|,
literal|0xe3000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"divl"
block|,
literal|0x6c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"divl"
block|,
literal|0x6d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"divrem"
block|,
literal|0x6e000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"divrem"
block|,
literal|0x6f000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"dmac"
block|,
literal|0xd9000000
block|,
literal|"F,C,a,b"
block|}
block|,
block|{
literal|"dmsm"
block|,
literal|0xdb000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"dmul"
block|,
literal|0xf5000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"dsub"
block|,
literal|0xf3000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"emulate"
block|,
literal|0xd7000000
block|,
literal|"v,a,b"
block|}
block|,
block|{
literal|"exbyte"
block|,
literal|0x0a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"exbyte"
block|,
literal|0x0b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"exhw"
block|,
literal|0x7c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"exhw"
block|,
literal|0x7d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"exhws"
block|,
literal|0x7e000000
block|,
literal|"c,a"
block|}
block|,
block|{
literal|"extract"
block|,
literal|0x7a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"extract"
block|,
literal|0x7b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"fadd"
block|,
literal|0xf0000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fdiv"
block|,
literal|0xf6000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fdmul"
block|,
literal|0xf9000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"feq"
block|,
literal|0xea000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fge"
block|,
literal|0xee000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fgt"
block|,
literal|0xec000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fmac"
block|,
literal|0xd8000000
block|,
literal|"F,C,a,b"
block|}
block|,
block|{
literal|"fmsm"
block|,
literal|0xda000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fmul"
block|,
literal|0xf4000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"fsub"
block|,
literal|0xf2000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"halt"
block|,
literal|0x89000000
block|,
literal|""
block|}
block|,
block|{
literal|"inbyte"
block|,
literal|0x0c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"inbyte"
block|,
literal|0x0d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"inhw"
block|,
literal|0x78000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"inhw"
block|,
literal|0x79000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"inv"
block|,
literal|0x9f000000
block|,
literal|""
block|}
block|,
block|{
literal|"iret"
block|,
literal|0x88000000
block|,
literal|""
block|}
block|,
block|{
literal|"iretinv"
block|,
literal|0x8c000000
block|,
literal|""
block|}
block|,
block|{
literal|"jmp"
block|,
literal|0xa0000000
block|,
literal|"P"
block|}
block|,
block|{
literal|"jmp"
block|,
literal|0xa1000000
block|,
literal|"A"
block|}
block|,
block|{
literal|"jmpf"
block|,
literal|0xa4000000
block|,
literal|"a,P"
block|}
block|,
block|{
literal|"jmpf"
block|,
literal|0xa5000000
block|,
literal|"a,A"
block|}
block|,
block|{
literal|"jmpfdec"
block|,
literal|0xb4000000
block|,
literal|"a,P"
block|}
block|,
block|{
literal|"jmpfdec"
block|,
literal|0xb5000000
block|,
literal|"a,A"
block|}
block|,
block|{
literal|"jmpfi"
block|,
literal|0xc4000000
block|,
literal|"a,b"
block|}
block|,
block|{
literal|"jmpi"
block|,
literal|0xc0000000
block|,
literal|"b"
block|}
block|,
block|{
literal|"jmpt"
block|,
literal|0xac000000
block|,
literal|"a,P"
block|}
block|,
block|{
literal|"jmpt"
block|,
literal|0xad000000
block|,
literal|"a,A"
block|}
block|,
block|{
literal|"jmpti"
block|,
literal|0xcc000000
block|,
literal|"a,b"
block|}
block|,
block|{
literal|"load"
block|,
literal|0x16000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"load"
block|,
literal|0x17000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"loadl"
block|,
literal|0x06000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"loadl"
block|,
literal|0x07000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"loadm"
block|,
literal|0x36000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"loadm"
block|,
literal|0x37000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"loadset"
block|,
literal|0x26000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"loadset"
block|,
literal|0x27000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"mfacc"
block|,
literal|0xe9000100
block|,
literal|"c,d,f"
block|}
block|,
block|{
literal|"mfsr"
block|,
literal|0xc6000000
block|,
literal|"c,s"
block|}
block|,
block|{
literal|"mftlb"
block|,
literal|0xb6000000
block|,
literal|"c,a"
block|}
block|,
block|{
literal|"mtacc"
block|,
literal|0xe8010000
block|,
literal|"a,d,f"
block|}
block|,
block|{
literal|"mtsr"
block|,
literal|0xce000000
block|,
literal|"s,b"
block|}
block|,
block|{
literal|"mtsrim"
block|,
literal|0x04000000
block|,
literal|"s,x"
block|}
block|,
block|{
literal|"mttlb"
block|,
literal|0xbe000000
block|,
literal|"a,b"
block|}
block|,
block|{
literal|"mul"
block|,
literal|0x64000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"mul"
block|,
literal|0x65000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"mull"
block|,
literal|0x66000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"mull"
block|,
literal|0x67000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"multiplu"
block|,
literal|0xe2000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"multiply"
block|,
literal|0xe0000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"multm"
block|,
literal|0xde000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"multmu"
block|,
literal|0xdf000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"mulu"
block|,
literal|0x74000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"mulu"
block|,
literal|0x75000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"nand"
block|,
literal|0x9a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"nand"
block|,
literal|0x9b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"nop"
block|,
literal|0x70400101
block|,
literal|""
block|}
block|,
block|{
literal|"nor"
block|,
literal|0x98000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"nor"
block|,
literal|0x99000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"or"
block|,
literal|0x92000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"or"
block|,
literal|0x93000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"orn"
block|,
literal|0xaa000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"orn"
block|,
literal|0xab000000
block|,
literal|"c,a,i"
block|}
block|,
comment|/* The description of "setip" in Chapter 8 ("instruction set") of the user's    manual claims that these are absolute register numbers.  But section    7.2.1 explains that they are not.  The latter is correct, so print    these normally ("lr0", "lr5", etc.).  */
block|{
literal|"setip"
block|,
literal|0x9e000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"sll"
block|,
literal|0x80000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"sll"
block|,
literal|0x81000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"sqrt"
block|,
literal|0xe5000000
block|,
literal|"c,a,f"
block|}
block|,
block|{
literal|"sra"
block|,
literal|0x86000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"sra"
block|,
literal|0x87000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"srl"
block|,
literal|0x82000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"srl"
block|,
literal|0x83000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"store"
block|,
literal|0x1e000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"store"
block|,
literal|0x1f000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"storel"
block|,
literal|0x0e000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"storel"
block|,
literal|0x0f000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"storem"
block|,
literal|0x3e000000
block|,
literal|"e,n,a,b"
block|}
block|,
block|{
literal|"storem"
block|,
literal|0x3f000000
block|,
literal|"e,n,a,i"
block|}
block|,
block|{
literal|"sub"
block|,
literal|0x24000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"sub"
block|,
literal|0x25000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subc"
block|,
literal|0x2c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subc"
block|,
literal|0x2d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subcs"
block|,
literal|0x28000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subcs"
block|,
literal|0x29000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subcu"
block|,
literal|0x2a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subcu"
block|,
literal|0x2b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subr"
block|,
literal|0x34000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subr"
block|,
literal|0x35000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subrc"
block|,
literal|0x3c000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subrc"
block|,
literal|0x3d000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subrcs"
block|,
literal|0x38000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subrcs"
block|,
literal|0x39000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subrcu"
block|,
literal|0x3a000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subrcu"
block|,
literal|0x3b000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subrs"
block|,
literal|0x30000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subrs"
block|,
literal|0x31000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subru"
block|,
literal|0x32000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subru"
block|,
literal|0x33000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subs"
block|,
literal|0x20000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subs"
block|,
literal|0x21000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"subu"
block|,
literal|0x22000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"subu"
block|,
literal|0x23000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"xnor"
block|,
literal|0x96000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"xnor"
block|,
literal|0x97000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|"xor"
block|,
literal|0x94000000
block|,
literal|"c,a,b"
block|}
block|,
block|{
literal|"xor"
block|,
literal|0x95000000
block|,
literal|"c,a,i"
block|}
block|,
block|{
literal|""
block|,
literal|0x0
block|,
literal|""
block|}
comment|/* Dummy entry, not included in NUM_OPCODES.  This 			   lets code examine entry i+1 without checking 			   if we've run off the end of the table.  */
block|}
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|CONST
name|unsigned
name|int
name|num_opcodes
init|=
operator|(
operator|(
operator|(
sizeof|sizeof
name|a29k_opcodes
operator|)
operator|/
operator|(
sizeof|sizeof
name|a29k_opcodes
index|[
literal|0
index|]
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * $Log: a29k.h,v $  * Revision 1.1  1993/10/02  21:00:40  pk  * GNU gas 1.92.3 based assembler supporting PIC code (for i386 and sparc).  *  * Revision 1.2  1992/02/29  17:10:43  rich  * various smallish fixes from mail archives  *  * Revision 1.1.1.1  1992/02/24  02:34:30  rich  * devo fork  *  * Revision 1.1  1991/12/01  02:22:19  sac  * Initial revision  *  * Revision 1.5  1991/11/07  16:59:19  sac  * Fixed encoding of mtacc instruction.  *  * Revision 1.4  1991/08/06  07:20:27  rich  * Fixing CONST declarations.  *  * Revision 1.3  1991/08/05  22:31:05  rich  * *** empty log message ***  *  * Revision 1.2  1991/07/15  23:34:04  steve  * *** empty log message ***  *  * Revision 1.1  1991/05/19  00:19:33  rich  * Initial revision  *  * Revision 1.1.1.1  1991/04/04  18:15:23  rich  * new gas main line  *  * Revision 1.1  1991/04/04  18:15:23  rich  * Initial revision  *  * Revision 1.2  1991/03/30  17:13:19  rich  * num_opcodes now unsigned.  Also, added rcsid and log.  *  *  */
end_comment

begin_comment
comment|/* end of a29k-opcode.h */
end_comment

end_unit

