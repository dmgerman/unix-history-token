begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* pyramid.opcode.h -- gdb initial attempt. */
end_comment

begin_comment
comment|/* pyramid opcode table: wot to do with this    particular opcode */
end_comment

begin_struct
struct|struct
name|pyr_datum
block|{
name|char
name|nargs
decl_stmt|;
name|char
modifier|*
name|args
decl_stmt|;
comment|/* how to compile said opcode */
name|unsigned
name|long
name|mask
decl_stmt|;
comment|/* Bit vector: which operand modes are valid 				   for this opcode */
name|unsigned
name|char
name|code
decl_stmt|;
comment|/* op-code (always 6(?) bits */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|pyr_insn_format
block|{
name|unsigned
name|int
name|mode
range|:
literal|4
decl_stmt|;
name|unsigned
name|int
name|operator
range|:
literal|8
decl_stmt|;
name|unsigned
name|int
name|index_scale
range|:
literal|2
decl_stmt|;
name|unsigned
name|int
name|index_reg
range|:
literal|6
decl_stmt|;
name|unsigned
name|int
name|operand_1
range|:
literal|6
decl_stmt|;
name|unsigned
name|int
name|operand_2
range|:
literal|6
decl_stmt|;
block|}
name|pyr_insn_format
typedef|;
end_typedef

begin_comment
comment|/* We store four bytes of opcode for all opcodes.    Pyramid is sufficiently RISCy that:       - insns are always an integral number of words;       - the length of any insn can be told from the first word of         the insn. (ie, if there are zero, one, or two words of 	immediate operand/offset).      The args component is a string containing two characters for each    operand of the instruction.  The first specifies the kind of operand;    the second, the place it is stored. */
end_comment

begin_comment
comment|/* Kinds of operands:    mask	 assembler syntax	description    0x0001:  movw Rn,Rn		register to register    0x0002:  movw K,Rn		quick immediate to register    0x0004:  movw I,Rn		long immediate to register    0x0008:  movw (Rn),Rn	register indirect to register    	    movw (Rn)[x],Rn	register indirect to register    0x0010:  movw I(Rn),Rn	offset register indirect to register    	    movw I(Rn)[x],Rn	offset register indirect, indexed, to register     0x0020:  movw Rn,(Rn)	register to register indirect    0x0040:  movw K,(Rn)		quick immediate to register indirect    0x0080:  movw I,(Rn)		long immediate to register indirect    0x0100:  movw (Rn),(Rn)	register indirect to-register indirect    0x0100:  movw (Rn),(Rn)	register indirect to-register indirect    0x0200:  movw I(Rn),(Rn)	register indirect+offset to register indirect    0x0200:  movw I(Rn),(Rn)	register indirect+offset to register indirect     0x0400:  movw Rn,I(Rn)	register to register indirect+offset    0x0800:  movw K,I(Rn)	quick immediate to register indirect+offset    0x1000:  movw I,I(Rn)	long immediate to register indirect+offset    0x1000:  movw (Rn),I(Rn)	register indirect to-register indirect+offset    0x1000:  movw I(Rn),I(Rn)	register indirect+offset to register indirect    					+offset    0x0000:  (irregular)		???      Each insn has a four-bit field encoding the type(s) of its operands. */
end_comment

begin_comment
comment|/* Some common combinations    */
end_comment

begin_comment
comment|/* the first 5,(0x1|0x2|0x4|0x8|0x10) ie (1|2|4|8|16), ie ( 32 -1)*/
end_comment

begin_define
define|#
directive|define
name|GEN_TO_REG
value|(31)
end_define

begin_define
define|#
directive|define
name|UNKNOWN
value|((unsigned long)-1)
end_define

begin_define
define|#
directive|define
name|ANY
value|(GEN_TO_REG | (GEN_TO_REG<< 5) | (GEN_TO_REG<< 15))
end_define

begin_define
define|#
directive|define
name|CONVERT
value|(1|8|0x10|0x20|0x200)
end_define

begin_define
define|#
directive|define
name|K_TO_REG
value|(2)
end_define

begin_define
define|#
directive|define
name|I_TO_REG
value|(4)
end_define

begin_define
define|#
directive|define
name|NOTK_TO_REG
value|(GEN_TO_REG& ~K_TO_REG)
end_define

begin_define
define|#
directive|define
name|NOTI_TO_REG
value|(GEN_TO_REG& ~I_TO_REG)
end_define

begin_comment
comment|/* The assembler requires that this array be sorted as follows:    all instances of the same mnemonic must be consecutive.    All instances of the same mnemonic with the same number of operands    must be consecutive.  */
end_comment

begin_struct
struct|struct
name|pyr_opcode
comment|/* pyr opcode text */
block|{
name|char
modifier|*
name|name
decl_stmt|;
comment|/* opcode name: lowercase string  [key]  */
name|struct
name|pyr_datum
name|datum
decl_stmt|;
comment|/* rest of opcode table          [datum] */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|pyr_how
value|args
end_define

begin_define
define|#
directive|define
name|pyr_nargs
value|nargs
end_define

begin_define
define|#
directive|define
name|pyr_mask
value|mask
end_define

begin_define
define|#
directive|define
name|pyr_name
value|name
end_define

begin_decl_stmt
name|struct
name|pyr_opcode
name|pyr_opcodes
index|[]
init|=
block|{
block|{
literal|"movb"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x11
block|}
block|, }
block|,
block|{
literal|"movh"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x12
block|}
block|}
block|,
block|{
literal|"movw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|ANY
block|,
literal|0x10
block|}
block|}
block|,
block|{
literal|"movl"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|ANY
block|,
literal|0x13
block|}
block|}
block|,
block|{
literal|"mnegw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x14
block|}
block|}
block|,
block|{
literal|"mnegf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x15
block|}
block|}
block|,
block|{
literal|"mnegd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x16
block|}
block|}
block|,
block|{
literal|"mcomw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x17
block|}
block|}
block|,
block|{
literal|"mabsw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x18
block|}
block|}
block|,
block|{
literal|"mabsf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x19
block|}
block|}
block|,
block|{
literal|"mabsd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x1a
block|}
block|}
block|,
block|{
literal|"mtstw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x1c
block|}
block|}
block|,
block|{
literal|"mtstf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x1d
block|}
block|}
block|,
block|{
literal|"mtstd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x1
block|,
literal|0x1e
block|}
block|}
block|,
block|{
literal|"mova"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|0x8
operator||
literal|0x10
block|,
literal|0x1f
block|}
block|}
block|,
block|{
literal|"movzbw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x20
block|}
block|}
block|,
block|{
literal|"movzhw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x21
block|}
block|}
block|,
comment|/* 2 insns out of order here */
block|{
literal|"movbl"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x4f
block|}
block|}
block|,
block|{
literal|"filbl"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x4e
block|}
block|}
block|,
block|{
literal|"cvtbw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x22
block|}
block|}
block|,
block|{
literal|"cvthw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x23
block|}
block|}
block|,
block|{
literal|"cvtwb"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x24
block|}
block|}
block|,
block|{
literal|"cvtwh"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x25
block|}
block|}
block|,
block|{
literal|"cvtwf"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x26
block|}
block|}
block|,
block|{
literal|"cvtwd"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x27
block|}
block|}
block|,
block|{
literal|"cvtfw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x28
block|}
block|}
block|,
block|{
literal|"cvtfd"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x29
block|}
block|}
block|,
block|{
literal|"cvtdw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x2a
block|}
block|}
block|,
block|{
literal|"cvtdf"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|CONVERT
block|,
literal|0x2b
block|}
block|}
block|,
block|{
literal|"addw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x40
block|}
block|}
block|,
block|{
literal|"addwc"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x41
block|}
block|}
block|,
block|{
literal|"subw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x42
block|}
block|}
block|,
block|{
literal|"subwb"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x43
block|}
block|}
block|,
block|{
literal|"rsubw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x44
block|}
block|}
block|,
block|{
literal|"mulw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x45
block|}
block|}
block|,
block|{
literal|"emul"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x47
block|}
block|}
block|,
block|{
literal|"umulw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x46
block|}
block|}
block|,
block|{
literal|"divw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x48
block|}
block|}
block|,
block|{
literal|"ediv"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x4a
block|}
block|}
block|,
block|{
literal|"rdivw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x4b
block|}
block|}
block|,
block|{
literal|"udivw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x49
block|}
block|}
block|,
block|{
literal|"modw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x4c
block|}
block|}
block|,
block|{
literal|"umodw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x4d
block|}
block|}
block|,
block|{
literal|"addf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x50
block|}
block|}
block|,
block|{
literal|"addd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x51
block|}
block|}
block|,
block|{
literal|"subf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x52
block|}
block|}
block|,
block|{
literal|"subd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x53
block|}
block|}
block|,
block|{
literal|"mulf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x56
block|}
block|}
block|,
block|{
literal|"muld"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x57
block|}
block|}
block|,
block|{
literal|"divf"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x58
block|}
block|}
block|,
block|{
literal|"divd"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x59
block|}
block|}
block|,
block|{
literal|"cmpb"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x61
block|}
block|}
block|,
block|{
literal|"cmph"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x62
block|}
block|}
block|,
block|{
literal|"cmpw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x60
block|}
block|}
block|,
block|{
literal|"ucmpb"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x66
block|}
block|}
block|,
comment|/* WHY no "ucmph"??? */
block|{
literal|"ucmpw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x65
block|}
block|}
block|,
block|{
literal|"xchw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x0f
block|}
block|}
block|,
block|{
literal|"andw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x30
block|}
block|}
block|,
block|{
literal|"orw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x31
block|}
block|}
block|,
block|{
literal|"xorw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x32
block|}
block|}
block|,
block|{
literal|"bicw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x33
block|}
block|}
block|,
block|{
literal|"lshlw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x38
block|}
block|}
block|,
block|{
literal|"ashlw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3a
block|}
block|}
block|,
block|{
literal|"ashll"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3c
block|}
block|}
block|,
block|{
literal|"ashrw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3b
block|}
block|}
block|,
block|{
literal|"ashrl"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3d
block|}
block|}
block|,
block|{
literal|"rotlw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3e
block|}
block|}
block|,
block|{
literal|"rotrw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x3f
block|}
block|}
block|,
comment|/* push and pop insns are "going away next release". */
block|{
literal|"pushw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x0c
block|}
block|}
block|,
block|{
literal|"popw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x1
operator||
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x0d
block|}
block|}
block|,
block|{
literal|"pusha"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|0x8
operator||
literal|0x10
operator|)
block|,
literal|0x0e
block|}
block|}
block|,
block|{
literal|"bitsw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x35
block|}
block|}
block|,
block|{
literal|"bitcw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x36
block|}
block|}
block|,
comment|/* some kind of ibra/dbra insns??*/
block|{
literal|"icmpw"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x67
block|}
block|}
block|,
block|{
literal|"dcmpw"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|1
operator||
literal|4
operator||
literal|0x20
operator||
literal|0x80
operator||
literal|0x400
operator||
literal|0x1000
operator|)
block|,
literal|0x69
block|}
block|}
block|,
comment|/*FIXME*/
block|{
literal|"acmpw"
block|,
block|{
literal|2
block|,
literal|""
block|,
literal|1
block|,
literal|0x6b
block|}
block|}
block|,
comment|/* Call is written as a 1-op insn, but is always (dis)assembled as a 2-op      insn with a 2nd op of tr14.   The assembler will have to grok this.  */
block|{
literal|"call"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x04
block|}
block|}
block|,
block|{
literal|"call"
block|,
block|{
literal|1
block|,
literal|""
block|,
name|GEN_TO_REG
block|,
literal|0x04
block|}
block|}
block|,
block|{
literal|"callk"
block|,
block|{
literal|1
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x06
block|}
block|}
block|,
comment|/* system call?*/
comment|/* Ret is usually written as a 0-op insn, but gets disassembled as a      1-op insn. The operand is always tr15. */
block|{
literal|"ret"
block|,
block|{
literal|0
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x09
block|}
block|}
block|,
block|{
literal|"ret"
block|,
block|{
literal|1
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x09
block|}
block|}
block|,
block|{
literal|"adsf"
block|,
block|{
literal|2
block|,
literal|""
block|,
operator|(
literal|1
operator||
literal|2
operator||
literal|4
operator|)
block|,
literal|0x08
block|}
block|}
block|,
block|{
literal|"retd"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x0a
block|}
block|}
block|,
block|{
literal|"btc"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x01
block|}
block|}
block|,
block|{
literal|"bfc"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x02
block|}
block|}
block|,
comment|/* Careful: halt is 0x00000000. Jump must have some other (mode?)bit set?? */
block|{
literal|"jump"
block|,
block|{
literal|1
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x00
block|}
block|}
block|,
block|{
literal|"btp"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0xf00
block|}
block|}
block|,
comment|/* read control-stack pointer is another 1-or-2 operand insn. */
block|{
literal|"rcsp"
block|,
block|{
literal|2
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x01f
block|}
block|}
block|,
block|{
literal|"rcsp"
block|,
block|{
literal|1
block|,
literal|""
block|,
name|UNKNOWN
block|,
literal|0x01f
block|}
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* end: pyramid.opcode.h */
end_comment

begin_comment
comment|/* One day I will have to take the time to find out what operands    are valid for these insns, and guess at what they mean.     I can't imagine what the "I???" insns (iglob, etc) do.     the arithmetic-sounding insns ending in "p" sound awfully like BCD    arithmetic insns:    	dshlp -> Decimal SHift Left Packed 	dshrp -> Decimal SHift Right Packed    and cvtlp would be convert long to packed.    I have no idea how the operands are interpreted; but having them be    a long register with (address, length) of an in-memory packed BCD operand    would not be surprising.    They are unlikely to be a packed bcd string: 64 bits of long give    is only 15 digits+sign, which isn't enough for COBOL.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_comment
unit|{"wcsp",	{ 2, "", UNKNOWN,		0x00} },
comment|/*write csp?*/
end_comment

begin_comment
comment|/* The OSx Operating System Porting Guide claims SSL does things      with tr12 (a register reserved to it) to do with static block-structure      references.  SSL=Set Static Link?  It's "Going away next release". */
end_comment

begin_comment
unit|{"ssl",	{ 2, "", UNKNOWN,		0x00} },   {"ccmps",	{ 2, "", UNKNOWN,		0x00} },   {"lcd",	{ 2, "", UNKNOWN,		0x00} },   {"uemul",	{ 2, "", UNKNOWN,		0x00} },
comment|/*unsigned emul*/
end_comment

begin_comment
unit|{"srf",	{ 2, "", UNKNOWN,		0x00} },
comment|/*Gidget time???*/
end_comment

begin_comment
unit|{"mnegp",	{ 2, "", UNKNOWN,		0x00} }, /move-neg phys?*/   {"ldp",	{ 2, "", UNKNOWN,		0x00} },
comment|/*load phys?*/
end_comment

begin_comment
unit|{"ldti",	{ 2, "", UNKNOWN,		0x00} },   {"ldb",	{ 2, "", UNKNOWN,		0x00} },   {"stp",	{ 2, "", UNKNOWN,		0x00} },   {"stti",	{ 2, "", UNKNOWN,		0x00} },   {"stb",	{ 2, "", UNKNOWN,		0x00} },   {"stu",	{ 2, "", UNKNOWN,		0x00} },   {"addp",	{ 2, "", UNKNOWN,		0x00} },   {"subp",	{ 2, "", UNKNOWN,		0x00} },   {"mulp",	{ 2, "", UNKNOWN,		0x00} },   {"divp",	{ 2, "", UNKNOWN,		0x00} },   {"dshlp",	{ 2, "", UNKNOWN,		0x00} },
comment|/* dec shl packed? */
end_comment

begin_comment
unit|{"dshrp",	{ 2, "", UNKNOWN,		0x00} },
comment|/* dec shr packed? */
end_comment

begin_comment
unit|{"movs",	{ 2, "", UNKNOWN,		0x00} },
comment|/*move (string?)?*/
end_comment

begin_comment
unit|{"cmpp",	{ 2, "", UNKNOWN,		0x00} },
comment|/* cmp phys?*/
end_comment

begin_comment
unit|{"cmps",	{ 2, "", UNKNOWN,		0x00} },
comment|/* cmp (string?)?*/
end_comment

begin_comment
unit|{"cvtlp",	{ 2, "", UNKNOWN,		0x00} },
comment|/* cvt long to p??*/
end_comment

begin_comment
unit|{"cvtpl",	{ 2, "", UNKNOWN,		0x00} },
comment|/* cvt p to l??*/
end_comment

begin_comment
unit|{"dintr",	{ 2, "", UNKNOWN,		0x00} },
comment|/* ?? intr ?*/
end_comment

begin_comment
unit|{"rphysw",	{ 2, "", UNKNOWN,		0x00} },
comment|/* read phys word?*/
end_comment

begin_comment
unit|{"wphysw",	{ 2, "", UNKNOWN,		0x00} },
comment|/* write phys word?*/
end_comment

begin_comment
unit|{"cmovs",	{ 2, "", UNKNOWN,		0x00} },   {"rsubw",	{ 2, "", UNKNOWN,		0x00} },   {"bicpsw",	{ 2, "", UNKNOWN,		0x00} },
comment|/* clr bit in psw? */
end_comment

begin_comment
unit|{"bispsw",	{ 2, "", UNKNOWN,		0x00} },
comment|/* set bit in psw? */
end_comment

begin_comment
unit|{"eio",	{ 2, "", UNKNOWN,		0x00} },
comment|/* ?? ?io ? */
end_comment

begin_comment
unit|{"callp",	{ 2, "", UNKNOWN,		0x00} },
comment|/* call phys?*/
end_comment

begin_comment
unit|{"callr",	{ 2, "", UNKNOWN,		0x00} },   {"lpcxt",	{ 2, "", UNKNOWN,		0x00} },
comment|/*load proc context*/
end_comment

begin_comment
unit|{"rei",	{ 2, "", UNKNOWN,		0x00} },
comment|/*ret from intrpt*/
end_comment

begin_comment
unit|{"rport",	{ 2, "", UNKNOWN,		0x00} },
comment|/*read-port?*/
end_comment

begin_comment
unit|{"rtod",	{ 2, "", UNKNOWN,		0x00} },
comment|/*read-time-of-day?*/
end_comment

begin_comment
unit|{"ssi",	{ 2, "", UNKNOWN,		0x00} },   {"vtpa",	{ 2, "", UNKNOWN,		0x00} },
comment|/*virt-to-phys-addr?*/
end_comment

begin_comment
unit|{"wicl",	{ 2, "", UNKNOWN,		0x00} },
comment|/* write icl ? */
end_comment

begin_comment
unit|{"wport",	{ 2, "", UNKNOWN,		0x00} },
comment|/*write-port?*/
end_comment

begin_comment
unit|{"wtod",	{ 2, "", UNKNOWN,		0x00} },
comment|/*write-time-of-day?*/
end_comment

begin_comment
unit|{"flic",	{ 2, "", UNKNOWN,		0x00} },   {"iglob",	{ 2, "", UNKNOWN,		0x00} },
comment|/* I global? */
end_comment

begin_comment
unit|{"iphys",	{ 2, "", UNKNOWN,		0x00} },
comment|/* I physical? */
end_comment

begin_comment
unit|{"ipid",	{ 2, "", UNKNOWN,		0x00} },
comment|/* I pid? */
end_comment

begin_comment
unit|{"ivect",	{ 2, "", UNKNOWN,		0x00} },
comment|/* I vector? */
end_comment

begin_endif
unit|{"lamst",	{ 2, "", UNKNOWN,		0x00} },   {"tio",	{ 2, "", UNKNOWN,		0x00} },
endif|#
directive|endif
end_endif

end_unit

