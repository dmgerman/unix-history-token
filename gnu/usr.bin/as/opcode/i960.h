begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Basic 80960 instruction formats.  *  * The 'COJ' instructions are actually COBR instructions with the 'b' in  * the mnemonic replaced by a 'j';  they are ALWAYS "de-optimized" if necessary:  * if the displacement will not fit in 13 bits, the assembler will replace them  * with the corresponding compare and branch instructions.  *  * All of the 'MEMn' instructions are the same format; the 'n' in the name  * indicates the default index scale factor (the size of the datum operated on).  *  * The FBRA formats are not actually an instruction format.  They are the  * "convenience directives" for branching on floating-point comparisons,  * each of which generates 2 instructions (a 'bno' and one other branch).  *  * The CALLJ format is not actually an instruction format.  It indicates that  * the instruction generated (a CTRL-format 'call') should have its relocation  * specially flagged for link-time replacement with a 'bal' or 'calls' if  * appropriate.  */
end_comment

begin_comment
comment|/* $FreeBSD$ */
end_comment

begin_define
define|#
directive|define
name|CTRL
value|0
end_define

begin_define
define|#
directive|define
name|COBR
value|1
end_define

begin_define
define|#
directive|define
name|COJ
value|2
end_define

begin_define
define|#
directive|define
name|REG
value|3
end_define

begin_define
define|#
directive|define
name|MEM1
value|4
end_define

begin_define
define|#
directive|define
name|MEM2
value|5
end_define

begin_define
define|#
directive|define
name|MEM4
value|6
end_define

begin_define
define|#
directive|define
name|MEM8
value|7
end_define

begin_define
define|#
directive|define
name|MEM12
value|8
end_define

begin_define
define|#
directive|define
name|MEM16
value|9
end_define

begin_define
define|#
directive|define
name|FBRA
value|10
end_define

begin_define
define|#
directive|define
name|CALLJ
value|11
end_define

begin_comment
comment|/* Masks for the mode bits in REG format instructions */
end_comment

begin_define
define|#
directive|define
name|M1
value|0x0800
end_define

begin_define
define|#
directive|define
name|M2
value|0x1000
end_define

begin_define
define|#
directive|define
name|M3
value|0x2000
end_define

begin_comment
comment|/* Generate the 12-bit opcode for a REG format instruction by placing the  * high 8 bits in instruction bits 24-31, the low 4 bits in instruction bits  * 7-10.  */
end_comment

begin_define
define|#
directive|define
name|REG_OPC
parameter_list|(
name|opc
parameter_list|)
value|((opc& 0xff0)<< 20) | ((opc& 0xf)<< 7)
end_define

begin_comment
comment|/* Generate a template for a REG format instruction:  place the opcode bits  * in the appropriate fields and OR in mode bits for the operands that will not  * be used.  I.e.,  *		set m1=1, if src1 will not be used  *		set m2=1, if src2 will not be used  *		set m3=1, if dst  will not be used  *  * Setting the "unused" mode bits to 1 speeds up instruction execution(!).  * The information is also useful to us because some 1-operand REG instructions  * use the src1 field, others the dst field; and some 2-operand REG instructions  * use src1/src2, others src1/dst.  The set mode bits enable us to distinguish.  */
end_comment

begin_define
define|#
directive|define
name|R_0
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) | M1 | M2 | M3 )
end_define

begin_comment
comment|/* No operands      */
end_comment

begin_define
define|#
directive|define
name|R_1
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) | M2 | M3 )
end_define

begin_comment
comment|/* 1 operand: src1  */
end_comment

begin_define
define|#
directive|define
name|R_1D
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) | M1 | M2 )
end_define

begin_comment
comment|/* 1 operand: dst   */
end_comment

begin_define
define|#
directive|define
name|R_2
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) | M3 )
end_define

begin_comment
comment|/* 2 ops: src1/src2 */
end_comment

begin_define
define|#
directive|define
name|R_2D
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) | M2 )
end_define

begin_comment
comment|/* 2 ops: src1/dst  */
end_comment

begin_define
define|#
directive|define
name|R_3
parameter_list|(
name|opc
parameter_list|)
value|( REG_OPC(opc) )
end_define

begin_comment
comment|/* 3 operands       */
end_comment

begin_comment
comment|/* DESCRIPTOR BYTES FOR REGISTER OPERANDS  *  * Interpret names as follows:  *	R:   global or local register only  *	RS:  global, local, or (if target allows) special-function register only  *	RL:  global or local register, or integer literal  *	RSL: global, local, or (if target allows) special-function register;  *		or integer literal  *	F:   global, local, or floating-point register  *	FL:  global, local, or floating-point register; or literal (including  *		floating point)  *  * A number appended to a name indicates that registers must be aligned,  * as follows:  *	2: register number must be multiple of 2  *	4: register number must be multiple of 4  */
end_comment

begin_define
define|#
directive|define
name|SFR
value|0x10
end_define

begin_comment
comment|/* Mask for the "sfr-OK" bit */
end_comment

begin_define
define|#
directive|define
name|LIT
value|0x08
end_define

begin_comment
comment|/* Mask for the "literal-OK" bit */
end_comment

begin_define
define|#
directive|define
name|FP
value|0x04
end_define

begin_comment
comment|/* Mask for "floating-point-OK" bit */
end_comment

begin_comment
comment|/* This macro ors the bits together.  Note that 'align' is a mask  * for the low 0, 1, or 2 bits of the register number, as appropriate.  */
end_comment

begin_define
define|#
directive|define
name|OP
parameter_list|(
name|align
parameter_list|,
name|lit
parameter_list|,
name|fp
parameter_list|,
name|sfr
parameter_list|)
value|( align | lit | fp | sfr )
end_define

begin_define
define|#
directive|define
name|R
value|OP( 0, 0,   0,  0   )
end_define

begin_define
define|#
directive|define
name|RS
value|OP( 0, 0,   0,  SFR )
end_define

begin_define
define|#
directive|define
name|RL
value|OP( 0, LIT, 0,  0   )
end_define

begin_define
define|#
directive|define
name|RSL
value|OP( 0, LIT, 0,  SFR )
end_define

begin_define
define|#
directive|define
name|F
value|OP( 0, 0,   FP, 0   )
end_define

begin_define
define|#
directive|define
name|FL
value|OP( 0, LIT, FP, 0   )
end_define

begin_define
define|#
directive|define
name|R2
value|OP( 1, 0,   0,  0   )
end_define

begin_define
define|#
directive|define
name|RL2
value|OP( 1, LIT, 0,  0   )
end_define

begin_define
define|#
directive|define
name|F2
value|OP( 1, 0,   FP, 0   )
end_define

begin_define
define|#
directive|define
name|FL2
value|OP( 1, LIT, FP, 0   )
end_define

begin_define
define|#
directive|define
name|R4
value|OP( 3, 0,   0,  0   )
end_define

begin_define
define|#
directive|define
name|RL4
value|OP( 3, LIT, 0,  0   )
end_define

begin_define
define|#
directive|define
name|F4
value|OP( 3, 0,   FP, 0   )
end_define

begin_define
define|#
directive|define
name|FL4
value|OP( 3, LIT, FP, 0   )
end_define

begin_define
define|#
directive|define
name|M
value|0x7f
end_define

begin_comment
comment|/* Memory operand (MEMA& MEMB format instructions) */
end_comment

begin_comment
comment|/* Macros to extract info from the register operand descriptor byte 'od'.  */
end_comment

begin_define
define|#
directive|define
name|SFR_OK
parameter_list|(
name|od
parameter_list|)
value|(od& SFR)
end_define

begin_comment
comment|/* TRUE if sfr operand allowed */
end_comment

begin_define
define|#
directive|define
name|LIT_OK
parameter_list|(
name|od
parameter_list|)
value|(od& LIT)
end_define

begin_comment
comment|/* TRUE if literal operand allowed */
end_comment

begin_define
define|#
directive|define
name|FP_OK
parameter_list|(
name|od
parameter_list|)
value|(od& FP)
end_define

begin_comment
comment|/* TRUE if floating-point op allowed */
end_comment

begin_define
define|#
directive|define
name|REG_ALIGN
parameter_list|(
name|od
parameter_list|,
name|n
parameter_list|)
value|((od& 0x3& n) == 0)
end_define

begin_comment
comment|/* TRUE if reg #n is properly aligned */
end_comment

begin_define
define|#
directive|define
name|MEMOP
parameter_list|(
name|od
parameter_list|)
value|(od == M)
end_define

begin_comment
comment|/* TRUE if operand is a memory operand*/
end_comment

begin_comment
comment|/* Description of a single i80960 instruction */
end_comment

begin_struct
struct|struct
name|i960_opcode
block|{
name|long
name|opcode
decl_stmt|;
comment|/* 32 bits, constant fields filled in, rest zeroed */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Assembler mnemonic				   */
name|short
name|iclass
decl_stmt|;
comment|/* Class: see #defines below			   */
name|char
name|format
decl_stmt|;
comment|/* REG, COBR, CTRL, MEMn, COJ, FBRA, or CALLJ	   */
name|char
name|num_ops
decl_stmt|;
comment|/* Number of operands				   */
name|char
name|operand
index|[
literal|3
index|]
decl_stmt|;
comment|/* Operand descriptors; same order as assembler instr */
block|}
struct|;
end_struct

begin_comment
comment|/* Classes of 960 intructions:  *	- each instruction falls into one class.  *	- each target architecture supports one or more classes.  *  * EACH CONSTANT MUST CONTAIN 1 AND ONLY 1 SET BIT!:  see targ_has_iclass().  */
end_comment

begin_define
define|#
directive|define
name|I_BASE
value|0x01
end_define

begin_comment
comment|/* 80960 base instruction set	*/
end_comment

begin_define
define|#
directive|define
name|I_CX
value|0x02
end_define

begin_comment
comment|/* 80960Cx instruction		*/
end_comment

begin_define
define|#
directive|define
name|I_DEC
value|0x04
end_define

begin_comment
comment|/* Decimal instruction		*/
end_comment

begin_define
define|#
directive|define
name|I_FP
value|0x08
end_define

begin_comment
comment|/* Floating point instruction	*/
end_comment

begin_define
define|#
directive|define
name|I_KX
value|0x10
end_define

begin_comment
comment|/* 80960Kx instruction		*/
end_comment

begin_define
define|#
directive|define
name|I_MIL
value|0x20
end_define

begin_comment
comment|/* Military instruction		*/
end_comment

begin_define
define|#
directive|define
name|I_CASIM
value|0x40
end_define

begin_comment
comment|/* CA simulator instruction	*/
end_comment

begin_comment
comment|/******************************************************************************  *  *		TABLE OF i960 INSTRUCTION DESCRIPTIONS  *  ******************************************************************************/
end_comment

begin_decl_stmt
specifier|const
name|struct
name|i960_opcode
name|i960_opcodes
index|[]
init|=
block|{
comment|/* if a CTRL instruction has an operand, it's always a displacement */
block|{
literal|0x09000000
block|,
literal|"callj"
block|,
name|I_BASE
block|,
name|CALLJ
block|,
literal|1
block|}
block|,
comment|/*default=='call'*/
block|{
literal|0x08000000
block|,
literal|"b"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x09000000
block|,
literal|"call"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x0a000000
block|,
literal|"ret"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x0b000000
block|,
literal|"bal"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x10000000
block|,
literal|"bno"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x10000000
block|,
literal|"bf"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bno */
block|{
literal|0x10000000
block|,
literal|"bru"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bno */
block|{
literal|0x11000000
block|,
literal|"bg"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x11000000
block|,
literal|"brg"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bg */
block|{
literal|0x12000000
block|,
literal|"be"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x12000000
block|,
literal|"bre"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as be */
block|{
literal|0x13000000
block|,
literal|"bge"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x13000000
block|,
literal|"brge"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bge */
block|{
literal|0x14000000
block|,
literal|"bl"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x14000000
block|,
literal|"brl"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bl */
block|{
literal|0x15000000
block|,
literal|"bne"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x15000000
block|,
literal|"brlg"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bne */
block|{
literal|0x16000000
block|,
literal|"ble"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x16000000
block|,
literal|"brle"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as ble */
block|{
literal|0x17000000
block|,
literal|"bo"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
block|{
literal|0x17000000
block|,
literal|"bt"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bo */
block|{
literal|0x17000000
block|,
literal|"bro"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|1
block|}
block|,
comment|/* same as bo */
block|{
literal|0x18000000
block|,
literal|"faultno"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x18000000
block|,
literal|"faultf"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
comment|/*same as faultno*/
block|{
literal|0x19000000
block|,
literal|"faultg"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1a000000
block|,
literal|"faulte"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1b000000
block|,
literal|"faultge"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1c000000
block|,
literal|"faultl"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1d000000
block|,
literal|"faultne"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1e000000
block|,
literal|"faultle"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1f000000
block|,
literal|"faulto"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
block|{
literal|0x1f000000
block|,
literal|"faultt"
block|,
name|I_BASE
block|,
name|CTRL
block|,
literal|0
block|}
block|,
comment|/* syn for faulto */
block|{
literal|0x01000000
block|,
literal|"syscall"
block|,
name|I_CASIM
block|,
name|CTRL
block|,
literal|0
block|}
block|,
comment|/* If a COBR (or COJ) has 3 operands, the last one is always a 	 * displacement and does not appear explicitly in the table. 	 */
block|{
literal|0x20000000
block|,
literal|"testno"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x21000000
block|,
literal|"testg"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x22000000
block|,
literal|"teste"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x23000000
block|,
literal|"testge"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x24000000
block|,
literal|"testl"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x25000000
block|,
literal|"testne"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x26000000
block|,
literal|"testle"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x27000000
block|,
literal|"testo"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
literal|0x30000000
block|,
literal|"bbc"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x31000000
block|,
literal|"cmpobg"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x32000000
block|,
literal|"cmpobe"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x33000000
block|,
literal|"cmpobge"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x34000000
block|,
literal|"cmpobl"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x35000000
block|,
literal|"cmpobne"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x36000000
block|,
literal|"cmpoble"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x37000000
block|,
literal|"bbs"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x38000000
block|,
literal|"cmpibno"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x39000000
block|,
literal|"cmpibg"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3a000000
block|,
literal|"cmpibe"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3b000000
block|,
literal|"cmpibge"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3c000000
block|,
literal|"cmpibl"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3d000000
block|,
literal|"cmpibne"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3e000000
block|,
literal|"cmpible"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3f000000
block|,
literal|"cmpibo"
block|,
name|I_BASE
block|,
name|COBR
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x31000000
block|,
literal|"cmpojg"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x32000000
block|,
literal|"cmpoje"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x33000000
block|,
literal|"cmpojge"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x34000000
block|,
literal|"cmpojl"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x35000000
block|,
literal|"cmpojne"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x36000000
block|,
literal|"cmpojle"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x38000000
block|,
literal|"cmpijno"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x39000000
block|,
literal|"cmpijg"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3a000000
block|,
literal|"cmpije"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3b000000
block|,
literal|"cmpijge"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3c000000
block|,
literal|"cmpijl"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3d000000
block|,
literal|"cmpijne"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3e000000
block|,
literal|"cmpijle"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x3f000000
block|,
literal|"cmpijo"
block|,
name|I_BASE
block|,
name|COJ
block|,
literal|3
block|,
name|RL
block|,
name|RS
block|}
block|,
block|{
literal|0x80000000
block|,
literal|"ldob"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0x82000000
block|,
literal|"stob"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|R
block|,
name|M
block|}
block|,
block|{
literal|0x84000000
block|,
literal|"bx"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|1
block|,
name|M
block|}
block|,
block|{
literal|0x85000000
block|,
literal|"balx"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0x86000000
block|,
literal|"callx"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|1
block|,
name|M
block|}
block|,
block|{
literal|0x88000000
block|,
literal|"ldos"
block|,
name|I_BASE
block|,
name|MEM2
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0x8a000000
block|,
literal|"stos"
block|,
name|I_BASE
block|,
name|MEM2
block|,
literal|2
block|,
name|R
block|,
name|M
block|}
block|,
block|{
literal|0x8c000000
block|,
literal|"lda"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0x90000000
block|,
literal|"ld"
block|,
name|I_BASE
block|,
name|MEM4
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0x92000000
block|,
literal|"st"
block|,
name|I_BASE
block|,
name|MEM4
block|,
literal|2
block|,
name|R
block|,
name|M
block|}
block|,
block|{
literal|0x98000000
block|,
literal|"ldl"
block|,
name|I_BASE
block|,
name|MEM8
block|,
literal|2
block|,
name|M
block|,
name|R2
block|}
block|,
block|{
literal|0x9a000000
block|,
literal|"stl"
block|,
name|I_BASE
block|,
name|MEM8
block|,
literal|2
block|,
name|R2
block|,
name|M
block|}
block|,
block|{
literal|0xa0000000
block|,
literal|"ldt"
block|,
name|I_BASE
block|,
name|MEM12
block|,
literal|2
block|,
name|M
block|,
name|R4
block|}
block|,
block|{
literal|0xa2000000
block|,
literal|"stt"
block|,
name|I_BASE
block|,
name|MEM12
block|,
literal|2
block|,
name|R4
block|,
name|M
block|}
block|,
block|{
literal|0xb0000000
block|,
literal|"ldq"
block|,
name|I_BASE
block|,
name|MEM16
block|,
literal|2
block|,
name|M
block|,
name|R4
block|}
block|,
block|{
literal|0xb2000000
block|,
literal|"stq"
block|,
name|I_BASE
block|,
name|MEM16
block|,
literal|2
block|,
name|R4
block|,
name|M
block|}
block|,
block|{
literal|0xc0000000
block|,
literal|"ldib"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0xc2000000
block|,
literal|"stib"
block|,
name|I_BASE
block|,
name|MEM1
block|,
literal|2
block|,
name|R
block|,
name|M
block|}
block|,
block|{
literal|0xc8000000
block|,
literal|"ldis"
block|,
name|I_BASE
block|,
name|MEM2
block|,
literal|2
block|,
name|M
block|,
name|R
block|}
block|,
block|{
literal|0xca000000
block|,
literal|"stis"
block|,
name|I_BASE
block|,
name|MEM2
block|,
literal|2
block|,
name|R
block|,
name|M
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x580
argument_list|)
block|,
literal|"notbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x581
argument_list|)
block|,
literal|"and"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x582
argument_list|)
block|,
literal|"andnot"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x583
argument_list|)
block|,
literal|"setbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x584
argument_list|)
block|,
literal|"notand"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x586
argument_list|)
block|,
literal|"xor"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x587
argument_list|)
block|,
literal|"or"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x588
argument_list|)
block|,
literal|"nor"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x589
argument_list|)
block|,
literal|"xnor"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x58a
argument_list|)
block|,
literal|"not"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x58b
argument_list|)
block|,
literal|"ornot"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x58c
argument_list|)
block|,
literal|"clrbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x58d
argument_list|)
block|,
literal|"notor"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x58e
argument_list|)
block|,
literal|"nand"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x58f
argument_list|)
block|,
literal|"alterbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x590
argument_list|)
block|,
literal|"addo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x591
argument_list|)
block|,
literal|"addi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x592
argument_list|)
block|,
literal|"subo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x593
argument_list|)
block|,
literal|"subi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x598
argument_list|)
block|,
literal|"shro"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x59a
argument_list|)
block|,
literal|"shrdi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x59b
argument_list|)
block|,
literal|"shri"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x59c
argument_list|)
block|,
literal|"shlo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x59d
argument_list|)
block|,
literal|"rotate"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x59e
argument_list|)
block|,
literal|"shli"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5a0
argument_list|)
block|,
literal|"cmpo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5a1
argument_list|)
block|,
literal|"cmpi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5a2
argument_list|)
block|,
literal|"concmpo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5a3
argument_list|)
block|,
literal|"concmpi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5a4
argument_list|)
block|,
literal|"cmpinco"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5a5
argument_list|)
block|,
literal|"cmpinci"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5a6
argument_list|)
block|,
literal|"cmpdeco"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5a7
argument_list|)
block|,
literal|"cmpdeci"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5ac
argument_list|)
block|,
literal|"scanbyte"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x5ae
argument_list|)
block|,
literal|"chkbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RSL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5b0
argument_list|)
block|,
literal|"addc"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x5b2
argument_list|)
block|,
literal|"subc"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x5cc
argument_list|)
block|,
literal|"mov"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x5dc
argument_list|)
block|,
literal|"movl"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RL2
block|,
name|R2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x5ec
argument_list|)
block|,
literal|"movt"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RL4
block|,
name|R4
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x5fc
argument_list|)
block|,
literal|"movq"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RL4
block|,
name|R4
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x610
argument_list|)
block|,
literal|"atmod"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RS
block|,
name|RSL
block|,
name|R
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x612
argument_list|)
block|,
literal|"atadd"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RS
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x640
argument_list|)
block|,
literal|"spanbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x641
argument_list|)
block|,
literal|"scanbit"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x645
argument_list|)
block|,
literal|"modac"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x650
argument_list|)
block|,
literal|"modify"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|R
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x651
argument_list|)
block|,
literal|"extract"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|R
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x654
argument_list|)
block|,
literal|"modtc"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x655
argument_list|)
block|,
literal|"modpc"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x660
argument_list|)
block|,
literal|"calls"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|1
block|,
name|RSL
block|}
block|,
block|{
name|R_0
argument_list|(
literal|0x66b
argument_list|)
block|,
literal|"mark"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|0
block|,		}
block|,
block|{
name|R_0
argument_list|(
literal|0x66c
argument_list|)
block|,
literal|"fmark"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|0
block|,		}
block|,
block|{
name|R_0
argument_list|(
literal|0x66d
argument_list|)
block|,
literal|"flushreg"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|0
block|,		}
block|,
block|{
name|R_0
argument_list|(
literal|0x66f
argument_list|)
block|,
literal|"syncf"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|0
block|,		}
block|,
block|{
name|R_3
argument_list|(
literal|0x670
argument_list|)
block|,
literal|"emul"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|R2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x671
argument_list|)
block|,
literal|"ediv"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RL2
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x672
argument_list|)
block|,
literal|"cvtadr"
block|,
name|I_CASIM
block|,
name|REG
block|,
literal|2
block|,
name|RL
block|,
name|R2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x701
argument_list|)
block|,
literal|"mulo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x708
argument_list|)
block|,
literal|"remo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x70b
argument_list|)
block|,
literal|"divo"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x741
argument_list|)
block|,
literal|"muli"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x748
argument_list|)
block|,
literal|"remi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x749
argument_list|)
block|,
literal|"modi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x74b
argument_list|)
block|,
literal|"divi"
block|,
name|I_BASE
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
comment|/* Floating-point instructions */
block|{
name|R_2D
argument_list|(
literal|0x674
argument_list|)
block|,
literal|"cvtir"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|RL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x675
argument_list|)
block|,
literal|"cvtilr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|RL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x676
argument_list|)
block|,
literal|"scalerl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|RL
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x677
argument_list|)
block|,
literal|"scaler"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|RL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x680
argument_list|)
block|,
literal|"atanr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x681
argument_list|)
block|,
literal|"logepr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x682
argument_list|)
block|,
literal|"logr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x683
argument_list|)
block|,
literal|"remr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x684
argument_list|)
block|,
literal|"cmpor"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|FL
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x685
argument_list|)
block|,
literal|"cmpr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|FL
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x688
argument_list|)
block|,
literal|"sqrtr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x689
argument_list|)
block|,
literal|"expr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x68a
argument_list|)
block|,
literal|"logbnr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x68b
argument_list|)
block|,
literal|"roundr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x68c
argument_list|)
block|,
literal|"sinr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x68d
argument_list|)
block|,
literal|"cosr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x68e
argument_list|)
block|,
literal|"tanr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x68f
argument_list|)
block|,
literal|"classr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|1
block|,
name|FL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x690
argument_list|)
block|,
literal|"atanrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x691
argument_list|)
block|,
literal|"logeprl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x692
argument_list|)
block|,
literal|"logrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x693
argument_list|)
block|,
literal|"remrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x694
argument_list|)
block|,
literal|"cmporl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|FL2
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x695
argument_list|)
block|,
literal|"cmprl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|FL2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x698
argument_list|)
block|,
literal|"sqrtrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x699
argument_list|)
block|,
literal|"exprl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x69a
argument_list|)
block|,
literal|"logbnrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x69b
argument_list|)
block|,
literal|"roundrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x69c
argument_list|)
block|,
literal|"sinrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x69d
argument_list|)
block|,
literal|"cosrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x69e
argument_list|)
block|,
literal|"tanrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x69f
argument_list|)
block|,
literal|"classrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|1
block|,
name|FL2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6c0
argument_list|)
block|,
literal|"cvtri"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|R
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6c1
argument_list|)
block|,
literal|"cvtril"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|R2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6c2
argument_list|)
block|,
literal|"cvtzri"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|R
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6c3
argument_list|)
block|,
literal|"cvtzril"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|R2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6c9
argument_list|)
block|,
literal|"movr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6d9
argument_list|)
block|,
literal|"movrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x6e1
argument_list|)
block|,
literal|"movre"
block|,
name|I_FP
block|,
name|REG
block|,
literal|2
block|,
name|FL4
block|,
name|F4
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x6e2
argument_list|)
block|,
literal|"cpysre"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL4
block|,
name|FL4
block|,
name|F4
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x6e3
argument_list|)
block|,
literal|"cpyrsre"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL4
block|,
name|FL4
block|,
name|F4
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x78b
argument_list|)
block|,
literal|"divr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x78c
argument_list|)
block|,
literal|"mulr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x78d
argument_list|)
block|,
literal|"subr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x78f
argument_list|)
block|,
literal|"addr"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL
block|,
name|FL
block|,
name|F
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x79b
argument_list|)
block|,
literal|"divrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x79c
argument_list|)
block|,
literal|"mulrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x79d
argument_list|)
block|,
literal|"subrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x79f
argument_list|)
block|,
literal|"addrl"
block|,
name|I_FP
block|,
name|REG
block|,
literal|3
block|,
name|FL2
block|,
name|FL2
block|,
name|F2
block|}
block|,
comment|/* These are the floating point branch instructions.  Each actually 	 * generates 2 branch instructions:  the first a CTRL instruction with 	 * the indicated opcode, and the second a 'bno'. 	 */
block|{
literal|0x12000000
block|,
literal|"brue"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
block|{
literal|0x11000000
block|,
literal|"brug"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
block|{
literal|0x13000000
block|,
literal|"bruge"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
block|{
literal|0x14000000
block|,
literal|"brul"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
block|{
literal|0x16000000
block|,
literal|"brule"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
block|{
literal|0x15000000
block|,
literal|"brulg"
block|,
name|I_FP
block|,
name|FBRA
block|,
literal|1
block|}
block|,
comment|/* Decimal instructions */
block|{
name|R_3
argument_list|(
literal|0x642
argument_list|)
block|,
literal|"daddc"
block|,
name|I_DEC
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x643
argument_list|)
block|,
literal|"dsubc"
block|,
name|I_DEC
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x644
argument_list|)
block|,
literal|"dmovt"
block|,
name|I_DEC
block|,
name|REG
block|,
literal|2
block|,
name|RSL
block|,
name|RS
block|}
block|,
comment|/* KX extensions */
block|{
name|R_2
argument_list|(
literal|0x600
argument_list|)
block|,
literal|"synmov"
block|,
name|I_KX
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x601
argument_list|)
block|,
literal|"synmovl"
block|,
name|I_KX
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_2
argument_list|(
literal|0x602
argument_list|)
block|,
literal|"synmovq"
block|,
name|I_KX
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x615
argument_list|)
block|,
literal|"synld"
block|,
name|I_KX
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
comment|/* MC extensions */
block|{
name|R_3
argument_list|(
literal|0x603
argument_list|)
block|,
literal|"cmpstr"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|3
block|,
name|R
block|,
name|R
block|,
name|RL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x604
argument_list|)
block|,
literal|"movqstr"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|3
block|,
name|R
block|,
name|R
block|,
name|RL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x605
argument_list|)
block|,
literal|"movstr"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|3
block|,
name|R
block|,
name|R
block|,
name|RL
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x613
argument_list|)
block|,
literal|"inspacc"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x614
argument_list|)
block|,
literal|"ldphy"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x617
argument_list|)
block|,
literal|"fill"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|3
block|,
name|R
block|,
name|RL
block|,
name|RL
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x646
argument_list|)
block|,
literal|"condrec"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_2D
argument_list|(
literal|0x656
argument_list|)
block|,
literal|"receive"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|2
block|,
name|R
block|,
name|R
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x662
argument_list|)
block|,
literal|"send"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|3
block|,
name|R
block|,
name|RL
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x663
argument_list|)
block|,
literal|"sendserv"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x664
argument_list|)
block|,
literal|"resumprcs"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x665
argument_list|)
block|,
literal|"schedprcs"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_0
argument_list|(
literal|0x666
argument_list|)
block|,
literal|"saveprcs"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|0
block|,		}
block|,
block|{
name|R_1
argument_list|(
literal|0x668
argument_list|)
block|,
literal|"condwait"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x669
argument_list|)
block|,
literal|"wait"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_1
argument_list|(
literal|0x66a
argument_list|)
block|,
literal|"signal"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R
block|}
block|,
block|{
name|R_1D
argument_list|(
literal|0x673
argument_list|)
block|,
literal|"ldtime"
block|,
name|I_MIL
block|,
name|REG
block|,
literal|1
block|,
name|R2
block|}
block|,
comment|/* CX extensions */
block|{
name|R_3
argument_list|(
literal|0x5d8
argument_list|)
block|,
literal|"eshro"
block|,
name|I_CX
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RS
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x630
argument_list|)
block|,
literal|"sdma"
block|,
name|I_CX
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RL
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x631
argument_list|)
block|,
literal|"udma"
block|,
name|I_CX
block|,
name|REG
block|,
literal|0
block|}
block|,
block|{
name|R_3
argument_list|(
literal|0x659
argument_list|)
block|,
literal|"sysctl"
block|,
name|I_CX
block|,
name|REG
block|,
literal|3
block|,
name|RSL
block|,
name|RSL
block|,
name|RL
block|}
block|,
comment|/* END OF TABLE */
block|{
literal|0
block|,
name|NULL
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* end of i960-opcode.h */
end_comment

end_unit

