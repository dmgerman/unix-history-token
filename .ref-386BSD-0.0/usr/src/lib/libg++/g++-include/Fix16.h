begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Kurt Baudendistel (gt-eedsp!baud@gatech.edu)     adapted for libg++ by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_Fix16_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_Fix16_h
value|1
end_define

begin_include
include|#
directive|include
file|<stream.h>
end_include

begin_include
include|#
directive|include
file|<std.h>
end_include

begin_comment
comment|// constant definitions
end_comment

begin_define
define|#
directive|define
name|Fix16_fs
value|((double)((unsigned)(1<< 15)))
end_define

begin_define
define|#
directive|define
name|Fix16_msb
value|(1<< 15)
end_define

begin_define
define|#
directive|define
name|Fix16_m_max
value|((1<< 15) - 1)
end_define

begin_define
define|#
directive|define
name|Fix16_m_min
value|((short)(1<< 15))
end_define

begin_define
define|#
directive|define
name|Fix16_mult
value|Fix16_fs
end_define

begin_define
define|#
directive|define
name|Fix16_div
value|(1./Fix16_fs)
end_define

begin_define
define|#
directive|define
name|Fix16_max
value|(1. - .5/Fix16_fs)
end_define

begin_define
define|#
directive|define
name|Fix16_min
value|(-1.)
end_define

begin_define
define|#
directive|define
name|Fix32_fs
value|((double)((unsigned long)(1<< 31)))
end_define

begin_define
define|#
directive|define
name|Fix32_msb
value|((unsigned long)(1<< 31))
end_define

begin_define
define|#
directive|define
name|Fix32_m_max
value|((1<< 31) - 1)
end_define

begin_define
define|#
directive|define
name|Fix32_m_min
value|((long)(1<< 31))
end_define

begin_define
define|#
directive|define
name|Fix32_mult
value|Fix32_fs
end_define

begin_define
define|#
directive|define
name|Fix32_div
value|(1./Fix32_fs)
end_define

begin_define
define|#
directive|define
name|Fix32_max
value|(1. - .5/Fix32_fs)
end_define

begin_define
define|#
directive|define
name|Fix32_min
value|(-1.)
end_define

begin_comment
comment|//
end_comment

begin_comment
comment|// Fix16    class: 16-bit Fixed point data type
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//	consists of a 16-bit mantissa (sign bit& 15 data bits).
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
name|class
name|Fix16
block|{
name|friend
name|class
name|Fix32
decl_stmt|;
name|short
name|m
decl_stmt|;
name|short
name|round
parameter_list|(
name|double
name|d
parameter_list|)
function_decl|;
name|short
name|assign
parameter_list|(
name|double
name|d
parameter_list|)
function_decl|;
name|Fix16
argument_list|(
argument|short i
argument_list|)
empty_stmt|;
name|Fix16
argument_list|(
argument|int i
argument_list|)
empty_stmt|;
name|operator
name|double
parameter_list|()
function_decl|;
name|public
label|:
name|Fix16
argument_list|()
expr_stmt|;
name|Fix16
argument_list|(
name|Fix16
operator|&
name|f
argument_list|)
expr_stmt|;
name|Fix16
argument_list|(
argument|double d
argument_list|)
empty_stmt|;
name|Fix16
argument_list|(
name|Fix32
operator|&
name|f
argument_list|)
expr_stmt|;
operator|~
name|Fix16
argument_list|()
expr_stmt|;
name|Fix16
modifier|&
name|operator
init|=
operator|(
name|Fix16
operator|&
name|f
operator|)
decl_stmt|;
name|Fix16
modifier|&
name|operator
init|=
operator|(
name|double
name|d
operator|)
decl_stmt|;
name|Fix16
modifier|&
name|operator
init|=
operator|(
name|Fix32
operator|&
name|f
operator|)
decl_stmt|;
name|friend
name|short
modifier|&
name|mantissa
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|)
function_decl|;
name|friend
name|double
name|value
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|)
function_decl|;
name|Fix16
name|operator
operator|+
operator|(
operator|)
expr_stmt|;
name|Fix16
name|operator
operator|-
operator|(
operator|)
expr_stmt|;
name|friend
name|Fix16
name|operator
operator|+
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix16
name|operator
operator|-
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|,
name|Fix16
modifier|&
name|g
parameter_list|)
function_decl|;
name|friend
name|Fix16
name|operator
operator|/
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix16
name|operator
operator|<<
operator|(
name|Fix16
operator|&
name|f
operator|,
name|int
name|b
operator|)
expr_stmt|;
name|friend
name|Fix16
name|operator
operator|>>
operator|(
name|Fix16
operator|&
name|f
operator|,
name|int
name|b
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|+=
operator|(
name|Fix16
operator|&
name|f
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|-=
operator|(
name|Fix16
operator|&
name|f
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|*=
operator|(
name|Fix16
operator|&
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|/=
operator|(
name|Fix16
operator|&
name|f
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|<<=
operator|(
name|int
name|b
operator|)
expr_stmt|;
name|Fix16
operator|&
name|operator
operator|>>=
operator|(
name|int
name|b
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Fix16
operator|&
name|f
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
name|Fix16
operator|&
name|f
operator|)
expr_stmt|;
name|void
name|overflow
parameter_list|(
name|short
modifier|&
parameter_list|)
function_decl|;
name|void
name|range_error
parameter_list|(
name|short
modifier|&
parameter_list|)
function_decl|;
name|friend
name|Fix16
name|operator
modifier|*
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|,
name|int
name|g
parameter_list|)
function_decl|;
name|friend
name|Fix16
name|operator
modifier|*
parameter_list|(
name|int
name|g
parameter_list|,
name|Fix16
modifier|&
name|f
parameter_list|)
function_decl|;
name|Fix16
operator|&
name|operator
operator|*=
operator|(
name|int
name|g
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|//
end_comment

begin_comment
comment|// Fix32 class: 32-bit Fixed point data type
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//	consists of a 32-bit mantissa (sign bit& 31 data bits).
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
name|class
name|Fix32
block|{
name|friend
name|class
name|Fix16
decl_stmt|;
name|long
name|m
decl_stmt|;
name|long
name|round
parameter_list|(
name|double
name|d
parameter_list|)
function_decl|;
name|long
name|assign
parameter_list|(
name|double
name|d
parameter_list|)
function_decl|;
name|Fix32
argument_list|(
argument|long i
argument_list|)
empty_stmt|;
name|operator
name|double
parameter_list|()
function_decl|;
name|public
label|:
name|Fix32
argument_list|()
expr_stmt|;
name|Fix32
argument_list|(
name|Fix32
operator|&
name|f
argument_list|)
expr_stmt|;
name|Fix32
argument_list|(
name|Fix16
operator|&
name|f
argument_list|)
expr_stmt|;
name|Fix32
argument_list|(
argument|double d
argument_list|)
empty_stmt|;
operator|~
name|Fix32
argument_list|()
expr_stmt|;
name|Fix32
modifier|&
name|operator
init|=
operator|(
name|Fix32
operator|&
name|f
operator|)
decl_stmt|;
name|Fix32
modifier|&
name|operator
init|=
operator|(
name|Fix16
operator|&
name|f
operator|)
decl_stmt|;
name|Fix32
modifier|&
name|operator
init|=
operator|(
name|double
name|d
operator|)
decl_stmt|;
name|friend
name|long
modifier|&
name|mantissa
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|)
function_decl|;
name|friend
name|double
name|value
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|)
function_decl|;
name|Fix32
name|operator
operator|+
operator|(
operator|)
expr_stmt|;
name|Fix32
name|operator
operator|-
operator|(
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
operator|+
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
operator|-
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|,
name|Fix32
modifier|&
name|g
parameter_list|)
function_decl|;
name|friend
name|Fix32
name|operator
operator|/
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
operator|<<
operator|(
name|Fix32
operator|&
name|f
operator|,
name|int
name|b
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
operator|>>
operator|(
name|Fix32
operator|&
name|f
operator|,
name|int
name|b
operator|)
expr_stmt|;
name|friend
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|,
name|Fix16
modifier|&
name|g
parameter_list|)
function_decl|;
name|Fix32
operator|&
name|operator
operator|+=
operator|(
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|Fix32
operator|&
name|operator
operator|-=
operator|(
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|Fix32
operator|&
name|operator
operator|*=
operator|(
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|Fix32
operator|&
name|operator
operator|/=
operator|(
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|Fix32
operator|&
name|operator
operator|<<=
operator|(
name|int
name|b
operator|)
expr_stmt|;
name|Fix32
operator|&
name|operator
operator|>>=
operator|(
name|int
name|b
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|==
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|!=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|>
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|int
name|operator
operator|<
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
expr_stmt|;
name|friend
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|friend
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
name|Fix32
operator|&
name|f
operator|)
expr_stmt|;
name|void
name|overflow
parameter_list|(
name|long
modifier|&
name|i
parameter_list|)
function_decl|;
name|void
name|range_error
parameter_list|(
name|long
modifier|&
name|i
parameter_list|)
function_decl|;
name|friend
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|,
name|int
name|g
parameter_list|)
function_decl|;
name|friend
name|Fix32
name|operator
modifier|*
parameter_list|(
name|int
name|g
parameter_list|,
name|Fix32
modifier|&
name|f
parameter_list|)
function_decl|;
name|Fix32
operator|&
name|operator
operator|*=
operator|(
name|int
name|g
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// active error handler declarations
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|Fix16_peh
function_decl|)
parameter_list|(
name|short
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|Fix32_peh
function_decl|)
parameter_list|(
name|long
modifier|&
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|Fix16_peh
name|Fix16_overflow_handler
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|Fix32_peh
name|Fix32_overflow_handler
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|Fix16_peh
name|Fix16_range_error_handler
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|Fix32_peh
name|Fix32_range_error_handler
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|SHORT_NAMES
argument_list|)
operator|||
name|defined
argument_list|(
name|VMS
argument_list|)
end_if

begin_define
define|#
directive|define
name|set_overflow_handler
value|sohndl
end_define

begin_define
define|#
directive|define
name|set_range_error_handler
value|srnghdl
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// error handler declarations
end_comment

begin_function_decl
specifier|extern
name|Fix16_peh
name|set_Fix16_overflow_handler
parameter_list|(
name|Fix16_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Fix32_peh
name|set_Fix32_overflow_handler
parameter_list|(
name|Fix32_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_overflow_handler
parameter_list|(
name|Fix16_peh
parameter_list|,
name|Fix32_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Fix16_peh
name|set_Fix16_range_error_handler
parameter_list|(
name|Fix16_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Fix32_peh
name|set_Fix32_range_error_handler
parameter_list|(
name|Fix32_peh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_range_error_handler
parameter_list|(
name|Fix16_peh
parameter_list|,
name|Fix32_peh
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|void
name|Fix16_ignore
argument_list|(
name|short
operator|&
argument_list|)
decl_stmt|,
name|Fix16_overflow_saturate
argument_list|(
name|short
operator|&
argument_list|)
decl_stmt|,
name|Fix16_overflow_warning_saturate
argument_list|(
name|short
operator|&
argument_list|)
decl_stmt|,
name|Fix16_warning
argument_list|(
name|short
operator|&
argument_list|)
decl_stmt|,
name|Fix16_abort
argument_list|(
name|short
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|Fix32_ignore
argument_list|(
name|long
operator|&
argument_list|)
decl_stmt|,
name|Fix32_overflow_saturate
argument_list|(
name|long
operator|&
argument_list|)
decl_stmt|,
name|Fix32_overflow_warning_saturate
argument_list|(
name|long
operator|&
argument_list|)
decl_stmt|,
name|Fix32_warning
argument_list|(
name|long
operator|&
argument_list|)
decl_stmt|,
name|Fix32_abort
argument_list|(
name|long
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|Fix16
operator|::
operator|~
name|Fix16
argument_list|()
block|{}
specifier|inline
name|short
name|Fix16
operator|::
name|round
argument_list|(
argument|double d
argument_list|)
block|{
return|return
name|short
argument_list|(
operator|(
name|d
operator|>=
literal|0
operator|)
operator|?
name|d
operator|+
literal|0.5
operator|:
name|d
operator|-
literal|0.5
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|(
argument|short i
argument_list|)
block|{
name|m
operator|=
name|i
block|;  }
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|(
argument|int i
argument_list|)
block|{
name|m
operator|=
name|i
block|;  }
specifier|inline
name|Fix16
operator|::
name|operator
name|double
argument_list|()
block|{
return|return
name|Fix16_div
operator|*
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|()
block|{
name|m
operator|=
literal|0
block|;  }
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|(
argument|Fix16&  f
argument_list|)
block|{
name|m
operator|=
name|f
operator|.
name|m
block|;  }
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|(
argument|double d
argument_list|)
block|{
name|m
operator|=
name|assign
argument_list|(
name|d
argument_list|)
block|; }
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
name|m
operator|=
name|f
operator|.
name|m
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|=
operator|(
name|double
name|d
operator|)
block|{
name|m
operator|=
name|assign
argument_list|(
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|::
name|Fix32
argument_list|()
block|{
name|m
operator|=
literal|0
block|; }
specifier|inline
name|Fix32
operator|::
name|Fix32
argument_list|(
argument|long i
argument_list|)
block|{
name|m
operator|=
name|i
block|; }
specifier|inline
name|Fix32
operator|::
name|operator
name|double
argument_list|()
block|{
return|return
name|Fix32_div
operator|*
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|::
name|Fix32
argument_list|(
argument|Fix32& f
argument_list|)
block|{
name|m
operator|=
name|f
operator|.
name|m
block|; }
specifier|inline
name|Fix32
operator|::
name|Fix32
argument_list|(
argument|Fix16&  f
argument_list|)
block|{
name|m
operator|=
name|long
argument_list|(
name|f
operator|.
name|m
argument_list|)
operator|<<
literal|16
block|; }
specifier|inline
name|Fix32
operator|::
name|Fix32
argument_list|(
argument|double d
argument_list|)
block|{
name|m
operator|=
name|assign
argument_list|(
name|d
argument_list|)
block|; }
specifier|inline
name|Fix16
operator|::
name|Fix16
argument_list|(
argument|Fix32& f
argument_list|)
block|{
name|m
operator|=
name|f
operator|.
name|m
operator|>>
literal|16
block|;  }
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
name|m
operator|=
name|f
operator|.
name|m
operator|>>
literal|16
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
name|m
operator|=
name|f
operator|.
name|m
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
name|m
operator|=
name|long
argument_list|(
name|f
operator|.
name|m
argument_list|)
operator|<<
literal|16
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|=
operator|(
name|double
name|d
operator|)
block|{
name|m
operator|=
name|assign
argument_list|(
name|d
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|short
modifier|&
name|mantissa
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|m
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|value
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|)
block|{
return|return
name|double
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix16
name|Fix16
operator|::
name|operator
operator|+
operator|(
operator|)
block|{
return|return
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
name|Fix16
operator|::
name|operator
operator|-
operator|(
operator|)
block|{
return|return
operator|-
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
name|operator
operator|+
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
name|short
name|sum
operator|=
name|f
operator|.
name|m
operator|+
name|g
operator|.
name|m
block|;
if|if
condition|(
operator|(
name|f
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
operator|(
name|g
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
name|Fix16_msb
condition|)
name|f
operator|.
name|overflow
argument_list|(
name|sum
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|sum
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix16
name|operator
operator|-
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
name|short
name|sum
operator|=
name|f
operator|.
name|m
operator|-
name|g
operator|.
name|m
block|;
if|if
condition|(
operator|(
name|f
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
operator|(
operator|-
name|g
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
name|Fix16_msb
condition|)
name|f
operator|.
name|overflow
argument_list|(
name|sum
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|sum
return|;
end_return

begin_function
unit|}  inline
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|,
name|Fix16
modifier|&
name|g
parameter_list|)
block|{
return|return
name|Fix32
argument_list|(
name|long
argument_list|(
name|long
argument_list|(
name|f
operator|.
name|m
argument_list|)
operator|*
name|long
argument_list|(
name|g
operator|.
name|m
argument_list|)
operator|<<
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix16
name|operator
operator|<<
operator|(
name|Fix16
operator|&
name|a
operator|,
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|m
operator|<<
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
name|operator
operator|>>
operator|(
name|Fix16
operator|&
name|a
operator|,
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|m
operator|>>
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|+=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|-=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|*=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|/=
operator|(
name|Fix16
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|/
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|<<=
operator|(
name|int
name|b
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|<<
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|>>=
operator|(
name|int
name|b
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|>>
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|==
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|!=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|>=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|<=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|>
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
name|Fix16
operator|&
name|f
operator|,
name|Fix16
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|<
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Fix16
operator|&
name|f
operator|)
block|{
name|double
name|d
block|;
name|s
operator|>>
name|d
block|;
name|f
operator|=
name|d
block|;
return|return
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
name|Fix16
operator|&
name|f
operator|)
block|{
return|return
name|s
operator|<<
name|double
argument_list|(
name|f
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Fix16
name|operator
modifier|*
parameter_list|(
name|Fix16
modifier|&
name|f
parameter_list|,
name|int
name|g
parameter_list|)
block|{
return|return
name|Fix16
argument_list|(
name|short
argument_list|(
name|f
operator|.
name|m
operator|*
name|g
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix16
name|operator
modifier|*
parameter_list|(
name|int
name|g
parameter_list|,
name|Fix16
modifier|&
name|f
parameter_list|)
block|{
return|return
name|f
operator|*
name|g
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix16
operator|&
name|Fix16
operator|::
name|operator
operator|*=
operator|(
name|int
name|g
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|g
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|::
operator|~
name|Fix32
argument_list|()
block|{}
specifier|inline
name|long
name|Fix32
operator|::
name|round
argument_list|(
argument|double d
argument_list|)
block|{
return|return
name|long
argument_list|(
operator|(
name|d
operator|>=
literal|0
operator|)
operator|?
name|d
operator|+
literal|0.5
operator|:
name|d
operator|-
literal|0.5
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|long
modifier|&
name|mantissa
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|)
block|{
return|return
name|f
operator|.
name|m
return|;
block|}
end_function

begin_function
specifier|inline
name|double
name|value
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|)
block|{
return|return
name|double
argument_list|(
name|f
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix32
name|Fix32
operator|::
name|operator
operator|+
operator|(
operator|)
block|{
return|return
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
name|Fix32
operator|::
name|operator
operator|-
operator|(
operator|)
block|{
return|return
operator|-
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
name|operator
operator|+
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
name|long
name|sum
operator|=
name|f
operator|.
name|m
operator|+
name|g
operator|.
name|m
block|;
if|if
condition|(
operator|(
name|f
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
operator|(
name|g
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
name|Fix32_msb
condition|)
name|f
operator|.
name|overflow
argument_list|(
name|sum
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|sum
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix32
name|operator
operator|-
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
name|long
name|sum
operator|=
name|f
operator|.
name|m
operator|-
name|g
operator|.
name|m
block|;
if|if
condition|(
operator|(
name|f
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
operator|(
operator|-
name|g
operator|.
name|m
operator|^
name|sum
operator|)
operator|&
name|Fix32_msb
condition|)
name|f
operator|.
name|overflow
argument_list|(
name|sum
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|sum
return|;
end_return

begin_expr_stmt
unit|}  inline
name|Fix32
name|operator
operator|<<
operator|(
name|Fix32
operator|&
name|a
operator|,
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|m
operator|<<
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
name|operator
operator|>>
operator|(
name|Fix32
operator|&
name|a
operator|,
name|int
name|b
operator|)
block|{
return|return
name|a
operator|.
name|m
operator|>>
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|+=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|+
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|-=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|-
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|*=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|/=
operator|(
name|Fix32
operator|&
name|f
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|/
name|f
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|<<=
operator|(
name|int
name|b
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|<<
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|>>=
operator|(
name|int
name|b
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|>>
name|b
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|==
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|==
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|!=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|!=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|>=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<=
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|<=
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|>
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|>
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|operator
operator|<
operator|(
name|Fix32
operator|&
name|f
operator|,
name|Fix32
operator|&
name|g
operator|)
block|{
return|return
name|f
operator|.
name|m
operator|<
name|g
operator|.
name|m
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
name|s
operator|,
name|Fix32
operator|&
name|f
operator|)
block|{
name|double
name|d
block|;
name|s
operator|>>
name|d
block|;
name|f
operator|=
name|d
block|;
return|return
name|s
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
name|s
operator|,
name|Fix32
operator|&
name|f
operator|)
block|{
return|return
name|s
operator|<<
name|double
argument_list|(
name|f
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|Fix32
name|operator
modifier|*
parameter_list|(
name|Fix32
modifier|&
name|f
parameter_list|,
name|int
name|g
parameter_list|)
block|{
return|return
name|Fix32
argument_list|(
name|long
argument_list|(
name|f
operator|.
name|m
operator|*
name|g
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|inline
name|Fix32
name|operator
modifier|*
parameter_list|(
name|int
name|g
parameter_list|,
name|Fix32
modifier|&
name|f
parameter_list|)
block|{
return|return
name|f
operator|*
name|g
return|;
block|}
end_function

begin_expr_stmt
specifier|inline
name|Fix32
operator|&
name|Fix32
operator|::
name|operator
operator|*=
operator|(
name|int
name|g
operator|)
block|{
return|return
operator|*
name|this
operator|=
operator|*
name|this
operator|*
name|g
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

