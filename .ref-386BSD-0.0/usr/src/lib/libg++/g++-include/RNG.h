begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Dirk Grunwald (grunwald@cs.uiuc.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_RNG_h
end_ifndef

begin_define
define|#
directive|define
name|_RNG_h
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_union
union|union
name|PrivateRNGSingleType
block|{
comment|// used to access floats as unsigneds
name|float
name|s
decl_stmt|;
name|unsigned
name|long
name|u
decl_stmt|;
block|}
union|;
end_union

begin_union
union|union
name|PrivateRNGDoubleType
block|{
comment|// used to access doubles as unsigneds
name|double
name|d
decl_stmt|;
name|unsigned
name|long
name|u
index|[
literal|2
index|]
decl_stmt|;
block|}
union|;
end_union

begin_comment
comment|//
end_comment

begin_comment
comment|// Base class for Random Number Generators. See ACG and MLCG for instances.
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
name|class
name|RNG
block|{
specifier|static
name|PrivateRNGSingleType
name|singleMantissa
decl_stmt|;
comment|// mantissa bit vector
specifier|static
name|PrivateRNGDoubleType
name|doubleMantissa
decl_stmt|;
comment|// mantissa bit vector
name|public
label|:
name|RNG
argument_list|()
expr_stmt|;
comment|//
comment|// Return a long-words word of random bits
comment|//
name|virtual
name|unsigned
name|long
name|asLong
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|reset
parameter_list|()
init|=
literal|0
function_decl|;
comment|//
comment|// Return random bits converted to either a float or a double
comment|//
name|float
name|asFloat
parameter_list|()
function_decl|;
name|double
name|asDouble
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|float
name|RNG
operator|::
name|asFloat
argument_list|()
block|{
name|PrivateRNGSingleType
name|result
block|;
name|result
operator|.
name|s
operator|=
literal|1.0
block|;
name|result
operator|.
name|u
operator||=
operator|(
name|asLong
argument_list|()
operator|&
name|singleMantissa
operator|.
name|u
operator|)
block|;
name|result
operator|.
name|s
operator|-=
literal|1.0
block|;
name|assert
argument_list|(
name|result
operator|.
name|s
operator|<
literal|1.0
operator|&&
name|result
operator|.
name|s
operator|>=
literal|0
argument_list|)
block|;
return|return
operator|(
name|result
operator|.
name|s
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
name|RNG
operator|::
name|asDouble
argument_list|()
block|{
name|PrivateRNGDoubleType
name|result
block|;
name|result
operator|.
name|d
operator|=
literal|1.0
block|;
name|result
operator|.
name|u
index|[
literal|0
index|]
operator||=
operator|(
name|asLong
argument_list|()
operator|&
name|doubleMantissa
operator|.
name|u
index|[
literal|0
index|]
operator|)
block|;
name|result
operator|.
name|u
index|[
literal|1
index|]
operator||=
operator|(
name|asLong
argument_list|()
operator|&
name|doubleMantissa
operator|.
name|u
index|[
literal|1
index|]
operator|)
block|;
name|result
operator|.
name|d
operator|-=
literal|1.0
block|;
name|assert
argument_list|(
name|result
operator|.
name|d
operator|<
literal|1.0
operator|&&
name|result
operator|.
name|d
operator|>=
literal|0
argument_list|)
block|;
return|return
operator|(
name|result
operator|.
name|d
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

