begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// This may look like C code, but it is really -*- C++ -*-
end_comment

begin_comment
comment|/*  Copyright (C) 1988 Free Software Foundation     written by Doug Lea (dl@rocky.oswego.edu)  This file is part of GNU CC.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  No author or distributor accepts responsibility to anyone for the consequences of using it or for whether it serves any particular purpose or works at all, unless he says so in writing.  Refer to the GNU CC General Public License for full details.  Everyone is granted permission to copy, modify and redistribute GNU CC, but only under the conditions described in the GNU CC General Public License.   A copy of this license is supposed to have been given to you along with GNU CC so you can know your rights and responsibilities.  It should be in a file named COPYING.  Among other things, the copyright notice and this notice must be preserved on all copies.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_File_h
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_File_h
value|1
end_define

begin_include
include|#
directive|include
file|<builtin.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<Fmodes.h>
end_include

begin_decl_stmt
name|class
name|Filebuf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|File
block|{
name|friend
name|class
name|Filebuf
decl_stmt|;
name|protected
label|:
name|FILE
modifier|*
name|fp
decl_stmt|;
comment|// _iobuf file pointer
name|char
modifier|*
name|nm
decl_stmt|;
comment|// file name (dynamically allocated)
name|char
name|rw
decl_stmt|;
comment|//  1 = read; 2 = write; 3 = readwrite
comment|//  bit 2 (4) means read/write into string
name|state_value
name|state
decl_stmt|;
comment|// _good/_eof/_fail/_bad
name|long
name|stat
decl_stmt|;
comment|// last read/write/... return value
name|void
name|initialize
parameter_list|()
function_decl|;
name|void
name|reinitialize
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|char
modifier|*
name|readline
parameter_list|(
name|int
name|chunk_number
parameter_list|,
name|char
name|terminator
parameter_list|)
function_decl|;
name|public
label|:
name|File
argument_list|()
expr_stmt|;
name|File
argument_list|(
argument|const char* filename
argument_list|,
argument|io_mode m
argument_list|,
argument|access_mode a
argument_list|)
empty_stmt|;
name|File
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
specifier|const
name|char
operator|*
name|m
argument_list|)
expr_stmt|;
name|File
argument_list|(
argument|int filedesc
argument_list|,
argument|io_mode m
argument_list|)
empty_stmt|;
name|File
argument_list|(
name|FILE
operator|*
name|fileptr
argument_list|)
expr_stmt|;
name|File
argument_list|(
argument|int sz
argument_list|,
argument|char* buf
argument_list|,
argument|io_mode m
argument_list|)
empty_stmt|;
operator|~
name|File
argument_list|()
expr_stmt|;
comment|// binding, rebinding, unbinding to physical files
name|File
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
name|io_mode
name|m
parameter_list|,
name|access_mode
name|a
parameter_list|)
function_decl|;
name|File
modifier|&
name|open
parameter_list|(
specifier|const
name|char
modifier|*
name|filename
parameter_list|,
specifier|const
name|char
modifier|*
name|m
parameter_list|)
function_decl|;
name|File
modifier|&
name|open
parameter_list|(
name|int
name|filedesc
parameter_list|,
name|io_mode
name|m
parameter_list|)
function_decl|;
name|File
modifier|&
name|open
parameter_list|(
name|FILE
modifier|*
name|fileptr
parameter_list|)
function_decl|;
name|File
modifier|&
name|close
parameter_list|()
function_decl|;
name|File
modifier|&
name|remove
parameter_list|()
function_decl|;
comment|// class variable access
name|int
name|filedesc
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|name
parameter_list|()
function_decl|;
name|void
name|setname
parameter_list|(
specifier|const
name|char
modifier|*
name|newname
parameter_list|)
function_decl|;
name|int
name|iocount
parameter_list|()
function_decl|;
name|int
name|rdstate
parameter_list|()
function_decl|;
name|int
name|eof
parameter_list|()
function_decl|;
name|int
name|fail
parameter_list|()
function_decl|;
name|int
name|bad
parameter_list|()
function_decl|;
name|int
name|good
parameter_list|()
function_decl|;
comment|// other status queries
name|int
name|readable
parameter_list|()
function_decl|;
name|int
name|writable
parameter_list|()
function_decl|;
name|int
name|is_open
parameter_list|()
function_decl|;
name|operator
name|void
modifier|*
parameter_list|()
function_decl|;
comment|// error handling
name|void
name|error
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|(
name|state_value
name|f
init|=
name|_good
parameter_list|)
function_decl|;
comment|// poorly named
name|void
name|set
parameter_list|(
name|state_value
name|f
parameter_list|)
function_decl|;
comment|// set corresponding but
name|void
name|unset
parameter_list|(
name|state_value
name|f
parameter_list|)
function_decl|;
comment|// clear corresponding bit
name|File
modifier|&
name|failif
parameter_list|(
name|int
name|cond
parameter_list|)
function_decl|;
name|void
name|check_state
parameter_list|()
function_decl|;
comment|// character IO
name|File
modifier|&
name|get
parameter_list|(
name|char
modifier|&
name|c
parameter_list|)
function_decl|;
name|File
modifier|&
name|put
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|File
modifier|&
name|unget
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
name|File
modifier|&
name|putback
parameter_list|(
name|char
name|c
parameter_list|)
function_decl|;
comment|// a synonym for unget
comment|// char* IO
name|File
modifier|&
name|put
parameter_list|(
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|File
modifier|&
name|get
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|int
name|n
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
name|File
modifier|&
name|getline
parameter_list|(
name|char
modifier|*
name|s
parameter_list|,
name|int
name|n
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
name|File
modifier|&
name|gets
parameter_list|(
name|char
modifier|*
modifier|*
name|s
parameter_list|,
name|char
name|terminator
init|=
literal|'\n'
parameter_list|)
function_decl|;
comment|// binary IO
name|File
modifier|&
name|read
parameter_list|(
name|void
modifier|*
name|x
parameter_list|,
name|int
name|sz
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|File
modifier|&
name|write
parameter_list|(
name|void
modifier|*
name|x
parameter_list|,
name|int
name|sz
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
comment|// formatted IO
name|File
modifier|&
name|form
parameter_list|(
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
name|File
modifier|&
name|scan
parameter_list|(
specifier|const
name|char
modifier|*
modifier|...
parameter_list|)
function_decl|;
comment|// buffer IO
name|File
modifier|&
name|flush
parameter_list|()
function_decl|;
comment|// position control
name|File
modifier|&
name|seek
parameter_list|(
name|long
name|pos
parameter_list|,
name|int
name|seek_mode
init|=
literal|0
parameter_list|)
function_decl|;
comment|// default seek mode=absolute
name|long
name|tell
parameter_list|()
function_decl|;
comment|// buffer control
name|File
modifier|&
name|setbuf
parameter_list|(
name|int
name|buffer_kind
parameter_list|)
function_decl|;
comment|// legal vals: _IONBF, _IOFBF, _IOLBF
name|File
modifier|&
name|setbuf
parameter_list|(
name|int
name|size
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
name|File
modifier|&
name|raw
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// error handlers
end_comment

begin_function_decl
specifier|extern
name|void
name|verbose_File_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|quiet_File_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|fatal_File_error_handler
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|one_arg_error_handler_t
name|File_error_handler
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|one_arg_error_handler_t
name|set_File_error_handler
parameter_list|(
name|one_arg_error_handler_t
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__OPTIMIZE__
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LIBGXX_INLINES
argument_list|)
end_if

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|filedesc
argument_list|()
block|{
return|return
name|fileno
argument_list|(
name|fp
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|char
operator|*
name|File
operator|::
name|name
argument_list|()
block|{
return|return
name|nm
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|iocount
argument_list|()
block|{
return|return
name|stat
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|void
name|File
operator|::
name|clear
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|flag
block|; }
specifier|inline
name|void
name|File
operator|::
name|set
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator||
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|File
operator|::
name|unset
argument_list|(
argument|state_value flag
argument_list|)
block|{
name|state
operator|=
name|state_value
argument_list|(
name|int
argument_list|(
name|state
argument_list|)
operator|&
operator|~
name|int
argument_list|(
name|flag
argument_list|)
argument_list|)
block|; }
specifier|inline
name|int
name|File
operator|::
name|readable
argument_list|()
block|{
if|if
condition|(
name|fp
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|feof
argument_list|(
name|fp
argument_list|)
condition|)
name|set
argument_list|(
name|_eof
argument_list|)
expr_stmt|;
if|if
condition|(
name|ferror
argument_list|(
name|fp
argument_list|)
condition|)
name|set
argument_list|(
name|_bad
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|(
name|state
operator|==
name|_good
operator|&&
operator|(
name|rw
operator|&
literal|01
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|File
operator|::
name|writable
argument_list|()
block|{
if|if
condition|(
name|fp
operator|!=
literal|0
operator|&&
name|ferror
argument_list|(
name|fp
argument_list|)
condition|)
name|set
argument_list|(
name|_bad
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
operator|(
name|int
argument_list|(
name|state
argument_list|)
operator|&
operator|(
name|int
argument_list|(
name|_fail
argument_list|)
operator||
name|int
argument_list|(
name|_bad
argument_list|)
operator|)
operator|)
operator|==
literal|0
operator|&&
operator|(
name|rw
operator|&
literal|02
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  inline
name|int
name|File
operator|::
name|is_open
argument_list|()
block|{
return|return
operator|(
name|fp
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|raw
argument_list|()
block|{
return|return
name|this
operator|->
name|File
operator|::
name|setbuf
argument_list|(
name|_IONBF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|failif
argument_list|(
argument|int cond
argument_list|)
block|{
if|if
condition|(
name|cond
condition|)
name|set
argument_list|(
name|_fail
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|File
operator|&
name|File
operator|::
name|get
argument_list|(
argument|char& c
argument_list|)
block|{
if|if
condition|(
name|readable
argument_list|()
condition|)
block|{
name|int
name|ch
init|=
name|getc
argument_list|(
name|fp
argument_list|)
decl_stmt|;
name|c
operator|=
name|ch
expr_stmt|;
name|failif
argument_list|(
name|ch
operator|==
name|EOF
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  inline
name|File
operator|&
name|File
operator|::
name|put
argument_list|(
argument|char  c
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|writable
argument_list|()
operator|||
name|putc
argument_list|(
name|c
argument_list|,
name|fp
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|unget
argument_list|(
argument|char c
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|is_open
argument_list|()
operator|||
operator|!
operator|(
name|rw
operator|&
literal|01
operator|)
operator|||
name|ungetc
argument_list|(
name|c
argument_list|,
name|fp
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|putback
argument_list|(
argument|char c
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|is_open
argument_list|()
operator|||
operator|!
operator|(
name|rw
operator|&
literal|01
operator|)
operator|||
name|ungetc
argument_list|(
name|c
argument_list|,
name|fp
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|read
argument_list|(
argument|void* x
argument_list|,
argument|int sz
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|readable
argument_list|()
operator|||
operator|(
name|stat
operator|=
name|fread
argument_list|(
name|x
argument_list|,
name|sz
argument_list|,
name|n
argument_list|,
name|fp
argument_list|)
operator|)
operator|!=
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|write
argument_list|(
argument|void* x
argument_list|,
argument|int sz
argument_list|,
argument|int n
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|writable
argument_list|()
operator|||
operator|(
name|stat
operator|=
name|fwrite
argument_list|(
name|x
argument_list|,
name|sz
argument_list|,
name|n
argument_list|,
name|fp
argument_list|)
operator|)
operator|!=
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|flush
argument_list|()
block|{
return|return
name|failif
argument_list|(
operator|!
name|is_open
argument_list|()
operator|||
name|fflush
argument_list|(
name|fp
argument_list|)
operator|==
name|EOF
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|File
operator|&
name|File
operator|::
name|seek
argument_list|(
argument|long pos
argument_list|,
argument|int seek_mode
argument_list|)
block|{
return|return
name|failif
argument_list|(
operator|!
name|is_open
argument_list|()
operator|||
name|fseek
argument_list|(
name|fp
argument_list|,
name|pos
argument_list|,
name|seek_mode
argument_list|)
operator|<
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|long
name|File
operator|::
name|tell
argument_list|()
block|{
name|failif
argument_list|(
operator|!
name|is_open
argument_list|()
operator|||
operator|(
operator|(
name|stat
operator|=
name|ftell
argument_list|(
name|fp
argument_list|)
operator|)
operator|<
literal|0
operator|)
argument_list|)
block|;
return|return
name|stat
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|rdstate
argument_list|()
block|{
name|check_state
argument_list|()
block|;
return|return
name|state
return|;
comment|// check_state is necessary in rare but
block|}
end_expr_stmt

begin_comment
comment|// possible circumstances
end_comment

begin_expr_stmt
specifier|inline
name|File
operator|::
name|operator
name|void
operator|*
operator|(
operator|)
block|{
name|check_state
argument_list|()
block|;
return|return
operator|(
name|int
argument_list|(
name|state
argument_list|)
operator|&
operator|(
name|int
argument_list|(
name|_bad
argument_list|)
operator||
name|int
argument_list|(
name|_fail
argument_list|)
operator|)
operator|)
condition|?
literal|0
else|:
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|eof
argument_list|()
block|{
name|check_state
argument_list|()
block|;
return|return
name|state
operator|&
name|_eof
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|fail
argument_list|()
block|{
name|check_state
argument_list|()
block|;
return|return
name|state
operator|&
name|_fail
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|bad
argument_list|()
block|{
name|check_state
argument_list|()
block|;
return|return
name|state
operator|&
name|_bad
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|int
name|File
operator|::
name|good
argument_list|()
block|{
name|check_state
argument_list|()
block|;
return|return
name|rdstate
argument_list|()
operator|==
name|_good
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

