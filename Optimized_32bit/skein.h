begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|_SKEIN_H_
end_ifndef

begin_define
define|#
directive|define
name|_SKEIN_H_
value|1
end_define

begin_comment
comment|/************************************************************************** ** ** Interface declarations and internal definitions for Skein hashing. ** ** Source code author: Doug Whiting, 2008. ** ** This algorithm and source code is released to the public domain. ** *************************************************************************** **  ** The following compile-time switches may be defined to control some ** tradeoffs between speed, code size, error checking, and security. ** ** The "default" note explains what happens when the switch is not defined. ** **  SKEIN_DEBUG            -- make callouts from inside Skein code **                            to examine/display intermediate values. **                            [default: no callouts (no overhead)] ** **  SKEIN_ERR_CHECK        -- how error checking is handled inside Skein **                            code. If not defined, most error checking  **                            is disabled (for performance). Otherwise,  **                            the switch value is interpreted as: **                                0: use assert()      to flag errors **                                1: return SKEIN_FAIL to flag errors ** ***************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stddef.h>
comment|/* get size_t definition */
include|#
directive|include
file|"skein_port.h"
comment|/* get platform-specific definitions */
enum|enum
block|{
name|SKEIN_SUCCESS
init|=
literal|0
block|,
comment|/* return codes from Skein calls */
name|SKEIN_FAIL
init|=
literal|1
block|,
name|SKEIN_BAD_HASHLEN
init|=
literal|2
block|}
enum|;
define|#
directive|define
name|SKEIN_MODIFIER_WORDS
value|( 2)
comment|/* number of modifier (tweak) words */
define|#
directive|define
name|SKEIN_256_STATE_WORDS
value|( 4)
define|#
directive|define
name|SKEIN_512_STATE_WORDS
value|( 8)
define|#
directive|define
name|SKEIN1024_STATE_WORDS
value|(16)
define|#
directive|define
name|SKEIN_MAX_STATE_WORDS
value|(16)
define|#
directive|define
name|SKEIN_256_STATE_BYTES
value|( 8*SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_STATE_BYTES
value|( 8*SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_STATE_BYTES
value|( 8*SKEIN1024_STATE_WORDS)
define|#
directive|define
name|SKEIN_256_STATE_BITS
value|(64*SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_STATE_BITS
value|(64*SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_STATE_BITS
value|(64*SKEIN1024_STATE_WORDS)
define|#
directive|define
name|SKEIN_256_BLOCK_BYTES
value|( 8*SKEIN_256_STATE_WORDS)
define|#
directive|define
name|SKEIN_512_BLOCK_BYTES
value|( 8*SKEIN_512_STATE_WORDS)
define|#
directive|define
name|SKEIN1024_BLOCK_BYTES
value|( 8*SKEIN1024_STATE_WORDS)
typedef|typedef
struct|struct
block|{
name|size_t
name|hashBitLen
decl_stmt|;
comment|/* size of hash result, in bits */
name|size_t
name|bCnt
decl_stmt|;
comment|/* current byte count in buffer b[] */
name|u64b_t
name|T
index|[
name|SKEIN_MODIFIER_WORDS
index|]
decl_stmt|;
comment|/* tweak words: T[0]=byte cnt, T[1]=flags */
block|}
name|Skein_Ctxt_Hdr_t
typedef|;
typedef|typedef
struct|struct
comment|/*  256-bit Skein hash context structure */
block|{
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|u64b_t
name|X
index|[
name|SKEIN_256_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
name|u08b_t
name|b
index|[
name|SKEIN_256_BLOCK_BYTES
index|]
decl_stmt|;
comment|/* partial block buffer (8-byte aligned) */
block|}
name|Skein_256_Ctxt_t
typedef|;
typedef|typedef
struct|struct
comment|/*  512-bit Skein hash context structure */
block|{
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|u64b_t
name|X
index|[
name|SKEIN_512_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
name|u08b_t
name|b
index|[
name|SKEIN_512_BLOCK_BYTES
index|]
decl_stmt|;
comment|/* partial block buffer (8-byte aligned) */
block|}
name|Skein_512_Ctxt_t
typedef|;
typedef|typedef
struct|struct
comment|/* 1024-bit Skein hash context structure */
block|{
name|Skein_Ctxt_Hdr_t
name|h
decl_stmt|;
comment|/* common header context variables */
name|u64b_t
name|X
index|[
name|SKEIN1024_STATE_WORDS
index|]
decl_stmt|;
comment|/* chaining variables */
name|u08b_t
name|b
index|[
name|SKEIN1024_BLOCK_BYTES
index|]
decl_stmt|;
comment|/* partial block buffer (8-byte aligned) */
block|}
name|Skein1024_Ctxt_t
typedef|;
comment|/*   Skein APIs for (incremental) "straight hashing" */
name|int
name|Skein_256_Init
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein_512_Init
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein1024_Init
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|)
function_decl|;
name|int
name|Skein_256_Update
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein_512_Update
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein1024_Update
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|msg
parameter_list|,
name|size_t
name|msgByteCnt
parameter_list|)
function_decl|;
name|int
name|Skein_256_Final
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Final
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Final
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
comment|/* **   Skein APIs for "extended" initialization: MAC keys, tree hashing. **   After an InitExt() call, just use Update/Final calls as with Init(). ** **   Notes: Same parameters as _Init() calls, plus treeInfo/key/keyBytes. **          When keyBytes == 0 and treeInfo == SKEIN_SEQUENTIAL,  **              the results of InitExt() are identical to calling Init(). **          The function Init() may be called once to "precompute" the IV for **              a given hashBitLen value, then by saving a copy of the context **              the IV computation may be avoided in later calls. **          Similarly, the function InitExt() may be called once per MAC key  **              to precompute the MAC IV, then a copy of the context saved and **              reused for each new MAC computation. **/
name|int
name|Skein_256_InitExt
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|u64b_t
name|treeInfo
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
name|int
name|Skein_512_InitExt
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|u64b_t
name|treeInfo
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
name|int
name|Skein1024_InitExt
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|size_t
name|hashBitLen
parameter_list|,
name|u64b_t
name|treeInfo
parameter_list|,
specifier|const
name|u08b_t
modifier|*
name|key
parameter_list|,
name|size_t
name|keyBytes
parameter_list|)
function_decl|;
comment|/* **   Skein APIs for MAC and tree hash: **      Final_Pad:  pad, do final block, but no OUTPUT type **      Output:     do just the output stage */
name|int
name|Skein_256_Final_Pad
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Final_Pad
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Final_Pad
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|SKEIN_TREE_HASH
define|#
directive|define
name|SKEIN_TREE_HASH
value|(1)
endif|#
directive|endif
if|#
directive|if
name|SKEIN_TREE_HASH
name|int
name|Skein_256_Output
parameter_list|(
name|Skein_256_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein_512_Output
parameter_list|(
name|Skein_512_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
name|int
name|Skein1024_Output
parameter_list|(
name|Skein1024_Ctxt_t
modifier|*
name|ctx
parameter_list|,
name|u08b_t
modifier|*
name|hashVal
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/***************************************************************** ** "Internal" Skein definitions **    -- not needed for sequential hashing API, but will be  **           helpful for other uses of Skein (e.g., tree hash mode). **    -- included here so that they can be shared between **           reference and optimized code. ******************************************************************/
comment|/* tweak word T[1]: bit field starting positions */
define|#
directive|define
name|SKEIN_T1_BIT
parameter_list|(
name|BIT
parameter_list|)
value|((BIT) - 64)
comment|/* offset 64 because it's the second word  */
define|#
directive|define
name|SKEIN_T1_POS_TREE_LVL
value|SKEIN_T1_BIT(112)
comment|/* bits 112..118: level in hash tree       */
define|#
directive|define
name|SKEIN_T1_POS_BIT_PAD
value|SKEIN_T1_BIT(119)
comment|/* bit  119     : partial final input byte */
define|#
directive|define
name|SKEIN_T1_POS_BLK_TYPE
value|SKEIN_T1_BIT(120)
comment|/* bits 120..125: type field               */
define|#
directive|define
name|SKEIN_T1_POS_FIRST
value|SKEIN_T1_BIT(126)
comment|/* bits 126     : first block flag         */
define|#
directive|define
name|SKEIN_T1_POS_FINAL
value|SKEIN_T1_BIT(127)
comment|/* bit  127     : final block flag         */
comment|/* tweak word T[1]: flag bit definition(s) */
define|#
directive|define
name|SKEIN_T1_FLAG_FIRST
value|(((u64b_t)  1 )<< SKEIN_T1_POS_FIRST)
define|#
directive|define
name|SKEIN_T1_FLAG_FINAL
value|(((u64b_t)  1 )<< SKEIN_T1_POS_FINAL)
define|#
directive|define
name|SKEIN_T1_FLAG_BIT_PAD
value|(((u64b_t)  1 )<< SKEIN_T1_POS_BIT_PAD)
comment|/* tweak word T[1]: tree level bit field mask */
define|#
directive|define
name|SKEIN_T1_TREE_LVL_MASK
value|(((u64b_t)0x7F)<< SKEIN_T1_POS_TREE_LVL)
define|#
directive|define
name|SKEIN_T1_TREE_LEVEL
parameter_list|(
name|n
parameter_list|)
value|(((u64b_t) (n))<< SKEIN_T1_POS_TREE_LVL)
comment|/* tweak word T[1]: block type field */
define|#
directive|define
name|SKEIN_BLK_TYPE_KEY
value|( 0)
comment|/* key, for MAC and KDF */
define|#
directive|define
name|SKEIN_BLK_TYPE_CFG
value|( 4)
comment|/* configuration block */
define|#
directive|define
name|SKEIN_BLK_TYPE_PERS
value|( 8)
comment|/* personalization string */
define|#
directive|define
name|SKEIN_BLK_TYPE_PK
value|(12)
comment|/* public key (for digital signature hashing) */
define|#
directive|define
name|SKEIN_BLK_TYPE_KDF
value|(16)
comment|/* key identifier for KDF */
define|#
directive|define
name|SKEIN_BLK_TYPE_NONCE
value|(20)
comment|/* nonce for PRNG */
define|#
directive|define
name|SKEIN_BLK_TYPE_MSG
value|(48)
comment|/* message processing */
define|#
directive|define
name|SKEIN_BLK_TYPE_OUT
value|(63)
comment|/* output stage */
define|#
directive|define
name|SKEIN_BLK_TYPE_MASK
value|(63)
comment|/* bit field mask */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE
parameter_list|(
name|T
parameter_list|)
value|(((u64b_t) (SKEIN_BLK_TYPE_##T))<< SKEIN_T1_POS_BLK_TYPE)
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_KEY
value|SKEIN_T1_BLK_TYPE(KEY)
comment|/* key, for MAC and KDF */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_CFG
value|SKEIN_T1_BLK_TYPE(CFG)
comment|/* configuration block */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_PERS
value|SKEIN_T1_BLK_TYPE(PERS)
comment|/* personalization string */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_PK
value|SKEIN_T1_BLK_TYPE(PK)
comment|/* public key (for digital signature hashing) */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_KDF
value|SKEIN_T1_BLK_TYPE(KDF)
comment|/* key identifier for KDF */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_NONCE
value|SKEIN_T1_BLK_TYPE(NONCE)
comment|/* nonce for PRNG */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_MSG
value|SKEIN_T1_BLK_TYPE(MSG)
comment|/* message processing */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_OUT
value|SKEIN_T1_BLK_TYPE(OUT)
comment|/* output stage */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_MASK
value|SKEIN_T1_BLK_TYPE(MASK)
comment|/* field bit mask */
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_CFG_FINAL
value|(SKEIN_T1_BLK_TYPE_CFG | SKEIN_T1_FLAG_FINAL)
define|#
directive|define
name|SKEIN_T1_BLK_TYPE_OUT_FINAL
value|(SKEIN_T1_BLK_TYPE_OUT | SKEIN_T1_FLAG_FINAL)
define|#
directive|define
name|SKEIN_VERSION
value|(1)
ifndef|#
directive|ifndef
name|SKEIN_ID_STRING_LE
comment|/* allow compile-time personalization */
define|#
directive|define
name|SKEIN_ID_STRING_LE
value|(0x33414853)
comment|/* "SHA3" (little-endian)*/
endif|#
directive|endif
define|#
directive|define
name|SKEIN_MK_64
parameter_list|(
name|hi32
parameter_list|,
name|lo32
parameter_list|)
value|((lo32) + (((u64b_t) (hi32))<< 32))
define|#
directive|define
name|SKEIN_SCHEMA_VER
value|SKEIN_MK_64(SKEIN_VERSION,SKEIN_ID_STRING_LE)
define|#
directive|define
name|SKEIN_KS_PARITY
value|SKEIN_MK_64(0x1BD11BDA,0xA9FC1A22)
define|#
directive|define
name|SKEIN_CFG_STR_LEN
value|(4*8)
comment|/* bit field definitions in config block treeInfo word */
define|#
directive|define
name|SKEIN_CFG_TREE_LEAF_SIZE_POS
value|( 0)
define|#
directive|define
name|SKEIN_CFG_TREE_NODE_SIZE_POS
value|( 8)
define|#
directive|define
name|SKEIN_CFG_TREE_MAX_LEVEL_POS
value|(16)
define|#
directive|define
name|SKEIN_CFG_TREE_LEAF_SIZE_MSK
value|(((u64b_t) 0xFF)<< SKEIN_CFG_TREE_LEAF_SIZE_POS)
define|#
directive|define
name|SKEIN_CFG_TREE_NODE_SIZE_MSK
value|(((u64b_t) 0xFF)<< SKEIN_CFG_TREE_NODE_SIZE_POS)
define|#
directive|define
name|SKEIN_CFG_TREE_MAX_LEVEL_MSK
value|(((u64b_t) 0xFF)<< SKEIN_CFG_TREE_MAX_LEVEL_POS)
define|#
directive|define
name|SKEIN_CFG_TREE_INFO
parameter_list|(
name|leaf
parameter_list|,
name|node
parameter_list|,
name|maxLvl
parameter_list|)
define|\
value|( (((u64b_t)(leaf  ))<< SKEIN_CFG_TREE_LEAF_SIZE_POS) |    \       (((u64b_t)(node  ))<< SKEIN_CFG_TREE_NODE_SIZE_POS) |    \       (((u64b_t)(maxLvl))<< SKEIN_CFG_TREE_MAX_LEVEL_POS) )
define|#
directive|define
name|SKEIN_CFG_TREE_INFO_SEQUENTIAL
value|SKEIN_CFG_TREE_INFO(0,0,0)
comment|/* use as treeInfo in InitExt() call for sequential processing */
comment|/* **   Skein macros for getting/setting tweak words, etc. **   These are useful for partial input bytes, hash tree init/update, etc. **/
define|#
directive|define
name|Skein_Get_Tweak
parameter_list|(
name|ctxPtr
parameter_list|,
name|TWK_NUM
parameter_list|)
value|((ctxPtr)->h.T[TWK_NUM])
define|#
directive|define
name|Skein_Set_Tweak
parameter_list|(
name|ctxPtr
parameter_list|,
name|TWK_NUM
parameter_list|,
name|tVal
parameter_list|)
value|{(ctxPtr)->h.T[TWK_NUM] = (tVal);}
define|#
directive|define
name|Skein_Get_T0
parameter_list|(
name|ctxPtr
parameter_list|)
value|Skein_Get_Tweak(ctxPtr,0)
define|#
directive|define
name|Skein_Get_T1
parameter_list|(
name|ctxPtr
parameter_list|)
value|Skein_Get_Tweak(ctxPtr,1)
define|#
directive|define
name|Skein_Set_T0
parameter_list|(
name|ctxPtr
parameter_list|,
name|T0
parameter_list|)
value|Skein_Set_Tweak(ctxPtr,0,T0)
define|#
directive|define
name|Skein_Set_T1
parameter_list|(
name|ctxPtr
parameter_list|,
name|T1
parameter_list|)
value|Skein_Set_Tweak(ctxPtr,1,T1)
comment|/* set both tweak words at once */
define|#
directive|define
name|Skein_Set_T0_T1
parameter_list|(
name|ctxPtr
parameter_list|,
name|T0
parameter_list|,
name|T1
parameter_list|)
define|\
value|{                                           \     Skein_Set_T0(ctxPtr,(T0));                  \     Skein_Set_T1(ctxPtr,(T1));                  \     }
define|#
directive|define
name|Skein_Set_Type
parameter_list|(
name|ctxPtr
parameter_list|,
name|BLK_TYPE
parameter_list|)
define|\
value|Skein_Set_T1(ctxPtr,SKEIN_T1_BLK_TYPE_##BLK_TYPE)
comment|/* set up for starting with a new type: h.T[0]=0; h.T[1] = NEW_TYPE; h.bCnt=0; */
define|#
directive|define
name|Skein_Start_New_Type
parameter_list|(
name|ctxPtr
parameter_list|,
name|BLK_TYPE
parameter_list|)
define|\
value|{ Skein_Set_T0_T1(ctxPtr,0,SKEIN_T1_FLAG_FIRST | SKEIN_T1_BLK_TYPE_##BLK_TYPE); (ctxPtr)->h.bCnt=0; }
define|#
directive|define
name|Skein_Clear_First_Flag
parameter_list|(
name|hdr
parameter_list|)
value|{ (hdr).T[1]&= ~SKEIN_T1_FLAG_FIRST;       }
define|#
directive|define
name|Skein_Set_Bit_Pad_Flag
parameter_list|(
name|hdr
parameter_list|)
value|{ (hdr).T[1] |=  SKEIN_T1_FLAG_BIT_PAD;     }
define|#
directive|define
name|Skein_Set_Tree_Level
parameter_list|(
name|hdr
parameter_list|,
name|height
parameter_list|)
value|{ (hdr).T[1] |= SKEIN_T1_TREE_LEVEL(height);}
comment|/***************************************************************** ** "Internal" Skein definitions for debugging and error checking ******************************************************************/
ifdef|#
directive|ifdef
name|SKEIN_DEBUG
comment|/* examine/display intermediate values? */
include|#
directive|include
file|"skein_debug.h"
else|#
directive|else
comment|/* default is no callouts */
define|#
directive|define
name|Skein_Show_Block
parameter_list|(
name|bits
parameter_list|,
name|ctx
parameter_list|,
name|X
parameter_list|,
name|blkPtr
parameter_list|,
name|wPtr
parameter_list|,
name|ksEvenPtr
parameter_list|,
name|ksOddPtr
parameter_list|)
define|#
directive|define
name|Skein_Show_Round
parameter_list|(
name|bits
parameter_list|,
name|ctx
parameter_list|,
name|r
parameter_list|,
name|X
parameter_list|)
define|#
directive|define
name|Skein_Show_R_Ptr
parameter_list|(
name|bits
parameter_list|,
name|ctx
parameter_list|,
name|r
parameter_list|,
name|X_ptr
parameter_list|)
define|#
directive|define
name|Skein_Show_Final
parameter_list|(
name|bits
parameter_list|,
name|ctx
parameter_list|,
name|cnt
parameter_list|,
name|outPtr
parameter_list|)
define|#
directive|define
name|Skein_Show_Key
parameter_list|(
name|bits
parameter_list|,
name|ctx
parameter_list|,
name|key
parameter_list|,
name|keyBytes
parameter_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|SKEIN_ERR_CHECK
comment|/* run-time checks (e.g., bad params, uninitialized context)? */
define|#
directive|define
name|Skein_Assert
parameter_list|(
name|x
parameter_list|,
name|retCode
parameter_list|)
comment|/* default: ignore all Asserts, for performance */
define|#
directive|define
name|Skein_assert
parameter_list|(
name|x
parameter_list|)
elif|#
directive|elif
name|defined
argument_list|(
name|SKEIN_ASSERT
argument_list|)
include|#
directive|include
file|<assert.h>
define|#
directive|define
name|Skein_Assert
parameter_list|(
name|x
parameter_list|,
name|retCode
parameter_list|)
value|assert(x)
define|#
directive|define
name|Skein_assert
parameter_list|(
name|x
parameter_list|)
value|assert(x)
else|#
directive|else
include|#
directive|include
file|<assert.h>
define|#
directive|define
name|Skein_Assert
parameter_list|(
name|x
parameter_list|,
name|retCode
parameter_list|)
value|{ if (!(x)) return retCode; }
comment|/*  caller  error */
define|#
directive|define
name|Skein_assert
parameter_list|(
name|x
parameter_list|)
value|assert(x)
comment|/* internal error */
endif|#
directive|endif
comment|/***************************************************************** ** Skein block function constants (shared across Ref and Opt code) ******************************************************************/
enum|enum
block|{
comment|/* Skein_256 round rotation constants */
name|R_256_0_0
init|=
literal|14
block|,
name|R_256_0_1
init|=
literal|16
block|,
name|R_256_1_0
init|=
literal|52
block|,
name|R_256_1_1
init|=
literal|57
block|,
name|R_256_2_0
init|=
literal|23
block|,
name|R_256_2_1
init|=
literal|40
block|,
name|R_256_3_0
init|=
literal|5
block|,
name|R_256_3_1
init|=
literal|37
block|,
name|R_256_4_0
init|=
literal|25
block|,
name|R_256_4_1
init|=
literal|33
block|,
name|R_256_5_0
init|=
literal|46
block|,
name|R_256_5_1
init|=
literal|12
block|,
name|R_256_6_0
init|=
literal|58
block|,
name|R_256_6_1
init|=
literal|22
block|,
name|R_256_7_0
init|=
literal|32
block|,
name|R_256_7_1
init|=
literal|32
block|,
comment|/* Skein_512 round rotation constants */
name|R_512_0_0
init|=
literal|46
block|,
name|R_512_0_1
init|=
literal|36
block|,
name|R_512_0_2
init|=
literal|19
block|,
name|R_512_0_3
init|=
literal|37
block|,
name|R_512_1_0
init|=
literal|33
block|,
name|R_512_1_1
init|=
literal|27
block|,
name|R_512_1_2
init|=
literal|14
block|,
name|R_512_1_3
init|=
literal|42
block|,
name|R_512_2_0
init|=
literal|17
block|,
name|R_512_2_1
init|=
literal|49
block|,
name|R_512_2_2
init|=
literal|36
block|,
name|R_512_2_3
init|=
literal|39
block|,
name|R_512_3_0
init|=
literal|44
block|,
name|R_512_3_1
init|=
literal|9
block|,
name|R_512_3_2
init|=
literal|54
block|,
name|R_512_3_3
init|=
literal|56
block|,
name|R_512_4_0
init|=
literal|39
block|,
name|R_512_4_1
init|=
literal|30
block|,
name|R_512_4_2
init|=
literal|34
block|,
name|R_512_4_3
init|=
literal|24
block|,
name|R_512_5_0
init|=
literal|13
block|,
name|R_512_5_1
init|=
literal|50
block|,
name|R_512_5_2
init|=
literal|10
block|,
name|R_512_5_3
init|=
literal|17
block|,
name|R_512_6_0
init|=
literal|25
block|,
name|R_512_6_1
init|=
literal|29
block|,
name|R_512_6_2
init|=
literal|39
block|,
name|R_512_6_3
init|=
literal|43
block|,
name|R_512_7_0
init|=
literal|8
block|,
name|R_512_7_1
init|=
literal|35
block|,
name|R_512_7_2
init|=
literal|56
block|,
name|R_512_7_3
init|=
literal|22
block|,
comment|/* Skein1024 round rotation constants */
name|R1024_0_0
init|=
literal|24
block|,
name|R1024_0_1
init|=
literal|13
block|,
name|R1024_0_2
init|=
literal|8
block|,
name|R1024_0_3
init|=
literal|47
block|,
name|R1024_0_4
init|=
literal|8
block|,
name|R1024_0_5
init|=
literal|17
block|,
name|R1024_0_6
init|=
literal|22
block|,
name|R1024_0_7
init|=
literal|37
block|,
name|R1024_1_0
init|=
literal|38
block|,
name|R1024_1_1
init|=
literal|19
block|,
name|R1024_1_2
init|=
literal|10
block|,
name|R1024_1_3
init|=
literal|55
block|,
name|R1024_1_4
init|=
literal|49
block|,
name|R1024_1_5
init|=
literal|18
block|,
name|R1024_1_6
init|=
literal|23
block|,
name|R1024_1_7
init|=
literal|52
block|,
name|R1024_2_0
init|=
literal|33
block|,
name|R1024_2_1
init|=
literal|4
block|,
name|R1024_2_2
init|=
literal|51
block|,
name|R1024_2_3
init|=
literal|13
block|,
name|R1024_2_4
init|=
literal|34
block|,
name|R1024_2_5
init|=
literal|41
block|,
name|R1024_2_6
init|=
literal|59
block|,
name|R1024_2_7
init|=
literal|17
block|,
name|R1024_3_0
init|=
literal|5
block|,
name|R1024_3_1
init|=
literal|20
block|,
name|R1024_3_2
init|=
literal|48
block|,
name|R1024_3_3
init|=
literal|41
block|,
name|R1024_3_4
init|=
literal|47
block|,
name|R1024_3_5
init|=
literal|28
block|,
name|R1024_3_6
init|=
literal|16
block|,
name|R1024_3_7
init|=
literal|25
block|,
name|R1024_4_0
init|=
literal|41
block|,
name|R1024_4_1
init|=
literal|9
block|,
name|R1024_4_2
init|=
literal|37
block|,
name|R1024_4_3
init|=
literal|31
block|,
name|R1024_4_4
init|=
literal|12
block|,
name|R1024_4_5
init|=
literal|47
block|,
name|R1024_4_6
init|=
literal|44
block|,
name|R1024_4_7
init|=
literal|30
block|,
name|R1024_5_0
init|=
literal|16
block|,
name|R1024_5_1
init|=
literal|34
block|,
name|R1024_5_2
init|=
literal|56
block|,
name|R1024_5_3
init|=
literal|51
block|,
name|R1024_5_4
init|=
literal|4
block|,
name|R1024_5_5
init|=
literal|53
block|,
name|R1024_5_6
init|=
literal|42
block|,
name|R1024_5_7
init|=
literal|41
block|,
name|R1024_6_0
init|=
literal|31
block|,
name|R1024_6_1
init|=
literal|44
block|,
name|R1024_6_2
init|=
literal|47
block|,
name|R1024_6_3
init|=
literal|46
block|,
name|R1024_6_4
init|=
literal|19
block|,
name|R1024_6_5
init|=
literal|42
block|,
name|R1024_6_6
init|=
literal|44
block|,
name|R1024_6_7
init|=
literal|25
block|,
name|R1024_7_0
init|=
literal|9
block|,
name|R1024_7_1
init|=
literal|48
block|,
name|R1024_7_2
init|=
literal|35
block|,
name|R1024_7_3
init|=
literal|52
block|,
name|R1024_7_4
init|=
literal|23
block|,
name|R1024_7_5
init|=
literal|31
block|,
name|R1024_7_6
init|=
literal|37
block|,
name|R1024_7_7
init|=
literal|20
block|}
enum|;
ifndef|#
directive|ifndef
name|SKEIN_ROUNDS
define|#
directive|define
name|SKEIN_256_ROUNDS_TOTAL
value|(72)
comment|/* number of rounds for the different block sizes */
define|#
directive|define
name|SKEIN_512_ROUNDS_TOTAL
value|(72)
define|#
directive|define
name|SKEIN1024_ROUNDS_TOTAL
value|(80)
else|#
directive|else
comment|/* allow command-line define in range 8*(5..14)   */
define|#
directive|define
name|SKEIN_256_ROUNDS_TOTAL
value|(8*((((SKEIN_ROUNDS/100) + 5) % 10) + 5))
define|#
directive|define
name|SKEIN_512_ROUNDS_TOTAL
value|(8*((((SKEIN_ROUNDS/ 10) + 5) % 10) + 5))
define|#
directive|define
name|SKEIN1024_ROUNDS_TOTAL
value|(8*((((SKEIN_ROUNDS    ) + 5) % 10) + 5))
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ifndef _SKEIN_H_ */
end_comment

end_unit

