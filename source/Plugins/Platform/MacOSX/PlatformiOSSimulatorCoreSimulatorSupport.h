begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- PlatformiOSSimulatorCoreSimulatorSupport.h ----------------*- C++
end_comment

begin_comment
comment|//-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_PlatformiOSSimulatorCoreSimulatorSupport_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_PlatformiOSSimulatorCoreSimulatorSupport_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<ostream>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__APPLE__
end_ifdef

begin_include
include|#
directive|include
file|<objc/objc.h>
end_include

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|void
modifier|*
name|id
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Interpreter/Args.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/ProcessLaunchInfo.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_comment
comment|// And now the actual magic
end_comment

begin_decl_stmt
name|namespace
name|CoreSimulatorSupport
block|{
name|class
name|Process
block|{
name|public
label|:
name|lldb
operator|::
name|pid_t
name|GetPID
argument_list|()
block|{
return|return
name|m_pid
return|;
block|}
name|explicit
name|operator
name|bool
parameter_list|()
block|{
return|return
name|m_pid
operator|!=
name|LLDB_INVALID_PROCESS_ID
return|;
block|}
name|lldb_private
operator|::
name|Error
name|GetError
argument_list|()
block|{
return|return
name|m_error
return|;
block|}
name|private
label|:
name|Process
argument_list|(
argument|lldb::pid_t p
argument_list|)
empty_stmt|;
name|Process
argument_list|(
argument|lldb_private::Error error
argument_list|)
empty_stmt|;
name|Process
argument_list|(
argument|lldb::pid_t p
argument_list|,
argument|lldb_private::Error error
argument_list|)
empty_stmt|;
name|lldb
operator|::
name|pid_t
name|m_pid
expr_stmt|;
name|lldb_private
operator|::
name|Error
name|m_error
expr_stmt|;
name|friend
name|class
name|Device
decl_stmt|;
block|}
empty_stmt|;
name|class
name|ModelIdentifier
block|{
name|public
label|:
name|ModelIdentifier
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|mi
argument_list|)
expr_stmt|;
name|ModelIdentifier
argument_list|()
expr_stmt|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_versions
operator|.
name|empty
argument_list|()
return|;
block|}
name|size_t
name|GetNumVersions
argument_list|()
specifier|const
block|{
return|return
name|m_versions
operator|.
name|size
argument_list|()
return|;
block|}
name|unsigned
name|int
name|GetVersionAtIndex
argument_list|(
name|size_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_versions
index|[
name|idx
index|]
return|;
block|}
name|std
operator|::
name|string
name|GetFamily
argument_list|()
specifier|const
block|{
return|return
name|m_family
operator|.
name|c_str
argument_list|()
return|;
block|}
name|private
label|:
name|std
operator|::
name|string
name|m_family
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|unsigned
name|int
operator|>
name|m_versions
expr_stmt|;
block|}
empty_stmt|;
name|class
name|DeviceType
block|{
name|public
label|:
name|enum
name|class
name|ProductFamilyID
range|:
name|int32_t
block|{
name|iPhone
operator|=
literal|1
block|,
name|iPad
operator|=
literal|2
block|,
name|appleTV
operator|=
literal|3
block|,
name|appleWatch
operator|=
literal|4
block|}
decl_stmt|;
name|DeviceType
argument_list|()
expr_stmt|;
name|DeviceType
argument_list|(
argument|id d
argument_list|)
empty_stmt|;
name|explicit
name|operator
name|bool
parameter_list|()
function_decl|;
name|std
operator|::
name|string
name|GetName
argument_list|()
expr_stmt|;
name|lldb_private
operator|::
name|ConstString
name|GetIdentifier
argument_list|()
expr_stmt|;
name|ModelIdentifier
name|GetModelIdentifier
parameter_list|()
function_decl|;
name|lldb_private
operator|::
name|ConstString
name|GetProductFamily
argument_list|()
expr_stmt|;
name|ProductFamilyID
name|GetProductFamilyID
parameter_list|()
function_decl|;
name|private
label|:
name|id
name|m_dev
decl_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|ModelIdentifier
operator|>
name|m_model_identifier
expr_stmt|;
block|}
empty_stmt|;
name|class
name|OSVersion
block|{
name|public
label|:
name|OSVersion
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|ver
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|build
argument_list|)
expr_stmt|;
name|OSVersion
argument_list|()
expr_stmt|;
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_versions
operator|.
name|empty
argument_list|()
return|;
block|}
name|size_t
name|GetNumVersions
argument_list|()
specifier|const
block|{
return|return
name|m_versions
operator|.
name|size
argument_list|()
return|;
block|}
name|unsigned
name|int
name|GetVersionAtIndex
argument_list|(
name|size_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_versions
index|[
name|idx
index|]
return|;
block|}
specifier|const
name|char
operator|*
name|GetBuild
argument_list|()
specifier|const
block|{
return|return
name|m_build
operator|.
name|c_str
argument_list|()
return|;
block|}
name|private
label|:
name|std
operator|::
name|vector
operator|<
name|unsigned
name|int
operator|>
name|m_versions
expr_stmt|;
name|std
operator|::
name|string
name|m_build
expr_stmt|;
block|}
empty_stmt|;
name|class
name|DeviceRuntime
block|{
name|public
label|:
name|DeviceRuntime
argument_list|()
expr_stmt|;
name|DeviceRuntime
argument_list|(
argument|id d
argument_list|)
empty_stmt|;
name|explicit
name|operator
name|bool
parameter_list|()
function_decl|;
name|OSVersion
name|GetVersion
parameter_list|()
function_decl|;
name|bool
name|IsAvailable
parameter_list|()
function_decl|;
name|private
label|:
name|id
name|m_dev
decl_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|OSVersion
operator|>
name|m_os_version
expr_stmt|;
block|}
empty_stmt|;
name|class
name|Device
block|{
name|private
label|:
typedef|typedef
name|unsigned
name|long
name|int
name|NSUInteger
typedef|;
name|public
label|:
name|enum
name|class
name|State
range|:
name|NSUInteger
block|{
name|Creating
block|,
name|Shutdown
block|,
name|Booting
block|,
name|Booted
block|,
name|ShuttingDown
block|}
decl_stmt|;
name|Device
argument_list|()
expr_stmt|;
name|Device
argument_list|(
argument|id d
argument_list|)
empty_stmt|;
name|explicit
name|operator
name|bool
parameter_list|()
function_decl|;
name|std
operator|::
name|string
name|GetName
argument_list|()
specifier|const
expr_stmt|;
name|DeviceType
name|GetDeviceType
parameter_list|()
function_decl|;
name|DeviceRuntime
name|GetDeviceRuntime
parameter_list|()
function_decl|;
name|State
name|GetState
parameter_list|()
function_decl|;
name|bool
name|Boot
argument_list|(
name|lldb_private
operator|::
name|Error
operator|&
name|err
argument_list|)
decl_stmt|;
name|bool
name|Shutdown
argument_list|(
name|lldb_private
operator|::
name|Error
operator|&
name|err
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|GetUDID
argument_list|()
specifier|const
expr_stmt|;
name|Process
name|Spawn
argument_list|(
name|lldb_private
operator|::
name|ProcessLaunchInfo
operator|&
name|launch_info
argument_list|)
decl_stmt|;
name|private
label|:
name|id
name|m_dev
decl_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|DeviceType
operator|>
name|m_dev_type
expr_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|DeviceRuntime
operator|>
name|m_dev_runtime
expr_stmt|;
name|friend
name|class
name|DeviceSet
decl_stmt|;
block|}
empty_stmt|;
name|bool
name|operator
operator|>
operator|(
specifier|const
name|OSVersion
operator|&
name|lhs
operator|,
specifier|const
name|OSVersion
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|>
operator|(
specifier|const
name|ModelIdentifier
operator|&
name|lhs
operator|,
specifier|const
name|ModelIdentifier
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|OSVersion
operator|&
name|lhs
operator|,
specifier|const
name|OSVersion
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ModelIdentifier
operator|&
name|lhs
operator|,
specifier|const
name|ModelIdentifier
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|OSVersion
operator|&
name|lhs
operator|,
specifier|const
name|OSVersion
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ModelIdentifier
operator|&
name|lhs
operator|,
specifier|const
name|ModelIdentifier
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|OSVersion
operator|&
name|lhs
operator|,
specifier|const
name|OSVersion
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ModelIdentifier
operator|&
name|lhs
operator|,
specifier|const
name|ModelIdentifier
operator|&
name|rhs
operator|)
expr_stmt|;
name|class
name|DeviceSet
block|{
name|public
label|:
specifier|static
name|DeviceSet
name|GetAllDevices
parameter_list|(
specifier|const
name|char
modifier|*
name|developer_dir
parameter_list|)
function_decl|;
specifier|static
name|DeviceSet
name|GetAvailableDevices
parameter_list|(
specifier|const
name|char
modifier|*
name|developer_dir
parameter_list|)
function_decl|;
name|size_t
name|GetNumDevices
parameter_list|()
function_decl|;
name|Device
name|GetDeviceAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
name|void
name|ForEach
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|Device
operator|&
argument_list|)
operator|>
name|f
argument_list|)
decl_stmt|;
name|DeviceSet
name|GetDevicesIf
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
name|Device
argument_list|)
operator|>
name|f
argument_list|)
decl_stmt|;
name|DeviceSet
name|GetDevices
argument_list|(
name|DeviceType
operator|::
name|ProductFamilyID
name|dev_id
argument_list|)
decl_stmt|;
name|Device
name|GetFanciest
argument_list|(
name|DeviceType
operator|::
name|ProductFamilyID
name|dev_id
argument_list|)
decl_stmt|;
name|private
label|:
name|DeviceSet
argument_list|(
argument|id arr
argument_list|)
block|:
name|m_dev
argument_list|(
argument|arr
argument_list|)
block|{}
name|id
name|m_dev
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_PlatformiOSSimulatorCoreSimulatorSupport_h_
end_comment

end_unit

