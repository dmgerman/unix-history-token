begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RenderScriptRuntime.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_RenderScriptRuntime_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_RenderScriptRuntime_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<array>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/Module.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Expression/LLVMUserExpression.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/CPPLanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/LanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|lldb_renderscript
block|{
typedef|typedef
name|uint32_t
name|RSSlot
typedef|;
name|class
name|RSModuleDescriptor
decl_stmt|;
struct_decl|struct
name|RSGlobalDescriptor
struct_decl|;
struct_decl|struct
name|RSKernelDescriptor
struct_decl|;
struct_decl|struct
name|RSReductionDescriptor
struct_decl|;
struct_decl|struct
name|RSScriptGroupDescriptor
struct_decl|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSModuleDescriptor
operator|>
name|RSModuleDescriptorSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSGlobalDescriptor
operator|>
name|RSGlobalDescriptorSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSKernelDescriptor
operator|>
name|RSKernelDescriptorSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSScriptGroupDescriptor
operator|>
name|RSScriptGroupDescriptorSP
expr_stmt|;
struct|struct
name|RSCoordinate
block|{
name|uint32_t
name|x
decl_stmt|,
name|y
decl_stmt|,
name|z
decl_stmt|;
name|RSCoordinate
argument_list|()
operator|:
name|x
argument_list|()
operator|,
name|y
argument_list|()
operator|,
name|z
argument_list|()
block|{}
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|lldb_renderscript
operator|::
name|RSCoordinate
operator|&
name|rhs
operator|)
block|{
return|return
name|x
operator|==
name|rhs
operator|.
name|x
operator|&&
name|y
operator|==
name|rhs
operator|.
name|y
operator|&&
name|z
operator|==
name|rhs
operator|.
name|z
return|;
block|}
block|}
struct|;
comment|// Breakpoint Resolvers decide where a breakpoint is placed, so having our own
comment|// allows us to limit the search scope to RS kernel modules. As well as check
comment|// for .expand kernels as a fallback.
name|class
name|RSBreakpointResolver
range|:
name|public
name|BreakpointResolver
block|{
name|public
operator|:
name|RSBreakpointResolver
argument_list|(
argument|Breakpoint *bp
argument_list|,
argument|ConstString name
argument_list|)
operator|:
name|BreakpointResolver
argument_list|(
name|bp
argument_list|,
name|BreakpointResolver
operator|::
name|NameResolver
argument_list|)
block|,
name|m_kernel_name
argument_list|(
argument|name
argument_list|)
block|{}
name|void
name|GetDescription
argument_list|(
argument|Stream *strm
argument_list|)
name|override
block|{
if|if
condition|(
name|strm
condition|)
name|strm
operator|->
name|Printf
argument_list|(
literal|"RenderScript kernel breakpoint for '%s'"
argument_list|,
name|m_kernel_name
operator|.
name|AsCString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream *s
argument_list|)
specifier|const
name|override
block|{}
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool containing
argument_list|)
name|override
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|{
return|return
name|Searcher
operator|::
name|eDepthModule
return|;
block|}
name|lldb
operator|::
name|BreakpointResolverSP
name|CopyForBreakpoint
argument_list|(
argument|Breakpoint&breakpoint
argument_list|)
name|override
block|{
name|lldb
operator|::
name|BreakpointResolverSP
name|ret_sp
argument_list|(
argument|new RSBreakpointResolver(&breakpoint, m_kernel_name)
argument_list|)
block|;
return|return
name|ret_sp
return|;
block|}
name|protected
operator|:
name|ConstString
name|m_kernel_name
block|; }
decl_stmt|;
name|class
name|RSReduceBreakpointResolver
range|:
name|public
name|BreakpointResolver
block|{
name|public
operator|:
expr|enum
name|ReduceKernelTypeFlags
block|{
name|eKernelTypeAll
operator|=
operator|~
operator|(
literal|0
operator|)
block|,
name|eKernelTypeNone
operator|=
literal|0
block|,
name|eKernelTypeAccum
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|eKernelTypeInit
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|eKernelTypeComb
operator|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|eKernelTypeOutC
operator|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|eKernelTypeHalter
operator|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|}
block|;
name|RSReduceBreakpointResolver
argument_list|(
argument|Breakpoint *breakpoint
argument_list|,
argument|ConstString reduce_name
argument_list|,
argument|std::vector<lldb_renderscript::RSModuleDescriptorSP> *rs_modules
argument_list|,
argument|int kernel_types = eKernelTypeAll
argument_list|)
operator|:
name|BreakpointResolver
argument_list|(
name|breakpoint
argument_list|,
name|BreakpointResolver
operator|::
name|NameResolver
argument_list|)
block|,
name|m_reduce_name
argument_list|(
name|reduce_name
argument_list|)
block|,
name|m_rsmodules
argument_list|(
name|rs_modules
argument_list|)
block|,
name|m_kernel_types
argument_list|(
argument|kernel_types
argument_list|)
block|{
comment|// The reduce breakpoint resolver handles adding breakpoints for named
comment|// reductions.
comment|// Breakpoints will be resolved for all constituent kernels in the named
comment|// reduction
block|}
name|void
name|GetDescription
argument_list|(
argument|Stream *strm
argument_list|)
name|override
block|{
if|if
condition|(
name|strm
condition|)
name|strm
operator|->
name|Printf
argument_list|(
literal|"RenderScript reduce breakpoint for '%s'"
argument_list|,
name|m_reduce_name
operator|.
name|AsCString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream *s
argument_list|)
specifier|const
name|override
block|{}
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool containing
argument_list|)
name|override
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|{
return|return
name|Searcher
operator|::
name|eDepthModule
return|;
block|}
name|lldb
operator|::
name|BreakpointResolverSP
name|CopyForBreakpoint
argument_list|(
argument|Breakpoint&breakpoint
argument_list|)
name|override
block|{
name|lldb
operator|::
name|BreakpointResolverSP
name|ret_sp
argument_list|(
argument|new RSReduceBreakpointResolver(&breakpoint, m_reduce_name, m_rsmodules, m_kernel_types)
argument_list|)
block|;
return|return
name|ret_sp
return|;
block|}
name|private
operator|:
name|ConstString
name|m_reduce_name
block|;
comment|// The name of the reduction
name|std
operator|::
name|vector
operator|<
name|lldb_renderscript
operator|::
name|RSModuleDescriptorSP
operator|>
operator|*
name|m_rsmodules
block|;
name|int
name|m_kernel_types
block|; }
decl_stmt|;
struct|struct
name|RSKernelDescriptor
block|{
name|public
label|:
name|RSKernelDescriptor
argument_list|(
argument|const RSModuleDescriptor *module
argument_list|,
argument|llvm::StringRef name
argument_list|,
argument|uint32_t slot
argument_list|)
block|:
name|m_module
argument_list|(
name|module
argument_list|)
operator|,
name|m_name
argument_list|(
name|name
argument_list|)
operator|,
name|m_slot
argument_list|(
argument|slot
argument_list|)
block|{}
name|void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|RSModuleDescriptor
modifier|*
name|m_module
decl_stmt|;
name|ConstString
name|m_name
decl_stmt|;
name|RSSlot
name|m_slot
decl_stmt|;
block|}
struct|;
struct|struct
name|RSGlobalDescriptor
block|{
name|public
label|:
name|RSGlobalDescriptor
argument_list|(
argument|const RSModuleDescriptor *module
argument_list|,
argument|llvm::StringRef name
argument_list|)
block|:
name|m_module
argument_list|(
name|module
argument_list|)
operator|,
name|m_name
argument_list|(
argument|name
argument_list|)
block|{}
name|void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|RSModuleDescriptor
modifier|*
name|m_module
decl_stmt|;
name|ConstString
name|m_name
decl_stmt|;
block|}
struct|;
struct|struct
name|RSReductionDescriptor
block|{
name|RSReductionDescriptor
argument_list|(
argument|const RSModuleDescriptor *module
argument_list|,
argument|uint32_t sig
argument_list|,
argument|uint32_t accum_data_size
argument_list|,
argument|llvm::StringRef name
argument_list|,
argument|llvm::StringRef init_name
argument_list|,
argument|llvm::StringRef accum_name
argument_list|,
argument|llvm::StringRef comb_name
argument_list|,
argument|llvm::StringRef outc_name
argument_list|,
argument|llvm::StringRef halter_name =
literal|"."
argument_list|)
block|:
name|m_module
argument_list|(
name|module
argument_list|)
operator|,
name|m_reduce_name
argument_list|(
name|name
argument_list|)
operator|,
name|m_init_name
argument_list|(
name|init_name
argument_list|)
operator|,
name|m_accum_name
argument_list|(
name|accum_name
argument_list|)
operator|,
name|m_comb_name
argument_list|(
name|comb_name
argument_list|)
operator|,
name|m_outc_name
argument_list|(
name|outc_name
argument_list|)
operator|,
name|m_halter_name
argument_list|(
argument|halter_name
argument_list|)
block|{
comment|// TODO Check whether the combiner is an autogenerated name, and track
comment|// this
block|}
name|void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|RSModuleDescriptor
modifier|*
name|m_module
decl_stmt|;
name|ConstString
name|m_reduce_name
decl_stmt|;
comment|// This is the name given to the general reduction
comment|// as a group as passed to pragma
comment|// reduce(m_reduce_name). There is no kernel function with this name
name|ConstString
name|m_init_name
decl_stmt|;
comment|// The name of the initializer name. "." if no
comment|// initializer given
name|ConstString
name|m_accum_name
decl_stmt|;
comment|// The accumulator function name. "." if not given
name|ConstString
name|m_comb_name
decl_stmt|;
comment|// The name of the combiner function. If this was not
comment|// given, a name is generated by the
comment|// compiler. TODO
name|ConstString
name|m_outc_name
decl_stmt|;
comment|// The name of the outconverter
name|ConstString
name|m_halter_name
decl_stmt|;
comment|// The name of the halter function. XXX This is not
comment|// yet specified by the RenderScript
comment|// compiler or runtime, and its semantics and existence is still under
comment|// discussion by the
comment|// RenderScript Contributors
name|RSSlot
name|m_accum_sig
decl_stmt|;
comment|// metatdata signature for this reduction (bitwise mask of
comment|// type information (see
comment|// libbcc/include/bcinfo/MetadataExtractor.h
name|uint32_t
name|m_accum_data_size
decl_stmt|;
comment|// Data size of the accumulator function input
name|bool
name|m_comb_name_generated
decl_stmt|;
comment|// Was the combiner name generated by the compiler
block|}
struct|;
name|class
name|RSModuleDescriptor
block|{
name|std
operator|::
name|string
name|m_slang_version
expr_stmt|;
name|std
operator|::
name|string
name|m_bcc_version
expr_stmt|;
name|bool
name|ParseVersionInfo
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|bool
name|ParseExportForeachCount
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|bool
name|ParseExportVarCount
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|bool
name|ParseExportReduceCount
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|bool
name|ParseBuildChecksum
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|bool
name|ParsePragmaCount
argument_list|(
name|llvm
operator|::
name|StringRef
operator|*
argument_list|,
name|size_t
name|n_lines
argument_list|)
decl_stmt|;
name|public
label|:
name|RSModuleDescriptor
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module
argument_list|)
operator|:
name|m_module
argument_list|(
argument|module
argument_list|)
block|{}
operator|~
name|RSModuleDescriptor
argument_list|()
operator|=
expr|default
expr_stmt|;
name|bool
name|ParseRSInfo
parameter_list|()
function_decl|;
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|strm
argument_list|)
decl|const
decl_stmt|;
name|void
name|WarnIfVersionMismatch
argument_list|(
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|lldb
operator|::
name|ModuleSP
name|m_module
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSKernelDescriptor
operator|>
name|m_kernels
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSGlobalDescriptor
operator|>
name|m_globals
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSReductionDescriptor
operator|>
name|m_reductions
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|std
operator|::
name|string
operator|>
name|m_pragmas
expr_stmt|;
name|std
operator|::
name|string
name|m_resname
expr_stmt|;
block|}
empty_stmt|;
struct|struct
name|RSScriptGroupDescriptor
block|{
struct|struct
name|Kernel
block|{
name|ConstString
name|m_name
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_addr
expr_stmt|;
block|}
struct|;
name|ConstString
name|m_name
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Kernel
operator|>
name|m_kernels
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|RSScriptGroupDescriptorSP
operator|>
name|RSScriptGroupList
expr_stmt|;
name|class
name|RSScriptGroupBreakpointResolver
range|:
name|public
name|BreakpointResolver
block|{
name|public
operator|:
name|RSScriptGroupBreakpointResolver
argument_list|(
argument|Breakpoint *bp
argument_list|,
argument|const ConstString&name
argument_list|,
argument|const RSScriptGroupList&groups
argument_list|,
argument|bool stop_on_all
argument_list|)
operator|:
name|BreakpointResolver
argument_list|(
name|bp
argument_list|,
name|BreakpointResolver
operator|::
name|NameResolver
argument_list|)
block|,
name|m_group_name
argument_list|(
name|name
argument_list|)
block|,
name|m_script_groups
argument_list|(
name|groups
argument_list|)
block|,
name|m_stop_on_all
argument_list|(
argument|stop_on_all
argument_list|)
block|{}
name|void
name|GetDescription
argument_list|(
argument|Stream *strm
argument_list|)
name|override
block|{
if|if
condition|(
name|strm
condition|)
name|strm
operator|->
name|Printf
argument_list|(
literal|"RenderScript ScriptGroup breakpoint for '%s'"
argument_list|,
name|m_group_name
operator|.
name|AsCString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|Dump
argument_list|(
argument|Stream *s
argument_list|)
specifier|const
name|override
block|{}
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool containing
argument_list|)
name|override
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|{
return|return
name|Searcher
operator|::
name|eDepthModule
return|;
block|}
name|lldb
operator|::
name|BreakpointResolverSP
name|CopyForBreakpoint
argument_list|(
argument|Breakpoint&breakpoint
argument_list|)
name|override
block|{
name|lldb
operator|::
name|BreakpointResolverSP
name|ret_sp
argument_list|(
argument|new RSScriptGroupBreakpointResolver(&breakpoint, m_group_name, m_script_groups, m_stop_on_all)
argument_list|)
block|;
return|return
name|ret_sp
return|;
block|}
name|protected
operator|:
specifier|const
name|RSScriptGroupDescriptorSP
name|FindScriptGroup
argument_list|(
argument|const ConstString&name
argument_list|)
specifier|const
block|{
for|for
control|(
name|auto
name|sg
range|:
name|m_script_groups
control|)
block|{
if|if
condition|(
name|ConstString
operator|::
name|Compare
argument_list|(
name|sg
operator|->
name|m_name
argument_list|,
name|name
argument_list|)
operator|==
literal|0
condition|)
return|return
name|sg
return|;
block|}
return|return
name|RSScriptGroupDescriptorSP
argument_list|()
return|;
block|}
name|ConstString
name|m_group_name
block|;
specifier|const
name|RSScriptGroupList
operator|&
name|m_script_groups
block|;
name|bool
name|m_stop_on_all
block|; }
decl_stmt|;
block|}
comment|// namespace lldb_renderscript
name|class
name|RenderScriptRuntime
range|:
name|public
name|lldb_private
operator|::
name|CPPLanguageRuntime
block|{
name|public
operator|:
expr|enum
name|ModuleKind
block|{
name|eModuleKindIgnored
block|,
name|eModuleKindLibRS
block|,
name|eModuleKindDriver
block|,
name|eModuleKindImpl
block|,
name|eModuleKindKernelObj
block|}
block|;
operator|~
name|RenderScriptRuntime
argument_list|()
name|override
block|;
comment|//------------------------------------------------------------------
comment|// Static Functions
comment|//------------------------------------------------------------------
specifier|static
name|void
name|Initialize
argument_list|()
block|;
specifier|static
name|void
name|Terminate
argument_list|()
block|;
specifier|static
name|lldb_private
operator|::
name|LanguageRuntime
operator|*
name|CreateInstance
argument_list|(
argument|Process *process
argument_list|,
argument|lldb::LanguageType language
argument_list|)
block|;
specifier|static
name|lldb
operator|::
name|CommandObjectSP
name|GetCommandObject
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
block|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
block|;
specifier|static
name|bool
name|IsRenderScriptModule
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
specifier|static
name|ModuleKind
name|GetModuleKind
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
specifier|static
name|void
name|ModulesDidLoad
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|,
specifier|const
name|ModuleList
operator|&
name|module_list
argument_list|)
block|;
name|bool
name|IsVTableName
argument_list|(
argument|const char *name
argument_list|)
name|override
block|;
name|bool
name|GetDynamicTypeAndAddress
argument_list|(
argument|ValueObject&in_value
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|,
argument|TypeAndOrName&class_type_or_name
argument_list|,
argument|Address&address
argument_list|,
argument|Value::ValueType&value_type
argument_list|)
name|override
block|;
name|TypeAndOrName
name|FixUpDynamicType
argument_list|(
argument|const TypeAndOrName&type_and_or_name
argument_list|,
argument|ValueObject&static_value
argument_list|)
name|override
block|;
name|bool
name|CouldHaveDynamicValue
argument_list|(
argument|ValueObject&in_value
argument_list|)
name|override
block|;
name|lldb
operator|::
name|BreakpointResolverSP
name|CreateExceptionResolver
argument_list|(
argument|Breakpoint *bp
argument_list|,
argument|bool catch_bp
argument_list|,
argument|bool throw_bp
argument_list|)
name|override
block|;
name|bool
name|LoadModule
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
name|void
name|DumpModules
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|DumpContexts
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|DumpKernels
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|bool
name|DumpAllocation
argument_list|(
argument|Stream&strm
argument_list|,
argument|StackFrame *frame_ptr
argument_list|,
argument|const uint32_t id
argument_list|)
block|;
name|void
name|ListAllocations
argument_list|(
argument|Stream&strm
argument_list|,
argument|StackFrame *frame_ptr
argument_list|,
argument|const uint32_t index
argument_list|)
block|;
name|bool
name|RecomputeAllAllocations
argument_list|(
name|Stream
operator|&
name|strm
argument_list|,
name|StackFrame
operator|*
name|frame_ptr
argument_list|)
block|;
name|bool
name|PlaceBreakpointOnKernel
argument_list|(
argument|lldb::TargetSP target
argument_list|,
argument|Stream&messages
argument_list|,
argument|const char *name
argument_list|,
argument|const lldb_renderscript::RSCoordinate *coords = nullptr
argument_list|)
block|;
name|bool
name|PlaceBreakpointOnReduction
argument_list|(
argument|lldb::TargetSP target
argument_list|,
argument|Stream&messages
argument_list|,
argument|const char *reduce_name
argument_list|,
argument|const lldb_renderscript::RSCoordinate *coords = nullptr
argument_list|,
argument|int kernel_types = ~(
literal|0
argument|)
argument_list|)
block|;
name|bool
name|PlaceBreakpointOnScriptGroup
argument_list|(
argument|lldb::TargetSP target
argument_list|,
argument|Stream&strm
argument_list|,
argument|const ConstString&name
argument_list|,
argument|bool stop_on_all
argument_list|)
block|;
name|void
name|SetBreakAllKernels
argument_list|(
argument|bool do_break
argument_list|,
argument|lldb::TargetSP target
argument_list|)
block|;
name|void
name|DumpStatus
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|ModulesDidLoad
argument_list|(
argument|const ModuleList&module_list
argument_list|)
name|override
block|;
name|bool
name|LoadAllocation
argument_list|(
argument|Stream&strm
argument_list|,
argument|const uint32_t alloc_id
argument_list|,
argument|const char *filename
argument_list|,
argument|StackFrame *frame_ptr
argument_list|)
block|;
name|bool
name|SaveAllocation
argument_list|(
argument|Stream&strm
argument_list|,
argument|const uint32_t alloc_id
argument_list|,
argument|const char *filename
argument_list|,
argument|StackFrame *frame_ptr
argument_list|)
block|;
name|void
name|Update
argument_list|()
block|;
name|void
name|Initiate
argument_list|()
block|;
specifier|const
name|lldb_renderscript
operator|::
name|RSScriptGroupList
operator|&
name|GetScriptGroups
argument_list|()
specifier|const
block|{
return|return
name|m_scriptGroups
return|;
block|}
block|;
name|bool
name|IsKnownKernel
argument_list|(
argument|const ConstString&name
argument_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|module
range|:
name|m_rsmodules
control|)
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|kernel
range|:
name|module
operator|->
name|m_kernels
control|)
if|if
condition|(
name|kernel
operator|.
name|m_name
operator|==
name|name
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
comment|//------------------------------------------------------------------
comment|// PluginInterface protocol
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|ConstString
name|GetPluginName
argument_list|()
name|override
expr_stmt|;
name|uint32_t
name|GetPluginVersion
argument_list|()
name|override
expr_stmt|;
specifier|static
name|bool
name|GetKernelCoordinate
argument_list|(
name|lldb_renderscript
operator|::
name|RSCoordinate
operator|&
name|coord
argument_list|,
name|Thread
operator|*
name|thread_ptr
argument_list|)
decl_stmt|;
name|bool
name|ResolveKernelName
argument_list|(
name|lldb
operator|::
name|addr_t
name|kernel_address
argument_list|,
name|ConstString
operator|&
name|name
argument_list|)
decl_stmt|;
name|protected
label|:
struct_decl|struct
name|ScriptDetails
struct_decl|;
struct_decl|struct
name|AllocationDetails
struct_decl|;
struct_decl|struct
name|Element
struct_decl|;
name|lldb_renderscript
operator|::
name|RSScriptGroupList
name|m_scriptGroups
expr_stmt|;
name|void
name|InitSearchFilter
argument_list|(
name|lldb
operator|::
name|TargetSP
name|target
argument_list|)
block|{
if|if
condition|(
operator|!
name|m_filtersp
condition|)
name|m_filtersp
operator|.
name|reset
argument_list|(
argument|new SearchFilterForUnconstrainedSearches(target)
argument_list|)
expr_stmt|;
block|}
name|void
name|FixupScriptDetails
argument_list|(
name|lldb_renderscript
operator|::
name|RSModuleDescriptorSP
name|rsmodule_sp
argument_list|)
decl_stmt|;
name|void
name|LoadRuntimeHooks
argument_list|(
name|lldb
operator|::
name|ModuleSP
name|module
argument_list|,
name|ModuleKind
name|kind
argument_list|)
decl_stmt|;
name|bool
name|RefreshAllocation
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
name|bool
name|EvalRSExpression
parameter_list|(
specifier|const
name|char
modifier|*
name|expression
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|,
name|uint64_t
modifier|*
name|result
parameter_list|)
function_decl|;
name|lldb
operator|::
name|BreakpointSP
name|CreateScriptGroupBreakpoint
argument_list|(
argument|const ConstString&name
argument_list|,
argument|bool multi
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|BreakpointSP
name|CreateKernelBreakpoint
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|BreakpointSP
name|CreateReductionBreakpoint
argument_list|(
argument|const ConstString&name
argument_list|,
argument|int kernel_types
argument_list|)
expr_stmt|;
name|void
name|BreakOnModuleKernels
argument_list|(
specifier|const
name|lldb_renderscript
operator|::
name|RSModuleDescriptorSP
name|rsmodule_sp
argument_list|)
decl_stmt|;
struct_decl|struct
name|RuntimeHook
struct_decl|;
typedef|typedef
name|void
argument_list|(
name|RenderScriptRuntime
operator|::
operator|*
name|CaptureStateFn
argument_list|)
argument_list|(
name|RuntimeHook
operator|*
name|hook_info
argument_list|,
name|ExecutionContext
operator|&
name|context
argument_list|)
expr_stmt|;
comment|// Please do this!
struct|struct
name|HookDefn
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|symbol_name_m32
decl_stmt|;
comment|// mangled name for the 32 bit architectures
specifier|const
name|char
modifier|*
name|symbol_name_m64
decl_stmt|;
comment|// mangled name for the 64 bit archs
name|uint32_t
name|version
decl_stmt|;
name|ModuleKind
name|kind
decl_stmt|;
name|CaptureStateFn
name|grabber
decl_stmt|;
block|}
struct|;
struct|struct
name|RuntimeHook
block|{
name|lldb
operator|::
name|addr_t
name|address
expr_stmt|;
specifier|const
name|HookDefn
modifier|*
name|defn
decl_stmt|;
name|lldb
operator|::
name|BreakpointSP
name|bp_sp
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RuntimeHook
operator|>
name|RuntimeHookSP
expr_stmt|;
name|lldb
operator|::
name|ModuleSP
name|m_libRS
expr_stmt|;
name|lldb
operator|::
name|ModuleSP
name|m_libRSDriver
expr_stmt|;
name|lldb
operator|::
name|ModuleSP
name|m_libRSCpuRef
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|lldb_renderscript
operator|::
name|RSModuleDescriptorSP
operator|>
name|m_rsmodules
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|ScriptDetails
operator|>>
name|m_scripts
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|AllocationDetails
operator|>>
name|m_allocations
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb_renderscript
operator|::
name|RSModuleDescriptorSP
operator|>
name|m_scriptMappings
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|RuntimeHookSP
operator|>
name|m_runtimeHooks
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|user_id_t
operator|,
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_renderscript
operator|::
name|RSCoordinate
operator|>>
name|m_conditional_breaks
expr_stmt|;
name|lldb
operator|::
name|SearchFilterSP
name|m_filtersp
expr_stmt|;
comment|// Needed to create breakpoints through Target API
name|bool
name|m_initiated
decl_stmt|;
name|bool
name|m_debuggerPresentFlagged
decl_stmt|;
name|bool
name|m_breakAllKernels
decl_stmt|;
specifier|static
specifier|const
name|HookDefn
name|s_runtimeHookDefns
index|[]
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|s_runtimeHookCount
decl_stmt|;
name|LLVMUserExpression
operator|::
name|IRPasses
operator|*
name|m_ir_passes
expr_stmt|;
name|private
label|:
name|RenderScriptRuntime
argument_list|(
name|Process
operator|*
name|process
argument_list|)
expr_stmt|;
comment|// Call CreateInstance instead.
specifier|static
name|bool
name|HookCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|StoppointCallbackContext
operator|*
name|ctx
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_id
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_loc_id
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|KernelBreakpointHit
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|StoppointCallbackContext
operator|*
name|ctx
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_id
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_loc_id
argument_list|)
decl_stmt|;
name|void
name|HookCallback
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
comment|// Callback function when 'debugHintScriptGroup2' executes on the target.
name|void
name|CaptureDebugHintScriptGroup2
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureScriptInit
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureAllocationInit
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureAllocationDestroy
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureSetGlobalVar
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureScriptInvokeForEachMulti
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|AllocationDetails
modifier|*
name|FindAllocByID
parameter_list|(
name|Stream
modifier|&
name|strm
parameter_list|,
specifier|const
name|uint32_t
name|alloc_id
parameter_list|)
function_decl|;
name|std
operator|::
name|shared_ptr
operator|<
name|uint8_t
operator|>
name|GetAllocationData
argument_list|(
name|AllocationDetails
operator|*
name|alloc
argument_list|,
name|StackFrame
operator|*
name|frame_ptr
argument_list|)
expr_stmt|;
name|void
name|SetElementSize
parameter_list|(
name|Element
modifier|&
name|elem
parameter_list|)
function_decl|;
specifier|static
name|bool
name|GetFrameVarAsUnsigned
argument_list|(
specifier|const
name|lldb
operator|::
name|StackFrameSP
argument_list|,
specifier|const
name|char
operator|*
name|var_name
argument_list|,
name|uint64_t
operator|&
name|val
argument_list|)
decl_stmt|;
name|void
name|FindStructTypeName
parameter_list|(
name|Element
modifier|&
name|elem
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
name|size_t
name|PopulateElementHeaders
argument_list|(
specifier|const
name|std
operator|::
name|shared_ptr
operator|<
name|uint8_t
operator|>
name|header_buffer
argument_list|,
name|size_t
name|offset
argument_list|,
specifier|const
name|Element
operator|&
name|elem
argument_list|)
decl_stmt|;
name|size_t
name|CalculateElementHeaderSize
parameter_list|(
specifier|const
name|Element
modifier|&
name|elem
parameter_list|)
function_decl|;
name|void
name|SetConditional
argument_list|(
name|lldb
operator|::
name|BreakpointSP
name|bp
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|messages
argument_list|,
specifier|const
name|lldb_renderscript
operator|::
name|RSCoordinate
operator|&
name|coord
argument_list|)
decl_stmt|;
comment|//
comment|// Helper functions for jitting the runtime
comment|//
name|bool
name|JITDataPointer
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|,
name|uint32_t
name|x
init|=
literal|0
parameter_list|,
name|uint32_t
name|y
init|=
literal|0
parameter_list|,
name|uint32_t
name|z
init|=
literal|0
parameter_list|)
function_decl|;
name|bool
name|JITTypePointer
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
name|bool
name|JITTypePacked
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
name|bool
name|JITElementPacked
argument_list|(
name|Element
operator|&
name|elem
argument_list|,
specifier|const
name|lldb
operator|::
name|addr_t
name|context
argument_list|,
name|StackFrame
operator|*
name|frame_ptr
argument_list|)
decl_stmt|;
name|bool
name|JITAllocationSize
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
name|bool
name|JITSubelements
argument_list|(
name|Element
operator|&
name|elem
argument_list|,
specifier|const
name|lldb
operator|::
name|addr_t
name|context
argument_list|,
name|StackFrame
operator|*
name|frame_ptr
argument_list|)
decl_stmt|;
name|bool
name|JITAllocationStride
parameter_list|(
name|AllocationDetails
modifier|*
name|alloc
parameter_list|,
name|StackFrame
modifier|*
name|frame_ptr
parameter_list|)
function_decl|;
comment|// Search for a script detail object using a target address.
comment|// If a script does not currently exist this function will return nullptr.
comment|// If 'create' is true and there is no previous script with this address,
comment|// then a new Script detail object will be created for this address and
comment|// returned.
name|ScriptDetails
modifier|*
name|LookUpScript
argument_list|(
name|lldb
operator|::
name|addr_t
name|address
argument_list|,
name|bool
name|create
argument_list|)
decl_stmt|;
comment|// Search for a previously saved allocation detail object using a target
comment|// address.
comment|// If an allocation does not exist for this address then nullptr will be
comment|// returned.
name|AllocationDetails
modifier|*
name|LookUpAllocation
argument_list|(
name|lldb
operator|::
name|addr_t
name|address
argument_list|)
decl_stmt|;
comment|// Creates a new allocation with the specified address assigning a new ID and
comment|// removes
comment|// any previous stored allocation which has the same address.
name|AllocationDetails
modifier|*
name|CreateAllocation
argument_list|(
name|lldb
operator|::
name|addr_t
name|address
argument_list|)
decl_stmt|;
name|bool
name|GetOverrideExprOptions
argument_list|(
name|clang
operator|::
name|TargetOptions
operator|&
name|prototype
argument_list|)
name|override
decl_stmt|;
name|bool
name|GetIRPasses
argument_list|(
name|LLVMUserExpression
operator|::
name|IRPasses
operator|&
name|passes
argument_list|)
name|override
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_RenderScriptRuntime_h_
end_comment

end_unit

