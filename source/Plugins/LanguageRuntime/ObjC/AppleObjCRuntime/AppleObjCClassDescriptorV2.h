begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AppleObjCClassDescriptorV2.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_AppleObjCClassDescriptorV2_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_AppleObjCClassDescriptorV2_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/ObjCLanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"AppleObjCRuntimeV2.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ClassDescriptorV2
range|:
name|public
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptor
block|{
name|public
operator|:
name|friend
name|class
name|lldb_private
operator|::
name|AppleObjCRuntimeV2
block|;
operator|~
name|ClassDescriptorV2
argument_list|()
name|override
operator|=
expr|default
block|;
name|ConstString
name|GetClassName
argument_list|()
name|override
block|;
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
name|GetSuperclass
argument_list|()
name|override
block|;
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
name|GetMetaclass
argument_list|()
specifier|const
name|override
block|;
name|bool
name|IsValid
argument_list|()
name|override
block|{
return|return
name|true
return|;
comment|// any Objective-C v2 runtime class descriptor we vend is valid
block|}
comment|// a custom descriptor is used for tagged pointers
name|bool
name|GetTaggedPointerInfo
argument_list|(
argument|uint64_t* info_bits = nullptr
argument_list|,
argument|uint64_t* value_bits = nullptr
argument_list|,
argument|uint64_t* payload = nullptr
argument_list|)
name|override
block|{
return|return
name|false
return|;
block|}
name|uint64_t
name|GetInstanceSize
argument_list|()
name|override
block|;
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|GetISA
argument_list|()
name|override
block|{
return|return
name|m_objc_class_ptr
return|;
block|}
name|bool
name|Describe
argument_list|(
argument|std::function<void (ObjCLanguageRuntime::ObjCISA)> const&superclass_func
argument_list|,
argument|std::function<bool (const char *, const char *)> const&instance_method_func
argument_list|,
argument|std::function<bool (const char *, const char *)> const&class_method_func
argument_list|,
argument|std::function<bool (const char *, const char *,              lldb::addr_t, uint64_t)> const&ivar_func
argument_list|)
specifier|const
name|override
block|;
name|size_t
name|GetNumIVars
argument_list|()
name|override
block|{
name|GetIVarInformation
argument_list|()
block|;
return|return
name|m_ivars_storage
operator|.
name|size
argument_list|()
return|;
block|}
name|iVarDescriptor
name|GetIVarAtIndex
argument_list|(
argument|size_t idx
argument_list|)
name|override
block|{
if|if
condition|(
name|idx
operator|>=
name|GetNumIVars
argument_list|()
condition|)
return|return
name|iVarDescriptor
argument_list|()
return|;
return|return
name|m_ivars_storage
index|[
name|idx
index|]
return|;
block|}
name|protected
label|:
name|void
name|GetIVarInformation
parameter_list|()
function_decl|;
name|private
label|:
specifier|static
specifier|const
name|uint32_t
name|RW_REALIZED
init|=
operator|(
literal|1
operator|<<
literal|31
operator|)
decl_stmt|;
struct|struct
name|objc_class_t
block|{
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|m_isa
expr_stmt|;
comment|// The class's metaclass.
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|m_superclass
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_cache_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_vtable_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_data_ptr
expr_stmt|;
name|uint8_t
name|m_flags
decl_stmt|;
name|objc_class_t
argument_list|()
operator|:
name|m_isa
argument_list|(
literal|0
argument_list|)
operator|,
name|m_superclass
argument_list|(
literal|0
argument_list|)
operator|,
name|m_cache_ptr
argument_list|(
literal|0
argument_list|)
operator|,
name|m_vtable_ptr
argument_list|(
literal|0
argument_list|)
operator|,
name|m_data_ptr
argument_list|(
literal|0
argument_list|)
operator|,
name|m_flags
argument_list|(
literal|0
argument_list|)
block|{         }
name|void
name|Clear
argument_list|()
block|{
name|m_isa
operator|=
literal|0
block|;
name|m_superclass
operator|=
literal|0
block|;
name|m_cache_ptr
operator|=
literal|0
block|;
name|m_vtable_ptr
operator|=
literal|0
block|;
name|m_data_ptr
operator|=
literal|0
block|;
name|m_flags
operator|=
literal|0
block|;         }
name|bool
name|Read
argument_list|(
argument|Process *process
argument_list|,
argument|lldb::addr_t addr
argument_list|)
expr_stmt|;
block|}
struct|;
struct|struct
name|class_ro_t
block|{
name|uint32_t
name|m_flags
decl_stmt|;
name|uint32_t
name|m_instanceStart
decl_stmt|;
name|uint32_t
name|m_instanceSize
decl_stmt|;
name|uint32_t
name|m_reserved
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_ivarLayout_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_name_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_baseMethods_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_baseProtocols_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_ivars_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_weakIvarLayout_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_baseProperties_ptr
expr_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
struct|struct
name|class_rw_t
block|{
name|uint32_t
name|m_flags
decl_stmt|;
name|uint32_t
name|m_version
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_ro_ptr
expr_stmt|;
union|union
block|{
name|lldb
operator|::
name|addr_t
name|m_method_list_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_method_lists_ptr
expr_stmt|;
block|}
union|;
name|lldb
operator|::
name|addr_t
name|m_properties_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_protocols_ptr
expr_stmt|;
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|m_firstSubclass
expr_stmt|;
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|m_nextSiblingClass
expr_stmt|;
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
struct|struct
name|method_list_t
block|{
name|uint32_t
name|m_entsize
decl_stmt|;
name|uint32_t
name|m_count
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_first_ptr
expr_stmt|;
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
struct|struct
name|method_t
block|{
name|lldb
operator|::
name|addr_t
name|m_name_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_types_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_imp_ptr
expr_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|std
operator|::
name|string
name|m_types
expr_stmt|;
specifier|static
name|size_t
name|GetSize
parameter_list|(
name|Process
modifier|*
name|process
parameter_list|)
block|{
name|size_t
name|ptr_size
init|=
name|process
operator|->
name|GetAddressByteSize
argument_list|()
decl_stmt|;
return|return
name|ptr_size
comment|// SEL name;
operator|+
name|ptr_size
comment|// const char *types;
operator|+
name|ptr_size
return|;
comment|// IMP imp;
block|}
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
struct|struct
name|ivar_list_t
block|{
name|uint32_t
name|m_entsize
decl_stmt|;
name|uint32_t
name|m_count
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_first_ptr
expr_stmt|;
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
struct|struct
name|ivar_t
block|{
name|lldb
operator|::
name|addr_t
name|m_offset_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_name_ptr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_type_ptr
expr_stmt|;
name|uint32_t
name|m_alignment
decl_stmt|;
name|uint32_t
name|m_size
decl_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|std
operator|::
name|string
name|m_type
expr_stmt|;
specifier|static
name|size_t
name|GetSize
parameter_list|(
name|Process
modifier|*
name|process
parameter_list|)
block|{
name|size_t
name|ptr_size
init|=
name|process
operator|->
name|GetAddressByteSize
argument_list|()
decl_stmt|;
return|return
name|ptr_size
comment|// uintptr_t *offset;
operator|+
name|ptr_size
comment|// const char *name;
operator|+
name|ptr_size
comment|// const char *type;
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
comment|// uint32_t alignment;
operator|+
sizeof|sizeof
argument_list|(
name|uint32_t
argument_list|)
return|;
comment|// uint32_t size;
block|}
name|bool
name|Read
argument_list|(
name|Process
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
block|}
struct|;
name|class
name|iVarsStorage
block|{
name|public
label|:
name|iVarsStorage
argument_list|()
expr_stmt|;
name|size_t
name|size
parameter_list|()
function_decl|;
name|iVarDescriptor
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
name|void
name|fill
parameter_list|(
name|AppleObjCRuntimeV2
modifier|&
name|runtime
parameter_list|,
name|ClassDescriptorV2
modifier|&
name|descriptor
parameter_list|)
function_decl|;
name|private
label|:
name|bool
name|m_filled
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|iVarDescriptor
operator|>
name|m_ivars
expr_stmt|;
name|std
operator|::
name|recursive_mutex
name|m_mutex
expr_stmt|;
block|}
empty_stmt|;
comment|// The constructor should only be invoked by the runtime as it builds its caches
comment|// or populates them.  A ClassDescriptorV2 should only ever exist in a cache.
name|ClassDescriptorV2
argument_list|(
argument|AppleObjCRuntimeV2&runtime
argument_list|,
argument|ObjCLanguageRuntime::ObjCISA isa
argument_list|,
argument|const char *name
argument_list|)
block|:
name|m_runtime
argument_list|(
name|runtime
argument_list|)
operator|,
name|m_objc_class_ptr
argument_list|(
name|isa
argument_list|)
operator|,
name|m_name
argument_list|(
name|name
argument_list|)
operator|,
name|m_ivars_storage
argument_list|()
block|{     }
name|bool
name|Read_objc_class
argument_list|(
argument|Process* process
argument_list|,
argument|std::unique_ptr<objc_class_t>&objc_class
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|Read_class_row
argument_list|(
name|Process
operator|*
name|process
argument_list|,
specifier|const
name|objc_class_t
operator|&
name|objc_class
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|class_ro_t
operator|>
operator|&
name|class_ro
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|class_rw_t
operator|>
operator|&
name|class_rw
argument_list|)
decl|const
decl_stmt|;
name|AppleObjCRuntimeV2
modifier|&
name|m_runtime
decl_stmt|;
comment|// The runtime, so we can read information lazily.
name|lldb
operator|::
name|addr_t
name|m_objc_class_ptr
expr_stmt|;
comment|// The address of the objc_class_t.  (I.e., objects of this class type have this as their ISA)
name|ConstString
name|m_name
decl_stmt|;
comment|// May be NULL
name|iVarsStorage
name|m_ivars_storage
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// tagged pointer descriptor
end_comment

begin_decl_stmt
name|class
name|ClassDescriptorV2Tagged
range|:
name|public
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptor
block|{
name|public
operator|:
name|ClassDescriptorV2Tagged
argument_list|(
argument|ConstString class_name
argument_list|,
argument|uint64_t payload
argument_list|)
block|{
name|m_name
operator|=
name|class_name
block|;
if|if
condition|(
operator|!
name|m_name
condition|)
block|{
name|m_valid
operator|=
name|false
expr_stmt|;
return|return;
block|}
name|m_valid
operator|=
name|true
expr_stmt|;
name|m_payload
operator|=
name|payload
block|;
name|m_info_bits
operator|=
operator|(
name|m_payload
operator|&
literal|0xF0ULL
operator|)
operator|>>
literal|4
block|;
name|m_value_bits
operator|=
operator|(
name|m_payload
operator|&
operator|~
literal|0x0000000000000000FFULL
operator|)
operator|>>
literal|8
block|;     }
name|ClassDescriptorV2Tagged
argument_list|(
argument|ObjCLanguageRuntime::ClassDescriptorSP actual_class_sp
argument_list|,
argument|uint64_t payload
argument_list|)
block|{
if|if
condition|(
operator|!
name|actual_class_sp
condition|)
block|{
name|m_valid
operator|=
name|false
expr_stmt|;
return|return;
block|}
name|m_name
operator|=
name|actual_class_sp
operator|->
name|GetClassName
argument_list|()
expr_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
operator|!
name|m_name
condition|)
block|{
name|m_valid
operator|=
name|false
expr_stmt|;
return|return;
block|}
end_if

begin_expr_stmt
name|m_valid
operator|=
name|true
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|m_payload
operator|=
name|payload
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|m_info_bits
operator|=
operator|(
name|m_payload
operator|&
literal|0x0FULL
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|m_value_bits
operator|=
operator|(
name|m_payload
operator|&
operator|~
literal|0x0FULL
operator|)
operator|>>
literal|4
expr_stmt|;
end_expr_stmt

begin_macro
unit|}          ~
name|ClassDescriptorV2Tagged
argument_list|()
end_macro

begin_expr_stmt
name|override
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_function
name|ConstString
name|GetClassName
parameter_list|()
function|override
block|{
return|return
name|m_name
return|;
block|}
end_function

begin_expr_stmt
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
name|GetSuperclass
argument_list|()
name|override
block|{
comment|// tagged pointers can represent a class that has a superclass, but since that information is not
comment|// stored in the object itself, we would have to query the runtime to discover the hierarchy
comment|// for the time being, we skip this step in the interest of static discovery
return|return
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
name|GetMetaclass
argument_list|()
specifier|const
name|override
block|{
return|return
name|ObjCLanguageRuntime
operator|::
name|ClassDescriptorSP
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|bool
name|IsValid
parameter_list|()
function|override
block|{
return|return
name|m_valid
return|;
block|}
end_function

begin_function
name|bool
name|IsKVO
parameter_list|()
function|override
block|{
return|return
name|false
return|;
comment|// tagged pointers are not KVO'ed
block|}
end_function

begin_function
name|bool
name|IsCFType
parameter_list|()
function|override
block|{
return|return
name|false
return|;
comment|// tagged pointers are not CF objects
block|}
end_function

begin_function
name|bool
name|GetTaggedPointerInfo
parameter_list|(
name|uint64_t
modifier|*
name|info_bits
init|=
name|nullptr
parameter_list|,
name|uint64_t
modifier|*
name|value_bits
init|=
name|nullptr
parameter_list|,
name|uint64_t
modifier|*
name|payload
init|=
name|nullptr
parameter_list|)
function|override
block|{
if|if
condition|(
name|info_bits
condition|)
operator|*
name|info_bits
operator|=
name|GetInfoBits
argument_list|()
expr_stmt|;
if|if
condition|(
name|value_bits
condition|)
operator|*
name|value_bits
operator|=
name|GetValueBits
argument_list|()
expr_stmt|;
if|if
condition|(
name|payload
condition|)
operator|*
name|payload
operator|=
name|GetPayload
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
name|uint64_t
name|GetInstanceSize
parameter_list|()
function|override
block|{
return|return
operator|(
name|IsValid
argument_list|()
condition|?
name|m_pointer_size
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|ObjCLanguageRuntime
operator|::
name|ObjCISA
name|GetISA
argument_list|()
name|override
block|{
return|return
literal|0
return|;
comment|// tagged pointers have no ISA
block|}
end_expr_stmt

begin_comment
comment|// these calls are not part of any formal tagged pointers specification
end_comment

begin_function
name|virtual
name|uint64_t
name|GetValueBits
parameter_list|()
block|{
return|return
operator|(
name|IsValid
argument_list|()
condition|?
name|m_value_bits
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|virtual
name|uint64_t
name|GetInfoBits
parameter_list|()
block|{
return|return
operator|(
name|IsValid
argument_list|()
condition|?
name|m_info_bits
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|virtual
name|uint64_t
name|GetPayload
parameter_list|()
block|{
return|return
operator|(
name|IsValid
argument_list|()
condition|?
name|m_payload
else|:
literal|0
operator|)
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|ConstString
name|m_name
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint8_t
name|m_pointer_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|m_valid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|m_info_bits
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|m_value_bits
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|m_payload
decl_stmt|;
end_decl_stmt

begin_comment
unit|};      }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_AppleObjCClassDescriptorV2_h_
end_comment

end_unit

