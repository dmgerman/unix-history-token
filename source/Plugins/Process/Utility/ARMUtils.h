begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARMUtils.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_ARMUtils_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_ARMUtils_h_
end_define

begin_include
include|#
directive|include
file|"ARMDefines.h"
end_include

begin_include
include|#
directive|include
file|"InstructionUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MathExtras.h"
end_include

begin_comment
comment|// for SignExtend64 template function
end_comment

begin_comment
comment|// Common utilities for the ARM/Thumb Instruction Set Architecture.
end_comment

begin_decl_stmt
name|namespace
name|lldb_private
block|{
specifier|static
specifier|inline
name|uint32_t
name|Align
parameter_list|(
name|uint32_t
name|val
parameter_list|,
name|uint32_t
name|alignment
parameter_list|)
block|{
return|return
name|alignment
operator|*
operator|(
name|val
operator|/
name|alignment
operator|)
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|DecodeImmShift
parameter_list|(
specifier|const
name|uint32_t
name|type
parameter_list|,
specifier|const
name|uint32_t
name|imm5
parameter_list|,
name|ARM_ShifterType
modifier|&
name|shift_t
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
default|default:
comment|//assert(0&& "Invalid shift type");
case|case
literal|0
case|:
name|shift_t
operator|=
name|SRType_LSL
expr_stmt|;
return|return
name|imm5
return|;
case|case
literal|1
case|:
name|shift_t
operator|=
name|SRType_LSR
expr_stmt|;
return|return
operator|(
name|imm5
operator|==
literal|0
condition|?
literal|32
else|:
name|imm5
operator|)
return|;
case|case
literal|2
case|:
name|shift_t
operator|=
name|SRType_ASR
expr_stmt|;
return|return
operator|(
name|imm5
operator|==
literal|0
condition|?
literal|32
else|:
name|imm5
operator|)
return|;
case|case
literal|3
case|:
if|if
condition|(
name|imm5
operator|==
literal|0
condition|)
block|{
name|shift_t
operator|=
name|SRType_RRX
expr_stmt|;
return|return
literal|1
return|;
block|}
else|else
block|{
name|shift_t
operator|=
name|SRType_ROR
expr_stmt|;
return|return
name|imm5
return|;
block|}
block|}
name|shift_t
operator|=
name|SRType_Invalid
expr_stmt|;
return|return
name|UINT32_MAX
return|;
block|}
comment|// A8.6.35 CMP (register) -- Encoding T3
comment|// Convenience function.
specifier|static
specifier|inline
name|uint32_t
name|DecodeImmShiftThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|ARM_ShifterType
modifier|&
name|shift_t
parameter_list|)
block|{
return|return
name|DecodeImmShift
argument_list|(
name|Bits32
argument_list|(
name|opcode
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|)
argument_list|,
name|Bits32
argument_list|(
name|opcode
argument_list|,
literal|14
argument_list|,
literal|12
argument_list|)
operator|<<
literal|2
operator||
name|Bits32
argument_list|(
name|opcode
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|)
argument_list|,
name|shift_t
argument_list|)
return|;
block|}
comment|// A8.6.35 CMP (register) -- Encoding A1
comment|// Convenience function.
specifier|static
specifier|inline
name|uint32_t
name|DecodeImmShiftARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|ARM_ShifterType
modifier|&
name|shift_t
parameter_list|)
block|{
return|return
name|DecodeImmShift
argument_list|(
name|Bits32
argument_list|(
name|opcode
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|)
argument_list|,
name|Bits32
argument_list|(
name|opcode
argument_list|,
literal|11
argument_list|,
literal|7
argument_list|)
argument_list|,
name|shift_t
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|DecodeImmShift
parameter_list|(
specifier|const
name|ARM_ShifterType
name|shift_t
parameter_list|,
specifier|const
name|uint32_t
name|imm5
parameter_list|)
block|{
name|ARM_ShifterType
name|dont_care
decl_stmt|;
return|return
name|DecodeImmShift
argument_list|(
name|shift_t
argument_list|,
name|imm5
argument_list|,
name|dont_care
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|ARM_ShifterType
name|DecodeRegShift
parameter_list|(
specifier|const
name|uint32_t
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
default|default:
comment|//assert(0&& "Invalid shift type");
return|return
name|SRType_Invalid
return|;
case|case
literal|0
case|:
return|return
name|SRType_LSL
return|;
case|case
literal|1
case|:
return|return
name|SRType_LSR
return|;
case|case
literal|2
case|:
return|return
name|SRType_ASR
return|;
case|case
literal|3
case|:
return|return
name|SRType_ROR
return|;
block|}
block|}
specifier|static
specifier|inline
name|uint32_t
name|LSL_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
block|{
operator|*
name|success
operator|=
name|false
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|carry_out
operator|=
name|amount
operator|<=
literal|32
condition|?
name|Bit32
argument_list|(
name|value
argument_list|,
literal|32
operator|-
name|amount
argument_list|)
else|:
literal|0
expr_stmt|;
return|return
name|value
operator|<<
name|amount
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|LSL
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
return|return
name|value
return|;
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|LSL_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|LSR_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
block|{
operator|*
name|success
operator|=
name|false
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|carry_out
operator|=
name|amount
operator|<=
literal|32
condition|?
name|Bit32
argument_list|(
name|value
argument_list|,
name|amount
operator|-
literal|1
argument_list|)
else|:
literal|0
expr_stmt|;
return|return
name|value
operator|>>
name|amount
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|LSR
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
return|return
name|value
return|;
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|LSR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|ASR_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|==
literal|0
operator|||
name|amount
operator|>
literal|32
condition|)
block|{
operator|*
name|success
operator|=
name|false
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|bool
name|negative
init|=
name|BitIsSet
argument_list|(
name|value
argument_list|,
literal|31
argument_list|)
decl_stmt|;
if|if
condition|(
name|amount
operator|<=
literal|32
condition|)
block|{
name|carry_out
operator|=
name|Bit32
argument_list|(
name|value
argument_list|,
name|amount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int64_t
name|extended
init|=
name|llvm
operator|::
name|SignExtend64
operator|<
literal|32
operator|>
operator|(
name|value
operator|)
decl_stmt|;
return|return
name|UnsignedBits
argument_list|(
name|extended
argument_list|,
name|amount
operator|+
literal|31
argument_list|,
name|amount
argument_list|)
return|;
block|}
else|else
block|{
name|carry_out
operator|=
operator|(
name|negative
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
return|return
operator|(
name|negative
condition|?
literal|0xffffffff
else|:
literal|0
operator|)
return|;
block|}
block|}
specifier|static
specifier|inline
name|uint32_t
name|ASR
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
return|return
name|value
return|;
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|ASR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|ROR_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
block|{
operator|*
name|success
operator|=
name|false
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|uint32_t
name|amt
init|=
name|amount
operator|%
literal|32
decl_stmt|;
name|uint32_t
name|result
init|=
name|Rotr32
argument_list|(
name|value
argument_list|,
name|amt
argument_list|)
decl_stmt|;
name|carry_out
operator|=
name|Bit32
argument_list|(
name|value
argument_list|,
literal|31
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|ROR
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
return|return
name|value
return|;
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|ROR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|RRX_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|carry_in
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|carry_out
operator|=
name|Bit32
argument_list|(
name|value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|Bit32
argument_list|(
name|carry_in
argument_list|,
literal|0
argument_list|)
operator|<<
literal|31
operator||
name|Bits32
argument_list|(
name|value
argument_list|,
literal|31
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|RRX
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
specifier|const
name|uint32_t
name|carry_in
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
operator|*
name|success
operator|=
name|true
expr_stmt|;
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|RRX_C
argument_list|(
name|value
argument_list|,
name|carry_in
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|Shift_C
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
name|ARM_ShifterType
name|type
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
specifier|const
name|uint32_t
name|carry_in
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|SRType_RRX
operator|&&
name|amount
operator|!=
literal|1
condition|)
block|{
operator|*
name|success
operator|=
name|false
expr_stmt|;
return|return
literal|0
return|;
block|}
operator|*
name|success
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|amount
operator|==
literal|0
condition|)
block|{
name|carry_out
operator|=
name|carry_in
expr_stmt|;
return|return
name|value
return|;
block|}
name|uint32_t
name|result
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SRType_LSL
case|:
name|result
operator|=
name|LSL_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|carry_out
argument_list|,
name|success
argument_list|)
expr_stmt|;
break|break;
case|case
name|SRType_LSR
case|:
name|result
operator|=
name|LSR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|carry_out
argument_list|,
name|success
argument_list|)
expr_stmt|;
break|break;
case|case
name|SRType_ASR
case|:
name|result
operator|=
name|ASR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|carry_out
argument_list|,
name|success
argument_list|)
expr_stmt|;
break|break;
case|case
name|SRType_ROR
case|:
name|result
operator|=
name|ROR_C
argument_list|(
name|value
argument_list|,
name|amount
argument_list|,
name|carry_out
argument_list|,
name|success
argument_list|)
expr_stmt|;
break|break;
case|case
name|SRType_RRX
case|:
name|result
operator|=
name|RRX_C
argument_list|(
name|value
argument_list|,
name|carry_in
argument_list|,
name|carry_out
argument_list|,
name|success
argument_list|)
expr_stmt|;
break|break;
default|default:
operator|*
name|success
operator|=
name|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|Shift
parameter_list|(
specifier|const
name|uint32_t
name|value
parameter_list|,
name|ARM_ShifterType
name|type
parameter_list|,
specifier|const
name|uint32_t
name|amount
parameter_list|,
specifier|const
name|uint32_t
name|carry_in
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
block|{
comment|// Don't care about carry out in this case.
name|uint32_t
name|dont_care
decl_stmt|;
name|uint32_t
name|result
init|=
name|Shift_C
argument_list|(
name|value
argument_list|,
name|type
argument_list|,
name|amount
argument_list|,
name|carry_in
argument_list|,
name|dont_care
argument_list|,
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|success
condition|)
return|return
name|result
return|;
else|else
return|return
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|bits
parameter_list|(
specifier|const
name|uint32_t
name|val
parameter_list|,
specifier|const
name|uint32_t
name|msbit
parameter_list|,
specifier|const
name|uint32_t
name|lsbit
parameter_list|)
block|{
return|return
name|Bits32
argument_list|(
name|val
argument_list|,
name|msbit
argument_list|,
name|lsbit
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|bit
parameter_list|(
specifier|const
name|uint32_t
name|val
parameter_list|,
specifier|const
name|uint32_t
name|msbit
parameter_list|)
block|{
return|return
name|bits
argument_list|(
name|val
argument_list|,
name|msbit
argument_list|,
name|msbit
argument_list|)
return|;
block|}
specifier|static
name|uint32_t
name|ror
parameter_list|(
name|uint32_t
name|val
parameter_list|,
name|uint32_t
name|N
parameter_list|,
name|uint32_t
name|shift
parameter_list|)
block|{
name|uint32_t
name|m
init|=
name|shift
operator|%
name|N
decl_stmt|;
return|return
operator|(
name|val
operator|>>
name|m
operator|)
operator||
operator|(
name|val
operator|<<
operator|(
name|N
operator|-
name|m
operator|)
operator|)
return|;
block|}
comment|// (imm32, carry_out) = ARMExpandImm_C(imm12, carry_in)
specifier|static
specifier|inline
name|uint32_t
name|ARMExpandImm_C
parameter_list|(
name|uint32_t
name|opcode
parameter_list|,
name|uint32_t
name|carry_in
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|)
block|{
name|uint32_t
name|imm32
decl_stmt|;
comment|// the expanded result
name|uint32_t
name|imm
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// immediate value
name|uint32_t
name|amt
init|=
literal|2
operator|*
name|bits
argument_list|(
name|opcode
argument_list|,
literal|11
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// rotate amount
if|if
condition|(
name|amt
operator|==
literal|0
condition|)
block|{
name|imm32
operator|=
name|imm
expr_stmt|;
name|carry_out
operator|=
name|carry_in
expr_stmt|;
block|}
else|else
block|{
name|imm32
operator|=
name|ror
argument_list|(
name|imm
argument_list|,
literal|32
argument_list|,
name|amt
argument_list|)
expr_stmt|;
name|carry_out
operator|=
name|Bit32
argument_list|(
name|imm32
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
return|return
name|imm32
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|ARMExpandImm
parameter_list|(
name|uint32_t
name|opcode
parameter_list|)
block|{
comment|// 'carry_in' argument to following function call does not affect the imm32 result.
name|uint32_t
name|carry_in
init|=
literal|0
decl_stmt|;
name|uint32_t
name|carry_out
decl_stmt|;
return|return
name|ARMExpandImm_C
argument_list|(
name|opcode
argument_list|,
name|carry_in
argument_list|,
name|carry_out
argument_list|)
return|;
block|}
comment|// (imm32, carry_out) = ThumbExpandImm_C(imm12, carry_in)
specifier|static
specifier|inline
name|uint32_t
name|ThumbExpandImm_C
parameter_list|(
name|uint32_t
name|opcode
parameter_list|,
name|uint32_t
name|carry_in
parameter_list|,
name|uint32_t
modifier|&
name|carry_out
parameter_list|)
block|{
name|uint32_t
name|imm32
decl_stmt|;
comment|// the expanded result
specifier|const
name|uint32_t
name|i
init|=
name|bit
argument_list|(
name|opcode
argument_list|,
literal|26
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|imm3
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|14
argument_list|,
literal|12
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|abcdefgh
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|imm12
init|=
name|i
operator|<<
literal|11
operator||
name|imm3
operator|<<
literal|8
operator||
name|abcdefgh
decl_stmt|;
if|if
condition|(
name|bits
argument_list|(
name|imm12
argument_list|,
literal|11
argument_list|,
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
switch|switch
condition|(
name|bits
argument_list|(
name|imm12
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|)
condition|)
block|{
default|default:
comment|// Keep static analyzer happy with a default case
case|case
literal|0
case|:
name|imm32
operator|=
name|abcdefgh
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|imm32
operator|=
name|abcdefgh
operator|<<
literal|16
operator||
name|abcdefgh
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|imm32
operator|=
name|abcdefgh
operator|<<
literal|24
operator||
name|abcdefgh
operator|<<
literal|8
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|imm32
operator|=
name|abcdefgh
operator|<<
literal|24
operator||
name|abcdefgh
operator|<<
literal|16
operator||
name|abcdefgh
operator|<<
literal|8
operator||
name|abcdefgh
expr_stmt|;
break|break;
block|}
name|carry_out
operator|=
name|carry_in
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|uint32_t
name|unrotated_value
init|=
literal|0x80
operator||
name|bits
argument_list|(
name|imm12
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|imm32
operator|=
name|ror
argument_list|(
name|unrotated_value
argument_list|,
literal|32
argument_list|,
name|bits
argument_list|(
name|imm12
argument_list|,
literal|11
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|carry_out
operator|=
name|Bit32
argument_list|(
name|imm32
argument_list|,
literal|31
argument_list|)
expr_stmt|;
block|}
return|return
name|imm32
return|;
block|}
specifier|static
specifier|inline
name|uint32_t
name|ThumbExpandImm
parameter_list|(
name|uint32_t
name|opcode
parameter_list|)
block|{
comment|// 'carry_in' argument to following function call does not affect the imm32 result.
name|uint32_t
name|carry_in
init|=
literal|0
decl_stmt|;
name|uint32_t
name|carry_out
decl_stmt|;
return|return
name|ThumbExpandImm_C
argument_list|(
name|opcode
argument_list|,
name|carry_in
argument_list|,
name|carry_out
argument_list|)
return|;
block|}
comment|// imm32 = ZeroExtend(i:imm3:imm8, 32)
specifier|static
specifier|inline
name|uint32_t
name|ThumbImm12
parameter_list|(
name|uint32_t
name|opcode
parameter_list|)
block|{
specifier|const
name|uint32_t
name|i
init|=
name|bit
argument_list|(
name|opcode
argument_list|,
literal|26
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|imm3
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|14
argument_list|,
literal|12
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|imm8
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|const
name|uint32_t
name|imm12
init|=
name|i
operator|<<
literal|11
operator||
name|imm3
operator|<<
literal|8
operator||
name|imm8
decl_stmt|;
return|return
name|imm12
return|;
block|}
comment|// imm32 = ZeroExtend(imm7:'00', 32)
specifier|static
specifier|inline
name|uint32_t
name|ThumbImm7Scaled
parameter_list|(
name|uint32_t
name|opcode
parameter_list|)
block|{
specifier|const
name|uint32_t
name|imm7
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|imm7
operator|*
literal|4
return|;
block|}
comment|// imm32 = ZeroExtend(imm8:'00', 32)
specifier|static
specifier|inline
name|uint32_t
name|ThumbImm8Scaled
parameter_list|(
name|uint32_t
name|opcode
parameter_list|)
block|{
specifier|const
name|uint32_t
name|imm8
init|=
name|bits
argument_list|(
name|opcode
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
name|imm8
operator|*
literal|4
return|;
block|}
comment|// This function performs the check for the register numbers 13 and 15 that are
comment|// not permitted for many Thumb register specifiers.
specifier|static
specifier|inline
name|bool
name|BadReg
parameter_list|(
name|uint32_t
name|n
parameter_list|)
block|{
return|return
name|n
operator|==
literal|13
operator|||
name|n
operator|==
literal|15
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_ARMUtils_h_
end_comment

end_unit

