begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RegisterContextPOSIXProcessMonitor_mips64.h -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_RegisterContextPOSIXProcessMonitor_mips64_H_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_RegisterContextPOSIXProcessMonitor_mips64_H_
end_define

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/RegisterContextPOSIX_mips64.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/lldb-mips-freebsd-register-enums.h"
end_include

begin_include
include|#
directive|include
file|"RegisterContextPOSIX.h"
end_include

begin_decl_stmt
name|class
name|RegisterContextPOSIXProcessMonitor_mips64
range|:
name|public
name|RegisterContextPOSIX_mips64
decl_stmt|,
name|public
name|POSIXBreakpointProtocol
block|{
name|public
label|:
name|RegisterContextPOSIXProcessMonitor_mips64
argument_list|(
argument|lldb_private::Thread&thread
argument_list|,
argument|uint32_t concrete_frame_idx
argument_list|,
argument|lldb_private::RegisterInfoInterface *register_info
argument_list|)
empty_stmt|;
name|protected
label|:
name|bool
name|ReadGPR
parameter_list|()
function_decl|;
name|bool
name|ReadFPR
parameter_list|()
function_decl|;
name|bool
name|WriteGPR
parameter_list|()
function_decl|;
name|bool
name|WriteFPR
parameter_list|()
function_decl|;
comment|// lldb_private::RegisterContext
name|bool
name|ReadRegister
argument_list|(
specifier|const
name|unsigned
name|reg
argument_list|,
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|value
argument_list|)
decl_stmt|;
name|bool
name|WriteRegister
argument_list|(
specifier|const
name|unsigned
name|reg
argument_list|,
specifier|const
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|value
argument_list|)
decl_stmt|;
name|bool
name|ReadRegister
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegisterInfo
operator|*
name|reg_info
argument_list|,
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|value
argument_list|)
decl_stmt|;
name|bool
name|WriteRegister
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegisterInfo
operator|*
name|reg_info
argument_list|,
specifier|const
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|value
argument_list|)
decl_stmt|;
name|bool
name|ReadAllRegisterValues
argument_list|(
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
argument_list|)
decl_stmt|;
name|bool
name|WriteAllRegisterValues
argument_list|(
specifier|const
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
argument_list|)
decl_stmt|;
name|uint32_t
name|SetHardwareWatchpoint
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|,
name|bool
name|read
argument_list|,
name|bool
name|write
argument_list|)
decl_stmt|;
name|bool
name|ClearHardwareWatchpoint
parameter_list|(
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
name|bool
name|HardwareSingleStep
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
comment|// POSIXBreakpointProtocol
name|bool
name|UpdateAfterBreakpoint
parameter_list|()
function_decl|;
name|unsigned
name|GetRegisterIndexFromOffset
parameter_list|(
name|unsigned
name|offset
parameter_list|)
function_decl|;
name|bool
name|IsWatchpointHit
parameter_list|(
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
name|bool
name|ClearWatchpointHits
parameter_list|()
function_decl|;
name|lldb
operator|::
name|addr_t
name|GetWatchpointAddress
argument_list|(
argument|uint32_t hw_index
argument_list|)
expr_stmt|;
name|bool
name|IsWatchpointVacant
parameter_list|(
name|uint32_t
name|hw_index
parameter_list|)
function_decl|;
name|bool
name|SetHardwareWatchpointWithIndex
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|,
name|bool
name|read
argument_list|,
name|bool
name|write
argument_list|,
name|uint32_t
name|hw_index
argument_list|)
decl_stmt|;
name|uint32_t
name|NumSupportedHardwareWatchpoints
parameter_list|()
function_decl|;
name|private
label|:
name|uint64_t
name|m_gpr_mips64
index|[
name|k_num_gpr_registers_mips64
index|]
decl_stmt|;
comment|// general purpose registers.
name|ProcessMonitor
modifier|&
name|GetMonitor
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

