begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ProcessWindows.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Plugins_Process_Windows_Common_ProcessWindows_H_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Plugins_Process_Windows_Common_ProcessWindows_H_
end_define

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Target/Process.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Status.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Mutex.h"
end_include

begin_include
include|#
directive|include
file|"IDebugDelegate.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|HostProcess
decl_stmt|;
name|class
name|ProcessWindowsData
decl_stmt|;
name|class
name|ProcessWindows
range|:
name|public
name|Process
decl_stmt|,
name|public
name|IDebugDelegate
block|{
name|public
label|:
comment|//------------------------------------------------------------------
comment|// Static functions.
comment|//------------------------------------------------------------------
specifier|static
name|lldb
operator|::
name|ProcessSP
name|CreateInstance
argument_list|(
argument|lldb::TargetSP target_sp
argument_list|,
argument|lldb::ListenerSP listener_sp
argument_list|,
argument|const FileSpec *
argument_list|)
expr_stmt|;
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetPluginDescriptionStatic
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|// Constructors and destructors
comment|//------------------------------------------------------------------
name|ProcessWindows
argument_list|(
argument|lldb::TargetSP target_sp
argument_list|,
argument|lldb::ListenerSP listener_sp
argument_list|)
empty_stmt|;
operator|~
name|ProcessWindows
argument_list|()
expr_stmt|;
name|size_t
name|GetSTDOUT
argument_list|(
name|char
operator|*
name|buf
argument_list|,
name|size_t
name|buf_size
argument_list|,
name|Status
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|size_t
name|GetSTDERR
argument_list|(
name|char
operator|*
name|buf
argument_list|,
name|size_t
name|buf_size
argument_list|,
name|Status
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|size_t
name|PutSTDIN
argument_list|(
specifier|const
name|char
operator|*
name|buf
argument_list|,
name|size_t
name|buf_size
argument_list|,
name|Status
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
comment|// lldb_private::Process overrides
name|ConstString
name|GetPluginName
argument_list|()
name|override
expr_stmt|;
name|uint32_t
name|GetPluginVersion
argument_list|()
name|override
expr_stmt|;
name|Status
name|EnableBreakpointSite
argument_list|(
name|BreakpointSite
operator|*
name|bp_site
argument_list|)
name|override
decl_stmt|;
name|Status
name|DisableBreakpointSite
argument_list|(
name|BreakpointSite
operator|*
name|bp_site
argument_list|)
name|override
decl_stmt|;
name|Status
name|DoDetach
argument_list|(
name|bool
name|keep_stopped
argument_list|)
name|override
decl_stmt|;
name|Status
name|DoLaunch
argument_list|(
name|Module
operator|*
name|exe_module
argument_list|,
name|ProcessLaunchInfo
operator|&
name|launch_info
argument_list|)
name|override
decl_stmt|;
name|Status
name|DoAttachToProcessWithID
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ProcessAttachInfo
operator|&
name|attach_info
argument_list|)
name|override
decl_stmt|;
name|Status
name|DoResume
argument_list|()
name|override
expr_stmt|;
name|Status
name|DoDestroy
argument_list|()
name|override
expr_stmt|;
name|Status
name|DoHalt
argument_list|(
name|bool
operator|&
name|caused_stop
argument_list|)
name|override
decl_stmt|;
name|void
name|DidLaunch
argument_list|()
name|override
expr_stmt|;
name|void
name|DidAttach
argument_list|(
name|lldb_private
operator|::
name|ArchSpec
operator|&
name|arch_spec
argument_list|)
name|override
decl_stmt|;
name|void
name|RefreshStateAfterStop
argument_list|()
name|override
expr_stmt|;
name|bool
name|CanDebug
argument_list|(
name|lldb
operator|::
name|TargetSP
name|target_sp
argument_list|,
name|bool
name|plugin_specified_by_name
argument_list|)
name|override
decl_stmt|;
name|bool
name|DestroyRequiresHalt
parameter_list|()
function|override
block|{
return|return
name|false
return|;
block|}
name|bool
name|UpdateThreadList
argument_list|(
name|ThreadList
operator|&
name|old_thread_list
argument_list|,
name|ThreadList
operator|&
name|new_thread_list
argument_list|)
name|override
decl_stmt|;
name|bool
name|IsAlive
argument_list|()
name|override
expr_stmt|;
name|size_t
name|DoReadMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|vm_addr
argument_list|,
name|void
operator|*
name|buf
argument_list|,
name|size_t
name|size
argument_list|,
name|Status
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|size_t
name|DoWriteMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|vm_addr
argument_list|,
specifier|const
name|void
operator|*
name|buf
argument_list|,
name|size_t
name|size
argument_list|,
name|Status
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|Status
name|GetMemoryRegionInfo
argument_list|(
name|lldb
operator|::
name|addr_t
name|vm_addr
argument_list|,
name|MemoryRegionInfo
operator|&
name|info
argument_list|)
name|override
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|GetImageInfoAddress
argument_list|()
name|override
expr_stmt|;
comment|// IDebugDelegate overrides.
name|void
name|OnExitProcess
argument_list|(
name|uint32_t
name|exit_code
argument_list|)
name|override
decl_stmt|;
name|void
name|OnDebuggerConnected
argument_list|(
name|lldb
operator|::
name|addr_t
name|image_base
argument_list|)
name|override
decl_stmt|;
name|ExceptionResult
name|OnDebugException
argument_list|(
name|bool
name|first_chance
argument_list|,
specifier|const
name|ExceptionRecord
operator|&
name|record
argument_list|)
name|override
decl_stmt|;
name|void
name|OnCreateThread
argument_list|(
specifier|const
name|HostThread
operator|&
name|thread
argument_list|)
name|override
decl_stmt|;
name|void
name|OnExitThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|thread_id
argument_list|,
name|uint32_t
name|exit_code
argument_list|)
name|override
decl_stmt|;
name|void
name|OnLoadDll
argument_list|(
specifier|const
name|ModuleSpec
operator|&
name|module_spec
argument_list|,
name|lldb
operator|::
name|addr_t
name|module_addr
argument_list|)
name|override
decl_stmt|;
name|void
name|OnUnloadDll
argument_list|(
name|lldb
operator|::
name|addr_t
name|module_addr
argument_list|)
name|override
decl_stmt|;
name|void
name|OnDebugString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|string
argument_list|)
name|override
decl_stmt|;
name|void
name|OnDebuggerError
argument_list|(
specifier|const
name|Status
operator|&
name|error
argument_list|,
name|uint32_t
name|type
argument_list|)
name|override
decl_stmt|;
name|private
label|:
name|Status
name|WaitForDebuggerConnection
parameter_list|(
name|DebuggerThreadSP
name|debugger
parameter_list|,
name|HostProcess
modifier|&
name|process
parameter_list|)
function_decl|;
comment|// These decode the page protection bits.
specifier|static
name|bool
name|IsPageReadable
parameter_list|(
name|uint32_t
name|protect
parameter_list|)
function_decl|;
specifier|static
name|bool
name|IsPageWritable
parameter_list|(
name|uint32_t
name|protect
parameter_list|)
function_decl|;
specifier|static
name|bool
name|IsPageExecutable
parameter_list|(
name|uint32_t
name|protect
parameter_list|)
function_decl|;
name|llvm
operator|::
name|sys
operator|::
name|Mutex
name|m_mutex
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|ProcessWindowsData
operator|>
name|m_session_data
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Plugins_Process_Windows_Common_ProcessWindows_H_
end_comment

end_unit

