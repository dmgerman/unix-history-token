begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- GoLexer.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_GoLexer_h
end_ifndef

begin_define
define|#
directive|define
name|liblldb_GoLexer_h
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|GoLexer
block|{
name|public
label|:
name|explicit
name|GoLexer
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
enum|enum
name|TokenType
block|{
name|TOK_EOF
block|,
name|TOK_INVALID
block|,
name|TOK_IDENTIFIER
block|,
name|LIT_INTEGER
block|,
name|LIT_FLOAT
block|,
name|LIT_IMAGINARY
block|,
name|LIT_RUNE
block|,
name|LIT_STRING
block|,
name|KEYWORD_BREAK
block|,
name|KEYWORD_DEFAULT
block|,
name|KEYWORD_FUNC
block|,
name|KEYWORD_INTERFACE
block|,
name|KEYWORD_SELECT
block|,
name|KEYWORD_CASE
block|,
name|KEYWORD_DEFER
block|,
name|KEYWORD_GO
block|,
name|KEYWORD_MAP
block|,
name|KEYWORD_STRUCT
block|,
name|KEYWORD_CHAN
block|,
name|KEYWORD_ELSE
block|,
name|KEYWORD_GOTO
block|,
name|KEYWORD_PACKAGE
block|,
name|KEYWORD_SWITCH
block|,
name|KEYWORD_CONST
block|,
name|KEYWORD_FALLTHROUGH
block|,
name|KEYWORD_IF
block|,
name|KEYWORD_RANGE
block|,
name|KEYWORD_TYPE
block|,
name|KEYWORD_CONTINUE
block|,
name|KEYWORD_FOR
block|,
name|KEYWORD_IMPORT
block|,
name|KEYWORD_RETURN
block|,
name|KEYWORD_VAR
block|,
name|OP_PLUS
block|,
name|OP_MINUS
block|,
name|OP_STAR
block|,
name|OP_SLASH
block|,
name|OP_PERCENT
block|,
name|OP_AMP
block|,
name|OP_PIPE
block|,
name|OP_CARET
block|,
name|OP_LSHIFT
block|,
name|OP_RSHIFT
block|,
name|OP_AMP_CARET
block|,
name|OP_PLUS_EQ
block|,
name|OP_MINUS_EQ
block|,
name|OP_STAR_EQ
block|,
name|OP_SLASH_EQ
block|,
name|OP_PERCENT_EQ
block|,
name|OP_AMP_EQ
block|,
name|OP_PIPE_EQ
block|,
name|OP_CARET_EQ
block|,
name|OP_LSHIFT_EQ
block|,
name|OP_RSHIFT_EQ
block|,
name|OP_AMP_CARET_EQ
block|,
name|OP_AMP_AMP
block|,
name|OP_PIPE_PIPE
block|,
name|OP_LT_MINUS
block|,
name|OP_PLUS_PLUS
block|,
name|OP_MINUS_MINUS
block|,
name|OP_EQ_EQ
block|,
name|OP_LT
block|,
name|OP_GT
block|,
name|OP_EQ
block|,
name|OP_BANG
block|,
name|OP_BANG_EQ
block|,
name|OP_LT_EQ
block|,
name|OP_GT_EQ
block|,
name|OP_COLON_EQ
block|,
name|OP_DOTS
block|,
name|OP_LPAREN
block|,
name|OP_LBRACK
block|,
name|OP_LBRACE
block|,
name|OP_COMMA
block|,
name|OP_DOT
block|,
name|OP_RPAREN
block|,
name|OP_RBRACK
block|,
name|OP_RBRACE
block|,
name|OP_SEMICOLON
block|,
name|OP_COLON
block|,   }
enum|;
struct|struct
name|Token
block|{
name|explicit
name|Token
argument_list|(
name|TokenType
name|t
argument_list|,
name|llvm
operator|::
name|StringRef
name|text
argument_list|)
range|:
name|m_type
argument_list|(
name|t
argument_list|)
decl_stmt|,
name|m_value
argument_list|(
name|text
argument_list|)
block|{}
name|TokenType
name|m_type
decl_stmt|;
name|llvm
operator|::
name|StringRef
name|m_value
expr_stmt|;
block|}
struct|;
specifier|const
name|Token
modifier|&
name|Lex
parameter_list|()
function_decl|;
name|size_t
name|BytesRemaining
argument_list|()
specifier|const
block|{
return|return
name|m_end
operator|-
name|m_src
return|;
block|}
name|llvm
operator|::
name|StringRef
name|GetString
argument_list|(
argument|int len
argument_list|)
specifier|const
block|{
return|return
name|llvm
operator|::
name|StringRef
argument_list|(
name|m_src
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|static
name|TokenType
name|LookupKeyword
argument_list|(
name|llvm
operator|::
name|StringRef
name|id
argument_list|)
decl_stmt|;
specifier|static
name|llvm
operator|::
name|StringRef
name|LookupToken
argument_list|(
argument|TokenType t
argument_list|)
expr_stmt|;
name|private
label|:
name|bool
name|IsDecimal
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
return|;
block|}
name|bool
name|IsHexChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
name|bool
name|IsLetterOrDigit
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|==
literal|'_'
condition|)
return|return
name|true
return|;
if|if
condition|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
condition|)
return|return
name|true
return|;
comment|// Treat all non-ascii chars as letters for simplicity.
return|return
literal|0
operator|!=
operator|(
name|c
operator|&
literal|0x80
operator|)
return|;
block|}
name|bool
name|IsWhitespace
parameter_list|(
name|char
name|c
parameter_list|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|' '
case|:
case|case
literal|'\t'
case|:
case|case
literal|'\r'
case|:
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|SkipWhitespace
parameter_list|()
function_decl|;
name|bool
name|SkipComment
parameter_list|()
function_decl|;
name|TokenType
name|InternalLex
parameter_list|(
name|bool
name|newline
parameter_list|)
function_decl|;
name|TokenType
name|DoOperator
parameter_list|()
function_decl|;
name|TokenType
name|DoIdent
parameter_list|()
function_decl|;
name|TokenType
name|DoNumber
parameter_list|()
function_decl|;
name|TokenType
name|DoRune
parameter_list|()
function_decl|;
name|TokenType
name|DoString
parameter_list|()
function_decl|;
specifier|static
name|llvm
operator|::
name|StringMap
operator|<
name|TokenType
operator|>
operator|*
name|InitKeywords
argument_list|()
expr_stmt|;
specifier|static
name|llvm
operator|::
name|StringMap
operator|<
name|TokenType
operator|>
operator|*
name|m_keywords
expr_stmt|;
specifier|const
name|char
modifier|*
name|m_src
decl_stmt|;
specifier|const
name|char
modifier|*
name|m_end
decl_stmt|;
name|Token
name|m_last_token
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

