begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************  *  * Name: acefiex.h - Extra OS specific defines, etc. for EFI  *  *****************************************************************************/
end_comment

begin_comment
comment|/*  * Copyright (C) 2000 - 2016, Intel Corp.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions, and the following disclaimer,  *    without modification.  * 2. Redistributions in binary form must reproduce at minimum a disclaimer  *    substantially similar to the "NO WARRANTY" disclaimer below  *    ("Disclaimer") and any redistribution must be conditioned upon  *    including a substantially similar Disclaimer requirement for further  *    binary redistribution.  * 3. Neither the names of the above-listed copyright holders nor the names  *    of any contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * Alternatively, this software may be distributed under the terms of the  * GNU General Public License ("GPL") version 2 as published by the Free  * Software Foundation.  *  * NO WARRANTY  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR  * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT  * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGES.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ACEFIEX_H__
end_ifndef

begin_define
define|#
directive|define
name|__ACEFIEX_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|ACPI_USE_SYSTEM_CLIBRARY
end_ifndef

begin_typedef
typedef|typedef
name|signed
name|char
name|int8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|short
name|int
name|int16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|int32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|char
name|uint8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|short
name|int
name|uint16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|uint32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|COMPILER_DEPENDENT_INT64
name|int64_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|COMPILER_DEPENDENT_UINT64
name|uint64_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ACPI_USE_SYSTEM_CLIBRARY */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_ERROR
parameter_list|(
name|a
parameter_list|)
value|(((INTN) a)< 0)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_SUCCESS
value|0
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_LOAD_ERROR
value|ACPI_EFI_ERR(1)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_INVALID_PARAMETER
value|ACPI_EFI_ERR(2)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_UNSUPPORTED
value|ACPI_EFI_ERR(3)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_BAD_BUFFER_SIZE
value|ACPI_EFI_ERR(4)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_BUFFER_TOO_SMALL
value|ACPI_EFI_ERR(5)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NOT_READY
value|ACPI_EFI_ERR(6)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_DEVICE_ERROR
value|ACPI_EFI_ERR(7)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_WRITE_PROTECTED
value|ACPI_EFI_ERR(8)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OUT_OF_RESOURCES
value|ACPI_EFI_ERR(9)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_VOLUME_CORRUPTED
value|ACPI_EFI_ERR(10)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_VOLUME_FULL
value|ACPI_EFI_ERR(11)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NO_MEDIA
value|ACPI_EFI_ERR(12)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEDIA_CHANGED
value|ACPI_EFI_ERR(13)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NOT_FOUND
value|ACPI_EFI_ERR(14)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_ACCESS_DENIED
value|ACPI_EFI_ERR(15)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NO_RESPONSE
value|ACPI_EFI_ERR(16)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NO_MAPPING
value|ACPI_EFI_ERR(17)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_TIMEOUT
value|ACPI_EFI_ERR(18)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_NOT_STARTED
value|ACPI_EFI_ERR(19)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_ALREADY_STARTED
value|ACPI_EFI_ERR(20)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_ABORTED
value|ACPI_EFI_ERR(21)
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_PROTOCOL_ERROR
value|ACPI_EFI_ERR(24)
end_define

begin_typedef
typedef|typedef
name|UINTN
name|ACPI_EFI_STATUS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
modifier|*
name|ACPI_EFI_HANDLE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
modifier|*
name|ACPI_EFI_EVENT
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|Data1
decl_stmt|;
name|UINT16
name|Data2
decl_stmt|;
name|UINT16
name|Data3
decl_stmt|;
name|UINT8
name|Data4
index|[
literal|8
index|]
decl_stmt|;
block|}
name|ACPI_EFI_GUID
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_DEVICE_PATH
block|{
name|UINT8
name|Type
decl_stmt|;
name|UINT8
name|SubType
decl_stmt|;
name|UINT8
name|Length
index|[
literal|2
index|]
decl_stmt|;
block|}
name|ACPI_EFI_DEVICE_PATH
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT64
name|ACPI_EFI_PHYSICAL_ADDRESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|UINT64
name|ACPI_EFI_VIRTUAL_ADDRESS
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|AcpiEfiAllocateAnyPages
block|,
name|AcpiEfiAllocateMaxAddress
block|,
name|AcpiEfiAllocateAddress
block|,
name|AcpiEfiMaxAllocateType
block|}
name|ACPI_EFI_ALLOCATE_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|AcpiEfiReservedMemoryType
block|,
name|AcpiEfiLoaderCode
block|,
name|AcpiEfiLoaderData
block|,
name|AcpiEfiBootServicesCode
block|,
name|AcpiEfiBootServicesData
block|,
name|AcpiEfiRuntimeServicesCode
block|,
name|AcpiEfiRuntimeServicesData
block|,
name|AcpiEfiConventionalMemory
block|,
name|AcpiEfiUnusableMemory
block|,
name|AcpiEfiACPIReclaimMemory
block|,
name|AcpiEfiACPIMemoryNVS
block|,
name|AcpiEfiMemoryMappedIO
block|,
name|AcpiEfiMemoryMappedIOPortSpace
block|,
name|AcpiEfiPalCode
block|,
name|AcpiEfiMaxMemoryType
block|}
name|ACPI_EFI_MEMORY_TYPE
typedef|;
end_typedef

begin_comment
comment|/* possible caching types for the memory range */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_UC
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_WC
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_WT
value|0x0000000000000004
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_WB
value|0x0000000000000008
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_UCE
value|0x0000000000000010
end_define

begin_comment
comment|/* physical memory protection on range */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_WP
value|0x0000000000001000
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_RP
value|0x0000000000002000
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_XP
value|0x0000000000004000
end_define

begin_comment
comment|/* range requires a runtime mapping */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_RUNTIME
value|0x8000000000000000
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_MEMORY_DESCRIPTOR_VERSION
value|1
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|Type
decl_stmt|;
name|UINT32
name|Pad
decl_stmt|;
name|ACPI_EFI_PHYSICAL_ADDRESS
name|PhysicalStart
decl_stmt|;
name|ACPI_EFI_VIRTUAL_ADDRESS
name|VirtualStart
decl_stmt|;
name|UINT64
name|NumberOfPages
decl_stmt|;
name|UINT64
name|Attribute
decl_stmt|;
block|}
name|ACPI_EFI_MEMORY_DESCRIPTOR
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_TABLE_HEARDER
block|{
name|UINT64
name|Signature
decl_stmt|;
name|UINT32
name|Revision
decl_stmt|;
name|UINT32
name|HeaderSize
decl_stmt|;
name|UINT32
name|CRC32
decl_stmt|;
name|UINT32
name|Reserved
decl_stmt|;
block|}
name|ACPI_EFI_TABLE_HEADER
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_UNKNOWN_INTERFACE
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Text output protocol  */
end_comment

begin_define
define|#
directive|define
name|ACPI_SIMPLE_TEXT_OUTPUT_PROTOCOL
define|\
value|{ 0x387477c2, 0x69c7, 0x11d2, {0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b} }
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_RESET
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_OUTPUT_STRING
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|CHAR16
modifier|*
name|String
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_TEST_STRING
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|CHAR16
modifier|*
name|String
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_QUERY_MODE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|ModeNumber
parameter_list|,
name|UINTN
modifier|*
name|Columns
parameter_list|,
name|UINTN
modifier|*
name|Rows
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_SET_MODE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|ModeNumber
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_SET_ATTRIBUTE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|Attribute
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_CLEAR_SCREEN
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_SET_CURSOR_POSITION
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|UINTN
name|Column
parameter_list|,
name|UINTN
name|Row
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_TEXT_ENABLE_CURSOR
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|Enable
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|INT32
name|MaxMode
decl_stmt|;
name|INT32
name|Mode
decl_stmt|;
name|INT32
name|Attribute
decl_stmt|;
name|INT32
name|CursorColumn
decl_stmt|;
name|INT32
name|CursorRow
decl_stmt|;
name|BOOLEAN
name|CursorVisible
decl_stmt|;
block|}
name|ACPI_SIMPLE_TEXT_OUTPUT_MODE
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
block|{
name|ACPI_EFI_TEXT_RESET
name|Reset
decl_stmt|;
name|ACPI_EFI_TEXT_OUTPUT_STRING
name|OutputString
decl_stmt|;
name|ACPI_EFI_TEXT_TEST_STRING
name|TestString
decl_stmt|;
name|ACPI_EFI_TEXT_QUERY_MODE
name|QueryMode
decl_stmt|;
name|ACPI_EFI_TEXT_SET_MODE
name|SetMode
decl_stmt|;
name|ACPI_EFI_TEXT_SET_ATTRIBUTE
name|SetAttribute
decl_stmt|;
name|ACPI_EFI_TEXT_CLEAR_SCREEN
name|ClearScreen
decl_stmt|;
name|ACPI_EFI_TEXT_SET_CURSOR_POSITION
name|SetCursorPosition
decl_stmt|;
name|ACPI_EFI_TEXT_ENABLE_CURSOR
name|EnableCursor
decl_stmt|;
name|ACPI_SIMPLE_TEXT_OUTPUT_MODE
modifier|*
name|Mode
decl_stmt|;
block|}
name|ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
typedef|;
end_typedef

begin_comment
comment|/*  * Text input protocol  */
end_comment

begin_define
define|#
directive|define
name|ACPI_SIMPLE_TEXT_INPUT_PROTOCOL
define|\
value|{ 0x387477c1, 0x69c7, 0x11d2, {0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b} }
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT16
name|ScanCode
decl_stmt|;
name|CHAR16
name|UnicodeChar
decl_stmt|;
block|}
name|ACPI_EFI_INPUT_KEY
typedef|;
end_typedef

begin_comment
comment|/*  * Baseline unicode control chars  */
end_comment

begin_define
define|#
directive|define
name|CHAR_NULL
value|0x0000
end_define

begin_define
define|#
directive|define
name|CHAR_BACKSPACE
value|0x0008
end_define

begin_define
define|#
directive|define
name|CHAR_TAB
value|0x0009
end_define

begin_define
define|#
directive|define
name|CHAR_LINEFEED
value|0x000A
end_define

begin_define
define|#
directive|define
name|CHAR_CARRIAGE_RETURN
value|0x000D
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_INPUT_RESET
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_INPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|BOOLEAN
name|ExtendedVerification
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_INPUT_READ_KEY
function_decl|)
parameter_list|(
name|struct
name|_ACPI_SIMPLE_INPUT_INTERFACE
modifier|*
name|This
parameter_list|,
name|ACPI_EFI_INPUT_KEY
modifier|*
name|Key
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_SIMPLE_INPUT_INTERFACE
block|{
name|ACPI_EFI_INPUT_RESET
name|Reset
decl_stmt|;
name|ACPI_EFI_INPUT_READ_KEY
name|ReadKeyStroke
decl_stmt|;
name|ACPI_EFI_EVENT
name|WaitForKey
decl_stmt|;
block|}
name|ACPI_SIMPLE_INPUT_INTERFACE
typedef|;
end_typedef

begin_comment
comment|/*  * Simple file system protocol  */
end_comment

begin_define
define|#
directive|define
name|ACPI_SIMPLE_FILE_SYSTEM_PROTOCOL
define|\
value|{ 0x964e5b22, 0x6459, 0x11d2, {0x8e, 0x39, 0x0, 0xa0, 0xc9, 0x69, 0x72, 0x3b} }
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_VOLUME_OPEN
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_IO_INTERFACE
modifier|*
name|This
parameter_list|,
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
modifier|*
name|Root
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_IO_INTERFACE_REVISION
value|0x00010000
end_define

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_FILE_IO_INTERFACE
block|{
name|UINT64
name|Revision
decl_stmt|;
name|ACPI_EFI_VOLUME_OPEN
name|OpenVolume
decl_stmt|;
block|}
name|ACPI_EFI_FILE_IO_INTERFACE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_OPEN
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
modifier|*
name|NewHandle
parameter_list|,
name|CHAR16
modifier|*
name|FileName
parameter_list|,
name|UINT64
name|OpenMode
parameter_list|,
name|UINT64
name|Attributes
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* Values for OpenMode used above */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_MODE_READ
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_MODE_WRITE
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_MODE_CREATE
value|0x8000000000000000
end_define

begin_comment
comment|/* Values for Attribute used above */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_READ_ONLY
value|0x0000000000000001
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_HIDDEN
value|0x0000000000000002
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_SYSTEM
value|0x0000000000000004
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_RESERVIED
value|0x0000000000000008
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_DIRECTORY
value|0x0000000000000010
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_ARCHIVE
value|0x0000000000000020
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_VALID_ATTR
value|0x0000000000000037
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_CLOSE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_DELETE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_READ
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_WRITE
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_SET_POSITION
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|UINT64
name|Position
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_GET_POSITION
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|UINT64
modifier|*
name|Position
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_GET_INFO
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|InformationType
parameter_list|,
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_SET_INFO
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|InformationType
parameter_list|,
name|UINTN
name|BufferSize
parameter_list|,
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FILE_FLUSH
function_decl|)
parameter_list|(
name|struct
name|_ACPI_EFI_FILE_HANDLE
modifier|*
name|File
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|ACPI_EFI_FILE_HANDLE_REVISION
value|0x00010000
end_define

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_FILE_HANDLE
block|{
name|UINT64
name|Revision
decl_stmt|;
name|ACPI_EFI_FILE_OPEN
name|Open
decl_stmt|;
name|ACPI_EFI_FILE_CLOSE
name|Close
decl_stmt|;
name|ACPI_EFI_FILE_DELETE
name|Delete
decl_stmt|;
name|ACPI_EFI_FILE_READ
name|Read
decl_stmt|;
name|ACPI_EFI_FILE_WRITE
name|Write
decl_stmt|;
name|ACPI_EFI_FILE_GET_POSITION
name|GetPosition
decl_stmt|;
name|ACPI_EFI_FILE_SET_POSITION
name|SetPosition
decl_stmt|;
name|ACPI_EFI_FILE_GET_INFO
name|GetInfo
decl_stmt|;
name|ACPI_EFI_FILE_SET_INFO
name|SetInfo
decl_stmt|;
name|ACPI_EFI_FILE_FLUSH
name|Flush
decl_stmt|;
block|}
name|ACPI_EFI_FILE_STRUCT
operator|,
typedef|*
name|ACPI_EFI_FILE_HANDLE
typedef|;
end_typedef

begin_comment
comment|/*  * Loaded image protocol  */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_LOADED_IMAGE_PROTOCOL
define|\
value|{ 0x5B1B31A1, 0x9562, 0x11d2, {0x8E, 0x3F, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B} }
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_IMAGE_ENTRY_POINT
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|ImageHandle
parameter_list|,
name|struct
name|_ACPI_EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_IMAGE_LOAD
function_decl|)
parameter_list|(
name|BOOLEAN
name|BootPolicy
parameter_list|,
name|ACPI_EFI_HANDLE
name|ParentImageHandle
parameter_list|,
name|ACPI_EFI_DEVICE_PATH
modifier|*
name|FilePath
parameter_list|,
name|VOID
modifier|*
name|SourceBuffer
parameter_list|,
name|UINTN
name|SourceSize
parameter_list|,
name|ACPI_EFI_HANDLE
modifier|*
name|ImageHandle
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_IMAGE_START
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|ImageHandle
parameter_list|,
name|UINTN
modifier|*
name|ExitDataSize
parameter_list|,
name|CHAR16
modifier|*
modifier|*
name|ExitData
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_EXIT
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|ImageHandle
parameter_list|,
name|ACPI_EFI_STATUS
name|ExitStatus
parameter_list|,
name|UINTN
name|ExitDataSize
parameter_list|,
name|CHAR16
modifier|*
name|ExitData
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_IMAGE_UNLOAD
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|ImageHandle
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|EFI_IMAGE_INFORMATION_REVISION
value|0x1000
end_define

begin_typedef
typedef|typedef
struct|struct
block|{
name|UINT32
name|Revision
decl_stmt|;
name|ACPI_EFI_HANDLE
name|ParentHandle
decl_stmt|;
name|struct
name|_ACPI_EFI_SYSTEM_TABLE
modifier|*
name|SystemTable
decl_stmt|;
name|ACPI_EFI_HANDLE
name|DeviceHandle
decl_stmt|;
name|ACPI_EFI_DEVICE_PATH
modifier|*
name|FilePath
decl_stmt|;
name|VOID
modifier|*
name|Reserved
decl_stmt|;
name|UINT32
name|LoadOptionsSize
decl_stmt|;
name|VOID
modifier|*
name|LoadOptions
decl_stmt|;
name|VOID
modifier|*
name|ImageBase
decl_stmt|;
name|UINT64
name|ImageSize
decl_stmt|;
name|ACPI_EFI_MEMORY_TYPE
name|ImageCodeType
decl_stmt|;
name|ACPI_EFI_MEMORY_TYPE
name|ImageDataType
decl_stmt|;
name|ACPI_EFI_IMAGE_UNLOAD
name|Unload
decl_stmt|;
block|}
name|ACPI_EFI_LOADED_IMAGE
typedef|;
end_typedef

begin_comment
comment|/*  * EFI Memory  */
end_comment

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_ALLOCATE_PAGES
function_decl|)
parameter_list|(
name|ACPI_EFI_ALLOCATE_TYPE
name|Type
parameter_list|,
name|ACPI_EFI_MEMORY_TYPE
name|MemoryType
parameter_list|,
name|UINTN
name|NoPages
parameter_list|,
name|ACPI_EFI_PHYSICAL_ADDRESS
modifier|*
name|Memory
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FREE_PAGES
function_decl|)
parameter_list|(
name|ACPI_EFI_PHYSICAL_ADDRESS
name|Memory
parameter_list|,
name|UINTN
name|NoPages
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_GET_MEMORY_MAP
function_decl|)
parameter_list|(
name|UINTN
modifier|*
name|MemoryMapSize
parameter_list|,
name|ACPI_EFI_MEMORY_DESCRIPTOR
modifier|*
name|MemoryMap
parameter_list|,
name|UINTN
modifier|*
name|MapKey
parameter_list|,
name|UINTN
modifier|*
name|DescriptorSize
parameter_list|,
name|UINT32
modifier|*
name|DescriptorVersion
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|NextMemoryDescriptor
parameter_list|(
name|Ptr
parameter_list|,
name|Size
parameter_list|)
value|((ACPI_EFI_MEMORY_DESCRIPTOR *) (((UINT8 *) Ptr) + Size))
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_ALLOCATE_POOL
function_decl|)
parameter_list|(
name|ACPI_EFI_MEMORY_TYPE
name|PoolType
parameter_list|,
name|UINTN
name|Size
parameter_list|,
name|VOID
modifier|*
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_FREE_POOL
function_decl|)
parameter_list|(
name|VOID
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * Protocol handler functions  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|ACPI_EFI_NATIVE_INTERFACE
block|,
name|ACPI_EFI_PCODE_INTERFACE
block|}
name|ACPI_EFI_INTERFACE_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|AcpiEfiAllHandles
block|,
name|AcpiEfiByRegisterNotify
block|,
name|AcpiEfiByProtocol
block|}
name|ACPI_EFI_LOCATE_SEARCH_TYPE
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_INSTALL_PROTOCOL_INTERFACE
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
modifier|*
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|ACPI_EFI_INTERFACE_TYPE
name|InterfaceType
parameter_list|,
name|VOID
modifier|*
name|Interface
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_REINSTALL_PROTOCOL_INTERFACE
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
name|OldInterface
parameter_list|,
name|VOID
modifier|*
name|NewInterface
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_UNINSTALL_PROTOCOL_INTERFACE
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
name|Interface
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_HANDLE_PROTOCOL
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
modifier|*
name|Interface
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_REGISTER_PROTOCOL_NOTIFY
function_decl|)
parameter_list|(
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|ACPI_EFI_EVENT
name|Event
parameter_list|,
name|VOID
modifier|*
modifier|*
name|Registration
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_LOCATE_HANDLE
function_decl|)
parameter_list|(
name|ACPI_EFI_LOCATE_SEARCH_TYPE
name|SearchType
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
name|SearchKey
parameter_list|,
name|UINTN
modifier|*
name|BufferSize
parameter_list|,
name|ACPI_EFI_HANDLE
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_LOCATE_DEVICE_PATH
function_decl|)
parameter_list|(
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|ACPI_EFI_DEVICE_PATH
modifier|*
modifier|*
name|DevicePath
parameter_list|,
name|ACPI_EFI_HANDLE
modifier|*
name|Device
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_INSTALL_CONFIGURATION_TABLE
function_decl|)
parameter_list|(
name|ACPI_EFI_GUID
modifier|*
name|Guid
parameter_list|,
name|VOID
modifier|*
name|Table
parameter_list|)
function_decl|;
end_typedef

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL
value|0x00000001
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_GET_PROTOCOL
value|0x00000002
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_TEST_PROTOCOL
value|0x00000004
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_BY_CHILD_CONTROLLER
value|0x00000008
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_BY_DRIVER
value|0x00000010
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_OPEN_PROTOCOL_EXCLUSIVE
value|0x00000020
end_define

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_OPEN_PROTOCOL
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
modifier|*
name|Interface
parameter_list|,
name|ACPI_EFI_HANDLE
name|AgentHandle
parameter_list|,
name|ACPI_EFI_HANDLE
name|ControllerHandle
parameter_list|,
name|UINT32
name|Attributes
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_CLOSE_PROTOCOL
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|ACPI_EFI_HANDLE
name|AgentHandle
parameter_list|,
name|ACPI_EFI_HANDLE
name|ControllerHandle
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|ACPI_EFI_HANDLE
name|AgentHandle
decl_stmt|;
name|ACPI_EFI_HANDLE
name|ControllerHandle
decl_stmt|;
name|UINT32
name|Attributes
decl_stmt|;
name|UINT32
name|OpenCount
decl_stmt|;
block|}
name|ACPI_EFI_OPEN_PROTOCOL_INFORMATION_ENTRY
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_OPEN_PROTOCOL_INFORMATION
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|ACPI_EFI_OPEN_PROTOCOL_INFORMATION_ENTRY
modifier|*
modifier|*
name|EntryBuffer
parameter_list|,
name|UINTN
modifier|*
name|EntryCount
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_PROTOCOLS_PER_HANDLE
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
modifier|*
modifier|*
name|ProtocolBuffer
parameter_list|,
name|UINTN
modifier|*
name|ProtocolBufferCount
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_LOCATE_HANDLE_BUFFER
function_decl|)
parameter_list|(
name|ACPI_EFI_LOCATE_SEARCH_TYPE
name|SearchType
parameter_list|,
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
name|SearchKey
parameter_list|,
name|UINTN
modifier|*
name|NoHandles
parameter_list|,
name|ACPI_EFI_HANDLE
modifier|*
modifier|*
name|Buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_LOCATE_PROTOCOL
function_decl|)
parameter_list|(
name|ACPI_EFI_GUID
modifier|*
name|Protocol
parameter_list|,
name|VOID
modifier|*
name|Registration
parameter_list|,
name|VOID
modifier|*
modifier|*
name|Interface
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
modifier|*
name|Handle
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES
function_decl|)
parameter_list|(
name|ACPI_EFI_HANDLE
name|Handle
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|ACPI_EFI_STATUS
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_CALCULATE_CRC32
function_decl|)
parameter_list|(
name|VOID
modifier|*
name|Data
parameter_list|,
name|UINTN
name|DataSize
parameter_list|,
name|UINT32
modifier|*
name|Crc32
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_COPY_MEM
function_decl|)
parameter_list|(
name|VOID
modifier|*
name|Destination
parameter_list|,
name|VOID
modifier|*
name|Source
parameter_list|,
name|UINTN
name|Length
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|VOID
function_decl|(
name|ACPI_EFI_API
modifier|*
name|ACPI_EFI_SET_MEM
function_decl|)
parameter_list|(
name|VOID
modifier|*
name|Buffer
parameter_list|,
name|UINTN
name|Size
parameter_list|,
name|UINT8
name|Value
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * EFI Boot Services Table  */
end_comment

begin_define
define|#
directive|define
name|ACPI_EFI_BOOT_SERVICES_SIGNATURE
value|0x56524553544f4f42
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_BOOT_SERVICES_REVISION
value|(ACPI_EFI_SPECIFICATION_MAJOR_REVISION<<16) | (ACPI_EFI_SPECIFICATION_MINOR_REVISION)
end_define

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_BOOT_SERVICES
block|{
name|ACPI_EFI_TABLE_HEADER
name|Hdr
decl_stmt|;
if|#
directive|if
literal|0
block|ACPI_EFI_RAISE_TPL                  RaiseTPL;     ACPI_EFI_RESTORE_TPL                RestoreTPL;
else|#
directive|else
name|ACPI_EFI_UNKNOWN_INTERFACE
name|RaiseTPL
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|RestoreTPL
decl_stmt|;
endif|#
directive|endif
name|ACPI_EFI_ALLOCATE_PAGES
name|AllocatePages
decl_stmt|;
name|ACPI_EFI_FREE_PAGES
name|FreePages
decl_stmt|;
name|ACPI_EFI_GET_MEMORY_MAP
name|GetMemoryMap
decl_stmt|;
name|ACPI_EFI_ALLOCATE_POOL
name|AllocatePool
decl_stmt|;
name|ACPI_EFI_FREE_POOL
name|FreePool
decl_stmt|;
if|#
directive|if
literal|0
block|ACPI_EFI_CREATE_EVENT               CreateEvent;     ACPI_EFI_SET_TIMER                  SetTimer;     ACPI_EFI_WAIT_FOR_EVENT             WaitForEvent;     ACPI_EFI_SIGNAL_EVENT               SignalEvent;     ACPI_EFI_CLOSE_EVENT                CloseEvent;     ACPI_EFI_CHECK_EVENT                CheckEvent;
else|#
directive|else
name|ACPI_EFI_UNKNOWN_INTERFACE
name|CreateEvent
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|SetTimer
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|WaitForEvent
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|SignalEvent
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|CloseEvent
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|CheckEvent
decl_stmt|;
endif|#
directive|endif
name|ACPI_EFI_INSTALL_PROTOCOL_INTERFACE
name|InstallProtocolInterface
decl_stmt|;
name|ACPI_EFI_REINSTALL_PROTOCOL_INTERFACE
name|ReinstallProtocolInterface
decl_stmt|;
name|ACPI_EFI_UNINSTALL_PROTOCOL_INTERFACE
name|UninstallProtocolInterface
decl_stmt|;
name|ACPI_EFI_HANDLE_PROTOCOL
name|HandleProtocol
decl_stmt|;
name|ACPI_EFI_HANDLE_PROTOCOL
name|PCHandleProtocol
decl_stmt|;
name|ACPI_EFI_REGISTER_PROTOCOL_NOTIFY
name|RegisterProtocolNotify
decl_stmt|;
name|ACPI_EFI_LOCATE_HANDLE
name|LocateHandle
decl_stmt|;
name|ACPI_EFI_LOCATE_DEVICE_PATH
name|LocateDevicePath
decl_stmt|;
name|ACPI_EFI_INSTALL_CONFIGURATION_TABLE
name|InstallConfigurationTable
decl_stmt|;
name|ACPI_EFI_IMAGE_LOAD
name|LoadImage
decl_stmt|;
name|ACPI_EFI_IMAGE_START
name|StartImage
decl_stmt|;
name|ACPI_EFI_EXIT
name|Exit
decl_stmt|;
name|ACPI_EFI_IMAGE_UNLOAD
name|UnloadImage
decl_stmt|;
if|#
directive|if
literal|0
block|ACPI_EFI_EXIT_BOOT_SERVICES         ExitBootServices;     ACPI_EFI_GET_NEXT_MONOTONIC_COUNT   GetNextMonotonicCount;     ACPI_EFI_STALL                      Stall;     ACPI_EFI_SET_WATCHDOG_TIMER         SetWatchdogTimer;
else|#
directive|else
name|ACPI_EFI_UNKNOWN_INTERFACE
name|ExitBootServices
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|GetNextMonotonicCount
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|Stall
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|SetWatchdogTimer
decl_stmt|;
endif|#
directive|endif
if|#
directive|if
literal|0
block|ACPI_EFI_CONNECT_CONTROLLER         ConnectController;     ACPI_EFI_DISCONNECT_CONTROLLER      DisconnectController;
else|#
directive|else
name|ACPI_EFI_UNKNOWN_INTERFACE
name|ConnectController
decl_stmt|;
name|ACPI_EFI_UNKNOWN_INTERFACE
name|DisconnectController
decl_stmt|;
endif|#
directive|endif
name|ACPI_EFI_OPEN_PROTOCOL
name|OpenProtocol
decl_stmt|;
name|ACPI_EFI_CLOSE_PROTOCOL
name|CloseProtocol
decl_stmt|;
name|ACPI_EFI_OPEN_PROTOCOL_INFORMATION
name|OpenProtocolInformation
decl_stmt|;
name|ACPI_EFI_PROTOCOLS_PER_HANDLE
name|ProtocolsPerHandle
decl_stmt|;
name|ACPI_EFI_LOCATE_HANDLE_BUFFER
name|LocateHandleBuffer
decl_stmt|;
name|ACPI_EFI_LOCATE_PROTOCOL
name|LocateProtocol
decl_stmt|;
name|ACPI_EFI_INSTALL_MULTIPLE_PROTOCOL_INTERFACES
name|InstallMultipleProtocolInterfaces
decl_stmt|;
name|ACPI_EFI_UNINSTALL_MULTIPLE_PROTOCOL_INTERFACES
name|UninstallMultipleProtocolInterfaces
decl_stmt|;
name|ACPI_EFI_CALCULATE_CRC32
name|CalculateCrc32
decl_stmt|;
name|ACPI_EFI_COPY_MEM
name|CopyMem
decl_stmt|;
name|ACPI_EFI_SET_MEM
name|SetMem
decl_stmt|;
if|#
directive|if
literal|0
block|ACPI_EFI_CREATE_EVENT_EX        CreateEventEx;
else|#
directive|else
name|ACPI_EFI_UNKNOWN_INTERFACE
name|CreateEventEx
decl_stmt|;
endif|#
directive|endif
block|}
name|ACPI_EFI_BOOT_SERVICES
typedef|;
end_typedef

begin_comment
comment|/*  * EFI System Table  */
end_comment

begin_comment
comment|/*  * EFI Configuration Table and GUID definitions  */
end_comment

begin_define
define|#
directive|define
name|ACPI_TABLE_GUID
define|\
value|{ 0xeb9d2d30, 0x2d88, 0x11d3, {0x9a, 0x16, 0x0, 0x90, 0x27, 0x3f, 0xc1, 0x4d} }
end_define

begin_define
define|#
directive|define
name|ACPI_20_TABLE_GUID
define|\
value|{ 0x8868e871, 0xe4f1, 0x11d3, {0xbc, 0x22, 0x0, 0x80, 0xc7, 0x3c, 0x88, 0x81} }
end_define

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_CONFIGURATION_TABLE
block|{
name|ACPI_EFI_GUID
name|VendorGuid
decl_stmt|;
name|VOID
modifier|*
name|VendorTable
decl_stmt|;
block|}
name|ACPI_EFI_CONFIGURATION_TABLE
typedef|;
end_typedef

begin_define
define|#
directive|define
name|ACPI_EFI_SYSTEM_TABLE_SIGNATURE
value|0x5453595320494249
end_define

begin_define
define|#
directive|define
name|ACPI_EFI_SYSTEM_TABLE_REVISION
value|(ACPI_EFI_SPECIFICATION_MAJOR_REVISION<<16) | (ACPI_EFI_SPECIFICATION_MINOR_REVISION)
end_define

begin_typedef
typedef|typedef
struct|struct
name|_ACPI_EFI_SYSTEM_TABLE
block|{
name|ACPI_EFI_TABLE_HEADER
name|Hdr
decl_stmt|;
name|CHAR16
modifier|*
name|FirmwareVendor
decl_stmt|;
name|UINT32
name|FirmwareRevision
decl_stmt|;
name|ACPI_EFI_HANDLE
name|ConsoleInHandle
decl_stmt|;
name|ACPI_SIMPLE_INPUT_INTERFACE
modifier|*
name|ConIn
decl_stmt|;
name|ACPI_EFI_HANDLE
name|ConsoleOutHandle
decl_stmt|;
name|ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|ConOut
decl_stmt|;
name|ACPI_EFI_HANDLE
name|StandardErrorHandle
decl_stmt|;
name|ACPI_SIMPLE_TEXT_OUTPUT_INTERFACE
modifier|*
name|StdErr
decl_stmt|;
if|#
directive|if
literal|0
block|ACPI_EFI_RUNTIME_SERVICES           *RuntimeServices;
else|#
directive|else
name|ACPI_EFI_HANDLE
modifier|*
name|RuntimeServices
decl_stmt|;
endif|#
directive|endif
name|ACPI_EFI_BOOT_SERVICES
modifier|*
name|BootServices
decl_stmt|;
name|UINTN
name|NumberOfTableEntries
decl_stmt|;
name|ACPI_EFI_CONFIGURATION_TABLE
modifier|*
name|ConfigurationTable
decl_stmt|;
block|}
name|ACPI_EFI_SYSTEM_TABLE
typedef|;
end_typedef

begin_comment
comment|/* GNU EFI definitions */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_GNU_EFI
argument_list|)
end_if

begin_comment
comment|/*  * This is needed to hide platform specific code from ACPICA  */
end_comment

begin_function_decl
name|UINT64
name|DivU64x32
parameter_list|(
name|UINT64
name|Dividend
parameter_list|,
name|UINTN
name|Divisor
parameter_list|,
name|UINTN
modifier|*
name|Remainder
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * EFI specific prototypes  */
end_comment

begin_function_decl
name|ACPI_EFI_STATUS
name|efi_main
parameter_list|(
name|ACPI_EFI_HANDLE
name|Image
parameter_list|,
name|ACPI_EFI_SYSTEM_TABLE
modifier|*
name|SystemTab
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|acpi_main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|ACPI_EFI_GUID
name|AcpiGbl_LoadedImageProtocol
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ACPI_EFI_GUID
name|AcpiGbl_TextInProtocol
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ACPI_EFI_GUID
name|AcpiGbl_TextOutProtocol
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ACPI_EFI_GUID
name|AcpiGbl_FileSystemProtocol
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ACEFIEX_H__ */
end_comment

end_unit

