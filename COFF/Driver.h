begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Driver.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_COFF_DRIVER_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_COFF_DRIVER_H
end_define

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|"SymbolTable.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/Reproduce.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/Archive.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Option/Arg.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Option/ArgList.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TarWriter.h"
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|coff
block|{
name|class
name|LinkerDriver
decl_stmt|;
specifier|extern
name|LinkerDriver
modifier|*
name|Driver
decl_stmt|;
name|using
name|llvm
operator|::
name|COFF
operator|::
name|MachineTypes
expr_stmt|;
name|using
name|llvm
operator|::
name|COFF
operator|::
name|WindowsSubsystem
expr_stmt|;
name|using
name|llvm
operator|::
name|Optional
expr_stmt|;
name|class
name|InputFile
decl_stmt|;
comment|// Implemented in MarkLive.cpp.
name|void
name|markLive
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Chunk
operator|*
operator|>
operator|&
name|Chunks
argument_list|)
decl_stmt|;
comment|// Implemented in ICF.cpp.
name|void
name|doICF
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|Chunk
operator|*
operator|>
operator|&
name|Chunks
argument_list|)
decl_stmt|;
name|class
name|ArgParser
block|{
name|public
label|:
comment|// Parses command line options.
name|llvm
operator|::
name|opt
operator|::
name|InputArgList
name|parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
specifier|const
name|char
operator|*
operator|>
name|Args
argument_list|)
expr_stmt|;
comment|// Concatenate LINK environment varirable and given arguments and parse them.
name|llvm
operator|::
name|opt
operator|::
name|InputArgList
name|parseLINK
argument_list|(
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
name|Args
argument_list|)
expr_stmt|;
comment|// Tokenizes a given string and then parses as command line options.
name|llvm
operator|::
name|opt
operator|::
name|InputArgList
name|parse
argument_list|(
argument|StringRef S
argument_list|)
block|{
return|return
name|parse
argument_list|(
name|tokenize
argument_list|(
name|S
argument_list|)
argument_list|)
return|;
block|}
name|private
label|:
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
name|tokenize
argument_list|(
argument|StringRef S
argument_list|)
expr_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
name|replaceResponseFiles
argument_list|(
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|LinkerDriver
block|{
name|public
label|:
name|LinkerDriver
argument_list|()
block|{
name|coff
operator|::
name|Symtab
operator|=
operator|&
name|Symtab
expr_stmt|;
block|}
name|void
name|link
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
specifier|const
name|char
operator|*
operator|>
name|Args
argument_list|)
decl_stmt|;
comment|// Used by the resolver to parse .drectve section contents.
name|void
name|parseDirectives
parameter_list|(
name|StringRef
name|S
parameter_list|)
function_decl|;
comment|// Used by ArchiveFile to enqueue members.
name|void
name|enqueueArchiveMember
argument_list|(
specifier|const
name|Archive
operator|::
name|Child
operator|&
name|C
argument_list|,
name|StringRef
name|SymName
argument_list|,
name|StringRef
name|ParentName
argument_list|)
decl_stmt|;
name|private
label|:
name|ArgParser
name|Parser
decl_stmt|;
name|SymbolTable
name|Symtab
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|llvm
operator|::
name|TarWriter
operator|>
name|Tar
expr_stmt|;
comment|// for /linkrepro
comment|// Opens a file. Path has to be resolved already.
name|MemoryBufferRef
name|openFile
parameter_list|(
name|StringRef
name|Path
parameter_list|)
function_decl|;
comment|// Searches a file from search paths.
name|Optional
operator|<
name|StringRef
operator|>
name|findFile
argument_list|(
argument|StringRef Filename
argument_list|)
expr_stmt|;
name|Optional
operator|<
name|StringRef
operator|>
name|findLib
argument_list|(
argument|StringRef Filename
argument_list|)
expr_stmt|;
name|StringRef
name|doFindFile
parameter_list|(
name|StringRef
name|Filename
parameter_list|)
function_decl|;
name|StringRef
name|doFindLib
parameter_list|(
name|StringRef
name|Filename
parameter_list|)
function_decl|;
comment|// Parses LIB environment which contains a list of search paths.
name|void
name|addLibSearchPaths
parameter_list|()
function_decl|;
comment|// Library search path. The first element is always "" (current directory).
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|SearchPaths
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|VisitedFiles
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|VisitedLibs
expr_stmt|;
name|SymbolBody
modifier|*
name|addUndefined
parameter_list|(
name|StringRef
name|Sym
parameter_list|)
function_decl|;
name|StringRef
name|mangle
parameter_list|(
name|StringRef
name|Sym
parameter_list|)
function_decl|;
comment|// Windows specific -- "main" is not the only main function in Windows.
comment|// You can choose one from these four -- {w,}{WinMain,main}.
comment|// There are four different entry point functions for them,
comment|// {w,}{WinMain,main}CRTStartup, respectively. The linker needs to
comment|// choose the right one depending on which "main" function is defined.
comment|// This function looks up the symbol table and resolve corresponding
comment|// entry point name.
name|StringRef
name|findDefaultEntry
parameter_list|()
function_decl|;
name|WindowsSubsystem
name|inferSubsystem
parameter_list|()
function_decl|;
name|void
name|invokeMSVC
argument_list|(
name|llvm
operator|::
name|opt
operator|::
name|InputArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
name|MemoryBufferRef
name|takeBuffer
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|MB
argument_list|)
decl_stmt|;
name|void
name|addBuffer
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|MB
argument_list|)
decl_stmt|;
name|void
name|addArchiveBuffer
parameter_list|(
name|MemoryBufferRef
name|MBRef
parameter_list|,
name|StringRef
name|SymName
parameter_list|,
name|StringRef
name|ParentName
parameter_list|)
function_decl|;
name|void
name|enqueuePath
parameter_list|(
name|StringRef
name|Path
parameter_list|)
function_decl|;
name|void
name|enqueueTask
argument_list|(
name|std
operator|::
name|function
operator|<
name|void
argument_list|()
operator|>
name|Task
argument_list|)
decl_stmt|;
name|bool
name|run
parameter_list|()
function_decl|;
name|std
operator|::
name|list
operator|<
name|std
operator|::
name|function
operator|<
name|void
argument_list|()
operator|>>
name|TaskQueue
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|FilePaths
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|MemoryBufferRef
operator|>
name|Resources
expr_stmt|;
block|}
empty_stmt|;
comment|// Functions below this line are defined in DriverUtils.cpp.
name|void
name|printHelp
parameter_list|(
specifier|const
name|char
modifier|*
name|Argv0
parameter_list|)
function_decl|;
comment|// For /machine option.
name|MachineTypes
name|getMachineType
parameter_list|(
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|StringRef
name|machineToStr
parameter_list|(
name|MachineTypes
name|MT
parameter_list|)
function_decl|;
comment|// Parses a string in the form of "<integer>[,<integer>]".
name|void
name|parseNumbers
parameter_list|(
name|StringRef
name|Arg
parameter_list|,
name|uint64_t
modifier|*
name|Addr
parameter_list|,
name|uint64_t
modifier|*
name|Size
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|// Parses a string in the form of "<integer>[.<integer>]".
comment|// Minor's default value is 0.
name|void
name|parseVersion
parameter_list|(
name|StringRef
name|Arg
parameter_list|,
name|uint32_t
modifier|*
name|Major
parameter_list|,
name|uint32_t
modifier|*
name|Minor
parameter_list|)
function_decl|;
comment|// Parses a string in the form of "<subsystem>[,<integer>[.<integer>]]".
name|void
name|parseSubsystem
parameter_list|(
name|StringRef
name|Arg
parameter_list|,
name|WindowsSubsystem
modifier|*
name|Sys
parameter_list|,
name|uint32_t
modifier|*
name|Major
parameter_list|,
name|uint32_t
modifier|*
name|Minor
parameter_list|)
function_decl|;
name|void
name|parseAlternateName
parameter_list|(
name|StringRef
parameter_list|)
function_decl|;
name|void
name|parseMerge
parameter_list|(
name|StringRef
parameter_list|)
function_decl|;
name|void
name|parseSection
parameter_list|(
name|StringRef
parameter_list|)
function_decl|;
comment|// Parses a string in the form of "EMBED[,=<integer>]|NO".
name|void
name|parseManifest
parameter_list|(
name|StringRef
name|Arg
parameter_list|)
function_decl|;
comment|// Parses a string in the form of "level=<string>|uiAccess=<string>"
name|void
name|parseManifestUAC
parameter_list|(
name|StringRef
name|Arg
parameter_list|)
function_decl|;
comment|// Create a resource file containing a manifest XML.
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|createManifestRes
argument_list|()
expr_stmt|;
name|void
name|createSideBySideManifest
parameter_list|()
function_decl|;
comment|// Used for dllexported symbols.
name|Export
name|parseExport
parameter_list|(
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|fixupExports
parameter_list|()
function_decl|;
name|void
name|assignExportOrdinals
parameter_list|()
function_decl|;
comment|// Parses a string in the form of "key=value" and check
comment|// if value matches previous values for the key.
comment|// This feature used in the directive section to reject
comment|// incompatible objects.
name|void
name|checkFailIfMismatch
parameter_list|(
name|StringRef
name|Arg
parameter_list|)
function_decl|;
comment|// Convert Windows resource files (.res files) to a .obj file
comment|// using cvtres.exe.
name|std
operator|::
name|unique_ptr
operator|<
name|MemoryBuffer
operator|>
name|convertResToCOFF
argument_list|(
specifier|const
name|std
operator|::
name|vector
operator|<
name|MemoryBufferRef
operator|>
operator|&
name|MBs
argument_list|)
expr_stmt|;
name|void
name|runMSVCLinker
argument_list|(
name|std
operator|::
name|string
name|Rsp
argument_list|,
name|ArrayRef
operator|<
name|StringRef
operator|>
name|Objects
argument_list|)
decl_stmt|;
comment|// Create enum with OPT_xxx values for each option in Options.td
enum|enum
block|{
name|OPT_INVALID
init|=
literal|0
block|,
define|#
directive|define
name|OPTION
parameter_list|(
name|_1
parameter_list|,
name|_2
parameter_list|,
name|ID
parameter_list|,
name|_4
parameter_list|,
name|_5
parameter_list|,
name|_6
parameter_list|,
name|_7
parameter_list|,
name|_8
parameter_list|,
name|_9
parameter_list|,
name|_10
parameter_list|,
name|_11
parameter_list|,
name|_12
parameter_list|)
value|OPT_##ID,
include|#
directive|include
file|"Options.inc"
undef|#
directive|undef
name|OPTION
block|}
enum|;
block|}
comment|// namespace coff
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

