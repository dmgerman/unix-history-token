begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Config.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_COFF_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_COFF_CONFIG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|coff
block|{
name|using
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_UNKNOWN
expr_stmt|;
name|using
name|llvm
operator|::
name|COFF
operator|::
name|WindowsSubsystem
expr_stmt|;
name|using
name|llvm
operator|::
name|StringRef
expr_stmt|;
name|class
name|DefinedAbsolute
decl_stmt|;
name|class
name|DefinedRelative
decl_stmt|;
name|class
name|StringChunk
decl_stmt|;
struct_decl|struct
name|Symbol
struct_decl|;
name|class
name|SymbolBody
decl_stmt|;
comment|// Short aliases.
specifier|static
specifier|const
specifier|auto
name|AMD64
init|=
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_AMD64
decl_stmt|;
specifier|static
specifier|const
specifier|auto
name|ARMNT
init|=
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_ARMNT
decl_stmt|;
specifier|static
specifier|const
specifier|auto
name|I386
init|=
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_FILE_MACHINE_I386
decl_stmt|;
comment|// Represents an /export option.
struct|struct
name|Export
block|{
name|StringRef
name|Name
decl_stmt|;
comment|// N in /export:N or /export:E=N
name|StringRef
name|ExtName
decl_stmt|;
comment|// E in /export:E=N
name|SymbolBody
modifier|*
name|Sym
init|=
name|nullptr
decl_stmt|;
name|uint16_t
name|Ordinal
init|=
literal|0
decl_stmt|;
name|bool
name|Noname
init|=
name|false
decl_stmt|;
name|bool
name|Data
init|=
name|false
decl_stmt|;
name|bool
name|Private
init|=
name|false
decl_stmt|;
comment|// If an export is a form of /export:foo=dllname.bar, that means
comment|// that foo should be exported as an alias to bar in the DLL.
comment|// ForwardTo is set to "dllname.bar" part. Usually empty.
name|StringRef
name|ForwardTo
decl_stmt|;
name|StringChunk
modifier|*
name|ForwardChunk
init|=
name|nullptr
decl_stmt|;
comment|// True if this /export option was in .drectves section.
name|bool
name|Directives
init|=
name|false
decl_stmt|;
name|StringRef
name|SymbolName
decl_stmt|;
name|StringRef
name|ExportName
decl_stmt|;
comment|// Name in DLL
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Export
operator|&
name|E
operator|)
block|{
return|return
operator|(
name|Name
operator|==
name|E
operator|.
name|Name
operator|&&
name|ExtName
operator|==
name|E
operator|.
name|ExtName
operator|&&
name|Ordinal
operator|==
name|E
operator|.
name|Ordinal
operator|&&
name|Noname
operator|==
name|E
operator|.
name|Noname
operator|&&
name|Data
operator|==
name|E
operator|.
name|Data
operator|&&
name|Private
operator|==
name|E
operator|.
name|Private
operator|)
return|;
block|}
block|}
struct|;
name|enum
name|class
name|DebugType
block|{
name|None
operator|=
literal|0x0
operator|,
name|CV
operator|=
literal|0x1
operator|,
comment|/// CodeView
name|PData
operator|=
literal|0x2
operator|,
comment|/// Procedure Data
name|Fixup
operator|=
literal|0x4
operator|,
comment|/// Relocation Table
block|}
empty_stmt|;
comment|// Global configuration.
struct|struct
name|Configuration
block|{
enum|enum
name|ManifestKind
block|{
name|SideBySide
block|,
name|Embed
block|,
name|No
block|}
enum|;
name|bool
name|is64
parameter_list|()
block|{
return|return
name|Machine
operator|==
name|AMD64
return|;
block|}
name|llvm
operator|::
name|COFF
operator|::
name|MachineTypes
name|Machine
operator|=
name|IMAGE_FILE_MACHINE_UNKNOWN
expr_stmt|;
name|bool
name|Verbose
init|=
name|false
decl_stmt|;
name|WindowsSubsystem
name|Subsystem
init|=
name|llvm
operator|::
name|COFF
operator|::
name|IMAGE_SUBSYSTEM_UNKNOWN
decl_stmt|;
name|SymbolBody
modifier|*
name|Entry
init|=
name|nullptr
decl_stmt|;
name|bool
name|NoEntry
init|=
name|false
decl_stmt|;
name|std
operator|::
name|string
name|OutputFile
expr_stmt|;
name|bool
name|ColorDiagnostics
decl_stmt|;
name|bool
name|DoGC
init|=
name|true
decl_stmt|;
name|bool
name|DoICF
init|=
name|true
decl_stmt|;
name|uint64_t
name|ErrorLimit
init|=
literal|20
decl_stmt|;
name|bool
name|Relocatable
init|=
name|true
decl_stmt|;
name|bool
name|Force
init|=
name|false
decl_stmt|;
name|bool
name|Debug
init|=
name|false
decl_stmt|;
name|bool
name|WriteSymtab
init|=
name|true
decl_stmt|;
name|unsigned
name|DebugTypes
init|=
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|DebugType
operator|::
name|None
operator|)
decl_stmt|;
name|llvm
operator|::
name|SmallString
operator|<
literal|128
operator|>
name|PDBPath
expr_stmt|;
comment|// Symbols in this set are considered as live by the garbage collector.
name|std
operator|::
name|set
operator|<
name|SymbolBody
operator|*
operator|>
name|GCRoot
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|StringRef
operator|>
name|NoDefaultLibs
expr_stmt|;
name|bool
name|NoDefaultLibAll
init|=
name|false
decl_stmt|;
comment|// True if we are creating a DLL.
name|bool
name|DLL
init|=
name|false
decl_stmt|;
name|StringRef
name|Implib
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|Export
operator|>
name|Exports
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|DelayLoads
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|int
operator|>
name|DLLOrder
expr_stmt|;
name|SymbolBody
modifier|*
name|DelayLoadHelper
init|=
name|nullptr
decl_stmt|;
name|bool
name|SaveTemps
init|=
name|false
decl_stmt|;
comment|// Used for SafeSEH.
name|Symbol
modifier|*
name|SEHTable
init|=
name|nullptr
decl_stmt|;
name|Symbol
modifier|*
name|SEHCount
init|=
name|nullptr
decl_stmt|;
comment|// Used for /opt:lldlto=N
name|unsigned
name|LTOOptLevel
init|=
literal|2
decl_stmt|;
comment|// Used for /opt:lldltojobs=N
name|unsigned
name|LTOJobs
init|=
literal|0
decl_stmt|;
comment|// Used for /opt:lldltopartitions=N
name|unsigned
name|LTOPartitions
init|=
literal|1
decl_stmt|;
comment|// Used for /merge:from=to (e.g. /merge:.rdata=.text)
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|StringRef
operator|>
name|Merge
expr_stmt|;
comment|// Used for /section=.name,{DEKPRSW} to set section attributes.
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|uint32_t
operator|>
name|Section
expr_stmt|;
comment|// Options for manifest files.
name|ManifestKind
name|Manifest
init|=
name|SideBySide
decl_stmt|;
name|int
name|ManifestID
init|=
literal|1
decl_stmt|;
name|StringRef
name|ManifestDependency
decl_stmt|;
name|bool
name|ManifestUAC
init|=
name|true
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|ManifestInput
expr_stmt|;
name|StringRef
name|ManifestLevel
init|=
literal|"'asInvoker'"
decl_stmt|;
name|StringRef
name|ManifestUIAccess
init|=
literal|"'false'"
decl_stmt|;
name|StringRef
name|ManifestFile
decl_stmt|;
comment|// Used for /failifmismatch.
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|StringRef
operator|>
name|MustMatch
expr_stmt|;
comment|// Used for /alternatename.
name|std
operator|::
name|map
operator|<
name|StringRef
operator|,
name|StringRef
operator|>
name|AlternateNames
expr_stmt|;
comment|// Used for /lldmap.
name|std
operator|::
name|string
name|MapFile
expr_stmt|;
name|uint64_t
name|ImageBase
init|=
operator|-
literal|1
decl_stmt|;
name|uint64_t
name|StackReserve
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|uint64_t
name|StackCommit
init|=
literal|4096
decl_stmt|;
name|uint64_t
name|HeapReserve
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|uint64_t
name|HeapCommit
init|=
literal|4096
decl_stmt|;
name|uint32_t
name|MajorImageVersion
init|=
literal|0
decl_stmt|;
name|uint32_t
name|MinorImageVersion
init|=
literal|0
decl_stmt|;
name|uint32_t
name|MajorOSVersion
init|=
literal|6
decl_stmt|;
name|uint32_t
name|MinorOSVersion
init|=
literal|0
decl_stmt|;
name|bool
name|DynamicBase
init|=
name|true
decl_stmt|;
name|bool
name|AllowBind
init|=
name|true
decl_stmt|;
name|bool
name|NxCompat
init|=
name|true
decl_stmt|;
name|bool
name|AllowIsolation
init|=
name|true
decl_stmt|;
name|bool
name|TerminalServerAware
init|=
name|true
decl_stmt|;
name|bool
name|LargeAddressAware
init|=
name|false
decl_stmt|;
name|bool
name|HighEntropyVA
init|=
name|false
decl_stmt|;
name|bool
name|AppContainer
init|=
name|false
decl_stmt|;
comment|// This is for debugging.
name|bool
name|DebugPdb
init|=
name|false
decl_stmt|;
name|bool
name|DumpPdb
init|=
name|false
decl_stmt|;
block|}
struct|;
specifier|extern
name|Configuration
modifier|*
name|Config
decl_stmt|;
block|}
comment|// namespace coff
block|}
end_decl_stmt

begin_comment
comment|// namespace lld
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

